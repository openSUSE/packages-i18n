# This file was automatically generated
msgid ""
msgstr ""
"Project-Id-Version: opensuse-i 18n\n"
"POT-Creation-Date: 2022-02-28 18:22+0000\n"
"PO-Revision-Date: 2023-12-24 04:02+0000\n"
"Last-Translator: Yasuhiko Kamata <belphegor@belbel.or.jp>\n"
"Language-Team: Japanese <https://l10n.opensuse.org/projects/packages-i18n/"
"perl-master/ja/>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.9.1\n"

#. leap-nonoss/perlref/summary
msgid "Perl 5 Reference Guide"
msgstr "Perl 5 リファレンスガイド"

#. leap-nonoss/perlref/description
msgid "Perl 5 Reference Guide in PS and PDF format"
msgstr "PS 形式および PDF 形式による Perl 5 リファレンスガイド"

#. leap/perl-Image-ExifTool/exiftool/summary
msgid "Customisable application to read and write meta information in files"
msgstr ""
"ファイル内のメタデータを読み書きするためのカスタマイズ可能なアプリケーション"

#. leap/perl-Image-ExifTool/exiftool/description
msgid ""
"ExifTool is a a full-featured application for reading and writing meta "
"information in a wide variety of files, including the maker note information "
"of many digital cameras by various manufacturers such as Canon, Casio, "
"FujiFilm, GE, HP, JVC/Victor, Kodak, Leaf, Minolta/Konica-Minolta, Nikon, "
"Olympus/Epson, Panasonic/Leica, Pentax/Asahi, Reconyx, Ricoh, Samsung, "
"Sanyo, Sigma/Foveon and Sony."
msgstr ""
"ExifTool はすべての機能が装備された、各種ファイル対応のメタデータを読み書きす"
"るアプリケーションです。デジタルカメラにおける製造元固有の情報にも対応してい"
"て、たとえばキヤノン, カシオ, 富士フイルム, GE, HP, JVC／ビクター, コダック, "
"Leaf, ミノルタ／コニカミノルタ, ニコン, オリンパス／エプソン, パナソニック／"
"ライカ, ペンタックス／旭光学, Reconyx, リコー, サムスン, サンヨー, Sigma/"
"Foveon, SONY などに対応しています。"

#. leap/perl-File-Unpack/file-unpack/summary
msgid "Command line tool to unpack anything"
msgstr "ファイルを展開するためのコマンドラインツール"

#. leap/perl-File-Unpack/file-unpack/description
msgid ""
"/usr/bin/file-unpack is a trivial command line frontend that ships with the "
"File::Unpack perl module."
msgstr ""
"/usr/bin/file-unpack は、 File::Unpack Perl モジュールに含まれる、よくあるコ"
"マンドラインフロントエンドです。"

#. leap/perl-Net-Pcap/pcapdump/summary
msgid "Dump packets from the network"
msgstr "ネットワークからのパケットのダンプ"

#. leap/perl-Net-Pcap/pcapdump/description
msgid ""
"Command line tool to dump packets from the network.\n"
"\n"
"pcapdump mimics the very basic features of tcpdump(1) and provides a good "
"example of how to use Net::Pcap."
msgstr ""
"ネットワークからパケットのダンプを行なうことができるコマンドラインツールで"
"す。\n"
"\n"
"pcapdump は tcpdump(1) のごく基本的な機能をまねているほか、 Net::Pcap の使い"
"方についてわかりやすい例を示しています。"

#. leap/perl-Net-Pcap/pcapinfo/summary
msgid "Prints detailed information about the network devices"
msgstr "ネットワークデバイスに対する詳細情報の表示"

#. leap/perl-Net-Pcap/pcapinfo/description
msgid ""
"pcapinfo prints detailed information about the network devices and Pcap "
"library available on the current host."
msgstr ""
"pcapinfo は、現在のホスト上にあるネットワークデバイスや、 Pcap ライブラリに対"
"する詳細な情報を出力します。"

#. leap/perl/perl-32bit/summary
#. leap/perl/summary
#. leap/perl/perl-base-32bit/summary
#. leap/perl/perl-base/summary
msgid "The Perl interpreter"
msgstr "Perl インタプリタ"

#. leap/perl/perl-32bit/description
#. leap/perl/description
msgid ""
"perl - Practical Extraction and Report Language\n"
"\n"
"Perl is optimized for scanning arbitrary text files, extracting information "
"from those text files, and printing reports based on that information.  It "
"is also good for many system management tasks. Perl is intended to be "
"practical (easy to use, efficient, and complete) rather than beautiful "
"(tiny, elegant, and minimal).\n"
"\n"
"Some of the modules available on CPAN can be found in the \"perl\" series."
msgstr ""
"perl - Practical Extraction and Report Language\n"
"\n"
"Perl は任意のテキストファイルを読み出してこれらのテキストから 必要な情報を取"
"り出し、これらの情報に基づく何らかのレポートを表示することに 長けています。ま"
"た、多くのシステム管理作業にも便利に使用することができます。\n"
"\n"
"Perl は美しさ (簡易性、美観、コンパクト性) よりも現実 (使いやすさ、便利さ、完"
"全性) を追求しています。\n"
"\n"
" \"perl\" で始まるパッケージ名で、 CPAN 提供のモジュールがいくつか提供されて"
"います。"

#. leap/perl-Acme-Damn/summary
msgid "'Unbless' Perl objects"
msgstr "Perl オブジェクトの 'unbless'"

#. leap/perl-Acme-Damn/description
msgid ""
"*Acme::Damn* provides a single routine, *damn()*, which takes a blessed "
"reference (a Perl object), and _unblesses_ it, to return the original "
"reference."
msgstr ""
"*Acme::Damn* は *damn()* と呼ばれる単一のルーチンを提供します。これは bless "
"された参照 (Perl オブジェクト) をパラメータにとり、 _unbless_ して元の参照を"
"返します。"

#. leap/perl-Algorithm-Annotate/summary
msgid "represent a series of changes in annotate form"
msgstr "注釈形式で変更点を表示"

#. leap/perl-Algorithm-Annotate/description
msgid ""
"Algorithm::Annotate generates a list that is useful for generating output "
"simliar to 'cvs annotate'."
msgstr ""
"Algorithm::Annotate は、 'cvs annotate' に似た出力を生成する際に便利なリスト"
"を生成します。"

#. leap/perl-Algorithm-C3/summary
msgid "Module for merging hierarchies using the C3 algorithm"
msgstr "C3 アルゴリズムを利用して階層構造を合成するためのモジュール"

#. leap/perl-Algorithm-C3/description
msgid ""
"This module implements the C3 algorithm. I have broken this out into it's "
"own module because I found myself copying and pasting it way too often for "
"various needs. Most of the uses I have for C3 revolve around class building "
"and metamodels, but it could also be used for things like dependency "
"resolution as well since it tends to do such a nice job of preserving local "
"precedence orderings.\n"
"\n"
"Below is a brief explanation of C3 taken from the Class::C3 module. For more "
"detailed information, see the SEE ALSO section and the links there."
msgstr ""
"このモジュールは C3 アルゴリズムを実装しています。なお、このモジュールは様々"
"な要件に合わせるためにコピーを切り返している箇所があるため、モジュールを分解"
"して対応しています。多くの用途では、クラスの構築やメタモデルに対して C3 を利"
"用しますが、ローカルでの優先順位を維持するのに便利な仕組みを作る目的があるこ"
"とから、依存関係の解決などにも利用することができます。\n"
"\n"
"下記は Class::C3 モジュールからの C3 の概要例です。詳しくは SEE ALSO セクショ"
"ンとそのリンク先をお読みください。"

#. leap/perl-Algorithm-CheckDigits/summary
#. leap/perl-Algorithm-CheckDigits/description
msgid "Perl extension to generate and test check digits"
msgstr "チェックディジットの生成とテストのための Perl 拡張"

#. leap/perl-Algorithm-Combinatorics/summary
msgid "Efficient generation of combinatorial sequences"
msgstr "組み合わせ数学の順列の効果的な生成"

#. leap/perl-Algorithm-Combinatorics/description
msgid ""
"Algorithm::Combinatorics is an efficient generator of combinatorial "
"sequences. Algorithms are selected from the literature (work in progress, "
"see the /REFERENCES manpage). Iterators do not use recursion, nor stacks, "
"and are written in C.\n"
"\n"
"Tuples are generated in lexicographic order, except in 'subsets()'."
msgstr ""
"Algorithm::Combinatorics は組み合わせ数学における順列を効果的に生成するための"
"仕組みです。アルゴリズムは選択することができます (現在作業中です。詳しくは /"
"REFERENCES マニュアルページをお読みください) 。列挙子では再帰化やスタックを使"
"用しておらず、 C 言語で記述されています。\n"
"\n"
"組は 'subsets()' を除いて、辞書順に生成されます。"

#. leap/perl-Algorithm-Diff/summary
#. leap/perl-Algorithm-Diff/description
msgid "Compute `intelligent' differences between two files / lists"
msgstr ""
"2 つのファイルやリストに対して、 'インテリジェントな' 差分を計算するツール"

#. leap/perl-Alien-Build/summary
msgid "Build external dependencies for use in CPAN"
msgstr "CPAN 内で使用される外部依存関係の構築"

#. leap/perl-Alien-Build/description
msgid ""
"This module provides tools for building external (non-CPAN) dependencies for "
"CPAN. It is mainly designed to be used at install time of a CPAN client, and "
"work closely with Alien::Base which is used at runtime."
msgstr ""
"このモジュールは、非 CPAN の外部依存関係を CPAN 向けに構築するためのツールで"
"す。主に CPAN クライアントのインストール時に使用することを目指して作られてい"
"るもので、実行時には Alien::Base と密接に協調動作します。"

#. leap/perl-Alien-SDL/summary
msgid "Building, Finding and Using Sdl Binaries"
msgstr "SDL バイナリの構築と検出、および使用"

#. leap/perl-Alien-SDL/description
msgid ""
"Please see the Alien manpage for the manifesto of the Alien namespace.\n"
"\n"
"In short 'Alien::SDL' can be used to detect and get configuration settings "
"from an installed SDL and related libraries. Based on your platform it "
"offers the possibility to download and install prebuilt binaries or to build "
"SDL & co. from source codes.\n"
"\n"
"The important facts: \n"
"* * The module does not modify in any way the already existing SDL   "
"installation on your system. \n"
"* * If you reinstall SDL libs on your system you do not need to   reinstall "
"Alien::SDL (providing that you use the same directory for   the new "
"installation). \n"
"* * The prebuild binaries and/or binaries built from sources are always   "
"installed into perl module's 'share' directory. \n"
"* * If you use prebuild binaries and/or binaries built from sources   it "
"happens that some of the dynamic libraries (*.so, *.dll) will not   "
"automaticly loadable as they will be stored somewhere under perl module's   "
"'share' directory. To handle this scenario Alien::SDL offers some special   "
"functionality (see below)."
msgstr ""
"Alien ネームスペースのマニフェストについて、詳しくは Alien のマニュアルページ"
"をお読みください。\n"
"\n"
"端的にいうと 'Alien::SDL' は、インストール済みの SDL および関連ライブラリから"
"設定情報を検出し、それらを取り出すために使用します。お使いのプラットフォーム"
"をベースにして、構築済みのバイナリをダウンロードしてインストールしたり、SDL "
"やその他のライブラリをソースコードから構築したりすることができます。\n"
"\n"
"主に下記のような特徴があります:\n"
"* * お使いのシステムにインストールされた SDL ライブラリは、本システムで一切修"
"正されることがありません。\n"
"* * お使いのシステムで SDL ライブラリを再インストールした場合も、 Alien::SDL "
"を再インストールする必要はありません (新しくインストールしたライブラリも、同"
"じディレクトリにインストールする必要があります) 。\n"
"* * 構築済みのバイナリやソースコードから構築したバイナリは、常に Perl モ"
"ジュールの 'share' ディレクトリ内にインストールされます。\n"
"* * 構築済みのバイナリやソースコードから構築したバイナリを使用する場合、Perl "
"モジュールの 'share' ディレクトリ内に存在していることから、いくつかの動的なラ"
"イブラリ (*.so, *.dll) が自動的に読み込まれない場合があります。このような場合"
"に対応するため、 Alien::SDL ではいくつかの特殊機能を用意しています (詳しくは"
"下記をお読みください) 。"

#. leap/perl-Alien-Tidyp/summary
#. leap/perl-Alien-Tidyp/description
msgid "Building, finding and using tidyp library - L<http://www.tidyp.com>"
msgstr "tidyp ライブラリ (<http://www.tidyp.com>) の構築／検出／使用"

#. leap/perl-Alien-wxWidgets/summary
msgid "Building, finding and using wxWidgets binaries"
msgstr "wxWidgets バイナリの構築／検出／使用"

#. leap/perl-Alien-wxWidgets/description
msgid ""
"Please see Alien for the manifesto of the Alien namespace.\n"
"\n"
"In short 'Alien::wxWidgets' can be used to detect and get configuration "
"settings from an installed wxWidgets."
msgstr ""
"Alien ネームスペースのマニフェストについて、詳しくは Alien をご覧ください。\n"
"\n"
"'Alian::wxWidgets' を端的に言うと、インストールされている wxWidgets を検出し"
"て設定情報を取得する機能を提供します。"

#. leap/perl-Any-Moose/summary
#. leap/perl-Any-Moose/description
msgid "(DEPRECATED) use Moo instead!"
msgstr "(廃止予定) 代わりに Moo をお使いください！"

#. leap/perl-AnyEvent/summary
msgid "The DBI of event loop programming"
msgstr "イベントループプログラミングの DBI"

#. leap/perl-AnyEvent/description
msgid ""
"AnyEvent provides a uniform interface to various event loops. This allows "
"module authors to use event loop functionality without forcing module users "
"to use a specific event loop implementation (since more than one event loop "
"cannot coexist peacefully).\n"
"\n"
"The interface itself is vaguely similar, but not identical to the Event "
"module.\n"
"\n"
"During the first call of any watcher-creation method, the module tries to "
"detect the currently loaded event loop by probing whether one of the "
"following modules is already loaded: EV, AnyEvent::Loop, Event, Glib, Tk, "
"Event::Lib, Qt, POE. The first one found is used. If none are detected, the "
"module tries to load the first four modules in the order given; but note "
"that if EV is not available, the pure-perl AnyEvent::Loop should always "
"work, so the other two are not normally tried.\n"
"\n"
"Because AnyEvent first checks for modules that are already loaded, loading "
"an event model explicitly before first using AnyEvent will likely make that "
"model the default. For example:\n"
"\n"
"   use Tk;    use AnyEvent;\n"
"\n"
"   \n"
"\n"
"The _likely_ means that, if any module loads another event model and starts "
"using it, all bets are off - this case should be very rare though, as very "
"few modules hardcode event loops without announcing this very loudly.\n"
"\n"
"The pure-perl implementation of AnyEvent is called 'AnyEvent::Loop'. Like "
"other event modules you can load it explicitly and enjoy the high "
"availability of that event loop :)"
msgstr ""
"AnyEvent は様々なイベントループに対する統一的なインターフェイスを提供する仕組"
"みです。これにより、モジュールを作成する際に、特定のイベントループの実装を強"
"制することなく、その機能を利用できるようになります (もちろん複数のイベント"
"ループが共存してしまうようなこともありません) 。\n"
"\n"
"インターフェイスそれ自身はイベントモジュールと非常に似通った仕組みになってい"
"ますが、全く同一というわけではありません。\n"
"\n"
"任意の watcher-creation メソッドが最初に呼び出されると、モジュールは下記のモ"
"ジュールの読み込み状況を確認して、現在読み込まれているイベントループを検出し"
"ようとします: EV, AnyEvent::Loop, Event, Glib, Tk, Event::Lib, Qt, POE 。この"
"うち、最初に見つかったものを使用しようとします。いずれも検出されない場合、モ"
"ジュールは上記の順序で最初の 4 つのモジュールを読み込みます。なお、 EV が利用"
"できない場合は、純粋な Perl モジュールとして作成された AnyEvent::Loop が使用"
"されることになり、その他の 2 つは通常使われません。\n"
"\n"
"AnyEvent は最初に読み込まれているモジュールを確認するため、 AnyEvent を利用す"
"るよりも前にイベントモデルが明示的に読み込まれると、それが既定値として使用さ"
"れるようになります。たとえば下記のようになります:\n"
"\n"
"   use Tk;     use AnyEvent;\n"
"\n"
"このような仕組みから、いずれかのモジュールで他のイベントモデルを読み込んでい"
"て、それを使用し始めている場合、 AnyEvent の仕組みは意味がなくなってしまいま"
"す。このような事態は非常に稀なものではありますが、モジュールによっては特にア"
"ナウンスされることなく、イベントループが使用されている場合もあります。\n"
"\n"
"AnyEvent の純粋 Perl 実装は 'AnyEvent::Loop' と呼ばれています。その他のイベン"
"トモジュールと同様に、明示的に読み込んでイベントループの高可用性を用いること"
"もできます :)"

#. leap/perl-AnyEvent-HTTP/summary
msgid "Simple but non-blocking HTTP/HTTPS client"
msgstr "シンプルながらも非ブロック型の HTTP/HTTPS クライアント"

#. leap/perl-AnyEvent-HTTP/description
msgid ""
"This module is an AnyEvent user, you need to make sure that you use and run "
"a supported event loop.\n"
"\n"
"This module implements a simple, stateless and non-blocking HTTP client. It "
"supports GET, POST and other request methods, cookies and more, all on a "
"very low level. It can follow redirects, supports proxies, and automatically "
"limits the number of connections to the values specified in the RFC.\n"
"\n"
"It should generally be a \"good client\" that is enough for most HTTP tasks. "
"Simple tasks should be simple, but complex tasks should still be possible as "
"the user retains control over request and response headers.\n"
"\n"
"The caller is responsible for authentication management, cookies (if the "
"simplistic implementation in this module doesn't suffice), referer and other "
"high-level protocol details for which this module offers only limited "
"support."
msgstr ""
"このモジュールは AnyEvent のユーザモジュールです。対応するイベントループを使"
"用していることを必ずご確認の上、お使いください。\n"
"\n"
"このモジュールはシンプルで状態を維持せず、かつ非ブロッキングな HTTP クライア"
"ントです。 GET, POST のほか、その他のリクエストメソッドや Cookie などに、非常"
"に低レベルなものとして対応しています。リダイレクトに追随する機能のほか、プロ"
"キシサーバへの対応や RFC で指定されている接続数の制限などに対応することができ"
"ます。\n"
"\n"
"このモジュールは、ほとんどの HTTP 処理に対して十分な機能を提供する \"良質なク"
"ライアント\" であるべきものです。シンプルな処理はシンプルに、複雑な処理もユー"
"ザがリクエストからレスポンスのヘッダに介在できる程度、使い物になることを目指"
"しています。\n"
"\n"
"呼び出し元は認証の管理や Cookie (このモジュール内の実装は最小限の実装で、不十"
"分かもしれません) に対して対応する必要がありますが、 Referer やその他の高レベ"
"ルな詳細機能については、このモジュールでは不十分かもしれません。"

#. leap/perl-AnyEvent-I3/summary
msgid "Communicate with the I3 Window Manager"
msgstr "I3 ウインドウマネージャとの通信"

#. leap/perl-AnyEvent-I3/description
msgid "communicate with the i3 window manager"
msgstr "i3 ウインドウマネージャの制御"

#. leap/perl-Apache-AuthCookie/summary
msgid "Perl Authentication and Authorization via cookies"
msgstr "cookie を利用した Perl の認証／認可モジュール"

#. leap/perl-Apache-AuthCookie/description
msgid ""
"*Apache::AuthCookie* allows you to intercept a user's first unauthenticated "
"access to a protected document. The user will be presented with a custom "
"form where they can enter authentication credentials. The credentials are "
"posted to the server where AuthCookie verifies them and returns a session "
"key.\n"
"\n"
"The session key is returned to the user's browser as a cookie. As a cookie, "
"the browser will pass the session key on every subsequent accesses. "
"AuthCookie will verify the session key and re-authenticate the user.\n"
"\n"
"All you have to do is write a custom module that inherits from AuthCookie. "
"Your module is a class which implements two methods: \n"
"* 'authen_cred()'\n"
"\n"
"Verify the user-supplied credentials and return a session key. The session "
"key can be any string - often you'll use some string containing username, "
"timeout info, and any other information you need to determine access to "
"documents, and append a one-way hash of those values together with some "
"secret key. \n"
"* 'authen_ses_key()'\n"
"\n"
"Verify the session key (previously generated by 'authen_cred()', possibly "
"during a previous request) and return the user ID. This user ID will be fed "
"to '$r->connection->user()' to set Apache's idea of who's logged in.\n"
"\n"
"By using AuthCookie versus Apache's built-in AuthBasic you can design your "
"own authentication system. There are several benefits. \n"
"* 1.\n"
"\n"
"The client doesn't *have* to pass the user credentials on every subsequent "
"access. If you're using passwords, this means that the password can be sent "
"on the first request only, and subsequent requests don't need to send this "
"(potentially sensitive) information. This is known as \"ticket-based\" "
"authentication. \n"
"* 2.\n"
"\n"
"When you determine that the client should stop using the credentials/session "
"key, the server can tell the client to delete the cookie. Letting users "
"\"log out\" is a notoriously impossible-to-solve problem of AuthBasic. \n"
"* 3.\n"
"\n"
"AuthBasic dialog boxes are ugly. You can design your own HTML login forms "
"when you use AuthCookie. \n"
"* 4.\n"
"\n"
"You can specify the domain of a cookie using PerlSetVar commands. For "
"instance, if your AuthName is 'WhatEver', you can put the command\n"
"\n"
" PerlSetVar WhatEverDomain .yourhost.com\n"
"\n"
"into your server setup file and your access cookies will span all hosts "
"ending in '.yourhost.com'. \n"
"* 5.\n"
"\n"
"You can optionally specify the name of your cookie using the 'CookieName' "
"directive. For instance, if your AuthName is 'WhatEver', you can put the "
"command\n"
"\n"
" PerlSetVar WhatEverCookieName MyCustomName\n"
"\n"
"into your server setup file and your cookies for this AuthCookie realm will "
"be named MyCustomName. Default is AuthType_AuthName. \n"
"* 6.\n"
"\n"
"By default users must satisfy ALL of the 'require' directives. If you want "
"authentication to succeed if ANY 'require' directives are met, use the "
"'Satisfy' directive. For instance, if your AuthName is 'WhatEver', you can "
"put the command\n"
"\n"
" PerlSetVar WhatEverSatisfy Any\n"
"\n"
"into your server startup file and authentication for this realm will succeed "
"if ANY of the 'require' directives are met.\n"
"\n"
"This is the flow of the authentication handler, less the details of the "
"redirects. Two REDIRECT's are used to keep the client from displaying the "
"user's credentials in the Location field. They don't really change "
"AuthCookie's model, but they do add another round-trip request to the "
"client.\n"
"\n"
" (-----------------------)     +---------------------------------+  "
"( Request a protected   )     | AuthCookie sets custom error    |  ( page, "
"but user hasn't )---->| document and returns            |  ( authenticated "
"(no     )     | FORBIDDEN. Apache abandons      |  ( session key "
"cookie)   )     | current request and creates sub |  "
"(-----------------------)     | request for the error document. |<-"
"+                                | Error document is a script that |  "
"|                                | generates a form where the user |  "
"|                  return        | enters authentication           |  "
"|           ^------------------->| credentials (login & password). |  "
"|          / \\      False        +---------------------------------+  "
"|         /   \\                                   |                   "
"|        /     \\                                  |                   "
"|       /       \\                                 V                   "
"|      /         \\               +---------------------------------+  "
"|     /   Pass    \\              | User's client submits this form |  "
"|    /   user's    \\             | to the LOGIN URL, which calls   |  |    "
"| credentials |<------------| AuthCookie->login().            |  |    \\     "
"to      /             +---------------------------------+  |     "
"\\authen_cred/                                                   |      \\ "
"function/                                                    |       "
"\\       /                                                     |        "
"\\     /                                                      |         "
"\\   /            +------------------------------------+     |          "
"\\ /   return    | Authen cred returns a session      |  +--+           "
"V------------->| key which is opaque to AuthCookie.*|  |                 "
"True     +------------------------------------+  "
"|                                               |                  "
"|                +--------------------+         |      +---------------"
"+                |                    |         |      | If we had a   "
"|                V                    |         V      | cookie, add   |   "
"+----------------------------+  r |         ^      | a Set-Cookie  |   | If "
"we didn't have a session|  e |T       / \\     | header to     |   | key "
"cookie, add a          |  t |r      /   \\    | override the  |   | Set-"
"Cookie header with this|  u |u     /     \\   | invalid cookie|   | session "
"key. Client then   |  r |e    /       \\  +---------------+   | returns "
"session key with   |  n |    /  pass   \\               ^   | successive "
"requests        |    |   /  session  \\              |   "
"+----------------------------+    |  /   key to    \\    return   "
"|                |                    +-| authen_ses_key|------------"
"+                V                       \\             /     False   "
"+-----------------------------------+ \\           /   | Tell Apache to set "
"Expires header,|  \\         /   | set user to user ID returned by   |   "
"\\       /   | authen_ses_key, set authentication|    \\     /   | to our "
"type (e.g. AuthCookie).    |     \\   /   "
"+-----------------------------------+      "
"\\ /                                               V          "
"(---------------------)              ^          ( Request a "
"protected )              |          ( page, user has a    )--------------"
"+          ( session key cookie  )          (---------------------)\n"
"\n"
"  *  The session key that the client gets can be anything you want.  For     "
"example, encrypted information about the user, a hash of the     username "
"and password (similar in function to Digest     authentication), or the user "
"name and password in plain text     (similar in function to HTTP Basic "
"authentication).\n"
"\n"
"    The only requirement is that the authen_ses_key function that you     "
"create must be able to determine if this session_key is valid and     map it "
"back to the originally authenticated user ID."
msgstr ""
"*Apache::AuthCookie* は、保護された文書に対して未認証のユーザが最初にアクセス"
"する際、それを遮るための仕組みを提供します。ユーザに対して、認証情報を入力す"
"るための独自のフォームを提示することができます。認証情報はサーバに送信され、 "
"AuthCookie がそれを検証してセッション鍵を取得します。\n"
"\n"
"セッション鍵はユーザのブラウザに対して Cookie として返されます。 Cookie を利"
"用することで、ブラウザはその後のアクセスに対しセッション鍵を送信するようにな"
"ります。 AuthCookie はセッション鍵を検証することで、必要であれば再認証を実施"
"することができます。\n"
"\n"
"このモジュールを利用することで、  AuthCookie を継承する独自のモジュールを作成"
"すれば、認証機能が実現できます。モジュールは 2 つのメソッドを実装するものとし"
"ます:\n"
"* 'authen_cred()'\n"
"\n"
"ユーザが提示した認証情報を検証し、セッション鍵を返します。セッション鍵は任意"
"の文字列を指定することができますが、ここにはユーザ名とタイムアウトに関する情"
"報、および文書にアクセスするための様々な情報の情報源となるべきものです。ま"
"た、機密鍵を用いた一方向関数によるハッシュ値を設定することもできます。\n"
"* 'authen_ses_key()'\n"
"\n"
"セッション鍵 ('authen_cred()' で事前に生成された鍵、通常は以前のリクエストで"
"処理したもの) を検証し、ユーザ ID を返します。ユーザ ID は Apache 側でユーザ"
"名を設定する目的で、'$r->connection->user()' に設定されます。\n"
"\n"
"AuthCookie は Apache の内蔵 AuthBasic とは異なり、独自の認証システムを構築す"
"ることができます。これにはいくつかの利点が存在します。\n"
"* 1.\n"
"\n"
"クライアント側でユーザの認証情報を保持し続ける必要がなくなります。パスワード"
"を利用している場合、このモジュールを利用すると、パスワード (機密情報) は最初"
"のリクエストまで保持しておけば十分で、その後のリクエストまで保持しておく必要"
"がなくなります。これは \"チケットベースの\" 認証と呼ばれる仕組みです。\n"
"* 2.\n"
"\n"
"クライアント側に認証情報やセッション鍵の使用を停止させたいとき、サーバ側から "
"Cookie の削除を依頼することができます。 AuthBasic を利用してしまうと、ユーザ"
"を明示的に \"ログアウト\" させることは不可能である、という厄介な問題がありま"
"す。\n"
"* 3.\n"
"\n"
"AuthBasic のダイアログボックスはわかりにくいものです。 AuthCookie を利用すれ"
"ば、独自の HTML ログインフォームを設定することができます。\n"
"* 4.\n"
"\n"
"PerlSetVar コマンドを利用すれば、 Cookie のドメインを指定することができます。"
"たとえば、 AuthName が 'WhatEver' であるとすると、下記のようなコマンドになり"
"ます:\n"
"\n"
" PerlSetVar WhatEverDomain .yourhost.com\n"
"\n"
"これをお使いのサーバのセットアップファイルに設定することで、 '.yourhost.com' "
"で終わる全てのホストから Cookie にアクセスできるようになります。\n"
"* 5.\n"
"\n"
"必要であれば、 'CookieName' ディレクティブを利用して、 Cookie の名前を指定す"
"ることができます。たとえば、 AuthName が 'WhatEver' であるとすると、下記のよ"
"うなコマンドになります:\n"
"\n"
" PerlSetVar WhatEverCookieName MyCustomName\n"
"\n"
"これをお使いのサーバのセットアップファイルに設定することで、 AuthCookie の名"
"前が MyCustomName になります。既定値は AuthType_AuthName です。\n"
"* 6.\n"
"\n"
"既定では、ユーザが全ての 'require' ディレクティブを満たさなければなりません。"
"任意の 'require' ディレクティブを満たすだけでアクセスを許可したい場合は、 "
"'Satisfy' ディレクティブを使用します。たとえば、 AuthName が 'WhatEver' であ"
"るとすると、下記のようなコマンドになります:\n"
"\n"
" PerlSetVar WhatEverSatisfy Any\n"
"\n"
"これをお使いのサーバのセットアップファイルに設定することで、任意の 'require' "
"ディレクティブを満たすことでアクセスを許可するようになります。\n"
"\n"
"下記は認証ハンドラの流れを図にしたものです (リダイレクトについての詳細は省い"
"ています) 。 2 つのリダイレクト (REDIRECT) は、クライアントに対してユーザの認"
"証情報を Location フィールドに表示させないための仕組みです。この方法では "
"AuthCookie のモデルを変更することはありませんが、クライアントとの往復回数が増"
"えてしまいます。\n"
"\n"
" (-----------------------)     +---------------------------------+  "
"( Request a protected   )     | AuthCookie sets custom error    |  ( page, "
"but user hasn't )---->| document and returns            |  ( authenticated "
"(no     )     | FORBIDDEN. Apache abandons      |  ( session key "
"cookie)   )     | current request and creates sub |  "
"(-----------------------)     | request for the error document. |<-"
"+                                | Error document is a script that |  "
"|                                | generates a form where the user |  "
"|                  return        | enters authentication           |  "
"|           ^------------------->| credentials (login & password). |  "
"|          / \\      False        +---------------------------------+  "
"|         /   \\                                   |                   "
"|        /     \\                                  |                   "
"|       /       \\                                 V                   "
"|      /         \\               +---------------------------------+  "
"|     /   Pass    \\              | User's client submits this form |  "
"|    /   user's    \\             | to the LOGIN URL, which calls   |  |    "
"| credentials |<------------| AuthCookie->login().            |  |    \\     "
"to      /             +---------------------------------+  |     "
"\\authen_cred/                                                   |      \\ "
"function/                                                    |       "
"\\       /                                                     |        "
"\\     /                                                      |         "
"\\   /            +------------------------------------+     |          "
"\\ /   return    | Authen cred returns a session      |  +--+           "
"V------------->| key which is opaque to AuthCookie.*|  |                 "
"True     +------------------------------------+  "
"|                                               |                  "
"|                +--------------------+         |      +---------------"
"+                |                    |         |      | If we had a   "
"|                V                    |         V      | cookie, add   |   "
"+----------------------------+  r |         ^      | a Set-Cookie  |   | If "
"we didn't have a session|  e |T       / \\     | header to     |   | key "
"cookie, add a          |  t |r      /   \\    | override the  |   | Set-"
"Cookie header with this|  u |u     /     \\   | invalid cookie|   | session "
"key. Client then   |  r |e    /       \\  +---------------+   | returns "
"session key with   |  n |    /  pass   \\               ^   | successive "
"requests        |    |   /  session  \\              |   "
"+----------------------------+    |  /   key to    \\    return   "
"|                |                    +-| authen_ses_key|------------"
"+                V                       \\             /     False   "
"+-----------------------------------+ \\           /   | Tell Apache to set "
"Expires header,|  \\         /   | set user to user ID returned by   |   "
"\\       /   | authen_ses_key, set authentication|    \\     /   | to our "
"type (e.g. AuthCookie).    |     \\   /   "
"+-----------------------------------+      "
"\\ /                                               V          "
"(---------------------)              ^          ( Request a "
"protected )              |          ( page, user has a    )--------------"
"+          ( session key cookie  )          (---------------------)\n"
"  *  クライアントが取得するセッション鍵は、任意のものでかまいません。たとえば"
"ユーザに関する情報を暗号化して保持してもかまいませんし、ユーザ名とパスワード"
"をハッシュ化したもの (Digest 認証のように) でもかまいません。もちろん、ユーザ"
"名とパスワードをそのまま (HTTP Basic 認証のように) 記述してもかまいません。\n"
"\n"
"    唯一の要件は、 authen_ses_key でセッション鍵の検証ができることと、セッ"
"ション鍵から認証済みのユーザ ID を参照できることだけです。"

#. leap/perl-Apache-DBI/summary
msgid "Initiate a persistent database connection"
msgstr "持続性のあるデータベース接続の準備"

#. leap/perl-Apache-DBI/description
msgid ""
"This module initiates a persistent database connection.\n"
"\n"
"The database access uses Perl's DBI. For supported DBI drivers see:\n"
"\n"
" http://dbi.perl.org/\n"
"\n"
"When loading the DBI module (do not confuse this with the Apache::DBI "
"module) it checks if the environment variable 'MOD_PERL' has been set and if "
"the module Apache::DBI has been loaded. In this case every connect request "
"will be forwarded to the Apache::DBI module. This checks if a database "
"handle from a previous connect request is already stored and if this handle "
"is still valid using the ping method. If these two conditions are fulfilled "
"it just returns the database handle. The parameters defining the connection "
"have to be exactly the same, including the connect attributes! If there is "
"no appropriate database handle or if the ping method fails, a new connection "
"is established and the handle is stored for later re-use. There is no need "
"to remove the disconnect statements from your code. They won't do anything "
"because the Apache::DBI module overloads the disconnect method."
msgstr ""
"このモジュールは、データベースとの永続的な接続を行ないます。\n"
"\n"
"データベースへのアクセスは Perl の DBI を使用します。対応する DBI ドライバに"
"ついて、詳しくは下記をお読みください:\n"
"\n"
" http://dbi.perl.org/\n"
"\n"
"DBI モジュールを読み込む際 (Apache::DBI ではありません！) 、環境変数の "
"'MOD_PERL' が設定されているかどうかと、 Apache::DBI が読み込まれているかどう"
"かを確認します。それぞれのリクエストが Apache::DBI に渡るものと仮定すると、こ"
"れによって直前のリクエスト内で作成されたデータベースハンドルが存在するかどう"
"かを確認し、存在していれば ping メソッドで通信をチェックします。データベース"
"ハンドルが存在していて ping メソッドにも問題がなければ、そのデータベースハン"
"ドルをそのまま返します。接続の属性を含め、データベース接続の設定は全く同じに"
"なります。もしも適切なデータベースハンドルが存在していなかったり、 ping メ"
"ソッドが失敗したりした場合は、新しい接続を開いて、後からの再利用のためにその"
"ハンドルを保存します。もちろんお使いのコードから、disconnect ステートメントを"
"削除する必要もありません。 Apache::DBI 側でdisconnect リクエストをオーバライ"
"ドしていますので、何も心配する必要はありません。"

#. leap/perl-Apache-Filter/summary
msgid "Alter the output of previous handlers"
msgstr "以前のハンドラ出力の修正"

#. leap/perl-Apache-Filter/description
msgid ""
"In basic operation, each of the handlers Filter1, Filter2, and Filter3 will "
"make a call to $r->filter_input(), which will return a filehandle.  For "
"Filter1, the filehandle points to the requested file. For Filter2, the "
"filehandle contains whatever Filter1 wrote to STDOUT. For Filter3, it "
"contains whatever Filter3 wrote to STDOUT. The output of Filter3 goes "
"directly to the browser.\n"
"\n"
"Note that the modules Filter1, Filter2, and Filter3 are listed in forward "
"order, in contrast to the reverse-order listing of Apache::OutputChain.\n"
"\n"
"When you've got this module, you can use the same handler both as a stand-"
"alone handler, and as an element in a chain. Just make sure that whenever "
"you're chaining, all the handlers in the chain are \"Filter- aware,\" i.e. "
"they each call $r->filter_register() exactly once, before they start "
"printing to STDOUT. There should be almost no overhead for doing this when "
"there's only one element in the chain."
msgstr ""
"基本操作では、 Filter1, Filter2, Filter3 の各ハンドラは $r->filter_input() を"
"呼び出し、ファイルハンドルを返します。 Filter1 の場合、ファイルハンドルは要求"
"されたファイルを示します。 Filter2 の場合、 Filter1 が標準出力に書き込んだ内"
"容を含むファイルハンドルを返します。また、 Filter3 の場合、 Filter3 が標準出"
"力に書き込んだ内容を含むファイルハンドルを返します。 Filter3 の出力はブラウザ"
"に直接届きます。\n"
"\n"
"なお、 Filter1, Filter2, Filter3 の各モジュールは、 Apache::OutputChain のよ"
"うな逆順ではなく、正順に並べられます。\n"
"\n"
"また、このモジュールを使用する際には、単独のハンドラとして使用するだけでな"
"く、チェイン内の要素として同じハンドラを使用することができます。また、チェイ"
"ン処理であることを明らかにするため、チェイン内のすべてのハンドラを \"フィルタ"
"対応\" にします。つまり、それぞれのハンドラでは、 STDOUT に出力する前に $r-"
">filter_register() を確実に一度だけ呼び出してください。チェイン内に 1 つの要"
"素しか存在しない場合は、ほとんどオーバーヘッドになりません。"

#. leap/perl-Apache-LogFormat-Compiler/summary
msgid "Compile a log format string to perl-code"
msgstr "ログ書式文字列からの Perl コードへのコンパイル"

#. leap/perl-Apache-LogFormat-Compiler/description
msgid ""
"Compile a log format string to perl-code. For faster generation of "
"access_log lines."
msgstr ""
"ログ書式文字列を Perl のコードにコンパイルします。 access_log の行をより高速"
"に生成するための仕組みです。"

#. leap/perl-Apache-Session/summary
msgid "Persistence framework for session data"
msgstr "セッションデータ向け永続フレームワーク"

#. leap/perl-Apache-Session/description
msgid ""
"Apache::Session is a persistence framework which is particularly useful for "
"tracking session data between httpd requests. Apache::Session is designed to "
"work with Apache and mod_perl, but it should work under CGI and other web "
"servers, and it also works outside of a web server altogether.\n"
"\n"
"Apache::Session consists of five components: the interface, the object "
"store, the lock manager, the ID generator, and the serializer. The interface "
"is defined in Session.pm, which is meant to be easily subclassed. The object "
"store can be the filesystem, a Berkeley DB, a MySQL DB, an Oracle DB, a "
"Postgres DB, Sybase, or Informix. Locking is done by lock files, semaphores, "
"or the locking capabilities of the various databases. Serialization is done "
"via Storable, and optionally ASCII-fied via MIME or pack(). ID numbers are "
"generated via MD5. The reader is encouraged to extend these capabilities to "
"meet his own requirements.\n"
"\n"
"A derived class of Apache::Session is used to tie together the three "
"following components. The derived class inherits the interface from Apache::"
"Session, and specifies which store and locker classes to use. Apache::"
"Session::MySQL, for instance, uses the MySQL storage class and also the "
"MySQL locking class. You can easily plug in your own object store or locker "
"class."
msgstr ""
"Apache::Session は httpd リクエスト間をまたがるセッションについて、それを追跡"
"するのに特に便利な永続フレームワークです。 Apache::Session は Apache と "
"mod_perl を利用するよう設計されていますが、他の CGI や Web サーバでも動作する"
"ほか、 Web サーバ外でも利用することができます。\n"
"\n"
"Apache::Session は 5 種類のコンポーネントから構成されています。それぞれイン"
"ターフェイス, オブジェクトストア, ロックマネージャ, ID 生成器, シリアライザで"
"す。インターフェイスは Session.pm 内で定義されていて、容易にサブクラス化がで"
"きるようになっています。オブジェクトストアはファイルシステムのほか、 "
"Berkeley DB や MySQL DB, Oracle DB, Postgres DB, Sybase, Informix などを利用"
"することができます。ロック機構はファイルロックのほか、セマフォやデータベース"
"に搭載されたロックを利用して提供されます。シリアライズは Storable のほか、オ"
"プションで MIME を利用した ASCII 化や pack() を利用することができます。 ID "
"は MD5 で生成されます。なお、これらの機能を拡張して必要な要件に合うようにして"
"ください。\n"
"\n"
"派生クラスである Apache::Session は、 3 種類のコンポーネントの組み合わせから"
"なっています。派生クラスは Apache::Session のインターフェイスを継承していて、"
"どのストアやロッカークラスを使用するのかを指定しています。たとえば Apache::"
"Session::MySQL は、 MySQL のストレージクラスとロック機構を使用しています。容"
"易に独自のオブジェクトストアやロッカークラスを使用することもできます。"

#. leap/perl-Apache-SessionX/summary
msgid "Persistent Storage for Arbitrary Data (for Embperl)"
msgstr "任意のデータ向け永続ストレージ (Embperl 向け)"

#. leap/perl-Apache-SessionX/description
msgid ""
"Apache::SessionX extends Apache::Session. It was initially written to use "
"Apache::Session from inside of HTML::Embperl, but is seems to be useful "
"outside of Embperl as well, so here is it as standalone module."
msgstr ""
"Apache::SessionX は Apache::Session の拡張形です。当初は HTML::EmbPerl の内側"
"で Apache::Session を使用していましたが、 Embperl の外側のほうが便利であるこ"
"とが分かり、単独のモジュールとなりました。"

#. leap/perl-Apache2-AuthCookieDBI/summary
msgid "An AuthCookie module backed by a DBI database"
msgstr "DBI データベースをバックエンドとする AuthCookie モジュール"

#. leap/perl-Apache2-AuthCookieDBI/description
msgid ""
"This module is an authentication handler that uses the basic mechanism "
"provided by Apache2::AuthCookie with a DBI database for ticket-based "
"protection. It is based on two tokens being provided, a username and "
"password, which can be any strings (there are no illegal characters for "
"either). The username is used to set the remote user as if Basic "
"Authentication was used.\n"
"\n"
"On an attempt to access a protected location without a valid cookie being "
"provided, the module prints an HTML login form (produced by a CGI or any "
"other handler; this can be a static file if you want to always send people "
"to the same entry page when they log in). This login form has fields for "
"username and password. On submitting it, the username and password are "
"looked up in the DBI database. The supplied password is checked against the "
"password in the database; the password in the database can be plaintext, or "
"a crypt() or md5_hex() checksum of the password. If this succeeds, the user "
"is issued a ticket. This ticket contains the username, an issue time, an "
"expire time, and an MD5 checksum of those and a secret key for the server. "
"It can optionally be encrypted before returning it to the client in the "
"cookie; encryption is only useful for preventing the client from seeing the "
"expire time. If you wish to protect passwords in transport, use an SSL-"
"encrypted connection. The ticket is given in a cookie that the browser "
"stores.\n"
"\n"
"After a login the user is redirected to the location they originally wished "
"to view (or to a fixed page if the login \"script\" was really a static "
"file).\n"
"\n"
"On this access and any subsequent attempt to access a protected document, "
"the browser returns the ticket to the server. The server unencrypts it if "
"encrypted tickets are enabled, then extracts the username, issue time, "
"expire time and checksum. A new checksum is calculated of the username, "
"issue time, expire time and the secret key again; if it agrees with the "
"checksum that the client supplied, we know that the data has not been "
"tampered with. We next check that the expire time has not passed. If not, "
"the ticket is still good, so we set the username.\n"
"\n"
"Authorization checks then check that any \"require valid-user\" or \"require "
"user jacob\" settings are passed. Finally, if a \"require group foo\" "
"directive was given, the module will look up the username in a groups "
"database and check that the user is a member of one of the groups listed. If "
"all these checks pass, the document requested is displayed.\n"
"\n"
"If a ticket has expired or is otherwise invalid it is cleared in the browser "
"and the login form is shown again."
msgstr ""
"このモジュールは、チケットベースの保護を DBI データベースを利用して実施する "
"Apache2::AuthCookie モジュールに対して、その基本的な機構を使用する認証ハンド"
"ラです。提供される 2 つのトークン、具体的には二回の文字を利用することのでき"
"る、ユーザ名とパスワードをベースにしているものです。ユーザ名は、 Basic 認証を"
"利用している際にリモートユーザとしても使用されるものです。\n"
"\n"
"正しい Cookie が提示されない状況下で保護された場所にアクセスが到達すると、こ"
"のモジュールは HTML のログインフォームを表示します。表示にあたっては CGI また"
"は任意のハンドラを利用することができるほか、ログイン時に個別のフォームを表示"
"する必要がなければ、静的なファイルを表示することもできます。このログイン"
"フォームにはユーザ名とパスワードの閣フィールドが存在しているものとします。"
"フォームを送信すると、 DBI データベース内でユーザ名とパスワードを検索します。"
"パスワードはデータベース内で検索を行ないますが、パスワードはプレーンテキスト "
"(何も暗号化していないテキスト) のほか、 crypt() や md5_hex() でチェックサムと"
"してパスワードを検索することもできます。検索が成功すると、ユーザに対してチ"
"ケットが発行されます。チケットにはユーザ名と発行日時のほか、期限切れ日時と"
"サーバの機密鍵に対する MD5 のチェックサムが含まれます。このほか、クライアント"
"に Cookie を返す際に、それらを暗号化することもできます。暗号化は期限切れ日時"
"をクライアント側に隠蔽したりする際に便利な仕組みです。パスワードの送信を保護"
"したい場合は、 SSL での暗号化を利用します。 Cookie はブラウザ側に保存され、後"
"続のリクエストで送信するようになります。\n"
"\n"
"ユーザがログインしたあとは、もともとユーザがリクエストしていたページに再転送"
"されます (ログインスクリプトが静的なファイルであった場合は、固定のページに戻"
"ります) 。\n"
"\n"
"このアクセス、もしくは後続のアクセスで保護対象の文書が指定されると、ブラウザ"
"はサーバに対してチケットを送信します。サーバはチケットが暗号化されていればそ"
"れを解読し、ユーザ名と発行日時、期限切れ日時とチェックサムを取り出します。"
"サーバ側では、ユーザ名と発行日時、期限切れ日時と機密鍵を利用してチェックサム"
"を計算し直します; もしもクライアントが送信したチェックサムとサーバ側で計算し"
"たチェックサムが正しければ、それらは改ざんされていないものと判断することがで"
"きます。また、期限切れの日時が過ぎていないかどうかもチェックします。\n"
"\n"
"認証チェックでは、まず \"require valid-user\" もしくは \"require user jacob"
"\" のような設定をチェックします。最後に \"require group foo\" のようなディレ"
"クティブが存在すれば、モジュールはグループデータベースを検索して、指定された"
"グループのメンバー内に、ユーザが存在するかどうかを確認します。全てのチェック"
"で問題がなければ、要求された文書が表示されます。\n"
"\n"
"チケットの期限が切れていたり、何らかの不整合が検出されると、ブラウザ内の "
"Cookie は消去され、再度ログインフォームが表示されます。"

#. leap/perl-App-CELL/summary
msgid "Configuration, Error-handling, Localization, and Logging"
msgstr "設定／エラー処理／ローカライズ／ログ"

#. leap/perl-App-CELL/description
msgid ""
"This is the top-level module of App::CELL, the Configuration, Error-"
"handling, Localization, and Logging framework for applications (or scripts) "
"written in Perl.\n"
"\n"
"For details, read the POD in the App::CELL distro. For an introduction, read "
"App::CELL::Guide."
msgstr ""
"これは App::CELL のトップレベルモジュールで、 Perl で書かれたアプリケーション"
"向けに設定やエラー処理、ローカライズやログ処理のフレームワークを提供するもの"
"です。\n"
"\n"
"詳しくは App::CELL 配布物の POD をお読みください。また、概要については App::"
"CELL::Guide をお読みください。"

#. leap/perl-App-CLI/summary
msgid "Dispatcher module for command line interface programs"
msgstr "コマンドラインインターフェイスプログラム向けディスパッチャモジュール"

#. leap/perl-App-CLI/description
msgid ""
"'App::CLI' dispatches CLI (command line interface) based commands into "
"command classes. It also supports subcommand and per-command options."
msgstr ""
"'App::CLI' は CLI (コマンドラインインターフェイス) ベースのコマンドを、コマン"
"ドクラスに発信します。サブコマンドにも対応しているほか、コマンドごとのオプ"
"ションにも対応しています。"

#. leap/perl-App-Cmd/summary
msgid "Write command line apps with less suffering"
msgstr "難なくコマンドラインアプリを作成するための仕組み"

#. leap/perl-App-Cmd/description
msgid ""
"App::Cmd is intended to make it easy to write complex command-line "
"applications without having to think about most of the annoying things "
"usually involved.\n"
"\n"
"For information on how to start using App::Cmd, see App::Cmd::Tutorial."
msgstr ""
"App::Cmd は複雑なコマンドラインアプリケーションを、よくある手間に悩まされるこ"
"となく簡単に作成できるようにすることができるモジュールです。\n"
"\n"
"App::Cmd の使い始め方について、詳しくは App::Cmd::Tutorial をお読みください。"

#. leap/perl-App-Dochazka-CLI/summary
msgid "Dochazka command line client"
msgstr "Dochazka コマンドラインクライアント"

#. leap/perl-App-Dochazka-CLI/description
msgid ""
"App::Dochazka::CLI is the Command Line Interface (CLI) component of the "
"Dochazka Attendance & Time Tracking system.\n"
"\n"
"In order to work, the CLI must be pointed at a running App::Dochazka::REST "
"(i.e., Dochazka REST server) instance by setting the 'MREST_CLI_URI_BASE' "
"meta configuration parameter.\n"
"\n"
"Detailed documentation covering configuration, deployment, and the commands "
"that can be used with the CLI can be found in App::Dochazka::CLI::Guide.\n"
"\n"
"This module is used to store some \"global\" package variables that are used "
"throughout the CLI code base."
msgstr ""
"App::Dochazka::CLI は Dochazka 会議管理／時間管理システムのコマンドラインイン"
"ターフェイス (CLI) コンポーネントです。\n"
"\n"
"このモジュールを動作させるには、 'MREST_CLI_URI_BASE' メタ設定パラメータを指"
"定して、 CLI が App::Dochazka::REST が実行されているマシン (Dochazka REST "
"サーバ) を示すように設定しなければなりません。\n"
"\n"
"設定や配置、 CLI で利用可能なコマンドなどについて、詳しくは App::Dochzka::"
"CLI::Guide をお読みください。\n"
"\n"
"このモジュールは、 CLI のコードベース内で使用されるいくつかの \"グローバル\" "
"パッケージを保持しています。"

#. leap/perl-App-Dochazka-Common/summary
msgid "Dochazka Attendance and Time Tracking System shared modules"
msgstr "Dochazka 会議管理／時間管理共有モジュール"

#. leap/perl-App-Dochazka-Common/description
msgid ""
"This distro contains modules that are used by both the server the App::"
"Dochazka::REST manpage and the command-line client the App::Dochazka::CLI "
"manpage."
msgstr ""
"この配布物には、サーバ側である App::Dochazka::REST と、コマンドラインクライア"
"ントである App::Dochazka::CLI の両方で使用されるモジュールが含まれています。"

#. leap/perl-App-Dochazka-REST/summary
msgid "Dochazka REST server"
msgstr "Dochazka REST サーバ"

#. leap/perl-App-Dochazka-REST/description
msgid ""
"This distribution, the App::Dochazka::REST manpage, including all the "
"modules in 'lib/', the scripts in 'bin/', and the configuration files in "
"'config/', constitutes the REST server (API) component of Dochazka, the open-"
"source Attendance/Time Tracking (ATT) system.\n"
"\n"
"Dochazka as a whole aims to be a convenient, open-source ATT solution."
msgstr ""
"この配布物 (App::Dochazka::REST) には、 'lib/' 内に全てのモジュールが、 "
"'bin/' 内にスクリプトが、 'config/' 内に設定ファイルがそれぞれ含まれていま"
"す。これにより、 Dochazka (オープンソースの会議管理／時間管理 (ATT) システ"
"ム) の REST サーバ (API) コンポーネントを構成します。\n"
"\n"
"Dochazka は便利なオープンソース ATT ソリューションを提供しています。"

#. leap/perl-App-Dochazka-WWW/summary
msgid "Dochazka Attendance & Time Tracking system web client"
msgstr "Dochazka 会議管理／時間管理システムの Web クライアント"

#. leap/perl-App-Dochazka-WWW/description
msgid ""
"This is the web client of the Dochazka Attendance & Time Tracking system. "
"For more information see the App::Dochazka::REST manpage and the App::MFILE::"
"WWW manpage."
msgstr ""
"これは Dochazka 会議管理／時間管理システムの Web クライアントです。詳しい情報"
"は App::Dochazka::REST および App::MFILE::WWW をご覧ください。"

#. leap/perl-App-FatPacker/summary
msgid "Pack Your Dependencies Onto Your Script File"
msgstr "スクリプトファイル内への依存関係の取り込み"

#. leap/perl-App-FatPacker/description
msgid "pack your dependencies onto your script file"
msgstr ""
"お使いのスクリプトファイル内に、依存関係となるものを取り込むことができます。"

#. leap/perl-App-MFILE/summary
msgid "MFILE shared modules"
msgstr "MFILE 共有モジュール"

#. leap/perl-App-MFILE/description
msgid ""
"This distro consists of general, reusable modules. Currently, there is only "
"one module, App::MFILE::HTTP, which is used by App::MFILE::WWW, App::"
"Dochazka::WWW, and App::Dochazka::CLI."
msgstr ""
"この配布物には、汎用的で再利用性のあるモジュールが含まれています。現時点で"
"は、 App::MFILE::HTTP と呼ばれるモジュールだけが含まれています。これはそれぞ"
"れ App::MFILE::WWW, App::Dochazka::WWW, App::Dochazka::CLI で使用されていま"
"す。"

#. leap/perl-App-MFILE-WWW/summary
msgid "Web UI development toolkit with prototype demo app"
msgstr "プロトタイプデモアプリが付属する Web UI 開発ツールキット"

#. leap/perl-App-MFILE-WWW/description
msgid ""
"This distro contains a foundation/framework/toolkit for developing the "
"\"front end\" portion of web applications.\n"
"\n"
"App::MFILE::WWW is a Plack application that provides a HTTP request-response "
"handler (based on Web::Machine), CSS and HTML source code for an in-browser "
"\"screen\", and JavaScript code for displaying various \"widgets\" (menus, "
"forms, etc.) in that screen and for processing user input from within those "
"widgets.\n"
"\n"
"In addition, infrastructure is included (but need not be used) for user "
"authentication, session management, and communication with a backend server "
"via AJAX calls.\n"
"\n"
"Front ends built with App::MFILE::WWW will typicaly be menu-driven, "
"consisting exclusively of fixed-width Unicode text, and capable of being "
"controlled from the keyboard, without the use of a mouse. The overall look-"
"and-feel is reminiscent of the text terminal era.\n"
"\n"
"The distro comes with a prototype (demo) application to illustrate how the "
"various widgets are used."
msgstr ""
"この配布物には、 Web アプリケーションの \"フロントエンド\" を開発するための基"
"礎／フレームワーク／ツールキットが含まれています。\n"
"\n"
"App::MFILE::WWW は (Web::Machine をベースにして) HTTP のリクエスト／レスポン"
"スヘッダや CSS, HTML ソースコードをブラウザ内の \"画面\" として提供する "
"Plack アプリケーションです。このほか、様々な \"ウイジェット\" を画面内に表示"
"し、それらに対してユーザからの入力を受け付けるための JavaScript コードも含ま"
"れています。\n"
"\n"
"これに加えて、ユーザ認証やセッション管理、 AJAX コールを介したバックエンド"
"サーバとの通信などを行なうための、インフラストラクチャも含まれています。\n"
"\n"
"App::MFILE::WWW で構築されたフロントエンドは一般に、等幅の Unicode テキストを"
"利用して、マウス無しでもキーボードだけで操作することのできるメニューを中心"
"に、動作する仕組みとなります。外観はテキストターミナルを使っていた時代のもの"
"を提供しています。\n"
"\n"
"この配布物には、様々なウイジェットに対する使用方法を説明するためのプロトタイ"
"プ (デモ) アプリケーションも含まれています。"

#. leap/perl-App-Nopaste/summary
msgid "Easy access to any pastebin"
msgstr "任意の pastebin に対する簡易アクセス"

#. leap/perl-App-Nopaste/description
msgid ""
"Pastebins (also known as nopaste sites) let you post text, usually code, for "
"public viewing. They're used a lot in IRC channels to show code that would "
"normally be too long to give directly in the channel (hence the name "
"nopaste).\n"
"\n"
"Each pastebin is slightly different. When one pastebin goes down (I'm "
"looking at you, http://paste.husk.org), then you have to find a new one. And "
"if you usually use a script to publish text, then it's too much hassle.\n"
"\n"
"This module aims to smooth out the differences between pastebins, and "
"provides redundancy: if one site doesn't work, it just tries a different "
"one.\n"
"\n"
"It's also modular: you only need to put on CPAN a App::Nopaste::Service::Foo "
"module and anyone can begin using it."
msgstr ""
"pastebin (nopaste サイトとしても知られています) では、テキスト (主にソース"
"コード) を投稿してそれを公開する機能を提供しています。様々な IRC チャンネルで"
"は、このサイトを利用することで、冗長なテキストをそのまま貼り付けてしまわない"
"ようにしています (そのような理由から、 \"nopaste\" (貼らないで) という名前が"
"つけられています) 。\n"
"\n"
"各 pastebin のサイトは少しずつ異なります。いずれかの pastebin のサイトがダウ"
"ンした場合 (たとえば http://paste.husk.org など) でも、別のサイトを利用するこ"
"とができますが、テキストを公開する際にスクリプトを利用しているような場合は、"
"少し面倒です。\n"
"\n"
"このモジュールは、様々な pastebin サイトにおける差異を吸収し、冗長性を提供す"
"ることを目的にしています: いずれかのサイトがダウンしても、そのまま別のサイト"
"を利用できるようにします。\n"
"\n"
"また、このモジュールはサブモジュールを作成することもできます。 CPAN に対して "
"App::Nopaste::Service::Foo のようなモジュールを投稿すれば、他の利用者から使う"
"ことができるようになります。"

#. leap/perl-App-Rad/summary
msgid "Framework to facilitate creation of command line applications"
msgstr "コマンドラインアプリケーションの作成を手配するためのフレームワーク"

#. leap/perl-App-Rad/description
msgid ""
"App::Rad is a framework for developing command-line applications. It can "
"transform Perl _one-liners_ into subroutines than can be called by the user "
"of your program.\n"
"\n"
"It also provides an interface for common command-line tasks."
msgstr ""
"App::Rad はコマンドラインアプリケーションを開発するためのフレームワークで"
"す。 Perl の _1 行コード_ をサブルーチンに変換し、お使いのプログラム側から呼"
"び出すことのできる仕組みを作成することができます。\n"
"\n"
"それ以外にも、一般的なコマンドライン処理で必要なインターフェイスも用意されて"
"います。"

#. leap/perl-App-Rad-Plugin-MoreHelp/summary
msgid "App::Rad plugin for providing extra help info"
msgstr "拡張ヘルプ情報を提供するための App::Rad プラグイン"

#. leap/perl-App-Rad-Plugin-MoreHelp/description
msgid ""
"This is an App::Rad manpage plugin for providing extra help info. It "
"provides a 'more_help' method which can be used to provide extra info that "
"will be appended to to bottom of the help message."
msgstr ""
"このモジュールは、拡張ヘルプ情報を提供するための App::Rad 向けプラグインで"
"す。 'more_help' と呼ばれるメソッドを提供し、ヘルプメッセージの文末に拡張情報"
"を提供できるようにすることができます。"

#. leap/perl-App-cpanminus/summary
msgid "Get, unpack, build and install modules from CPAN"
msgstr "CPAN 提供のモジュールの取得／展開／構築／インストール"

#. leap/perl-App-cpanminus/description
msgid ""
"cpanminus is a script to get, unpack, build and install modules from CPAN "
"and does nothing else.\n"
"\n"
"It's dependency free (can bootstrap itself), requires zero configuration, "
"and stands alone. When running, it requires only 10MB of RAM."
msgstr ""
"cpanminus は CPAN が提供するモジュールを取得し、展開し、構築し、インストール"
"するためだけのモジュールです。\n"
"\n"
"依存関係が無く (ブートストラップとして利用できます) 、設定不要で単独動作しま"
"す。また、実行中は 10MB 程度の RAM で動作します。"

#. leap/perl-App-perlbrew/summary
#. leap/perl-App-perlbrew/description
msgid "Manage perl installations in your C<$HOME>"
msgstr "C<$HOME> 内での Perl インストールの管理"

#. leap/perl-AppConfig/summary
msgid ""
"Perl5 module for reading configuration files and parsing command line ar[cut]"
msgstr "設定ファイルの読み込みとコマンドライン引数を処理する Perl5 モジュール"

#. leap/perl-AppConfig/description
msgid ""
"Perl5 module for reading configuration files and parsing command line "
"arguments."
msgstr ""
"設定ファイルの読み込みとコマンドライン引数を処理する Perl5 モジュールです。"

#. leap/perl-Archive-Cpio/summary
msgid "Module for Manipulations of Cpio Archives"
msgstr "cpio 書庫を操作するためのモジュール"

#. leap/perl-Archive-Cpio/description
msgid "Archive::Cpio provides a few functions to read and write cpio files."
msgstr ""
"Archive::Cpio は、 cpio ファイルを読み書きするための関数をいくつか提供してい"
"ます。"

#. leap/perl-Archive-Extract/summary
msgid "Generic Archive Extracting Mechanism"
msgstr "汎用書庫抽出メカニズム"

#. leap/perl-Archive-Extract/description
msgid ""
"Archive::Extract is a generic archive extraction mechanism.\n"
"\n"
"It allows you to extract any archive file of the type .tar, .tar.gz, .gz, ."
"Z, tar.bz2, .tbz, .bz2, .zip, .xz,, .txz, .tar.xz or .lzma without having to "
"worry how it does so, or use different interfaces for each type by using "
"either perl modules, or commandline tools on your system.\n"
"\n"
"See the 'HOW IT WORKS' section further down for details."
msgstr ""
"Archive::Extract は汎用の書庫抽出メカニズムです。\n"
"\n"
"他の Perl モジュールのようにそれぞれ別々のインターフェイスやコマンドライン"
"ツールを利用したりすることなく、  .tar, .tar.gz, .gz, .Z, tar.bz2, .tbz, ."
"bz2, .zip, .xz,, .txz, .tar.xz, .lzma などの書庫を展開することができます。\n"
"\n"
"詳しくは 'HOW IT WORKS' セクションをお読みください。"

#. leap/perl-Archive-Peek/summary
msgid "Peek into archives without extracting them"
msgstr "書庫を抽出せずにアクセスするモジュール"

#. leap/perl-Archive-Peek/description
msgid ""
"This module lets you peek into archives without extracting them. It "
"currently supports tar files and zip files. To support Bzip2- compressed "
"files, you should install IO::Uncompress::Bunzip2."
msgstr ""
"このモジュールは、書庫の内容に対して、それを抽出することなくアクセスする機能"
"を提供します。現時点では tar, zip の各ファイルに対応しています。 bzip2 圧縮"
"ファイルに対応するには、 IO::Uncompresss::Bunzip2 をインストールする必要があ"
"ります。"

#. leap/perl-Archive-Tar-Wrapper/summary
msgid "API wrapper around the 'tar' utility"
msgstr "'tar' ユーティリティに対する API ラッパー"

#. leap/perl-Archive-Tar-Wrapper/description
msgid ""
"*Archive::Tar::Wrapper* is an API wrapper around the 'tar' command line "
"program. It never stores anything in memory, but works on temporary "
"directory structures on disk instead. It provides a mapping between the "
"logical paths in the tarball and the 'real' files in the temporary directory "
"on disk.\n"
"\n"
"It differs from Archive::Tar in two ways:\n"
"\n"
"  * *Archive::Tar::Wrapper* almost doesn't hold anything in memory (see "
"'write' method), instead using disk as storage.\n"
"\n"
"  * *Archive::Tar::Wrapper* is 100% compliant with the platform's 'tar' "
"utility because it uses it internally."
msgstr ""
"*Archive::Tar::Wrapper* は 'tar' コマンドラインプログラムに対する API ラッ"
"パーです。メモリ内には何も保存されず、ディスク内のテンポラリディレクトリ構造"
"内で処理を行ないます。 tar ボール内の論理パスと、ディスク内のテンポラリディレ"
"クトリ内にある '実際の' ファイルとの間で、マッピングする機能を提供していま"
"す。\n"
"\n"
"Archive::Tar とは下記 2 点が異なります:\n"
"\n"
"  * *Archive::Tar::Wrapper* は、メモリ内にほとんど何も保持しません ('write' "
"メソッドをご覧ください)。全てのコンテンツはディスクに保存されます。\n"
"\n"
"  * *Archive::Tar::Wrapper* は、プラットフォーム側で提供されている 'tar' ユー"
"ティリティを内部で使用しているため、 100% の互換性があります。"

#. leap/perl-Archive-Zip/summary
msgid "Provide an interface to ZIP archive files"
msgstr "ZIP アーカイブファイルへのインターフェイス"

#. leap/perl-Archive-Zip/description
msgid ""
"The Archive::Zip module allows a Perl program to create, manipulate, read, "
"and write Zip archive files.\n"
"\n"
"Zip archives can be created, or you can read from existing zip files.\n"
"\n"
"Once created, they can be written to files, streams, or strings. Members can "
"be added, removed, extracted, replaced, rearranged, and enumerated. They can "
"also be renamed or have their dates, comments, or other attributes queried "
"or modified. Their data can be compressed or uncompressed as needed.\n"
"\n"
"Members can be created from members in existing Zip files, or from existing "
"directories, files, or strings.\n"
"\n"
"This module uses the Compress::Raw::Zlib library to read and write the "
"compressed streams inside the files.\n"
"\n"
"One can use Archive::Zip::MemberRead to read the zip file archive members as "
"if they were files."
msgstr ""
"Archive::Zip モジュールは、 Perl プログラムから zip の書庫形式を作成／操作／"
"読み込み／書き込みするためのモジュールです。\n"
"\n"
"新しい zip ファイルを作成したり、既存の zip ファイルを読み込んだりすることも"
"できます。\n"
"\n"
"zip 形式の書庫を作成するにあたっては、ファイルやストリーム、文字列をそれぞれ"
"書き込み先として指定することができます。書庫内のファイルに対しては、追加や削"
"除、抽出や再配置、列挙などを行なうことができます。ファイル名の変更や日付の変"
"更、コメントやその他の属性を問い合わせたり、修正したりすることもできます。こ"
"れらの付属データは、圧縮することができるほか、非圧縮でも保存することができま"
"す。\n"
"\n"
"このほか、書庫内のファイルを既存の zip ファイルから作成することができるほか、"
"既存のディレクトリやファイル、文字列から作成することもできます。\n"
"\n"
"このモジュールは、ファイル内の圧縮済みストリームを読み書きするにあたって、 "
"Compress::Raw::Zlib を使用しています。\n"
"\n"
"なお、書庫内のファイルについては、 Archive::Zip::MemberRead を利用することで"
"読み込むこともできます。"

#. leap/perl-Array-Unique/summary
msgid "Tie-able array that allows only unique values"
msgstr "ユニーク値のみを許可する tie 可能な配列"

#. leap/perl-Array-Unique/description
msgid ""
"This package lets you create an array which will allow only one occurrence "
"of any value.\n"
"\n"
"In other words no matter how many times you put in 42 it will keep only the "
"first occurrence and the rest will be dropped.\n"
"\n"
"You use the module via tie and once you tied your array to this module it "
"will behave correctly.\n"
"\n"
"Uniqueness is checked with the 'eq' operator so among other things it is "
"case sensitive.\n"
"\n"
"As a side effect the module does not allow undef as a value in the array."
msgstr ""
"このパッケージには、それぞれの値が一度だけ現われることを許可する配列の機能を"
"提供します。\n"
"\n"
"たとえば 42 という値を何度も投入しても、最初の 1 つだけが保持され、残りは廃棄"
"されます。\n"
"\n"
"このモジュールは tie を介しても使用することができますし、 tie を利用すれば適"
"切に動作します。\n"
"\n"
"値の唯一性は 'eq' 演算子を利用してチェックされるため、大文字と小文字を区別し"
"て保存します。\n"
"\n"
"また、このモジュールは undef の値は許可していません。"

#. leap/perl-Audio-RPLD/summary
msgid "Module to control the RoarAudio PlayList Daemon (rpld)"
msgstr "RoarAudio プレイリストデーモン (rpld) を制御するためのモジュール"

#. leap/perl-Audio-RPLD/description
msgid ""
"Audio::RPLD is a Perl module to access the RoarAudio PlayList Daemon from "
"within any Perl application. It supports most commands supported by the "
"rpld. This included commands to control playback, the Main Queue, playlists "
"and pointer mangement."
msgstr ""
"Audio::RPLD は、任意の Perl アプリケーションから RoarAudio プレイリストデーモ"
"ンにアクセスするための Perl モジュールです。 rpld で対応しているほとんどのコ"
"マンドを実行することができます。具体的には、メインキューの再生制御やプレイリ"
"スト、ポインタ管理などを行なうことができます。"

#. leap/perl-Authen-DecHpwd/summary
msgid "DEC VMS password hashing"
msgstr "DEC VMS パスワードハッシュ"

#. leap/perl-Authen-DecHpwd/description
msgid ""
"This module implements the 'SYS$HASH_PASSWORD' password hashing function "
"from VMS (also known as 'LGI$HPWD'), and some associated VMS username and "
"password handling functions.\n"
"\n"
"The password hashing function is implemented in XS, with a hideously slow "
"pure Perl backup version for systems that can't handle XS."
msgstr ""
"このモジュールは、 VMS のバスワードハッシュ機能である 'SYSHASH_PASSWORD' パス"
"ワードハッシュ機能 ('LGI$HPWD' としても知られています) を実装しているほか、関"
"連する VMS のユーザ名およびパスワードの処理関数も含まれています。\n"
"\n"
"パスワードハッシュ機能は XS 内で実装されているほか、 XS を処理できないシステ"
"ム向けに、非常に遅いながらも純粋な Perl で実装されたバックアップバージョンも"
"用意されています。"

#. leap/perl-Authen-Passphrase/summary
msgid "Hashed Passwords/Passphrases As Objects"
msgstr "オブジェクト形式でのハッシュ済みパスワード／パスフレーズ"

#. leap/perl-Authen-Passphrase/description
msgid ""
"This is the base class for a system of objects that encapsulate passphrases. "
"An object of this type is a passphrase recogniser: its job is to recognise "
"whether an offered passphrase is the right one. For security, such "
"passphrase recognisers usually do not themselves know the passphrase they "
"are looking for; they can merely recognise it when they see it. There are "
"many schemes in use to achieve this effect, and the intent of this class is "
"to provide a consistent interface to them all, hiding the details.\n"
"\n"
"The CPAN package Authen-Passphrase contains implementations of several "
"specific passphrase schemes in addition to the base class. See the specific "
"classes for notes on the security properties of each scheme. In new systems, "
"if there is a choice of which passphrase algorithm to use, it is recommended "
"to use the Authen::Passphrase::SaltedDigest manpage or the Authen::"
"Passphrase::BlowfishCrypt manpage. Most other schemes are too weak for new "
"applications, and should be used only for backward compatibility."
msgstr ""
"このモジュールは、パスフレーズをカプセル化するためのオブジェクトのベースクラ"
"スです。このタイプのオブジェクトはパスフレーズを認識するものとして動作し、保"
"持しているパスフレーズと入力されたパスフレーズが正しいかどうかを判断します。"
"セキュリティ上の理由から、パスフレーズ認識用のオブジェクトは、自身のパスフ"
"レーズそのものは保持おらず、それが正しいかどうかのみを判断することができま"
"す。このような動作を実現するための方法は様々ありますが、このクラスはその方法"
"の詳細に関係なく、画一的なインターフェイスを提供することを目指しています。\n"
"\n"
"CPAN パッケージ Authen-Passphrase には、ベースクラスに加えていくつかの固有の"
"パスフレーズ方式を実装しています。各方式におけるセキュリティ情報について、詳"
"しくは各クラスのメモをお読みください。新しいシステムでは使用するパスフレーズ"
"方式を選択することもできます。お勧めは Authen::Passphrase::SaltedDigest もし"
"くは Authen::Passphrase::BlowfishCrypt です。それ以外の方式は新しいアプリケー"
"ション向けには脆弱なものであり、後方互換性のためだけに使用すべきものです。"

#. leap/perl-Authen-SASL/summary
msgid "SASL Authentication framework"
msgstr "SASL 認証フレームワーク"

#. leap/perl-Authen-SASL/description
msgid ""
"SASL is a generic mechanism for authentication used by several network "
"protocols. *Authen::SASL* provides an implementation framework that all "
"protocols should be able to share.\n"
"\n"
"The framework allows different implementations of the connection class to be "
"plugged in. At the time of writing there were two such plugins. \n"
"* Authen::SASL::Perl\n"
"\n"
"This module implements several mechanisms and is implemented entirely in "
"Perl. \n"
"* Authen::SASL::XS\n"
"\n"
"This module uses the Cyrus SASL C-library (both version 1 and 2 are "
"supported). \n"
"* Authen::SASL::Cyrus\n"
"\n"
"This module is the predecessor to Authen::SASL::XS. It is reccomended to use "
"Authen::SASL::XS\n"
"\n"
"By default the order in which these plugins are selected is Authen::SASL::"
"XS, Authen::SASL::Cyrus and then Authen::SASL::Perl.\n"
"\n"
"If you want to change it or want to specifically use one implementation only "
"simply do\n"
"\n"
" use Authen::SASL qw(Perl);\n"
"\n"
"or if you have another plugin module that supports the Authen::SASL API\n"
"\n"
" use Authen::SASL qw(My::SASL::Plugin);"
msgstr ""
"SASL は複数のネットワークプロトコルで利用される、認証用の汎用機構です。"
"*Authen::SASL* は、全てのプロトコルで共有可能な実装フレームワークを提供しま"
"す。\n"
"\n"
"フレームワークでは、プラグイン形式で接続可能な複数の実装を同時に提供すること"
"ができます。本書の記述時点では、下記のようなプラグインが存在しています。\n"
"* Authen::SASL::Perl\n"
"\n"
"このモジュールはいくつかの機構を実装しているもので、全てを Perl で実装してい"
"ます。\n"
"* Authen::SASL::XS\n"
"\n"
"このモジュールは Cyrus SASL と呼ばれる C 言語ライブラリ (バージョン 1 とバー"
"ジョン 2 の両方に対応しています) を使用しています。\n"
"* Authen::SASL::Cyrus\n"
"\n"
"このモジュールは Authen::SASL::XS の後継となるモジュールです。現在はAuthen::"
"SASL::XS の使用を推奨します。\n"
"\n"
"既定では、プラグインの使用順序は Authen::SASL::XS が先で、 Authen::SASL::"
"Cyrus と Authen::SASL::Perl の順になっています。\n"
"\n"
"この順序を変更したい場合、もしくは単一の実装のみを使用したい場合は、下記のよ"
"うに実行します。\n"
"\n"
" use Authen::SASL qw(Perl);\n"
"\n"
"上記以外にも、 Authen::SASL API に対応するモジュールを指定する方法もありま"
"す。\n"
"\n"
" use Authen::SASL qw(My::SASL::Plugin);"

#. leap/perl-Authen-SASL-Cyrus/summary
msgid "SASL Authentication Framework - Cyrus Plugin"
msgstr "SASL 認証フレームワーク - Cyrus プラグイン"

#. leap/perl-Authen-SASL-Cyrus/description
msgid ""
"SASL is a generic mechanism for authentication used by several network "
"protocols.\n"
"\n"
"Authen::SASL::Cyrus is a plug-in for the Authen::SASL module and provides an "
"implementation framework that all protocols should be able to share.\n"
"\n"
"The XS framework makes calls to the existing libsasl.so shared library to "
"perform SASL client connection functionality, including loading existing "
"shared library mechanisms."
msgstr ""
"SASL はいくつかのネットワークプロトコルで使用される認証メカニズムです。\n"
"\n"
"Authen::SASL は全てのプロトコルで共有できるような実装フレームワークを 提供し"
"ます。\n"
"\n"
"XS フレームワークは既存の libsasl.so 共有ライブラリを呼び出し、 SASL クライア"
"ント接続の機能を提供します。もちろん既存の共有ライブラリを 読み込む仕組みもあ"
"ります。"

#. leap/perl-B-COW/summary
msgid "B::COW additional B helpers to check COW status"
msgstr "B::COW - COW ステータスを確認するための追加 B ヘルパー"

#. leap/perl-B-COW/description
msgid ""
"B::COW provides some naive additional B helpers to check the COW status of "
"one SvPV."
msgstr ""
"B::COW は 1 つの SvPV の COW ステータスを確認するためのネイティブな追加 B ヘ"
"ルパーを提供します。"

#. leap/perl-B-Debug/summary
msgid "Walk Perl syntax tree, printing debug info about ops"
msgstr "Perl の文法ツリー内の逐次閲覧と ops に関するデバッグ情報の印刷"

#. leap/perl-B-Debug/description
msgid "See _ext/B/README_ and the newer B::Concise."
msgstr "詳しくは _ext/B/README_ と新しい B::Concise をお読みください。"

#. leap/perl-B-Hooks-EndOfScope/summary
msgid "Execute code after a scope finished compilation"
msgstr "スコープのコンパイルが完了した時点でのコード実行"

#. leap/perl-B-Hooks-EndOfScope/description
msgid ""
"This module allows you to execute code when perl finished compiling the "
"surrounding scope."
msgstr ""
"このモジュールは、 Perl が指定したスコープのコンパイルが完了した際に、コード"
"を実行することができます。"

#. leap/perl-B-Hooks-OP-Annotation/summary
msgid "annotate and delegate hooked OPs"
msgstr "フックされた OP の注釈と代理処理"

#. leap/perl-B-Hooks-OP-Annotation/description
msgid ""
"This module provides a way for XS code that hijacks OP 'op_ppaddr' functions "
"to delegate to (or restore) the previous functions, whether assigned by perl "
"or by another module. Typically this should be used in conjunction with B::"
"Hooks::OP::Check.\n"
"\n"
"'B::Hooks::OP::Annotation' makes its types and functions available to XS "
"code by means of ExtUtils::Depends. Modules that wish to use these exports "
"in their XS code should 'use B::OP::Hooks::Annotation' in the Perl module "
"that loads the XS, and include something like the following in their "
"Makefile.PL:\n"
"\n"
"    use ExtUtils::MakeMaker;     use ExtUtils::Depends;\n"
"\n"
"    our %XS_PREREQUISITES = (         'B::Hooks::OP::Annotation' => "
"'0.44',         'B::Hooks::OP::Check'      => '0.15',     );\n"
"\n"
"    our %XS_DEPENDENCIES = ExtUtils::Depends->new(         'Your::XS::"
"Module',          keys(%XS_PREREQUISITES)     )->get_makefile_vars();\n"
"\n"
"    WriteMakefile(         NAME          => 'Your::XS::Module',         "
"VERSION_FROM  => 'lib/Your/XS/Module.pm',         PREREQ_PM => "
"{             'B::Hooks::EndOfScope' => '0.07',             "
"%XS_PREREQUISITES         },         ($ExtUtils::MakeMaker::VERSION >= "
"6.46 ?             (META_MERGE => {                 configure_requires => "
"{                     'ExtUtils::Depends' => '0.301',                     "
"%XS_PREREQUISITES                 }})             : ()         ),         "
"%XS_DEPENDENCIES,              );"
msgstr ""
"このモジュールは XS コード向けに作られたもので、 OP 'op_ppaddr' 関数を乗っ"
"取っることで、 Perl やその他のモジュールが割り当てた以前の関数の代理機能を提"
"供したり、それを復元したりする機能を提供します。一般的に、このモジュールは "
"B::Hooks::OP::Check と共に使用されます。\n"
"\n"
"'B::Hooks::OP::Annotation' は ExtUtils::Depends を利用して XS コードに型と関"
"数を提供します。 XS コードに対してこれらを提供したい Perl モジュールは、 "
"'use B::OP::Hooks::Annotation' を追加して、 Makefile.PL 内に下記のような記述"
"を追加します:\n"
"\n"
"    use ExtUtils::MakeMaker;     use ExtUtils::Depends;\n"
"\n"
"    our %XS_PREREQUISITES = (         'B::Hooks::OP::Annotation' => "
"'0.44',         'B::Hooks::OP::Check'      => '0.15',     );\n"
"\n"
"    our %XS_DEPENDENCIES = ExtUtils::Depends->new(         'Your::XS::"
"Module',          keys(%XS_PREREQUISITES)     )->get_makefile_vars();\n"
"\n"
"    WriteMakefile(         NAME          => 'Your::XS::Module',         "
"VERSION_FROM  => 'lib/Your/XS/Module.pm',         PREREQ_PM => "
"{             'B::Hooks::EndOfScope' => '0.07',             "
"%XS_PREREQUISITES         },         ($ExtUtils::MakeMaker::VERSION >= "
"6.46 ?             (META_MERGE => {                 configure_requires => "
"{                     'ExtUtils::Depends' => '0.301',                     "
"%XS_PREREQUISITES                 }})             : ()         ),         "
"%XS_DEPENDENCIES,              );"

#. leap/perl-B-Hooks-OP-Check/summary
msgid "Wrap OP check callbacks"
msgstr "OP チェックコールバックのラッピング"

#. leap/perl-B-Hooks-OP-Check/description
msgid ""
"This module provides a C API for XS modules to hook into the callbacks of "
"'PL_check'.\n"
"\n"
"ExtUtils::Depends is used to export all functions for other XS modules to "
"use. Include the following in your Makefile.PL:\n"
"\n"
"    my $pkg = ExtUtils::Depends->new('Your::XSModule', 'B::Hooks::OP::"
"Check');     WriteMakefile(         ... # your normal makefile flags         "
"$pkg->get_makefile_vars,     );\n"
"\n"
"Your XS module can now include 'hook_op_check.h'."
msgstr ""
"このモジュールは、 'PL_check' のコールバック内にフックを設置するため、 XS モ"
"ジュール向けに C API を提供する仕組みです。\n"
"\n"
"ExtUtils::Depends では、他の XS モジュールに対して使用するすべての関数を公開"
"する際に使用しています。下記のような記述を Makefile.PL に追加してください:\n"
"\n"
"    my $pkg = ExtUtils::Depends->new('Your::XSModule', 'B::Hooks::OP::"
"Check');     WriteMakefile(         ... # your normal makefile flags         "
"$pkg->get_makefile_vars,     );\n"
"\n"
"これにより、 XS モジュールから 'hook_op_check.h' を含めることができるようにな"
"ります。"

#. leap/perl-B-Hooks-OP-PPAddr/summary
msgid "Hook into opcode execution"
msgstr "opcode 実行内に対するフック"

#. leap/perl-B-Hooks-OP-PPAddr/description
msgid ""
"This module provides a C API for XS modules to hook into the execution of "
"perl opcodes.\n"
"\n"
"ExtUtils::Depends is used to export all functions for other XS modules to "
"use. Include the following in your _Makefile.PL_:\n"
"\n"
"    my $pkg = ExtUtils::Depends->new('Your::XSModule', 'B::Hooks::OP::"
"PPAddr');     WriteMakefile(         ... # your normal makefile "
"flags         $pkg->get_makefile_vars,     );\n"
"\n"
"Your XS module can now include 'hook_op_ppaddr.h'."
msgstr ""
"このモジュールは、 Perl の opcode 内にフックを設置するため、 XS モジュール向"
"けに C API を提供する仕組みです。\n"
"\n"
"ExtUtils::Depends では、他の XS モジュールに対して使用するすべての関数を公開"
"する際に使用しています。下記のような記述を Makefile.PL に追加してください:\n"
"\n"
"    my $pkg = ExtUtils::Depends->new('Your::XSModule', 'B::Hooks::OP::"
"PPAddr');     WriteMakefile(         ... # your normal makefile "
"flags         $pkg->get_makefile_vars,     );\n"
"\n"
"これにより、 XS モジュールから 'hook_op_ppaddr.h' を含めることができるように"
"なります。"

#. leap/perl-B-Keywords/summary
msgid "Lists of reserved barewords and symbol names"
msgstr "予約済みキーワードとシンボル名の一覧"

#. leap/perl-B-Keywords/description
msgid ""
"'B::Keywords' supplies several arrays of exportable keywords: '@Scalars', "
"'@Arrays', '@Hashes', '@Filehandles', '@Symbols', '@Functions', "
"'@Barewords', '@BarewordsExtra', '@TieIOMethods', '@UNIVERSALMethods' and "
"'@ExporterSymbols'.\n"
"\n"
"The '@Symbols' array includes the contents of each of '@Scalars', '@Arrays', "
"'@Hashes', '@Functions' and '@Filehandles'.\n"
"\n"
"Similarly, '@Barewords' adds a few non-function keywords and operators to "
"the '@Functions' array.\n"
"\n"
"'@BarewordsExtra' adds a few barewords which are not in keywords.h.\n"
"\n"
"All additions and modifications are welcome.\n"
"\n"
"The perl parser uses a static list of keywords from _regen/keywords.pl_ "
"which constitutes the strict list of keywords @Functions and @Barewords, "
"though some @Functions are not functions in the strict sense. Several "
"library functions use more special symbols, handles and methods."
msgstr ""
"'B::Keywords' はいくつかの公開可能なキーワード配列を提供しています: '@Scalars', '@Arrays', '@Hashes', "
"'@Filehandles', '@Symbols', '@Functions', '@Barewords', '@BarewordsExtra', '@"
"TieIOMethods', '@UNIVERSALMethods', '@ExporterSymbols'.\n"
"\n"
"'@Symbols' 配列には、 '@Scalars', '@Arrays', '@Hashes', '@Functions', '@"
"Filehandles' のそれぞれの内容が含まれています。\n"
"\n"
"このほか、 '@Barewords' には '@Functions' 配列に加えて非関数型のキーワードや演算子が追加されています。\n"
"\n"
"'@BarewordsExtra' は、keywords.h にない幾つかの barewords を追加します。\n"
"\n"
"追加や修正があれば、その旨お知らせいただけると幸いです。\n"
"\n"
"Perl のパーサは _regen/keywords.pl_ が提供する固定のキーワードリストを使用していますが、これはそれぞれ @Functions "
"と @Barewords 内のキーワードのリストから構成されていますが、 @Functions "
"には厳密には関数ではないものも含まれています。また、ライブラリによっては追加で特別なシンボルやハンドル、メソッドなどを使用することもあります。"

#. leap/perl-B-Utils/summary
#. leap/perl-B-Utils/description
msgid "Helper functions for op tree manipulation"
msgstr "op tree 操作に対するヘルパー関数"

#. leap/perl-BIND-Conf_Parser/summary
msgid "Parser class for BIND configuration files"
msgstr "BIND 設定ファイルを処理するクラス"

#. leap/perl-BIND-Conf_Parser/description
msgid ""
"This module implements a virtual base class for parsing BIND server version "
"8 configuration files (named.conf)."
msgstr ""
"このモジュールは、 BIND サーババージョン 8 の設定ファイル (named.conf) を処理"
"する 仮想ベースクラスを実装しています。"

#. leap/perl-BSD-Resource/summary
#. leap/perl-BSD-Resource/description
msgid "BSD process resource limit and priority functions"
msgstr "BSD 形式のリソース制限と優先度機能"

#. leap/perl-Benchmark-Timer/summary
msgid "Benchmarking with statistical confidence"
msgstr "統計的な信頼性のあるベンチマーク"

#. leap/perl-Benchmark-Timer/description
msgid ""
"The Benchmark::Timer class allows you to time portions of code conveniently, "
"as well as benchmark code by allowing timings of repeated trials. It is "
"perfect for when you need more precise information about the running time of "
"portions of your code than the Benchmark module will give you, but don't "
"want to go all out and profile your code.\n"
"\n"
"The methodology is simple; create a Benchmark::Timer object, and wrap "
"portions of code that you want to benchmark with 'start()' and 'stop()' "
"method calls. You can supply a tag to those methods if you plan to time "
"multiple portions of code. If you provide error and confidence values, you "
"can also use 'need_more_samples()' to determine, statistically, whether you "
"need to collect more data.\n"
"\n"
"After you have run your code, you can obtain information about the running "
"time by calling the 'results()' method, or get a descriptive benchmark "
"report by calling 'report()'. If you run your code over multiple trials, the "
"average time is reported. This is wonderful for benchmarking time-critical "
"portions of code in a rigorous way. You can also optionally choose to skip "
"any number of initial trials to cut down on initial case irregularities."
msgstr ""
"Benchmark::Timer クラスはコードの処理時間を計測することのできるモジュールで、"
"繰り返して処理することによりベンチマークとしても使用することができる仕組みで"
"す。ベンチマークというよりは処理時間を計測する目的で実行する場合は、より正確"
"な時間を算出することができますが、プロファイリングとしてはあまり有用ではあり"
"ません。\n"
"\n"
"使い方はシンプルで、 Benchmark::Timer オブジェクトを作成したあとは、 "
"'start()' と 'stop()' の間に計測対象のコードを挟み込むだけです。このほか、"
"コード内の複数の箇所で時間を測定したい場合は、それらのメソッドにタグを設定す"
"ることもできます。また、エラーや信頼値を設定することで、さらなるデータ収集の"
"ために 'need_more_samples()' を使用することもできます。\n"
"\n"
"コードを実行した後は、 'results()' メソッドを利用することで、実行にかかった時"
"間に関する情報を取得することができるほか、 'report()' を実行することでベンチ"
"マーク結果を出力することもできます。何回もコードをテストすれば、平均時間も取"
"得することができます。これは厳格な方法で時間に厳しい箇所のテストを実施するに"
"は、最適な仕組みです。必要であれば、不規則になりやすい初めのうちのデータを飛"
"ばすこともできます。"

#. leap/perl-BerkeleyDB/summary
msgid "Perl extension for Berkeley DB version 2, 3, 4 or 5"
msgstr "Berkeley DB バージョン 2, 3, 4, 5 向け Perl 拡張"

#. leap/perl-BerkeleyDB/description
msgid ""
"*NOTE: This document is still under construction. Expect it to be incomplete "
"in places.*\n"
"\n"
"This Perl module provides an interface to most of the functionality "
"available in Berkeley DB versions 2, 3, 5 and 6. In general it is safe to "
"assume that the interface provided here to be identical to the Berkeley DB "
"interface. The main changes have been to make the Berkeley DB API work in a "
"Perl way. Note that if you are using Berkeley DB 2.x, the new features "
"available in Berkeley DB 3.x or later are not available via this module.\n"
"\n"
"The reader is expected to be familiar with the Berkeley DB documentation. "
"Where the interface provided here is identical to the Berkeley DB library "
"and the... TODO\n"
"\n"
"The *db_appinit*, *db_cursor*, *db_open* and *db_txn* man pages are "
"particularly relevant.\n"
"\n"
"The interface to Berkeley DB is implemented with a number of Perl classes."
msgstr ""
"*注意: このドキュメントは現在作成中です。さまざまな個所で不完全ではありますが"
"ご了承ください。\n"
"\n"
"この Perl モジュールは、 Berkeley DB バージョン 2, 3, 5,6  で提供されているほ"
"とんどの機能にアクセスするための、インターフェイスを提供しています。一般的に"
"言って、ここで提供されているインターフェイスは Berkeley DB のものと同等のもの"
"であると安全に判断できるものです。主な違いは、 Berkeley DB API の Perl のやり"
"方でアクセスすることによるものです。なお、 Berkeley DB 2.x をお使いの場合、"
"Berkeley DB 3.x やそれ以降のバージョンで利用できる新機能は、このモジュールで"
"は利用できません。\n"
"reader 側の機能は Berkeley DB のドキュメンテーションに沿った仕組みになってい"
"て、Berkeley DB ライブラリに書かれたインターフェイスとほぼ同等になっていま"
"す... TODO\n"
"\n"
"*db_appinit*, *db_cursor*, *db_open*, *db_txn* がそれぞれ関係しています。\n"
"\n"
"Berkeley DB に対するインターフェイスは、様々な Perl クラスで実装されていま"
"す。"

#. leap/perl-Bit-Vector/summary
#. leap/perl-Bit-Vector/description
msgid "Bit::Vector Perl module"
msgstr "Bit::Vector Perl モジュール"

#. leap/perl-Boost-Geometry-Utils/summary
#. leap/perl-Boost-Geometry-Utils/description
msgid "Bindings for the Boost Geometry library"
msgstr "Boost ジオメトリライブラリ向けバインディング"

#. leap/perl-Bootloader/summary
msgid "Library for Configuring Boot Loaders"
msgstr "ブートローダを設定するためのライブラリ"

#. leap/perl-Bootloader/description
msgid ""
"Perl modules for configuring various boot loaders.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Jiri Srain <jsrain@suse.cz>     Joachim Plack <jplack@suse."
"de>     Alexander Osthof <aosthof@suse.de>     Josef Reidinger "
"<jreidinger@suse.cz>"
msgstr ""
"様々なブートローダを設定するための Perl モジュールです。\n"
"\n"
"\n"
"\n"
"作者:\n"
"--------     Jiri Srain <jsrain@suse.cz>     Joachim Plack <jplack@suse."
"de>     Alexander Osthof <aosthof@suse.de>     Josef Reidinger "
"<jreidinger@suse.cz>"

#. leap/perl-Bootloader/perl-Bootloader-YAML/summary
msgid "YAML interface for perl-Bootloader"
msgstr "perl-Bootloader 向け YAML インターフェイス"

#. leap/perl-Bootloader/perl-Bootloader-YAML/description
msgid ""
"A command line interface to perl-Bootloader using YAML files for input and "
"output."
msgstr ""
"YAML ファイルを入出力に使用する、 perl-Bootloader に対するコマンドラインイン"
"ターフェイスです。"

#. leap/perl-Browser-Open/summary
msgid "Open a browser in a given URL"
msgstr "指定した URL をブラウザで開くモジュール"

#. leap/perl-Browser-Open/description
msgid ""
"The functions optionaly exported by this module allows you to open URLs in "
"the user browser.\n"
"\n"
"A set of known commands per OS-name is tested for presence, and the first "
"one found is executed. With an optional parameter, all known commands are "
"checked.\n"
"\n"
"The the \"open_browser\" manpage uses the 'system()' function to execute the "
"command. If you want more control, you can get the command with the the "
"\"open_browser_cmd\" manpage or the \"open_browser_cmd_all\" manpage "
"functions and then use whatever method you want to execute it."
msgstr ""
"ユーザのブラウザ内で指定した URL を開くことのできる関数を、任意で公開していま"
"す。\n"
"\n"
"OS 名ごとの既知のコマンド複数個設定されていて、それらのうちで最初に見つかった"
"ものが実行されます。オプションのバラメータを指定することで、すべての既知のコ"
"マンドをチェックすることもできます。\n"
"\n"
"\"open_browser\" では 'system()' 関数を利用してコマンドを実行しています。さら"
"に細かい制御を行ないたい場合は、 \"open_browser_cmd\" や "
"\"open_browser_cmd_all\" 関数をそれぞれお使いになることもできます。"

#. leap/perl-Business-ISBN/summary
msgid "Work with International Standard Book Numbers"
msgstr "国際標準図書番号 (ISBN) の処理のためのモジュール"

#. leap/perl-Business-ISBN/description
msgid ""
"This modules handles International Standard Book Numbers, including ISBN-10 "
"and ISBN-13."
msgstr ""
"このモジュールは、国際標準図書番号 (ISBN-10, ISBN-13) を処理することができま"
"す。"

#. leap/perl-Business-ISBN-Data/summary
msgid "Data Pack for Business::Isbn"
msgstr "Business::Isbn 向けデータパック"

#. leap/perl-Business-ISBN-Data/description
msgid ""
"You don't need to load this module yourself in most cases. 'Business::ISBN' "
"will load it when it loads.\n"
"\n"
"These data are generated from the _RangeMessage.xml_ file provided by the "
"ISBN Agency. You can retrieve this yourself at https://www.isbn-"
"international.org/range_file_generation. This file is included as part of "
"the distribution and should be installed at _~lib/Business/ISBN/Data/"
"RangeMessage.xml_.\n"
"\n"
"If you want to use a different _RangeMessage.xml_ file, you can set the "
"'ISBN_RANGE_MESSAGE' environment variable to the alternate location before "
"you load 'Business::ISBN'. This way, you can use the latest (or even "
"earlier) data without having to install something new or wait for an update "
"to this module.\n"
"\n"
"If the default _RangeMessage.xml_ or your alternate one is not available, "
"the module falls back to data included in _Data.pm_. However, that data is "
"likely to be older data. If it does not find that file, it looks for "
"_RangeMessage.xml_ in the current directory.\n"
"\n"
"The data are in '%Business::ISBN::country_data' (although the \"country\" "
"part is historical). If you want to see where the data are from, check "
"'$Business::ISBN::country_data{_source}'."
msgstr ""
"ほとんどの場合、このモジュールを直接読み込む必要はありません。また、このモ"
"ジュールを読み込むと、 'Business::ISBN' も読み込みます。\n"
"\n"
"これらのデータは ISBN エージェンシーが提供する _RangeMessage.xml_ から生成さ"
"れたもので、一般的には https://www.isbn-international.org/"
"range_file_generation で提供されています。このファイルは配布物の一部として同"
"梱されており、 _~lib/Business/ISBN/Data/RangeMessage.xml_ にインストールされ"
"ます。\n"
"\n"
"これとは異なる _RangeMessage.xml_ ファイルを利用したい場合は、  'Business::"
"ISBN' を読み込む前に 'ISBN_RANGE_MESSAGE' 環境変数に場所を指定してください。"
"この方法が用意されていることにより、このモジュール自身の更新を待ったり、イン"
"ストールしたりすることなく、最新の (もしくは古い) データを利用することができ"
"ます。\n"
"\n"
"既定の _RangeMessage.xml_ が存在せず、代替の場所にも見つからなかった場合は、 "
"_Data.pm_ 内にあるデータを使用します。しかしながら、このデータはより古いデー"
"タになってしまっています。また、カレントディレクトリ内の _RangeMessage.xml_ "
"も検索対象になっています。\n"
"\n"
"また、データは '%Business::ISBN::country_data' (\"country\" は歴史上の経緯で"
"設定されているものです) にあります。どこからのデータであるのかを知りたい場合"
"は、  '$Business::ISBN::country_data{_source}' をご確認ください。"

#. leap/perl-Business-ISMN/summary
msgid "Work with International Standard Music Numbers"
msgstr "国際標準楽曲番号 (ISMN) の処理のためのモジュール"

#. leap/perl-Business-ISMN/description
msgid "work with International Standard Music Numbers"
msgstr "国際標準楽曲番号 (ISMN) の処理のためのモジュール"

#. leap/perl-Business-ISSN/summary
msgid "Perl extension for International Standard Serial Numbers"
msgstr "国際標準逐次刊行物番号 (ISSN) の処理のためのモジュール"

#. leap/perl-Business-ISSN/description
msgid ""
"* new($issn)\n"
"\n"
"  The constructor accepts a scalar representing the ISSN.\n"
"\n"
"  The string representing the ISSN may contain characters other than   "
"[0-9xX], although these will be removed in the internal representation.   "
"The resulting string must look like an ISSN - the first seven characters   "
"must be digits and the eighth character must be a digit, 'x', or 'X'.\n"
"\n"
"  The string passed as the ISSN need not be a valid ISSN as long as it   "
"superficially looks like one. This allows one to use the 'fix_checksum'   "
"method.\n"
"\n"
"  One should check the validity of the ISSN with 'is_valid()' rather than   "
"relying on the return value of the constructor.\n"
"\n"
"  If all one wants to do is check the validity of an ISSN, one can skip "
"the   object-oriented interface and use the c<is_valid_checksum()> "
"function   which is exportable on demand."
msgstr ""
"* new($issn)\n"
"\n"
"  コンストラクタでは、 ISSN を表わすスカラ値を受け付けます。\n"
"\n"
"  ISSN を表わす文字列には [0-9xX] 以外の文字が含まれることがありますが、それ"
"らは国際表記では削除されます。また、 ISSN はそれとわかるように文字列を生成し"
"ます。最初の 7 桁はそれぞれ数字で、 8 桁目は数字もしくは 'x', 'X' のいずれか"
"でなければなりません。\n"
"\n"
"  ISSN に渡される文字列は、 ISSN であると判断できれば必ずしも正しい形式でなく"
"てもかまいません。この仕組みにより、 'fix_checksum' メソッドを利用することが"
"できます。\n"
"\n"
"  なお、 ISSN の値が正しいかどうかを判断したい場合は、コンストラクタに値を渡"
"すのではなく、 'is_valid()' で検証してください。\n"
"\n"
"  ISSN のチェックだけを行なう目的であれば、オブジェクト指向のインターフェイス"
"ではなく、 C<is_valid_checksum()> 関数を利用することもできます。こちらは必要"
"に応じて公開される関数です。"

#. leap/perl-CDDB_get/summary
msgid "Read the CDDB entry for an audio CD in your drive"
msgstr ""
"お使いのドライブ内のオーディオ CD について CDDB の項目を参照するライブラリ"

#. leap/perl-CDDB_get/description
msgid ""
"This module/script gets the CDDB info for an audio cd. You need LINUX, SUNOS "
"or *BSD, a cdrom drive and an active internet connection in order to do that."
msgstr ""
"このモジュールとスクリプトは、オーディオ CD の CDDB 情報を取得するためのもの"
"です。 このモジュールを動作させるには、 LINUX, SUNOS, *BSD のいずれかの環境"
"と CD-ROM ドライブ、 有効なインターネット接続がそれぞれ必要です。"

#. leap/perl-CGI/summary
msgid "Handle Common Gateway Interface requests and responses"
msgstr "Common Gateway Interface (CGI) のリクエストと応答の処理"

#. leap/perl-CGI/description
msgid ""
"CGI.pm is a stable, complete and mature solution for processing and "
"preparing HTTP requests and responses. Major features including processing "
"form submissions, file uploads, reading and writing cookies, query string "
"generation and manipulation, and processing and preparing HTTP headers.\n"
"\n"
"CGI.pm performs very well in a vanilla CGI.pm environment and also comes "
"with built-in support for mod_perl and mod_perl2 as well as FastCGI.\n"
"\n"
"It has the benefit of having developed and refined over 20 years with input "
"from dozens of contributors and being deployed on thousands of websites. CGI."
"pm was included in the perl distribution from perl v5.4 to v5.20, however is "
"has now been removed from the perl core..."
msgstr ""
"CGI.pm は HTTP リクエストや応答を処理したり、準備したりすることのできる、安定"
"していて完全、そして円熟したソリューションです。フォームの送信やファイルの"
"アップロード、 Cookie の読み書きや問い合わせ文字列の生成／操作、 HTTP ヘッダ"
"の操作や処理など、各種のメジャー機能に対応しています。\n"
"\n"
"CGI.pm はそれ単体の環境だけでうまく動作しますし、 mod_perl, mod_perl2 向けの"
"内蔵サポートのほか、 FastCGI にも対応しています。\n"
"\n"
"20 年以上にわたって多くの貢献者の方々が開発を行ない、数千もの Web サイトに配"
"置されてきた実績があります。 CGI.pm は Perl 5.4 から 5.20 までの Perl 配布物"
"に含まれていましたが、 Perl の中枢からは削除されてしまいました..."

#. leap/perl-CGI-Ajax/summary
msgid "A perl-specific System for writing Asynchronous web Apps"
msgstr "非同期 Web アプリを作成するための Perl 固有システム"

#. leap/perl-CGI-Ajax/description
msgid ""
"CGI::Ajax is an object-oriented module that provides a unique mechanism for "
"using perl code asynchronously from javascript- enhanced HTML pages. CGI::"
"Ajax unburdens the user from having to write extensive javascript, except "
"for associating an exported method with a document-defined event (such as "
"onClick, onKeyUp, etc). CGI::Ajax also mixes well with HTML containing more "
"complex javascript.\n"
"\n"
"CGI::Ajax supports methods that return single results or multiple results to "
"the web page, and supports returning values to multiple DIV elements on the "
"HTML page.\n"
"\n"
"Using CGI::Ajax, the URL for the HTTP GET/POST request is automatically "
"generated based on HTML layout and events, and the page is then dynamically "
"updated with the output from the perl function. Additionally, CGI::Ajax "
"supports mapping URL's to a CGI::Ajax function name, so you can separate "
"your code processing over multiple scripts.\n"
"\n"
"Other than using the Class::Accessor module to generate CGI::Ajax' accessor "
"methods, CGI::Ajax is completely self-contained - it does not require you to "
"install a larger package or a full Content Management System, etc.\n"
"\n"
"We have added _support_ for other CGI handler/decoder modules, like the CGI::"
"Simple manpage or the CGI::Minimal manpage, but we can't test these since we "
"run mod_perl2 only here. CGI::Ajax checks to see if a header() method is "
"available to the CGI object, and then uses it. If method() isn't available, "
"it creates it's own minimal header.\n"
"\n"
"A primary goal of CGI::Ajax is to keep the module streamlined and maximally "
"flexible. We are trying to keep the generated javascript code to a minimum, "
"but still provide users with a variety of methods for deploying CGI::Ajax. "
"And VERY little user javascript."
msgstr ""
"CGI::Ajax は単一の Perl コードを利用して、 JavaScript の有効化された HTML "
"ページの提供のようなユニークな仕組みをもたらす、オブジェクト指向のモジュール"
"です。 CGI::Ajax は、ドキュメントで定義されるイベント (onClick, onKeyUp な"
"ど) を表わす公開メソッドへの関連づけを除き、面倒な JavaScript コードの作成の"
"手間を省くことができます。 CGI::Ajax は、 HTML 内によく複雑な JavaScript を組"
"み込むこともできます。\n"
"\n"
"CGI::Ajax は Web ページに対して、 1 つまたは複数の結果を返すメソッドに対応し"
"ています。また、 HTMLページ内の複数の DIV 要素に対して、値を返すこともできま"
"す。\n"
"\n"
"CGI::Ajax を利用することで、 HTML のレイアウトやイベントに従って自動的に "
"HTTP の GET/POST リクエストを作成することができるほか、 Perl 関数の出力に従っ"
"てページを動的に更新することもできます。これに加えて、 CGI::Ajax では URL と "
"CGI::Ajax の関数名との間でマッピング機能も提供されています。これにより、コー"
"ド処理とスクリプトを分けて記述することができるようになります。\n"
"\n"
"CGI::Ajax のアクセサメソッドを生成するための Class::Accessor モジュールを利用"
"する以外に、 CGI::Ajax には自己完結型の仕組みも用意されています。巨大なパッ"
"ケージや完全なコンテンツ管理システムなどを導入する必要もありません。\n"
"\n"
"他の CGI ハンドラ／デコーダモジュール、たとえば CGI::Simple や CGI::Minimal "
"などのサポートも追加されていますが、我々は mod_perl2 を利用しているため、これ"
"らはテストされていません。 CGI::Ajax では CGI オブジェクト内で header() メ"
"ソッドが利用可能かどうかを確認し、可能であればそれを使用します。利用できない"
"場合は、独自に最小限のヘッダを生成します。 \n"
"\n"
"CGI::Ajax の主なゴールは、合理的で最大限に柔軟性のあるモジュールを維持し続け"
"ることにあります。生成された JavaScript はできる限り小さくなるように作られて"
"いますが、 CGI::Ajax では様々なメソッドを提供しています。もちろんユーザ側で作"
"成すべき JavaScript もとても小さくなるようになっています。"

#. leap/perl-CGI-Application/summary
msgid "Framework for building reusable web-applications"
msgstr "再利用可能な Web アプリケーションを構築するためのフレームワーク"

#. leap/perl-CGI-Application/description
msgid ""
"It is intended that your Application Module will be implemented as a sub-"
"class of CGI::Application. This is done simply as follows:\n"
"\n"
"    package My::App;     use base 'CGI::Application'; \n"
"*Notation and Conventions*\n"
"\n"
"For the purpose of this document, we will refer to the following "
"conventions:\n"
"\n"
"  WebApp.pm   The Perl module which implements your Application Module "
"class.   WebApp      Your Application Module class; a sub-class of CGI::"
"Application.   webapp.cgi  The Instance Script which implements your "
"Application Module.   $webapp     An instance (object) of your Application "
"Module class.   $c          Same as $webapp, used in instance methods to "
"pass around the               current object. (Sometimes referred as \"$self"
"\" in other code)"
msgstr ""
"お使いのアプリケーションモジュールを CGI::Application のサブクラスとして実装"
"してもらうことを目指したモジュールです。これは下記のようにすることで簡単に行"
"なうことができます:\n"
"\n"
"    package My::App;     use base 'CGI::Application';\n"
"*表記と慣習*\n"
"\n"
"このドキュメントでは、下記のような表現を使用しています:\n"
"\n"
"WebApp.pm お使いのアプリケーションモジュールのクラスを実装する、 Perl モ"
"ジュール。 WebApp アプリケーションモジュール (CGI::Application のサブクラ"
"ス) 。 webapp.cgi アプリケーションモジュールを実装する、サンプルスクリプト。 "
"$webapp アプリケーションモジュールのインスタンス (オブジェクト) 。 $c "
"$wepapp と同じですが、現在のオブジェクトに対するメソッドを実行するのに使用す"
"るインスタンス (場合によっては \"$self\" と書く場合もあります)"

#. leap/perl-CGI-FastTemplate/summary
msgid ""
"Perl extension for managing templates, and performing variable interpolation"
msgstr "テンプレートの管理と変数補完を実施するための Perl 拡張"

#. leap/perl-CGI-FastTemplate/description
msgid ""
"CGI::FastTemplate manages templates and parses templates replacing variable "
"names with values. It was designed for mid to large scale web applications "
"(CGI, mod_perl) where there are great benefits to separating the logic of an "
"application from the specific implementation details."
msgstr ""
"CGI::FastTemplate では変数を実際の値に置き換える処理を行なう、テンプレートモ"
"ジュールです。中規模もしくは大規模の Web アプリケーション (CGI, mod_perl) に"
"向けて設計されており、アプリケーションのロジックと特定の実装仕様とを分離する"
"ための素晴らしい仕組みを提供しています。"

#. leap/perl-CGI-FormBuilder/summary
msgid "Easily generate and process stateful forms"
msgstr "状態遷移機能のあるフォームの簡単生成"

#. leap/perl-CGI-FormBuilder/description
msgid ""
"The goal of CGI::FormBuilder (FormBuilder) is to provide an easy way for you "
"to generate and process entire CGI form-based applications. Its main "
"features are:\n"
"\n"
"Field Abstraction   Viewing fields as entities (instead of just params), "
"where the   HTML representation, CGI values, validation, and so on are   "
"properties of each field.\n"
"\n"
"DWIMmery   Lots of built-in \"intelligence\" (such as automatic field "
"typing),   giving you about a 4:1 ratio of the code it generates versus "
"what   you have to write.\n"
"\n"
"Built-in Validation   Full-blown regex validation for fields, even "
"including   JavaScript code generation.\n"
"\n"
"Template Support  Pluggable support for external template engines,   such as "
"HTML::Template, Text::Template, Template Toolkit,   and CGI::FastTemplate.\n"
"\n"
"Plus, the native HTML generated is valid XHTML 1.0 Transitional."
msgstr ""
"CGI::FormBuilder (FormBuilder) のゴールは、 CGI フォームをベースにしたアプリ"
"ケーションに対して、その作成と処理を簡単にする方法を提供することになります。"
"主な機能は下記の通りです:\n"
"\n"
"フィールドの抽象化: フィールドを (単なるパラメータではなく) エンティティとし"
"て参照することができます。 HTML の表現や CGI の値、検証などはそれぞれ各フィー"
"ルドに対するプロパティとして設定します。\n"
"\n"
"直感性: 多数の \"便利機能\" (自動フィールド入力など) を内蔵しています。これに"
"より、記述すべきコードが 1/5 になります。\n"
"\n"
"検証機能の内蔵化: 本格的な正規表現によるフィールド検証のほか、 JavaScript の"
"コード生成機能なども用意されています。\n"
"\n"
"テンプレート対応: HTML::Template, Text::Template, Template ツールキット, "
"CGI::FastTemplate など、外部のテンプレートエンジンへのプラグインで対応してい"
"ます。\n"
"\n"
"これに加えて、生成された HTML は正しい XHTML 1.0 Transitional 形式になってい"
"ます。"

#. leap/perl-CGI-Session/summary
msgid "Persistent Session Data in Cgi Applications"
msgstr "CGI アプリケーション内での永続セッションデータ"

#. leap/perl-CGI-Session/description
msgid ""
"CGI::Session provides an easy, reliable and modular session management "
"system across HTTP requests."
msgstr ""
"CGI:Session は、 HTTP リクエストをまたがって利用することのできる、簡単で信頼"
"性のある、モジュール型のセッション管理機構を提供します。"

#. leap/perl-CGI-Simple/summary
msgid "Object-oriented CGI interface compliant to CGI.pm"
msgstr "CGI.pm 準拠のオブジェクト指向 CGI インターフェイス"

#. leap/perl-CGI-Simple/description
msgid ""
"CGI::Simple provides a relatively lightweight drop in replacement for CGI."
"pm. It shares an identical OO interface to CGI.pm for parameter parsing, "
"file upload, cookie handling and header generation. This module is entirely "
"object oriented, however a complete functional interface is available by "
"using the CGI::Simple::Standard module.\n"
"\n"
"Essentially everything in CGI.pm that relates to the CGI (not HTML) side of "
"things is available. There are even a few new methods and additions to old "
"ones! If you are interested in what has gone on under the hood see the "
"Compatibility with CGI.pm section at the end.\n"
"\n"
"In practical testing this module loads and runs about twice as fast as CGI."
"pm depending on the precise task."
msgstr ""
"CGI::Simple は CGI.pm に対する比較的軽量な代替機能を提供します。パラメータの"
"処理やファイルのアップロード、 Cookie の処理やヘッダの生成など、 CGI.pm と等"
"価な OO インターフェイスを共有しています。このモジュールは全体的にオブジェク"
"ト指向の仕組みになっていますが、 CGI::Simple::Standard モジュールを利用すれ"
"ば、完全に関数型のインターフェイスを利用することもできます。\n"
"\n"
"本質的に CGI.pm に内蔵されているすべての CGI (HTML を除く) 関連機能が利用でき"
"ます。このほか、新しいメソッドがいくつか追加されているほか、既存のメソッドに"
"も追加の機能が用意されています。 CGI.pm と比べて廃止された機能について詳しく"
"知りたい方は、末尾のセクションをお読みください。\n"
"\n"
"このモジュールに対する実際のテストでは、正確な処理で CGI.pm の 2 倍速く読み込"
"まれ、動作しています。"

#. leap/perl-CHI/summary
msgid "Unified cache handling interface"
msgstr "統一キャッシュ処理インターフェイス"

#. leap/perl-CHI/description
msgid ""
"CHI provides a unified caching API, designed to assist a developer in "
"persisting data for a specified period of time.\n"
"\n"
"The CHI interface is implemented by driver classes that support fetching, "
"storing and clearing of data. Driver classes exist or will exist for the "
"gamut of storage backends available to Perl, such as memory, plain files, "
"memory mapped files, memcached, and DBI.\n"
"\n"
"CHI is intended as an evolution of DeWitt Clinton's Cache::Cache package, "
"adhering to the basic Cache API but adding new features and addressing "
"limitations in the Cache::Cache implementation."
msgstr ""
"CHI は統一的なキャッシュ API を提供するモジュールで、開発者に対して指定した期"
"間だけデータを保持する仕組みを支援するためのものです。\n"
"\n"
"CHI のインターフェイスは、実際のデータの読み込みと保存、そして消去を行なうド"
"ライバクラスで実装されます。ドライバクラスはメモリや純粋なファイル、もしくは"
"メモリマップ型のファイルや memcached, DBI など、様々なストレージバックエンド"
"向けに用意されているほか、用意される予定があります。\n"
"\n"
"CHI は Dewitt Clinton 氏の Cache::Cache パッケージの進化版となるべく作られた"
"モジュールで、基本的なキャッシュ API を維持しながら、新しい機能を追加した"
"り、 Cache::Cache の実装内の制限に対応すべく作られています。"

#. leap/perl-CLASS/summary
msgid "Alias for __PACKAGE__"
msgstr "__PACKAGE__ に対する別名"

#. leap/perl-CLASS/description
msgid ""
"CLASS and $CLASS are both synonyms for __PACKAGE__. Easier to type.\n"
"\n"
"$CLASS has the additional benefit of working in strings."
msgstr ""
"CLASS および $CLASS はいずれも __PACKAGE__ に対する別名です。より入力しやすく"
"なっています。\n"
"\n"
"$CLASS は、文字列内での処理にも利便性を提供します。"

#. leap/perl-CPAN-Changes/summary
msgid "Read and write Changes files"
msgstr "Changes ファイルの読み書き"

#. leap/perl-CPAN-Changes/description
msgid ""
"It is standard practice to include a Changes file in your distribution. The "
"purpose the Changes file is to help a user figure out what has changed since "
"the last release.\n"
"\n"
"People have devised many ways to write the Changes file. A preliminary "
"specification has been created (the CPAN::Changes::Spec manpage) to "
"encourage module authors to write clear and concise Changes.\n"
"\n"
"This module will help users programmatically read and write Changes files "
"that conform to the specification."
msgstr ""
"ご自身が開発されている配布物に Changes ファイルを含めるための、標準的な方法を"
"提供します。 Changes ファイルは、前回のリリースから何が変更されたのかを利用者"
"に示すために使用します。\n"
"\n"
"\n"
"Changes ファイルを作成は、人によってさまざまな方法で実施しています。既に予備"
"仕様 (CPAN::Changes::Spec) が作成されていて、これをもとに明確かつ簡潔な "
"Changes ファイルを作成できるようにしています。\n"
"\n"
"このモジュールは、そのような仕様に準拠した形でプログラムから Changes ファイル"
"を読み書きする方法を提供します。"

#. leap/perl-CPAN-DistnameInfo/summary
msgid "Extract distribution name and version from a distribution filename"
msgstr "配布物のファイル名からの名前とバージョンの抽出"

#. leap/perl-CPAN-DistnameInfo/description
msgid ""
"Many online services that are centered around CPAN attempt to associate "
"multiple uploads by extracting a distribution name from the filename of the "
"upload. For most distributions this is easy as they have used ExtUtils::"
"MakeMaker or Module::Build to create the distribution, which results in a "
"uniform name. But sadly not all uploads are created in this way.\n"
"\n"
"'CPAN::DistnameInfo' uses heuristics that have been learnt by the http://"
"search.cpan.org/ manpage to extract the distribution name and version from "
"filenames and also report if the version is to be treated as a developer "
"release\n"
"\n"
"The constructor takes a single pathname, returning an object with the "
"following methods \n"
"* cpanid\n"
"\n"
"  If the path given looked like a CPAN authors directory path, then this   "
"will be the the CPAN id of the author. \n"
"* dist\n"
"\n"
"  The name of the distribution \n"
"* distvname\n"
"\n"
"  The file name with any suffix and leading directory names removed \n"
"* filename\n"
"\n"
"  If the path given looked like a CPAN authors directory path, then this   "
"will be the path to the file relative to the detected CPAN author   "
"directory. Otherwise it is the path that was passed in. \n"
"* maturity\n"
"\n"
"  The maturity of the distribution. This will be either 'released' or   "
"'developer' \n"
"* extension\n"
"\n"
"  The extension of the distribution, often used to denote the archive type   "
"(e.g. 'tar.gz') \n"
"* pathname\n"
"\n"
"  The pathname that was passed to the constructor when creating the "
"object. \n"
"* properties\n"
"\n"
"  This will return a list of key-value pairs, suitable for assigning to a   "
"hash, for the known properties. \n"
"* version\n"
"\n"
"  The extracted version"
msgstr ""
"CPAN を中心とした多数のオンラインサービスでは、アップロード時のファイル名から"
"配布物の名前を抽出して、アップロードを関連づける処理を行なっています。多くの"
"配布物では、 その作成にあたって ExtUtils::MakeMaker や Module::Build を使用し"
"ていますが、もしそうであれば簡単に唯一の名前を抽出することができます。しかし"
"ながら、すべてのアップロードがこの方法で作成されているわけではありません。\n"
"\n"
"'CPAN::DistnameInfo' は http://search.cpan.org/ で提供されている情報を学ぶこ"
"とによる経験を利用して、ファイル名から配布物の名前とバージョンを抽出します。"
"また、バージョンが開発者リリースであれば、その旨もレポートします。\n"
"\n"
"コンストラクタには 1 つのパス名を指定します。返されるオブジェクトには下記のメ"
"ソッドを適用することができます:\n"
"* cpanid\n"
"\n"
"  指定されたパスが CPAN のディレクトリパスであると考えられる場合は、 CPAN の"
"作者名が設定されます。\n"
"* dist\n"
"\n"
"  配布物の名前が設定されます。\n"
"* distvname\n"
"\n"
"  任意の接頭辞と続くディレクトリ名が削除されたファイル名が設定されます。\n"
"* filename\n"
"\n"
"  指定されたパスが CPAN のディレクトリパスであると考えられる場合は、検出され"
"た CPAN ディレクトリからの相対ファイル名になります。それ以外の場合は、入力さ"
"れたパスがそのまま設定されます。\n"
"* maturity\n"
"\n"
"  配布物の成熟度が設定されます。 'released' (リリース版) または "
"'developer' (開発者版) のいずれかになります。\n"
"* extension\n"
"\n"
"  配布物の拡張子が設定されます。通常は書庫のタイプ (例: 'tar.gz') になりま"
"す。\n"
"* pathname\n"
"\n"
"  オブジェクトを作成した際に渡されたパス名が設定されます。\n"
"* properties\n"
"\n"
"  キー／値のペアのリストが設定されます。ハッシュなどの既知のプロパティが設定"
"されます。\n"
"* version\n"
"\n"
"  抽出されたバージョンが設定されます"

#. leap/perl-CPAN-Meta-Check/summary
msgid "Verify requirements in a CPAN::Meta object"
msgstr "CPAN::Meta オブジェクト内での要件検証"

#. leap/perl-CPAN-Meta-Check/description
msgid ""
"This module verifies if requirements described in a CPAN::Meta object are "
"present."
msgstr ""
"このモジュールは、 CPAN::Meta オブジェクト内に示されている要件が満たされてい"
"るかどうかを検証します。"

#. leap/perl-CPAN-Meta-Requirements/summary
msgid "Set of Version Requirements for a Cpan Dist"
msgstr "CPAN 配布物に対するバージョン要件の設定"

#. leap/perl-CPAN-Meta-Requirements/description
msgid ""
"A CPAN::Meta::Requirements object models a set of version constraints like "
"those specified in the _META.yml_ or _META.json_ files in CPAN "
"distributions, and as defined by CPAN::Meta::Spec; It can be built up by "
"adding more and more constraints, and it will reduce them to the simplest "
"representation.\n"
"\n"
"Logically impossible constraints will be identified immediately by thrown "
"exceptions."
msgstr ""
"CPAN::Meta::Requirements オブジェクトは、 CPAN の配布物内に存在し CPAN::"
"Meta::Spec で定義されているほか、 _META.yml_ もしくは _META.json_ ファイルで"
"指定されているような、バージョン制約のセットをモデル化するものです。追加の制"
"約を追加していくこともできるほか、シンプルにするためにそれらを縮小するような"
"こともできます。\n"
"\n"
"このほか、論理的に実現不可能な制約が現われた場合は、例外をスローする機能も用"
"意されています。"

#. leap/perl-CPAN-Mini/summary
msgid "Create a Minimal Mirror of Cpan"
msgstr "CPAN に対する最小ミラーの作成"

#. leap/perl-CPAN-Mini/description
msgid ""
"CPAN::Mini provides a simple mechanism to build and update a minimal mirror "
"of the CPAN on your local disk. It contains only those files needed to "
"install the newest version of every distribution. Those files are: \n"
"* *\n"
"\n"
"  01mailrc.txt.gz \n"
"* *\n"
"\n"
"  02packages.details.txt.gz \n"
"* *\n"
"\n"
"  03modlist.data.gz \n"
"* *\n"
"\n"
"  the last non-developer release of every dist for every author"
msgstr ""
"CPAN::Mini は、お使いのディスク内に CPAN の最小ミラーを構築し、それを更新する"
"ための機構を提供します。各配布物の最新バージョンをインストールするには、下記"
"のファイルのみが必要です:\n"
"* *\n"
"\n"
"  01mailrc.txt.gz\n"
"* *\n"
"\n"
"  02packages.details.txt.gz\n"
"* *\n"
"\n"
"  03modlist.data.gz\n"
"* *\n"
"\n"
"  各作者の各配布物に対して、最新の非開発者向けリリースをダウンロードします"

#. leap/perl-CPAN-Perl-Releases/summary
msgid "Mapping Perl releases on CPAN to the location of the tarballs"
msgstr "CPAN 内での Perl リリースからローカルの tar ボールへのマッピング"

#. leap/perl-CPAN-Perl-Releases/description
msgid ""
"CPAN::Perl::Releases is a module that contains the mappings of all 'perl' "
"releases that have been uploaded to CPAN to the 'authors/id/' path that the "
"tarballs reside in.\n"
"\n"
"This is static data, but newer versions of this module will be made "
"available as new releases of 'perl' are uploaded to CPAN."
msgstr ""
"CPAN::Perl::Releases は、 tar ボールが存在する 'authors/id/' パスにアップロー"
"ドしたすべての 'perl' リリースのマッピングを含むものです。\n"
"\n"
"これは固定のデータではありますが、 'perl' の新しいリリースが CPAN にアップ"
"ロードされることで、このモジュールも新しいバージョンに更新されます。"

#. leap/perl-CPAN-Uploader/summary
msgid "Upload things to the CPAN"
msgstr "CPAN へのアップロード"

#. leap/perl-CPAN-Uploader/description
msgid "upload things to the CPAN"
msgstr "CPAN へのアップロード"

#. leap/perl-CSS-Minifier-XS/summary
msgid "XS based CSS minifier"
msgstr "XS ベースの CSS 小型化モジュール"

#. leap/perl-CSS-Minifier-XS/description
msgid ""
"'CSS::Minifier::XS' is a CSS \"minifier\"; its designed to remove un-"
"necessary whitespace and comments from CSS files, while also *not* breaking "
"the CSS.\n"
"\n"
"'CSS::Minifier::XS' is similar in function to 'CSS::Minifier', but is "
"substantially faster as its written in XS and not just pure Perl."
msgstr ""
"'CSS::Minifier::XS' は CSS の小型化モジュールです。不要なホワイトスペースや "
"CSS ファイル内のコメントを削除するように作られていますが、 CSS 自身を壊してし"
"まったりすることはありません。\n"
"\n"
"'CSS::Minifier::XS' は 'CSS::Minifier' に似た機能を提供しますが、純粋な Perl "
"ではなく XS で作られた仕組みであるため、比較的高速に動作します。"

#. leap/perl-CSS-Tiny/summary
msgid "Read/Write .css files with as little code as possible"
msgstr "できる限り少ないコードでの .css ファイルの読み書き"

#. leap/perl-CSS-Tiny/description
msgid ""
"'CSS::Tiny' is a perl class to read and write .css stylesheets with as "
"little code as possible, reducing load time and memory overhead. CSS.pm "
"requires about 2.6 meg or ram to load, which is a large amount of overhead "
"if you only want to do trivial things. Memory usage is normally scoffed at "
"in Perl, but in my opinion should be at least kept in mind.\n"
"\n"
"This module is primarily for reading and writing simple files, and anything "
"we write shouldn't need to have documentation/comments. If you need "
"something with more power, move up to CSS.pm. With the increasing complexity "
"of CSS, this is becoming more common, but many situations can still live "
"with simple CSS files."
msgstr ""
"'CSS::Tiny' はできる限り少ないコードで作成された .css スタイルシートの読み書"
"きクラスで、読み込み時間とメモリのオーバーヘッドが少なくなるように設計されて"
"います。 CSS.pm では読み込みの際に 2.6 MB 程度のメモリ容量を必要としますが、"
"これは複雑な処理を実施する際には馬鹿にできないサイズです。 Perl を使用する場"
"合、メモリの使用量を気にすることはあまりありませんが、念のため注意しておくべ"
"きだと考えております。\n"
"\n"
"このモジュールは、主にシンプルなファイルの読み書きを目指しているほか、ドキュ"
"メンテーションやコメントを読まなくても簡単に扱えることを目指しています。より"
"高性能なものをお求めの場合は、 CSS.pm をお使いください。 CSS が複雑化していく"
"にあたって、左記のようなモジュールの必要性も高まっていますが、まだ多くの場合"
"においてシンプルな CSS ファイルも必要とされているはずです。"

#. leap/perl-Cache-Cache/summary
msgid "The Cache Interface"
msgstr "キャッシュインターフェイス"

#. leap/perl-Cache-Cache/description
msgid ""
"The Cache modules are designed to assist a developer in persisting data for "
"a specified period of time. Often these modules are used in web applications "
"to store data locally to save repeated and redundant expensive calls to "
"remote machines or databases. People have also been known to use Cache::"
"Cache for its straightforward interface in sharing data between runs of an "
"application or invocations of a CGI-style script or simply as an easy to use "
"abstraction of the filesystem or shared memory.\n"
"\n"
"The Cache::Cache interface is implemented by classes that support the get, "
"set, remove, size, purge, and clear instance methods and their corresponding "
"static methods for persisting data across method calls."
msgstr ""
"Cache モジュールは開発者に対して、指定した期間だけデータの保持を行なう機能を"
"提供します。これらのモジュールは、 Web アプリケーション内でリモートのマシンや"
"データベースに繰り返し同じ問い合わせを実施しないようにするため、しばしば用い"
"られます。 Cache::Cache はアプリケーションや CGI スタイルのスクリプトなどか"
"ら、直感的なインターフェイスを提供するものとしてすでに知られていますが、場合"
"によってはファイルシステムや共有メモリを使用するだけの簡易な実装が用いられる"
"こともあります。\n"
"\n"
"Cache::Cache のインターフェイスは get, set, remove, size, purge, clear の各イ"
"ンスタンスメソッドを提供するクラスで実装されているほか、メソッド呼び出しをま"
"たがってデータを保持するため、関連する静的なメソッドも用意されています。"

#. leap/perl-Cache-LRU/summary
msgid "Simple, Fast Implementation of Lru Cache in Pure Perl"
msgstr "純粋な Perl 内でのシンプルかつ高速な LRU キャッシュの実装"

#. leap/perl-Cache-LRU/description
msgid ""
"Cache::LRU is a simple, fast implementation of an in-memory LRU cache in "
"pure perl."
msgstr ""
"Cache::LRU は Perl コードだけで作成された、シンプルで高速なメモリ内 LRU "
"キャッシュの実装です。"

#. leap/perl-Cache-Memcached/summary
msgid "Client Library for Memcached (Memory Cache Daemon)"
msgstr ""
"memcached (メモリキャッシュデーモン (Memory Cache Daemon)) 向けのクライアント"
"ライブラリ"

#. leap/perl-Cache-Memcached/description
msgid ""
"This is the Perl API for memcached, a distributed memory cache daemon. More "
"information is available at:\n"
"\n"
"  http://www.danga.com/memcached/"
msgstr ""
"これは memcached と呼ばれる、分散型のメモリキャッシュデーモン向けの Perl API "
"です。詳しい情報は下記にあります:\n"
"\n"
"  http://www.danga.com/memcached/"

#. leap/perl-Cairo/summary
#. leap/perl-Cairo/description
msgid "Perl interface to the cairo 2d vector graphics library"
msgstr "cairo 2d ベクトルグラフィックライブラリへの Perl インターフェイス"

#. leap/perl-Cairo-GObject/summary
#. leap/perl-Cairo-GObject/description
msgid "Integrate Cairo into the Glib type system"
msgstr "Glib タイプシステムに対する Cairo の統合"

#. leap/perl-Calendar-Simple/summary
msgid "Perl extension to create simple calendars"
msgstr "シンプルなカレンダーを作成するための Perl 拡張"

#. leap/perl-Calendar-Simple/description
msgid "A very simple module that exports one function called 'calendar'."
msgstr ""
"'calendar' と呼ばれる 1 つの関数を公開する、非常にシンプルなモジュールです。"

#. leap/perl-Canary-Stability/summary
msgid "Canary to Check Perl Compatibility for Schmorp's Modules"
msgstr "Schmorp 氏のモジュール向け Perl 互換性チェックモジュール"

#. leap/perl-Canary-Stability/description
msgid ""
"This module is used by Schmorp's modules during configuration stage to test "
"the installed perl for compatibility with his modules.\n"
"\n"
"It's not, at this stage, meant as a tool for other module authors, although "
"in principle nothing prevents them from subscribing to the same ideas.\n"
"\n"
"See the _Makefile.PL_ in Coro or AnyEvent for usage examples."
msgstr ""
"このモジュールは Schmorp 氏のモジュールで使用されているもので、設定ステージの"
"間にインストールされている Perl と対象モジュールとの互換性をテストするための"
"仕組みです。\n"
"\n"
"現時点では他のモジュール作者に対して提供されているものではありませんが、実際"
"のところどのモジュールでも利用は可能です。\n"
"\n"
"使用例について、詳しくは Coro 内の _Makefile.PL_ もしくは AnyEvent をお読みく"
"ださい。"

#. leap/perl-Capture-Tiny/summary
msgid "Capture STDOUT and STDERR from Perl, XS or external programs"
msgstr ""
"Perl, XS のほか、外部プログラムからの STDOUT/STDERR 出力を取り込むモジュール"

#. leap/perl-Capture-Tiny/description
msgid ""
"Capture::Tiny provides a simple, portable way to capture almost anything "
"sent to STDOUT or STDERR, regardless of whether it comes from Perl, from XS "
"code or from an external program. Optionally, output can be teed so that it "
"is captured while being passed through to the original filehandles. Yes, it "
"even works on Windows (usually). Stop guessing which of a dozen capturing "
"modules to use in any particular situation and just use this one."
msgstr ""
"Capture::Tiny は STDOUT (標準出力) や STDERR (標準エラー出力) に送信されるほ"
"ぼすべてのデータを、シンプルで可搬性のある方法で取り込む機能を提供します。"
"Perl からの出力だけでなく、 XS コードからの出力や外部プログラムの出力を取り込"
"むことができます。また、必要であれば出力を複製し、取り込みとともに元の出力先"
"に流す機能も用意されています。もちろん Windows でも動作します。どのような場合"
"でも出力を取り込めますから、わざわざ考えることなく本モジュールを使用すること"
"をお勧めします。"

#. leap/perl-Carp-Always/summary
msgid "Warns and dies noisily with stack backtraces"
msgstr ""
"スタックのバックトレースと共にうるさく警告およびエラー終了するモジュール"

#. leap/perl-Carp-Always/description
msgid ""
"This module is meant as a debugging aid. It can be used to make a script "
"complain loudly with stack backtraces when warn()ing or die()ing.\n"
"\n"
"Here are how stack backtraces produced by this module looks:\n"
"\n"
"     $ perl -MCarp::Always -e 'sub f { die \"arghh\" }; sub g { f }; g'   "
"arghh at -e line 1           main::f() called at -e line 1           main::"
"g() called at -e line 1\n"
"\n"
"     $ perl -MCarp::Always -w -e 'sub f { $a = shift; @a = @$a };' "
"\\                            -e 'sub g { f(undef) }; g'   Use of "
"uninitialized value in array dereference at -e line 1           main::"
"f('undef') called at -e line 2           main::g() called at -e line 2\n"
"\n"
"In the implementation, the Carp module does the heavy work, through "
"'longmess()'. The actual implementation sets the signal hooks $SIG{__WARN__} "
"and $SIG{__DIE__} to emit the stack backtraces.\n"
"\n"
"Also, all uses of 'carp' and 'croak' are made verbose, behaving like 'cluck' "
"and 'confess'."
msgstr ""
"このモジュールはデバッグ目的で提供されているものです。 warn() や die() の際"
"に、スタックバックトレースを表示して詳細情報を出力できるようにします。\n"
"\n"
"このモジュールで生成されるバックトレースは下記のようになっています:\n"
"\n"
"     $ perl -MCarp::Always -e 'sub f { die \"arghh\" }; sub g { f }; g'   "
"arghh at -e line 1           main::f() called at -e line 1           main::"
"g() called at -e line 1\n"
"\n"
"     $ perl -MCarp::Always -w -e 'sub f { $a = shift; @a = @$a };' "
"\\                            -e 'sub g { f(undef) }; g'   Use of "
"uninitialized value in array dereference at -e line 1           main::"
"f('undef') called at -e line 2           main::g() called at -e line 2\n"
"\n"
"この実装では、 Carp モジュールの 'longmess()' を主に利用しています。また、ス"
"タックバックトレースを出力するにあたっては、 $SIG{__WARN__} と $SIG{__DIE__} "
"のフックを利用しています。\n"
"\n"
"また、 'carp' や 'croak' の全ての使用において、 'cluck' や 'confess' のような"
"冗長出力が行なわれます。"

#. leap/perl-Carp-Assert/summary
msgid "executable comments"
msgstr "実行可能なコメント"

#. leap/perl-Carp-Assert/description
msgid ""
"    \"We are ready for any unforseen event that may or may not     occur."
"\"         - Dan Quayle\n"
"\n"
"Carp::Assert is intended for a purpose like the ANSI C library http://en."
"wikipedia.org/wiki/Assert.h. If you're already familiar with assert.h, then "
"you can probably skip this and go straight to the FUNCTIONS section.\n"
"\n"
"Assertions are the explicit expressions of your assumptions about the "
"reality your program is expected to deal with, and a declaration of those "
"which it is not. They are used to prevent your program from blissfully "
"processing garbage inputs (garbage in, garbage out becomes garbage in, error "
"out) and to tell you when you've produced garbage output. (If I was going to "
"be a cynic about Perl and the user nature, I'd say there are no user inputs "
"but garbage, and Perl produces nothing but...)\n"
"\n"
"An assertion is used to prevent the impossible from being asked of your "
"code, or at least tell you when it does. For example:\n"
"\n"
"         sub my_sqrt {         my($num) = shift;\n"
"\n"
"                 assert($num >= 0);\n"
"\n"
"        return sqrt $num;     }\n"
"\n"
"The assertion will warn you if a negative number was handed to your "
"subroutine, a reality the routine has no intention of dealing with.\n"
"\n"
"An assertion should also be used as something of a reality check, to make "
"sure what your code just did really did happen:\n"
"\n"
"    open(FILE, $filename) || die $!;     @stuff = <FILE>;     @stuff = "
"do_something(@stuff);\n"
"\n"
"         assert(@stuff > 0);\n"
"\n"
"The assertion makes sure you have some @stuff at the end. Maybe the file was "
"empty, maybe do_something() returned an empty list... either way, the "
"assert() will give you a clue as to where the problem lies, rather than 50 "
"lines down at when you wonder why your program isn't printing anything.\n"
"\n"
"Since assertions are designed for debugging and will remove themelves from "
"production code, your assertions should be carefully crafted so as to not "
"have any side-effects, change any variables, or otherwise have any effect on "
"your program. Here is an example of a bad assertation:\n"
"\n"
"    assert($error = 1 if $king ne 'Henry');  # Bad!\n"
"\n"
"It sets an error flag which may then be used somewhere else in your program. "
"When you shut off your assertions with the $DEBUG flag, $error will no "
"longer be set.\n"
"\n"
"Here's another example of *bad* use:\n"
"\n"
"    assert($next_pres ne 'Dan Quayle' or goto Canada);  # Bad!\n"
"\n"
"This assertion has the side effect of moving to Canada should it fail. This "
"is a very bad assertion since error handling should not be placed in an "
"assertion, nor should it have side-effects.\n"
"\n"
"In short, an assertion is an executable comment. For instance, instead of "
"writing this\n"
"\n"
"         $life = begin_life();\n"
"\n"
"you'd replace the comment with an assertion which *enforces* the comment.\n"
"\n"
"    $life = begin_life();     assert( $life =~ /!$/ );"
msgstr ""
"    \"起こりうる見えない問題にも、起こりえず見えない問題にも、準備ができてい"
"る。\"   - Dan Quayle\n"
"\n"
"Carp::Assert は ANSI C ライブラリにおける assert (http://en.wikipedia.org/"
"wiki/Assert.h) のような機能を提供することを目的にしています。既に assert.h を"
"ご存知の場合は、この章を読み飛ばして FUNCTIONS セクションをお読みください。\n"
"\n"
"アサーションとは、お使いのプログラムに対して期待する \"必ず成立すべき条件\" "
"を明記したもので、お使いのプログラム内での予期しない動作を防ぎ、期待しない入"
"力でもエラーにならないようにするための仕組みです (Perl やユーザの操作をあまり"
"信頼していないのであれば、まさにこれが重要になることでしょう...)\n"
"\n"
"アサーションとは、お使いのコード内で不正な状態を防ぐための仕組みで、少なくと"
"も不正を検知した場所で処理を停止します。たとえば下記のようなコードがあるとし"
"ます:\n"
"\n"
"         sub my_sqrt {         my($num) = shift;\n"
"\n"
"                 assert($num >= 0);\n"
"\n"
"        return sqrt $num;     }\n"
"\n"
"上記の例では、サブルーチンのパラメータに負の数を指定した場合に、警告メッセー"
"ジが表示されます。これは、このサブルーチン内で負の値を処理する意図がないため"
"です。\n"
"\n"
"アサーションは真実性のチェックを行なう際にも使用することができます。たとえば"
"下記のようなコードが考えられます:\n"
"\n"
"    open(FILE, $filename) || die $!;     @stuff = <FILE>;     @stuff = "
"do_something(@stuff);\n"
"\n"
"         assert(@stuff > 0);\n"
"\n"
"上記のアサーションは、最終的に @stuff 内に 1 つ以上の項目が入っていることを期"
"待するものです。ファイルが空であったような場合、通常であれば上記の sub は空の"
"リストを返しますが、 assert() を追加することにより、そこで処理を停止させるこ"
"とができますから、何も表示されずに処理が続行してしまうよりは、ずっと対応がや"
"りやすくなることでしょう。\n"
"\n"
"アサーションはデバッグ用途に設計されたもので、本番のコードでは削除しておくべ"
"きものです。そのため、 assert() を利用するにあたっては、それが思わぬ悪影響を"
"与えないように使用する必要があります。悪いアサーションの例としては、下記のよ"
"うなものがあります:\n"
"\n"
"    assert($error = 1 if $king ne 'Henry');  # Bad!\n"
"\n"
"上記は $error の値を設定していますので、プログラム内の他の場所で $error の値"
"を利用して何らかの処理を行なっていると、 $DEBUG フラグでアサーションを無効化"
"した場合とは処理が異なることになってしまいます。\n"
"\n"
"また、下記のような *悪い* 例もあります:\n"
"\n"
"    assert($next_pres ne 'Dan Quayle' or goto Canada);  # Bad!\n"
"\n"
"このアサーションは条件判断が偽であった場合、 Canada という位置までジャンプし"
"てしまいます。これはエラー処理では非常に悪い例で、本来の問題が何であったのか"
"がわかりにくくなってしまいます。\n"
"\n"
"簡単にいうと、アサーションとは実行可能なコメントです。たとえば下記のように記"
"述する場合:\n"
"\n"
"         $life = begin_life();\n"
"\n"
"下記のようにして実行可能なコメントを記述することができます:\n"
"\n"
"    $life = begin_life();     assert( $life =~ /!$/ );"

#. leap/perl-Carp-Assert-More/summary
msgid "Convenience assertions for common situations"
msgstr "一般的な状況に対する便利さのアサーション"

#. leap/perl-Carp-Assert-More/description
msgid ""
"Carp::Assert::More is a convenient set of assertions to make the habit of "
"writing assertions even easier.\n"
"\n"
"Everything in here is effectively syntactic sugar. There's no technical "
"difference between calling one of these functions:\n"
"\n"
"    assert_datetime( $foo );     assert_isa( $foo, 'DateTime' );\n"
"\n"
"that are provided by Carp::Assert::More and calling these assertions from "
"Carp::Assert\n"
"\n"
"    assert( defined $foo );     assert( ref($foo) eq 'DateTime' );\n"
"\n"
"My intent here is to make common assertions easy so that we as programmers "
"have no excuse to not use them."
msgstr ""
"Carp::Assert::Moreは、アサーションを作成する習慣をさらに簡単にするための便利なアサーションのセットです。\n"
"\n"
"ここにあるものはすべて、事実上、糖衣構文(syntactic sugar)です。これらの関数のいずれかを呼び出すことに技術的な違いはありません。\n"
"\n"
"    assert_datetime($foo); assert_isa($foo,'dateTime');\n"
"\n"
"Carp::Assert::Moreで提供され、これらのアサーションをCarp::Assertから呼び出します\n"
"\n"
"    assert(defined$foo);assert(ref($foo)eq'dateTime');\n"
"\n"
"ここで私が意図しているのは、一般的なアサーションを簡単にして、私たちプログラマーがそれらを使わない言い訳がないようにすることです。"

#. leap/perl-Carp-Clan/summary
msgid "Report errors from perspective of caller of a \"clan\" of modules"
msgstr ""
"モジュールの \"クラン\" (呼び出し構造) を見通してエラーをわかりやすくするモ"
"ジュール"

#. leap/perl-Carp-Clan/description
msgid ""
"This module is based on \"'Carp.pm'\" from Perl 5.005_03. It has been "
"modified to skip all package names matching the pattern given in the \"use\" "
"statement inside the \"'qw()'\" term (or argument list).\n"
"\n"
"Suppose you have a family of modules or classes named \"Pack::A\", \"Pack::B"
"\" and so on, and each of them uses \"'Carp::Clan qw(^Pack::);'\" (or at "
"least the one in which the error or warning gets raised).\n"
"\n"
"Thus when for example your script \"tool.pl\" calls module \"Pack::A\", and "
"module \"Pack::A\" calls module \"Pack::B\", an exception raised in module "
"\"Pack::B\" will appear to have originated in \"tool.pl\" where \"Pack::A\" "
"was called, and not in \"Pack::A\" where \"Pack::B\" was called, as the "
"unmodified \"'Carp.pm'\" would try to make you believe ':-)'.\n"
"\n"
"This works similarly if \"Pack::B\" calls \"Pack::C\" where the exception is "
"raised, etcetera.\n"
"\n"
"In other words, this blames all errors in the \"'Pack::*'\" modules on the "
"user of these modules, i.e., on you. ';-)'\n"
"\n"
"The skipping of a clan (or family) of packages according to a pattern "
"describing its members is necessary in cases where these modules are not "
"classes derived from each other (and thus when examining '@ISA' - as in the "
"original \"'Carp.pm'\" module - doesn't help).\n"
"\n"
"The purpose and advantage of this is that a \"clan\" of modules can work "
"together (and call each other) and throw exceptions at various depths down "
"the calling hierarchy and still appear as a monolithic block (as though they "
"were a single module) from the perspective of the caller.\n"
"\n"
"In case you just want to ward off all error messages from the module in "
"which you \"'use Carp::Clan'\", i.e., if you want to make all error messages "
"or warnings to appear to originate from where your module was called (this "
"is what you usually used to \"'use Carp;'\" for ';-)'), instead of in your "
"module itself (which is what you can do with a \"die\" or \"warn\" anyway), "
"you do not need to provide a pattern, the module will automatically provide "
"the correct one for you.\n"
"\n"
"I.e., just \"'use Carp::Clan;'\" without any arguments and call \"carp\" or "
"\"croak\" as appropriate, and they will automatically defend your module "
"against all blames!\n"
"\n"
"In other words, a pattern is only necessary if you want to make several "
"modules (more than one) work together and appear as though they were only "
"one."
msgstr ""
"このモジュールは Perl 5.005_03 における \"'Carp.pm'\" をベースにしたモジュー"
"ルです。 \"use\" ステートメント内の \"'qw()'\" 句 (またはパラメータリスト) "
"で、パターンに該当するすべてのパッケージを飛ばす (スキップする) ように修正さ"
"れています。\n"
"\n"
"たとえば \"Pack::A\", \"Pack::B\" 等のモジュールやクラスがあるものと仮定する"
"と、それらのそれぞれで \"'Carp::Clan qw(^Pack::);'\" を使用している場合があり"
"ます (もしくは、それらのうちのいずれかでエラーや例外が発生した場合を想定しま"
"す) 。\n"
"\n"
"このとき、たとえば \"tool.pl\" というスクリプトが \"Pack::A\" モジュールを呼"
"び出し、 \"Pack::A\" が \"Pack::B\" を呼び出しているとすると、未修正の "
"\"'Carp.pm'\" では、 \"Pack::B\" 内で発生した例外は、 \"tool.pl\" 内の "
"\"Pack::A\" が呼び出された箇所を示す形になり、 \"Pack::B\" を呼び出していた "
"\"Pack::A\" を示すことはありません。\n"
"\n"
"これはたとえば、 \"Pack::B\" が \"Pack::C\" を呼び出していて、その中で例外が"
"発生した場合も同様になります。\n"
"\n"
"これは、言い換えれば \"'Pack::*'\" モジュール内で発生したすべてのエラーが "
"\"tool.pl\" のエラー (つまりあなたの間違い) として報告されることになりま"
"す。\n"
"\n"
"パターンを指定して、パッケージ内の該当する箇所 (またはファミリ) を飛ばすこと"
"は、これらのモジュールが互いに派生関係にない場合に必要となります (そしてこの"
"理由から、(元々の \"'Carp.pm'\" にあるような) '@ISA' を解釈してしまっては解決"
"しません) 。\n"
"\n"
"このモジュールの目的とメリットは、互いにうまく動作するような \"集合\" である"
"ことにあり、様々な場所で例外が発生した場合でも呼び出しの階層構造を表示し、一"
"枚岩のブロックとして見える (それらが単一のモジュールであるかのように) ことを"
"目指しています。\n"
"\n"
"\"'use Carp::Clan'\" を設定していて、単純に特定のモジュール内で発生したすべて"
"のエラーメッセージについて、これらをすべて受け流すようにしたい場合、つまりエ"
"ラーメッセージや警告メッセージ (\"die\" または \"warn\") で表示される場所が、"
"モジュールを呼び出した場所ではなく実際に発生した場所であって欲しい場合 (通常"
"は \"'use Carp;'\" を使用しますが) は、パターンを設定する必要はなく、モジュー"
"ルは自動的に正しい情報を提供します。\n"
"\n"
"これは何もパラメータを指定せずに \"'use Carp::Clan;'\" だけを使用し、 \"carp"
"\" や\"croak\" を適切に使用していれば、警告やエラーのメッセージは自動的に元の"
"場所を示すようになるということです。\n"
"\n"
"これをさらに言い換えれば、パターンは特定のモジュールだけに対して動作させたい"
"場合にのみ指定するものであると言えます。"

#. leap/perl-Carton/summary
msgid "Perl module dependency manager (aka Bundler for Perl)"
msgstr "Perl モジュールの依存関係管理 (Bundler for Perl)"

#. leap/perl-Carton/description
msgid ""
"carton is a command line tool to track the Perl module dependencies for your "
"Perl application. Dependencies are declared using cpanfile format, and the "
"managed dependencies are tracked in a _cpanfile.snapshot_ file, which is "
"meant to be version controlled, and the snapshot file allows other "
"developers of your application will have the exact same versions of the "
"modules.\n"
"\n"
"For 'cpanfile' syntax, see cpanfile documentation."
msgstr ""
"carton はお使いの Perl アプリケーションで利用することのできる、 Perl モジュー"
"ルの依存関係を追跡するためのコマンドラインツールです。依存関係は cpanfile 形"
"式で定義し、現在の依存関係の情報は _cpanfile.snapshot_ ファイルに保存されま"
"す。また、このモジュールはバージョンの管理のほか、お使いのアプリケーションを"
"開発する他の方から、厳密に同じバージョンのモジュールを指定できるようにもして"
"います。\n"
"\n"
"'cpanfile' の文法について、詳しくは cpanfile のドキュメンテーションをご覧くだ"
"さい。"

#. leap/perl-Catalyst-Manual/summary
#. leap/perl-Catalyst-Manual/description
msgid "The Catalyst developer's manual"
msgstr "Catalyst 開発者マニュアル"

#. leap/perl-Chart/summary
msgid "Series of Charting Modules"
msgstr "グラフ作成モジュール集"

#. leap/perl-Chart/description
msgid ""
"These man-pages give you the most important information about Chart. There "
"is also a complete documentation (Documentation.pdf) within the Chart "
"package. Look at it to get more information. This module is an attempt to "
"build a general purpose graphing module that is easily modified and "
"expanded. I borrowed most of the API from Martien Verbruggen's GIFgraph "
"module. I liked most of GIFgraph, but I thought it was to difficult to "
"modify, and it was missing a few things that I needed, most notably legends. "
"So I decided to write a new module from scratch, and I've designed it from "
"the bottom up to be easy to modify. Like GIFgraph, Chart uses Lincoln "
"Stein's GD module for all of its graphics primitives calls."
msgstr ""
"これらのマニュアルページでは、 Chart モジュールに関する最も重要な情報を提供し"
"ています。ここには Chart パッケージ内にある完全なドキュメンテーション "
"(Documentation.pdf) も含まれています。このモジュールは、容易に修正したり拡張"
"したりすることのできる、汎用グラフ作成モジュールです。 API の多くは Martien "
"Verbruggen氏による GIFgraph モジュールを参考にしていて、作者自身も GIFgraph "
"を好んでいましたが、修正するための手間が多いことがわかっていて、必要な機能が"
"いくつか足りていないことがわかったため、新しいモジュールを新たに作成すること"
"にしました。Chart では Lincoln Stein 氏による GD モジュールを使用し、すべての"
"グラフィック処理を実施しています。"

#. leap/perl-Class-Accessor/summary
msgid "Automated accessor generation"
msgstr "自動アクセサ生成"

#. leap/perl-Class-Accessor/description
msgid ""
"This module automagically generates accessors/mutators for your class.\n"
"\n"
"Most of the time, writing accessors is an exercise in cutting and pasting. "
"You usually wind up with a series of methods like this:\n"
"\n"
"    sub name {         my $self = shift;         if(@_) {             $self-"
">{name} = $_[0];         }         return $self->{name};     }\n"
"\n"
"    sub salary {         my $self = shift;         if(@_) "
"{             $self->{salary} = $_[0];         }         return $self-"
">{salary};     }\n"
"\n"
"  \n"
"\n"
"One for each piece of data in your object. While some will be unique, doing "
"value checks and special storage tricks, most will simply be exercises in "
"repetition. Not only is it Bad Style to have a bunch of repetitious code, "
"but it's also simply not lazy, which is the real tragedy.\n"
"\n"
"If you make your module a subclass of Class::Accessor and declare your "
"accessor fields with mk_accessors() then you'll find yourself with a set of "
"automatically generated accessors which can even be customized!\n"
"\n"
"The basic set up is very simple:\n"
"\n"
"    package Foo;     use base qw(Class::Accessor);     Foo-"
">mk_accessors( qw(far bar car) );\n"
"\n"
"Done. Foo now has simple far(), bar() and car() accessors defined.\n"
"\n"
"Alternatively, if you want to follow Damian's _best practice_ guidelines you "
"can use:\n"
"\n"
"    package Foo;     use base qw(Class::Accessor);     Foo-"
">follow_best_practice;     Foo->mk_accessors( qw(far bar car) ); \n"
"*Note:* you must call 'follow_best_practice' before calling 'mk_accessors'."
msgstr ""
"このモジュールは、お使いのクラスに対してアクセサやミューテータを自動的に生成"
"します。\n"
"\n"
"ほとんどの場合、アクセサの記述はカット&ペーストで済む作業です。例えば下記のよ"
"うな多数のコードを作成する必要に迫られます:\n"
"\n"
"    sub name {         my $self = shift;         if(@_) {             $self-"
">{name} = $_[0];         }         return $self->{name};     }\n"
"\n"
"    sub salary {         my $self = shift;         if(@_) "
"{             $self->{salary} = $_[0];         }         return $self-"
">{salary};     }\n"
"\n"
"  \n"
"\n"
"これをオブジェクト内のデータピースそれぞれに対して行なうことになります。場合"
"によっては、値のチェックや保存方法のトリックなどを記述する必要がありますが、"
"ほとんどのコードは上記の繰り返しです。コードを意味もなく繰り返すのはスタイル"
"上の問題であるほか、単なる手間にもなってしまうような、悲劇的なものです。\n"
"\n"
"お使いのモジュールを Class::Accessor のサブクラスに設定し、 mk_accessoes() を"
"利用してアクセサフィールドを設定すると、自動的に生成されたアクセサを利用でき"
"るようになるほか、カスタマイズを行なうこともできるようになります。\n"
"\n"
"基本的なセットアップは非常に簡単です:\n"
"\n"
"    package Foo;     use base qw(Class::Accessor);     Foo-"
">mk_accessors( qw(far bar car) );\n"
"\n"
"これだけです。 Foo には far(), bar(), car() の各アクセサが生成されます。\n"
"\n"
"このほか、 Damian's _best practice_ ガイドラインに従いたい場合は、下記のよう"
"にすることもできます:\n"
"\n"
"    package Foo;     use base qw(Class::Accessor);     Foo-"
">follow_best_practice;     Foo->mk_accessors( qw(far bar car) ); \n"
"*注意:* 'mk_accessors' を呼び出すよりも前に 'follow_best_practice' を呼び出さ"
"なければなりません。"

#. leap/perl-Class-Accessor-Chained/summary
msgid "Make chained accessors"
msgstr "チェイン化されたアクセサの作成"

#. leap/perl-Class-Accessor-Chained/description
msgid ""
" A chained accessor is one that always returns the object when called with "
"parameters (to set), and the value of the field when called with no "
"arguments.\n"
"\n"
"This module subclasses Class::Accessor in order to provide the same "
"mk_accessors interface.\n"
"\n"
"  Authors:\tRichard Clamp <richardc@unixbeard.net>\n"
"-------------------------------------------------------------------------------"
msgstr ""
" チェインアクセサとは、パラメータ付きでオブジェクトを呼び出した場合には常にオ"
"ブジェクトそのものを返し、パラメータ無しで呼び出した場合にはフィールドの値を"
"返すようなアクセサです。\n"
"\n"
"このモジュールは、 mk_accessors インターフェイスを提供する目的で、 Class::"
"Accessor をサブクラス化しています。\n"
"\n"
"  作者:\tRichard Clamp <richardc@unixbeard.net>\n"
"-------------------------------------------------------------------------------"

#. leap/perl-Class-Accessor-Grouped/summary
msgid "Lets you build groups of accessors"
msgstr "アクセサのグループの構築"

#. leap/perl-Class-Accessor-Grouped/description
msgid ""
"This class lets you build groups of accessors that will call different "
"getters and setters. The documentation of this module still requires a lot "
"of work (*volunteers welcome >.>*), but in the meantime you can refer to at "
"http://lo-f.at/glahn/2009/08/WritingPowerfulAccessorsForPerlClasses.html for "
"more information."
msgstr ""
"このクラスは、様々な getter や setter を呼び出すアクセサのグループを構築しま"
"す。このモジュールのドキュメンテーションはまだ作成途中で、多くの作業が必要と"
"なっています (*ボランティア募集中*) が、詳しい情報については http://lo-f.at/"
"glahn/2009/08/WritingPowerfulAccessorsForPerlClasses.html をお読みください。"

#. leap/perl-Class-Accessor-Lite/summary
msgid "Minimalistic Variant of Class::Accessor"
msgstr "Class::Accessor の最小形"

#. leap/perl-Class-Accessor-Lite/description
msgid ""
"The module is a variant of 'Class::Accessor'. It is fast and requires less "
"typing, has no dependencies to other modules, and does not mess up the @ISA."
msgstr ""
"このモジュールは 'Class::Accessor' から派生したクラスで、入力の手間を省きなが"
"らも他のモジュールへの依存関係が無く、かつ @ISA の仕組みを壊さないモジュール"
"になっています。"

#. leap/perl-Class-Adapter/summary
msgid "Perl implementation of the \"Adapter\" Design Pattern"
msgstr "\"Adapter\" デザインパターンの Perl 実装"

#. leap/perl-Class-Adapter/description
msgid ""
"The 'Class::Adapter' class is intended as an abstract base class for "
"creating any sort of class or object that follows the _Adapter_ pattern."
msgstr ""
"'Class::Adapter' は、 _Adapter_ パターンに従って様々な種類のクラスやオブジェ"
"クトを作成することができる、抽象化ベースクラスとなるべきものです。"

#. leap/perl-Class-Autouse/summary
msgid "Run-time load a class the first time you call a method in it"
msgstr ""
"クラス内のメソッドを最初に呼び出した際に、クラスを動的に読み込むモジュール"

#. leap/perl-Class-Autouse/description
msgid ""
"*Class::Autouse* is a runtime class loader that allows you to specify "
"classes that will only load when a method of that class is called.\n"
"\n"
"For large classes or class trees that might not be used during the running "
"of a program, such as Date::Manip, this can save you large amounts of "
"memory, and decrease the script load time a great deal. \n"
"*Class::Autouse* also provides a number of \"unsafe\" features for runtime "
"generation of classes and implementation of syntactic sugar. These features "
"make use of (evil) UNIVERSAL::AUTOLOAD hooking, and are implemented in this "
"class because these hooks can only be done by a one module, and Class::"
"Autouse serves as a useful place to centralise this kind of evil :)"
msgstr ""
"*Class::Autouse* は、クラス内のメソッドを呼び出した最初のタイミングで、指定し"
"たクラスを読み込むことのできるランタイムクラスローダーです。\n"
"\n"
"Date::Manip のように、実行中のプログラムからは使用されないだろうと思われる巨"
"大なクラスやクラスツリーに対しては、メモリの使用率を劇的に改善し、スクリプト"
"の読み込み時間を大幅に削減できるようになります。\n"
"また、 *Class::Autouse*  では文法シュガーの形で、クラスや実装の実行時生成を行"
"なう \"危険な\" 機能も多数提供しています。これらの機能は (悪の) UNIVERSAL::"
"AUTOLOAD フッキングを利用していて、このクラス内で実装されています。なぜなら、"
"これらのフックは 1 つのモジュールによってのみ行なわれるものであり、 Class::"
"Autouse はこのような \"悪\" を一手に引き受けることができるためです :)"

#. leap/perl-Class-Base/summary
msgid "Useful Base Class for Deriving Other Modules"
msgstr "他のモジュールの派生モジュールを作るための便利なベースクラス"

#. leap/perl-Class-Base/description
msgid ""
"Please consider using Badger::Base instead which is the successor of this "
"module.\n"
"\n"
"This module implements a simple base class from which other modules can be "
"derived, thereby inheriting a number of useful methods such as 'new()', "
"'init()', 'params()', 'clone()', 'error()' and 'debug()'.\n"
"\n"
"For a number of years, I found myself re-writing this module for practically "
"every Perl project of any significant size. Or rather, I would copy the "
"module from the last project and perform a global search and replace to "
"change the names. Each time it got a little more polished and eventually, I "
"decided to Do The Right Thing and release it as a module in it's own right.\n"
"\n"
"It doesn't pretend to be an all-encompassing solution for every kind of "
"object creation problem you might encounter. In fact, it only supports "
"blessed hash references that are created using the popular, but by no means "
"universal convention of calling 'new()' with a list or reference to a hash "
"array of named parameters. Constructor failure is indicated by returning "
"undef and setting the '$ERROR' package variable in the module's class to "
"contain a relevant message (which you can also fetch by calling 'error()' as "
"a class method).\n"
"\n"
"e.g.\n"
"\n"
"    my $object = My::Module->new( \tfile => 'myfile.html', \tmsg  => 'Hello "
"World'     ) || die $My::Module::ERROR;\n"
"\n"
"or:\n"
"\n"
"    my $object = My::Module->new({ \tfile => 'myfile.html', \tmsg  => 'Hello "
"World',     }) || die My::Module->error();\n"
"\n"
"The 'new()' method handles the conversion of a list of arguments into a hash "
"array and calls the 'init()' method to perform any initialisation. In many "
"cases, it is therefore sufficient to define a module like so:\n"
"\n"
"    package My::Module;     use Class::Base;     use base qw( Class::"
"Base );\n"
"\n"
"    sub init { \tmy ($self, $config) = @_; \t \t$self->params($config, "
"qw( FOO BAR )) || return undef; \treturn $self;     }\n"
"\n"
"    \n"
"\n"
"    1;\n"
"\n"
"Then you can go right ahead and use it like this:\n"
"\n"
"    use My::Module;\n"
"\n"
"    my $object = My::Module->new( FOO => 'the foo value', \t\t\t\t  BAR => "
"'the bar value' )         || die $My::Module::ERROR;\n"
"\n"
"Despite its limitations, Class::Base can be a surprisingly useful module to "
"have lying around for those times where you just want to create a regular "
"object based on a blessed hash reference and don't want to worry too much "
"about duplicating the same old code to bless a hash, define configuration "
"values, provide an error reporting mechanism, and so on. Simply derive your "
"module from 'Class::Base' and leave it to worry about most of the detail. "
"And don't forget, you can always redefine your own 'new()', 'error()', or "
"other method, if you don't like the way the Class::Base version works."
msgstr ""
"このモジュールは使用せず、後継モジュールである Badger::Base をお使いくださ"
"い。\n"
"\n"
"このモジュールは、他のモジュールが提供するクラスを派生させ、 'new()', "
"'init()', 'params()', 'clone()', 'error()', 'debug()' などの多くの便利なメ"
"ソッドを継承することのできる、シンプルなベースクラスを実装しています。\n"
"\n"
"何年にもわたり、様々な規模の Perl プロジェクトに対して、このモジュールは書き"
"直されてきました。というよりも、直近のプロジェクトからモジュールをコピーし"
"て、名前を変更するためにグローバルに検索および置換が行なわれてきました。作業"
"を行なうごとにそれは磨き上げられてきたことから、ここでようやくこれをモジュー"
"ルとして公開するに至りました。\n"
"\n"
"なお、このモジュールは、オブジェクトを作成するにあたって発生する様々な問題に"
"対して、すべてを網羅するようには考えられていません。実際には、 'new()' に対し"
"てリストや名前付きのパラメータが含まれるハッシュ参照を与えるような、よくある"
"ブレス型のハッシュ参照のみをサポートしています。コンストラクタにおけるエラー"
"は undef を返すことによって表わされ、モジュール内にある '$ERROR' というパッ"
"ケージ変数に関連するメッセージが設定されます (クラスメソッドの 'error()' を呼"
"び出しても同じ結果を得られます) 。\n"
"\n"
"具体的には、下記のいずれかのようになります:\n"
"\n"
"    my $object = My::Module->new( \tfile => 'myfile.html', \tmsg  => 'Hello "
"World'     ) || die $My::Module::ERROR;\n"
"\n"
"    my $object = My::Module->new({ \tfile => 'myfile.html', \tmsg  => 'Hello "
"World',     }) || die My::Module->error();\n"
"\n"
"'new()' メソッドはパラメータの一覧をハッシュ参照に変換して 'init()' メソッド"
"を呼び出し、実際の初期化を行ないます。多くのクラスでは、下記のようにモジュー"
"ルを定義するのがよいでしょう:\n"
"\n"
"    package My::Module;     use Class::Base;     use base qw( Class::"
"Base );\n"
"\n"
"    sub init { \tmy ($self, $config) = @_; \t \t$self->params($config, "
"qw( FOO BAR )) || return undef; \treturn $self;     }\n"
"\n"
"    \n"
"\n"
"    1;\n"
"\n"
"モジュールを使用する場合は、下記のようにするだけです:\n"
"\n"
"    use My::Module;\n"
"\n"
"    my $object = My::Module->new( FOO => 'the foo value', \t\t\t\t  BAR => "
"'the bar value' )         || die $My::Module::ERROR;\n"
"\n"
"制限事項もありますが、 Class::Base は驚くほど便利なモジュールで、通常のオブ"
"ジェクトベースのブレス型参照を利用するような場合や、ハッシュをブレスするため"
"の同じような古いコードを繰り返してしまうような手間をかけたくない場合、もしく"
"は設定値の定義やエラー報告の仕組みなど、様々な手間を省くことができます。単純"
"に 'Class::Base' からお使いのモジュールに派生させれば、それだけで済みます。な"
"お、 Class::Base のバージョンの動作で支障がある場合は、忘れずに 'new()', "
"'error()' などのメソッドを定義してください。"

#. leap/perl-Class-C3/summary
msgid "Pragma to use the C3 method resolution order algorithm"
msgstr "C3 メソッド解決順序アルゴリズムを使用するプラグマ"

#. leap/perl-Class-C3/description
msgid ""
"This is pragma to change Perl 5's standard method resolution order from "
"depth-first left-to-right (a.k.a - pre-order) to the more sophisticated C3 "
"method resolution order. \n"
"*NOTE:* YOU SHOULD NOT USE THIS MODULE DIRECTLY - The feature provided is "
"integrated into perl version >= 5.9.5, and you should use MRO::Compat "
"instead, which will use the core implementation in newer perls, but fallback "
"to using this implementation on older perls."
msgstr ""
"これは Perl 5 の標準のメソッド解決順序である、 depth-first left-to-right (別"
"名: pre-order) を変更するためのプラグマで、より洗練された C3 メソッド解決順序"
"を使用するようにします。\n"
"*注意*: このモジュールは直接使用すべきではありません - 提供される機能は Perl "
"バージョン 5.9.5 以降で統合されているほか、 使用する場合であっても MRO::"
"Compat を使うべきです。こちらは新しい Perl 内にある中枢の実装を使用しますが、"
"このモジュールでは古い Perl でこの実装を使用することができるようになります。"

#. leap/perl-Class-C3-Adopt-NEXT/summary
msgid "Make Next Suck Less"
msgstr "NEXT の騒ぎを収めるもの"

#. leap/perl-Class-C3-Adopt-NEXT/description
msgid ""
"the NEXT manpage was a good solution a few years ago, but isn't any more. "
"It's slow, and the order in which it re-dispatches methods appears random at "
"times. It also encourages bad programming practices, as you end up with code "
"to re-dispatch methods when all you really wanted to do was run some code "
"before or after a method fired.\n"
"\n"
"However, if you have a large application, then weaning yourself off 'NEXT' "
"isn't easy.\n"
"\n"
"This module is intended as a drop-in replacement for NEXT, supporting the "
"same interface, but using the Class::C3 manpage to do the hard work. You can "
"then write new code without 'NEXT', and migrate individual source files to "
"use 'Class::C3' or method modifiers as appropriate, at whatever pace you're "
"comfortable with."
msgstr ""
"NEXT は何年にもわたって良いソリューションではありましたが、現在はもうそうでは"
"ありません。動作が遅く、メソッドの再発信は時によってランダムな順序で動作して"
"しまいます。これでは悪いプログラミングを推奨することになってしまい、結局は実"
"際にやりたかったメソッドの再発信は、メソッドの実行前後で実行されてしまいま"
"す。\n"
"\n"
"しかしながら、巨大なアプリケーションを作成しているような場合、 'NEXT' から離"
"れるのは簡単ではありません。\n"
"\n"
"このモジュールは NEXT を直接的に置き換える目的で開発されたモジュールで、同じ"
"インターフェイスに対応しながら、 Class::C3 を利用して複雑な処理を実現していま"
"す。新しく作成するコードから 'NEXT' を使用しないようにし、既存の各ソースファ"
"イルは順次 'Class::C3' を使用するように移行するか、適切であればメソッドの修飾"
"子を設定することで、適切なペースで移行することができるようになります。"

#. leap/perl-Class-C3-Componentised/summary
msgid "Load mix-ins or components to your C3-based class"
msgstr ""
"mix-in またはコンポーネントの C3 ベースのクラスへの読み込みを行ないます"

#. leap/perl-Class-C3-Componentised/description
msgid ""
"This will inject base classes to your module using the Class::C3 method "
"resolution order.\n"
"\n"
"Please note: these are not plugins that can take precedence over methods "
"declared in MyModule. If you want something like that, consider MooseX::"
"Object::Pluggable."
msgstr ""
"このモジュールは、 Class::C3 メソッド解決順序を利用して、お使いのモジュールに"
"対する基本クラスを発行します。\n"
"\n"
"注意: MyModule 内で定義されているメソッドの優先順序を変更するようなモジュール"
"ではありません。このような機能をお求めの場合は、 MooseX::Object::Pluggable を"
"お使いください。"

#. leap/perl-Class-C3-XS/summary
msgid "XS speedups for Class::C3"
msgstr "Class::C3 向け XS 高速化"

#. leap/perl-Class-C3-XS/description
msgid ""
"This contains XS performance enhancers for Class::C3 version 0.16 and "
"higher. The main Class::C3 package will use this package automatically if it "
"can find it. Do not use this package directly, use Class::C3 instead.\n"
"\n"
"The test suite here is not complete, although it does verify a few basic "
"things. The best testing comes from running the Class::C3 test suite\n"
"*after* this module is installed.\n"
"\n"
"This module won't do anything for you if you're running a version of Class::"
"C3 older than 0.16. (It's not a dependency because it would be circular with "
"the optional dependency from that package to this one)."
msgstr ""
"このモジュールは Class::C3 バージョン 0.16 およびそれ以降に対して、 XS の性能"
"を上げるための仕組みを提供するものです。メインの Class::C3 パッケージは、この"
"パッケージが見つかればそれを自動的に使用します。ただし、このパッケージは直接"
"使用せず、 Class::C3 をお使いください。\n"
"\n"
"なお、ここで提供されているテストスイートは不完全なものですが、非常に基本的な"
"機能をチェックすることができます。 Class::C3 テストスイートを実行する場合は、"
"このモジュールをインストールした *後に* 実施してください。\n"
"\n"
"このモジュールは Class::C3 のバージョン 0.16 以前をお使いの場合は、何も動作し"
"ません (そのようなパッケージから任意の依存関係が指定されている場合、それが循"
"環してしまうことがありうるためです) 。"

#. leap/perl-Class-Container/summary
msgid "Glues object frameworks together transparently"
msgstr "オブジェクト同士をフレームワークとして透過的に接続するモジュール"

#. leap/perl-Class-Container/description
msgid ""
"This class facilitates building frameworks of several classes that inter-"
"operate. It was first designed and built for 'HTML::Mason', in which the "
"Compiler, Lexer, Interpreter, Resolver, Component, Buffer, and several other "
"objects must create each other transparently, passing the appropriate "
"parameters to the right class, possibly substituting other subclasses for "
"any of these objects.\n"
"\n"
"The main features of 'Class::Container' are:\n"
"\n"
"  * Explicit declaration of containment relationships (aggregation, factory "
"creation, etc.)\n"
"\n"
"  * Declaration of constructor parameters accepted by each member in a class "
"framework\n"
"\n"
"  * Transparent passing of constructor parameters to the class that needs "
"them\n"
"\n"
"  * Ability to create one (automatic) or many (manual) contained objects "
"automatically and transparently"
msgstr ""
"このクラスは、相互に運用のできる複数のクラスに対して、そのフレームワークの構"
"築を支援します。最初のうちは HTML::Mason 向けに設計および構築されてきました"
"が、コンパイラやレキサ、インタプリタや解決器、コンポーネントやバッファなど、"
"様々なオブジェクトを相互に、かつ透過的に作成しなければならなくなったほか、正"
"しいクラスに正しいパラメータが渡るようにしたり、これらのオブジェクト間で他の"
"サブクラスを置き換えたりする必要が生じたことにより、作成されたものです。\n"
"\n"
"'Class::Container' の主な機能は下記の通りです:\n"
"\n"
"  * 包含関係 (アグリゲーション、ファクトリ作成など) の明示的な定義\n"
"\n"
"  * クラスフレームワーク内での各メンバーで受け入れ可能な、コンストラクタパラ"
"メータの定義\n"
"\n"
"  * 必要なクラスにコンストラクタパラメータを透過的に渡す機能\n"
"\n"
"  * 自動的かつ透過的に、包含関係にある 1 つ (自動) もしくは多数 (手動) のオブ"
"ジェクト作成機能"

#. leap/perl-Class-DBI/summary
#. leap/perl-Class-DBI/description
msgid "Simple Database Abstraction"
msgstr "シンプルなデータベース抽象化機構"

#. leap/perl-Class-Data-Inheritable/summary
msgid "Inheritable, overridable class data"
msgstr "継承可能でオーバーライド可能なクラスデータ"

#. leap/perl-Class-Data-Inheritable/description
msgid ""
"Class::Data::Inheritable is for creating accessor/mutators to class data. "
"That is, if you want to store something about your class as a whole (instead "
"of about a single object). This data is then inherited by your subclasses "
"and can be overriden.\n"
"\n"
"For example:\n"
"\n"
"  Pere::Ubu->mk_classdata('Suitcase');\n"
"\n"
"will generate the method Suitcase() in the class Pere::Ubu.\n"
"\n"
"This new method can be used to get and set a piece of class data.\n"
"\n"
"  Pere::Ubu->Suitcase('Red');   $suitcase = Pere::Ubu->Suitcase;\n"
"\n"
"The interesting part happens when a class inherits from Pere::Ubu:\n"
"\n"
"  package Raygun;   use base qw(Pere::Ubu);\n"
"\n"
"     $suitcase = Raygun->Suitcase;\n"
"\n"
"Raygun inherits its Suitcase class data from Pere::Ubu.\n"
"\n"
"Inheritance of class data works analogous to method inheritance. As long as "
"Raygun does not \"override\" its inherited class data (by using Suitcase() "
"to set a new value) it will continue to use whatever is set in Pere::Ubu and "
"inherit further changes:\n"
"\n"
"     Pere::Ubu->Suitcase('Blue');\n"
"\n"
"However, should Raygun decide to set its own Suitcase() it has now "
"\"overridden\" Pere::Ubu and is on its own, just like if it had overriden a "
"method:\n"
"\n"
"     Raygun->Suitcase('Orange');\n"
"\n"
"Now that Raygun has overridden Pere::Ubu futher changes by Pere::Ubu no "
"longer effect Raygun.\n"
"\n"
"     Pere::Ubu->Suitcase('Samsonite');\n"
"\n"
"Authors:\n"
"--------      Original code by Damian Conway.      Maintained by Michael G "
"Schwern until September 2005.      Now maintained by Tony Bowden."
msgstr ""
"Class::Data::Inheritable はクラスデータに対するアクセサやミューテータを作成す"
"ることができるモジュールです。つまり、 (専用のオブジェクトを作成するのではな"
"く) クラス内に情報を保存したい場合に使用します。このデータはサブクラスで継承"
"したりオーバーライドしたりすることもできます。\n"
"\n"
"例:\n"
"\n"
"  Pere::Ubu->mk_classdata('Suitcase');\n"
"\n"
"は Suitcase() というメソッドを Pere::Ubu 内に作成します。\n"
"\n"
"この新しいメソッドは、クラス内のデータ断片を取り出したり設定したりするのに使"
"用します。\n"
"\n"
"  Pere::Ubu->Suitcase('Red');   $suitcase = Pere::Ubu->Suitcase;\n"
"\n"
"Pere::Ubu からクラスを継承すると、興味深いことが起きます:\n"
"\n"
"  package Raygun;   use base qw(Pere::Ubu);\n"
"\n"
"     $suitcase = Raygun->Suitcase;\n"
"\n"
"Raygun は Pere:Ubu のクラスデータである Suitcase を継承します。\n"
"\n"
"クラスデータの継承はメソッドの継承に似た仕組みで、 Raygun 側でクラスデータを"
"\"オーバーライド\" しない限り (Suitcase() に対して新しい値を設定しない限"
"り) 、Pere::Ubu に設定された内容やその後の変更を継承します:\n"
"\n"
"     Pere::Ubu->Suitcase('Blue');\n"
"\n"
"しかしながら、 Raygun 側で独自の Suitcase() を設定する必要が発生した場合、"
"Pere::Ubu のものを \"オーバーライド\" することができます:\n"
"\n"
"     Raygun->Suitcase('Orange');\n"
"\n"
"これで Raygun は Pere::Ubu のものをオーバーライドすることになります。今後の"
"Pere::Ubu に対する変更は、 Raygun 側には影響しなくなります。\n"
"\n"
"     Pere::Ubu->Suitcase('Samsonite');\n"
"\n"
"作者:\n"
"--------      オリジナル作成者: Damian Conway.      メンテナ: Michael G "
"Schwern until September 2005.      現在のメンテナ: Tony Bowden."

#. leap/perl-Class-Date/summary
msgid "Class for easy date and time manipulation"
msgstr "簡単に日時を取り扱うことができるクラス"

#. leap/perl-Class-Date/description
msgid ""
"This module is intended to provide a general-purpose date and datetime type "
"for perl. You have a Class::Date class for absolute date and datetime, and "
"have a Class::Date::Rel class for relative dates.\n"
"\n"
"You can use \"+\", \"-\", \"<\" and \">\" operators as with native perl data "
"types."
msgstr ""
"このモジュールは、 Perl に対して汎用目的の日付／日時型を提供するためのもので"
"す。絶対日付および日時については Class::Date クラスを、相対日付については "
"Class::Date::Rel クラスをお使いください。\n"
"\n"
"また、ネイティブな Perl データ型として \"+\", \"-\", \"<\", \">\" の演算子を"
"利用することができます。"

#. leap/perl-Class-ErrorHandler/summary
msgid "Base class for error handling"
msgstr "エラー処理向け基本クラス"

#. leap/perl-Class-ErrorHandler/description
msgid ""
"_Class::ErrorHandler_ provides an error-handling mechanism that's generic "
"enough to be used as the base class for a variety of OO classes. Subclasses "
"inherit its two error-handling methods, _error_ and _errstr_, to communicate "
"error messages back to the calling program.\n"
"\n"
"On failure (for whatever reason), a subclass should call _error_ and return "
"to the caller; _error_ itself sets the error message internally, then "
"returns 'undef'. This has the effect of the method that failed returning "
"'undef' to the caller. The caller should check for errors by checking for a "
"return value of 'undef', and calling _errstr_ to get the value of the error "
"message on an error.\n"
"\n"
"As demonstrated in the the SYNOPSIS manpage, _error_ and _errstr_ work as "
"both class methods and object methods."
msgstr ""
"_Class::ErrorHandler_ は様々な OO クラスで利用することのできる、汎用的なエ"
"ラー処理機構のベースクラスです。 _error_ と _errstr_ の 2 つのメソッドをサブ"
"クラス側で継承することで、呼び出し元のプログラムにエラー情報を返却することが"
"できます。\n"
"\n"
"その理由にかかわらず、処理の失敗時にはサブクラス側では _error_ を呼び出し、呼"
"び出し元に情報を返却するようにしてください。 _error_ それ自身は内部的にエラー"
"メッセージを設定して 'undef' を返すようになっています。これはメソッドの呼び出"
"し元に 'undef' を返す効果があります。呼び出し元では返り値が 'undef' であるか"
"どうかをチェックしてエラーを捕捉できるほか、 _errstr_ を利用してエラーに対す"
"るメッセージを取得することができます。\n"
"\n"
"SYNOPSIS で示しているとおり、 _error_ と _errstr_ はクラスメソッドとしてもオ"
"ブジェクトメソッドとしても動作します。"

#. leap/perl-Class-Factory-Util/summary
msgid "Provide utility methods for factory classes"
msgstr "factory クラス向けのユーティリティメソッド"

#. leap/perl-Class-Factory-Util/description
msgid "This module exports a method that is useful for factory classes."
msgstr "このモジュールは、 factory クラスに対して便利なメソッドを公開します。"

#. leap/perl-Class-ISA/summary
msgid "report the search path for a class's ISA tree"
msgstr "クラスの ISA ツリーに対して検索パスを報告するモジュール"

#. leap/perl-Class-ISA/description
msgid ""
"Suppose you have a class (like Food::Fish::Fishstick) that is derived, via "
"its @ISA, from one or more superclasses (as Food::Fish::Fishstick is from "
"Food::Fish, Life::Fungus, and Chemicals), and some of those superclasses may "
"themselves each be derived, via its @ISA, from one or more superclasses (as "
"above).\n"
"\n"
"When, then, you call a method in that class ($fishstick->calories), Perl "
"first searches there for that method, but if it's not there, it goes "
"searching in its superclasses, and so on, in a depth-first (or maybe "
"\"height-first\" is the word) search. In the above example, it'd first look "
"in Food::Fish, then Food, then Matter, then Life::Fungus, then Life, then "
"Chemicals.\n"
"\n"
"This library, Class::ISA, provides functions that return that list -- the "
"list (in order) of names of classes Perl would search to find a method, with "
"no duplicates."
msgstr ""
"Food::Fish::Fishstick のようなクラスがあったとして、それは @ISA を介して 1 つ"
"または複数のスーパークラス (たとえば Food::Fish::Fishstick は Food::Fish, "
"Life::Fungus, Chemicals など) から作成されたものとします。また、これらのスー"
"パークラス自身も @ISA を介して 1 つまたは複数のスーパークラスから作成されたも"
"のとします。\n"
"\n"
"この場合、そのクラスのメソッドを呼び出す ($fishstick->calories) 際、 Perl は"
"まずそのようなメソッドを検索します。存在しない場合、それらのスーパークラスを"
"検索していくことになりますが、検索は深さ順に行なわれます。上記の例では、"
"Food::Fish が検索対象になり、その後 Food, Matter, Life::Fungus, Life, "
"Chemicals. の順で検索を行ないます。\n"
"\n"
"このライブラリ Class::ISA は、このようなリストを返す関数を提供します。 Perl "
"クラスの名前配列として、検索順を重複することなく提供します。"

#. leap/perl-Class-Inner/summary
msgid "A perlish implementation of Java like inner classes"
msgstr "Java のインナークラスの Perl 版実装"

#. leap/perl-Class-Inner/description
msgid ""
"Yet another implementation of an anonymous class with per object "
"overrideable methods, but with the added attraction of sort of working "
"dispatch to the parent class's method."
msgstr ""
"匿名クラスに対するもう 1 つの実装で、 Perl のオブジェクトに対するオーバーライ"
"ドも提供します。ただし、親クラスのメソッドの実行を促す仕組みはそのまま提供さ"
"れます。"

#. leap/perl-Class-Inspector/summary
msgid "Get information about a class and its structure"
msgstr "クラスに関する情報とその構造に関する情報を提供するモジュール"

#. leap/perl-Class-Inspector/description
msgid ""
"Class::Inspector allows you to get information about a loaded class. Most or "
"all of this information can be found in other ways, but they aren't always "
"very friendly, and usually involve a relatively high level of Perl wizardry, "
"or strange and unusual looking code. Class::Inspector attempts to provide an "
"easier, more friendly interface to this information."
msgstr ""
"Class::Inspector は読み込まれたクラスに関する情報を取得することができます。こ"
"の情報の大半もしくは全ては他の方法でも取得できますが、不便であるか比較的高い"
"難易度のコードを書かなければならず、見かけの良くない奇異なコードになってしま"
"いがちです。 Class::Inspector は、これらの情報についての使いやすく見やすいイ"
"ンターフェイスを提供します。"

#. leap/perl-Class-Load/summary
msgid "Working (Require \"Class::Name\") and More"
msgstr "(require \"Class::Name\") 以上の処理をするもの"

#. leap/perl-Class-Load/description
msgid ""
"'require EXPR' only accepts 'Class/Name.pm' style module names, not 'Class::"
"Name'. How frustrating! For that, we provide 'load_class 'Class::Name''.\n"
"\n"
"It's often useful to test whether a module can be loaded, instead of "
"throwing an error when it's not available. For that, we provide "
"'try_load_class 'Class::Name''.\n"
"\n"
"Finally, sometimes we need to know whether a particular class has been "
"loaded. Asking '%INC' is an option, but that will miss inner packages and "
"any class for which the filename does not correspond to the package name. "
"For that, we provide 'is_class_loaded 'Class::Name''."
msgstr ""
"'require EXPR' は 'Class/Name.pm' 形式のモジュール名のみを受け付け、'Class::"
"Name' 形式では受け付けません。そのため、 'load_class 'Class::Name'' というメ"
"ソッドを用意しています。\n"
"\n"
"モジュールの読み込みにあたって、読み込み失敗時にエラー終了するのではなく、読"
"み込み可能かどうかを調べる方法が必要な場合もあります。このような場合"
"は、'try_load_class 'Class::Name'' をお使いください。\n"
"\n"
"また、特定のクラスが読み込まれているかどうかを知りたい場合は、 '%INC' を調べ"
"る方法がありますが、このような場合は内部クラスやファイル名がパッケージ名を表"
"していないような場合にうまく動作しません。このような場合は、 "
"'is_class_loaded 'Class::Name'' をお使いください。"

#. leap/perl-Class-Load-XS/summary
msgid "XS implementation of parts of Class::Load"
msgstr "Class::Load コマンドの XS 実装"

#. leap/perl-Class-Load-XS/description
msgid ""
"This module provides an XS implementation for portions of Class::Load. See "
"Class::Load for API details."
msgstr ""
"このモジュールは、 Class::Load の一部分を XS 実装したものです。API の詳細につ"
"いて、詳しくは Class::Load をご覧ください。"

#. leap/perl-Class-MakeMethods/summary
msgid "Generate common types of methods"
msgstr "メソッドの汎用型の生成"

#. leap/perl-Class-MakeMethods/description
msgid ""
"The Class::MakeMethods framework allows Perl class developers to quickly "
"define common types of methods. When a module uses Class::MakeMethods or one "
"of its subclasses, it can select from a variety of supported method types, "
"and specify a name for each method desired. The methods are dynamically "
"generated and installed in the calling package."
msgstr ""
"Class::MakeMethods フレームワークは、 Perl クラスの開発者に対して、汎用型のメ"
"ソッドを素早く作成できるようにします。モジュール側で Class::MakeMethods やそ"
"のサブクラスを使用すると、対応する様々なメソッドタイプの中から必要なメソッド"
"を選択できるようになります。メソッドは動的に生成され、呼び出し元のパッケージ"
"にインストールされます。"

#. leap/perl-Class-Method-Modifiers/summary
msgid "Provides Moose-like method modifiers"
msgstr "Moose のようなメソッド修飾子"

#. leap/perl-Class-Method-Modifiers/description
msgid ""
"Method modifiers are a convenient feature from the CLOS (Common Lisp Object "
"System) world.\n"
"\n"
"In its most basic form, a method modifier is just a method that calls '$self-"
">SUPER::foo(@_)'. I for one have trouble remembering that exact invocation, "
"so my classes seldom re-dispatch to their base classes. Very bad!\n"
"\n"
"'Class::Method::Modifiers' provides three modifiers: 'before', 'around', and "
"'after'. 'before' and 'after' are run just before and after the method they "
"modify, but can not really affect that original method. 'around' is run in "
"place of the original method, with a hook to easily call that original "
"method. See the 'MODIFIERS' section for more details on how the particular "
"modifiers work.\n"
"\n"
"One clear benefit of using 'Class::Method::Modifiers' is that you can define "
"multiple modifiers in a single namespace. These separate modifiers don't "
"need to know about each other. This makes top-down design easy. Have a base "
"class that provides the skeleton methods of each operation, and have plugins "
"modify those methods to flesh out the specifics.\n"
"\n"
"Parent classes need not know about 'Class::Method::Modifiers'. This means "
"you should be able to modify methods in _any_ subclass. See Term::VT102::"
"ZeroBased for an example of subclassing with 'Class::Method::Modifiers'.\n"
"\n"
"In short, 'Class::Method::Modifiers' solves the problem of making sure you "
"call '$self->SUPER::foo(@_)', and provides a cleaner interface for it.\n"
"\n"
"As of version 1.00, 'Class::Method::Modifiers' is faster in some cases than "
"Moose. See 'benchmark/method_modifiers.pl' in the Moose distribution.\n"
"\n"
"'Class::Method::Modifiers' also provides an additional \"modifier\" type, "
"'fresh'; see below."
msgstr ""
"メソッドの修飾子は CLOS (Common Lisp Object System) の世界では便利な機能で"
"す。\n"
"\n"
"もっとも基本的な形式では、メソッドの修飾子は '$self->SUPER::foo(@_)' を呼び出"
"すだけのメソッドです。私は以前、そのような呼び出しの問題に頭を抱えていました"
"が、これはクラス側でベースクラスに対して再発信を行なっていたためです。非常に"
"よろしくありません。\n"
"\n"
"'Class::Method::Modifiers' は 'before', 'around', 'after' の 3 種類の修飾子を"
"提供します。 'before' と 'after' は単純に対象のメソッドの呼び出し前後に実行さ"
"れる仕組みで、実際のメソッドの実行には影響がありません。 'around' は元のメ"
"ソッドに立ち替わって実行されるもので、フックのようにして元のメソッドから呼び"
"出されます。それぞれの修飾子がどのように動作するのかについて、詳しくは "
"'MODIFIERS' セクションをお読みください。\n"
"\n"
"'Class::Method::Modifiers' を使用するにあたって、明らかな利点としてあげられる"
"のは、単一のネームスペース内で複数の修飾子を設定できることです。それぞれの修"
"飾はお互いを知っておく必要がありません。このような仕組みにより、トップダウン"
"型の設計を簡単に作成することができます。各動作のメソッドに対してスケルトンク"
"ラスを提供するベースクラスがあれば、プラグイン側で各メソッドの実際の動作を記"
"述することができます。\n"
"\n"
"また、親クラス側でも 'Class::Method::Modifiers' を知る必要はありません。これ"
"により、どのようなサブクラス内のメソッドをも修正することができることになりま"
"す。 'Class::Method::Modifiers' を利用したサブクラスの使用例について、詳しく"
"は Term::VT102::ZeroBased をお読みください。\n"
"\n"
"簡単に言うと、 'Class::Method::Modifiers' は '$self->SUPER::foo(@_)' を確実に"
"呼び出さなければならない問題を解決するもので、よりクリーンなインターフェイス"
"を提供します。\n"
"\n"
"バージョン 1.00 では、場合によっては Moose に比べて 'Class::Method::"
"Modifiers' がより高速に動作するようになりました。 Moose 配布物内の "
"'benchmark/method_modifiers.pl' をご覧ください。\n"
"\n"
"また、 'Class::Method::Modifiers' では追加の \"修飾子\" タイプである 'fresh' "
"にも対応しています。詳しくは下記をお読みください。"

#. leap/perl-Class-Method-Modifiers-Fast/summary
msgid "Provides Moose-Like Method Modifiers"
msgstr "Moose のようなメソッド修飾子"

#. leap/perl-Class-Method-Modifiers-Fast/description
msgid ""
"Method modifiers are a powerful feature from the CLOS (Common Lisp Object "
"System) world.\n"
"\n"
"'Class::Method::Modifiers::Fast' provides three modifiers: 'before', "
"'around', and 'after'. 'before' and 'after' are run just before and after "
"the method they modify, but can not really affect that original method. "
"'around' is run in place of the original method, with a hook to easily call "
"that original method. See the 'MODIFIERS' section for more details on how "
"the particular modifiers work."
msgstr ""
"メソッドの修飾子は CLOS (Common Lisp Object System) の世界では便利な機能で"
"す。\n"
"\n"
"もっとも基本的な形式では、メソッドの修飾子は '$self->SUPER::foo(@_)' を呼び出"
"すだけのメソッドです。私は以前、そのような呼び出しの問題に頭を抱えていました"
"が、これはクラス側でベースクラスに対して再発信を行なっていたためです。非常に"
"よろしくありません。\n"
"\n"
"'Class::Method::Modifiers' は 'before', 'around', 'after' の 3 種類の修飾子を"
"提供します。 'before' と 'after' は単純に対象のメソッドの呼び出し前後に実行さ"
"れる仕組みで、実際のメソッドの実行には影響がありません。 'around' は元のメ"
"ソッドに立ち替わって実行されるもので、フックのようにして元のメソッドから呼び"
"出されます。それぞれの修飾子がどのように動作するのかについて、詳しくは "
"'MODIFIERS' セクションをお読みください。"

#. leap/perl-Class-MethodMaker/summary
msgid "Create generic methods for OO Perl"
msgstr "OO Perl 向け汎用メソッド作成"

#. leap/perl-Class-MethodMaker/description
msgid ""
"This module solves the problem of having to continually write accessor "
"methods for your objects that perform standard tasks.\n"
"\n"
"The argument to 'use' is an *arrayref*, as pairs whose \"keys\" are the "
"names of types of generic methods generated by MethodMaker and whose \"values"
"\" tell method maker what methods to make.\n"
"\n"
"To override any generated methods, it is sufficient to ensure that the "
"overriding method is defined when Class::MethodMaker is called. Note that "
"the 'use' keyword introduces a 'BEGIN' block, so you may need to define (or "
"at least declare) your overriding method in a 'BEGIN' block."
msgstr ""
"このモジュールは、お使いのオブジェクトに対するアクセサを作成する手間を省くこ"
"とができるものです。\n"
"\n"
"'use' に対するパラメータは *arrayref* 形式で、 \"キー\" には MethodMaker で生"
"成する汎用メソッドのタイプ名を、 \"値\" には MethodMaker に対して何を生成させ"
"るのかを指定します。\n"
"\n"
"生成されたメソッドに対してオーバーライドするには、オーバーライトしたメソッド"
"がClass::MethodMaker を呼び出したときに定義されていることを確かめる必要があり"
"ます。また、 'use' キーワードは 'BEGIN' ブロックを含むため、 'BEGIN' ブロック"
"内でオーバーライドするメソッドを定義 (少なくとも宣言) する必要があります。"

#. leap/perl-Class-Mix/summary
msgid "Dynamic Class Mixing"
msgstr "動的なクラス混合"

#. leap/perl-Class-Mix/description
msgid ""
"The 'mix_class' function provided by this module dynamically generates "
"`anonymous' classes with specified inheritance."
msgstr ""
"このモジュールで提供されている 'mix_class' 関数は、指定した継承関係を持つ '匿"
"名' クラスを動的に生成します。"

#. leap/perl-Class-Multimethods/summary
msgid "Support multimethods and function overloading in Perl"
msgstr "Perl でのマルチメソッド／関数オーバライド"

#. leap/perl-Class-Multimethods/description
msgid ""
"The Class:Multimethod module exports a subroutine (&multimethod) that can be "
"used to declare other subroutines that are dispatched using a algorithm "
"different from the normal Perl subroutine or method dispatch mechanism."
msgstr ""
"Class::Multimethod モジュールは、通常の Perl サブルーチンやメソッド実行機構と"
"は異なるアルゴリズムを使用した、もう 1 つのサブルーチン定義機能を提供するサブ"
"ルーチン (&multimethod) を公開しています。"

#. leap/perl-Class-ReturnValue/summary
msgid "Return-Value Object That Lets You Treat It"
msgstr "返り値にオブジェクトを設定できるモジュール"

#. leap/perl-Class-ReturnValue/description
msgid ""
"Class::ReturnValue is a \"clever\" return value object that can allow code "
"calling your routine to expect: a boolean value (did it fail) or a list "
"(what are the return values)"
msgstr ""
"Class::ReturnValue は、お使いのルーチンからの呼び出しで、返り値のオブジェクト"
"を設定するための \"賢い\" 方法を提供します: boolean 値 (失敗したかどうか) や"
"リスト (返り値) を設定することができます。"

#. leap/perl-Class-Singleton/summary
msgid "Implementation of a \"Singleton\" class"
msgstr "\"シングルトン\" クラスの実装"

#. leap/perl-Class-Singleton/description
msgid ""
"This is the 'Class::Singleton' module. A Singleton describes an object class "
"that can have only one instance in any system. An example of a Singleton "
"might be a print spooler or system registry. This module implements a "
"Singleton class from which other classes can be derived. By itself, the "
"'Class::Singleton' module does very little other than manage the "
"instantiation of a single object. In deriving a class from 'Class::"
"Singleton', your module will inherit the Singleton instantiation method and "
"can implement whatever specific functionality is required.\n"
"\n"
"For a description and discussion of the Singleton class, see \"Design "
"Patterns\", Gamma et al, Addison-Wesley, 1995, ISBN 0-201-63361-2."
msgstr ""
"これは \"Class::Singleton\" モジュールです。シングルトンとは、システム内で1 "
"つだけのインスタンスを保持できるクラスのことを指します。シングルトンのオブ"
"ジェクトとしては、たとえば印刷用のスプールシステムや、システムのレジストリな"
"どが挙げられます。このモジュールは、そのようなシングルトンを他のクラスから派"
"生する形で作成することができます。なお、 \"Class::Singleton\" モジュールは、"
"単一のオブジェクトに対するインスタンス化を管理するよりも、非常に小さな処理し"
"か行ないません。 \"Class::Singleton\" からクラスを派生させて作成することで、"
"シングルトンのインスタンス化方式を継承し、必要な機能を実装することができるよ"
"うになります。\n"
"\n"
"シングルトンクラスに関する説明や議論について、詳しくは \"デザインパターン"
"\" (Gamma et al, Addison-Wesley, 1995, 原文 ISBN 0-201-63361-2, 日本語訳  "
"ISBN-10: 4797311126 ISBN-13: 978-4797311129) をお読みください。"

#. leap/perl-Class-Spiffy/summary
msgid "Spiffy Framework with No Source Filtering"
msgstr "ソースフィルタリング無しの Spiffy フレームワーク"

#. leap/perl-Class-Spiffy/description
msgid ""
"\"Class::Spiffy\" is a framework and methodology for doing object oriented "
"(OO) programming in Perl. Class::Spiffy combines the best parts of Exporter."
"pm, base.pm, mixin.pm and SUPER.pm into one magic foundation class. It "
"attempts to fix all the nits and warts of traditional Perl OO, in a clean, "
"straightforward and (perhaps someday) standard way.\n"
"\n"
"Class::Spiffy borrows ideas from other OO languages like Python, Ruby, Java "
"and Perl 6. It also adds a few tricks of its own.\n"
"\n"
"If you take a look on CPAN, there are a ton of OO related modules. When "
"starting a new project, you need to pick the set of modules that makes most "
"sense, and then you need to use those modules in each of your classes. "
"Class::Spiffy, on the other hand, has everything you'll probably need in one "
"module, and you only need to use it once in one of your classes. If you make "
"Class::Spiffy the base class of the basest class in your project, Class::"
"Spiffy will automatically pass all of its magic to all of your subclasses. "
"You may eventually forget that you're even using it!"
msgstr ""
"\"Class::Spiffy\" は Perl 内でオブジェクト指向 (OO) プログラミングを行なうた"
"めのフレームワークです。 Class::Spiffy は Exporter.pm, base.pm, mixin.pm, "
"SUPER.pm などの最も便利な箇所を、 1 つの基本クラスとして組み合わせたもので"
"す。また、従来の Perl OO 内にある不便な仕様を、クリーンで直感的、かつ (いつか"
"は) 標準的な方法で全て解決できることを目指しています。\n"
"\n"
"Class::Spiffy では、 Python, Ruby, Java, Perl 6 などのオブジェクト指向型言語"
"から、様々なアイディアを借りているほか、いくつかの機能追加も行なっていま"
"す。\n"
"\n"
"CPAN 内でモジュールを検索すると、多数の OO 関連のモジュールが見つかります。新"
"しいプロジェクトを開始する場合は、まず有用なモジュール類をピックアップすると"
"ころから始まり、お使いのクラス内でそれらを使っていくことになります。一方の "
"Class::Spiffy には 1 つのモジュール内に必要なものが揃っていますので、このクラ"
"スだけを使用すれば問題が解決できます。また、 Class::Spiffy をお使いのプロジェ"
"クト内での最下層ベースクラスとして使用すると、 Class::Spiffy は様々なサブクラ"
"ス内で威力を発揮することになります。おそらくはこれを使用していることさえ忘れ"
"てしまうほど、便利な仕組みとなるでしょう！"

#. leap/perl-Class-Std/summary
msgid "Support for creating standard \"inside-out\" classes"
msgstr "標準的な \"裏返し\" クラスのサポート"

#. leap/perl-Class-Std/description
msgid ""
"This module provides tools that help to implement the \"inside out object\" "
"class structure in a convenient and standard way.\n"
"\n"
"_Portions of the following code and documentation from \"Perl Best Practices"
"\" copyright (c) 2005 by O'Reilly Media, Inc. and reprinted with permission._"
msgstr ""
"このモジュールは \"裏返しオブジェクト\" のクラス構造の実装を、便利かつ標準的"
"な方法で支援するツールを提供します。\n"
"\n"
"_下記のコード部分と \"Perl Best Practices\" からのドキュメンテーションは、 "
"O'Reilly Media, Inc. に著作権があり、許可を得て転載しています。_"

#. leap/perl-Class-Tiny/summary
msgid "Minimalist class construction"
msgstr "最小限のクラス構築"

#. leap/perl-Class-Tiny/description
msgid ""
"This module offers a minimalist class construction kit in around 120 lines "
"of code. Here is a list of features:\n"
"\n"
"  * defines attributes via import arguments\n"
"\n"
"  * generates read-write accessors\n"
"\n"
"  * supports lazy attribute defaults\n"
"\n"
"  * supports custom accessors\n"
"\n"
"  * superclass provides a standard 'new' constructor\n"
"\n"
"  * 'new' takes a hash reference or list of key/value pairs\n"
"\n"
"  * 'new' supports providing 'BUILDARGS' to customize constructor options\n"
"\n"
"  * 'new' calls 'BUILD' for each class from parent to child\n"
"\n"
"  * superclass provides a 'DESTROY' method\n"
"\n"
"  * 'DESTROY' calls 'DEMOLISH' for each class from child to parent\n"
"\n"
"Multiple-inheritance is possible, with superclass order determined via mro::"
"get_linear_isa.\n"
"\n"
"It uses no non-core modules for any recent Perl. On Perls older than v5.10 "
"it requires MRO::Compat. On Perls older than v5.14, it requires Devel::"
"GlobalDestruction."
msgstr ""
"このモジュールは 120 行程度のコードで作られた、最小限のクラス構造を提供しま"
"す。下記のような機能が用意されています:\n"
"\n"
"  * パラメータのインポートを経由した属性の定義\n"
"\n"
"  * 読み書きに対応するアクセサの生成\n"
"\n"
"  * 遅延属性の既定値への対応\n"
"\n"
"  * 独自のアクセサへの対応\n"
"\n"
"  * 標準的な 'new' コンストラクタを提供するスーパークラス\n"
"\n"
"  * 'new' におけるハッシュ参照やキー／値のペアに対するリストの受け付け\n"
"\n"
"  * 'new' における独自のコンストラクタオプションに対応するための 'BUILDARGS' "
"に対応\n"
"\n"
"  * 'new' での親クラスからそれぞれの子クラスに対する 'BUILD' の呼び出し\n"
"\n"
"  * スーパークラスでの 'DESTROY' メソッドへの対応\n"
"\n"
"  * 'DESTROY' での親クラスからそれぞれの子クラスに対する 'DEMOLISH' の呼び出"
"し\n"
"\n"
"多階層の継承にも対応しています。スーパークラスの判断は mro::get_linear_isa を"
"使用します。\n"
"\n"
"最近の Perl では非中枢のモジュールを使用しています。 Perl のバージョンが "
"5.10 より前の場合は、 MRO::Compat が必要となります。また、 5.14 より前の場合"
"は、 Devel::GlobalDestruction が必要です。"

#. leap/perl-Class-Trigger/summary
msgid "Mixin to add / call inheritable triggers"
msgstr "継承可能なトリガの追加または呼び出しの混在"

#. leap/perl-Class-Trigger/description
msgid ""
"Class::Trigger is a mixin class to add / call triggers (or hooks) that get "
"called at some points you specify."
msgstr ""
"Class::Trigger は指定した任意の箇所で呼び出しを実施することができる、トリガ "
"(フックとも呼びます) の追加や呼び出しを行なう混在クラスです。"

#. leap/perl-Class-Unload/summary
#. leap/perl-Class-Unload/description
msgid "Unload a class"
msgstr "クラスのアップロード"

#. leap/perl-Class-WhiteHole/summary
msgid "Base class to treat unhandled method calls as errors"
msgstr "未処理のメソッド呼び出しをエラーとして扱うベースクラス"

#. leap/perl-Class-WhiteHole/description
msgid ""
"It's possible to accidentally inherit an AUTOLOAD method. Often this will "
"happen if a class somewhere in the chain uses AutoLoader or defines one of "
"their own. This can lead to confusing error messages when method lookups "
"fail.\n"
"\n"
"Sometimes you want to avoid this accidental inheritance.  In that case, "
"inherit from Class::WhiteHole. All unhandled methods will produce normal "
"Perl error messages.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Michael G Schwern <schwern@pobox.com>"
msgstr ""
"AUTOLOAD メソッドを不用意に継承してしまうようなことがよくあります。 しばしば"
"このトラブルは、どこかのチェイン内のクラスで AutoLoader を使っていたり、 自分"
"自身の定時を行なっていたりする場合にある話です。このことでメソッドの参照が 失"
"敗して、混乱させるエラーメッセージを表示してしまうことにもつながります。\n"
"\n"
"これを解決するには、不用意な継承を避けるという方法があります。 この場合は "
"Class::WhiteHole から継承してみてください。全ての未処理メソッドは 通常の "
"Perl エラーメッセージを生成するようになります。\n"
"\n"
"\n"
"\n"
"作者:\n"
"--------     Michael G Schwern <schwern@pobox.com>"

#. leap/perl-Class-XPath/summary
msgid "Adds xpath matching to object trees"
msgstr "オブジェクトツリーに対する XPath マッチングの追加"

#. leap/perl-Class-XPath/description
msgid ""
"This module adds XPath-style matching to your object trees. This means that "
"you can find nodes using an XPath-esque query with 'match()' from anywhere "
"in the tree. Also, the 'xpath()' method returns a unique path to a given "
"node which can be used as an identifier.\n"
"\n"
"To use this module you must already have an OO implementation of a tree. The "
"tree must be a true tree - all nodes have a single parent and the tree must "
"have a single root node. Also, the order of children within a node must be "
"stable. \n"
"*NOTE:* This module is not yet a complete XPath implementation. Over time I "
"expect the subset of XPath supported to grow. See the SYNTAX documentation "
"for details on the current level of support."
msgstr ""
"このモジュールは、お使いのオブジェクトツリーに XPath 形式のマッチング機能を提"
"供します。これは、ツリー内のどこからでも match() を使用することで XPath 風の"
"問い合わせを行なって、ノードを発見できるようにするためのものです。もちろん "
"xpath() メソッドは、識別子として利用できるノードに対してユニークなパスを返却"
"します。\n"
"\n"
"このモジュールを使用するには、ツリー内にオブジェクト指向の実装を導入していな"
"ければなりません。また、ツリー構造は真のツリー、つまり全てのノードが単一の親"
"を持ち、ツリーは単一のルートノードを持たなければなりません。さらに、ノード内"
"の子は全て安定しなければなりません。\n"
"*注意:* このモジュールは、現時点では完全な XPath 実装をしていません。今後対応"
"済みの XPath サブセットが追加されていく予定です。現時点での対応レベルについて"
"は、 SYNTAX (文法) ドキュメンテーションをお読みください。"

#. leap/perl-Class-XSAccessor/summary
msgid "Generate fast XS accessors without runtime compilation"
msgstr "実行時にコンパイルすることなく XS のアクセサを生成するモジュール"

#. leap/perl-Class-XSAccessor/description
msgid ""
"Class::XSAccessor implements fast read, write and read/write accessors in "
"XS. Additionally, it can provide predicates such as 'has_foo()' for testing "
"whether the attribute 'foo' exists in the object (which is different from "
"\"is defined within the object\"). It only works with objects that are "
"implemented as ordinary hashes. the Class::XSAccessor::Array manpage "
"implements the same interface for objects that use arrays for their internal "
"representation.\n"
"\n"
"Since version 0.10, the module can also generate simple constructors "
"(implemented in XS). Simply supply the 'constructor => 'constructor_name'' "
"option or the 'constructors => ['new', 'create', 'spawn']' option. These "
"constructors do the equivalent of the following Perl code:\n"
"\n"
"  sub new {     my $class = shift;     return bless { @_ }, ref($class)||"
"$class;   }\n"
"\n"
"That means they can be called on objects and classes but will not clone "
"objects entirely. Parameters to 'new()' are added to the object.\n"
"\n"
"The XS accessor methods are between 3 and 4 times faster than typical pure-"
"Perl accessors in some simple benchmarking. The lower factor applies to the "
"potentially slightly obscure 'sub set_foo_pp {$_[0]->{foo} = $_[1]}', so if "
"you usually write clear code, a factor of 3.5 speed-up is a good estimate. "
"If in doubt, do your own benchmarking!\n"
"\n"
"The method names may be fully qualified. The example in the synopsis could "
"have been written as 'MyClass::get_foo' instead of 'get_foo'. This way, "
"methods can be installed in classes other than the current class. See also: "
"the 'class' option below.\n"
"\n"
"By default, the setters return the new value that was set, and the accessors "
"(mutators) do the same. This behaviour can be changed with the 'chained' "
"option - see below. The predicates return a boolean.\n"
"\n"
"Since version 1.01, 'Class::XSAccessor' can generate extremely simple "
"methods which just return true or false (and always do so). If that seems "
"like a really superfluous thing to you, then consider a large class "
"hierarchy with interfaces such as the PPI manpage. These methods are "
"provided by the 'true' and 'false' options - see the synopsis.\n"
"\n"
"'defined_predicates' check whether a given object attribute is defined. "
"'predicates' is an alias for 'defined_predicates' for compatibility with "
"older versions of 'Class::XSAccessor'. 'exists_predicates' checks whether "
"the given attribute exists in the object using 'exists'."
msgstr ""
"Class::XSAccessor は XS の読み書きに対するアクセサを高速に生成する機能を提供"
"します。これに加えて、オブジェクト内に 'foo' 属性が存在するかどうか ('オブ"
"ジェクト内で定義されているかどうか' とは異なります) をテストするための "
"'has_foo()' のような predicate も提供します。なお、通常のハッシュとして実装さ"
"れているオブジェクトに対してのみ動作します。また、 Class::XSAccessor::Array "
"では、内部表現向けに配列を利用するオブジェクトに対する同インターフェイスを提"
"供します。\n"
"\n"
"バージョン 0.10 より、このモジュールはシンプルなコンストラクタ (XS 内で実装さ"
"れているもの) を生成することもできるようになっています。単純に 'constructor "
"=> 'コンストラクタ名'' オプション、もしくは 'constructors => ['new', "
"'create', 'spawn']' オプションを指定してください。これらのコンストラクタは下"
"記の Perl コードと同じ動作をします:\n"
"\n"
"  sub new {     my $class = shift;     return bless { @_ }, ref($class)||"
"$class;   }\n"
"\n"
"つまり、オブジェクトやクラスに対してこれらを呼び出しても、オブジェクト全体を"
"コピーしたりはしません。 'new()' に対するパラメータはオブジェクトに追加されま"
"す。\n"
"\n"
"また、 XS アクセサメソッドは、シンプルなベンチマークテストで一般的な純粋 "
"Perl 実装より 3 倍から 4 倍程度高速に動作します。比較的わかりにくい 'sub "
"set_foo_pp {$_[0]->{foo} = $_{1}}' と比較する限りではそれほど高速ではありませ"
"んが、わかりやすいコードを記述している場合は、おおよそ 3.5 倍程度の高速化をは"
"かることができます。どれだけ高速に動作するのかを確かめるには、ご自身のモ"
"ジュールでテストすることをお勧めします。\n"
"\n"
"メソッド名は完全修飾型で提供されます。概要に示されている例では、 'get_foo' で"
"はなく 'MyClass::get_foo' として記述されています。このような仕組みにより、現"
"在のクラス以外のクラス内にメソッドをインストールすることができるようになって"
"います。\n"
"\n"
"既定では setter は設定された新しい値を返すほか、アクセサ (ミューテータ) も同"
"様の動作をします。この動作は 'chained' オプションで変更することができます (詳"
"しくは下記をお読みください) 。また、断定メソッドでは boolean を返します。\n"
"\n"
"バージョン 1.01 より、 'Class::XSAccessor' は true や false を返すだけの非常"
"にシンプルなメソッドを生成することもできます。無駄な機能のようにも思えてしま"
"いますが、 PPI のような巨大なクラス構造の場合に便利な仕組みです。これらのメ"
"ソッドは 'true' または 'false' のオプションを設定することができます。\n"
"\n"
"'defined_predicates' チェックは、指定したオブジェクトの属性が定義済みであるか"
"どうかをチェックします。 'predicates' は 'defined_predicates' の別名で、古い"
"バージョンの 'Class::XSAccessor' との互換性確保のために用意されています。ま"
"た、 'exists_predicates' は、 'exists' を利用するオブジェクト内に指定した属性"
"が存在するかどうかをチェックします。"

#. leap/perl-Clone/summary
#. leap/perl-Clone-PP/summary
msgid "Recursively copy Perl datatypes"
msgstr "Perl データタイプを再帰的に複製するツール"

#. leap/perl-Clone/description
msgid ""
"This module provides a 'clone()' method which makes recursive copies of "
"nested hash, array, scalar and reference types, including tied variables and "
"objects.\n"
"\n"
"'clone()' takes a scalar argument and duplicates it. To duplicate lists, "
"arrays or hashes, pass them in by reference, e.g.\n"
"\n"
"    my $copy = clone (\\@array);\n"
"\n"
"    \n"
"\n"
"    my %copy = %;"
msgstr ""
"このモジュールは 'clone()' メソッドを提供します。このメソッドはネストされた"
"ハッシュや配列、スカラー値やタイハッシュやオブジェクトなどの参照タイプを、再"
"帰的に複製することができます。\n"
"\n"
"clone() はスカラー型のパラメータを受け付けて、それを複製します。リスト型や配"
"列、ハッシュなどを複製したい場合は、それらを参照で渡してください。具体的に"
"は、下記のようになります\n"
"\n"
"    my $copy = clone (\\@array);\n"
"\n"
"    \n"
"\n"
"    my %copy = %;"

#. leap/perl-Clone-Choose/summary
msgid "Choose appropriate clone utility"
msgstr "適切な clone ユーティリティの選択"

#. leap/perl-Clone-Choose/description
msgid ""
"'Clone::Choose' checks several different modules which provides a 'clone()' "
"function and selects an appropriate one. The default preference is\n"
"\n"
"  Clone   Storable   Clone::PP\n"
"\n"
"This list might evolve in future. Please see EXPORTS how to pick a "
"particular one."
msgstr ""
"'Clone::Choose' は 'clone()' 関数を提供する様々なモジュールをチェックして、い"
"ずれか適切なものを選択します。既定の優先順位は下記の通りです:\n"
"\n"
"  Clone   Storable   Clone::PP\n"
"\n"
"上記の一覧は将来的に広がっていく可能性があります。いずれかを選択したい場合"
"は、 EXPORTS をご覧ください。"

#. leap/perl-Clone-PP/description
msgid ""
"This module provides a general-purpose clone function to make deep copies of "
"Perl data structures. It calls itself recursively to copy nested hash, "
"array, scalar and reference types, including tied variables and objects.\n"
"\n"
"The clone() function takes a scalar argument to copy. To duplicate arrays or "
"hashes, pass them in by reference:\n"
"\n"
"  my $copy = clone(\\@array);    my @copy = @{ clone(\\@array) };   my $copy "
"= clone(\\%hash);     my %copy = %;\n"
"\n"
"The clone() function also accepts an optional second parameter that can be "
"used to limit the depth of the copy. If you pass a limit of 0, clone will "
"return the same value you supplied; for a limit of 1, a shallow copy is "
"constructed; for a limit of 2, two layers of copying are done, and so on.\n"
"\n"
"  my $shallow_copy = clone( $item, 1 );\n"
"\n"
"To allow objects to intervene in the way they are copied, the clone() "
"function checks for a couple of optional methods. If an object provides a "
"method named 'clone_self', it is called and the result returned without "
"further processing. Alternately, if an object provides a method named "
"'clone_init', it is called on the copied object before it is returned."
msgstr ""
"このモジュールは、 Perl のデータ構造の深いコピーを作成するための汎用クローン"
"関数を提供します。入れ子になったハッシュや配列、スカラー値や参照型のほか、タ"
"イ変数やオブジェクトにタイしても、再帰的に関数を呼び出してコピーすることがで"
"きます。\n"
"\n"
"clone() 関数ではコピーするスカラー値を指定します。配列やハッシュをコピーした"
"い場合は、それを参照として指定します:\n"
"\n"
"  my $copy = clone(\\@array);    my @copy = @{ clone(\\@array) };   my $copy "
"= clone(\\%hash);     my %copy = %;\n"
"\n"
"clone() 関数は 2 つめのパラメータとして、コピーの深さレベルを指定することがで"
"きます。 0 を指定した場合は指定した値と同じ値が返されます。 1 を指定した場合"
"は浅いコピーが、 2 を指定した場合は 2 階層までのコピーが行なわれます。\n"
"\n"
"  my $shallow_copy = clone( $item, 1 );\n"
"\n"
"オブジェクトにタイしてコピーの方法への介入を許可する目的で、 clone() 関数では"
"複数のオプションメソッドをチェックします。オブジェクト内に 'clone_self' とい"
"う名前のメソッドが存在した場合は、特に処理が行なわれることなく結果が返されま"
"す。また、 'clone_init' という名前のメソッドが存在した場合は、コピーを返す前"
"にその関数が呼び出されます。"

#. leap/perl-Code-DRY/summary
msgid "Cut-and-Paste-Detector for Perl code"
msgstr "Perl コード向けカットアンドペースト検出"

#. leap/perl-Code-DRY/description
msgid ""
"The module's main purpose is to report repeated text fragments (typically "
"Perl code) that could be considered for isolation and/or abstraction in "
"order to reduce multiple copies of the same code (aka cut and paste code)."
msgstr ""
"このモジュールの主な目的は、繰り返し現われるテキスト断片 (一般に Perl コー"
"ド、いわゆるコピペ) を報告し、孤立化や抽象化でそれらを解決する作業を支援しま"
"す。"

#. leap/perl-Code-TidyAll/summary
msgid "Engine for tidyall, your all-in-one code tidier and validator"
msgstr "tidyall (オールインワン型コード成形およびバリデータ) 向けエンジン"

#. leap/perl-Code-TidyAll/description
msgid ""
"This is the engine used by tidyall - read that first to get an overview.\n"
"\n"
"You can call this API from your own program instead of executing 'tidyall'."
msgstr ""
"これは tidyall で使用されているエンジンです - 概要について知るには、まず "
"tidyall をご覧ください。\n"
"\n"
"この API を使用することで、 'tidyall' を実行する代わりに独自のプログラムを起"
"動できるようになります。"

#. leap/perl-CommonMark/summary
msgid "Interface to the CommonMark C library"
msgstr "CommonMark C ライブラリに対するインターフェイス"

#. leap/perl-CommonMark/description
msgid ""
"This module is a wrapper around the official CommonMark C library "
"_libcmark_. It closely follows the original API.\n"
"\n"
"The main module provides some entry points to parse documents and "
"convenience functions for node creation. The bulk of features is available "
"through CommonMark::Node objects of which the parse tree is made. "
"CommonMark::Iterator is a useful class to walk through the nodes in a tree. "
"CommonMark::Parser provides a push parser interface."
msgstr ""
"このモジュールは公式の CommonMark C ライブラリ _libcmark_ のラッパーです。オ"
"リジナルの API に似せて作られています。\n"
"\n"
"このメインモジュールは、ノードを作成するために必要なドキュメント処理のための"
"エントリポイントや、便利な関数軍が提供されています。大まかな機能はツリーを処"
"理した際に作成された CommonMark::Node を介して利用することができます。 "
"CommonMark::Iterator はツリー内のノードを探るのに便利なクラスです。 "
"CommonMark::Parser はプッシュ型のパーサーインターフェイスを提供します。"

#. leap/perl-Compress-Bzip2/summary
msgid "Interface to Bzip2 compression library"
msgstr "Bzip2 圧縮ライブラリに対するインターフェイス"

#. leap/perl-Compress-Bzip2/description
msgid ""
"The _Compress::Bzip2_ module provides a Perl interface to the *bzip2* "
"compression library (see AUTHOR for details about where to get _Bzip2_). A "
"relevant subset of the functionality provided by _bzip2_ is available in "
"_Compress::Bzip2_.\n"
"\n"
"All string parameters can either be a scalar or a scalar reference.\n"
"\n"
"The module can be split into two general areas of functionality, namely in-"
"memory compression/decompression and read/write access to _bzip2_ files. "
"Each of these areas will be discussed separately below. \n"
"*NOTE*\n"
"\n"
"_Compress::Bzip2_ is just a simple _bzip2_ binding, comparable to the old "
"Compress::Zlib library. It is not well integrated into PerlIO, use the "
"preferred IO::Compress::Bzip2 instead."
msgstr ""
"_Compress::Bzip2_ モジュールは、 *bzip2* 圧縮ライブラリに対する Perl のイン"
"ターフェイスを提供します (_Bzip2_ の取得方法について、詳しくは AUTHOR をご覧"
"ください) 。 _bzip2_ で提供されている機能の一部を _Compress::Bzip2_ で利用す"
"ることができます。\n"
"\n"
"すべての文字列パラメータは、スカラー値またはスカラー値の参照として指定するこ"
"とができます。\n"
"\n"
"このモジュールは、大きく分けると 2 種類の機能に分類することができます。 1 つ"
"はメモリ内の圧縮と展開の機能、もう 1 つは _bzip2_ ファイルに対する読み書きの"
"機能です。それぞれの領域に対する詳細は、対応する文書をお読みください。\n"
"*注意*\n"
"\n"
"_Compress::Bzip2_ は _bzip2_ に対するシンプルなバインディングであり、 "
"Compress:Zlib ライブラリと同程度の機能を提供するものです。 PerlIO との統合は"
"まだ不十分な状態であるため、 PerlIO をお使いの場合は IO::Compress:Bzip2 をお"
"使いください。"

#. leap/perl-Compress-Raw-Lzma/summary
msgid "Low-Level Interface to lzma compression library"
msgstr "lzma 圧縮ライブラリに対する低レベルインターフェイス"

#. leap/perl-Compress-Raw-Lzma/description
msgid ""
"'Compress::Raw::Lzma' provides an interface to the in-memory compression/"
"uncompression functions from the lzma compression library.\n"
"\n"
"Although the primary purpose for the existence of 'Compress::Raw::Lzma' is "
"for use by the 'IO::Compress::Lzma', 'IO::Uncompress::UnLzma', 'IO::"
"Compress::Xz' and 'IO::Uncompress::UnXz' modules, it can be used on its own "
"for simple compression/uncompression tasks.\n"
"\n"
"There are two functions, called 'code' and 'flush', used in all the "
"compression and uncompression interfaces defined in this module. By default "
"both of these functions overwrites any data stored in its output buffer "
"parameter. If you want to compress/uncompress to a single buffer, and have "
"'code' and 'flush' append to that buffer, enable the 'AppendOutput' option "
"when you create the compression/decompression object."
msgstr ""
"'Compress::Raw::Lzma' は lzma 圧縮ライブラリが提供するメモリ内の圧縮機能と展"
"開機能に対するインターフェイスを提供します。\n"
"\n"
"'Compress::Raw::Lzma' は主に 'IO::Compress::Lzma', 'IO::Uncompress::UnLzma', "
"'IO::Compress::Xz', 'IO::Uncompress::UnXz' の各モジュールで使用されることを目"
"的としていますが、シンプルな圧縮／展開処理のために、独自に使用することもでき"
"ます。\n"
"\n"
"このモジュールには 'code', 'flush' という 2 つの関数が存在していますが、これ"
"らはこのモジュールが定義している全ての圧縮および展開インターフェス内で使用さ"
"れています。既定ではこれらの関数は、いずれも出力バッファパラメータ内に保存さ"
"れているデータを上書きします。単一のバッファで圧縮や展開を行ないたい場合で、 "
"'code' や 'flush' 側でそのバッファに書き込ませたい場合は、圧縮または展開オブ"
"ジェクトを作成する際に、 'AppendOutput' オプションを有効化してください。"

#. leap/perl-Config-Any/summary
msgid "Load configuration from different file formats, transparently"
msgstr "様々な形式の設定ファイルを透過的に読み込むモジュール"

#. leap/perl-Config-Any/description
msgid ""
"Config::Any provides a facility for Perl applications and libraries to load "
"configuration data from multiple different file formats. It supports XML, "
"YAML, JSON, Apache-style configuration, Windows INI files, and even Perl "
"code.\n"
"\n"
"The rationale for this module is as follows: Perl programs are deployed on "
"many different platforms and integrated with many different systems. Systems "
"administrators and end users may prefer different configuration formats than "
"the developers. The flexibility inherent in a multiple format configuration "
"loader allows different users to make different choices, without generating "
"extra work for the developers. As a developer you only need to learn a "
"single interface to be able to use the power of different configuration "
"formats."
msgstr ""
"Config::Any は、 Perl のアプリケーションやライブラリに対して、様々なファイル"
"形式の設定データを読み込むことができるようにする仕組みです。 XML や YAML のほ"
"か、 JSON や Apache 形式の設定、 Windows の INI ファイルや Perl コードでさえ"
"も、設定ファイルとして読み込むことができます。\n"
"\n"
"このモジュールは下記のような理由によって作成されました: Perl のプログラムは"
"様々なプラットフォーム上で動作し、様々なシステムに統合されます。システム管理"
"者やユーザは、開発者とは異なる設定スタイルを好む傾向にありますが、複数の形式"
"に対応した設定モジュールが存在することで、開発者に追加の負担を強いることな"
"く、利用者の好きな方式を利用することができるようになります。開発者側の観点で"
"は、単一のインターフェイスが様々な設定ファイルの形式に対応するため、学習の負"
"担を減らすことができます。"

#. leap/perl-Config-Auto/summary
msgid "Magical config file parser"
msgstr "設定ファイル処理モジュール"

#. leap/perl-Config-Auto/description
msgid ""
"This module was written after having to write Yet Another Config File Parser "
"for some variety of colon-separated config. I decided \"never again\".\n"
"\n"
"Config::Auto aims to be the most 'DWIM' config parser available, by "
"detecting configuration styles, include paths and even config filenames "
"automagically.\n"
"\n"
"See the the HOW IT WORKS manpage section below on implementation details."
msgstr ""
"このモジュールは、コロンで区切られた設定形式である Yet Another Config File "
"Parser の作成後に作られたもので、 \"もう二度と同じようなモジュールは作らない"
"\" ことを決めたことによるものです。\n"
"\n"
"Config::Auto はもっとも 'DWIM' (開発者の意図したとおりに使う) の発想に近いも"
"のを目指して作られています。設定方式の検出やパス、設定のファイル名などを、自"
"動でかつ魔法のように検出します。\n"
"\n"
"実装の詳細について、詳しくは 'HOW IT WORKS' のマニュアルページ内のセクション"
"をお読みください。"

#. leap/perl-Config-AutoConf/summary
msgid "Module to Implement Some of Autoconf Macros in Pure Perl"
msgstr "純粋な Perl 内でいくつかの Autoconf マクロを実装するモジュール"

#. leap/perl-Config-AutoConf/description
msgid ""
"Config::AutoConf is intended to provide the same opportunities to Perl "
"developers as at http://www.gnu.org/software/autoconf/ does for Shell "
"developers.\n"
"\n"
"As Perl is the second most deployed language (mind: every Unix comes with "
"Perl, several mini-computers have Perl and even lot's of Windows machines "
"run Perl software - which requires deployed Perl there, too), this gives "
"wider support than Shell based probes.\n"
"\n"
"The API is leaned against GNU Autoconf, but we try to make the API "
"(especially optional arguments) more Perl'ish than m4 abilities allow to the "
"original."
msgstr ""
"Config::AutoConf は、シェルの開発者に対して作られた http://www.gnu.org/"
"software/autoconf/ (autoconf) と同じ仕組みを、 Perl の開発者に対して提供する"
"ことを目指しているものです。\n"
"\n"
"Perl はコンピュータにインストールされる言語としては第二位の存在になっていて "
"(注: Unix オペレーティングシステムでは標準的に Perl がインストールされている"
"ほか、ミニコンピュータでは環境によって Perl がインストールされている場合もあ"
"り、 Windows マシンでは必要な場合にのみインストールされています) 、シェルベー"
"スの検出よりはより広いサポートを提供することができます。\n"
"\n"
"API は GNU Autoconf を学んで作られたものですが、オリジナルの m4 版よりはより "
"Perl の方針に近い (特にオプションのパラメータ) 仕組みになるようにしています。"

#. leap/perl-Config-Crontab/summary
msgid "Read/Write Vixie compatible crontab(5) files"
msgstr "Vixie 互換の crontab(5) ファイルの読み書き"

#. leap/perl-Config-Crontab/description
msgid ""
"*Config::Crontab* provides an object-oriented interface to Vixie-style "
"crontab(5) files for Perl.\n"
"\n"
"A *Config::Crontab* object allows you to manipulate an ordered set of\n"
"*Event*, *Env*, or *Comment* objects (also included with this package). "
"Descriptions of these packages may be found below.\n"
"\n"
"In short, *Config::Crontab* reads and writes crontab(5) files (and does a "
"little pretty-printing too) using objects. The general idea is that you "
"create a *Config::Crontab* object and associate it with a file (if "
"unassociated, it will work over a pipe to 'crontab -l'). From there, you can "
"add lines to your crontab object, change existing line attributes, and write "
"everything back to file.\n"
"\n"
"Now, to successfully navigate the module's ins and outs, we'll need a little "
"terminology lesson."
msgstr ""
"*Config::Crontab* は Vixie スタイルの crontab(5) ファイルについて、これを"
"Perl からアクセスできるようにするためのオブジェクト指向インターフェイスで"
"す。\n"
"\n"
"*Config::Crontab* オブジェクトでは、 *Event* *Env* *Comment* の各オブジェク"
"ト (それぞれこのパッケージに含まれています) の形で、順序どおりにアクセスする"
"機能が用意されています。これらのパッケージに関する説明も下記に示していま"
"す。\n"
"\n"
"端的に言うと *Config::Crontab* は、オブジェクト指向で crontab(5) ファイルを読"
"み書きすることができる (および見やすい表示を提供する) 仕組みです。一般的な考"
"え方としては、 *Config::Crontab* オブジェクトとそれに結びつけられたファイルを"
"作成します (もしも結びつけられていない場合は、 'crontab -l' へのパイプとして"
"動作します) 。ここから、 crontab オブジェクトに行を追加したり、行の属性を変更"
"したり、任意の項目を書き込んだりすることができます。\n"
"\n"
"あと、全てのモジュールの入出力を行なうには、用語について学ぶだけです。"

#. leap/perl-Config-General/summary
msgid "Generic Config Module"
msgstr "汎用設定モジュール"

#. leap/perl-Config-General/description
msgid ""
"This module opens a config file and parses its contents for you. The *new* "
"method requires one parameter which needs to be a filename. The method\n"
"*getall* returns a hash which contains all options and its associated values "
"of your config file.\n"
"\n"
"The format of config files supported by *Config::General* is inspired by the "
"well known Apache config format, in fact, this module is 100% compatible to "
"Apache configs, but you can also just use simple name/value pairs in your "
"config files.\n"
"\n"
"In addition to the capabilities of an Apache config file it supports some "
"enhancements such as here-documents, C-style comments or multiline options."
msgstr ""
"このモジュールは設定ファイルを開いて中身を解析する機能を提供します。 *new*メ"
"ソッドはファイル名として 1 つのパラメータを指定するだけですし、 *getall*は全"
"てのオプションに対するハッシュ変数を提供し、そこから設定ファイル内の値を取得"
"することができます。\n"
"\n"
"*Config::General* で対応している設定ファイルの書式は、 Apache の設定ファイル"
"の書式を踏襲するもので、実際にこのモジュールは Apache の設定ファイルと 100%の"
"互換性が確保されています。ただし、単純な名前/値の組み合わせから成る設定ファイ"
"ルにも対応しています。\n"
"\n"
"Apache の設定ファイルに対応しているほか、ヒアドキュメントや C 形式のコメン"
"ト、複数行オプションなどにも対応しています。"

#. leap/perl-Config-GitLike/summary
msgid "Git-compatible config file parsing"
msgstr "Git 互換の設定ファイル処理"

#. leap/perl-Config-GitLike/description
msgid ""
"This module handles interaction with configuration files of the style used "
"by the version control system Git. It can both parse and modify these files, "
"as well as create entirely new ones.\n"
"\n"
"You only need to know a few things about the configuration format in order "
"to use this module. First, a configuration file is made up of key/value "
"pairs. Every key must be contained in a section. Sections can have "
"subsections, but they don't have to. For the purposes of setting and getting "
"configuration variables, we join the section name, subsection name, and "
"variable name together with dots to get a key name that looks like \"section."
"subsection.variable\". These are the strings that you'll be passing in to "
"'key' arguments.\n"
"\n"
"Configuration files inherit from each other. By default, 'Config::GitLike' "
"loads data from a system-wide configuration file, a per-user configuration "
"file, and a per-directory configuration file, but by subclassing and "
"overriding methods you can obtain any combination of configuration files. By "
"default, configuration files that don't exist are just skipped.\n"
"\n"
"See http://www.kernel.org/pub/software/scm/git/docs/git-config."
"html#_configurat ion_file for details on the syntax of git configuration "
"files. We won't waste pixels on the nitty gritty here.\n"
"\n"
"While the behavior of a couple of this module's methods differ slightly from "
"the 'git config' equivalents, this module can read any config file written "
"by git. The converse is usually true, but only if you don't take advantage "
"of this module's increased permissiveness when it comes to key names. (See "
"DIFFERENCES FROM GIT-CONFIG for details.)\n"
"\n"
"This is an object-oriented module using Moo. All subroutines are object "
"method calls.\n"
"\n"
"A few methods have parameters that are always used for the same purpose:"
msgstr ""
"このモジュールは、バージョン制御システムである Git の設定ファイルの書式を扱う"
"ためのモジュールです。読み込みと修正の両方に対応しているほか、新しい設定を作"
"成することもできます。\n"
"\n"
"このモジュールを使用するには、まず設定ファイルの書式についていくつか知ってお"
"く必要があります。最初に、設定ファイルはキーと値のペアから構成されています。"
"各キーはそれぞれセクションに所属しなければなりません。セクションにはサブセク"
"ションが存在する場合もありますが、必ずしもサブセクションが存在していなくても"
"かまいません。設定値を設定したり取得したりするためには、セクション名とサブセ"
"クション名、変数名をそれぞれドットで繋げて \"(セクション名).(サブセクション"
"名).(変数名)\" のようにします。これを 'key' パラメータに設定します。\n"
"\n"
"設定ファイルはお互いに継承関係にあります。既定では、 'Config::GitLike' はシス"
"テム全体の設定ファイルからデータを読み込み、その後ユーザごとの設定ファイルや"
"ディレクトリごとの設定ファイルを読み込みます。ただし、サブクラス化やメソッド"
"のオーバーライドなどの方法で、設定ファイルの組み合わせを取得することもできま"
"す。既定では存在しない設定ファイルは飛ばして作業します。\n"
"\n"
"git の設定ファイルの文法について、詳しくは http://www.kernel.org/pub/"
"software/scm/git/docs/git-config.html#_configuration_file をお読みください。"
"ここでは詳しく説明しません。\n"
"\n"
"このモジュールは 'git config' とは異なる動作をしますが、このモジュールは git "
"が書き込んだ任意の設定ファイルを読み込むことができます。逆にこのモジュールが"
"書き込んだ設定ファイルを git 側に読み込ませることもできますが、このモジュール"
"が追加した独自の拡張機能のメリットが受けられなくなってしまいます (詳しくは "
"DIFFERENCES FROM GIT-CONFIG をお読みください) 。\n"
"\n"
"このモジュールは Moo を利用したオブジェクト指向のモジュールです。すべてのサブ"
"ルーチンはオブジェクトのメソッドを呼び出します。\n"
"\n"
"また、いくつかのメソッドには常に同じ目的で使用されるパラメータもあります:"

#. leap/perl-Config-Grammar/summary
msgid "Grammar-Based, User-Friendly Config Parser"
msgstr "文法ベースでユーザにわかりやすい設定パーサ"

#. leap/perl-Config-Grammar/description
msgid ""
"Config::Grammar is a module to parse configuration files. The optional "
"second parameter to the parse() method can be used to specify the file "
"encoding to use for opening the file (see documentation for Perl's use open "
"pragma).\n"
"\n"
"The configuration may consist of multiple-level sections with assignments "
"and tabular data. The parsed data will be returned as a hash containing the "
"whole configuration. Config::Grammar uses a grammar that is supplied upon "
"creation of a Config::Grammar object to parse the configuration file and "
"return helpful error messages in case of syntax errors. Using the *makepod* "
"method you can generate documentation of the configuration file format.\n"
"\n"
"The *maketmpl* method can generate a template configuration file. If your "
"grammar contains regexp matches, the template will not be all that helpful "
"as Config::Grammar is not smart enough to give you sensible template data "
"based in regular expressions. The related function *maketmplmin* generates a "
"minimal configuration template without examples, regexps or comments and "
"thus allows an experienced user to fill in the configuration data more "
"efficiently."
msgstr ""
"Config::Grammar は設定ファイルを処理するためのモジュールです。 2 つめのパラ"
"メータはオプションで、使用すべきファイルのエンコーディングを指定します (Perl "
"が使用する open プラグマのドキュメンテーションをお読みください) 。\n"
"\n"
"設定ファイルには複数レベルのセクションを存在させることができるほか、単純な代"
"入や表形式の値をとることもできます。処理されたデータは設定ファイル全体を含む"
"ハッシュとして返されます。 Config::Grammer はそのオブジェクトの作成時に、設定"
"ファイルを処理するための文法を指定するほか、文法エラーが発生した際にはわかり"
"やすいエラーメッセージを返します。 *makepod* メソッドを利用することで、設定"
"ファイルの書式に対してドキュメンテーションを生成することもできます。\n"
"\n"
"*maketmpl* メソッドでは、ひな形 (テンプレート) となる設定ファイルを生成するこ"
"とができます。なお、文法内に正規表現マッチが含まれていた場合は、その仕組み上"
"あまり役には立ちません。関連する関数である *maketmplmin* では、例や正規表現、"
"コメントなどを提示することなく最小限の設定テンプレートを作成します。これによ"
"り、設定データをより効率的に入力できるようになります。"

#. leap/perl-Config-INI/summary
msgid "Simple .ini-file format"
msgstr "単純な.iniファイル形式"

#. leap/perl-Config-INI/description
msgid "simple .ini-file format"
msgstr "シンプルな .ini ファイル形式"

#. leap/perl-Config-IniFiles/summary
msgid "Module for Reading .Ini-Style Configuration Files"
msgstr "ini 形式の設定ファイルを読み込むためのライブラリ"

#. leap/perl-Config-IniFiles/description
msgid ""
"Config::IniFiles provides a way to have readable configuration files outside "
"your Perl script. Configurations can be imported (inherited, stacked,...), "
"sections can be grouped, and settings can be accessed from a tied hash."
msgstr ""
"Config::IniFiles は Perl スクリプトとは別に設定ファイルを用意し、それを読み込"
"む手段を提供します。設定はインポート (継承／スタック) させることができるほ"
"か、セクションとしてグループ化したり、タイハッシュでアクセスしたりすることが"
"できます。"

#. leap/perl-Config-MVP/summary
msgid "Multivalue-property package-oriented configuration"
msgstr "プロパティに複数の値を設定することができるパッケージ指向の設定"

#. leap/perl-Config-MVP/description
msgid ""
"MVP is a mechanism for loading configuration (or other information) for "
"libraries. It doesn't read a file or a database. It's a helper for things "
"that do.\n"
"\n"
"The idea is that you end up with a Config::MVP::Sequence object, and that "
"you can use that object to fully configure your library or application. The "
"sequence will contain a bunch of Config::MVP::Section objects, each of which "
"is meant to provide configuration for a part of your program. Most of these "
"sections will be directly related to a Perl library that you'll use as a "
"plugin or helper. Each section will have a name, and every name in the "
"sequence will be unique.\n"
"\n"
"This is a pretty abstract set of behaviors, so we'll provide some more "
"concrete examples that should help explain how things work."
msgstr ""
"MVP はライブラリ向けのモジュールで、設定 (またはその他の情報) を読み込むため"
"の仕組みです。ファイルやデータベースから読み込むような機能はなく、単純にヘル"
"パーとして動作します。\n"
"\n"
"考え方は Config::MVP::Sequence オブジェクトをご覧になればわかるでしょう。この"
"オブジェクトを利用して、ライブラリやアプリケーションの設定を扱うことができる"
"ようになります。 sequence にはたくさんの Config::MVP::Section オブジェクトが"
"含まれていますが、それぞれはお使いのプログラムの設定箇所を表わしています。こ"
"れらのセクションの多くは、プラグインやヘルパーとして使用する Perl ライブラリ"
"に直接関係するはずのものです。各セクションには名前が設定され、 sequence 内の"
"名前は唯一のものであるべきものです。\n"
"\n"
"個のモジュールは動作に対する抽象セットで、このモジュールの動作についての詳し"
"い説明をお読みになれば、意図がわかるでしょう。"

#. leap/perl-Config-MVP-Reader-INI/summary
msgid "An MVP config reader for .ini files"
msgstr ".iniファイル用のMVP設定リーダ"

#. leap/perl-Config-MVP-Reader-INI/description
msgid ""
"Config::MVP::Reader::INI reads _.ini_ files containing MVP-style "
"configuration."
msgstr ""
"Config::MVP::Reader::INI は MVP 形式の設定を含む _.ini_ ファイルを読み込みま"
"す。"

#. leap/perl-Config-MySQL/summary
msgid "Read and write MySQL-style configuration files"
msgstr "MySQL 形式の設定ファイルの読み書き"

#. leap/perl-Config-MySQL/description
msgid ""
"This module extends Config::INI to support reading and writing MySQL-style "
"configuration files. Although deceptively similar to standard '.INI' files, "
"they can include bare boolean options with no value assignment and "
"additional features like '!include' and '!includedir'."
msgstr ""
"このモジュールは Config::INI を拡張するモジュールで、 MySQL 形式の設定ファイ"
"ルを読みこんだり、書き込んだりすることができます。標準の \".INI' ファイルと非"
"常に似通っていますが、 MySQL では値を代入せずにブール値を設定できたり、 '!"
"include' や '!includedir' のような追加の機能が用意されています。"

#. leap/perl-Config-Simple/summary
msgid "Simple configuration file class"
msgstr "シンプルな設定ファイルクラス"

#. leap/perl-Config-Simple/description
msgid ""
"Reading and writing configuration files is one of the most frequent tasks of "
"any software design. Config::Simple is the library that helps you with it.\n"
"\n"
"Config::Simple is a class representing configuration file object. It "
"supports several configuration file syntax and tries to identify the file "
"syntax automatically. Library supports parsing, updating and creating "
"configuration files."
msgstr ""
"ソフトウエアの設計作業では、設定ファイルの読み書きが重要な要素を占めます。 "
"Config::Simple はこのような機能を支援するためのライブラリです。\n"
"\n"
"Config::Simple は、設定ファイルをオブジェクトとして表わすクラスです。いくつか"
"の設定ファイルの書式に対応しているほか、ファイルの文法を自動的に判別する機能"
"も用意されています。ライブラリでは設定ファイルの処理のほか、更新や作成にも対"
"応しています。"

#. leap/perl-Config-Std/summary
msgid "Load and save configuration files in a standard format"
msgstr "標準の形式で設定ファイルを読み書きするモジュール"

#. leap/perl-Config-Std/description
msgid ""
"This module implements yet another damn configuration-file system.\n"
"\n"
"The configuration language is deliberately simple and limited, and the "
"module works hard to preserve as much information (section order, comments, "
"etc.) as possible when a configuration file is updated.\n"
"\n"
"The whole point of Config::Std is to encourage use of one standard layout "
"and syntax in config files. Damian says \"I could have gotten away with it, "
"I would have only allowed one separator. But it proved impossible to choose "
"between ':' and '=' (half the people I asked wanted one, half wanted the "
"other).\" Providing round-trip file re-write is the spoonful of sugar to "
"help the medicine go down. The supported syntax is within the general INI "
"file family\n"
"\n"
"See Chapter 19 of \"Perl Best Practices\" (O'Reilly, 2005) for more detail "
"on the rationale for this approach."
msgstr ""
"このモジュールは、もう 1 つの忌々しい設定ファイルシステムを実装するもので"
"す。\n"
"\n"
"設定の言語はわざとシンプルかつ制限のあるものに仕立て上げられていて、設定ファ"
"イルをアップロードした時点の情報 (セクションの順序、コメントなど) を、できる"
"限り多く 保持できるように様々な処理を行なっています。\n"
"\n"
"Config::Std は設定ファイルに対して唯一の標準レイアウトおよび文法を使用するよ"
"うに奨励するためのもので、 Damian 氏によると \"このモジュールからしばらく離れ"
"ていたが、区切り文字は 1 種類のみにしたほうが良かった。しかし ':' と '=' のど"
"ちらを選択するのかを決めるのは不可能 (おおよそユーザは半々に別れる) だ\" と評"
"しています。設定ファイルをいったん読み込んで書き出すことでも、これは解決でき"
"るためです。対応する文法は一般に、 INI ファイルに類するものとされます。\n"
"\n"
"このアプローチの根拠について、詳しくは \"Perl Best Practices\" (O'Reilly, "
"2005) の第 19 章をお読みください。"

#. leap/perl-Config-Tiny/summary
msgid "Read/Write .ini style files with as little code as possible"
msgstr "できる限り少ないコードでの .ini 形式のファイルの読み書き"

#. leap/perl-Config-Tiny/description
msgid ""
"'Config::Tiny' is a Perl class to read and write .ini style configuration "
"files with as little code as possible, reducing load time and memory "
"overhead.\n"
"\n"
"Most of the time it is accepted that Perl applications use a lot of memory "
"and modules.\n"
"\n"
"The '*::Tiny' family of modules is specifically intended to provide an "
"ultralight alternative to the standard modules.\n"
"\n"
"This module is primarily for reading human written files, and anything we "
"write shouldn't need to have documentation/comments. If you need something "
"with more power move up to Config::Simple, Config::General or one of the "
"many other 'Config::*' modules.\n"
"\n"
"Lastly, Config::Tiny does *not* preserve your comments, whitespace, or the "
"order of your config file.\n"
"\n"
"See Config::Tiny::Ordered (and possibly others) for the preservation of the "
"order of the entries in the file."
msgstr ""
"'Config::Tiny' は .ini 形式の設定ファイルを、できる限り少ないコードで、読み込"
"み時間と目盛りのオーバーヘッドを少なくして読み書きするための Perl クラスで"
"す。\n"
"\n"
"Perl のアプリケーションは一般に、多くのメモリとモジュールを使用しがちです。\n"
"\n"
"'*::Tiny' モジュールファミリは、標準的なモジュールに対して超軽量な代替モ"
"ジュールを提供することを目指しています。\n"
"\n"
"このモジュールは主に手作業で作成したファイルを読み込み、ドキュメンテーション"
"やコメントを用いずに書き込むことができる仕組みを目指しています。より強力な機"
"能をお求めの場合は、 Config::Simple や Config::General をはじめ、多数のものが"
"ある 'Config::*' モジュールをご利用ください。\n"
"\n"
"なお、 Config::Tiny ではコメントやホワイトスペースのほか、設定ファイル内の順"
"序は保持 *しません* 。\n"
"\n"
"ファイル内での項目の順序の維持について、詳しくは Config::Tiny::Ordered をお読"
"みください。"

#. leap/perl-Const-Fast/summary
#. leap/perl-Const-Fast/description
msgid "Facility for creating read-only scalars, arrays, and hashes"
msgstr "読み込みのみのスカラ値や配列、ハッシュなどを作成できる仕組み"

#. leap/perl-Context-Preserve/summary
msgid ""
"Run code after a subroutine call, preserving the context the subroutine [cut]"
msgstr "サブルーチン呼び出し後、呼び出す前の状況に復元するためのモジュール"

#. leap/perl-Context-Preserve/description
msgid ""
"Sometimes you need to call a function, get the results, act on the results, "
"then return the result of the function. This is painful because of contexts; "
"the original function can behave different if it's called in void, scalar, "
"or list context. You can ignore the various cases and just pick one, but "
"that's fragile. To do things right, you need to see which case you're being "
"called in, and then call the function in that context. This results in 3 "
"code paths, which is a pain to type in (and maintain).\n"
"\n"
"This module automates the process. You provide a coderef that is the "
"\"original function\", and another coderef to run after the original runs. "
"You can modify the return value (aliased to @_) here, and do whatever else "
"you need to do. 'wantarray' is correct inside both coderefs; in \"after\", "
"though, the return value is ignored and the value 'wantarray' returns is "
"related to the context that the original function was called in."
msgstr ""
"お使いのスクリプトから関数を呼び出すにあたっては、その結果を横取りして結果に"
"基づいた処理を実施し、元の関数に戻るような処理を行ないたい場合があります。こ"
"のような処理は状況に依存することから、非常に手間のかかる作業となります。関数"
"は void やスカラー値、リストコンテキストによってそれぞれ異なる動作をすること"
"がありますし、すべての場合に対応しなければ意味がありません。これを正しく行な"
"うには、スクリプトが今どのような状況下にあるのかを判断し、その状況下で呼び出"
"しを実施する必要があります。この例では、少なくとも 3 種類のコードパスが必要と"
"なり、入力もメンテナンスも面倒になってしまいます。\n"
"\n"
"このモジュールはそのような処理を自動化します。元の関数を表わすコード参照 "
"(coderef) と、元の関数が実行された後に実行するコード参照を提示するだけです。"
"返り値 (@_) を修正することができるだけでなく、必要な処理すべてを行なうことが"
"できます。いずれのコード参照内でも、 'wantarray' は正しく動作しますが、 "
"\"after\" 内では返り値は無視され、 'wantarray' は元の関数の呼び出し時点の状況"
"に従って設定されます。"

#. leap/perl-Contextual-Return/summary
msgid "Create context-sensitive return values"
msgstr "状況依存の返り値の作成"

#. leap/perl-Contextual-Return/description
msgid ""
"Usually, when you need to create a subroutine that returns different values "
"in different contexts (list, scalar, or void), you write something like:\n"
"\n"
"    sub get_server_status {         my ($server_ID) = @_;\n"
"\n"
"                 my %server_data = _ascertain_server_status($server_ID);\n"
"\n"
"                          if (wantarray()) {             return "
"@server_data{ qw(name uptime load users) };         }         if (defined "
"wantarray()) {             return $server_data{load};         }         if (!"
"defined wantarray()) {             carp 'Useless use of get_server_status() "
"in void context';             return;         }         else "
"{             croak q{Bad context! No biscuit!};         }     }\n"
"\n"
"That works okay, but the code could certainly be more readable. In its "
"simplest usage, this module makes that code more readable by providing three "
"subroutines--'LIST()', 'SCALAR()', 'VOID()'--that are true only when the "
"current subroutine is called in the corresponding context:\n"
"\n"
"    use Contextual::Return;\n"
"\n"
"    sub get_server_status {         my ($server_ID) = @_;\n"
"\n"
"                 my %server_data = _ascertain_server_status($server_ID);\n"
"\n"
"                          if (LIST)   { return @server_data{ qw(name uptime "
"load users) } }         if (SCALAR) { return "
"$server_data{load}                         }         if (VOID)   { print "
"\"$server_data{load}\\n\"                      }         else        { croak "
"q{Bad context! No biscuit!}                 }     }"
msgstr ""
"通常は、様々な状況 (リスト、スカラー、 void) で異なる値を返すサブルーチンを作"
"成する必要がある場合は、下記のようにします:\n"
"\n"
"    sub get_server_status {         my ($server_ID) = @_;\n"
"\n"
"                 my %server_data = _ascertain_server_status($server_ID);\n"
"\n"
"                          if (wantarray()) {             return "
"@server_data{ qw(name uptime load users) };         }         if (defined "
"wantarray()) {             return $server_data{load};         }         if (!"
"defined wantarray()) {             carp 'Useless use of get_server_status() "
"in void context';             return;         }         else "
"{             croak q{Bad context! No biscuit!};         }     }\n"
"\n"
"もちろんこれでも動作はするのですが、よりコードを読みやすくすることができま"
"す。もっともシンプルな使い方としては、このモジュールを 3 種類のサブルーチン "
"('LIST()', 'SCALAR()', 'VOID()') を利用する方法があります。もちろんこれは、現"
"在のサブルーチンが関連する状況下になければなりません:\n"
"\n"
"    use Contextual::Return;\n"
"\n"
"    sub get_server_status {         my ($server_ID) = @_;\n"
"\n"
"                 my %server_data = _ascertain_server_status($server_ID);\n"
"\n"
"                          if (LIST)   { return @server_data{ qw(name uptime "
"load users) } }         if (SCALAR) { return "
"$server_data{load}                         }         if (VOID)   { print "
"\"$server_data{load}\\n\"                      }         else        { croak "
"q{Bad context! No biscuit!}                 }     }"

#. leap/perl-Convert-ASN1/summary
msgid "Asn.1 Encode/Decode Library"
msgstr "ASN.1 エンコード／デコードライブラリ"

#. leap/perl-Convert-ASN1/description
msgid ""
"Convert::ASN1 encodes and decodes ASN.1 data structures using BER/DER rules."
msgstr ""
"Convert::ASN1 は BER/DER ルールを使用した ASN.1 データ構造を、エンコードした"
"りデコードしたりすることができます。"

#. leap/perl-Convert-BER/summary
msgid "ASN.1 Basic Encoding Rules"
msgstr "ASN.1 基本エンコーディングルール"

#. leap/perl-Convert-BER/description
msgid ""
"Convert::BER is a Perl object class implementation for encoding and decoding "
"objects as described by ITU-T standard X.209 (ASN.1) using Basic Encoding "
"Rules (BER).\n"
"\n"
"WARNING this module is no longer supported, See Convert::ASN1"
msgstr ""
"Convert::BER は Basic Encoding Rules (BER) を用いた ITU-T 標準 X.209 (ASN.1) "
"をオブジェクトとしてエンコードおよびデコードすることのできる、 Perl オブジェ"
"クトのクラス実装です。\n"
"\n"
"警告: このモジュールに対するサポートは終了しています。 Convert::ASN1 をご覧く"
"ださい。"

#. leap/perl-Convert-BinHex/summary
msgid "Extract Data From Macintosh Binhex Files"
msgstr "Macintosh Binhex ファイルからのデータ抽出"

#. leap/perl-Convert-BinHex/description
msgid ""
"*BinHex* is a format used by Macintosh for transporting Mac files safely "
"through electronic mail, as short-lined, 7-bit, semi-compressed data "
"streams. Ths module provides a means of converting those data streams back "
"into into binary data."
msgstr ""
"BinHex は Macintosh で使用されるデータ形式で、電子メールを介して Mac のファイ"
"ルを安全にやりとりするためのものです。短い行で 7 ビットの、少し圧縮したデータ"
"ストリームになっています。このモジュールは、これらのデータストリームをバイナ"
"リデータに戻す処理を提供します。"

#. leap/perl-Convert-TNEF/summary
msgid "Perl module to read TNEF files"
msgstr "TNEF ファイルを読み込む Perl モジュール"

#. leap/perl-Convert-TNEF/description
msgid ""
" TNEF stands for Transport Neutral Encapsulation Format, and if you've  ever "
"been unfortunate enough to receive one of these files as an email  "
"attachment, you may want to use this module.\n"
"\n"
" read() takes as its first argument any file handle open  for reading. The "
"optional second argument is a hash reference  which contains one or more of "
"the following keys:\n"
"\n"
" output_dir - Path for storing TNEF attribute data kept in files  (default: "
"current directory).\n"
"\n"
" output_prefix - File prefix for TNEF attribute data kept in files  "
"(default: 'tnef').\n"
"\n"
" output_to_core - TNEF attribute data will be saved in core memory unless  "
"it is greater than this many bytes (default: 4096). May also be set to  "
"'NONE' to keep all data in files, or 'ALL' to keep all data in core.\n"
"\n"
" buffer_size - Buffer size for reading in the TNEF file (default: 1024).\n"
"\n"
" debug - If true, outputs all sorts of info about what the read() function  "
"is reading, including the raw ascii data along with the data converted  to "
"hex (default: false).\n"
"\n"
" display_after_err - If debug is true and an error is encountered,  reads "
"and displays this many bytes of data following the error  (default: 32).\n"
"\n"
" debug_max_display - If debug is true then read and display at most  this "
"many bytes of data for each TNEF attribute (default: 1024).\n"
"\n"
" debug_max_line_size - If debug is true then at most this many bytes of  "
"data will be displayed on each line for each TNEF attribute  (default: 64).\n"
"\n"
" ignore_checksum - If true, will ignore checksum errors while parsing  data "
"(default: false).\n"
"\n"
" read() returns an object containing the TNEF 'attributes' read from the  "
"file and the data for those attributes. If all you want are the  "
"attachments, then this is mostly garbage, but if you're interested then  you "
"can see all the garbage by turning on debugging. If the garbage  proves "
"useful to you, then let me know how I can maybe make it more  useful.\n"
"\n"
" If an error is encountered, an undefined value is returned and the  package "
"variable $errstr is set to some helpful message.\n"
"\n"
" read_in() is a convienient front end for read() which takes a filename  "
"instead of a handle.\n"
"\n"
" read_ent() is another convient front end for read() which can take a  MIME::"
"Entity object (or any object with like methods, specifically  open(\"r\"), "
"read($buff,$num_bytes), and close ).\n"
"\n"
" purge() deletes any on-disk data that may be in the attachments of  the "
"TNEF object.\n"
"\n"
" message() returns the message portion of the tnef object, if any.  The "
"thing it returns is like an attachment, but its not an attachment.  For "
"instance, it more than likely does not have a name or any  attachment data.\n"
"\n"
" attachments() returns a list of the attachments that the given TNEF  object "
"contains. Returns a list ref if not called in array context.\n"
"\n"
" data() takes a TNEF attribute name, and returns a string value for that  "
"attribute for that attachment. Its your own problem if the string is too  "
"big for memory. If no argument is given, then the 'AttachData' attribute  is "
"assumed, which is probably the attachment data you're looking for.\n"
"\n"
" name() is the same as data(), except the attribute 'AttachTitle' is  the "
"default, which returns the 8 character + 3 character extension name  of the "
"attachment.\n"
"\n"
" longname() returns the long filename and extension of an attachment. This  "
"is embedded within a MAPI property of the 'Attachment' attribute data, so  "
"we attempt to extract the name out of that.\n"
"\n"
" size() takes an TNEF attribute name, and returns the size in bytes for  the "
"data for that attachment attribute.\n"
"\n"
" datahandle() is a method for attachments which takes a TNEF attribute  "
"name, and returns the data for that attribute as a handle which is  the same "
"as a MIME::Body handle.  See MIME::Body for all the applicable  methods. If "
"no argument is given, then 'AttachData' is assumed."
msgstr ""
" TNEF とは Transport Neutral Encapsulation Format (トランスポート中立型カプセ"
"ル化フォーマット) の略で、電子メールの添付ファイルを受信する際、不幸にもこの"
"ような形式で受信してしまったような場合に便利なモジュールです。\n"
"\n"
" read() は最初のパラメータとして、読み込むべきファイルのハンドルを指定しま"
"す。2 つめのパラメータは任意指定で、下記のようなキーを持つハッシュ参照を渡し"
"ます:\n"
"\n"
" output_dir - ファイル内に保持されている TNEF 属性データの保存先パス (既定"
"値: カレントディレクトリ)\n"
"\n"
" output_prefix - ファイル内に保持されている TNEF 属性データのファイルプレフィ"
"クス (既定値: 'tnef')\n"
"\n"
" output_to_core - ここで指定したバイト数を超えない限り、 TNEF の属性データを"
"コアメモリ内に保持するようにします (既定値: 4096) 。 'NONE' を指定するとすべ"
"てのデータをファイル内に保存し、 'ALL' を指定するとすべてのデータをコアメモリ"
"内に保持するようになります。\n"
"\n"
" buffer_size - TNEF ファイルを読み込む際のバッファサイズを指定します (既定"
"値: 1024)\n"
"\n"
" debug - true に設定すると、 read() 関数が読み込んだすべての情報を出力しま"
"す。これには未加工の ASCII データと、 16 進数への変換済みデータが含まれます "
"(既定値: false)\n"
"\n"
" display_after_err - debug 設定が true であり、何らかのエラーが発生した場合、"
"エラーに続くデータ出力をどれだけ行なうのかを指定します (既定値: 32)\n"
"\n"
" debug_max_display - debug 設定が true である場合、それぞれの TNEF 属性を読み"
"込むにあたって、最大でどれだけを読み込んで表示するのかを指定します (既定値: "
"1024)\n"
"\n"
"  debug_max_line_size - debug 設定が true である場合、それぞれの TNEF 属性の"
"行を最大でどれだけ表示するのかを指定します (既定値: 64)\n"
"\n"
" ignore_checksum - true に設定すると、データ処理時にチェックサムエラーを無視"
"するようになります (既定値: false)\n"
"\n"
" read() は、ファイルから読み込んだ TNEF '属性' と、それらの属性に関するデータ"
"を含むオブジェクトを返します。もしも必要な情報全てが添付ファイル内にある場"
"合、これはほとんど不要なものとなりますが、それらの情報からどのような情報が得"
"られるのかを知りたい場合は、 debug を true にするのがよいでしょう。このような"
"情報が本当に必要なものである場合は、それらをうまく処理する方法を報告していた"
"だけると助かります。\n"
"\n"
" エラーが発生した場合は未定義の値が返され、パッケージ変数 $errstr に有益な"
"メッセージが設定されます。\n"
"\n"
" read_in() は read() に対する便利なフロントエンドで、ファイルハンドルの代わり"
"にファイル名を受け付けます。\n"
"\n"
" read_ent() は read() に対するもう 1 つの便利なフロントエンドで、 MIME::"
"Entity オブジェクト (または open(\"r\"), read($buff,$num_bytes), close のよう"
"なメソッドを含むオブジェクト) をパラメータとして受け付けます。\n"
"\n"
" purge() は、 TNEF オブジェクトの添付として存在する可能性のあるディスクデータ"
"を削除します。\n"
"\n"
" message() は TNEF オブジェクトのメッセージ部分を返します。返される値は添付"
"ファイルのような形態をしたものかもしれませんし、そうではないかもしれません。"
"たとえばこれは、名前と添付データを持たないものかもしれません。\n"
"\n"
" attachments() は TNEF オブジェクト内にある添付ファイルの一覧を返します。アレ"
"イコンテキスト内で呼び出していない場合、返される値はリストへの参照になりま"
"す。\n"
"\n"
" data() は TNEF の属性名をパラメータにとり、添付ファイル内にある指定した属性"
"値を文字列で返却します。文字列を利用するため、メモリ内に保持するには大きすぎ"
"ることに注意してください。何もパラメータを指定しない場合、 'AttachData' 属性"
"が指定されたものとみなします。これはおそらく、必要な添付データを指す属性で"
"しょう。\n"
"\n"
" name() は data() と同じような機能ですが、既定では 'AttachTitle' という属性が"
"指定されたものとみなします。これは 8+3 文字のファイル名と拡張子を返します。\n"
"\n"
" longname() は、添付に対する長い形式のファイル名と拡張子を返します。これは "
"'Attachment' 属性データの MAPI プロパティ内に組み込まれた値で、これを抽出する"
"ことで実現しています。\n"
"\n"
" size() は TNEF の属性名をパラメータにとり、添付属性に対するデータサイズを返"
"します。\n"
"\n"
" datahandle() は TNEF の属性名をパラメータにとる添付ファイル向けの属性で、"
"MIME::Body ハンドルと同じハンドルとして、データを返却します。詳しくは MIME::"
"Body をお読みください。何もパラメータを指定しない場合、 'AttachData' が指定さ"
"れたものとみなします。"

#. leap/perl-Convert-UUlib/summary
msgid "Perl interface to the uulib library"
msgstr "uulib ライブラリへの Perl インターフェイス"

#. leap/perl-Convert-UUlib/description
msgid "A Perl interface to the uulib library"
msgstr "uulib ライブラリへの Perl インターフェイス"

#. leap/perl-Cookie-Baker/summary
msgid "Cookie string generator / parser"
msgstr "Cookie 文字列の生成および処理"

#. leap/perl-Cookie-Baker/description
msgid "Cookie::Baker provides simple cookie string generator and parser."
msgstr "Cookie::Baker はシンプルな Cookie 文字列の生成および処理を行ないます。"

#. leap/perl-Cpanel-JSON-XS/summary
msgid "CPanel fork of JSON::XS, fast and correct serializing"
msgstr "高速で正確なシリアライズを行なう Json::XS の Cpanel fork"

#. leap/perl-Cpanel-JSON-XS/description
msgid ""
"This module converts Perl data structures to JSON and vice versa. Its "
"primary goal is to be _correct_ and its secondary goal is to be _fast_. To "
"reach the latter goal it was written in C.\n"
"\n"
"As this is the n-th-something JSON module on CPAN, what was the reason to "
"write yet another JSON module? While it seems there are many JSON modules, "
"none of them correctly handle all corner cases, and in most cases their "
"maintainers are unresponsive, gone missing, or not listening to bug reports "
"for other reasons.\n"
"\n"
"See below for the cPanel fork.\n"
"\n"
"See MAPPING, below, on how Cpanel::JSON::XS maps perl values to JSON values "
"and vice versa."
msgstr ""
"このモジュールは、 Perl のデータ構造を JSON 形式に変換したり、その逆変換を行"
"なったりすることができます。主に正しさを重視した構造とし、速度はその次になる"
"構造とするようにしています。本モジュールは特に後者を重視したつくりになってい"
"て、 C 言語で作成されています。\n"
"\n"
"このモジュールは CPAN 内の JSON モジュールでは後発のものですが、なぜ新しい "
"JSON モジュールを作成したかというと、既存の実装の多くはごく稀な場合において正"
"しい処理をしていなかったり、メンテナンスが行なわれていなかったり、バグ報告を"
"受け付けていなかったりしたことによるものです。\n"
"\n"
"cPanel fork については下記をお読みください。\n"
"\n"
"MAPPING セクションには、 JSON::XS が Perl 変数と JSON 値をどのように対応づけ"
"ているのか、その逆はどうなのかについて、詳しく説明しています。"

#. leap/perl-Crypt-Blowfish/summary
msgid "Perl Blowfish encryption module"
msgstr "Perl Blowfish 暗号化モジュール"

#. leap/perl-Crypt-Blowfish/description
msgid ""
"Blowfish is capable of strong encryption and can use key sizes up to 56 "
"bytes (a 448 bit key). You're encouraged to take advantage of the full key "
"size to ensure the strongest encryption possible from this module."
msgstr ""
"Blowfish は強力な暗号化を提供する仕組みで、最大で 56 バイト (448 ビット) の鍵"
"を使用することができます。このモジュールでもっとも強い暗号化を使用するため、"
"完全な長さ (つまり 56 バイト) の鍵を設定することをお勧めします。"

#. leap/perl-Crypt-CBC/summary
msgid "Encrypt Data with Cipher Block Chaining Mode"
msgstr "Cipher Block Chaining モードを使用したデータ暗号化"

#. leap/perl-Crypt-CBC/description
msgid ""
"This module is a Perl-only implementation of the cryptographic cipher block "
"chaining mode (CBC). In combination with a block cipher such as DES or IDEA, "
"you can encrypt and decrypt messages of arbitrarily long length. The "
"encrypted messages are compatible with the encryption format used by the\n"
"*OpenSSL* package.\n"
"\n"
"To use this module, you will first create a Crypt::CBC cipher object with "
"new(). At the time of cipher creation, you specify an encryption key to use "
"and, optionally, a block encryption algorithm. You will then call the "
"start() method to initialize the encryption or decryption process, crypt() "
"to encrypt or decrypt one or more blocks of data, and lastly finish(), to "
"pad and encrypt the final block. For your convenience, you can call the "
"encrypt() and decrypt() methods to operate on a whole data value at once."
msgstr ""
"このモジュールは Perl のみで実装された、暗号ブロック連鎖 (CBC) の実装です。"
"DES や IDEA のようなブロック暗号と組み合わせて使用することで、任意の長さの"
"メッセージを暗号化したり、暗号を解読したりすることができます。暗号化された"
"メッセージは、 *OpenSSL* パッケージで使用される形式と互換性があります。\n"
"\n"
"このモジュールを使用するには、まず new() を利用して Crypt::CBC 暗号化オブジェ"
"クトを作成します。あとは暗号化データを作成する際に暗号鍵を指定し、必要であれ"
"ばブロック暗号化アルゴリズムを指定します。すると start() メソッドを呼び出すこ"
"とができるようになり、暗号化やその解読に対する処理が始まります。 crypt() は暗"
"号化や解読のデータを与える際に使用し、最後は finish() を呼び出して、最終ブ"
"ロックのパディングを実施します。また、データを一括で暗号化／解読できるメソッ"
"ドである encrypt(), decrypt() も用意されています。"

#. leap/perl-Crypt-DES/summary
msgid "Perl DES encryption module"
msgstr "Perl DES 暗号化モジュール"

#. leap/perl-Crypt-DES/description
msgid ""
"The module implements the Crypt::CBC interface, which has the following "
"methods \n"
"* blocksize   =item keysize   =item encrypt   =item decrypt"
msgstr ""
"このモジュールは Crypt::CBC インターフェイスを実装するもので、下記のメソッド"
"が用意されています:\n"
"* blocksize   =item keysize   =item encrypt   =item decrypt"

#. leap/perl-Crypt-DH-GMP/summary
msgid "Crypt::DH Using GMP Directly"
msgstr "GMP を直接利用した Crypt::DH"

#. leap/perl-Crypt-DH-GMP/description
msgid ""
"Crypt::DH::GMP is a (somewhat) portable replacement to Crypt::DH, "
"implemented mostly in C."
msgstr ""
"Crypt::DH::GMP は Crypt::DH に対する代替モジュールで、幾分か可搬性に優れ、主"
"に C 言語で実装されています。"

#. leap/perl-Crypt-Eksblowfish/summary
msgid "The Eksblowfish Block Cipher"
msgstr "Eksblowfish ブロック暗号"

#. leap/perl-Crypt-Eksblowfish/description
msgid ""
"An object of this type encapsulates a keyed instance of the Eksblowfish "
"block cipher, ready to encrypt and decrypt.\n"
"\n"
"Eksblowfish is a variant of the Blowfish cipher, modified to make the key "
"setup very expensive. (\"Eks\" stands for \"expensive key schedule\".) This "
"doesn't make it significantly cryptographically stronger, but is intended to "
"hinder brute-force attacks. It also makes it unsuitable for any application "
"requiring key agility. It was designed by Niels Provos and David Mazieres "
"for password hashing in OpenBSD. See the Crypt::Eksblowfish::Bcrypt manpage "
"for the hash algorithm. See the Crypt::Eksblowfish::Blowfish manpage for the "
"unmodified Blowfish cipher.\n"
"\n"
"Eksblowfish is a parameterised (family-keyed) cipher. It takes a cost "
"parameter that controls how expensive the key scheduling is. It also takes a "
"family key, known as the \"salt\". Cost and salt parameters together define "
"a cipher family. Within each family, a key determines an encryption function "
"in the usual way. See the Crypt::Eksblowfish::Family manpage for a way to "
"encapsulate an Eksblowfish cipher family."
msgstr ""
"この型のオブジェクトは、 Eksblowfish ブロック暗号に対してキーを指定したインス"
"タンスを提供します。暗号化や復号化を行なうことができます。\n"
"\n"
"Eksblowfish は Blowfish 暗号の派生型で、キーの設定を非常に高度化した仕組みで"
"す (\"Eks\" は \"expensive key schedule\" の略です) 。これは暗号の強度を有意"
"に高めるような仕組みではありませんが、よりブルートフォース攻撃に強くなるよう"
"な仕組みです。また、暗号化の可搬性を高める必要のあるアプリケーションには不適"
"切です。 なお、 Niels Provos 氏および David Mazieres 氏が OpenBSD におけるパ"
"スワードハッシュを生成するために作られた仕組みです。ハッシュアルゴリズムにつ"
"いて、詳しくは Crypt::Eksblowfish::Bcrypt のマニュアルページをお読みくださ"
"い。また、未修正の Blowfish について、詳しくは Crypt::Eksblowfish::Blowfish "
"のマニュアルページをお読みください。\n"
"\n"
"Eksblowfish はパラメータ化された (ファミリキー型の) 暗号です。キーのスケ"
"ジューリングのコストを制御するパラメータを指定するほか、ファミリキー (\"salt"
"\" としても知られています) も指定します。コストと salt パラメータは両方で暗号"
"ファミリを規定します。それぞれのファミリ内では、キーは通常の方法で暗号関数を"
"定義することになります。 Eksblowfish 暗号ファミリのカプセル化について、詳しく"
"は Crypt::Eksblowfish::Family をお読みください。"

#. leap/perl-Crypt-MySQL/summary
msgid "Emulate the MySQL PASSWORD() function"
msgstr "MySQL PASSWORD() 関数の疑似"

#. leap/perl-Crypt-MySQL/description
msgid ""
"Crypt::MySQL emulates MySQL PASSWORD() SQL function, without libmysqlclient. "
"You can compare encrypted passwords, without real MySQL environment."
msgstr ""
"Crypt::MySQL は libmysqlclient 無しで MySQL の PASSWORD() SQL 関数を疑似する"
"仕組みです。暗号化されたパスワードを、実際の MySQL 環境を用意することなく比較"
"することができます。"

#. leap/perl-Crypt-OpenSSL-Bignum/summary
msgid "OpenSSL's multiprecision integer arithmetic"
msgstr "OpenSSL の多精度整数演算"

#. leap/perl-Crypt-OpenSSL-Bignum/description
msgid ""
"Crypt::OpenSSL::Bignum provides access to OpenSSL multiprecision integer "
"arithmetic libraries. Presently, many though not all of the arithmetic "
"operations that OpenSSL provides are exposed to perl. In addition, this "
"module can be used to provide access to bignum values produced by other "
"OpenSSL modules, such as key parameters from Crypt::OpenSSL::RSA.\n"
"\n"
"_NOTE_: Many of the methods in this package can croak, so use eval, or Error."
"pm's try/catch mechanism to capture errors."
msgstr ""
"Crypt::OpenSSL::Bignum は、 OpenSSL の多精度整数演算ライブラリにアクセスする"
"機能を提供します。現時点では OpenSSL が提供する多数の算術演算機能を Perl に提"
"供していますが、すべての機能までは提供できていません。また、このモジュールで"
"は Crypt::OpenSSL:RSA のキーパラメータなど、他の OpenSSL モジュールが生成した"
"巨大整数にもアクセスすることができます。\n"
"\n"
"_注意_: このパッケージ内の多くのメソッドは croak することができます。そのた"
"め、 eval または Error.pm の try/catch 機構を利用してエラーを捕捉してくださ"
"い。"

#. leap/perl-Crypt-OpenSSL-Guess/summary
msgid "Guess OpenSSL include path"
msgstr "OpenSSL のヘッダパスの推測"

#. leap/perl-Crypt-OpenSSL-Guess/description
msgid ""
"Crypt::OpenSSL::Guess provides helpers to guess OpenSSL include path on any "
"platforms.\n"
"\n"
"Often macOS's homebrew OpenSSL cause a problem on installation due to "
"include path is not added. Some CPAN module provides to modify include path "
"with configure-args, but Carton or Module::CPANfile is not supported to pass "
"configure-args to each modules. Crypt::OpenSSL::* modules should use it on "
"your Makefile.PL.\n"
"\n"
"This module resolves the include path by Net::SSLeay's workaround. Original "
"code is taken from 'inc/Module/Install/PRIVATE/Net/SSLeay.pm' by Net::SSLeay."
msgstr ""
"Crypt::OpenSSL::Guessは、任意のプラットフォーム上のOpenSSLインクルードパスを推測するヘルパーを提供します。\n"
"\n"
"macOSのHomebrew "
"OpenSSLは、インクルードパスが追加されないために、インストール時に問題を引き起こすことがよくあります。一部のCPANモジュールでは"
"、configure-argsを使用してincludeパスを変更できますが、CartonまたはModule::CPANfileではconfigure-"
"argsを各モジュールに渡すことはできません。Crypt::OpenSSL::* モジュールはMakefile.PLでこれを使用する必要があります。\n"
"\n"
"このモジュールは、Net::SSLeayの回避策によってインクルードパスを解決します。元のコードは、Net::SSLeayによって'inc/Module/"
"Install/PRIVATE/Net/SSLeay.pm'から取得されます。"

#. leap/perl-Crypt-OpenSSL-RSA/summary
msgid "RSA encoding and decoding, using the openSSL libraries"
msgstr "OpenSSL ライブラリを使用した RSA エンコード／デコード"

#. leap/perl-Crypt-OpenSSL-RSA/description
msgid ""
"Crypt::OpenSSL::RSA is an XS perl module designed to provide basic RSA "
"functionality.  It does this by providing a glue to the RSA functions in the "
"OpenSSL library."
msgstr ""
"Crypt::OpenSSL::RSA は基本的な RSA 機能を提供するよう設計された XS Perlモ"
"ジュールです。 OpenSSL ライブラリ内に用意されている RSA 機能を利用する形に"
"なっています。"

#. leap/perl-Crypt-OpenSSL-Random/summary
msgid "Routines for accessing the OpenSSL pseudo-random number generator"
msgstr "OpenSSL の疑似乱数生成器へのアクセスルーチン"

#. leap/perl-Crypt-OpenSSL-Random/description
msgid ""
"Crypt::OpenSSL::Random provides the ability to seed and query the OpenSSL "
"library's pseudo-random number generator."
msgstr ""
"Crypt::OpenSSL::Random は OpenSSL ライブラリにある擬似乱数生成機能を利用し、"
"乱数のシード設定と問い合わせを行なう機能を提供します。"

#. leap/perl-Crypt-PasswdMD5/summary
msgid "Provide interoperable MD5-based crypt() functions"
msgstr "相互運用性のある MD5 ベースの crypt() 関数"

#. leap/perl-Crypt-PasswdMD5/description
msgid ""
"'apache_md5_crypt()' provides a function compatible with Apache's '."
"htpasswd' files. This was contributed by Bryan Hart <bryan@eai.com>. This "
"function is exported by default.\n"
"\n"
"The 'unix_md5_crypt()' provides a crypt()-compatible interface to the rather "
"new MD5-based crypt() function found in modern operating systems. It's based "
"on the implementation found on FreeBSD 2.2.[56]-RELEASE. This function is "
"also exported by default.\n"
"\n"
"For both functions, if a salt value is not supplied, a random salt will be "
"generated, using the function random_md5_salt(). This function is not "
"exported by default."
msgstr ""
"'apache_md5_crypt()' は、 Apache の '.htpasswd' ファイルと互換性のある出力を"
"する関数です。このモジュールは Bryan Hart 氏 <bryan@eai.com> によりご提供いた"
"だいております。この関数は既定で公開されます。\n"
"\n"
"このほか、 'unix_md5_crypt()' は新しいオペレーティングシステムで提供されるよ"
"うな、 MD5 ベースの crypt() 互換のインターフェイスを提供します。これは "
"FreeBSD 2.2.[56]-RELEASE 内の実装をベースにしています。この関数も既定で公開さ"
"れます。\n"
"\n"
"いずれの関数も、 salt 値を指定しない場合は、 random_md5_salt() 関数の乱数を用"
"いて salt 値が設定されます。この関数のみ、既定では公開されません。"

#. leap/perl-Crypt-RC4/summary
msgid "Perl implementation of the RC4 encryption algorithm"
msgstr "RC4 暗号化アルゴリズムの Perl 実装"

#. leap/perl-Crypt-RC4/description
msgid ""
"A simple implementation of the RC4 algorithm, developed by RSA Security, "
"Inc. Here is the description from RSA's website:\n"
"\n"
"RC4 is a stream cipher designed by Rivest for RSA Data Security (now RSA "
"Security). It is a variable key-size stream cipher with byte-oriented "
"operations. The algorithm is based on the use of a random permutation. "
"Analysis shows that the period of the cipher is overwhelmingly likely to be "
"greater than 10100. Eight to sixteen machine operations are required per "
"output byte, and the cipher can be expected to run very quickly in software. "
"Independent analysts have scrutinized the algorithm and it is considered "
"secure."
msgstr ""
"RSA Security, Inc. が開発した RC4 アルゴリズムのシンプルな実装です。 RSA の "
"Web サイトに書かれている内容を転載します:\n"
"\n"
"RC4 は RSA Data Security (現 RSA Security) 向けに Rivest 氏が設計したストリー"
"ム暗号です。これはバイト志向の操作で可変のキーサイズを扱うことができるスト"
"リーム暗号で、アルゴリズムはランダム置換をベースにしています。分析によると、"
"暗号の周期は 10100 よりもずっと大きく、出力 1 バイトに対して 8 から 16 種類の"
"マシン操作が必要で、ソフトウエア内で暗号化は非常に高速に動作するものとされて"
"います。独立した分析でアルゴリズムは精査され、安全であるものと判断されていま"
"す。"

#. leap/perl-Crypt-Rijndael/summary
msgid "Crypt::CBC compliant Rijndael encryption module"
msgstr "Crypt::CBC 準拠の Rijndael 暗号化モジュール"

#. leap/perl-Crypt-Rijndael/description
msgid ""
"This module implements the Rijndael cipher, which has just been selected as "
"the Advanced Encryption Standard. \n"
"* keysize\n"
"\n"
"  Returns the keysize, which is 32 (bytes). The Rijndael cipher actually   "
"supports keylengths of 16, 24 or 32 bytes, but there is no way to   "
"communicate this to 'Crypt::CBC'. \n"
"* blocksize\n"
"\n"
"  The blocksize for Rijndael is 16 bytes (128 bits), although the "
"algorithm   actually supports any blocksize that is any multiple of our "
"bytes. 128   bits, is however, the AES-specified block size, so this is all "
"we   support. \n"
"* $cipher = Crypt::Rijndael->new( $key [, $mode] )\n"
"\n"
"  Create a new 'Crypt::Rijndael' cipher object with the given key (which   "
"must be 128, 192 or 256 bits long). The additional '$mode' argument is   the "
"encryption mode, either 'MODE_ECB' (electronic codebook mode, the   "
"default), 'MODE_CBC' (cipher block chaining, the same that 'Crypt::CBC'   "
"does), 'MODE_CFB' (128-bit cipher feedback), 'MODE_OFB' (128-bit output   "
"feedback), or 'MODE_CTR' (counter mode).\n"
"\n"
"  ECB mode is very insecure (read a book on cryptography if you don't know   "
"why!), so you should probably use CBC mode. \n"
"* $cipher->set_iv($iv)\n"
"\n"
"  This allows you to change the initial value vector used by the chaining   "
"modes. It is not relevant for ECB mode. \n"
"* $cipher->encrypt($data)\n"
"\n"
"  Encrypt data. The size of '$data' must be a multiple of 'blocksize' (16   "
"bytes), otherwise this function will croak. Apart from that, it can be of   "
"(almost) any length. \n"
"* $cipher->decrypt($data)\n"
"\n"
"  Decrypts '$data'."
msgstr ""
"このモジュールは Advanced Encryption Standard に選択された Rijndael 暗号を実"
"装しています。\n"
"* 鍵のサイズについて\n"
"\n"
"  鍵のサイズは 32 (バイト) です。 Rijndael 暗号では 16, 24, 32 バイトの鍵に対"
"応していますが、 'Crypt::CBC' にそのような機能はありません。\n"
"* ブロックサイズについて\n"
"\n"
"  Rijndael におけるブロックサイズは 16 バイト (128 ビット) です。本来のアルゴ"
"リズムでは任意のバイトサイズに対応しているはずですが、 AES ではブロックサイズ"
"を規定しているため、本モジュールでもそのように設定しています。\n"
"* $cipher = Crypt::Rijndael->new( $key [, $mode] )\n"
"\n"
"  指定した鍵 (128, 192, 256 ビットの長さ) で新しい 'Crypt::Rijndael' 暗号オブ"
"ジェクトを作成します。追加の '$mode' パラメータは暗号モードの指定"
"で、'MODE_ECB' (電子コードブックモード; 既定値), 'MODE_CBC' (暗号ブロック連"
"鎖; 'Crypt::CBC' と同じ動作) 'MODE_CFB' (128 ビット暗号フィードバック), "
"'MODE_OFB' (128 ビット出力フィードバック), 'MODE_CTR' (カウンタモード) のいず"
"れかを指定します。\n"
"\n"
"  ECB モードは非常に危険な仕組み (詳しく知りたい場合は、暗号化に関する書籍を"
"お読みください！) であり、通常は CBC モードを指定します。\n"
"* $cipher->set_iv($iv)\n"
"\n"
"  上記は、連鎖モードで使用される初期値ベクトルを変更します。 ECB モードの場合"
"は無関係です。\n"
"* $cipher->encrypt($data)\n"
"\n"
"  データを暗号化します。 '$data' のサイズは 'ブロックサイズ' (16 バイト) の整"
"数倍でなければならず、そうでない場合は croak で警告が表示されます。ただし、警"
"告が表示されるものの、 (ほぼ) 任意の長さを指定することができます。\n"
"* $cipher->decrypt($data)\n"
"\n"
"  '$data' の暗号を解読します。"

#. leap/perl-Crypt-Rot13/summary
msgid "Rot13 (Caesar) encryption for perl"
msgstr "Perl 向け Rot13 (シーザー) 暗号"

#. leap/perl-Crypt-Rot13/description
msgid "This package provides ROT13 Algorithm (Caesar) as a Perl module."
msgstr ""
"このパッケージは、 ROT13 アルゴリズム (シーザー暗号) の Perl モジュールを提供"
"します。"

#. leap/perl-Crypt-SSLeay/summary
msgid "OpenSSL support for LWP"
msgstr "SWP 向け OpenSSL サポート"

#. leap/perl-Crypt-SSLeay/description
msgid ""
"This Perl module provides support for the HTTPS protocol under LWP, to allow "
"an LWP::UserAgent object to perform GET, HEAD, and POST requests over "
"encrypted socket connections. Please see LWP for more information on POST "
"requests.\n"
"\n"
"The 'Crypt::SSLeay' package provides 'Net::SSL', which, if requested, is "
"loaded by 'LWP::Protocol::https' for https requests and provides the "
"necessary SSL glue."
msgstr ""
"この Perl モジュールは、 LWP を利用した https プロトコルへの対応を提供しま"
"す。 これにより、 LWP::UserAgent が https による GET, HEAD, POST の各リクエス"
"トを生成することができるようになります。 POST リクエストについての詳細は "
"Perldoc LWP をご覧ください。\n"
"\n"
"'Crypt::SSLeay' パッケージには 'Net::SSL' が含まれています。これは https リク"
"エストを 行なおうとした際に 'LWP::Protocol::https' から読み込まれ、必要な "
"SSL グルーを提供します。"

#. leap/perl-Crypt-SaltedHash/summary
msgid "Perl interface to functions that assist in working"
msgstr "作業支援関数に対する Perl インターフェイス"

#. leap/perl-Crypt-SaltedHash/description
msgid ""
"The 'Crypt::SaltedHash' module provides an object oriented interface to "
"create salted (or seeded) hashes of clear text data. The original "
"formalization of this concept comes from RFC-3112 and is extended by the use "
"of different digital agorithms."
msgstr ""
"'Crypt::SaltedHash' モジュールは、暗号化などの施されていないテキストに対し"
"て、 salt ('シード' とも呼びます) 付きのハッシュを作成する機能を提供する、オ"
"ブジェクト指向のインターフェイスを提供します。このモジュールの構造は、 "
"RFC-3112 のものを参考にして作られており、異なるデジタルアルゴリズムに対応する"
"ために拡張されています。"

#. leap/perl-Crypt-SmbHash/summary
msgid "perl module Crypt::SmbHash"
msgstr "Crypt::SmbHash Perl モジュール"

#. leap/perl-Crypt-SmbHash/description
msgid ""
"This module provides functions to generate LM/NT hashes as used by Samba"
msgstr ""
"このモジュールは、 Samba で利用される LM/NT ハッシュを生成する関数を提供して"
"います。"

#. leap/perl-Crypt-UnixCrypt_XS/summary
msgid "Perl Xs Interface for a Portable Traditional"
msgstr "可搬性のある従来型 crypt 関数に対する Perl XS インターフェイス"

#. leap/perl-Crypt-UnixCrypt_XS/description
msgid ""
"This module implements the DES-based Unix _crypt_ function. For those who "
"need to construct non-standard variants of _crypt_, the various building "
"blocks used in _crypt_ are also supplied separately."
msgstr ""
"このモジュールは、 DES ベースの Unix _crypt_ 関数を実装しています。非標準と"
"なっている _crypt_ の異形や、 _crypt_ 内で使用されている様々な構築ブロックに"
"ついては、それぞれ別々に提供されています。"

#. leap/perl-CryptX/summary
msgid "Cryptographic toolkit"
msgstr "暗号化ツールキット"

#. leap/perl-CryptX/description
msgid ""
"Perl modules providing a cryptography based on at https://github.com/libtom/"
"libtomcrypt library. \n"
"* * Symmetric ciphers - see Crypt::Cipher and related modules\n"
"\n"
"Crypt::Cipher::AES, Crypt::Cipher::Anubis, Crypt::Cipher::Blowfish, Crypt::"
"Cipher::Camellia, Crypt::Cipher::CAST5, Crypt::Cipher::DES, Crypt::Cipher::"
"DES_EDE, Crypt::Cipher::IDEA, Crypt::Cipher::KASUMI, Crypt::Cipher::Khazad, "
"Crypt::Cipher::MULTI2, Crypt::Cipher::Noekeon, Crypt::Cipher::RC2, Crypt::"
"Cipher::RC5, Crypt::Cipher::RC6, Crypt::Cipher::SAFERP, Crypt::Cipher::"
"SAFER_K128, Crypt::Cipher::SAFER_K64, Crypt::Cipher::SAFER_SK128, Crypt::"
"Cipher::SAFER_SK64, Crypt::Cipher::SEED, Crypt::Cipher::Serpent, Crypt::"
"Cipher::Skipjack, Crypt::Cipher::Twofish, Crypt::Cipher::XTEA \n"
"* * Block cipher modes\n"
"\n"
"Crypt::Mode::CBC, Crypt::Mode::CFB, Crypt::Mode::CTR, Crypt::Mode::ECB, "
"Crypt::Mode::OFB \n"
"* * Stream ciphers\n"
"\n"
"Crypt::Stream::RC4, Crypt::Stream::ChaCha, Crypt::Stream::Salsa20, Crypt::"
"Stream::Sober128, Crypt::Stream::Sosemanuk, Crypt::Stream::Rabbit \n"
"* * Authenticated encryption modes\n"
"\n"
"Crypt::AuthEnc::CCM, Crypt::AuthEnc::EAX, Crypt::AuthEnc::GCM, Crypt::"
"AuthEnc::OCB, Crypt::AuthEnc::ChaCha20Poly1305 \n"
"* * Hash Functions - see Crypt::Digest and related modules\n"
"\n"
"Crypt::Digest::BLAKE2b_160, Crypt::Digest::BLAKE2b_256, Crypt::Digest::"
"BLAKE2b_384, Crypt::Digest::BLAKE2b_512, Crypt::Digest::BLAKE2s_128, Crypt::"
"Digest::BLAKE2s_160, Crypt::Digest::BLAKE2s_224, Crypt::Digest::BLAKE2s_256, "
"Crypt::Digest::CHAES, Crypt::Digest::MD2, Crypt::Digest::MD4, Crypt::Digest::"
"MD5, Crypt::Digest::RIPEMD128, Crypt::Digest::RIPEMD160, Crypt::Digest::"
"RIPEMD256, Crypt::Digest::RIPEMD320, Crypt::Digest::SHA1, Crypt::Digest::"
"SHA224, Crypt::Digest::SHA256, Crypt::Digest::SHA384, Crypt::Digest::SHA512, "
"Crypt::Digest::SHA512_224, Crypt::Digest::SHA512_256, Crypt::Digest::"
"Tiger192, Crypt::Digest::Whirlpool, Crypt::Digest::Keccak224, Crypt::Digest::"
"Keccak256, Crypt::Digest::Keccak384, Crypt::Digest::Keccak512, Crypt::"
"Digest::SHA3_224, Crypt::Digest::SHA3_256, Crypt::Digest::SHA3_384, Crypt::"
"Digest::SHA3_512, Crypt::Digest::SHAKE \n"
"* * Checksums\n"
"\n"
"Crypt::Checksum::Adler32, Crypt::Checksum::CRC32 \n"
"* * Message Authentication Codes\n"
"\n"
"Crypt::Mac::BLAKE2b, Crypt::Mac::BLAKE2s, Crypt::Mac::F9, Crypt::Mac::HMAC, "
"Crypt::Mac::OMAC, Crypt::Mac::Pelican, Crypt::Mac::PMAC, Crypt::Mac::XCBC, "
"Crypt::Mac::Poly1305 \n"
"* * Public key cryptography\n"
"\n"
"Crypt::PK::RSA, Crypt::PK::DSA, Crypt::PK::ECC, Crypt::PK::DH, Crypt::PK::"
"Ed25519, Crypt::PK::X25519 \n"
"* * Cryptographically secure random number generators - see Crypt::PRNG "
"and   related modules\n"
"\n"
"Crypt::PRNG::Fortuna, Crypt::PRNG::Yarrow, Crypt::PRNG::RC4, Crypt::PRNG::"
"Sober128, Crypt::PRNG::ChaCha20 \n"
"* * Key derivation functions - PBKDF1, PBKDF2 and HKDF\n"
"\n"
"Crypt::KeyDerivation \n"
"* * Other handy functions related to cryptography\n"
"\n"
"Crypt::Misc"
msgstr ""
"https://github.com/libtom/libtomcrypt ライブラリをベースにした暗号化機能を提"
"供する Perl モジュールです。\n"
"* * 対称暗号 - Crypt::Cipher および関連モジュールをご覧ください\n"
"\n"
"Crypt::Cipher::AES, Crypt::Cipher::Anubis, Crypt::Cipher::Blowfish, Crypt::"
"Cipher::Camellia, Crypt::Cipher::CAST5, Crypt::Cipher::DES, Crypt::Cipher::"
"DES_EDE, Crypt::Cipher::IDEA, Crypt::Cipher::KASUMI, Crypt::Cipher::Khazad, "
"Crypt::Cipher::MULTI2, Crypt::Cipher::Noekeon, Crypt::Cipher::RC2, Crypt::"
"Cipher::RC5, Crypt::Cipher::RC6, Crypt::Cipher::SAFERP, Crypt::Cipher::"
"SAFER_K128, Crypt::Cipher::SAFER_K64, Crypt::Cipher::SAFER_SK128, Crypt::"
"Cipher::SAFER_SK64, Crypt::Cipher::SEED, Crypt::Cipher::Serpent, Crypt::"
"Cipher::Skipjack, Crypt::Cipher::Twofish, Crypt::Cipher::XTEA \n"
"* * ブロック暗号モード\n"
"\n"
"Crypt::Mode::CBC, Crypt::Mode::CFB, Crypt::Mode::CTR, Crypt::Mode::ECB, "
"Crypt::Mode::OFB \n"
"* * ストリーム暗号\n"
"\n"
"Crypt::Stream::RC4, Crypt::Stream::ChaCha, Crypt::Stream::Salsa20, Crypt::"
"Stream::Sober128, Crypt::Stream::Sosemanuk, Crypt::Stream::Rabbit \n"
"* * 認証付き暗号モジュール\n"
"\n"
"Crypt::AuthEnc::CCM, Crypt::AuthEnc::EAX, Crypt::AuthEnc::GCM, Crypt::"
"AuthEnc::OCB, Crypt::AuthEnc::ChaCha20Poly1305 \n"
"* * ハッシュ関数 - Crypt::Digest および関連モジュールをご覧ください\n"
"\n"
"Crypt::Digest::BLAKE2b_160, Crypt::Digest::BLAKE2b_256, Crypt::Digest::"
"BLAKE2b_384, Crypt::Digest::BLAKE2b_512, Crypt::Digest::BLAKE2s_128, Crypt::"
"Digest::BLAKE2s_160, Crypt::Digest::BLAKE2s_224, Crypt::Digest::BLAKE2s_256, "
"Crypt::Digest::CHAES, Crypt::Digest::MD2, Crypt::Digest::MD4, Crypt::Digest::"
"MD5, Crypt::Digest::RIPEMD128, Crypt::Digest::RIPEMD160, Crypt::Digest::"
"RIPEMD256, Crypt::Digest::RIPEMD320, Crypt::Digest::SHA1, Crypt::Digest::"
"SHA224, Crypt::Digest::SHA256, Crypt::Digest::SHA384, Crypt::Digest::SHA512, "
"Crypt::Digest::SHA512_224, Crypt::Digest::SHA512_256, Crypt::Digest::"
"Tiger192, Crypt::Digest::Whirlpool, Crypt::Digest::Keccak224, Crypt::Digest::"
"Keccak256, Crypt::Digest::Keccak384, Crypt::Digest::Keccak512, Crypt::"
"Digest::SHA3_224, Crypt::Digest::SHA3_256, Crypt::Digest::SHA3_384, Crypt::"
"Digest::SHA3_512, Crypt::Digest::SHAKE \n"
"* * チェックサム\n"
"\n"
"Crypt::Checksum::Adler32, Crypt::Checksum::CRC32 \n"
"* * メッセージ認証コード\n"
"\n"
"Crypt::Mac::BLAKE2b, Crypt::Mac::BLAKE2s, Crypt::Mac::F9, Crypt::Mac::HMAC, "
"Crypt::Mac::OMAC, Crypt::Mac::Pelican, Crypt::Mac::PMAC, Crypt::Mac::XCBC, "
"Crypt::Mac::Poly1305 \n"
"* * 公開鍵暗号\n"
"\n"
"Crypt::PK::RSA, Crypt::PK::DSA, Crypt::PK::ECC, Crypt::PK::DH, Crypt::PK::"
"Ed25519, Crypt::PK::X25519 \n"
"* * 暗号論的擬似乱数生成器 - Crypt::PRNG および関連モジュールをご覧ください\n"
"\n"
"Crypt::PRNG::Fortuna, Crypt::PRNG::Yarrow, Crypt::PRNG::RC4, Crypt::PRNG::"
"Sober128, Crypt::PRNG::ChaCha20 \n"
"* * 鍵導出関数 - PBKDF1, PBKDF2, HKDF\n"
"\n"
"Crypt::KeyDerivation \n"
"* * 暗号化に関連するその他の便利な関数\n"
"\n"
"Crypt::Misc"

#. leap/perl-Curses/summary
msgid "Terminal screen handling and optimization"
msgstr "端末画面の処理と最適化"

#. leap/perl-Curses/description
msgid ""
"'Curses' is the interface between Perl and your system's curses(3) library. "
"For descriptions on the usage of a given function, variable, or constant, "
"consult your system's documentation, as such information invariably varies "
"(:-) between different curses(3) libraries and operating systems. This "
"document describes the interface itself, and assumes that you already know "
"how your system's curses(3) library works."
msgstr ""
"'Curses' は Perl とシステム向けに提供されている curses(3) ライブラリとの間の"
"インターフェイスです。それぞれ関数や変数、定数などの使い方について、詳しくは"
"システムのドキュメンテーションをお読みください。これは、それぞれの curses(3) "
"ライブラリやオペレーティングシステムで仕様が異なることによるものです。なお、"
"本文書ではインターフェイスそれ自身に関する説明のみで、すでに curses(3) ライブ"
"ラリの動作については知っていることを前提にして作られています。"

#. leap/perl-CursesWidgets/summary
msgid "CursesWidgets Perl module"
msgstr "CursesWidgets Perl モジュール"

#. leap/perl-CursesWidgets/description
msgid ""
"NOTE:  This is **NOT** backwards compatible with the pre-1.99 "
"versions.        This is entirely OO-based, hence any older scripts relying "
"on the        old versions will need to be rewritten."
msgstr ""
"注意: このモジュールは、バージョン 1.99 以前との互換性が *ありません* 。この"
"モジュールはオブジェクト指向をベースにしているため、古いバージョンに依存して"
"作られたスクリプトについては、作り直す必要があります。"

#. leap/perl-Cwd-Guard/summary
msgid "Temporary changing working directory (chdir)"
msgstr "一時的な作業ディレクトリの変更 (chdir)"

#. leap/perl-Cwd-Guard/description
msgid ""
"CORE::chdir Cwd:: Guard can change the current directory (chdir) using a "
"limited scope."
msgstr ""
"Core::chdir Cwd::Guard は、制限されたスコープ範囲内で、現在のディレクトリを変"
"更する (chdir) ことができます。"

#. leap/perl-DBD-CSV/summary
msgid "DBI driver for CSV files"
msgstr "CSV ファイル向け DBI ドライバ"

#. leap/perl-DBD-CSV/description
msgid ""
"The DBD::CSV module is yet another driver for the DBI (Database independent "
"interface for Perl). This one is based on the SQL \"engine\" SQL::Statement "
"and the abstract DBI driver DBD::File and implements access to so-called CSV "
"files (Comma Separated Values). Such files are often used for exporting MS "
"Access and MS Excel data.\n"
"\n"
"See DBI for details on DBI, SQL::Statement for details on SQL::Statement and "
"DBD::File for details on the base class DBD::File."
msgstr ""
"DBD::CSV モジュールは DBI (Perl 向けデータベース独立インターフェイス) 向けの"
"もう 1 つのドライバです。このドライバは SQL::Statement の SQL \"エンジン\" "
"と DBD::File の DBI 抽象ドライバをベースとし、いわゆる CSV ファイル (カンマ区"
"切り) ファイルへのアクセスを提供します。これらのファイルは MS Access や MS "
"Excel のデータとして広く使われています。\n"
"\n"
"DBI について詳しくは、 DBI のマニュアルページをお読みください。また、 SQL::"
"Statement や DBD::File のベースクラスについて、詳しくはそれぞれのマニュアル"
"ページをお読みください。"

#. leap/perl-DBD-ODBC/summary
#. leap/perl-DBD-ODBC/description
msgid "ODBC Driver for DBI"
msgstr "DBI 向け ODBC ドライバ"

#. leap/perl-DBD-Pg/summary
msgid "PostgreSQL database driver for the DBI module"
msgstr "DBI モジュール向け PostgreSQL データベースドライバ"

#. leap/perl-DBD-Pg/description
msgid ""
"DBD::Pg is a Perl module that works with the DBI module to provide access to "
"PostgreSQL databases."
msgstr ""
"DBD::Pg は PostgreSQL データベースにアクセスする機能を提供する、DBI モジュー"
"ル向け Perl モジュールです。"

#. leap/perl-DBD-SQLite/summary
msgid "Self-contained RDBMS in a DBI Driver"
msgstr "DBI ドライバ内蔵型 RDBMS"

#. leap/perl-DBD-SQLite/description
msgid ""
"SQLite is a public domain file-based relational database engine that you can "
"find at https://www.sqlite.org/. \n"
"*DBD::SQLite* is a Perl DBI driver for SQLite, that includes the entire "
"thing in the distribution. So in order to get a fast transaction capable "
"RDBMS working for your perl project you simply have to install this module, "
"and *nothing* else.\n"
"\n"
"SQLite supports the following features: \n"
"* Implements a large subset of SQL92\n"
"\n"
"See https://www.sqlite.org/lang.html for details. \n"
"* A complete DB in a single disk file\n"
"\n"
"Everything for your database is stored in a single disk file, making it "
"easier to move things around than with DBD::CSV. \n"
"* Atomic commit and rollback\n"
"\n"
"Yes, *DBD::SQLite* is small and light, but it supports full transactions! \n"
"* Extensible\n"
"\n"
"User-defined aggregate or regular functions can be registered with the SQL "
"parser.\n"
"\n"
"There's lots more to it, so please refer to the docs on the SQLite web page, "
"listed above, for SQL details. Also refer to DBI for details on how to use "
"DBI itself. The API works like every DBI module does. However, currently "
"many statement attributes are not implemented or are limited by the typeless "
"nature of the SQLite database."
msgstr ""
"SQLite (http://www.sqlite.org/) はパブリックドメインで公開されているファイル"
"ベースのリレーショナルデータベースエンジンです。\n"
"*DBD::SQLite* は SQLite 向けの Perl DBI ドライバで、配布物のすべてが含まれて"
"いますので、このモジュールをインストールするだけで、お使いの Perl プロジェク"
"トを高速でトランザクションにも対応する RDBMS を利用できるようになります。\n"
"\n"
"SQLIte には下記のような機能があります:\n"
"* SQL92 のラージサブセットに対応\n"
"\n"
"  詳しくは https://www.sqlite.org/lang.html をお読みください。\n"
"* 単一のディスクファイルによる完全な DB\n"
"\n"
"  データベースに必要な情報すべてが単一のディスクファイルに記録されます。これ"
"により、 DBD::CSV などよりも簡単に扱うことができるようになります。\n"
"* アトミックなコミットとロールバック\n"
"\n"
"  *DBD::SQLite* は小さくて軽量ですが、トランザクションに完全対応していま"
"す！\n"
"* 拡張可能性\n"
"\n"
"  ユーザ定義の集計関数または通常関数を SQL パーサに登録することができます。\n"
"\n"
"上記以外にも SQLite には様々な機能が用意されています。 SQL の詳細について、詳"
"しくは上述の SQLite の Web ページをご覧ください。また、 DBI の使用方法につい"
"ては、 DBI のマニュアルページをお読みください。 API は DBI が提供する機能それ"
"ぞれに対応していますが、多くのステートメント属性は未実装のままであるほか、 "
"SQLite が型を持たない仕組みであることによる制限もあることにご注意ください。"

#. leap/perl-DBD-XBase/summary
msgid "Reads and writes XBase (dbf) files, includes DBI support"
msgstr "XBase (dbf) ファイルの読み書き (DBI サポート付き)"

#. leap/perl-DBD-XBase/description
msgid ""
"DBI compliant driver for module XBase. Please refer to DBI(3) documentation "
"for how to actually use the module. In the *connect* call, specify the "
"directory containing the dbf files (and other, memo, etc.) as the third part "
"of the connect string. It defaults to the current directory.\n"
"\n"
"Note that with dbf, there is no database server that the driver would talk "
"to. This DBD::XBase calls methods from XBase.pm module to read and write the "
"files on the disk directly, so any limitations and features of XBase.pm "
"apply to DBD::XBase as well. DBD::XBase basically adds SQL, DBI compliant "
"interface to XBase.pm.\n"
"\n"
"The DBD::XBase doesn't make use of index files at the moment. If you really "
"need indexed access, check XBase(3) for notes about support for variour "
"index types."
msgstr ""
"モジュール XBase に対する DBI 準拠のドライバです。このモジュールの使い方につ"
"いて、詳しくは DBI(3) のドキュメンテーションをお読みください。 *connect* コー"
"ルでは、 dbf ファイル (およびその他のメモなど) を含むディレクトリを接続文字列"
"の一部として指定します。既定値ではカレントディレクトリを対象とします。\n"
"\n"
"なお、 dbf ファイルを使用するにあたってはデータベースサーバを必要としませ"
"ん。 DBD::XBase は XBase.pm モジュール内のメソッドを呼び出し、ディスク内にあ"
"るファイルを直接読み書きします。そのため、 XBase.pm 側の制限と機能がそのまま "
"DBD::XBase にも当てはまることになります。また DBD::XBase では、基本的に "
"XBase.rpm に対する DBI 準拠の SQL インターフェイスを追加しています。\n"
"\n"
"現時点では、 DBD::XBase はインデックスファイルを使用しません。インデックス付"
"きのファイルにアクセスする必要がある場合は、様々なインデックスタイプ向けの "
"XBase(3) 内のドキュメンテーションをお読みください。"

#. leap/perl-DBD-mysql/summary
msgid "MySQL driver for the Perl5 Database Interface (DBI)"
msgstr "Perl5 データベースインターフェイス (DBI) 向け MySQL ドライバ"

#. leap/perl-DBD-mysql/description
msgid ""
"*DBD::mysql* is the Perl5 Database Interface driver for the MySQL database. "
"In other words: DBD::mysql is an interface between the Perl programming "
"language and the MySQL programming API that comes with the MySQL relational "
"database management system. Most functions provided by this programming API "
"are supported. Some rarely used functions are missing, mainly because no-one "
"ever requested them. :-)"
msgstr ""
"*DBD::mysql* は、 MySQL データベース向けの Perl5 データベースインターフェイス"
"ドライバです。言い換えれば、 DBD::mysql は Perl プログラミング言語と MySQL リ"
"レーショナルデータベース管理システムのプログラミング API の間に立って、仲介を"
"行なうインターフェイスです。 MySQL 側の API で提供されているほとんどの機能に"
"対応してますが、ごく少数の未対応機能があります。これは主に必要とする人がいな"
"かったことによるものです :-)"

#. leap/perl-DBI/summary
msgid "Database independent interface for Perl"
msgstr "Perl 向けデータベース独立インターフェイス"

#. leap/perl-DBI/description
msgid ""
"The DBI is a database access module for the Perl programming language. It "
"defines a set of methods, variables, and conventions that provide a "
"consistent database interface, independent of the actual database being "
"used.\n"
"\n"
"It is important to remember that the DBI is just an interface. The DBI is a "
"layer of \"glue\" between an application and one or more database _driver_ "
"modules. It is the driver modules which do most of the real work. The DBI "
"provides a standard interface and framework for the drivers to operate "
"within.\n"
"\n"
"This document often uses terms like _references_, _objects_, _methods_. If "
"you're not familiar with those terms then it would be a good idea to read at "
"least the following perl manuals first: perlreftut, perldsc, perllol, and "
"perlboot."
msgstr ""
"DBI は Perl プログラミング言語向けのデータベースアクセスモジュールです。複数"
"のメソッドや変数、決まり事などを定義して、実際に使用するデータベースシステム"
"とは別に一貫したインターフェイスを提供します。\n"
"\n"
"DBI は単なるインターフェイスであることにご注意ください。 DBI はアプリケーショ"
"ンと複数のデータベース _ドライバ_ モジュールとの間を仲介するものであり、実際"
"の処理のほとんどはドライバモジュール側で行ないます。 DBI は、ドライバに対して"
"標準インターフェイスとフレームワークを提供し、内部処理を規定しています。\n"
"\n"
"本文書では、 _参照_, _オブジェクト_, _メソッド_ などの用語をしばしば使用して"
"います。これらの用語に詳しくない場合は、まず下記に示す Perl マニュアルをお読"
"みになることをお勧めします: perlreftut マニュアルページ, perldsc マニュアル"
"ページ, perllol マニュアルページ, perlboot マニュアルページ"

#. leap/perl-DBICx-TestDatabase/summary
msgid "Create a Temporary Database From a Dbix::Class::Schema"
msgstr "DBIx::Class:Schema からの一時データベースの作成"

#. leap/perl-DBICx-TestDatabase/description
msgid ""
"This module creates a temporary SQLite database, deploys your DBIC schema, "
"and then connects to it. This lets you easily test your DBIC schema. Since "
"you have a fresh database for every test, you don't have to worry about "
"cleaning up after your tests, ordering of tests affecting failure, etc."
msgstr ""
"このモジュールは一時的な SQLite データベースを作成し、 DBIC のスキーマを作成"
"して接続することのできるモジュールです。この仕組みにより、 DBIC のスキーマを"
"簡単にテストすることができます。各テストでからのデータベースを用意する必要が"
"ないため、各テスト後のクリーンアップやテストの順序について心配をする必要もあ"
"りません。"

#. leap/perl-DBIx-Class/summary
msgid "Extensible and flexible object <-> relational mapper"
msgstr "拡張可能で柔軟性のあるオブジェクト <-> リレーショナルマッパー"

#. leap/perl-DBIx-Class/description
msgid ""
"This is an SQL to OO mapper with an object API inspired by Class::DBI (with "
"a compatibility layer as a springboard for porting) and a resultset API that "
"allows abstract encapsulation of database operations. It aims to make "
"representing queries in your code as perl-ish as possible while still "
"providing access to as many of the capabilities of the database as possible, "
"including retrieving related records from multiple tables in a single query, "
"'JOIN', 'LEFT JOIN', 'COUNT', 'DISTINCT', 'GROUP BY', 'ORDER BY' and "
"'HAVING' support.\n"
"\n"
"DBIx::Class can handle multi-column primary and foreign keys, complex "
"queries and database-level paging, and does its best to only query the "
"database in order to return something you've directly asked for. If a "
"resultset is used as an iterator it only fetches rows off the statement "
"handle as requested in order to minimise memory usage. It has auto-increment "
"support for SQLite, MySQL, PostgreSQL, Oracle, SQL Server and DB2 and is "
"known to be used in production on at least the first four, and is fork- and "
"thread-safe out of the box (although your DBD may not be).\n"
"\n"
"This project is still under rapid development, so large new features may be "
"marked *experimental* - such APIs are still usable but may have edge bugs. "
"Failing test cases are _always_ welcome and point releases are put out "
"rapidly as bugs are found and fixed.\n"
"\n"
"We do our best to maintain full backwards compatibility for published APIs, "
"since DBIx::Class is used in production in many organisations, and even "
"backwards incompatible changes to non-published APIs will be fixed if "
"they're reported and doing so doesn't cost the codebase anything.\n"
"\n"
"The test suite is quite substantial, and several developer releases are "
"generally made to CPAN before the branch for the next release is merged back "
"to trunk for a major release."
msgstr ""
"このモジュールは、 Class::DBI (移植向けのきっかけとしての互換レイヤ)  に触発"
"されて作られた、オブジェクト API 型の SQL to OO マッパーです。このほか、デー"
"タベースの操作をカプセル化し、抽象化する resultset API も提供されています。お"
"使いのコード内で、できる限り Perl のやり方を維持したまま、かつできる限り多く"
"のデータベースの機能にアクセスできるよう問い合わせを行なう仕組みを提供しま"
"す。なお、単一の問い合わせないで複数のテーブルからのレコードを返すような複雑"
"な問い合わせ、たとえば  'JOIN', 'LEFT JOIN', 'COUNT', 'DISTINCT', 'GROUP "
"BY', 'ORDER BY','HAVING' などにも対応しています。\n"
"\n"
"DBIx::Class は複数列のプライマリキーや外部キーに対応しているほか、複雑な問い"
"合わせやデータベースレベルのページングに対応し、問い合わせに対して必要な処理"
"だけをデータベースに実施するようベストを尽くします。 resultset はメモリの使用"
"量を最小化する目的から、必要な行のみをフェッチするようになっています。また、 "
"SQLite, MySQL, PostgreSQL, Oracle, SQL Server, DB2 に対しては、自動インクリメ"
"ントにも対応しているほか、少なくとも SQLite, MySQL, PostgreSQL, Oracle に対し"
"ては本番環境での利用にも耐え、 DBD としては対応していないものもありますが、既"
"定の状態で fork やスレッドにも対応しています。\n"
"\n"
"このプロジェクトは現在も頻繁に開発が行なわれているものであるため、ほとんどの"
"新機能は *実験的* なものであると位置づけられます。これらの API はおそらく使う"
"ことができますが、極端なバグがあるかもしれません。テストケースでの失敗と対象"
"リリースの報告は _常に_ 歓迎しており、これによって素早い開発と修正を実現して"
"います。\n"
"\n"
"また、公開済みの API に対しては、 DBIx::Class が本番環境内でも多数使用されて"
"いることから、後方互換性の確保を努力しておりますし、何か後方互換性に問題のあ"
"る変更があれば、その旨報告していただくことで、お使いのコードに影響の無いよう"
"修正を行なっております。\n"
"\n"
"このテストスイートは非常に充実した仕組みで、次期リリースのブランチが作成され"
"るよりも前に開発者リリースが公開されることもあります。"

#. leap/perl-DBIx-Class-DeploymentHandler/summary
msgid "Extensible DBIx::Class deployment"
msgstr "拡張性のある DBIx::Class 配置"

#. leap/perl-DBIx-Class-DeploymentHandler/description
msgid ""
"'DBIx::Class::DeploymentHandler' is, as its name suggests, a tool for "
"deploying and upgrading databases with DBIx::Class. It is designed to be "
"much more flexible than DBIx::Class::Schema::Versioned, hence the use of "
"Moose and lots of roles.\n"
"\n"
"'DBIx::Class::DeploymentHandler' itself is just a recommended set of roles "
"that we think will not only work well for everyone, but will also yield the "
"best overall mileage. Each role it uses has its own nuances and "
"documentation, so I won't describe all of them here, but here are a few of "
"the major benefits over how DBIx::Class::Schema::Versioned worked (and DBIx::"
"Class::DeploymentHandler::Deprecated tries to maintain compatibility with):\n"
"\n"
"  * Downgrades in addition to upgrades.\n"
"\n"
"  * Multiple sql files files per upgrade/downgrade/install.\n"
"\n"
"  * Perl scripts allowed for upgrade/downgrade/install.\n"
"\n"
"  * Just one set of files needed for upgrade, unlike before where one might "
"need to generate 'factorial(scalar @versions)', which is just silly.\n"
"\n"
"  * And much, much more!\n"
"\n"
"That's really just a taste of some of the differences. Check out each role "
"for all the details."
msgstr ""
"'DBIx::Class::DeploymentHandler' はその名前が示しているとおり、 DBIx::Class "
"でデータベースの配置とアップグレードの処理を行なうためのツールです。 DBIx::"
"Class::Schema::Versioned よりもずっと柔軟な仕組みになるよう設計されていて、 "
"Moose の用途や役割を担うことができるようにもなっています。\n"
"\n"
"'DBIx::Class::DeploymentHandler' それ自身はお勧めの役割セットともいえるもの"
"で、多くの人々にとってはうまく使いこなせないものでもありますが、それでも十分"
"にお役に立てるものと思っております。各役割に対して独自のニュアンスやドキュメ"
"ンテーションが設定されているため、ここでは詳しく説明しませんが、 DBIx::"
"Class::Schema::Versioned の動作 (および互換性を確保しようとしている DBIx::"
"Class::DeploymentHandler::Deprecated) と比較した主な利点があります:\n"
"\n"
"* アップグレードに加えてダウングレードにも対応。\n"
"\n"
"* アップグレードやダウングレード、インストール時に追加の複数の SQL ファイルを"
"設定可能。\n"
"\n"
"* アップグレードやダウングレード、インストール時に Perl スクリプトを設定可"
"能。\n"
"\n"
"* 'factorial(scalar @versions)' を生成するのに必要となっていた不便な場合とは"
"異なり、アップグレードに対しては 1 セットのファイルがあれば実施可能。\n"
"\n"
"* それ以外にも多数の機能があります！\n"
"\n"
"ここで示されているのはごく一部でしかありません。詳しくは各役割をお読みくださ"
"い。"

#. leap/perl-DBIx-Class-DynamicDefault/summary
msgid "Automatically set and update fields"
msgstr "項目に対する自動設定や自動更新"

#. leap/perl-DBIx-Class-DynamicDefault/description
msgid "Automatically set and update fields with values calculated at runtime."
msgstr ""
"実行時に値を計算して、項目を自動的に設定したり更新したりすることができます。"

#. leap/perl-DBIx-Class-Fixtures/summary
msgid "Dump data and repopulate a database using rules"
msgstr "ルールを利用したデータベースのデータダンプと再投入"

#. leap/perl-DBIx-Class-Fixtures/description
msgid ""
"Dump fixtures from source database to filesystem then import to another "
"database (with same schema) at any time. Use as a constant dataset for "
"running tests against or for populating development databases when "
"impractical to use production clones. Describe fixture set using relations "
"and conditions based on your DBIx::Class schema."
msgstr ""
"元となるデータベースからデータをダンプしてファイルシステムに書き込み、他の"
"データベース (同じスキーマ) に任意のタイミングでインポートする機能を提供しま"
"す。テスト実施時のデータセットの投入として使用することができるほか、本番のク"
"ローンを作成するのでは現実的ではないようなテストを実施する際に便利です。 "
"DBIx::Class スキーマをベースにして、関連性や条件などを設定することもできま"
"す。"

#. leap/perl-DBIx-Class-InflateColumn-FS/summary
msgid "Inflate/deflate columns to Path::Class::File objects"
msgstr "列を拡張または縮小して Path::Class:File オブジェクトへの変換"

#. leap/perl-DBIx-Class-InflateColumn-FS/description
msgid ""
"Provides inflation to a Path::Class::File object allowing file system "
"storage of BLOBS.\n"
"\n"
"The storage path is specified with 'fs_column_path'. Each file receives a "
"unique name, so the storage for all FS columns can share the same path.\n"
"\n"
"Within the path specified by 'fs_column_path', files are stored in sub-"
"directories based on the first 2 characters of the unique file names. Up to "
"256 sub-directories will be created, as needed. Override '_fs_column_dirs' "
"in a derived class to change this behavior.\n"
"\n"
"'fs_new_on_update' will create a new file name if the file has been updated."
msgstr ""
"BLOB と呼ばれるファイルシステムストレージを Path::Class::FIle オブジェクトに"
"拡張します。\n"
"\n"
"ストレージのパスは 'fs_column_path' で指定することができます。各ファイルには"
"ユニークな名前が付与されるため、すべての FS に対するストレージを同じパスに設"
"定することができます。\n"
"\n"
"'fs_column_path' で指定したパス内では、ファイルはユニークなファイル名の最初"
"の 2 文字を利用して、サブディレクトリが作成され保存されます。必要であれば、最"
"大 256 個のサブディレクトリまで作成することができます。また、派生クラス内で "
"'_fs_column_dirs' をオーバーライドすることで、動作を変更することもできま"
"す。\n"
"\n"
"'fs_new_on_update' は、ファイルが更新された場合に新しいファイル名を作成しま"
"す。"

#. leap/perl-DBIx-Class-IntrospectableM2M/summary
msgid "Introspect many-to-many shortcuts"
msgstr "多対多ショートカットの調査"

#. leap/perl-DBIx-Class-IntrospectableM2M/description
msgid ""
"Because the many-to-many relationships are not real relationships, they can "
"not be introspected with DBIx::Class. Many-to-many relationships are "
"actually just a collection of convenience methods installed to bridge two "
"relationships. This DBIx::Class component can be used to store all relevant "
"information about these non-relationships so they can later be introspected "
"and examined."
msgstr ""
"多対多の関係性は実際には関係性と呼ばれないため、 DBIx::Class では内部調査を行"
"なうことができません。多対多の関係性は、実際には 2 つの関係性の橋渡しとしてイ"
"ンストールされる便利なメソッド集です。 DBIx::Class のコンポーネントとしては、"
"これはこれらの非関係性に関するすべての情報を保持する際に利用することができま"
"す。これにより、後から内部調査を行なったりすることができるようになります。"

#. leap/perl-DBIx-Class-OptimisticLocking/summary
#. leap/perl-DBIx-Class-OptimisticLocking/description
msgid "Optimistic locking support for DBIx::Class"
msgstr "DBIx::Class 向け楽観的ロックサポート"

#. leap/perl-DBIx-Class-Schema-Config/summary
msgid "Credential Management for DBIx::Class"
msgstr "DBIx::Class 向け認証管理"

#. leap/perl-DBIx-Class-Schema-Config/description
msgid ""
"DBIx::Class::Schema::Config is a subclass of DBIx::Class::Schema that allows "
"the loading of credentials & configuration from a file. The actual code "
"itself would only need to know about the name used in the configuration "
"file. This aims to make it simpler for operations teams to manage database "
"credentials.\n"
"\n"
"A simple tutorial that compliments this documentation and explains "
"converting an existing DBIx::Class Schema to use this software to manage "
"credentials can be found at http://www.symkat.com/credential-management-in-"
"dbix-class"
msgstr ""
"DBIx::Class::Schema::Config は DBI::Class::Schema のサブクラスで、ファイルか"
"ら認証情報や設定などを読み込むことができるモジュールです。実際のコード自身で"
"は、設定ファイル内で使用される名前のみを知る必要があります。これにより、デー"
"タベースの認証情報を管理するにあたってシンプルな運用を実現することができま"
"す。\n"
"\n"
"このソフトウエアを利用して認証情報を管理するシンプルなチュートリアルについ"
"て、このドキュメンテーションより詳しい情報や、既存の DBIx::Class スキーマの変"
"換方法の説明について、詳しくは http://www.symkat.com/credential-management-"
"in-dbix-class をお読みください。"

#. leap/perl-DBIx-Class-Schema-Loader/summary
msgid "Create a DBIx::Class::Schema based on a database"
msgstr "データベースを基礎にした DBIx::Class::Schema の作成"

#. leap/perl-DBIx-Class-Schema-Loader/description
msgid ""
"DBIx::Class::Schema::Loader automates the definition of a DBIx::Class::"
"Schema by scanning database table definitions and setting up the columns, "
"primary keys, unique constraints and relationships.\n"
"\n"
"See dbicdump for the 'dbicdump' utility.\n"
"\n"
"DBIx::Class::Schema::Loader currently supports only the DBI storage type. It "
"has explicit support for DBD::Pg, DBD::mysql, DBD::DB2, DBD::Firebird, DBD::"
"InterBase, DBD::Informix, DBD::SQLAnywhere, DBD::SQLite, DBD::Sybase (for "
"Sybase ASE and MSSSQL), DBD::ODBC (for MSSQL, MSAccess, Firebird and SQL "
"Anywhere) DBD::ADO (for MSSQL and MSAccess) and DBD::Oracle. Other DBI "
"drivers may function to a greater or lesser degree with this loader, "
"depending on how much of the DBI spec they implement, and how standard their "
"implementation is.\n"
"\n"
"Patches to make other DBDs work correctly welcome.\n"
"\n"
"See DBIx::Class::Schema::Loader::DBI::Writing for notes on writing your own "
"vendor-specific subclass for an unsupported DBD driver.\n"
"\n"
"This module requires DBIx::Class 0.08127 or later, and obsoletes the older "
"DBIx::Class::Loader.\n"
"\n"
"See DBIx::Class::Schema::Loader::Base for available options."
msgstr ""
"DBIx::Class::Schema::Loader は DBIx::Class:Schema の定義を自動化するもので、"
"データベース側のテーブル定義のほか、列やプライマリキー、ユニーク制約や関係性"
"をスキャンして構築するものです。\n"
"\n"
"dbicdump について、詳しくは 'dbucdump' ユーティリティをご覧ください。\n"
"\n"
"DBIx::Class::Schema::Loader は、現時点では DBI のストレージタイプのみに対応し"
"ています。 DBD::Pg, DBD::mysql, DBD::DB2, DBD::Firebird, DBD::InterBase, "
"DBD::Informix, DBD::SQLAnywhere, DBD::SQLite, DBD::Sybase (Sybase ASE, MSSQL "
"向け), DBD::ODBC (MSSQL, MSAccess, Firebird, SQL Anywhere), DBD::ADO (MSSQL, "
"MSAccess 向け), DBD::Oracle に対しては明示的なサポートが提供されています。そ"
"の他の DBI ドライバでも、このローダを利用することでいくらかの機能を利用するこ"
"とができますが、どの機能を利用できるのかについては、 DBI 仕様の実装範囲や実装"
"されている標準の範囲に依存します。\n"
"\n"
"その他の DBD に対して修正がある場合は、是非お送りください。\n"
"\n"
"未対応の DBD ドライバ向けに固有のサブクラスを作成したい場合は、 DBIx::Class:"
"Schema::Loader::DBI::Writing 内のメモをお読みください。\n"
"\n"
"このモジュールは DBIx::Class 0.08127 およびそれ以降のバージョンが必要です。古"
"い DBIx::Class::Loader は廃止されます。\n"
"\n"
"利用可能なオプションについて、詳しくは DBIx::Class:Schema::Loader::Base をお"
"読みください。"

#. leap/perl-DBIx-Class-UUIDColumns/summary
msgid "Implicit uuid columns"
msgstr "暗黙の uuid 列"

#. leap/perl-DBIx-Class-UUIDColumns/description
msgid ""
"This the DBIx::Class manpage component resembles the behaviour of the Class::"
"DBI::UUID manpage, to make some columns implicitly created as uuid.\n"
"\n"
"When loaded, 'UUIDColumns' will search for a suitable uuid generation module "
"from the following list of supported modules:\n"
"\n"
"  Data::UUID   APR::UUID*   UUID   Win32::Guidgen   Win32API::GUID\n"
"\n"
"If no supporting module can be found, an exception will be thrown. \n"
"*APR::UUID will not be loaded under OpenBSD due to an as yet unidentified XS "
"issue.\n"
"\n"
"If you would like to use a specific module, you can set the /uuid_class "
"manpage:\n"
"\n"
"  __PACKAGE__->uuid_class('::Data::UUID');   __PACKAGE__-"
">uuid_class('MyUUIDGenerator');"
msgstr ""
"この DBIx::Class コンポーネントは、 Class::DBI::UUID の振る舞いに似せて作られ"
"たもので、列に対して暗黙の UUID を作成するための仕組みです。\n"
"\n"
"このモジュールを読み込むと、 'UUIDColumns' は下記の対応モジュールの中から、適"
"切な UUID 生成モジュールを検索します:\n"
"\n"
"  Data::UUID   APR::UUID*   UUID   Win32::Guidgen   Win32API::GUID\n"
"\n"
"対応するモジュールが見つからなかった場合は、例外が投げられます。\n"
"*APR::UUID は、まだ識別されていない XS の問題が存在することから、 OpenBSD 環"
"境では読み込まれません。\n"
"\n"
"また、特定のモジュールを使用したい場合は、 /uuid_class に対してそれを設定して"
"ください:\n"
"\n"
"  __PACKAGE__->uuid_class('::Data::UUID');   __PACKAGE__-"
">uuid_class('MyUUIDGenerator');"

#. leap/perl-DBIx-Connector/summary
#. leap/perl-DBIx-Connector/description
msgid "Fast, safe DBI connection and transaction management"
msgstr "高速で安全な DBI 接続およびトランザクション管理"

#. leap/perl-DBIx-ContextualFetch/summary
msgid "Add contextual fetches to DBI"
msgstr "DBI に対する状況依存型フェッチ機能の追加"

#. leap/perl-DBIx-ContextualFetch/description
msgid ""
"It always struck me odd that DBI didn't take much advantage of Perl's "
"context sensitivity. DBIx::ContextualFetch redefines some of the various "
"fetch methods to fix this oversight. It also adds a few new methods for "
"convenience (though not necessarily efficiency)."
msgstr ""
"DBI はあまり Perl の状況依存性に注力していないことから、私は常にショックを受"
"け続けてきました。 DBIx::ContextualFetch では、様々なフェッチメソッドを再定義"
"して、 Perl のやり方に近くなるようにしています。このほか、利便性向上の目的で "
"(ただし効率性の観点では必ずしも必要となるものではありません) 、新しいフェッチ"
"メソッドも追加されています。"

#. leap/perl-DBIx-Simple/summary
msgid "Very complete easy-to-use OO interface to DBI"
msgstr ""
"完全性が高く、非常に使いやすい DBI 向けオブジェクト指向インターフェイス"

#. leap/perl-DBIx-Simple/description
msgid ""
"DBIx::Simple provides a simplified interface to DBI, Perl's powerful "
"database module.\n"
"\n"
"This module is aimed at rapid development and easy maintenance. Query "
"preparation and execution are combined in a single method, the result object "
"(which is a wrapper around the statement handle) provides easy row-by-row "
"and slurping methods.\n"
"\n"
"The 'query' method returns either a result object, or a dummy object. The "
"dummy object returns undef (or an empty list) for all methods and when used "
"in boolean context, is false. The dummy object lets you postpone (or skip) "
"error checking, but it also makes immediate error checking simply '$db-"
">query(...) or die $db->error'."
msgstr ""
"DBIx::Simple は Perl のパワフルなデータベースモジュールである DBI に対して、"
"シンプルなインターフェイスを提供します。\n"
"\n"
"このモジュールは素早い開発とメンテナンスの容易さを目指しています。問い合わせ"
"の準備と実行は単一のメソッドで行なうことができますし、結果オブジェクト (ス"
"テートメントハンドルに対するラッパー) では行ごとまたは一括の取得メソッドが提"
"供されています。\n"
"\n"
"'query' メソッドは結果オブジェクトのほか、ダミーオブジェクトを返す場合もあり"
"ます。ダミーオブジェクトはすべてのメソッドに対して undef (または空のリスト) "
"を返すほか、ブール値を返すような状況下では false を返すオブジェクトです。ダ"
"ミーオブジェクトはエラーのチェックを遅らせたい (または無視したい) ような場合"
"に利用しますが、単純に '$db->query(...)' or die $db->error' のようにすれば、"
"即時のエラーチェックも行なうことができます。"

#. leap/perl-DBIx-Transaction/summary
msgid "Allow transactions to be nested in DBI"
msgstr "DBI 内で入れ子になったトランザクションを実行するモジュール"

#. leap/perl-DBIx-Transaction/description
msgid ""
"DBIx::Transaction is a wrapper around DBI that helps you manage your "
"database transactions.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Tyler \"Crackerjack\" MacDonald <japh@crackerjack.net>"
msgstr ""
"DBIx::Transaction は、お使いのデータベーストランザクションの管理を支援する "
"DBI まわりのラッパーです。\n"
"\n"
"\n"
"\n"
"作者:\n"
"--------     Tyler \"Crackerjack\" MacDonald <japh@crackerjack.net>"

#. leap/perl-DBM-Deep/summary
msgid "Pure Perl Multi-Level Hash/Array Dbm That Supports Transactions"
msgstr "トランザクション対応の純粋 Perl マルチレベルハッシュ／配列 DBM"

#. leap/perl-DBM-Deep/description
msgid ""
"A unique flat-file database module, written in pure perl. True multi-level "
"hash/array support (unlike MLDBM, which is faked), hybrid OO / tie() "
"interface, cross-platform FTPable files, ACID transactions, and is quite "
"fast. Can handle millions of keys and unlimited levels without significant "
"slow-down. Written from the ground-up in pure perl -- this is NOT a wrapper "
"around a C-based DBM. Out-of-the-box compatibility with Unix, Mac OS X and "
"Windows."
msgstr ""
"Perl だけで記述された、ユニークなフラットファイル型のデータベースモジュールで"
"す。マルチレベルのハッシュ／配列もサポートされている (MLDBM のように擬似的な"
"対応ではありません) ほか、オブジェクト指向と tie() のハイブリッドインターフェ"
"イスになっていて、クロスプラットフォーム対応の FTP 転送可能なファイルになって"
"いるばかりか、 ACID トランザクションにも対応する非常に高速なインターフェイス"
"です。数百万ものキーを扱うことができるほか、明らかなスローダウン無しに無制限"
"のレベルにも対応しています。純粋に Perl だけで書き上げられたもので、 C 言語"
"ベースの DBM に対するラッパーではありません。標準で Unix, Mac OS X, Windows "
"との互換性があります。"

#. leap/perl-Daemon-Generic/summary
msgid "Framework to Provide Start/Stop/Reload for a Daemon"
msgstr "デーモン向けに開始／停止／再読込の機能を提供するフレームワーク"

#. leap/perl-Daemon-Generic/description
msgid ""
"Daemon::Generic provides a framework for starting, stopping, reconfiguring "
"daemon-like programs. The framework provides for standard commands that work "
"for as init.d files and as apachectl-like commands.\n"
"\n"
"Programs that use Daemon::Generic subclass Daemon::Generic to override its "
"behavior. Almost everything that Genric::Daemon does can be overridden as "
"needed."
msgstr ""
"Daemon::Generic はデーモン系のプログラムに対して、開始や停止、再設定のような"
"機能を提供します。フレームワークは init.d ファイル内で動作する標準コマンドの"
"ほか、 apachectl のようなコマンドにも対応しています。\n"
"\n"
"Daemon::Generic を利用するプログラムは、 Daemon::Generic をオーバーライドする"
"ことで、その動作を修正することもできます。必要であれば、ほぼ全ての機能をオー"
"バーライドできます。"

#. leap/perl-Data-Clone/summary
msgid "Polymorphic data cloning"
msgstr "多型データ複製"

#. leap/perl-Data-Clone/description
msgid ""
"'Data::Clone' does data cloning, i.e. copies things recursively. This is "
"smart so that it works with not only non-blessed references, but also with "
"blessed references (i.e. objects). When 'clone()' finds an object, it calls "
"a 'clone' method of the object if the object has a 'clone', otherwise it "
"makes a surface copy of the object. That is, this module does polymorphic "
"data cloning.\n"
"\n"
"Although there are several modules on CPAN which can clone data, this module "
"has a different cloning policy from almost all of them. See Cloning policy "
"and Comparison to other cloning modules for details."
msgstr ""
"'Data::Clone' はデータを再帰的に複製するためのモジュールです。非 bless 型の参"
"照で動作するだけでなく、 bless 型の参照 (つまりオブジェクト) でも賢く動作しま"
"す。 'clone()' がオブジェクトを検出すると、オブジェクトに 'clone' メソッドが"
"存在する場合はそのメソッドを呼び出し、存在しない場合はオブジェクトの面コピー"
"を作成します。このような仕組みにより、多型データ複製を実現しています。\n"
"\n"
"CPAN にはデータを複製するためのいくつかのモジュールが提供されていますが、この"
"モジュールはそれらのほぼすべてとは異なるポリシーでデータを複製しています。詳"
"しくは /Cloning policy のマニュアルページ、もしくは /Comparison のマニュアル"
"ページをお読みください。"

#. leap/perl-Data-Compare/summary
msgid "Compare Perl Data Structures"
msgstr "Perl のデータ構造の比較"

#. leap/perl-Data-Compare/description
msgid ""
"Compare two perl data structures recursively. Returns 0 if the structures "
"differ, else returns 1.\n"
"\n"
"A few data types are treated as special cases: \n"
"* Scalar::Properties objects\n"
"\n"
"  This has been moved into a plugin, although functionality remains the   "
"same as with the previous version. Full documentation is in the   Data::"
"Compare::Plugins::Scalar::Properties manpage. \n"
"* Compiled regular expressions, eg qr/foo/\n"
"\n"
"  These are stringified before comparison, so the following will match:\n"
"\n"
"      $r = qr/abc/i;       $s = qr/abc/i;       Compare($r, $s);\n"
"\n"
"  and the following won't, despite them matching *exactly* the same text:\n"
"\n"
"      $r = qr/abc/i;       $s = qr/[aA][bB][cC]/;       Compare($r, $s);\n"
"\n"
"  Sorry, that's the best we can do. \n"
"* CODE and GLOB references\n"
"\n"
"  These are assumed not to match unless the references are identical - ie,   "
"both are references to the same thing.\n"
"\n"
"You may also customise how we compare structures by supplying options in a "
"hashref as a third parameter to the 'Compare()' function. This is not yet "
"available through the OO-ish interface. These options will be in force for "
"the *whole* of your comparison, so will apply to structures that are lurking "
"deep down in your data as well as at the top level, so beware! \n"
"* ignore_hash_keys\n"
"\n"
"  an arrayref of strings. When comparing two hashes, any keys mentioned in   "
"this list will be ignored."
msgstr ""
"2 つの Perl データ構造を再帰的に比較します。構造が異なる場合には 0 を、そうで"
"ない場合は 1 を返します。\n"
"\n"
"いくつかのデータタイプは特別な扱いをしています:\n"
"* Scalar::Properties オブジェクト\n"
"\n"
"こちらはプラグイン内に移動されていますが、以前のバージョンと同様の機能が残さ"
"れています。完全なドキュメンテーションが必要となる場合は、 Data::Compare::"
"Plugins::Scalar::Properties をお読みください。\n"
"* コンパイル済みの正規表現 (例: qr/foo/)\n"
"\n"
"  これらは比較時に文字列化されます。そのため下記の比較は一致します:\n"
"\n"
"      $r = qr/abc/i;       $s = qr/abc/i;       Compare($r, $s);\n"
"\n"
"  逆に、下記の比較は同じテキストに対して同じ結果を返すにもかかわらず、一致し"
"ません:\n"
"\n"
"      $r = qr/abc/i;       $s = qr/[aA][bB][cC]/;       Compare($r, $s);\n"
"\n"
"  申し訳ありません。できる限りのことはしています。\n"
"* CODE と GLOB の参照\n"
"\n"
"  これらは参照が等価なもので無い限り、一致しません - 言い換えると、参照先が同"
"じものであれば、一致します。\n"
"\n"
"'Compare()' 関数の 3 つめのパラメータとしてハッシュ参照を指定することで、構造"
"の比較をカスタマイズすることができます。この機能はオブジェクト指向のインター"
"フェイスでは用意されていません。これらのオプションは比較の *全体* に対して強"
"制されるため、データ内の深い場所に隠れたレベルでもトップレベルでも、同様に処"
"理されることに注意してください！\n"
"\n"
"* ignore_hash_keys\n"
"\n"
"  文字列のハッシュ参照を指定します。 2 つのハッシュを比較する際、指定したキー"
"を無視します。"

#. leap/perl-Data-Dump/summary
msgid "Pretty printing of data structures"
msgstr "データ構造の見やすい表示"

#. leap/perl-Data-Dump/description
msgid ""
"This module provide a few functions that traverse their argument and "
"produces a string as its result. The string contains Perl code that, when "
"'eval'ed, produces a deep copy of the original arguments.\n"
"\n"
"The main feature of the module is that it strives to produce output that is "
"easy to read. Example:\n"
"\n"
"    @a = (1, [2, 3], {4 => 5});     dump(@a);\n"
"\n"
"Produces:\n"
"\n"
"    \"(1, [2, 3], { 4 => 5 })\"\n"
"\n"
"If you dump just a little data, it is output on a single line. If you dump "
"data that is more complex or there is a lot of it, line breaks are "
"automatically added to keep it easy to read.\n"
"\n"
"The following functions are provided (only the dd* functions are exported by "
"default): \n"
"* dump( ... ) \n"
"* pp( ... )\n"
"\n"
"  Returns a string containing a Perl expression. If you pass this string "
"to   Perl's built-in eval() function it should return a copy of the "
"arguments   you passed to dump().\n"
"\n"
"  If you call the function with multiple arguments then the output will be   "
"wrapped in parenthesis \"( ..., ... )\". If you call the function with a   "
"single argument the output will not have the wrapping. If you call the   "
"function with a single scalar (non-reference) argument it will just   return "
"the scalar quoted if needed, but never break it into multiple   lines. If "
"you pass multiple arguments or references to arrays of hashes   then the "
"return value might contain line breaks to format it for easier   reading. "
"The returned string will never be \"\\n\" terminated, even if   contains "
"multiple lines. This allows code like this to place the   semicolon in the "
"expected place:\n"
"\n"
"     print '$obj = ', dump($obj), \";\\n\";\n"
"\n"
"  If dump() is called in void context, then the dump is printed on STDERR   "
"and then \"\\n\" terminated. You might find this useful for quick debug   "
"printouts, but the dd*() functions might be better alternatives for this.\n"
"\n"
"  There is no difference between dump() and pp(), except that dump() "
"shares   its name with a not-so-useful perl builtin. Because of this some "
"might   want to avoid using that name. \n"
"* quote( $string )\n"
"\n"
"  Returns a quoted version of the provided string.\n"
"\n"
"  It differs from 'dump($string)' in that it will quote even numbers and   "
"not try to come up with clever expressions that might shorten the output.   "
"If a non-scalar argument is provided then it's just stringified instead   of "
"traversed. \n"
"* dd( ... ) \n"
"* ddx( ... )\n"
"\n"
"  These functions will call dump() on their argument and print the result   "
"to STDOUT (actually, it's the currently selected output handle, but   STDOUT "
"is the default for that).\n"
"\n"
"  The difference between them is only that ddx() will prefix the lines it   "
"prints with \"# \" and mark the first line with the file and line number   "
"where it was called. This is meant to be useful for debug printouts of   "
"state within programs. \n"
"* dumpf( ..., \\&filter )\n"
"\n"
"  Short hand for calling the dump_filtered() function of the   Data::Dump::"
"Filtered manpage. This works like dump(), but the last   argument should be "
"a filter callback function. As objects are visited the   filter callback is "
"invoked and it can modify how the objects are dumped."
msgstr ""
"このモジュールは、パラメータを読み込んでそれを文字列に変換して返します。文字"
"列には 'eval' した際に元のパラメータの深いコピーとなる、 Perl のコードが含ま"
"れています。\n"
"\n"
"このモジュールの主な機能として、わかりやすいデータ出力形式があげられます。た"
"とえば下記のようになります:\n"
"\n"
"    @a = (1, [2, 3], {4 => 5});     dump(@a);\n"
"\n"
"上記を実行すると、下記のように出力されます:\n"
"\n"
"    \"(1, [2, 3], { 4 => 5 })\"\n"
"\n"
"小規模なデータを dump した場合は 1 行で出力されますが、より複雑なデータや多数"
"のデータが存在するような場合は、読みやすくなるよう自動的に改行が挿入されま"
"す。\n"
"\n"
"それぞれ下記のような関数が公開されています (dd* のみが既定で公開されます):\n"
"* dump( ... )\n"
"* pp( ... )\n"
"\n"
"  Perl の表現形式を含む文字列を返します。この文字列を Perl の内蔵関数である "
"eval() に通すと、 dump() で渡した値のコピーがせいせいされるようになっていま"
"す。\n"
"\n"
"  複数のパラメータを指定した場合は \"( ..., ... )\" で括られて出力されます"
"が、 1 つだけを指定した場合は括られることはありません。また、単一のスカラー"
"値 (参照ではない) をパラメータとして指定すると、必要であれば引用符がつけられ"
"ますが、改行を挟むようなことはありません。また、複数のパラメータやハッシュの"
"配列に対する参照を指定した場合は、読みやすくするために複数行に分割されて出力"
"される場合があります。なお、返される文字列の行末には、複数行が返される場合で"
"あっても \"\\n\" が入ることはありません。これにより、下記のようにセミコロンを"
"挟んで改行を入れることができます:\n"
"\n"
"     print '$obj = ', dump($obj), \";\\n\";\n"
"\n"
"  dump() が void のコンテキスト下で呼び出された場合、 dump は STDERR に出力さ"
"れ、末尾には \"\\n\" が追加されます。これはデバッグ出力に便利な仕組みです"
"が、 dd*() 関数のほうがよりわかりやすいでしょう。\n"
"\n"
"  dump() と pp() には機能面の違いはありませんが、 dump() は (あまり使い物にな"
"りませんが) Perl の内蔵関数と名前を共有しています。このような理由から、上記の"
"ような名前を設定しています。 \n"
"* quote( $string )\n"
"\n"
"  指定した文字列に引用符をつけたものを返します。\n"
"\n"
"  'dump($string)' とは異なり、数字などにも引用符がつけられるほか、文字列出力"
"を少なくするための便利な表現も利用しません。非スカラー値がパラメータとして設"
"定されると、内容は読み込まれず単純に文字列化だけを行ないます。\n"
"* dd( ... )\n"
"* ddx( ... )\n"
"\n"
"  これらの関数は dump() を呼び出すための仕組みですが、結果を STDOUT (実際には"
"現在選択されている出力ハンドルですが、既定では STDOUT になっています) に出力"
"します。\n"
"\n"
"  ddx() では、各行に \"#\" が表示され、最初の行と呼び出し元の行番号が表示され"
"ます。プログラム内でのデバッグ用途に便利な仕組みです。\n"
"* dumpf( ..., \\&filter )\n"
"\n"
"  Data::Dump::Filtered 内にある dump_filtered()  を呼び出します。 dump() のよ"
"うに動作をしますが、最後のパラメータはコールバック関数であるべきです。オブ"
"ジェクトが検出されるたびにフィルタ関数が呼び出され、必要なオブジェクトの修正"
"を実施することができます。"

#. leap/perl-Data-Dump-Streamer/summary
msgid "Accurately serialize a data structure as Perl code"
msgstr "Perl コードとしてのデータ構造の正確なシリアライズ"

#. leap/perl-Data-Dump-Streamer/description
msgid ""
"Given a list of scalars or reference variables, writes out their contents in "
"perl syntax. The references can also be objects. The contents of each "
"variable is output using the least number of Perl statements as convenient, "
"usually only one. Self-referential structures, closures, and objects are "
"output correctly.\n"
"\n"
"The return value can be evaled to get back an identical copy of the original "
"reference structure. In some cases this may require the use of utility subs "
"that Data::Dump::Streamer will optionally export.\n"
"\n"
"This module is very similar in concept to the core module Data::Dumper, with "
"the major differences being that this module is designed to output to a "
"stream instead of constructing its output in memory (trading speed for "
"memory), and that the traversal over the data structure is effectively "
"breadth first versus the depth first traversal done by the others.\n"
"\n"
"In fact the data structure is scanned twice, first in breadth first mode to "
"perform structural analysis, and then in depth first mode to actually "
"produce the output, but obeying the depth relationships of the first pass."
msgstr ""
"スカラー値のリストや参照変数に対して、 Perl の文法を利用しその内容を出力しま"
"す。参照はオブジェクトでもかまいません。各変数の内容は Perl のステートメント"
"を最小限に利用して (通常は 1 つだけを利用して) 出力します。自己参照型の構造体"
"やクロージャ、オブジェクトに対しても、正しく出力することができます。\n"
"\n"
"返される値は eval を利用することで、元の参照構造に対する同一なコピーに戻すこ"
"とができるようになっています。なお、場合によっては Data::Dump::Streamer がオ"
"プションで公開しているユーティリティサブルーチンを利用する必要があるかもしれ"
"ません。\n"
"\n"
"このモジュールは、コアモジュールである Data::Dumper と考え方が非常に似ていま"
"すが、 Data::Dumper のようにメモリ内に構造を出力するのではなく、ストリームに"
"出力する点が大きく異なります。また、データ構造の展開も深さの展開を優先するの"
"ではなく、配列の展開を優先する点が異なります。\n"
"\n"
"実際に、データ構造は 2 回スキャンされますが、最初に構造体の分析を行なうために"
"配列を優先して展開し、その後実際の出力を行なうために深さを優先して展開しま"
"す。ただし、最初のパスで深さの関連性があった場合は、それに従います。"

#. leap/perl-Data-Dumper-Concise/summary
msgid "Less indentation and newlines plus sub deparsing"
msgstr "少ないインデントと改行を利用する内部表示"

#. leap/perl-Data-Dumper-Concise/description
msgid ""
"This module always exports a single function, Dumper, which can be called "
"with an array of values to dump those values.\n"
"\n"
"It exists, fundamentally, as a convenient way to reproduce a set of Dumper "
"options that we've found ourselves using across large numbers of "
"applications, primarily for debugging output.\n"
"\n"
"The principle guiding theme is \"all the concision you can get while still "
"having a useful dump and not doing anything cleverer than setting Data::"
"Dumper options\" - it's been pointed out to us that Data::Dump::Streamer can "
"produce shorter output with less lines of code. We know. This is simpler and "
"we've never seen it segfault. But for complex/weird structures, it generally "
"rocks. You should use it as well, when Concise is underkill. We do.\n"
"\n"
"Why is deparsing on when the aim is concision? Because you often want to "
"know what subroutine refs you have when debugging and because if you were "
"planning to eval this back in you probably wanted to remove subrefs first "
"and add them back in a custom way anyway. Note that this -does- force using "
"the pure perl Dumper rather than the XS one, but I've never in my life seen "
"Data::Dumper show up in a profile so \"who cares?\"."
msgstr ""
"このモジュールは Dumper と呼ばれる関数 1 つだけを公開しています。この関数は、"
"与えられた値の配列を指定することで、その値を表示することができるものです。\n"
"\n"
"Dumper は基本的に Dumper オプションの集合体で、多数のアプリケーションで使用さ"
"れるような、主にデバッグ出力を目的とした便利な方法を提供するものです。\n"
"\n"
"動作原理を言葉で表わすとすれば、 \"使い物になるもっとも簡潔なダンプ出力を、"
"もっとも賢く処理するモジュール\" であるといえます。たとえば Data::Dumper::"
"Streamer では、ご存じのとおり少ない行数でより短い出力を行ないます。これはより"
"シンプルな仕組みで、今まで segfault が発生する様子を見たこともありません。た"
"だし複雑で奇妙な構造体では期待通りには動作しません。ですから、簡潔さが求めら"
"れるような用途にお使いいただくのがよいでしょう。\n"
"\n"
"目標が簡潔なものであるとするならば、なぜ中身を処理するのでしょうか？これはデ"
"バッグの際、どのサブルーチン参照なのかを知りたい場合や、 eval で元の値に戻し"
"たいような場合に、サブ参照をまず削除したいような場合や、独自の方法で元に戻し"
"たいような場合に都合の良い仕組みになります。なお、 XS ではなく純粋な Perl で "
"Dumper を動作させるよう -強制- するのですが、 Dumper 自身に対してプロファイラ"
"を実行するようなことは無いものと思っていますが、そうでしょうか？"

#. leap/perl-Data-Entropy/summary
msgid "Entropy (randomness) management"
msgstr "エントロピー (乱数性) 管理"

#. leap/perl-Data-Entropy/description
msgid ""
"This module maintains a concept of a current selection of entropy source. "
"Algorithms that require entropy, such as those in the Data::Entropy::"
"Algorithms manpage, can use the source nominated by this module, avoiding "
"the need for entropy source objects to be explicitly passed around. This is "
"convenient because usually one entropy source will be used for an entire "
"program run and so an explicit entropy source parameter would rarely vary. "
"There is also a default entropy source, avoiding the need to explicitly "
"configure a source at all.\n"
"\n"
"If nothing is done to set a source then it defaults to the use of Rijndael "
"(AES) in counter mode (see the Data::Entropy::RawSource::CryptCounter "
"manpage and the Crypt::Rijndael manpage), keyed using Perl's built-in 'rand' "
"function. This gives a data stream that looks like concentrated entropy, but "
"really only has at most the entropy of the 'rand' seed. Within a single run "
"it is cryptographically difficult to detect the correlation between parts of "
"the pseudo-entropy stream. If more true entropy is required then it is "
"necessary to configure a different entropy source."
msgstr ""
"このモジュールは、現在のエントロピーの情報源を管理する考え方をしています。エ"
"ントロピーを必要とするアルゴリズム、たとえばData::Entropy::Algorithms など"
"で、このモジュールが指定した情報源を利用することができますが、情報源側のオブ"
"ジェクトを明示的に渡す必要がありません。これは通常、プログラム全体でエントロ"
"ピー源は 1 つ存在すれば十分で、わざわざ明示的にパラメータを指定するようなこと"
"はほとんど無いためです。また、既定のエントロピー源も用意されていますが、これ"
"によって明示的な設定を全く行なわなくても動作するようになっています。\n"
"\n"
"情報源を設定する処理を行なわない場合、既定ではカウンターモードで、 Perl の内"
"蔵 'rand' 関数をキーとしてとる Rijindael (AES) を利用します (詳しくは Data::"
"Entropy::RawSource::CryptCounter manpage および Crypt::Rijndael をお読みくだ"
"さい) 。これにより濃縮されたエントロピーのように見えるデータソースとなります"
"が、多くても 'rand' のシードのエントロピー程度になります。 1 回だけの実行で"
"は、暗号処理として疑似エントロピーストリームとの相関性を検出するのは難しくな"
"ります。なお、複数のエントロピーが必要な場合は、異なるエントロピー源を設定す"
"る必要があります。"

#. leap/perl-Data-Float/summary
msgid "Details of the Floating Point Data Type"
msgstr "浮動小数点のデータタイプの詳細"

#. leap/perl-Data-Float/description
msgid ""
"This module is about the native floating point numerical data type. A "
"floating point number is one of the types of datum that can appear in the "
"numeric part of a Perl scalar. This module supplies constants describing the "
"native floating point type, classification functions, and functions to "
"manipulate floating point values at a low level."
msgstr ""
"このモジュールは、ネイティブな浮動小数点データタイプに関するものです。 Perl "
"の数値表現では浮動小数点はデータタイプのうちの 1 つですが、このモジュールはネ"
"イティブな浮動小数点タイプに関する定数を提供するほか、分類関数や低レベルの浮"
"動小数点値の操作関数などが含まれています。"

#. leap/perl-Data-Hexify/summary
msgid "Perl extension for hexdumping arbitrary data"
msgstr "任意のデータを 16 進数ダンプするための Perl 拡張"

#. leap/perl-Data-Hexify/description
msgid ""
"This module exports one subroutine: 'Hexify'.\n"
"\n"
"'Hexify' formats arbitrary (possible binary) data into a format suitable for "
"hex dumps in the style of 'xd' or 'hexl'.\n"
"\n"
"The first, or only, argument to 'Hexify' contains the data, or a reference "
"to the data, to be hexified. Hexify will return a string that prints as "
"follows:\n"
"\n"
"  0000: 70 61 63 6b 61 67 65 20 44 61 74 61 3a 3a 48 65  package Data::He   "
"0010: 78 69 66 79 3b 0a 0a 75 73 65 20 35 2e 30 30 36  xify;..use 5.006\n"
"\n"
"and so on. At the left is the (hexadecimal) index of the data, then a number "
"of hex bytes, followed by the chunk of data with unprintables replaced by "
"periods.\n"
"\n"
"The optional second argument to 'Hexify' must be a hash or a hash reference, "
"containing values for any of the following parameters: \n"
"* first\n"
"\n"
"  The first byte of the data to be processed. Default is to start from the   "
"beginning of the data. \n"
"* length\n"
"\n"
"  The number of bytes to be processed. Default is to proceed all data. \n"
"* chunk\n"
"\n"
"  The number of bytes to be processed per line of output. Default is 16. \n"
"* group\n"
"\n"
"  The number of bytes to be grouped together. Default is 1 (no grouping).   "
"If used, it must be a divisor of the chunk size. \n"
"* duplicates\n"
"\n"
"  When set, duplicate lines of output are suppressed and replaced by a   "
"single line reading '**SAME**'.\n"
"\n"
"  Duplicate suppression is enabled by default. \n"
"* showdata\n"
"\n"
"  A reference to a subroutine that is used to produce a printable string   "
"from a chunk of data. By default, a subroutine is used that replaces   "
"unwanted bytes by periods.\n"
"\n"
"  The subroutine gets the chunk of data passed as argument, and should   "
"return a printable string of at most 'chunksize' characters. \n"
"* align\n"
"\n"
"  Align the result to 'chunksize' bytes. This is relevant only when   "
"processing data not from the beginning. For example, when 'first' is 10,   "
"the result would become:\n"
"\n"
"    0000:                ...    74 61 3a 3a 48 65            ta::He     "
"0010: 78 69 66 79 3b ... 65 20 35 2e 30 30 36  xify;..use 5.006     ... and "
"so on ...\n"
"\n"
"  Alignment is on by default. Without alignment, the result would be:\n"
"\n"
"    000a: 74 61 3a 3a 48 ... 79 3b 0a 0a 75 73 65  ta::Hexify;..use     "
"001a: 20 35 2e 30 30 ... 73 65 20 73 74 72 69   5.006;.use stri     ... and "
"so on ... \n"
"* start\n"
"\n"
"  Pretend that the data started at this byte (while in reality it starts "
"at   byte 'first'). The above example, with 'start => 0', becomes:\n"
"\n"
"    0000: 74 61 3a 3a 48 ... 79 3b 0a 0a 75 73 65  ta::Hexify;..use     "
"0010: 20 35 2e 30 30 ... 73 65 20 73 74 72 69   5.006;.use stri     ... and "
"so on ..."
msgstr ""
"このモジュールは 1 つのサブルーチン 'Hexify' だけを公開します。\n"
"\n"
"'Hexify' は任意 (主にバイナリ) のデータを 'xd' や 'hexl' の形式で 16 進数ダン"
"プします。\n"
"\n"
"'Hexify' に指定する最初の (場合によっては唯一の) パラメータは、 16 進数ダンプ"
"するデータ、もしくはデータの参照です。 Hexify は下記のような文字列を返しま"
"す:\n"
"\n"
"  0000: 70 61 63 6b 61 67 65 20 44 61 74 61 3a 3a 48 65  package Data::He   "
"0010: 78 69 66 79 3b 0a 0a 75 73 65 20 35 2e 30 30 36  xify;..use 5.006\n"
"\n"
"左側には (16 進数で) データの位置が表示され、その後ろにバイト列が続きます。残"
"りはデータそのものの値で、表示不可能な文字は \".\" に置き換えられています。\n"
"\n"
"'Hexify' には 2 つめのパラメータを指定することができますが、こちらはハッシュ"
"またはハッシュ参照でなければなりません。それぞれ下記のパラメータを設定するこ"
"とができます:\n"
"* first\n"
"\n"
"  処理対象とするデータの開始位置。何も指定しない場合はデータの先頭から処理さ"
"れます。\n"
"* length\n"
"\n"
"  処理対象とするデータの長さ。何も指定しない場合はすべてのデータを処理しま"
"す。\n"
"* chunk\n"
"\n"
"  出力時の 1 行あたりのデータの長さ。既定は 16 です。\n"
"* group\n"
"\n"
"  グループ化するサイズ。既定では 1 (グループ化しない) ですが、指定する場合は "
"chunk サイズの約数でなければなりません。\n"
"* duplicates\n"
"\n"
"  指定した場合、出力行が前のものと同じであればその出力が省略され、 "
"'**SAME**' と表示されるようになります。\n"
"\n"
"  既定で有効になっています。\n"
"* showdata\n"
"\n"
"  データチャンクを表示可能な文字列に変換する際の、サブルーチンを指定します。"
"既定では表示できない文字を \".\" (ピリオド) に置き換えるサブルーチンを使用し"
"ます。\n"
"\n"
"  サブルーチンのパラメータには処理対象のデータチャンクが設定され、 "
"'chunksize' 文字までの文字列を返すべきものです。\n"
"* align\n"
"\n"
"  出力される結果を 'chunksize' バイトで合わせます。これはデータを先頭から処理"
"しない場合にのみ意味のあるもので、たとえば 'first' が 10 出会った場合、下記の"
"ようになります:\n"
"\n"
"    0000:                ...    74 61 3a 3a 48 65            ta::He     "
"0010: 78 69 66 79 3b ... 65 20 35 2e 30 30 36  xify;..use 5.006     ... and "
"so on ...\n"
"\n"
"  既定では align は有効になっています。 align を無効化すると、下記のようにな"
"ります:\n"
"\n"
"    000a: 74 61 3a 3a 48 ... 79 3b 0a 0a 75 73 65  ta::Hexify;..use     "
"001a: 20 35 2e 30 30 ... 73 65 20 73 74 72 69   5.006;.use stri     ... and "
"so on ...\n"
"* start\n"
"\n"
"  ここで指定したバイトからデータが始まるものと仮定します。上記の例で 'start "
"=> 0' を指定すると、下記のようになります:\n"
"\n"
"    0000: 74 61 3a 3a 48 ... 79 3b 0a 0a 75 73 65  ta::Hexify;..use     "
"0010: 20 35 2e 30 30 ... 73 65 20 73 74 72 69   5.006;.use stri     ... and "
"so on ..."

#. leap/perl-Data-Hierarchy/summary
msgid "Handle data in a hierarchical structure"
msgstr "階層構造データの処理"

#. leap/perl-Data-Hierarchy/description
msgid ""
"the Data::Hierarchy manpage provides a simple interface for manipulating "
"inheritable data attached to a hierarchical environment (like a "
"filesystem).\n"
"\n"
"One use of the Data::Hierarchy manpage is to allow an application to "
"annotate paths in a real filesystem in a single compact data structure. "
"However, the hierarchy does not actually need to correspond to an actual "
"filesystem.\n"
"\n"
"Paths in a hierarchy are referred to in a Unix-like syntax; '\"/\"' is the "
"root \"directory\". (You can specify a different separator character than "
"the slash when you construct a Data::Hierarchy object.) With the exception "
"of the root path, paths should never contain trailing slashes. You can "
"associate properties, which are arbitrary name/value pairs, with any path. "
"(Properties cannot contain the undefined value.) By default, properties are "
"inherited by child paths: thus, if you store some data at '/some/path':\n"
"\n"
"    $tree->store('/some/path', {color => 'red'});\n"
"\n"
"you can fetch it again at a '/some/path/below/that':\n"
"\n"
"    print $tree->get('/some/path/below/that')->{'color'};     \n"
"\n"
"On the other hand, properties whose names begin with dots are uninherited, "
"or \"sticky\":\n"
"\n"
"    $tree->store('/some/path', {'.color' => 'blue'});     print $tree->get('/"
"some/path')->{'.color'};            # prints blue     print $tree->get('/"
"some/path/below/that')->{'.color'}; # undefined\n"
"\n"
"Note that you do not need to (and in fact, cannot) explicitly add \"files\" "
"or \"directories\" to the hierarchy; you simply add and delete properties to "
"paths."
msgstr ""
"Data::Hierarchy は、ファイルシステムなどの継承可能な環境に割り当てられたデー"
"タを操作するための、シンプルなインターフェイスを提供します。\n"
"(\n"
"Data::Hierarchy は、アプリケーションで実際のファイルシステムのパスを単一かつ"
"コンパクトなデータとして保持する、などの使い方が考えられます。しかしながら、"
"階層構造は必ずしも実際のファイルシステムに関連したものでなければならない、と"
"いうものではありません。\n"
"\n"
"階層構造内のパスは Unix に似た文法で作られていて、 \"/\" をルートディレクトリ"
"とした構造です (スラッシュ以外を区切り文字としたい場合は、 Data::Hierarchy オ"
"ブジェクトの構築時に指定してください) 。なお、ディレクトリパスの終わりにはス"
"ラッシュはつけません。このほか、任意の名前と値の対から構成されるプロパティも"
"設定することができます (未定義の値を含むことはできません) 。既定ではプロパ"
"ティはパスからのものを継承します。たとえば下記のようにして '/some/path' に"
"データを保存した場合:\n"
"\n"
"    $tree->store('/some/path', {color => 'red'});\n"
"\n"
"'/some/path/below/that' からも上記を取得することができます:\n"
"\n"
"    print $tree->get('/some/path/below/that')->{'color'};     \n"
"\n"
"なお、 \".\" で始まる名前のプロパティは継承されず、 \"sticky\" と表現しま"
"す:\n"
"\n"
"    $tree->store('/some/path', {'.color' => 'blue'});     print $tree->get('/"
"some/path')->{'.color'};            # prints blue     print $tree->get('/"
"some/path/below/that')->{'.color'}; # undefined\n"
"\n"
"なお、階層構造は実際の \"ファイル\" や \"ディレクトリ\" とは関係がありませ"
"ん。また、プロパティはパスにのみ追加することができます。"

#. leap/perl-Data-Integer/summary
msgid "Details of the Native Integer Data Type"
msgstr "ネイティブ整数データタイプの詳細"

#. leap/perl-Data-Integer/description
msgid ""
"This module is about the native integer numerical data type. A native "
"integer is one of the types of datum that can appear in the numeric part of "
"a Perl scalar. This module supplies constants describing the native integer "
"type.\n"
"\n"
"There are actually two native integer representations: signed and unsigned. "
"Both are handled by this module."
msgstr ""
"このモジュールはネイティブな整数型数値データタイプに関するものです。ネイティ"
"ブな整数型とは、 Perl のスカラー値の数値表現で現われるデータタイプのうちの 1 "
"つです。このモジュールは、そのようなネイティブな整数型に対して、定数を提供し"
"ます。\n"
"\n"
"ネイティブ整数表現には 2 種類のものがあります: 1 つは符号付き (signed) で、も"
"う 1 つは符号無し (unsigned) です。いずれもこのモジュールで扱うことができま"
"す。"

#. leap/perl-Data-ObjectDriver/summary
msgid "Simple, transparent data interface, with caching"
msgstr "キャッシュ機能付きのシンプルで透過的なデータインターフェイス"

#. leap/perl-Data-ObjectDriver/description
msgid ""
"_Data::ObjectDriver_ is an object relational mapper, meaning that it maps "
"object-oriented design concepts onto a relational database.\n"
"\n"
"It's inspired by, and descended from, the _MT::ObjectDriver_ classes in Six "
"Apart's Movable Type and TypePad weblogging products. But it adds in caching "
"and partitioning layers, allowing you to spread data across multiple "
"physical databases, without your application code needing to know where the "
"data is stored."
msgstr ""
"_Data::ObjectDriver_ はオブジェクト関係情報マッパーと呼ばれるもので、オブジェ"
"クト指向の設計コンセプトを関係 (リレーショナル) データベースにマッピングする"
"仕組みです。\n"
"\n"
"これは Six Apart の Movable Type や TypePad weblogging 製品内にある _MT::"
"ObjectDriver_ クラスからヒントを得て作られています。このほか、キャッシュや"
"パーティショニングレイヤを追加しているため、複数の物理データベースに分散する"
"データを、そのデータの存在する場所を気にすることなく利用できるようにもなって"
"います。"

#. leap/perl-Data-OptList/summary
msgid "Parse and validate simple name/value option pairs"
msgstr "単純な名前/値オプションのペアの解析と検証"

#. leap/perl-Data-OptList/description
msgid ""
"Hashes are great for storing named data, but if you want more than one entry "
"for a name, you have to use a list of pairs. Even then, this is really "
"boring to write:\n"
"\n"
"  $values = [     foo => undef,     bar => undef,     baz => undef,     xyz "
"=> { ... },   ];\n"
"\n"
"Just look at all those undefs! Don't worry, we can get rid of those:\n"
"\n"
"  $values = [     map { $_ => undef } qw(foo bar baz),     xyz => "
"{ ... },   ];\n"
"\n"
"Aaaauuugh! We've saved a little typing, but now it requires thought to read, "
"and thinking is even worse than typing... and it's got a bug! It looked "
"right, didn't it? Well, the 'xyz => { ... }' gets consumed by the map, and "
"we don't get the data we wanted.\n"
"\n"
"With Data::OptList, you can do this instead:\n"
"\n"
"  $values = Data::OptList::mkopt([     qw(foo bar baz),     xyz => "
"{ ... },   ]);\n"
"\n"
"This works by assuming that any defined scalar is a name and any reference "
"following a name is its value."
msgstr ""
"ハッシュは名前付きのデータを保存するには便利な仕組みですが、 1 つの名前に対し"
"て複数の値を入れたいような場合は、配列を利用することになってしまいます。たと"
"えば下記のようになります:\n"
"\n"
"  $values = [     foo => undef,     bar => undef,     baz => undef,     xyz "
"=> { ... },   ];\n"
"\n"
"このように undef だらけになってしまいました。心配はありません。下記のように\n"
"することができます:\n"
"\n"
"  $values = [     map { $_ => undef } qw(foo bar baz),     xyz => "
"{ ... },   ];\n"
"\n"
"少しだけ入力を省くことができましたが、相変わらず読むには不便なコードになって"
"しまいました。読むときに考え込んでしまうコードというのも、バグを引き起こしか"
"ねないものです。 'xyz => { ... }' をマップとして使用してしまっているため、必"
"要なデータにたどり着きにくくなっています。\n"
"\n"
"Data::OptList を使用すると、下記のように書き換えることができます:\n"
"\n"
"  $values = Data::OptList::mkopt([     qw(foo bar baz),     xyz => "
"{ ... },   ]);\n"
"\n"
"これは、任意の定義済みスカラーに名前を設定し、名前に続く任意の参照にはその値"
"が存在する形になります。"

#. leap/perl-Data-Page/summary
msgid "Help when paging through sets of results"
msgstr "結果セットをページング処理するための支援"

#. leap/perl-Data-Page/description
msgid ""
"When searching through large amounts of data, it is often the case that a "
"result set is returned that is larger than we want to display on one page. "
"This results in wanting to page through various pages of data. The maths "
"behind this is unfortunately fiddly, hence this module.\n"
"\n"
"The main concept is that you pass in the number of total entries, the number "
"of entries per page, and the current page number. You can then call methods "
"to find out how many pages of information there are, and what number the "
"first and last entries on the current page really are.\n"
"\n"
"For example, say we wished to page through the integers from 1 to 100 with "
"20 entries per page. The first page would consist of 1-20, the second page "
"from 21-40, the third page from 41-60, the fourth page from 61-80 and the "
"fifth page from 81-100. This module would help you work this out."
msgstr ""
"大量のデータを検索する場合、検索結果が 1 ページ内に収まらないことがあります。"
"このような場合は、データをページ制御する必要がありますが、このような処理は面"
"倒なものです。このモジュールは、そのような問題を解決します。\n"
"\n"
"このモジュールは、データの項目数と 1 ページあたりの項目数、そして現在のページ"
"番号を渡すことで、全体のページ数や現在のページの最初および最後に表示される項"
"目の番号がそれぞれ返されます。\n"
"\n"
"たとえば 1 ページごとに 20 項目あるデータを 100 項目出力する場合、 1 ページ目"
"には 1-20 、 2 ページ目には 21-40 、 3 ページ目には 41-60 、 4 ページ目には "
"61-80 、 5 ページ目には 81-100 が出力されます。このモジュールは、そのような処"
"理を行ないます。"

#. leap/perl-Data-Peek/summary
msgid "Collection of low-level debug facilities"
msgstr "低レベルなデバッグ機能集"

#. leap/perl-Data-Peek/description
msgid ""
"Data::Peek started off as 'DDumper' being a wrapper module over Data::"
"Dumper, but grew out to be a set of low-level data introspection utilities "
"that no other module provided yet, using the lowest level of the perl "
"internals API as possible."
msgstr ""
"Data::Peek は当初 'Data::Dumper' のラッパーモジュール 'DDumper' として開発が"
"始まりましたが、低レベルのデータに対するイントロスペクションユーティリティと"
"して成長し、現在は他のモジュールが提供していない独自の機能を、 Perl の内部 "
"API のできる限り低レベルな部分を利用して提供しています。"

#. leap/perl-Data-Perl/summary
msgid "Base classes wrapping fundamental Perl data types"
msgstr "基礎的な Perl データタイプをラッピングするベースクラス"

#. leap/perl-Data-Perl/description
msgid ""
"Data::Perl is a collection of classes that wrap fundamental data types that "
"exist in Perl. These classes and methods as they exist today are an attempt "
"to mirror functionality provided by Moose's Native Traits. One important "
"thing to note is all classes currently do no validation on constructor "
"input.\n"
"\n"
"Data::Perl is a container class for the following classes: \n"
"* * Data::Perl::Collection::Hash \n"
"* * Data::Perl::Collection::Array \n"
"* * Data::Perl::String \n"
"* * Data::Perl::Number \n"
"* * Data::Perl::Counter \n"
"* * Data::Perl::Bool \n"
"* * Data::Perl::Code"
msgstr ""
"Data::Perl は Perl 内に存在する基礎的なデータタイプをラッピングするクラス集で"
"す。これらのクラスやメソッドは、現在は Mosse's Native Traits でも提供される機"
"能を反映しようとしています。なお、現時点ではすべてのクラスのコンストラクタの"
"入力に対して、検証は行なわれないことに注意してください。\n"
"\n"
"Data::Perl は下記のクラスに対するコンテナクラスです:\n"
"* * the Data::Perl::Collection::Hash\n"
"* * the Data::Perl::Collection::Array\n"
"* * the Data::Perl::String\n"
"* * the Data::Perl::Number\n"
"* * the Data::Perl::Counter\n"
"* * the Data::Perl::Bool\n"
"* * the Data::Perl::Code"

#. leap/perl-Data-Printer/summary
msgid ""
"Colored & full-featured pretty print of Perl data structures and objects"
msgstr ""
"Perl のデータ構造やオブジェクトに対する色つきでフル機能のの見やすい表示"

#. leap/perl-Data-Printer/description
msgid ""
"The ever-popular Data::Dumper is a fantastic tool, meant to stringify data "
"structures in a way they are suitable for being \"eval\"'ed back in. The "
"thing is, a lot of people keep using it (and similar ones, like Data::Dump) "
"to print data structures and objects on screen for inspection and debugging, "
"and while you _can_ use those modules for that, it doesn't mean you "
"_should_.\n"
"\n"
"This is where Data::Printer comes in. It is meant to do one thing and one "
"thing only:\n"
"\n"
"_format Perl variables and objects to be inspected by a human_\n"
"\n"
"If you want to serialize/store/restore Perl data structures, this module "
"will NOT help you. Try Storable, Data::Dumper, JSON, or whatever. CPAN is "
"full of such solutions!\n"
"\n"
"Whenever you type 'use Data::Printer' or 'use DDP', we export two functions "
"to your namespace:"
msgstr ""
"人気のData::Dumperは素晴らしいツールであり、データ構造を文字列化して\"eval"
"\"で戻すのに適したものにすることを目的としています。重要なのは、多くの人が"
"データ構造やオブジェクトを調査やデバッグのために画面上に出力するために(そして"
"Data::Dumpのような似たようなものを)それを使い続けているということであり、その"
"ためにこれらのモジュールを使うことはできますが、それが必要だという意味ではあ"
"りません。\n"
"\n"
"そこでData::Printerが登場します。これは1つの事を、1つの事だけを行うためのもの"
"です。\n"
"_format Perl 変数とオブジェクトを人が調査出来るようにします_\n"
"Perlデータ構造を直列化/格納/復元する場合、このモジュールは役に立ちません。"
"Storable、Data::Dumper、JSONなどを試してみてください。CPANはそんなソリュー"
"ションでいっぱいです!\n"
"\n"
"「use Data::Printer」または「use DDP」と入力するたびに、2つの関数がネームス"
"ペースにエクスポートされます。"

#. leap/perl-Data-Random/summary
msgid "Perl module to generate random data"
msgstr "乱数データを生成するための Perl モジュール"

#. leap/perl-Data-Random/description
msgid "A module used to generate random data. Useful mostly for test programs."
msgstr ""
"乱数データを生成するためのモジュールです。主にテストプログラムで便利な仕組み"
"です。"

#. leap/perl-Data-Section/summary
msgid "Read Multiple Hunks of Data Out of Your Data Section"
msgstr "お使いの DATA セクションからの複数のデータセクションの読み取り"

#. leap/perl-Data-Section/description
msgid ""
"Data::Section provides an easy way to access multiple named chunks of line-"
"oriented data in your module's DATA section. It was written to allow modules "
"to store their own templates, but probably has other uses."
msgstr ""
"Data::Section はお使いのモジュール内にある DATA セクションから、行指向の名前"
"付きデータチャンクにアクセスすることのできる便利な方法を提供します。元々はモ"
"ジュールに対して、独自のテンプレートを記述できるように作られたものですが、そ"
"れ以外の用途にも利用することができるはずです。"

#. leap/perl-Data-Section-Simple/summary
msgid "Read data from __DATA__"
msgstr "__DATA__ からのデータ読み込み"

#. leap/perl-Data-Section-Simple/description
msgid ""
"Data::Section::Simple is a simple module to extract data from '__DATA__' "
"section of the file."
msgstr ""
"Data::Section::Simple は、ファイルの '__DATA__' セクションからデータを抽出す"
"るためのシンプルなモジュールです。"

#. leap/perl-Data-ShowTable/summary
msgid "routines to display tabular data in several formats."
msgstr "いくつかの形式で表形式のデータを表示するルーチン"

#. leap/perl-Data-ShowTable/description
msgid ""
"The *ShowTable* module provides subroutines to display tabular data, "
"typially from a database, in nicely formatted columns, in several formats. "
"Its arguments can either be given in a fixed order, or, as a single, "
"anonymous hash-array.\n"
"\n"
"The output format for any one invocation can be one of four possible "
"styles: \n"
"* Box\n"
"\n"
"  A tabular format, with the column titles and the entire table surrounded   "
"by a \"box\" of \"'+'\", \"'-'\", and \"'|'\" characters. See the "
"\"ShowBoxTable\"   manpage for details. \n"
"* Table\n"
"\n"
"  A simple tabular format, with columns automatically aligned, with column   "
"titles. See the \"ShowSimpleTable\" manpage. \n"
"* List\n"
"\n"
"  A _list_ style, where columns of data are listed as a _name_:_value_   "
"pair, one pair per line, with rows being one or more column values,   "
"separated by an empty line. See the \"ShowListTable\" manpage. \n"
"* HTML\n"
"\n"
"  The data is output as an HTML _TABLE_, suitable for display through a   "
"_Web_-client. See the \"ShowHTMLTable\" manpage. Input can either be plain   "
"ASCII text, or text with embedded HTML elements, depending upon an   "
"argument or global parameter.\n"
"\n"
"The subroutines which perform these displays are listed below."
msgstr ""
"*ShowTable* モジュールは、データベースからのデータなど、表形式のデータをいく"
"つかの形式で、見やすく表示するためのサブルーチンを提供します。パラメータは固"
"定の順序で与えてもかまいませんし、単一の無名ハッシュ配列でもかまいません。\n"
"\n"
"それぞれのメソッドにおいて、出力形式は下記の 4 種類が用意されています:\n"
"* Box\n"
"\n"
"  \"'+'\", \"'-'\", \"'|'\" などを用いて作成される、列タイトル付きの表形式で"
"す。詳しくは \"ShowBoxTable\" をお読みください。\n"
"* Table\n"
"\n"
"  列を自動的に調整する、列タイトル付きのシンプルな表形式です。詳しくは "
"\"ShowSimpleTable\" をお読みください。\n"
"* List\n"
"\n"
"  各列に _name_:_value_ の形式で 1 行ごとに名前と値が表示される _リスト_ 形式"
"です。 1 つのデータ行が終わると、次のデータまでの間に空行が出力されます。 詳"
"しくは \"ShowListTable\" をお読みください。\n"
"* HTML\n"
"\n"
"  Web クライアントに表示するのに便利な、 HTML _TABLE_  形式の出力です。詳しく"
"は \"ShowHTMLTable\" をお読みください。\n"
"\n"
"入力には純粋な ASCII テキストのほか、 HTML 要素が内蔵されているテキストでもか"
"まいません。グローバルパラメータ側で設定することができます。"

#. leap/perl-Data-Structure-Util/summary
msgid "Change nature of data within a structure"
msgstr "構造データ内のデータ性質の変更"

#. leap/perl-Data-Structure-Util/description
msgid ""
"'Data::Structure::Util' is a toolbox to manipulate the data inside a data "
"structure. It can process an entire tree and perform the operation requested "
"on each appropriate element.\n"
"\n"
"For example: It can transform all strings within a data structure to utf8 or "
"transform any utf8 string back to the default encoding. It can remove the "
"blessing on any reference. It can collect all the objects or detect if there "
"is a circular reference.\n"
"\n"
"It is written in C for decent speed."
msgstr ""
"'Data::Structure::Util' はデータ構造内のデータを操作するためのツールボックス"
"です。ツリー全体を処理することができるほか、それぞれの適切な要素に対して、何"
"らかの操作を施すことができます。\n"
"\n"
"たとえば: データ構造内の全ての文字列を utf8 に変換したり、任意の utf8 文字列"
"を既定のエンコーディングに変換しなおしたりすることができます。また、任意の参"
"照内にあるブレスを外したりすることもできます。また、循環参照があるような場合"
"でも、全てのオブジェクトを収集したり検出したりすることもできます。\n"
"\n"
"性能面での向上を図る目的で、 C 言語で記述されています。"

#. leap/perl-Data-Tumbler/summary
msgid "Dynamic generation of nested combinations of variants"
msgstr "入れ子になった異形の組み合わせに対する動的な生成"

#. leap/perl-Data-Tumbler/description
msgid ""
"NOTE: This is alpha code and liable to change while it and Test::"
"WriteVariants mature.\n"
"\n"
"The tumble() method calls a sequence of 'provider' code references each of "
"which returns a hash. The first provider is called and then, for each hash "
"item it returns, the tumble() method recurses to call the next provider.\n"
"\n"
"The recursion continues until there are no more providers to call, at which "
"point the consumer code reference is called. Effectively the providers "
"create a tree of combinations and the consumer is called at the leafs of the "
"tree.\n"
"\n"
"If a provider returns no items then that part of the tree is pruned. Further "
"providers, if any, are not called and the consumer is not called.\n"
"\n"
"During a call to tumble() three values are passed down through the tree and "
"into the consumer: path, context, and payload.\n"
"\n"
"The path and context are derived from the names and values of the hashes "
"returned by the providers. Typically the path define the current \"path\" "
"through the tree of combinations.\n"
"\n"
"The providers are passed the current path, context, and payload. The payload "
"is cloned at each level of recursion so that any changes made to it by "
"providers are only visible within the scope of the generated sub-tree.\n"
"\n"
"Note that although the example above shows the path, context and payload as "
"array references, the tumbler code makes no assumptions about them. They can "
"be any kinds of values.\n"
"\n"
"See Test::WriteVariants for a practical example use."
msgstr ""
"注意: これはアルファ版のコードであり、 Test::WriteVariants の成熟と共に仕様変"
"更される可能性があります。\n"
"\n"
"tumble() メソッドは、それぞれがハッシュを返す 'プロバイダ' コード参照を順次呼"
"び出します。最初のプロバイダが呼び出された後、返されたそれぞれのハッシュ項目"
"に対して tumble() メソッドが再帰的に次のプロバイダを呼び出します。\n"
"\n"
"再帰処理は呼び出すべきプロバイダが無くなるまで繰り返され、最後にコンシューマ"
"のコード参照を呼び出します。これにより、プロバイダは組み合わせツリーを効率的"
"に作成し、ツリーの各リーフにあるコンシューマを呼び出すことになります。\n"
"\n"
"プロバイダが何も項目を返さない場合は、そのツリー以下は削除されます。この場合"
"は、それ以降のプロバイダが存在してもそれらは呼び出されず、コンシューマも呼び"
"出されなくなります。\n"
"\n"
"tumble() の呼び出しの際、 3 種類の値 (パス, コンテキスト, ペイロード) がツ"
"リー内を通して受け渡され、コンシューマまで到達します。\n"
"\n"
"パスとコンテキストは、プロバイダが返したハッシュの名前と値から派生して作られ"
"たものです。一般的にはパスは組み合わせツリー内の現在の \"パス\" を表わすもの"
"です。\n"
"\n"
"プロバイダには現在のパスとコンテキスト、ペイロードが渡されます。ペイロードは"
"再帰処理の各レベルで複製されますので、プロバイダが何らかの変更を加えても、生"
"成された同じサブツリー内でしか参照できなくなっています。\n"
"\n"
"なお、上記の例では、パスとコンテキスト、およびペイロードが配列参照として示さ"
"れていますが、 tumbler ではそれらについての前提はありません。それらはどんな種"
"類の値でもかまいません。\n"
"\n"
"実際の使用例について、詳しくは Test::WriteVariants をお読みください。"

#. leap/perl-Data-Uniqid/summary
msgid "Perl extension for simple genrating of unique id's"
msgstr "ユニークな ID をシンプルに生成するための Perl 拡張"

#. leap/perl-Data-Uniqid/description
msgid ""
"Data::Uniqid provides three simple routines for generating unique ids. These "
"ids are coded with a Base62 systen to make them short and handy (e.g. to use "
"it as part of a URL).\n"
"\n"
"  suinqid     genrates a very short id valid only for the localhost and with "
"a     liftime of 1 day\n"
"\n"
"  uniqid     generates a short id valid on the local host\n"
"\n"
"  luniqid     generates a long id valid everywhere and ever"
msgstr ""
"Data::Uniqid は 3 種類のシンプルなユニーク ID 生成ルーチンを提供します。これ"
"らの ID は Base62 システムを利用してエンコードされ、 (たとえば URL の一部とし"
"て使用する用途など) 短く扱いやすい形式になっています。\n"
"\n"
"  suinqid     ローカルホスト内でのみ有効で、 1 日間限定の非常に短い ID を生成"
"します。\n"
"\n"
"  uniqid     ローカルホスト内でのみ有効な短い ID を生成します。\n"
"\n"
"  luniqid     どこででも有効な長い ID を生成します。"

#. leap/perl-Data-Util/summary
msgid "Selection of Utilities for Data and Data Types"
msgstr "データやデータ型に対する様々なユーティリティ集"

#. leap/perl-Data-Util/description
msgid ""
"This module provides utility functions for data and data types, including "
"functions for subroutines and symbol table hashes (stashes).\n"
"\n"
"This module makes for a pure Perl and XS implementation.\n"
"\n"
"However, if you want to use the full capacity of it, we recommend you to opt "
"for the XS backend.\n"
"\n"
"There are many benchmarks in the _DIST-DIR/benchmark/_ directory."
msgstr ""
"このモジュールはデータやデータ型に対するユーティリティ関数を提供するモジュー"
"ルで、サブルーチンやシンボルテーブルハッシュ (stash) 向けの関数を提供していま"
"す。\n"
"\n"
"このモジュールの実装には純粋 Perl と XS の両方が用意されていますが、全ての機"
"能を利用したい場合は XS バックエンドの方をお勧めします。\n"
"\n"
"また、 _DIST-DIR/benchmark/_ ディレクトリには、多数のベンチマーク結果が記録さ"
"れています。"

#. leap/perl-Data-Validate-Domain/summary
msgid "Domain and host name validation"
msgstr "ドメインとホスト名の検証"

#. leap/perl-Data-Validate-Domain/description
msgid ""
"This module offers a few subroutines for validating domain and host names."
msgstr ""
"このモジュールは、ドメイン名やホスト名の検証を行なうためのサブルーチンを提供"
"しています。"

#. leap/perl-Data-Validate-IP/summary
msgid "IPv4 and IPv6 validation methods"
msgstr "IPv4 および IPv6 検証メソッド"

#. leap/perl-Data-Validate-IP/description
msgid ""
"This module provides a number IP address validation subs that both validate "
"and untaint their input. This includes both basic validation ('is_ipv4()' "
"and 'is_ipv6()') and special cases like checking whether an address belongs "
"to a specific network or whether an address is public or private (reserved)."
msgstr ""
"このモジュールは、 IP アドレスの検証と入力の整形を行なうためのサブルーチンを"
"提供しています。基本的な検証機能 ('is_ipv4()' および 'is_ipv6()') のほか、特"
"定のネットワーク内に属するかどうかのチェックや、アドレスがパブリックなものか"
"プライベート (予約済み) なものかを調べる機能も用意されています。"

#. leap/perl-Data-Visitor/summary
msgid "Visitor style traversal of Perl data structures"
msgstr "Perl のデータ構造に対する見やすい出力"

#. leap/perl-Data-Visitor/description
msgid ""
"This module is a simple visitor implementation for Perl values.\n"
"\n"
"It has a main dispatcher method, 'visit', which takes a single perl value "
"and then calls the methods appropriate for that value.\n"
"\n"
"It can recursively map (cloning as necessary) or just traverse most "
"structures, with support for per object behavior, circular structures, "
"visiting tied structures, and all ref types (hashes, arrays, scalars, code, "
"globs).\n"
"\n"
"Data::Visitor is meant to be subclassed, but also ships with a callback "
"driven subclass, Data::Visitor::Callback."
msgstr ""
"このモジュールは、 Perl の値を見やすく表示するための実装です。\n"
"\n"
"メインのメソッドとして 'visit' が用意されていますが、このメソッドは単一の "
"Perl 値をパラメータとして受け付け、その値に対して適切なメソッドを呼び出しま"
"す。\n"
"\n"
"多くの構造体に対して、再帰的にマップ (必要に応じて複製を作成) するか、純粋に"
"中身を表示します。 Perl のオブジェクトや循環構造、タイ構造やすべての参照タイ"
"プ (ハッシュ、配列、スカラー、コード、グロブ) にも対応しています。\n"
"\n"
"Data::Visitor はサブクラス化する目的で作られていますが、コールバック関数を"
"ベースにしたサブクラス Data::Visitor::Callback も用意されています。"

#. leap/perl-Date-Calc/summary
msgid "Gregorian calendar date calculations"
msgstr "グレゴリオ暦カレンダー日付計算"

#. leap/perl-Date-Calc/description
msgid ""
"* *\n"
"\n"
"  'use Date::Calc qw( Days_in_Year Days_in_Month ... );' \n"
"* *"
msgstr ""
"* *\n"
"\n"
"  'use Date::Calc qw( Days_in_Year Days_in_Month ... );'\n"
"* *"

#. leap/perl-Date-Holidays-CZ/summary
msgid "Determine Czech holidays"
msgstr "チェコにおける祝日の判断"

#. leap/perl-Date-Holidays-CZ/description
msgid ""
"This module exports a single function named *holidays()* which returns a "
"list of Czech holidays in a given year."
msgstr ""
"このモジュールは、指定した年に対するチェコの祝日を返す *holydays()* 関数を公"
"開しています。"

#. leap/perl-Date-Manip/summary
msgid "Date manipulation routines"
msgstr "日付操作ルーチン"

#. leap/perl-Date-Manip/description
msgid ""
"Date::Manip is a series of modules designed to make any common date/time "
"operation easy to do. Operations such as comparing two times, determining a "
"date a given amount of time from another, or parsing international times are "
"all easily done. It deals with time as it is used in the Gregorian calendar "
"(the one currently in use) with full support for time changes due to "
"daylight saving time.\n"
"\n"
"From the very beginning, the main focus of Date::Manip has been to be able "
"to do ANY desired date/time operation easily. Many other modules exist which "
"may do a subset of these operations quicker or more efficiently, but no "
"other module can do all of the operations available in Date::Manip.\n"
"\n"
"Date::Manip has functionality to work with several fundamental types of "
"data. \n"
"* *dates*\n"
"\n"
"The word date is used extensively here and is somewhat misleading. In Date::"
"Manip, a date consists of three pieces of information: a calendar date "
"(year, month, day), a time of day (hour, minute, second), and time zone "
"information. Calendar dates and times are fully handled. Time zones are "
"handled as well, but depending on how you use Date::Manip, there may be some "
"limitations as discussed below. \n"
"* *delta*\n"
"\n"
"A delta is an amount of time (i.e. the amount of time between two different "
"dates). Think of it as the duration of an event or the amount of time "
"between two dates.\n"
"\n"
"A delta refers only to an amount of time. It includes no information about a "
"starting or ending date/time. Most people will think of a delta as an amount "
"of time, but the term 'time' is already used so much in this module that I "
"didn't want to use it here in order to avoid confusion. \n"
"* *recurrence*\n"
"\n"
"A recurring event is something which occurs on a regular recurring basis. \n"
"* *holidays* and *events*\n"
"\n"
"Holidays and events are basically named dates or recurrences.\n"
"\n"
"Among other things, Date::Manip allow you to: \n"
"* ***\n"
"\n"
"Enter a date in practically any format you choose. \n"
"* ***\n"
"\n"
"Compare two dates, entered in widely different formats to determine which is "
"earlier. \n"
"* ***\n"
"\n"
"Extract any information you want from a date using a format string similar "
"to the Unix date command. \n"
"* ***\n"
"\n"
"Determine the amount of time between two dates, or add an amount of time (a "
"delta) to a date to get a second date. \n"
"* ***\n"
"\n"
"Work with dates with dates using international formats (foreign month names, "
"12/10/95 referring to October rather than December, etc.). \n"
"* ***\n"
"\n"
"Convert dates from one timezone to another. \n"
"* ***\n"
"\n"
"To find a list of dates where a recurring event happens.\n"
"\n"
"Each of these tasks is trivial (one or two lines at most) with this package."
msgstr ""
"Date::Manip は、一般的な日付／時刻操作を簡単に行なうために設計されたモジュー"
"ル集です。操作としては 2 つの時刻に対する比較のほか、一方と他方の時刻の差を計"
"算や協定世界時の処理などを、簡単に行なうことができます。時刻はグレゴリオ暦(現"
"在使用されている暦のうちの 1 つ) として扱う仕組みで、サマータイムなどの調整に"
"も完全対応しています。\n"
"\n"
"開発当初の段階から、  Date::Manip は必要な日付／時刻処理を簡単に行なうことが"
"できるようになっています。既にある他の多くのモジュールは、これらの処理をより"
"素早く、効率的に処理できる仕組みを備えていますが、これらは Date::Manip にある"
"ような処理の全てを実行できわけではありません。\n"
"\n"
"Date::Manip には様々な種類のデータを処理するための機能が備わっています。\n"
"* *日付*\n"
"\n"
"日付という言葉は幅広い意味で使用されているもので、よく間違えられる用語でもあ"
"ります。 Date::Manip では、日付には 3 種類の情報が含まれています: カレンダー"
"の日付、時刻、タイムゾーン情報です。カレンダーの日付と時刻は完全に処理するこ"
"とができます。タイムゾーンについても同様ですが、Date::Manip の使い方によって"
"は、下記に示すとおりいくつかの制限があります。\n"
"* *差分*\n"
"\n"
"差分とは時刻の量を表わした数値 (2 つの異なる日付の差) を意味します。差分は時"
"刻の量のみを意味する言葉で、開始や終了の日時を持たない値になっています。多く"
"の人々にとって、差分とは時刻の量を意味するものですが、 '時刻' という用語は既"
"にそのモジュール内で多数使用されているため、混乱を防ぐために別の言葉を用意し"
"て説明しています。\n"
"* *繰り返し*\n"
"\n"
"一定の周期で発生するイベントを意味します。\n"
"\n"
"* *祝日* と *イベント*\n"
"\n"
"祝日とイベントは、日付と周期に名前が付けられたものを意味します。\n"
"\n"
"それ以外にも、 Date::Manip では下記のようなことを実施することができます:\n"
"* ***\n"
"\n"
"事実上、ほぼ全ての書式で自由に日付入力を行なうことができます。\n"
"* ***\n"
"\n"
"それぞれ大きく異なる書式の 2 つの日付を比較し、どちらが先の日付なのかを簡単に"
"判断することができます。\n"
"* ***\n"
"\n"
"Unix の date コマンドのように、書式文字列を利用して、日付から必要な情報を抽出"
"することができます。\n"
"* ***\n"
"\n"
"2 つの日付の差を計算することができるほか、日付に値を足してもう 1 つの日付を作"
"成することができます。\n"
"* ***\n"
"\n"
"国際化された書式による日付処理 (月名称を含む。 12/10/95 は 12 月ではなく 10 "
"月を意味するものとして扱います) 。\n"
"* ***\n"
"\n"
"タイムゾーン間の日付の変換\n"
"* ***\n"
"\n"
"繰り返しイベントが発生する日付の一覧表示\n"
"\n"
"パッケージ内では、それぞれの処理は平凡な (多くても数行程度) 記述で作成されて"
"います。"

#. leap/perl-Date-Simple/summary
msgid "a simple date object"
msgstr "シンプルな日付オブジェクト"

#. leap/perl-Date-Simple/description
msgid ""
"Dates are complex enough without times and timezones. This module may be "
"used to create simple date objects. It handles: \n"
"* Validation.\n"
"\n"
"  Reject 1999-02-29 but accept 2000-02-29. \n"
"* Interval arithmetic.\n"
"\n"
"  How many days were between two given dates? What date comes N days after   "
"today? \n"
"* Day-of-week calculation.\n"
"\n"
"  What day of the week is a given date? \n"
"* Transparent date formatting.\n"
"\n"
"  How should a date object be formatted.\n"
"\n"
"It does *not* deal with hours, minutes, seconds, and time zones.\n"
"\n"
"A date is uniquely identified by year, month, and day integers within valid "
"ranges. This module will not allow the creation of objects for invalid "
"dates. Attempting to create an invalid date will return undef. Month "
"numbering starts at 1 for January, unlike in C and Java. Years are 4-digit.\n"
"\n"
"Gregorian dates up to year 9999 are handled correctly, but we rely on Perl's "
"builtin 'localtime' function when the current date is requested. On some "
"platforms, 'localtime' may be vulnerable to rollovers such as the Unix "
"'time_t' wraparound of 18 January 2038.\n"
"\n"
"Overloading is used so you can compare or subtract two dates using standard "
"numeric operators such as '==', and the sum of a date object and an integer "
"is another date object.\n"
"\n"
"Date::Simple objects are immutable. After assigning '$date1' to '$date2', no "
"change to '$date1' can affect '$date2'. This means, for example, that there "
"is nothing like a 'set_year' operation, and '$date++' assigns a new object "
"to '$date'.\n"
"\n"
"This module contains various undocumented functions. They may not be "
"available on all platforms and are likely to change or disappear in future "
"releases. Please let the author know if you think any of them should be "
"public."
msgstr ""
"日付は時刻やタイムゾーン情報が無い場合、複雑な存在です。このモジュールは、シ"
"ンプルな日付オブジェクトを作成する際に使用します。たとえば下記のような機能が"
"あります:\n"
"* 検証機能\n"
"\n"
"  1999-02-29 は拒否しますが、 2000-02-29 は受け入れます。\n"
"* 加減算機能\n"
"\n"
"  2 つの日付間の日数や N 日後の日付などを計算することができます。\n"
"* 曜日計算機能\n"
"\n"
"  指定した日付の曜日を算出することができます。\n"
"* 透過的な日付の書式化\n"
"\n"
"  日付をどのように表現するかを指定することができます。\n"
"\n"
"なお、時・分・秒の処理や、タイムゾーンの処理は用意されて *いません* 。\n"
"\n"
"日付は年月日を正しく設定することで入力することができます。正しくない日付を指"
"定した場合、このモジュールは受け入れを拒否し、 undef を返します。また、月は "
"C や Java とは異なり、 1 (1 月) から始まります。年は 4 桁を使用します。\n"
"\n"
"グレゴリオ暦は 9999 年までを正常に処理することができますが、現在の日時を取得"
"する際には Perl の 'localtime' 関数を使用しています。そのため、プラットフォー"
"ムによっては 2038 年 1 月 18 日以降 (つまり Unix 時間である 'time_t' の桁あふ"
"れ) の日付を処理できないことがあります。\n"
"\n"
"また、 2 つの日付の比較や減算には標準の演算子 ('==' など) を使用することがで"
"きるほか、日付オブジェクトに加算演算した場合も、日付オブジェクトを返すことが"
"できます。\n"
"\n"
"なお、 Date::Simple オブジェクトは値が不変であり、 '$date1' を '$date2' に代"
"入したあと '$date1' を変更しても、 '$date2' には影響を与えません。また、たと"
"えば 'set_year' のような操作が存在しませんし、 '$date++' のような処理を行なっ"
"た場合は、 '$date' に新しいオブジェクトが割り当てられます。\n"
"\n"
"このモジュールには様々な文書化されていない関数が含まれていますが、これらはす"
"べてのプラットフォームで利用可能なものであるとは限りませんし、また将来的に変"
"更されたり廃止されたりする可能性もあります。文書化されていない関数のうち、公"
"開すべきであるとお考えのものがあれば、著者までご連絡ください。"

#. leap/perl-Date-Tiny/summary
#. leap/perl-DateTime-Tiny/summary
msgid "Date Object, with As Little Code As Possible"
msgstr "できる限り少ない行数で作成された日付オブジェクト"

#. leap/perl-Date-Tiny/description
msgid ""
"*Date::Tiny* is a member of the DateTime::Tiny suite of time modules.\n"
"\n"
"It implements an extremely lightweight object that represents a date, "
"without any time data."
msgstr ""
"*Date::Tiny* は時刻モジュールの DateTime::Tiny スイートのメンバーです。\n"
"\n"
"時刻無しで日付だけを表わす、非常に軽量なオブジェクトを実装しています。"

#. leap/perl-DateTime/summary
msgid "Date and Time Object for Perl"
msgstr "Perl 向け日時オブジェクト"

#. leap/perl-DateTime/description
msgid ""
"DateTime is a class for the representation of date/time combinations, and is "
"part of the Perl DateTime project. For details on this project please see "
"http://datetime.perl.org/. The DateTime site has a FAQ which may help answer "
"many \"how do I do X?\" questions. The FAQ is at http://datetime.perl.org/"
"wiki/datetime/page/FAQ.\n"
"\n"
"It represents the Gregorian calendar, extended backwards in time before its "
"creation (in 1582). This is sometimes known as the \"proleptic Gregorian "
"calendar\". In this calendar, the first day of the calendar (the epoch), is "
"the first day of year 1, which corresponds to the date which was "
"(incorrectly) believed to be the birth of Jesus Christ.\n"
"\n"
"The calendar represented does have a year 0, and in that way differs from "
"how dates are often written using \"BCE/CE\" or \"BC/AD\".\n"
"\n"
"For infinite datetimes, please see the DateTime::Infinite module."
msgstr ""
"DateTime は日付と時刻の組み合わせを表現するためのクラスで、 Perl の DateTime "
"プロジェクトの一部です。このプロジェクトの詳細については、 http://datetime."
"perl.org/ をご覧ください。 DateTime のサイトには、 \"これをやるにはどうすれ"
"ば？\" のような質問を含む FAQ が公開されています。 FAQ は http://datetime."
"perl.org/wiki/datetime/page/FAQ にあります。\n"
"\n"
"このクラスはグレゴリオ暦を表しているものですが、その暦が作られる (1582 年) よ"
"りも前の日時も表現することができます。これは \"先発グレゴリオ暦\" としても知"
"られています。この暦では、カレンダーの最初の日は西暦 1 年の最初の日となり、こ"
"れはイエスキリストの誕生日として (間違って) 信じられてきた日にあたります。\n"
"\n"
"なお、この暦には西暦 0 年も規定されていますが、 \"BCE/CE\" や \"BC/AD\" を利"
"用した日付形式とは異なるものになります。\n"
"\n"
"無制限の日付表現については DateTime::Infinite モジュールをご覧ください。"

#. leap/perl-DateTime-Calendar-Julian/summary
msgid "Dates in the Julian calendar"
msgstr "ユリウス暦日付のモジュール"

#. leap/perl-DateTime-Calendar-Julian/description
msgid ""
"DateTime::Calendar::Julian implements the Julian Calendar. This module "
"implements all methods of DateTime; see the DateTime(3) manpage for all "
"methods."
msgstr ""
"DateTime::Calendar::Julian は、ユリウス暦カレンダーを実装するモジュールです。"
"このモジュールは DateTime の全てのメソッドを実装しています。全てのメソッドに"
"ついて、詳しくは DateTime(3) マニュアルページをお読みください。"

#. leap/perl-DateTime-Calendar-Mayan/summary
msgid "The Mayan Long Count, Haab, and Tzolkin calendars"
msgstr "マヤ長期暦／ハアブ暦／ツォルキンカレンダー"

#. leap/perl-DateTime-Calendar-Mayan/description
msgid ""
"An implementation of the Mayan Long Count, Haab, and Tzolkin calendars as "
"defined in \"Calendrical Calculations The Millennium Edition\". Supplemented "
"by \"Frequently Asked Questions about Calendars\".\n"
"\n"
"Author:\n"
"-------     Joshua Hoblitt <jhoblitt@cpan.org>"
msgstr ""
"\"Calendrical Calculations The Millennium Edition\" で定義されているマヤ長期"
"暦／ハアブ暦／ツォルキンカレンダーの実装です。詳しくは \"Frequently Asked "
"Questions about Calendars\" をお読みください。\n"
"\n"
"作者:\n"
"-------     Joshua Hoblitt <jhoblitt@cpan.org>"

#. leap/perl-DateTime-Format-Builder/summary
msgid "Create DateTime parser classes and objects."
msgstr "DateTime パーサクラスとオブジェクトの作成"

#. leap/perl-DateTime-Format-Builder/description
msgid ""
"DateTime::Format::Builder creates DateTime parsers. Many string formats of "
"dates and times are simple and just require a basic regular expression to "
"extract the relevant information. Builder provides a simple way to do this "
"without writing reams of structural code.\n"
"\n"
"Builder provides a number of methods, most of which you'll never need, or at "
"least rarely need. They're provided more for exposing of the module's "
"innards to any subclasses, or for when you need to do something slightly "
"beyond what I expected.\n"
"\n"
"This creates the end methods. Coderefs die on bad parses, return 'DateTime' "
"objects on good parse."
msgstr ""
"DateTime::Format::Builder は DateTime のパーサを作成します。日付や時刻の文字"
"列書式はほとんどのものがシンプルで、基本的な正規表現を利用すれば関連する情報"
"が得られるためです。 Builder では、実際の構造体のコードを記述することなく、こ"
"のようなクラスを作成するためのシンプルな方法を提供します。\n"
"\n"
"Builder には多数のメソッドが用意されていますが、多くのものは全く必要としませ"
"んし、あったとしても稀な場合だけです。これらはモジュールの内部状況を任意のサ"
"ブクラスに開示するためのものであるほか、我々の考えている範囲を超えたモジュー"
"ルを作成したいような場合に必要となるものです。\n"
"\n"
"このクラスはエンドメソッドを作成します。処理が失敗するとコード参照が失敗し、"
"成功すると 'DateTime' オブジェクトが返ります。"

#. leap/perl-DateTime-Format-DateParse/summary
msgid "Parses Date::Parse compatible formats"
msgstr "Date::Parse 互換形式の処理"

#. leap/perl-DateTime-Format-DateParse/description
msgid ""
"This module is a compatibility wrapper around Date::Parse.\n"
"\n"
"  Author:\tJoshua Hoblitt (JHOBLITT) <jhoblitt@cpan.org>"
msgstr ""
"このモジュールは、 Date::Parse に対する互換ラッパーです。\n"
"\n"
"  Author:\tJoshua Hoblitt (JHOBLITT) <jhoblitt@cpan.org>"

#. leap/perl-DateTime-Format-Flexible/summary
msgid ""
"DateTime::Format::Flexible - Flexibly parse strings and turn them into D[cut]"
msgstr "DateTime::Format::Flexible - 文字列の柔軟な処理と変換"

#. leap/perl-DateTime-Format-Flexible/description
msgid ""
"If you have ever had to use a program that made you type in the date a "
"certain way and thought \"Why can't the computer just figure out what date I "
"wanted?\", this module is for you.\n"
"\n"
"_DateTime::Format::Flexible_ attempts to take any string you give it and "
"parse it into a DateTime object."
msgstr ""
"プログラム内で日時の入力を行なうような場合、このような疑問を持ったことはあり"
"ませんか？ \"何故コンピュータは希望する書式で日時を受け付けてくれないのだろ"
"う？\" と。このモジュールはそのような用途に対応しています。\n"
"\n"
"_DateTime::Format::Flexible_ は任意の文字列を受け付けて、それを DateTime オブ"
"ジェクトに変換します。"

#. leap/perl-DateTime-Format-ISO8601/summary
msgid "Parses ISO8601 formats"
msgstr "ISO8601 形式の処理"

#. leap/perl-DateTime-Format-ISO8601/description
msgid ""
"Parses almost all ISO8601 date and time formats. ISO8601 time-intervals will "
"be supported in a later release."
msgstr ""
"ほぼ全ての ISO8601 日付／時刻形式を処理します。 ISO8601 での時間差分も将来の"
"リリースでサポートされる予定です。"

#. leap/perl-DateTime-Format-Mail/summary
msgid "Convert between DateTime and RFC2822/822 formats"
msgstr "DateTime と RFC2822/822 形式の相互変換"

#. leap/perl-DateTime-Format-Mail/description
msgid ""
"RFCs 2822 and 822 specify date formats to be used by email. This module "
"parses and emits such dates.\n"
"\n"
"RFC2822 (April 2001) introduces a slightly different format of date than "
"that used by RFC822 (August 1982). The main correction is that the preferred "
"format is more limited, and thus easier to parse programmatically.\n"
"\n"
"Despite the ease of generating and parsing perfectly valid RFC822 and "
"RFC2822 people still get it wrong. So this module provides four things for "
"those handling mail dates: \n"
"* 1\n"
"\n"
"A strict parser that will only accept RFC2822 dates, so you can see where "
"you're right. \n"
"* 2\n"
"\n"
"A strict formatter, so you can generate the right stuff to begin with. \n"
"* 3\n"
"\n"
"A _loose_ parser, so you can take the misbegotten output from other programs "
"and turn it into something useful. This includes various minor errors as "
"well as some somewhat more bizarre mistakes. The file _t/sample_dates_ in "
"this module's distribution should give you an idea of what's valid, while _t/"
"invalid.t_ should do the same for what's not. Those regarded as invalid are "
"just a bit *too* strange to allow. \n"
"* 4\n"
"\n"
"Interoperation with the rest of the DateTime suite. These are a collection "
"of modules to handle dates in a modern and accurate fashion. In particular, "
"they make it trivial to parse, manipulate and then format dates. Shifting "
"timezones is a doddle, and converting between formats is a cinch.\n"
"\n"
"As a future direction, I'm contemplating an even stricter parser that will "
"only accept dates with no obsolete elements."
msgstr ""
"RFCs 2822 および 822 では、電子メールで使用する日時の書式を規定しています。こ"
"のモジュールはそのような日時処理を行ないます。\n"
"\n"
"RFC2822 (April 2001) では RFC822 (August 1982) とは少し異なる日時書式を導入し"
"ています。主に書式の厳格化であることから、これによって処理を簡易化できるよう"
"になっています。\n"
"\n"
"正しい RFC822, RFC 2822 書式であれば、生成も処理も完全かつ簡易に行なうことが"
"できますが、まだ世の中には間違ったものが多数存在しています。そのため、このモ"
"ジュールは 4 種類の方式を組み込むことで、それらを処理できるようにしていま"
"す: \n"
"* 1\n"
"\n"
"RFC2822 の日時書式を厳格に処理するパーサ。正しい日時文字列を使用する場合は、"
"このパーサをお使いください。\n"
"* 2\n"
"\n"
"\n"
"比較的厳しめのパーサ。これでも正しく処理を行なうことができます。\n"
"* 3\n"
"\n"
"緩いパーサ。他のプログラムが出力した誤った書式を受け付け、扱いやすい形式に変"
"換します。軽微な問題であればそのまま処理を行なうことができるほか、奇妙な書式"
"でも受け付けることができるようになっています。配布物に含まれるモジュール内の "
"_t/sample_dates_ ファイルには、正しい書式の例が示されていますし、 _t/invalid."
"t_ では誤った書式が示されています。後者はあまりにも奇妙すぎる書式であり、受け"
"入れられないものを表わしています。\n"
"* 4\n"
"\n"
"残りの DateTime スイートとの統合。これらは現代的で正確な日時処理機能を提供し"
"ます。特に日時の処理や操作、書式化などの機能が用意されています。タイムゾーン"
"の切り替えも簡単に行なうことができます。\n"
"\n"
"将来的には廃止された要素を含まない厳格なパーサにしていくことを予定していま"
"す。"

#. leap/perl-DateTime-Format-MySQL/summary
msgid "Parse and format MySQL dates and times"
msgstr "MySQL の日付と時刻の処理および書式化"

#. leap/perl-DateTime-Format-MySQL/description
msgid ""
"This module understands the formats used by MySQL for its DATE, DATETIME, "
"TIME, and TIMESTAMP data types. It can be used to parse these formats in "
"order to create DateTime objects, and it can take a DateTime object and "
"produce a string representing it in the MySQL format."
msgstr ""
"このモジュールは、 MySQL の DATE, DATETIME, TIME, TIMESTAMP の各データタイプ"
"で使用される形式を解釈することができます。 DateTime オブジェクトを作成する際"
"にこれらの形式を利用することができるほか、 MySQL 形式の文字列で DateTime オブ"
"ジェクトを出力することもできます。"

#. leap/perl-DateTime-Format-Pg/summary
msgid "Parse and format PostgreSQL dates and times"
msgstr "PostgreSQL の日付と時刻の処理および書式化"

#. leap/perl-DateTime-Format-Pg/description
msgid ""
"This module understands the formats used by PostgreSQL for its DATE, TIME, "
"TIMESTAMP, and INTERVAL data types. It can be used to parse these formats in "
"order to create 'DateTime' or 'DateTime::Duration' objects, and it can take "
"a 'DateTime' or 'DateTime::Duration' object and produce a string "
"representing it in a format accepted by PostgreSQL."
msgstr ""
"このモジュールは、 PostgreSQL の DATE, TIME, TIMESTAMP, INTERVAL の各データタ"
"イプで使用される形式を解釈することができます。 'DateTime' や 'DateTime::"
"Duration' オブジェクトを作成する際にこれらの形式を利用することができるほか、 "
"PostgreSQL 形式の文字列で 'DateTime'  や 'DateTime::Duration' オブジェクトを"
"出力することもできます。"

#. leap/perl-DateTime-Format-SQLite/summary
msgid "Parse and format SQLite dates and times"
msgstr "SQLite の日付と時刻の処理および書式化"

#. leap/perl-DateTime-Format-SQLite/description
msgid ""
"This module understands the formats used by SQLite for its 'date', "
"'datetime' and 'time' functions. It can be used to parse these formats in "
"order to create the DateTime manpage objects, and it can take a DateTime "
"object and produce a timestring accepted by SQLite. \n"
"*NOTE:* SQLite does not have real date/time types but stores everything as "
"strings. This module deals with the date/time strings as understood/returned "
"by SQLite's 'date', 'time', 'datetime', 'julianday' and 'strftime' SQL "
"functions. You will usually want to store your dates in one of these formats."
msgstr ""
"このモジュールは、 SQLite の 'date', 'datetime', 'time' の各関数で使用される"
"形式を解釈することができます。 DateTime オブジェクトを作成する際にこれらの形"
"式を利用することができるほか、 SQLite 形式の文字列で DateTime オブジェクトを"
"出力することもできます。\n"
"*注意:* SQLite は実際には日付や時刻をその型として扱うことはなく、単純に文字列"
"として扱います。このモジュールは、 SQLite の 'date', 'time', 'datetime', "
"'julianday', 'strftime' の各 SQL 関数で指定または返され、保存することのできる"
"文字列を扱うことができます。"

#. leap/perl-DateTime-Format-Strptime/summary
msgid "Parse and format strp and strf time patterns"
msgstr "strp, strf タイムパターンの処理および書式化"

#. leap/perl-DateTime-Format-Strptime/description
msgid ""
"This module implements most of 'strptime(3)', the POSIX function that is the "
"reverse of 'strftime(3)', for 'DateTime'. While 'strftime' takes a "
"'DateTime' and a pattern and returns a string, 'strptime' takes a string and "
"a pattern and returns the 'DateTime' object associated."
msgstr ""
"このモジュールは、 'strftime(3)' の逆の処理を行なう POSIX 関数 'strptime(3)' "
"の機能のほとんどを実装しています。 'strftime' では 'DateTime' 型のパラメータ"
"を受け付けて文字列を返しますが、 'strptime' では文字列とパターンをパラメータ"
"として受け付けて 'DateTime' オブジェクトを返します。"

#. leap/perl-DateTime-Format-W3CDTF/summary
msgid "Parse and format W3CDTF datetime strings"
msgstr "W3CDTF の datetime 文字列の処理および書式化"

#. leap/perl-DateTime-Format-W3CDTF/description
msgid ""
"This module understands the W3CDTF date/time format, an ISO 8601 profile, "
"defined at http://www.w3.org/TR/NOTE-datetime. This format as the native "
"date format of RSS 1.0.\n"
"\n"
"It can be used to parse these formats in order to create the appropriate "
"objects."
msgstr ""
"このモジュールは ISO 8601 プロファイルである W3CDTF の日時書式 (http://www."
"w3.org/TR/NOTE-datetime) を理解します。この書式は RSS 1.0 ネイティブの日付書"
"式です。\n"
"\n"
"このモジュールは、適切なオブジェクトを作成するための書式処理に使用することが"
"できます。"

#. leap/perl-DateTime-Locale/summary
msgid "Localization support for DateTime.pm"
msgstr "DateTime.pm 向けローカライズサポート"

#. leap/perl-DateTime-Locale/description
msgid ""
"DateTime::Locale is primarily a factory for the various locale subclasses. "
"It also provides some functions for getting information on all the available "
"locales.\n"
"\n"
"If you want to know what methods are available for locale objects, then "
"please read the 'DateTime::Locale::FromData' documentation."
msgstr ""
"DateTime::Locale は主に様々なロケールサブクラス向けのファクトリとなるクラスで"
"す。利用可能なすべてのロケールに対して、情報を取得するためのいくつかの関数が"
"提供されています。\n"
"\n"
"ロケールオブジェクトでどのようなメソッドを利用できるのかについては、 "
"'DateTime::Locale::FromData' のドキュメンテーションをお読みください。"

#. leap/perl-DateTime-TimeZone/summary
msgid "Time zone object base class and factory"
msgstr "タイムゾーンオブジェクトのベースクラスとファクトリ"

#. leap/perl-DateTime-TimeZone/description
msgid ""
"This class is the base class for all time zone objects. A time zone is "
"represented internally as a set of observances, each of which describes the "
"offset from GMT for a given time period.\n"
"\n"
"Note that without the DateTime module, this module does not do much. It's "
"primary interface is through a DateTime object, and most users will not need "
"to directly use 'DateTime::TimeZone' methods."
msgstr ""
"このクラスはすべてのタイムゾーンオブジェクトに対するベースクラスです。タイム"
"ゾーンは内部的には慣例集として表されるもので、各時刻を GMT からのオフセットと"
"して表記しています。\n"
"\n"
"なお、 DateTime モジュールがない場合、本モジュールは多くのことを実現できませ"
"ん。主なインターフェイスは DateTime オブジェクトを通して利用する仕組みである"
"ため、多くのユーザは 'DateTime::TimeZone' のメソッドを直接使用する必要はない"
"はずです。"

#. leap/perl-DateTime-Tiny/description
msgid ""
"*DateTime::Tiny* is a most prominent member of the DateTime::Tiny suite of "
"time modules.\n"
"\n"
"It implements an extremely lightweight object that represents a datetime."
msgstr ""
"*DateTime::Tiny* は時刻モジュールである DateTime::Tiny スイートの中でもっとも"
"よく知られたメンバーです。\n"
"\n"
"日付と時刻を表わす非常に軽量なオブジェクトを実装しています。"

#. leap/perl-Debug-Trace/summary
msgid "Perl extension to trace subroutine calls"
msgstr "サブルーチンの呼び出しを追跡するための Perl 拡張"

#. leap/perl-Debug-Trace/description
msgid ""
"Debug::Trace instruments subroutines to provide tracing information upon "
"every call and return.\n"
"\n"
"Using Debug::Trace does not require any changes to your sources. Most often, "
"it will be used from the command line:\n"
"\n"
"  perl -MDebug::Trace=foo,bar yourprogram.pl\n"
"\n"
"This will have your subroutines foo() and bar() printing call and return "
"information.\n"
"\n"
"Subroutine names may be fully qualified to denote subroutines in other "
"packages than the default main::.\n"
"\n"
"By default, the trace information is output using the standard warn() "
"function."
msgstr ""
"Debug::Trace はサブルーチンの呼び出しとその戻りについて、追跡情報を作成するサ"
"ブルーチンを提供します。\n"
"\n"
"Debug::Trace を使用する場合であっても、ソースコードを変更する必要はありませ"
"ん。ほとんどの場合、コマンドラインから使用することができます:\n"
"  perl -MDebug::Trace=foo,bar yourprogram.pl\n"
"\n"
"上記のように実行することにより、サブルーチン foo(), bar() に対して呼び出しと"
"戻りが表示されるようになります。\n"
"\n"
"サブルーチン名は、既定の main:: 以外のパッケージ内のものを表わす場合は、完全"
"修飾形で表示されます。\n"
"\n"
"また、既定ではトレース情報を標準の warn() 関数を利用して表示します。"

#. leap/perl-Declare-Constraints-Simple/summary
msgid "Declarative Validation of Data Structures"
msgstr "データ構造の宣言的な検証"

#. leap/perl-Declare-Constraints-Simple/description
msgid ""
"The main purpose of this module is to provide an easy way to build a profile "
"to validate a data structure. It does this by giving you a set of "
"declarative keywords in the importing namespace."
msgstr ""
"このモジュールの主な目的は、データ構造を検証するためのプロファイルの構築につ"
"いて、簡易な方法を提供することです。ネームスペースをインポートするのに、宣言"
"的なキーワードセットを提供して実現しています。"

#. leap/perl-Devel-Caller/summary
msgid "meatier versions of C<caller>"
msgstr "C<caller> の強化版"

#. leap/perl-Devel-Caller/description
msgid ""
"* caller_cv($level)\n"
"\n"
"  'caller_cv' gives you the coderef of the subroutine being invoked at the   "
"call frame indicated by the value of $level \n"
"* caller_args($level)\n"
"\n"
"  Returns the arguments passed into the caller at level $level \n"
"* caller_vars( $level, $names )   =item called_with($level, $names)\n"
"\n"
"  'called_with' returns a list of references to the original arguments to   "
"the subroutine at $level. if $names is true, the names of the variables   "
"will be returned instead\n"
"\n"
"  constants are returned as 'undef' in both cases \n"
"* called_as_method($level)\n"
"\n"
"  'called_as_method' returns true if the subroutine at $level was called "
"as   a method."
msgstr ""
"* caller_cv($level)\n"
"\n"
"  'caller_cv' は、指定した値で示されるコールフレームに対して、そこで実行され"
"るサブルーチンのコード参照を返します。\n"
"* caller_args($level)\n"
"\n"
"  $level で指定したレベルの呼び出しに対して、渡されるパラメータを返します。\n"
"* caller_vars( $level, $names )   =item called_with($level, $names)\n"
"\n"
"  'called_with' は、 $level で指定されたサブルーチンに対して、その元のパラ"
"メータに対する参照リストを返します。 $names が true の場合は、変数名の一覧が"
"返されます。\n"
"\n"
"  いずれの場合も、定数の場合は 'undef' が返ります。\n"
"* called_as_method($level)\n"
"\n"
"  'called_as_method' は、 $level で指定されたサブルーチンがメソッドとして呼び"
"出される場合、 true を返します。"

#. leap/perl-Devel-CheckBin/summary
msgid "Check That a Command Is Available"
msgstr "コマンドが利用可能かどうかのチェック"

#. leap/perl-Devel-CheckBin/description
msgid ""
"Devel::CheckBin is a perl module that checks whether a particular command is "
"available."
msgstr ""
"Devel::CheckBin は、特定のコマンドが利用できるかどうかをチェックする Perl モ"
"ジュールです。"

#. leap/perl-Devel-CheckCompiler/summary
msgid "Check the compiler's availability"
msgstr "コンパイラが利用できるかどうかのチェック"

#. leap/perl-Devel-CheckCompiler/description
msgid "Devel::CheckCompiler is checker for compiler's availability."
msgstr ""
"Devel::CheckCompiler は、コンパイラが利用できるかどうかをチェックします。"

#. leap/perl-Devel-CheckLib/summary
msgid "Check That a Library Is Available"
msgstr "ライブラリが利用可能かどうかのチェック"

#. leap/perl-Devel-CheckLib/description
msgid ""
"Devel::CheckLib is a perl module that checks whether a particular C library "
"and its headers are available."
msgstr ""
"Devel::CheckLib は、特定の C ライブラリとそのヘッダが存在するかどうかをチェッ"
"クするための Perl モジュールです。"

#. leap/perl-Devel-CheckOS/summary
msgid "Check what OS we're running on"
msgstr "実行中の OS の判断"

#. leap/perl-Devel-CheckOS/description
msgid ""
"A learned sage once wrote on IRC:\n"
"\n"
"   $^O is stupid and ugly, it wears its pants as a hat\n"
"\n"
"Devel::CheckOS provides a more friendly interface to $^O, and also lets you "
"check for various OS \"families\" such as \"Unix\", which includes things "
"like Linux, Solaris, AIX etc.\n"
"\n"
"It spares perl the embarrassment of wearing its pants on its head by "
"covering them with a splendid Fedora."
msgstr ""
"かつて知識のある聖人は IRC で下記のように評したことがありました:\n"
"\n"
"   $^O は愚かで見にくい。まるで頭にパンツを被っているかのようだ。\n"
"\n"
"Devel::CheckOS は $^O に対するよりわかりやすいインターフェイスを提供し、 "
"\"Unix\" (Linux, Solaris, AIX など) のように OS の \"ファミリ\" をチェックす"
"ることができます。\n"
"\n"
"この仕組みにより、 Perl の恥ずかしい部分をパンツで覆い隠し、頭に立派な帽子を"
"かぶせることができます。"

#. leap/perl-Devel-Confess/summary
msgid "Include stack traces on all warnings and errors"
msgstr "すべての警告とエラーに対するスタックトレースの表示"

#. leap/perl-Devel-Confess/description
msgid ""
"This module is meant as a debugging aid. It can be used to make a script "
"complain loudly with stack backtraces when 'warn()'ing or 'die()'ing. Unlike "
"other similar modules (e.g. Carp::Always), stack traces will also be "
"included when exception objects are thrown.\n"
"\n"
"The stack traces are generated using Carp, and will work for all types of "
"errors. Carp's 'carp' and 'croak' functions will also be made to include "
"stack traces.\n"
"\n"
"     $ perl -d:Confess -e 'sub f { die \"arghh\" }; sub g { f }; g'   arghh "
"at -e line 1.           main::f() called at -e line 1           main::g() "
"called at -e line 1\n"
"\n"
"     $ perl -d:Confess -w -e 'sub f { $a = shift; @a = @$a };' "
"\\                                         -e 'sub g { f(undef) }; g'   Use "
"of uninitialized value $a in array dereference at -e line 1.           main::"
"f(undef) called at -e line 2           main::g() called at -e line 2\n"
"\n"
"Internally, this is implemented with $SIG{__WARN__} and $SIG{__DIE__} "
"hooks.\n"
"\n"
"Stack traces are also included if raw non-object references are thrown.\n"
"\n"
"This module is compatible with all perl versions back to 5.6.2, without "
"additional prerequisites. It contains workarounds for a number of bugs in "
"the perl interpreter, some of which effect comparatively simpler modules, "
"like Carp::Always."
msgstr ""
"このモジュールはデバッグ目的で作られたものです。 'warn()' や 'die()' の際に、"
"スタックのバックトレースを表示してスクリプトの位置を明示します。他の類似モ"
"ジュール (例: Carp::Always) とは異なり、スタックトレースは例外オブジェクトが"
"投げられた際にも表示されます。\n"
"\n"
"スタックトレースは Carp を利用して生成され、すべてのタイプのエラーで動作しま"
"す。 Carp の 'carp' と 'croak' 関数にも、スタックトレースが含まれるようになり"
"ます。\n"
"\n"
"     $ perl -d:Confess -e 'sub f { die \"arghh\" }; sub g { f }; g'   arghh "
"at -e line 1.           main::f() called at -e line 1           main::g() "
"called at -e line 1\n"
"\n"
"     $ perl -d:Confess -w -e 'sub f { $a = shift; @a = @$a };' "
"\\                                         -e 'sub g { f(undef) }; g'   Use "
"of uninitialized value $a in array dereference at -e line 1.           main::"
"f(undef) called at -e line 2           main::g() called at -e line 2\n"
"\n"
"内部的には、このモジュールは $SIG{__WARN__} と $SIG{__DIE__} のフックを利用し"
"ています。\n"
"\n"
"スタックトレースは、オブジェクト参照ではないものが投げられた場合にも表示され"
"ます。\n"
"\n"
"このモジュールは、追加の要件無しで Perl バージョン 5.6.2 以降のバージョンと互"
"換性があります。 Perl のインタプリタ内のバグに対する回避策も用意されていて、 "
"Carp::Always などよりは幾分複雑になっています。"

#. leap/perl-Devel-CoreStack/summary
msgid "try to generate a stack dump from a core file"
msgstr "コアファイルからスタックダンプを生成する試み"

#. leap/perl-Devel-CoreStack/description
msgid ""
"This module attempts to generate a stack dump from a core file by locating "
"the best available debugger (if any) and running it with the appropriate "
"arguments and command script.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Alligator Descartes <descarte@hermetica.com>     Tim Bunce"
msgstr ""
"このモジュールは、コアファイルからスタックダンプを生成しようとするもので、 "
"(もし存在すれば) 利用可能なもののうちで最も便利なデバッガを検出し、 適切なパ"
"ラメータとコマンドスクリプトを設定して実行します。\n"
"\n"
"\n"
"\n"
"作者:\n"
"--------     Alligator Descartes <descarte@hermetica.com>     Tim Bunce"

#. leap/perl-Devel-Cover/summary
msgid "Code coverage metrics for Perl"
msgstr "Perl 向けコードカバレッジ計測"

#. leap/perl-Devel-Cover/description
msgid ""
"This module provides code coverage metrics for Perl. Code coverage metrics "
"describe how thoroughly tests exercise code. By using Devel::Cover you can "
"discover areas of code not exercised by your tests and determine which tests "
"to create to increase coverage. Code coverage can be considered an indirect "
"measure of quality.\n"
"\n"
"Although it is still being developed, Devel::Cover is now quite stable and "
"provides many of the features to be expected in a useful coverage tool.\n"
"\n"
"Statement, branch, condition, subroutine, and pod coverage information is "
"reported. Statement and subroutine coverage data should be accurate. Branch "
"and condition coverage data should be mostly accurate too, although not "
"always what one might initially expect. Pod coverage comes from Pod::"
"Coverage. If Pod::Coverage::CountParents is available it will be used "
"instead. Coverage data for other criteria are not yet collected.\n"
"\n"
"The _cover_ program can be used to generate coverage reports. Devel::Cover "
"ships with a number of reports including various types of HTML output, "
"textual reports, a report to display missing coverage in the same format as "
"compilation errors and a report to display coverage information within the "
"Vim editor.\n"
"\n"
"It is possible to add annotations to reports, for example you can add a "
"column to an HTML report showing who last changed a line, as determined by "
"git blame. Some annotation modules are shipped with Devel::Cover and you can "
"easily create your own.\n"
"\n"
"The _gcov2perl_ program can be used to convert gcov files to 'Devel::Cover' "
"databases. This allows you to display your C or XS code coverage together "
"with your Perl coverage, or to use any of the Devel::Cover reports to "
"display your C coverage data.\n"
"\n"
"Code coverage data are collected by replacing perl ops with functions which "
"count how many times the ops are executed. These data are then mapped back "
"to reality using the B compiler modules. There is also a statement profiling "
"facility which should not be relied on. For proper profiling use Devel::"
"NYTProf. Previous versions of Devel::Cover collected coverage data by "
"replacing perl's runops function. It is still possible to switch to that "
"mode of operation, but this now gets little testing and will probably be "
"removed soon. You probably don't care about any of this.\n"
"\n"
"The most appropriate mailing list on which to discuss this module would be "
"perl-qa. See http://lists.perl.org/list/perl-qa.html.\n"
"\n"
"The Devel::Cover repository can be found at http://github.com/pjcj/Devel--"
"Cover. This is also where problems should be reported."
msgstr ""
"このモジュールは、 Perl に対するコードカバレッジ測定の機能を提供します。コー"
"ドカバレッジとはテストがどれだけコードをカバーしているのかを示すもので、 "
"Devel::Cover を利用すると、テストで実行されていないコード領域を検出して、どの"
"ようなテストが不足しているのかを確認することができます。コードカバレッジは、"
"間接的ながら品質としても利用することができます。\n"
"\n"
"なお、本モジュールは現在も開発中ですが、安定していて、便利なカバレッジツール"
"で必要な多数の機能を提供しています。\n"
"\n"
"ステートメントや分岐、条件、サブルーチン、 Pod の各カバレッジ情報が報告されま"
"す。ステートメントとサブルーチンのカバレッジは正確に表示されますが、分岐や条"
"件のカバレッジについては正確には測定できない箇所があり、場合によっては不完全"
"になる場合もあります。また、 Pod のカバレッジは Pod::Coverage を利用して測定"
"されます。また、 Pod::Coverage::CountParents が利用できる場合は、そちらを利用"
"します。その他のカバレッジについては、原人では収集することができません。\n"
"\n"
"_cover_ プログラムはカバレッジレポートを作成する際に使用するプログラムで、 "
"Devel::Cover では HTML やテキストなどの様々な形式に対応し、コンパイルエラーと"
"同じ書式でカバレッジの指摘を表示したり、 Vim エディタ内にカバレッジ情報を表示"
"したりすることもできます。\n"
"\n"
"このほか、 HTML のレポート内に列を追加して、 git blame で設定された行の最終変"
"更者を表示したりするなどの注釈機能も用意されています。 Devel::Cover にはいく"
"つかの注釈モジュールが含まれていて、ここから独自に作成することもできます。\n"
"\n"
"_gcov2perl_ プログラムは gcov ファイルを 'Devel::Cover' データベースに変換す"
"る際に使用するプログラムで、これにより C 言語や XS のコードカバレッジを Perl "
"のカバレッジと共に表示することができるほか、 Devel::Cover のレポートをお使い"
"の C 言語のカバレッジデータに表示することもできます。\n"
"\n"
"コードカバレッジのデータは Perl op を実行回数を数える関数で置き換えることで収"
"集しています。これらのデータは B コンパイラモジュールを利用して元のコードに"
"マッピングされます。また、ステートメントのプロファイル収集機能も用意されてい"
"ますが、これらに依存すべきではありません。正しいプロファイル機能を利用したい"
"場合は、 Devel::NYTProf をお使いください。以前のバージョンの Devel::Cover で"
"は Perl の runops 関数を置き換えることで収集を行なっていましたが、本バージョ"
"ンでもこのように置き換えて収集することもできます。ただし、ほとんどテストが行"
"なわれておらず、近いうちに削除される予定です。こちらはおそらく使用する必要が"
"ないでしょう。\n"
"\n"
"本モジュールに関して議論を行ないたい場合に、もっとも適切なメーリングリストは "
"perl-qa です。詳しくは http://lists.perl.org/list/perl-qa.html をご覧くださ"
"い。\n"
"\n"
"Devel::Cover のリポジトリは http://github.com/pjcj/Devel--Cover にあります。"
"問題の報告もこちらから行なってください。"

#. leap/perl-Devel-Cover-Report-Codecov/summary
msgid "Backend for Codecov reporting of coverage statistics"
msgstr "カバレッジ統計情報の報告を行なう Codecov 向けバックエンド"

#. leap/perl-Devel-Cover-Report-Codecov/description
msgid ""
"Devel::Cover::Report::Codecov is coverage reporter for at https://codecov.io."
msgstr ""
"Devel::Cover::Report::Codecov は https://codecov.io で提供されているカバレッ"
"ジレポーターです。"

#. leap/perl-Devel-Cover-Report-Codecovbash/summary
msgid "Generate a JSON file to be uploaded with the codecov bash script"
msgstr ""
"codecov bashスクリプトを使用してアップロードするJSONファイルを生成します。"

#. leap/perl-Devel-Cover-Report-Codecovbash/description
msgid ""
"This is a coverage reporter for Codecov. It generates a JSON file that can "
"be uploaded with the bash script provided by codecov. See https://docs."
"codecov.io/docs/about-the-codecov-bash-uploader for details.\n"
"\n"
"The generated file will be named _codecov.json_ and will be in the "
"_cover_db_ directory by default.\n"
"\n"
"Nearly all of the code in this distribution was simply copied from Pine "
"Mizune's at https://metacpan.org/release/Devel-Cover-Report-Codecov "
"distribution."
msgstr ""
"これはCodecovのカバレッジレポータです。codecovが提供するbashスクリプトでアッ"
"プロード可能なJSONファイルを生成します。詳細については、https://docs.codecov."
"io/docs/about-the-codecov-bash-uploaderを参照してください。\n"
"\n"
"生成されるファイルの名前は_codecov.json_で、デフォルトでは_cover_db_ディレク"
"トリに置かれます。\n"
"\n"
"このディストリビューションのほとんどすべてのコードは、https://metacpan.org/"
"release/Devel-Cover-Report-CodecovディストリビューションにあるPine Mizune の"
"コードを単純にコピーしたものです。"

#. leap/perl-Devel-Cycle/summary
msgid "Find memory cycles in objects"
msgstr "オブジェクト内のメモリサイクルの検出"

#. leap/perl-Devel-Cycle/description
msgid ""
"This is a simple developer's tool for finding circular references in objects "
"and other types of references. Because of Perl's reference-count based "
"memory management, circular references will cause memory leaks."
msgstr ""
"これはオブジェクトやその他の参照タイプの中にある循環参照を検出するための開発"
"者向けツールです。 Perl の参照カウントをベースにしたメモリ管理の仕組みによ"
"り、循環参照はメモリリークを引き起こしてしまうためです。"

#. leap/perl-Devel-Declare/summary
msgid "Adding keywords to perl, in perl"
msgstr "Perl に対して、および Perl 内でのキーワードの追加"

#. leap/perl-Devel-Declare/description
msgid ""
"Devel::Declare can install subroutines called declarators which locally take "
"over Perl's parser, allowing the creation of new syntax.\n"
"\n"
"This document describes how to create a simple declarator."
msgstr ""
"Devel::Declare はローカルで Perl のパーサを乗っ取ることのできるデコレータと呼"
"ばれるサブルーチンをインストールすることで、新しい文法の作成を行なうことがで"
"きるものです。\n"
"\n"
"この文書では、シンプルなデコレータについて作成方法を説明しています。"

#. leap/perl-Devel-FindPerl/summary
msgid "Find the path to your perl"
msgstr "Perl 内でのパス検出"

#. leap/perl-Devel-FindPerl/description
msgid ""
"This module tries to find the path to the currently running perl. It "
"(optionally) exports the following functions:"
msgstr ""
"このモジュールは、現在実行中の Perl に対するパス情報を取得しようとします。 "
"(必要であれば) 下記のような関数も公開されます:"

#. leap/perl-Devel-GlobalDestruction/summary
msgid "Provides function returning the equivalent of"
msgstr "古いバージョンの Perl における DESTRUCT と同等の機能"

#. leap/perl-Devel-GlobalDestruction/description
msgid ""
"Perl's global destruction is a little tricky to deal with WRT finalizers "
"because it's not ordered and objects can sometimes disappear.\n"
"\n"
"Writing defensive destructors is hard and annoying, and usually if global "
"destruction is happening you only need the destructors that free up non "
"process local resources to actually execute.\n"
"\n"
"For these constructors you can avoid the mess by simply bailing out if "
"global destruction is in effect."
msgstr ""
"Perl のグローバルなデストラクタ処理は、その処理が順序通りにはいかず、オブジェ"
"クトが時折消えてしまうものであることから、 WRT ファイナライザを扱う場合に時折"
"トリッキーなものになります。\n"
"\n"
"保護型のデストラクタの作成は面倒で厄介なもので、通常はグローバルなデストラク"
"タ処理が発生する場合、実際に実行されるべき非プロセスのローカルリソースを開放"
"するデストラクタのみが必要となります。\n"
"\n"
"これらのコンストラクタのため、グローバルなデストラクタ処理が動作する際、単純"
"にそれらを除外することで問題を回避します。"

#. leap/perl-Devel-GlobalPhase/summary
msgid "Detect perl's global phase on older perls"
msgstr "古い Perl でのグローバルフェーズの検出"

#. leap/perl-Devel-GlobalPhase/description
msgid ""
"This gives access to ${^GLOBAL_PHASE} in versions of perl that don't provide "
"it. The built in variable will be used if it is available.\n"
"\n"
"If all that is needed is detecting global destruction, Devel::"
"GlobalDestruction should be used instead of this module."
msgstr ""
"このモジュールは ${^GLOBAL_PHASE} の機能に対応していない Perl で、その機能に"
"アクセスする機能を提供するものです。この内蔵変数に対応していれば、そのままア"
"クセスを行ないます。\n"
"\n"
"グローバルなデストラクションの検出のみを行ないたい場合は、このモジュールでは"
"なく Devel::GlobalDestruction の使用をお勧めします。"

#. leap/perl-Devel-Hide/summary
msgid "Forces the unavailability of specified Perl modules (for testing)"
msgstr ""
"指定した Perl モジュールを利用できないように強制するモジュール (テスト用)"

#. leap/perl-Devel-Hide/description
msgid ""
"Given a list of Perl modules/filenames, this module makes 'require' and "
"'use' statements fail (no matter the specified files/modules are installed "
"or not).\n"
"\n"
"They _die_ with a message like:\n"
"\n"
"    Can't locate Module/ToHide.pm in @INC (hidden)\n"
"\n"
"The original intent of this module is to allow Perl developers to test for "
"alternative behavior when some modules are not available. In a Perl "
"installation, where many modules are already installed, there is a chance to "
"screw things up because you take for granted things that may not be there in "
"other machines.\n"
"\n"
"For example, to test if your distribution does the right thing when a module "
"is missing, you can do\n"
"\n"
"    perl -MDevel::Hide=Test::Pod Makefile.PL\n"
"\n"
"forcing 'Test::Pod' to not be found (whether it is installed or not).\n"
"\n"
"Another use case is to force a module which can choose between two "
"requisites to use the one which is not the default. For example, 'XML::"
"Simple' needs a parser module and may use 'XML::Parser' or 'XML::"
"SAX' (preferring the latter). If you have both of them installed, it will "
"always try 'XML::SAX'. But you can say:\n"
"\n"
"    perl -MDevel::Hide=XML::SAX script_which_uses_xml_simple.pl\n"
"\n"
"NOTE. This module does not use Carp. As said before, denial _dies_.\n"
"\n"
"This module is pretty trivial. It uses a code reference in @INC to get rid "
"of specific modules during require - denying they can be successfully loaded "
"and stopping the search before they have a chance to be found.\n"
"\n"
"There are three alternative ways to include modules in the hidden list: \n"
"* import()\n"
"\n"
"this is probably the most commonly used method, called automagically when "
"you do this:\n"
"\n"
"    use Devel::Hide qw(Foo Bar::Baz);\n"
"\n"
"or\n"
"\n"
"    perl -MDevel::Hide=... \n"
"* setting @Devel::Hide::HIDDEN \n"
"* environment variable DEVEL_HIDE_PM\n"
"\n"
"both of these two only support 'global' hiding, whereas 'import()' supports "
"lexical hiding as well.\n"
"\n"
"Optionally, you can provide some arguments *before* the list of modules: \n"
"* -from:children\n"
"\n"
"propagate the list of hidden modules to your process' child processes. This "
"works by populating 'PERL5OPT', and is incompatible with Taint mode, as "
"explained in perlrun. Of course, this is unnecessary if your child processes "
"are just forks of the current one. \n"
"* -lexically\n"
"\n"
"This is only available on perl 5.10.0 and later. It is a fatal error to try "
"to use it on an older perl.\n"
"\n"
"Everything following this will only have effect until the end of the current "
"scope. Yes, that includes '-quiet'. \n"
"* -quiet\n"
"\n"
"suppresses diagnostic output. You will still get told about errors. This is "
"passed to child processes if -from:children is in effect."
msgstr ""
"Perl のモジュール名やファイル名を指定することで、このモジュールは 'require', "
"'use' の使用時に失敗させることができます (指定したファイル名やモジュール名が"
"存在するかどうかには関係なく失敗します) 。\n"
"\n"
"失敗時には、下記のようにして _die_ されます:\n"
"\n"
"    Can't locate Module/ToHide.pm in @INC(hidden)\n"
"\n"
"このモジュールのもう 1 つの意図として、 Perl の開発者に対してモジュールが利用"
"できない場合の動作をテストさせる、という意図があります。 Perl のインストール"
"時には多数のモジュールが併せてインストールされますが、他のマシンでもそれらの"
"モジュールが利用できるかどうかはわかりませんので、その際のテストを実施するこ"
"とができます。\n"
"\n"
"たとえば、お使いの配布物で特定のモジュールが存在しない場合をテストしたい場合"
"は、下記のように実行します:\n"
"\n"
"    perl -MDevel::Hide=Test::Pod Makefile.PL\n"
"\n"
"上記のように実行することで、 (インストールされているかどうかにかかわらず) "
"'Test::Pod' が見つからない状況を作り出すことができます。\n"
"\n"
"もう 1 つの使い方としては、 2 つのモジュールのうちのいずれかを利用するモ"
"ジュールで、一方が既定ではインストールされないものの場合が考えられます。たと"
"えば 'XML::Simple' ではパーサモジュールを必要としますが、パーサモジュールは "
"'XML::Parser' と 'XML::SAX' のいずれかを利用することができます (後者が優先さ"
"れます) 。両方をインストールしている環境では 'XML::SAX' が優先されてしまいま"
"すが、下記のように実行することで、 'XML::SAX' を無効化することができます:\n"
"\n"
"    perl -MDevel::Hide=XML::SAX script_which_uses_xml_simple.pl\n"
"\n"
"注意:ただし、このモジュールは Carp を利用していません。上述のとおり _die_ で"
"終了します。\n"
"\n"
"このモジュールはよくある仕組みでもあります。 @INC 内のコード参照を利用して、"
"特定のモジュールが require される際に拒否を行ない、読み込みが正常終了するのを"
"妨げ、検出される前に検索を停止します。\n"
"\n"
"隠蔽リストにモジュールを追加する方法としては、下記の 3 種類があります:\n"
"\n"
"* import()\n"
"\n"
"これはもっとも一般的に使われる手法で、これを実行するときに automagically と呼"
"ばれます:\n"
"\n"
"    use Devel::Hide qw(Foo Bar::Baz);\n"
"\n"
"又は\n"
"\n"
"    perl -MDevel::Hide=... \n"
"* @Devel::Hide::HIDDEN の設定\n"
"\n"
"* 環境変数 DEVEL_HIDE_PM\n"
"\n"
"どちらも「グローバル」非表示のみをサポートしていますが、「import()」は字句の"
"非表示もサポートしています。\n"
"オプションで、モジュールのリストの前にいくつかの引数を指定できます。\n"
"* -from:children\n"
"\n"
"非表示モジュールのリストをプロセスの子プロセスに伝播します。これ"
"は'PERL5OPT'を ポピュレートすることで動作し、perlrunで説明されているように、"
"Taintモードとは互換性がありません。もちろん、子プロセスが現在のプロセスの単な"
"るフォークである場合、これは不要です。\n"
"\n"
"* -lexically\n"
"\n"
"これはperl5.10.0以降でのみ使用できます。古いperlで使用しようとすると致命的な"
"エラーになります。\n"
"これ以降のすべての操作は、現在のスコープが終了するまで有効です。もちろん、\"-"
"quiet\" が含まれています。\n"
"\n"
"* -quiet\n"
"診断出力を抑制します。引き続きエラーは通知されます。-from:children が有効な場"
"合、子プロセスに渡されます。"

#. leap/perl-Devel-Leak/summary
msgid "Utility for looking for perl objects that are not reclaimed"
msgstr "reclaim されていない Perl オブジェクトを探すためのユーティリティ"

#. leap/perl-Devel-Leak/description
msgid ""
"  Devel-Leak module for perl   Devel::Leak has two functions NoteSV and "
"CheckSV.   NoteSV walks the perl internal table of allocated SVs (scalar "
"values)    - (which actually contains arrays and hashes too),    and records "
"their addresses in a table. It returns a count of these \"things\",    and "
"stores a pointer to the table (which is obtained from the heap    using "
"malloc()) in its argument.   CheckSV is passed argument which holds a "
"pointer to a table created by NoteSV.    It re-walks the perl-internals and "
"calls sv_dump() for any \"things\"    which did not exist when NoteSV was "
"called.    It returns a count of the number of \"things\" now allocated.   "
"Author:\tNick Ing-Simmons <nick@ni-s.u-net.com>"
msgstr ""
"  Perl 向け Devel-Leak: Devel::Leak には 2 種類の関数 (NoteSV, CheckSV) があ"
"ります。 NoteSV は Perl の割り当て済みの SV (スカラー値 (Scalar Values); 配列"
"やハッシュなども含まれています) の内部テーブルを読み込み、テーブル内のアドレ"
"スを記録していきます。その後、それらの \"もの\" のカウンタを返し、そのパラ"
"メータ内にテーブルのポインタを格納します (malloc() を利用してヒープから取得し"
"ます) 。 CheckSV は NoteSV で作成されたテーブルへのポインタをパラメータとして"
"与える仕組みで、再度 Perl の内部の参照したあと、 NoteSV が呼び出された時点で"
"存在していなかったそれぞれの \"もの\" に対して、 sv_dump() を呼び出します。な"
"お、この館数も \"もの\" のカウンタ数を返します。作者: \tNick Ing-Simmons "
"<nick@ni-s.u-net.com>"

#. leap/perl-Devel-LexAlias/summary
msgid "alias lexical variables"
msgstr "別名 lexical 変数"

#. leap/perl-Devel-LexAlias/description
msgid ""
"Devel::LexAlias provides the ability to alias a lexical variable in a "
"subroutines scope to one of your choosing.\n"
"\n"
"If you don't know why you'd want to do this, I'd suggest that you skip this "
"module. If you think you have a use for it, I'd insist on it.\n"
"\n"
"Still here? \n"
"* lexalias( $where, $name, $variable )\n"
"\n"
"  '$where' refers to the subroutine in which to alias the lexical, it can   "
"be a coderef or a call level such that you'd give to 'caller'\n"
"\n"
"  '$name' is the name of the lexical within that subroutine\n"
"\n"
"  '$variable' is a reference to the variable to install at that location"
msgstr ""
"Devel::LexAlias はサブルーチンスコープ内の lexical 変数を別のスコープで別名化"
"できる機能を提供します。\n"
"\n"
"このモジュールがなぜ必要なのかがわからない場合は、まず本モジュールを読み飛ば"
"しておくことをお勧めします。これを使用したい場合にのみお使いください。\n"
"\n"
"いかがでしょうか？\n"
"* lexalias( $where, $name, $variable )\n"
"\n"
"  '$where' には lexical 変数を利用するサブルーチンの参照を指定します。コード"
"参照のほか、 'caller' に指定する呼び出しレベルでもかまいません。\n"
"\n"
"  '$name' には、そのサブルーチン内での lexical 変数名を指定します。\n"
"  '$variable' には、その場所にインストールする変数への参照を指定します"

#. leap/perl-Devel-NYTProf/summary
msgid "Powerful fast feature-rich Perl source code profiler"
msgstr "パワフルで高速、かつ機能の豊富な Perl ソースコードプロファイラ"

#. leap/perl-Devel-NYTProf/description
msgid ""
"Devel::NYTProf is a powerful, fast, feature-rich perl source code profiler.\n"
"\n"
"  * Performs per-line statement profiling for fine detail\n"
"\n"
"  * Performs per-subroutine statement profiling for overview\n"
"\n"
"  * Performs per-opcode profiling for slow perl builtins\n"
"\n"
"  * Performs per-block statement profiling (the first profiler to do so)\n"
"\n"
"  * Accounts correctly for time spent after calls return\n"
"\n"
"  * Performs inclusive and exclusive timing of subroutines\n"
"\n"
"  * Subroutine times are per calling location (a powerful feature)\n"
"\n"
"  * Can profile compile-time activity, just run-time, or just END time\n"
"\n"
"  * Uses novel techniques for efficient profiling\n"
"\n"
"  * Sub-microsecond (100ns) resolution on supported systems\n"
"\n"
"  * Very fast - the fastest statement and subroutine profilers for perl\n"
"\n"
"  * Handles applications that fork, with no performance cost\n"
"\n"
"  * Immune from noise caused by profiling overheads and I/O\n"
"\n"
"  * Program being profiled can stop/start the profiler\n"
"\n"
"  * Generates richly annotated and cross-linked html reports\n"
"\n"
"  * Captures source code, including string evals, for stable results\n"
"\n"
"  * Trivial to use with mod_perl - add one line to httpd.conf\n"
"\n"
"  * Includes an extensive test suite\n"
"\n"
"  * Tested on very large codebases\n"
"\n"
"NYTProf is effectively two profilers in one: a statement profiler, and a "
"subroutine profiler."
msgstr ""
"Devel::NYTProf はパワフルで機能の豊富な Perl ソースコードプロファイラです。\n"
"\n"
"  * より詳しい情報をつかむための行ごとのステートメントプロファイル機能\n"
"\n"
"  * 概要をつかむためのサブルーチンごとのステートメントプロファイル機能\n"
"\n"
"  * Perl 内部が遅いかどうかを確認するための opcode ごとのプロファイル機能\n"
"\n"
"  * ブロックごとのステートメントプロファイル機能 (一般にプロファイラが実施す"
"るものです)\n"
"\n"
"  * 呼び出しからの復帰時に消費された時間の正確な積算\n"
"\n"
"  * サブルーチンの包括的／排他的タイミング計算\n"
"\n"
"  * 呼び出し位置ごとのサブルーチン時間計算 (パワフルとされる機能)\n"
"\n"
"  * コンパイル時、実行時、終了時における各プロファイルが可能\n"
"\n"
"  * 効果的なプロファイリングのための独創的な技法\n"
"\n"
"  * 対応するシステムではマイクロ秒未満 (100 ナノ秒単位) の精度による測定に対"
"応\n"
"\n"
"  * 非常に高速 - Perl ではステートメントやサブルーチンのプロファイルがもっと"
"も高速に動作します\n"
"\n"
"  * fork を実施するアプリケーションでも問題なく動作します - 性能面のコストも"
"ありません\n"
"\n"
"  * プロファイル処理そのものや I/O によるノイズの除去に対応\n"
"\n"
"  * プロファイル先のプログラムでもプロファイルの開始や停止に対応\n"
"\n"
"  * 豊かな注釈機能とクロスリンクされた HTML レポートを生成\n"
"\n"
"  * 安定した結果をもたらすための文字列の eval など、ソースコードを正確に捉え"
"る機能\n"
"\n"
"  * mod_perl でも利用可能 - httpd.conf に設定を追加します\n"
"\n"
"  * 広範囲に対応するテストスイートを同梱\n"
"\n"
"  * 非常に広範囲のコードベースでテスト済み\n"
"\n"
"NYTProf は 2 種類のプロファイラ (ステートメントプロファイラおよびサブルーチン"
"プロファイラ) を 1 つにまとめたものです。"

#. leap/perl-Devel-OverloadInfo/summary
msgid "Introspect Overloaded Operators"
msgstr "オーバーロードされた演算子の内部調査"

#. leap/perl-Devel-OverloadInfo/description
msgid ""
"Devel::OverloadInfo returns information about overloaded operators for a "
"given class (or object), including where in the inheritance hierarchy the "
"overloads are declared and where the code implementing them is."
msgstr ""
"Devel::OverloadInfo は指定したクラス (またはオブジェクト) のオーバーロードさ"
"れた演算子に関する情報を返します。オーバーロードの定義で継承における階層構造"
"のほか、実装コードも返すことができます。"

#. leap/perl-Devel-PPPort/summary
msgid "Perl/Pollution/Portability"
msgstr "Perl/Pollution/Portability"

#. leap/perl-Devel-PPPort/description
msgid ""
"Perl's API has changed over time, gaining new features, new functions, "
"increasing its flexibility, and reducing the impact on the C namespace "
"environment (reduced pollution). The header file written by this module, "
"typically _ppport.h_, attempts to bring some of the newer Perl API features "
"to older versions of Perl, so that you can worry less about keeping track of "
"old releases, but users can still reap the benefit.\n"
"\n"
"'Devel::PPPort' contains two functions, 'WriteFile' and 'GetFileContents'. "
"'WriteFile''s only purpose is to write the _ppport.h_ C header file. This "
"file contains a series of macros and, if explicitly requested, functions "
"that allow XS modules to be built using older versions of Perl. Currently, "
"Perl versions from 5.003 to 5.20 are supported.\n"
"\n"
"'GetFileContents' can be used to retrieve the file contents rather than "
"writing it out.\n"
"\n"
"This module is used by 'h2xs' to write the file _ppport.h_."
msgstr ""
"Perl の API は時代を追うごとに変化していき、新しい機能や関数が追加され、柔軟"
"性が高まって C ネームスペース環境によるインパクト (悪影響) も減ってきていま"
"す。このモジュールによって書かれたヘッダファイル (一般に _ppport.h_) は、新し"
"い Perl API 機能を古いバージョンの Perl にもたらそうという試みで、古いリリー"
"スで動作するかどうかを心配することなく、ユーザに利便性を提供しようとする試み"
"です。\n"
"\n"
"'Devel::PPPort' には 2 つの関数 ('WriteFile', 'GetFileContents') が含まれてい"
"ます。  'WriteFile' は _ppport.h_ C ヘッダファイルに書き込むだけのために用意"
"されたものです。このファイルにはマクロ集のほか、明示的に指定していれば、古い"
"バージョンの Perl を利用して XS モジュールを構築できる機能が含まれています。"
"現時点では Perl のバージョン 5.003 から 5.20 までに対応しています。\n"
"\n"
"'GetFileContents' では、ファイルに出力せず、その内容を取得する際に使用しま"
"す。\n"
"\n"
"このモジュールは、 _ppport.h_ に書き込むにあたって 'h2xs' が使用しています。"

#. leap/perl-Devel-PartialDump/summary
msgid "Partial dumping of data structures, optimized for argument printing"
msgstr "パラメータの表示用に最適化された、データ構造の一部のダンプ"

#. leap/perl-Devel-PartialDump/description
msgid ""
"This module is a data dumper optimized for logging of arbitrary parameters.\n"
"\n"
"It attempts to truncate overly verbose data, in a way that is hopefully more "
"useful for diagnostics warnings than\n"
"\n"
"    warn Dumper(@stuff);\n"
"\n"
"Unlike other data dumping modules there are no attempts at correctness or "
"cross referencing, this is only meant to provide a slightly deeper look into "
"the data in question.\n"
"\n"
"There is a default recursion limit, and a default truncation of long lists, "
"and the dump is formatted on one line (new lines in strings are escaped), to "
"aid in readability.\n"
"\n"
"You can enable it temporarily by importing functions like 'warn', 'croak' "
"etc to get more informative errors during development, or even use it as:\n"
"\n"
"    BEGIN { local $@; eval \"use Devel::PartialDump qw(...)\" }\n"
"\n"
"to get DWIM formatting only if it's installed, without introducing a "
"dependency."
msgstr ""
"このモジュールは、任意のパラメータを記録するために最適化されたデータダンパで"
"す。\n"
"\n"
"このモジュールはあまりにも冗長すぎるデータを出力したりはしないように作られて"
"いますが、下記のように実行した場合の警告メッセージよりはわかりやすいメッセー"
"ジになるように考えられています\n"
"\n"
"    warn Dumper(@stuff);\n"
"\n"
"他のデータダンパモジュールとは異なり、データの正しさや相互参照性は考慮されて"
"いません。データそのものに対して、比較的深い程度の参照機能を提供します。\n"
"\n"
"また、再帰処理には既定の制限値が設定されているほか、長いリストの場合は既定の"
"最大長も設定されています。出力は 1 行 (文字列内の改行はエスケープして出力され"
"ます) となりますので、読みやすくなるようになっています。\n"
"\n"
"開発作業でより詳しいエラー情報を取得するため、 'warn', 'croak' のようなイン"
"ポート型関数で一時的に使用したい場合は、下記のように使用することもできます:\n"
"\n"
"    BEGIN { local $@; eval \"use Devel::PartialDump qw(...)\" }\n"
"\n"
"なお、単純にデータを書式化するだけの場合、依存関係はありません。"

#. leap/perl-Devel-PatchPerl/summary
msgid "Patch perl source a la Devel::PPPort's buildperl.pl"
msgstr "Perl のソースコードに対するパッチ: Devel::PPorts の buildperl.pl"

#. leap/perl-Devel-PatchPerl/description
msgid ""
"Devel::PatchPerl is a modularisation of the patching code contained in "
"Devel::PPPort's 'buildperl.pl'.\n"
"\n"
"It does not build perls, it merely provides an interface to the source "
"patching functionality."
msgstr ""
"Devel::PatchPerl は Devel::PPPorts の 'buildperl.pl' 内に含まれているコード"
"パッチをモジュール化したものです。\n"
"\n"
"Perl をコンパイルするわけではなく、ソースコードのパッチ機能に対してインター"
"フェイスを提供します。"

#. leap/perl-Devel-REPL/summary
msgid "Modern Perl Interactive Shell"
msgstr "モダンな Perl 対話シェル"

#. leap/perl-Devel-REPL/description
msgid ""
"This is an interactive shell for Perl, commonly known as a REPL - Read, "
"Evaluate, Print, Loop. The shell provides for rapid development or testing "
"of code without the need to create a temporary source code file.\n"
"\n"
"Through a plugin system, many features are available on demand. You can also "
"tailor the environment through the use of profiles and run control files, "
"for example to pre-load certain Perl modules when working on a particular "
"project."
msgstr ""
"これは REPL (Read, Evaluate, Print, Loop) としても知られる、 Perl 向けの対話"
"シェルです。シェルは一時的にソースコードファイルを作成したりすることなく、"
"コードの開発を素早く行なう目的で作られています。\n"
"\n"
"プラグインのシステム構成になっていますので、多数の機能を必要に応じて追加する"
"ことができます。プロファイルや実行制御ファイルでお好みの環境を仕立て上げるこ"
"とができますので、特定のプロジェクトでの作業で特定の Perl モジュールを読み込"
"ませるようなこともできます。"

#. leap/perl-Devel-StackTrace/summary
msgid "An object representing a stack trace"
msgstr "スタックトレースを表現するオブジェクト"

#. leap/perl-Devel-StackTrace/description
msgid ""
"The 'Devel::StackTrace' module contains two classes, 'Devel::StackTrace' and "
"Devel::StackTrace::Frame. These objects encapsulate the information that can "
"retrieved via Perl's 'caller' function, as well as providing a simple "
"interface to this data.\n"
"\n"
"The 'Devel::StackTrace' object contains a set of 'Devel::StackTrace::Frame' "
"objects, one for each level of the stack. The frames contain all the data "
"available from 'caller'.\n"
"\n"
"This code was created to support my Exception::Class::Base class (part of "
"Exception::Class) but may be useful in other contexts."
msgstr ""
"'Devel::StackTrace' モジュールには 2 つのクラスが含まれています。それぞれ "
"'Devel::StackTrace', Devel::StackTrace::Frame というクラスで、これらのオブ"
"ジェクトは Perl の 'caller' 関数を介して取得することができる情報をカプセル化"
"し、このデータに対するシンプルなインターフェイスを提供します。\n"
"\n"
"'Devel::StackTrace' オブジェクトには、各スタックのレベルに対応した 'Devel::"
"StackTrace::Frame' オブジェクトが複数個含まれています。フレーム内には、 "
"'caller' で提供されるすべてのデータが含まれています。\n"
"\n"
"このコードは、私が作成している Exception::Class::Base クラス (Exception::"
"Class の一部) に対応するために作ったものですが、他の箇所でも便利に使用するこ"
"とができます。"

#. leap/perl-Devel-StackTrace-AsHTML/summary
msgid "Displays stack trace in HTML"
msgstr "HTML でのスタックトレース表示"

#. leap/perl-Devel-StackTrace-AsHTML/description
msgid ""
"Devel::StackTrace::AsHTML adds 'as_html' method to Devel::StackTrace which "
"displays the stack trace in beautiful HTML, with code snippet context and "
"function parameters. If you call it on an instance of Devel::StackTrace::"
"WithLexicals, you even get to see the lexical variables of each stack frame."
msgstr ""
"Devel::StackTrace::AsHTML は Devel::StackTrace に 'as_html' メソッドを追加し"
"ます。このメソッドはスタックトレースを美しい HTML で出力するもので、コードの"
"断片と関数のパラメータが表示されます。 Devel::StackTrace::WithLexicals のイン"
"スタンス上でこのメソッドを呼び出すと、各スタックフレームの変数値も表示するこ"
"とができるようになります。"

#. leap/perl-Devel-Symdump/summary
msgid "Dump Symbol Names or the Symbol Table"
msgstr "シンボル名やシンボルテーブルをダンプするツール"

#. leap/perl-Devel-Symdump/description
msgid "This little package serves to access the symbol table of perl."
msgstr ""
"この小さなパッケージは、 Perl のシンボルテーブルにアクセスする手段を提供しま"
"す。"

#. leap/perl-Devel-TakeHashArgs/summary
msgid ""
"Make a Hash From @_ and Set Defaults in Subs While Checking That All Man[cut]"
msgstr ""
"@_ からハッシュを作成し、それらすべてをチェックしながらサブルーチン内での既定"
"値とするモジュール"

#. leap/perl-Devel-TakeHashArgs/description
msgid ""
"The module is a short utility I made after being sick and tired of writing "
"redundant code to make a hash out of args when they are passed as key/value "
"pairs including setting their defaults and checking for mandatory arguments."
msgstr ""
"このモジュールは私が病気になった後に作成した短いユーティリティで、パラメータ"
"からキーと値のペアのハッシュを作成し、併せてそれらの既定値を設定したり必須の"
"パラメータをチェックしたりするための冗長なコードを書くのに疲れたため、作成し"
"たものです。"

#. leap/perl-Devel-Trace/summary
msgid "Print out each line before it is executed (like C<sh -x>)"
msgstr "実行前にスクリプト行を出力するモジュール (<sh -x> のような仕組み)"

#. leap/perl-Devel-Trace/description
msgid ""
"If you run your program with 'perl -d:Trace program', this module will print "
"a message to standard error just before each line is executed. For example, "
"if your program looks like this:\n"
"\n"
"        \n"
"\n"
"         print \"Statement 1 at line 4\\n\";         print \"Statement 2 at "
"line 5\\n\";         print \"Call to sub x returns \", &x(), \" at line 6.\\n"
"\";\n"
"\n"
"        exit 0;\n"
"\n"
"         sub x {           print \"In sub x at line 12.\\n\";           "
"return 13;         }\n"
"\n"
"Then the 'Trace' output will look like this:\n"
"\n"
"        >> ./test:4: print \"Statement 1 at line 4\\n\";         >> ./"
"test:5: print \"Statement 2 at line 5\\n\";         >> ./test:6: print "
"\"Call to sub x returns \", &x(), \" at line 6.\\n\";         >> ./"
"test:12:   print \"In sub x at line 12.\\n\";         >> ./test:13:   return "
"13;         >> ./test:8: exit 0;\n"
"\n"
"This is something like the shell's '-x' option."
msgstr ""
"お使いのプログラムを 'perl -d:Trace (プログラム名)' のようにして実行すると、"
"このモジュールは各行を実行する前にその内容を出力します。たとえば下記のような"
"プログラムがある場合を考えます:\n"
"\n"
"        \n"
"\n"
"         print \"Statement 1 at line 4\\n\";         print \"Statement 2 at "
"line 5\\n\";         print \"Call to sub x returns \", &x(), \" at line 6.\\n"
"\";\n"
"\n"
"        exit 0;\n"
"\n"
"         sub x {           print \"In sub x at line 12.\\n\";           "
"return 13;         }\n"
"\n"
"'Trace' では下記のように出力されます:\n"
"\n"
"        >> ./test:4: print \"Statement 1 at line 4\\n\";         >> ./"
"test:5: print \"Statement 2 at line 5\\n\";         >> ./test:6: print "
"\"Call to sub x returns \", &x(), \" at line 6.\\n\";         >> ./"
"test:12:   print \"In sub x at line 12.\\n\";         >> ./test:13:   return "
"13;         >> ./test:8: exit 0;\n"
"\n"
"これはシェルの '-x' オプションに似た動きをするものです。"

#. leap/perl-Device-SerialPort/summary
msgid "Linux/POSIX emulation of Win32::SerialPort functions"
msgstr "Win32::SerialPort の機能の Linux/POSIX エミュレーション"

#. leap/perl-Device-SerialPort/description
msgid ""
"This module provides an object-based user interface essentially identical to "
"the one provided by the Win32::SerialPort module."
msgstr ""
"このモジュールは、 Win32::SerialPort モジュールが提供するものと本質的に同一の"
"オブジェクトベースのユーザインターフェイスを提供します。"

#. leap/perl-Device-Yeelight/summary
#. leap/perl-Device-Yeelight/description
msgid "Controller for Yeelight smart devices"
msgstr "Yeelight スマートデバイス向けコントローラ"

#. leap/perl-Digest-CRC/summary
msgid "Generic CRC functions"
msgstr "汎用 CRC 関数"

#. leap/perl-Digest-CRC/description
msgid ""
"The *Digest::CRC* module calculates CRC sums of all sorts. It contains "
"wrapper functions with the correct parameters for CRC-CCITT, CRC-16, CRC-32 "
"and CRC-64, as well as the CRC used in OpenPGP's ASCII-armored checksum."
msgstr ""
"*Digest::CRC* モジュールは全ての種類に対応した CRC 計算モジュールです。 CRC-"
"CCITT, CRC-16, CRC-32, CRC-64 に対して、適切なパラメータを提供するラッパー関"
"数のほか、 OpenPGP の ASCII アーマーチェックサムにも対応しています。"

#. leap/perl-Digest-HMAC/summary
msgid "Keyed-Hashing for Message Authentication"
msgstr "メッセージ認証向けのキーハッシュ"

#. leap/perl-Digest-HMAC/description
msgid ""
"HMAC is used for message integrity checks between two parties that share a "
"secret key, and works in combination with some other Digest algorithm, "
"usually MD5 or SHA-1. The HMAC mechanism is described in RFC 2104.\n"
"\n"
"HMAC follow the common 'Digest::' interface, but the constructor takes the "
"secret key and the name of some other simple 'Digest::' as argument.\n"
"\n"
"Authors:\n"
"--------     Graham Barr <gbarr@ti.com>     Gisle Aas <gisle@aas.no>"
msgstr ""
"HMAC は機密鍵を共有した 2 つの当事者でメッセージの整合性を確認するために 使用"
"されます。 HMAC は他のダイジェストアルゴリズム (主に MD5, SHA-1) と共に 使用"
"します。 HMAC の仕組みは RFC 2104 で説明されています。\n"
"\n"
"HMAC は汎用の 'Digest::' インターフェイスに従って作られていますが、コンストラ"
"クタではパラメータとして、機密鍵と他のシンプルな 'Digest::' 以下の名前を指定"
"する必要があります。\n"
"\n"
"作者:\n"
"--------     Graham Barr <gbarr@ti.com>     Gisle Aas <gisle@aas.no>"

#. leap/perl-Digest-JHash/summary
msgid "Perl extension for 32 bit Jenkins Hashing Algorithm"
msgstr "32 ビット Jenkins ハッシュアルゴリズムに対する Perl の拡張"

#. leap/perl-Digest-JHash/description
msgid ""
"The 'Digest::JHash' module allows you to use the fast JHash hashing "
"algorithm developed by Bob Jenkins from within Perl programs. The algorithm "
"takes as input a message of arbitrary length and produces as output a 32-bit "
"\"message digest\" of the input in the form of an unsigned long integer.\n"
"\n"
"Call it a low calorie version of MD5 if you like.\n"
"\n"
"See http://burtleburtle.net/bob/hash/doobs.html for more information."
msgstr ""
"'Digest::JHash' モジュールは、 Bob Jenkins 氏が開発したモジュールで、 Perl プ"
"ログラム内で高速な JHash ハッシュアルゴリズムを利用することのできる仕組みで"
"す。任意の長さのメッセージを入力として受け付け、入力された値に対して 32 ビッ"
"トの \"メッセージダイジェスト\" を計算し、それを unsigned long integer で出力"
"します。\n"
"\n"
"言い換えれば、 MD5 の低カロリー版ともいえます。\n"
"\n"
"詳しくは http://burtleburtle.net/bob/hash/doobs.html をお読みください。"

#. leap/perl-Digest-MD4/summary
msgid "Perl interface to the MD4 Algorithm"
msgstr "MD4 アルゴリズムに対する Perl インターフェイス"

#. leap/perl-Digest-MD4/description
msgid ""
"The 'Digest::MD4' module allows you to use the RSA Data Security Inc. MD4 "
"Message Digest algorithm from within Perl programs. The algorithm takes as "
"input a message of arbitrary length and produces as output a 128-bit "
"\"fingerprint\" or \"message digest\" of the input.\n"
"\n"
"The 'Digest::MD4' module provides a procedural interface for simple use, as "
"well as an object oriented interface that can handle messages of arbitrary "
"length and which can read files directly."
msgstr ""
"'Digest::MD4' モジュールは、 RSA Data Security Inc. が提供する MD4 メッセージ"
"ダイジェストアルゴリズムに対して、 Perl プログラムからアクセスする手段を提供"
"します。このアルゴリズムは任意の長さの入力メッセージを受け付け、その結果を"
"128 ビットの \"指紋\" または \"メッセージダイジェスト\" として出力します。\n"
"\n"
"'Digest::MD4' モジュールは使いやすい手続き型のインターフェイスを提供している"
"ほか、オブジェクト指向のインターフェイスを利用して、任意の長さのメッセージを"
"直接読み込んだり、ファイルを直接読み込んだりすることができる仕組みも用意され"
"ています。"

#. leap/perl-Digest-MD5/summary
msgid "Perl interface to the MD5 Algorithm"
msgstr "MD5 アルゴリズムに対する Perl インターフェイス"

#. leap/perl-Digest-MD5/description
msgid ""
"The 'Digest::MD5' module allows you to use the RSA Data Security Inc. MD5 "
"Message Digest algorithm from within Perl programs. The algorithm takes as "
"input a message of arbitrary length and produces as output a 128-bit "
"\"fingerprint\" or \"message digest\" of the input.\n"
"\n"
"Note that the MD5 algorithm is not as strong as it used to be. It has since "
"2005 been easy to generate different messages that produce the same MD5 "
"digest. It still seems hard to generate messages that produce a given "
"digest, but it is probably wise to move to stronger algorithms for "
"applications that depend on the digest to uniquely identify a message.\n"
"\n"
"The 'Digest::MD5' module provide a procedural interface for simple use, as "
"well as an object oriented interface that can handle messages of arbitrary "
"length and which can read files directly."
msgstr ""
"'Digest::MD5' モジュールは、 Perl のプログラム内から RSA Data Security Inc. "
"の MD5 メッセージダイジェストアルゴリズムを利用するための仕組みです。任意の長"
"さのメッセージを入力として受け付け、入力された値に対して 128 ビットの \"フィ"
"ンガープリント\" (指紋) もしくは \"メッセージダイジェスト\" を計算して出力し"
"ます。\n"
"\n"
"なお、 MD5 アルゴリズムは以前に考えられていたよりも強固な仕組みではなくなった"
"ことに注意してください。 2005 年の時点で、異なるメッセージから同じ MD5 ダイ"
"ジェストを生成できることが判明しています。もちろん現時点でも容易に生成できて"
"しまうようなものではありませんが、メッセージが唯一のものであると識別する必要"
"があるアプリケーションは、より強固なアルゴリズムに移行したほうが賢明です。\n"
"\n"
"'Digest::MD5' モジュールは、使いやすいプロシージャ型のインターフェイスのほ"
"か、任意の長さのメッセージを処理したり、ファイルから直接読み込んだりするため"
"のオブジェクト指向のインターフェイスも提供しています。"

#. leap/perl-Digest-Perl-MD5/summary
msgid "Perl implementation of Ron Rivests MD5 Algorithm"
msgstr "Ron Rivests MD5 アルゴリズムの Perl 実装"

#. leap/perl-Digest-Perl-MD5/description
msgid ""
"This modules has the same interface as the much faster 'Digest::MD5'. So you "
"can easily exchange them, e.g.\n"
"\n"
"\tBEGIN { \t  eval { \t    require Digest::MD5; \t    import Digest::MD5 "
"'md5_hex' \t  }; \t  if ($@) { # ups, no Digest::MD5 \t    require Digest::"
"Perl::MD5; \t    import Digest::Perl::MD5 'md5_hex' \t  } \t}\n"
"\n"
"If the 'Digest::MD5' module is available it is used and if not you take "
"'Digest::Perl::MD5'.\n"
"\n"
"You can also install the Perl part of Digest::MD5 together with Digest::"
"Perl::MD5 and use Digest::MD5 as normal, it falls back to Digest::Perl::MD5 "
"if it cannot load its object files.\n"
"\n"
"For a detailed Documentation see the 'Digest::MD5' module."
msgstr ""
"このモジュールは、より高速な 'Digest::MD5' と同じインターフェイスになっていま"
"す。そのため、下記のようにこれらを相互に交換することができます:\n"
"\n"
"\tBEGIN { \t  eval { \t    require Digest::MD5; \t    import Digest::MD5 "
"'md5_hex' \t  }; \t  if ($@) { # ups, no Digest::MD5 \t    require Digest::"
"Perl::MD5; \t    import Digest::Perl::MD5 'md5_hex' \t  } \t}\n"
"\n"
"上記の例は、 'Digest::MD5' モジュールが利用できる場合はそれを利用し、そうでな"
"い場合は 'Digest::Perl::MD5' を利用します。\n"
"\n"
"もちろん Digest::MD5 と Digest::Perl::MD5 の両方をインストールすることもでき"
"ますし、通常時には Digest::MD5 を利用するようにしておいて、オブジェクトファイ"
"ルを読み込むことができない場合にのみ Digest::Perl::MD5 を利用するようにするこ"
"とができます。\n"
"\n"
"詳しいドキュメンテーションについては、 'Digest::MD5' モジュールをお読みくださ"
"い。"

#. leap/perl-Digest-SHA1/summary
msgid "Perl Interface to the SHA-1 Algorithm"
msgstr "SHA-1 アルゴリズムに対する Perl インターフェイス"

#. leap/perl-Digest-SHA1/description
msgid ""
"  Digest-SHA1 module for perl   The Digest::SHA1 module allows the use of "
"the NIST SHA-1 message digest   algorithm from within Perl programs. The "
"algorithm takes a message of   arbitrary length as input and produces a 160-"
"bit fingerprint or message   digest of the input as output.   Authors: \t"
"\tPeter C. Gutmann, \t\tUwe Hollerbach <uh@alumni.caltech.edu>, \t\tGisle "
"Aas <gisle@aas.no>"
msgstr ""
"  Perl 向け Digest::SHA1 モジュール: Digest::SHA1 モジュールは、 Perl プログ"
"ラム内で NIST SHA-1 メッセージダイジェストアルゴリズムを利用できるようにする"
"仕組みです。このアルゴリズムは任意の長さのメッセージを入力として受け取り、出"
"力として 160 ビットの指紋 (フィンガープリント) もしくはメッセージダイジェスト"
"と呼ばれるものを返します。   作者: \t\tPeter C. Gutmann, \t\tUwe Hollerbach "
"<uh@alumni.caltech.edu>, \t\tGisle Aas <gisle@aas.no>"

#. leap/perl-Dist-CheckConflicts/summary
msgid "declare version conflicts for your dist"
msgstr "配布物内のバージョン矛盾の定義"

#. leap/perl-Dist-CheckConflicts/description
msgid ""
"One shortcoming of the CPAN clients that currently exist is that they have "
"no way of specifying conflicting downstream dependencies of modules. This "
"module attempts to work around this issue by allowing you to specify "
"conflicting versions of modules separately, and deal with them after the "
"module is done installing.\n"
"\n"
"For instance, say you have a module 'Foo', and some other module 'Bar' uses "
"'Foo'. If 'Foo' were to change its API in a non-backwards-compatible way, "
"this would cause 'Bar' to break until it is updated to use the new API. "
"'Foo' can't just depend on the fixed version of 'Bar', because this will "
"cause a circular dependency (because 'Bar' is already depending on 'Foo'), "
"and this doesn't express intent properly anyway - 'Foo' doesn't use 'Bar' at "
"all. The ideal solution would be for there to be a way to specify "
"conflicting versions of modules in a way that would let CPAN clients update "
"conflicting modules automatically after an existing module is upgraded, but "
"until that happens, this module will allow users to do this manually.\n"
"\n"
"This module accepts a hash of options passed to its 'use' statement, with "
"these keys being valid: \n"
"* -conflicts\n"
"\n"
"  A hashref of conflict specifications, where keys are module names, and   "
"values are the last broken version - any version greater than the   "
"specified version should work. \n"
"* -also\n"
"\n"
"  Additional modules to get conflicts from (potentially recursively). This   "
"should generally be a list of modules which use Dist::CheckConflicts,   "
"which correspond to the dists that your dist depends on. (In an ideal   "
"world, this would be intuited directly from your dependency list, but the   "
"dependency list isn't available outside of build time). \n"
"* -dist\n"
"\n"
"  The name of the distribution, to make the error message from   "
"check_conflicts more user-friendly.\n"
"\n"
"The methods listed below are exported by this module into the module that "
"uses it, so you should call these methods on your module, not Dist::"
"CheckConflicts.\n"
"\n"
"As an example, this command line can be used to update your modules, after "
"installing the 'Foo' dist (assuming that 'Foo::Conflicts' is the module in "
"the 'Foo' dist which uses Dist::CheckConflicts):\n"
"\n"
"    perl -MFoo::Conflicts -e'print \"$_\\n\"         for map { $_-"
">{package} } Foo::Conflicts->calculate_conflicts' | cpanm\n"
"\n"
"As an added bonus, loading your conflicts module will provide warnings at "
"runtime if conflicting modules are detected (regardless of whether they are "
"loaded before or afterwards)."
msgstr ""
"現在存在する CPAN クライアントの欠点のうちの 1 つに、モジュール間のダウンスト"
"リーム側の矛盾解決方法がない、という点があります。このモジュールは、このよう"
"な問題に対応するため、個別のモジュールに対して矛盾するバージョン指定を許可"
"し、モジュールのインストール完了後にそれらを解決します。\n"
"\n"
"たとえばモジュール 'Foo' がインストール済みで、それとは異なるモジュール "
"'Bar' が 'Foo' を利用している場合、 'Foo' が後方互換性のない方法で API の変更"
"を行なってしまうと、 'Bar' は 'Foo' の新しいバージョンを利用するように書き換"
"えないかぎり、利用できなくなってしまいます。また、 'Foo' を 'Bar' の特定の"
"バージョンに依存させてしまうと、それは依存関係の循環になってしまい (なぜなら "
"'Bar' は既に 'Foo' の依存関係下にあるので) 、結果として 'Foo' は 'Bar' を全く"
"利用できなくなってしまいます。これに対する現実的な解決方法としては、特定のモ"
"ジュールから別のモジュールに対して、矛盾するバージョンを指定する方法を用意"
"し、 CPAN クライアントが既存のモジュールをアップグレードしたタイミングで、矛"
"盾するモジュールも更新させるようにします。今のところ、アップグレードの処理は"
"自動的に行なうことはできず、手作業で実施する必要があります。\n"
"\n"
"このモジュールは、 'use' ステートメントで渡されるオプションをハッシュ形式で受"
"け付けます。下記のようなキーが用意されています:\n"
"* -conflicts\n"
"\n"
"  矛盾の一覧をハッシュ参照で指定します。このとき、キーをモジュール名、値を互"
"換性の異なる直近のバージョンとします。ここで指定した値よりも大きいバージョン"
"であれば、問題なく動作するものと判断されます。\n"
"* -also\n"
"\n"
"  矛盾が発生する追加のモジュール (おそらく再帰的に利用するモジュール) を指定"
"します。これは一般に Dist::CheckConflicts を使用するモジュールの一覧で、対象"
"の配布物が依存する先の配布物です (実際にはお使いのモジュールが直接依存する先"
"ですが、構築するまでは依存関係の一覧がわからないためです) 。\n"
"* -dist\n"
"\n"
"  配布物の名前を指定します。これは check_conflicts から出力されるメッセージを"
"わかりやすくする目的で指定します。\n"
"\n"
"上記に示したメソッドは、このモジュールから使用できるように公開されたものであ"
"るため、 Dist::CheckConflicts を直接呼び出すのではなく、これらのメソッドを呼"
"び出してください。\n"
"\n"
"たとえば下記のようなコマンドラインは、'Foo' の配布物をインストールしたあと、"
"お使いのモジュールを更新する際に利用することができるものです (ここで、'Foo::"
"Conflicts' は 'Foo' 配布物内にあるモジュールで、 Dist::CheckConflicts を使用"
"するモジュールであるものとします):\n"
"\n"
"    perl -MFoo::Conflicts -e'print \"$_\\n\"         for map { $_-"
">{package} } Foo::Conflicts->calculate_conflicts' | cpanm\n"
"\n"
"上記に加えて、スクリプトの実行時に、矛盾するモジュールの読み込んだ段階で警告"
"を表示することができます (先に読み込んだものでも、後から読み込んだものでも動"
"作します) 。"

#. leap/perl-Dist-Zilla/summary
msgid "Distribution Builder; Installer Not Included!"
msgstr "配布物構築モジュール (インストーラは含まれていません)"

#. leap/perl-Dist-Zilla/description
msgid ""
"Dist::Zilla builds distributions of code to be uploaded to the CPAN. In this "
"respect, it is like ExtUtils::MakeMaker, Module::Build, or Module::Install. "
"Unlike those tools, however, it is not also a system for installing code "
"that has been downloaded from the CPAN. Since it's only run by authors, and "
"is meant to be run on a repository checkout rather than on published, "
"released code, it can do much more than those tools, and is free to make "
"much more ludicrous demands in terms of prerequisites.\n"
"\n"
"If you have access to the web, you can learn more and find an interactive "
"tutorial at *at http://dzil.org/*. If not, try Dist::Zilla::Tutorial."
msgstr ""
"Dist::Zilla は、 CPAN にアップロードするためのコード配布物を構築することがで"
"きるモジュールです。構築という観点では ExtUtils::MakeMaker や Module::Build, "
"Module::Install に似た動作をしますが、このモジュールは CPAN からダウンロード"
"したコードをインストールするためのシステムではない、という点が上げられます。 "
"このモジュールはその著者が実行するものであって、コードを公開するというより"
"も、リポジトリのチェックアウトとして実行するための仕組みです。この点では類似"
"のモジュールよりずっと多くのことを実施でき、前提条件の処理の面倒を省くことが"
"できるようになります。\n"
"\n"
"Web にアクセスできる場合は、 http://dzil.org/ から詳細や対話的なチュートリア"
"ルをお読みいただくことができます。アクセスできない場合は、 Dist::Zilla::"
"Tutorial をお読みください。"

#. leap/perl-Dumbbench/summary
msgid "More reliable benchmarking with the least amount of thinking"
msgstr "最低限の考え方で構築できる、より信頼のおけるベンチマーク処理"

#. leap/perl-Dumbbench/description
msgid ""
"This module attempts to implement reasonably robust benchmarking with little "
"extra effort and expertise required from the user. That is to say, "
"benchmarking using this module is likely an improvement over\n"
"\n"
"  time some-command --to --benchmark\n"
"\n"
"or\n"
"\n"
"  use Benchmark qw/timethis/;   timethis(1000, 'system(\"some-command"
"\", ...)');\n"
"\n"
"The module currently works similar to the former command line, except (in "
"layman terms) it will run the command many times, estimate the uncertainty "
"of the result and keep iterating until a certain user-defined precision has "
"been reached. Then, it calculates the resulting uncertainty and goes through "
"some pain to discard bad runs and subtract overhead from the timings. The "
"reported timing includes an uncertainty, so that multiple benchmarks can "
"more easily be compared.\n"
"\n"
"Please note that 'Dumbbench' works entirely with wallclock time as reported "
"by 'Time::HiRes'' 'time()' function."
msgstr ""
"このモジュールは最小限の手間と最小限のユーザの専門知識で、それなりに強健なベ"
"ンチマーク処理を実装するための試みです。言い換えれば、このモジュールを利用し"
"たベンチマーク処理は、\n"
"\n"
"  time some-command --to --benchmark\n"
"\n"
"や\n"
"\n"
"  use Benchmark qw/timethis/;   timethis(1000, 'system(\"some-command"
"\", ...)');\n"
"\n"
"などに比べて適切な処理になるようになっています。このモジュールは現時点では、"
"従来のコマンドラインと似た動作を行なうようになっていますが、これは (分かりや"
"すく言うと) コマンドを何度も起動する代わりに、結果の揺らぎを予測してユーザが"
"指定した精度に達するまで繰り返し実施する処理を行ないます。これにより結果とし"
"て生じる不確実性を計算し、悪い実行を破棄してタイミングからオーバーヘッドを引"
"くことができるようになります。報告されたタイミング情報にはある程度の不確実性"
"が含まれていますので、複数回のベンチマーク処理を容易に比較できるようになりま"
"す。\n"
"\n"
"なお、 'Dumbbench' は 'Time::HiRes'' 'time()' で報告されるクロック情報を利用"
"して動作します。"

#. leap/perl-Email-Abstract/summary
msgid "Unified interface to mail representations"
msgstr "メール表現への統一されたインターフェース"

#. leap/perl-Email-Abstract/description
msgid ""
"'Email::Abstract' provides module writers with the ability to write simple, "
"representation-independent mail handling code. For instance, in the cases of "
"'Mail::Thread' or 'Mail::ListDetector', a key part of the code involves "
"reading the headers from a mail object. Where previously one would either "
"have to specify the mail class required, or to build a new object from "
"scratch, 'Email::Abstract' can be used to perform certain simple operations "
"on an object regardless of its underlying representation.\n"
"\n"
"'Email::Abstract' currently supports 'Mail::Internet', 'MIME::Entity', "
"'Mail::Message', 'Email::Simple', 'Email::MIME', and 'Courriel'. Other "
"representations are encouraged to create their own 'Email::Abstract::*' "
"class by copying 'Email::Abstract::EmailSimple'. All modules installed under "
"the 'Email::Abstract' hierarchy will be automatically picked up and used."
msgstr ""
"'Email::Abstract' はモジュールの作成者に対して、シンプルで形式に依存しない"
"メール処理コードの作成を支援します。たとえば 'Mail::Thread' や 'Mail::"
"ListDetector' では、メールオブジェクトからのヘッダの読み出し機能がコードの主"
"要部分となりますが、 'Email::Abstract' では、必要なメール処理クラスを指定する"
"か、ゼロから作成することで、実際の表記形式に関係なく統一的な操作を行なうこと"
"ができるようになります。\n"
"\n"
"'Email::Abstract' は、現在 'Mail::Internet', 'MIME::Entity', 'Mail::"
"Message', 'Email::Simple', 'Email::MIME', 'Courriel' のそれぞれに対応していま"
"す。その他の表現形式に対応させたい場合は、 'Email::Abstract::EmailSimple' ク"
"ラスをコピーして、独自の 'Email::Abstract::*' クラスを作成することで行なうこ"
"とができます。なお、 'Email::Abstract' の階層構造下にインストールしたモジュー"
"ルであれば、それらは自動的に読み込まれて使用することができます。"

#. leap/perl-Email-Address/summary
msgid "RFC 2822 Address Parsing and Creation"
msgstr "RFC 2822 のアドレス処理と作成"

#. leap/perl-Email-Address/description
msgid ""
"This class implements a regex-based RFC 2822 parser that locates email "
"addresses in strings and returns a list of 'Email::Address' objects found. "
"Alternatively you may construct objects manually. The goal of this software "
"is to be correct, and very very fast.\n"
"\n"
"Version 1.909 and earlier of this module had vulnerabilies (at https://cve."
"mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-7686) and (at https://cve.mitre."
"org/cgi-bin/cvename.cgi?name=CVE-2018-12558) which allowed specially "
"constructed email to cause a denial of service. The reported vulnerabilities "
"and some other pathalogical cases (meaning they really shouldn't occur in "
"normal email) have been addressed in version 1.910 and newer. If you're "
"running version 1.909 or older, you should update!\n"
"\n"
"Alternatively, you could switch to *Email::Address::XS* which has a backward "
"compatible API."
msgstr ""
"このクラスは正規表現をベースとして、電子メールアドレスの文字列表記仕様である "
"RFC 2822 パーサを実装しています。このクラスは、検出されたアドレスを 'Email::"
"Address' オブジェクトのリストとして返します。必要であれば、独自にオブジェクト"
"を構築することもできます。このソフトウエアの目的は、正しく非常に高速なクラス"
"であることです。\n"
"\n"
"バージョン 1.909 およびそれ以前では、このモジュールには脆弱性 (https://cve."
"mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-7686 および https://cve.mitre."
"org/cgi-bin/cvename.cgi?name=CVE-2018-12558) が存在し、特殊な構造の電子メール"
"アドレスを与えられた際に、サービス拒否攻撃を起こしうる問題がありました。報告"
"されている脆弱性やその他の特殊ケース (通常の電子メールアドレスでは使用されな"
"いもの) は、バージョン 1.910 およびそれ以降で解決されています。バージョン "
"1.909 およびそれ以前をお使いの場合は、更新を行なってください。\n"
"\n"
"このほか、 API に後方互換性を有した *Email::Address::XS* に切り替えることもで"
"きます。"

#. leap/perl-Email-Address-XS/summary
msgid "Parse and format RFC 5322 email addresses and groups"
msgstr "RFC 5322 における電子メールアドレスとグループの処理および書式化"

#. leap/perl-Email-Address-XS/description
msgid ""
"This module implements at https://tools.ietf.org/html/rfc5322 parser and "
"formatter of email addresses and groups. It parses an input string from "
"email headers which contain a list of email addresses or a groups of email "
"addresses (like From, To, Cc, Bcc, Reply-To, Sender, ...). Also it can "
"generate a string value for those headers from a list of email addresses "
"objects. Module is backward compatible with at https://tools.ietf.org/html/"
"rfc2822 and at https://tools.ietf.org/html/rfc822.\n"
"\n"
"Parser and formatter functionality is implemented in XS and uses shared code "
"from Dovecot IMAP server.\n"
"\n"
"It is a drop-in replacement for the Email::Address module which has several "
"security issues. E.g. issue at https://cve.mitre.org/cgi-bin/cvename.cgi?"
"name=CVE-2015-7686, which allows remote attackers to cause denial of "
"service, is still present in Email::Address version 1.908.\n"
"\n"
"Email::Address::XS module was created to finally fix CVE-2015-7686.\n"
"\n"
"Existing applications that use Email::Address module could be easily "
"switched to Email::Address::XS module. In most cases only changing 'use "
"Email::Address' to 'use Email::Address::XS' and replacing every 'Email::"
"Address' occurrence with 'Email::Address::XS' is sufficient.\n"
"\n"
"So unlike Email::Address, this module does not use regular expressions for "
"parsing but instead native XS implementation parses input string "
"sequentially according to RFC 5322 grammar.\n"
"\n"
"Additionally it has support also for named groups and so can be use instead "
"of the Email::Address::List module.\n"
"\n"
"If you are looking for the module which provides object representation for "
"the list of email addresses suitable for the MIME email headers, see Email::"
"MIME::Header::AddressList."
msgstr ""
"このモジュールは https://tools.ietf.org/html/rfc5322 で規定されている電子メー"
"ルアドレスとグループに関する処理と書式化を実装しています。電子メールヘッダ "
"(From, Cc, Bcc, Reply-To, Sender, ...) 内の文字列を処理して、この中に含まれて"
"いる電子メールアドレスやそのグループを読み取ることができます。また、電子メー"
"ルアドレスのオブジェクトから、これらのヘッダに対して設定する文字列を生成する"
"こともできます。なお、このモジュールは https://tools.ietf.org/html/rfc2822 "
"と https://tools.ietf.org/html/rfc822 で規定されている仕様との後方互換性を有"
"しています。\n"
"\n"
"処理と書式化の機能は XS 内で実装され、 Dovecot IMAP サーバとコードを共有して"
"います。\n"
"\n"
"また、このモジュールはいくつかのセキュリティ問題 (たとえば https://cve.mitre."
"org/cgi-bin/cvename.cgi?name=CVE-2015-7686 (Email::Address バージョン 1.908 "
"内に存在する、リモートの攻撃者からのサービス拒否攻撃) など) を抱えている "
"Email::Address モジュールの置き換えとして使用することもできます。\n"
"\n"
"Email::Address::XS モジュールは、 CVE-2015-7686 を究極的に解決する目的で作ら"
"れています。\n"
"\n"
"Email::Address モジュールを使用しているアプリケーションは、容易に Email::"
"Address::XS モジュールに置き換えて使用することができます。ほとんどの場合にお"
"いて、やるべきことは 'use Email::Address' を 'use Email::Address::XS' に置き"
"換え、 'Email::Address' が現われている箇所があれば、それらを 'Email::"
"Address::XS' で置き換えるだけです。\n"
"\n"
"なお、 Email::Address とは異なり、このモジュールは正規表現を使用していませ"
"ん。その代わりに、ネイティブな XS 実装を利用して、 RFC 5322 の書式に準拠する"
"文字列処理を行なっています。\n"
"\n"
"このほか、名前付きグループへの対応も図られていて、  Email::Address::List モ"
"ジュールの代替として使用することもできます。\n"
"\n"
"なお、 MIME 電子メールヘッダ内向けの電子メールアドレスリストのオブジェクト表"
"記をご希望の場合は、 Email::MIME::Header::AddressList モジュールをご覧くださ"
"い。"

#. leap/perl-Email-Date-Format/summary
msgid "Produce RFC 2822 date strings"
msgstr "RFC 2822 日付文字列の生成"

#. leap/perl-Email-Date-Format/description
msgid ""
"This module provides a simple means for generating an RFC 2822 compliant "
"datetime string. (In case you care, they're not RFC 822 dates, because they "
"use a four digit year, which is not allowed in RFC 822.)"
msgstr ""
"このモジュールは RFC 2822 互換の日時文字列を生成するためのシンプルな方法を提"
"供します。 (なお、 RFC 822 形式の日付ではないことに注意してください。 RFC "
"822 では許可されない 4 桁の年を使用するためです)"

#. leap/perl-Email-MIME/summary
msgid "Easy MIME message handling"
msgstr "簡易 MIME メッセージ処理"

#. leap/perl-Email-MIME/description
msgid ""
"This is an extension of the Email::Simple module, to handle MIME encoded "
"messages. It takes a message as a string, splits it up into its constituent "
"parts, and allows you access to various parts of the message. Headers are "
"decoded from MIME encoding."
msgstr ""
"これは Email::Simple モジュールの拡張で、 MIME エンコードされたメッセージを処"
"理するためのものです。処理対象のメッセージは文字列として受け付け、それぞれの"
"パーツに分解したのち、メッセージ内の各パートにアクセスできるようになります。"
"ヘッダも MIME エンコーディングからデコードされます。"

#. leap/perl-Email-MIME-ContentType/summary
#. leap/perl-Email-MIME-ContentType/description
msgid "Parse and build a MIME Content-Type or Content-Disposition Header"
msgstr "MIME の Content-Type, Content-Disposition ヘッダの処理とビルド"

#. leap/perl-Email-MIME-Encodings/summary
msgid "A unified interface to MIME encoding and decoding"
msgstr "MIME メッセージのエンコードとデコードを行なう統合インターフェイス"

#. leap/perl-Email-MIME-Encodings/description
msgid ""
"This module simply wraps 'MIME::Base64' and 'MIME::QuotedPrint' so that you "
"can throw the contents of a 'Content-Transfer-Encoding' header at some text "
"and have the right thing happen.\n"
"\n"
"'MIME::Base64', 'MIME::QuotedPrint', 'Email::MIME'."
msgstr ""
"このモジュールは、シンプルに 'MIME::Base64' と 'MIME::QuotedPrint' をラッピン"
"グするもので、これによりいくつかのテキストに対して 'Content-Transfer-"
"Encoding' ヘッダの内容を設定することができるほか、このヘッダによる影響をうま"
"く処理することができます。\n"
"\n"
"'MIME::Base64', 'MIME::QuotedPrint', 'Email::MIME'."

#. leap/perl-Email-MessageID/summary
msgid "Generate world unique message-ids"
msgstr "世界中でユニークなメッセージ ID の生成"

#. leap/perl-Email-MessageID/description
msgid ""
"Message-ids are optional, but highly recommended, headers that identify a "
"message uniquely. This software generates a unique message-id."
msgstr ""
"メッセージ ID は任意で指定するものですが、強く推奨されるヘッダです。このヘッ"
"ダはメッセージの唯一性を識別するためのもので、このソフトウエアではそのような"
"メッセージ ID を生成することができます。"

#. leap/perl-Email-Reply/summary
msgid "Reply to an Email Message"
msgstr "電子メールメッセージへの返答"

#. leap/perl-Email-Reply/description
msgid ""
"This software takes the hard out of generating replies to email messages."
msgstr ""
"このソフトウエアは、電子メールメッセージへの返答を生成する処理を行ないます。"

#. leap/perl-Email-Send/summary
msgid "Simply Sending Email"
msgstr "シンプルなメール送信"

#. leap/perl-Email-Send/description
msgid ""
"This module provides a very simple, very clean, very specific interface to "
"multiple Email mailers. The goal of this software is to be small and simple, "
"easy to use, and easy to extend."
msgstr ""
"このモジュールは非常にシンプルでクリーン、かつ非常に独特なインターフェイスを"
"持つ電子メールメーラです。このソフトウエアは、小さくてシンプル、使いやすく拡"
"張しやすい仕組みを目指しています。"

#. leap/perl-Email-Sender/summary
msgid "Library for sending email"
msgstr "メール送信用ライブラリ"

#. leap/perl-Email-Sender/description
msgid ""
"Email::Sender replaces the old and sometimes problematic Email::Send "
"library, which did a decent job at handling very simple email sending tasks, "
"but was not suitable for serious use, for a variety of reasons.\n"
"\n"
"Most users will be able to use Email::Sender::Simple to send mail. Users "
"with more specific needs should look at the available Email::Sender::"
"Transport classes.\n"
"\n"
"Documentation may be found in Email::Sender::Manual, and new users should "
"start with Email::Sender::Manual::QuickStart."
msgstr ""
"Email::Sender は、古くて問題の多い Email::Send ライブラリを置き換えるためのも"
"ので、非常にシンプルな送信タスク処理によって、きちんとした処理を行ないます。"
"ただし、様々な理由により、本格的な利用に耐えるものではありません。\n"
"\n"
"多くの場合、 Email::Sender::Simple を利用してメールを送信することができます。"
"より固有の要件がある場合は、利用可能な Email::Sender::Transport クラスを使用"
"します。\n"
"\n"
"ドキュメンテーションは Email::Sender::Manual 内にあります。また、新規ユーザの"
"場合は Email::Sender::Manual::QuickStart をご覧ください。"

#. leap/perl-Email-Simple/summary
msgid "Simple Parsing of Rfc2822 Message Format and Headers"
msgstr "RFC2822 メッセージおよびヘッダ形式のシンプルな処理"

#. leap/perl-Email-Simple/description
msgid ""
"The Email:: namespace was begun as a reaction against the increasing "
"complexity and bugginess of Perl's existing email modules. 'Email::*' "
"modules are meant to be simple to use and to maintain, pared to the bone, "
"fast, minimal in their external dependencies, and correct."
msgstr ""
"Email:: のネームスペースは、 Perl における電子メールモジュールの複雑さとバグ"
"の多さを反省するための活動として始まったものです。 'Email::*' モジュールは、"
"シンプルに使ったりメンテナンスしたりすることができて、しっかりした骨格と高速"
"性、外部依存性の少なさを目的としています。"

#. leap/perl-Email-Valid/summary
msgid "Check validity of Internet email addresses"
msgstr "インターネットの電子メールアドレスに対する正当性の検証"

#. leap/perl-Email-Valid/description
msgid ""
"This module determines whether an email address is well-formed, and "
"optionally, whether a mail host exists for the domain.\n"
"\n"
"Please note that there is no way to determine whether an address is "
"deliverable without attempting delivery (for details, see at http://perldoc."
"perl.org/perlfaq9.html#How-do-I-check-a-valid-mail-address)."
msgstr ""
"このモジュールは、電子メールアドレスが正しい形式であるかどうかを確認し、必要"
"であればそのドメインに対するメールホストが存在しているかどうかを確認しま"
"す。\n"
"\n"
"ただし、指定したメールアドレスに対して配送が可能かどうかは、実際に配送してみ"
"なければわからないことに注意してください (詳しくは http://perldoc.perl.org/"
"perlfaq9.html#How-do-I-check-a-valid-mail-address をお読みください) 。"

#. leap/perl-Encode/summary
msgid "Character encodings in Perl"
msgstr "Perl 内の文字エンコーディング"

#. leap/perl-Encode/description
msgid ""
"The 'Encode' module provides the interface between Perl strings and the rest "
"of the system. Perl strings are sequences of _characters_.\n"
"\n"
"The repertoire of characters that Perl can represent is a superset of those "
"defined by the Unicode Consortium. On most platforms the ordinal values of a "
"character as returned by 'ord(_S_)' is the _Unicode codepoint_ for that "
"character. The exceptions are platforms where the legacy encoding is some "
"variant of EBCDIC rather than a superset of ASCII; see perlebcdic.\n"
"\n"
"During recent history, data is moved around a computer in 8-bit chunks, "
"often called \"bytes\" but also known as \"octets\" in standards documents. "
"Perl is widely used to manipulate data of many types: not only strings of "
"characters representing human or computer languages, but also \"binary\" "
"data, being the machine's representation of numbers, pixels in an image, or "
"just about anything.\n"
"\n"
"When Perl is processing \"binary data\", the programmer wants Perl to "
"process \"sequences of bytes\". This is not a problem for Perl: because a "
"byte has 256 possible values, it easily fits in Perl's much larger \"logical "
"character\".\n"
"\n"
"This document mostly explains the _how_. perlunitut and perlunifaq explain "
"the _why_."
msgstr ""
"'Encode' モジュールは Perl の文字列とその他のシステムとの間でのインターフェイ"
"スを提供する仕組みです。 Perl の文字列は _文字_ の列を意味します。\n"
"\n"
"Perl で扱うことのできる文字は、 Unicode コンソーシアムが定義する Unicode の"
"スーパーセットです。ほとんどのプラットフォームでは、 'ord(_S)' が返す文字の値"
"は、それぞれの文字に対する _Unicode コードポイント_ になっています。ただし、 "
"ASCII のスーパーセットではなく EBCDIC などの文字コードを使用する古いシステム"
"もあります。詳しくは perlebcdic をお読みください。\n"
"\n"
"最近の傾向では、データは標準の文書内で \"バイト\" と呼ばれる 8 ビットのチャン"
"ク (塊) ではなく、 \"オクテット\" と呼ばれるようになっています。 Perl では幅"
"広く様々な種類のデータを扱うことができます: 人間やコンピュータ言語にとって意"
"味のある文字列だけでなく、 \"バイナリ\" データさえも扱うようになっています。"
"この \"バイナリ\" データにはたとえば、コンピュータ内での数値表現のほか、画像"
"のピクセル情報などであったりします。\n"
"\n"
"Perl が \"バイナリデータ\" を扱っている場合、プログラマは Perl に対して、 "
"\"バイト列\" を処理することを期待しています。これは Perl においては問題とはな"
"りません。なぜなら、バイト値には 256 種類の値がありうるため、 Perl のより広い"
"幅の \"論理文字\" に簡単に当てはめることができるためです。\n"
"\n"
"この文書では、 perlunitut と perlunifaq の使い方と、理由について説明していま"
"す。"

#. leap/perl-Encode-Detect/summary
msgid "An Encode::Encoding subclass that detects the encoding of data"
msgstr "データのエンコーディングを検出するための Encode::Encoding サブクラス"

#. leap/perl-Encode-Detect/description
msgid ""
"This Perl module is an Encode::Encoding subclass that uses Encode::Detect::"
"Detector to determine the charset of the input data and then decodes it "
"using the encoder of the detected charset.\n"
"\n"
"It is similar to Encode::Guess, but does not require the configuration of a "
"set of expected encodings. Like Encode::Guess, it only supports decoding--it "
"cannot encode.\n"
"\n"
"Authors:\n"
"--------     John Gardiner Myers <jgmyers@proofpoint.com>"
msgstr ""
"この Perl モジュールは Encode::Encoding サブクラスと呼ばれ、 Encode::Detect::"
"Detector を利用して入力データの文字コードセットを判別し、検出した文字セットで"
"デコード処理を行ないます。\n"
"\n"
"このモジュールは Encode::Guess に似た仕組みですが、期待するエンコーディングを"
"設定する必要がない点が異なります。また、 Encode::Guess のようにデコードのみに"
"対応しています。そのため、エンコード処理は用意されていません。\n"
"\n"
"作者:\n"
"--------     John Gardiner Myers <jgmyers@proofpoint.com>"

#. leap/perl-Encode-EUCJPASCII/summary
msgid "An eucJP-open mapping"
msgstr "eucJP-open マッピング"

#. leap/perl-Encode-EUCJPASCII/description
msgid ""
"This module provides eucJP-ascii, one of eucJP-open mappings, and its "
"derivative. Following encodings are supported.\n"
"\n"
"  Canonical    Alias                           Description   "
"--------------------------------------------------------------   eucJP-"
"ascii                                  eucJP-ascii                qr/\\beuc-?"
"jp(-?open)?(-?19970715)?-?ascii$/i   x-iso2022jp-"
"ascii                            7-bit counterpart                qr/\\b(x-)?"
"iso-?2022-?jp-?ascii$/i   "
"-------------------------------------------------------------- \n"
"*Note*: 'x-iso2022jp-ascii' is unofficial encoding name: It had never been "
"registered by any standards bodies."
msgstr ""
"このモジュールは eucJP-ascii と呼ばれる eucJP-open マッピングのうちの 1 つ"
"と、その派生系を提供します。下記のエンコーディングに対応しています。\n"
"\n"
"  Canonical    Alias                           Description   "
"--------------------------------------------------------------   eucJP-"
"ascii                                  eucJP-ascii                qr/\\beuc-?"
"jp(-?open)?(-?19970715)?-?ascii$/i   x-iso2022jp-"
"ascii                            7-bit counterpart                qr/\\b(x-)?"
"iso-?2022-?jp-?ascii$/i   "
"--------------------------------------------------------------\n"
"*注意*: 'x-iso2022jp-ascii' は非公式のエンコーディング名です。標準化機関に登"
"録されているものではありません。"

#. leap/perl-Encode-HanExtra/summary
msgid "Extra sets of Chinese encodings"
msgstr "中国語エンコード向けの拡張セット"

#. leap/perl-Encode-HanExtra/description
msgid ""
"Perl 5.7.3 and later ships with an adequate set of Chinese encodings, "
"including the most used CP950, CP936 (also known as GBK), Big5, Big5-HKSCS, "
"EUC-CN, HZ, and ISO-IR-165.\n"
"\n"
"However, the numbers of Chinese encodings are staggering, and a complete "
"coverage will easily increase the size of perl distribution by several "
"megabytes; hence, this CPAN module tries to provide the rest of them."
msgstr ""
"Perl 5.7.3 以降のバージョンでは、広く使われている CP950, CP936 (GBK としても"
"知られています), Big5, Big5-HKSCS, EUC-CN, HZ, ISO-IR-165 など、中国語エン"
"コードに対する適切な機能セットが 含まれています。 \n"
"\n"
"しかしながら、多くの中国語エンコードは完全なものではなく、 完全にカバーしよう"
"とすると Perl ディストリビューションの配布物がメガバイト単位で 肥大化してしま"
"うという問題があります; そのため、この CPAN モジュールで残りの部分を 提供して"
"います。"

#. leap/perl-Encode-JIS2K/summary
msgid "JIS X 0212 (aka JIS 2000) Encodings"
msgstr "JIS X 0212 (別名 JIS 2000) エンコード"

#. leap/perl-Encode-JIS2K/description
msgid ""
"This module implements encodings that covers JIS X 0213 charset (AKA JIS "
"2000, hence the module name).\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Dan Kogai <dankogai@dan.co.jp>"
msgstr ""
"このモジュールは JIS X 0213 文字セット (これは JIS 2000 とも呼ばれ、モジュー"
"ル名にもなっています) をカバーするエンコードを実装しています。\n"
"\n"
"\n"
"作者:\n"
"--------     Dan Kogai <dankogai@dan.co.jp>"

#. leap/perl-Encode-Locale/summary
msgid "Determine the locale encoding"
msgstr "ロケールエンコードの判断"

#. leap/perl-Encode-Locale/description
msgid ""
"In many applications it's wise to let Perl use Unicode for the strings it "
"processes. Most of the interfaces Perl has to the outside world are still "
"byte based. Programs therefore need to decode byte strings that enter the "
"program from the outside and encode them again on the way out.\n"
"\n"
"The POSIX locale system is used to specify both the language conventions "
"requested by the user and the preferred character set to consume and output. "
"The 'Encode::Locale' module looks up the charset and encoding (called a "
"CODESET in the locale jargon) and arranges for the the Encode manpage module "
"to know this encoding under the name \"locale\". It means bytes obtained "
"from the environment can be converted to Unicode strings by calling 'Encode::"
"encode(locale => $bytes)' and converted back again with 'Encode::"
"decode(locale => $string)'.\n"
"\n"
"Where file systems interfaces pass file names in and out of the program we "
"also need care. The trend is for operating systems to use a fixed file "
"encoding that don't actually depend on the locale; and this module "
"determines the most appropriate encoding for file names. The the Encode "
"manpage module will know this encoding under the name \"locale_fs\". For "
"traditional Unix systems this will be an alias to the same encoding as "
"\"locale\".\n"
"\n"
"For programs running in a terminal window (called a \"Console\" on some "
"systems) the \"locale\" encoding is usually a good choice for what to expect "
"as input and output. Some systems allows us to query the encoding set for "
"the terminal and 'Encode::Locale' will do that if available and make these "
"encodings known under the 'Encode' aliases \"console_in\" and \"console_out"
"\". For systems where we can't determine the terminal encoding these will be "
"aliased as the same encoding as \"locale\". The advice is to use \"console_in"
"\" for input known to come from the terminal and \"console_out\" for output "
"to the terminal.\n"
"\n"
"In addition to arranging for various Encode aliases the following functions "
"and variables are provided: \n"
"* decode_argv( ) \n"
"* decode_argv( Encode::FB_CROAK )\n"
"\n"
"  This will decode the command line arguments to perl (the '@ARGV' array)   "
"in-place.\n"
"\n"
"  The function will by default replace characters that can't be decoded by   "
"\"\\x{FFFD}\", the Unicode replacement character.\n"
"\n"
"  Any argument provided is passed as CHECK to underlying Encode::decode()   "
"call. Pass the value 'Encode::FB_CROAK' to have the decoding croak if not   "
"all the command line arguments can be decoded. See the Encode/\"Handling   "
"Malformed Data\" manpage for details on other options for CHECK. \n"
"* env( $uni_key ) \n"
"* env( $uni_key => $uni_value )\n"
"\n"
"  Interface to get/set environment variables. Returns the current value as   "
"a Unicode string. The $uni_key and $uni_value arguments are expected to   be "
"Unicode strings as well. Passing 'undef' as $uni_value deletes the   "
"environment variable named $uni_key.\n"
"\n"
"  The returned value will have the characters that can't be decoded   "
"replaced by \"\\x{FFFD}\", the Unicode replacement character.\n"
"\n"
"  There is no interface to request alternative CHECK behavior as for   "
"decode_argv(). If you need that you need to call encode/decode yourself.   "
"For example:\n"
"\n"
"      my $key = Encode::encode(locale => $uni_key, Encode::FB_CROAK);       "
"my $uni_value = Encode::decode(locale => $ENV{$key}, Encode::FB_CROAK); \n"
"* reinit( ) \n"
"* reinit( $encoding )\n"
"\n"
"  Reinitialize the encodings from the locale. You want to call this   "
"function if you changed anything in the environment that might influence   "
"the locale.\n"
"\n"
"  This function will croak if the determined encoding isn't recognized by   "
"the Encode module.\n"
"\n"
"  With argument force $ENCODING_... variables to set to the given value. \n"
"* $ENCODING_LOCALE\n"
"\n"
"  The encoding name determined to be suitable for the current locale. the   "
"Encode manpage know this encoding as \"locale\". \n"
"* $ENCODING_LOCALE_FS\n"
"\n"
"  The encoding name determined to be suitable for file system interfaces   "
"involving file names. the Encode manpage know this encoding as   \"locale_fs"
"\". \n"
"* $ENCODING_CONSOLE_IN \n"
"* $ENCODING_CONSOLE_OUT\n"
"\n"
"  The encodings to be used for reading and writing output to the a "
"console.   the Encode manpage know these encodings as \"console_in\" and   "
"\"console_out\"."
msgstr ""
"多くのアプリケーションでは、 Perl での文字列操作に Unicode を使用するのがよい"
"ものとされています。ただし Perl 以外の多くのインターフェイスでは現在もバイト"
"ベースのものが利用されているため、 Perl のプログラム側ではバイト文字列をデ"
"コードして取り込み、エンコードして取り出す作業が必要になります。\n"
"\n"
"POSIX のロケールシステムは、ユーザから要求のあった言語仕様と入出力に利用する"
"文字セットの間で使用するものです。 'Encode::Locale' モジュールは文字セット(ロ"
"ケール用語では CODESET とも言います) を参照してエンコードを行ない、このエン"
"コードを \"ロケール\" の名称で知るために Encode のモジュールを配置します。こ"
"れにより、この環境から取得できるバイトは、 'Encode::encode(locale => "
"$bytes)'で Unicode 文字列を変換したり、 'Encode::decode(locale => "
"$string)'で Unicode 文字列に戻したりすることができるようになります。\n"
"\n"
"ファイルシステムのインターフェイスでは、プログラムとのファイル名入出力に際し"
"てこのような処理を行なう必要があります。オペレーティングシステム側では一般"
"に、ロケールには依存しない固定のファイル名エンコーディングを行なうため、この"
"モジュールではファイル名に対して最も適切なエンコーディングを判断することがで"
"きます。Encode のマニュアルページでは、ファイル名用に最も適切なエンコーディン"
"グが\"locale_fs\" として書かれています。従来の Unix システムでは、 \"locale"
"\" と同じエンコーディングになっています。\n"
"\n"
"端末ウインドウ内で動作するプログラム (\"コンソール\" プログラムとも呼びます)"
"の場合、 \"locale\" エンコーディングは入出力に期待するものを判断するための材"
"料として利用することができます。システムによっては、端末側にエンコーディング"
"セットを問い合わせることができるものもあり、 'Encode::Locale' では可能な限り"
"これを使用して\"console_in\" と \"console_out\" の別名で 'Encode' 内のエン"
"コーディングを判断します。端末のエンコーディングを判断できないシステムの場合"
"は、 \"locale\" と同じエンコーディングを使用します。端末から入力されるデータ"
"に対しては \"console_in\" を使用し、端末に出力するデータに対しては "
"\"console_out\" を使用することをお勧めします。\n"
"\n"
"様々なエンコーディング別名を配置することができるほか、下記のような関数や変数"
"が提供されています:\n"
"* decode_argv( )\n"
"* decode_argv( Encode::FB_CROAK )\n"
"\n"
"  上記の関数は、コマンドラインパラメータ ('@ARGV' 配列) を Perl に取り込む"
"際、   デコード処理を行ないます。\n"
"\n"
"  この関数は、既定ではデコードできない文字を \"\\x{FFFD}\" (Unicode の未定義"
"扱い  文字) に置き換えます。\n"
"\n"
"  指定されるパラメータは Encode::decode() を呼び出すことで CHECK (チェック) "
"が行なわれます。すべてのコマンドラインパラメータがデコードできない場合"
"は、'Encode::FB_CROAK' の値を渡すことで、デコード用の制御を行ないます。 "
"CHECK に対するその他のオプションについて、詳しくはEncode/\"Handling "
"Malformed Data\" のマニュアルページをお読みください。\n"
"* env( $uni_key )\n"
"* env( $uni_key => $uni_value )\n"
"\n"
"  環境変数を設定したり取得したりするインターフェイスです。現在の値を Unicode "
"文字列として返却します。 $uni_key と $uni_value の値は、それぞれ Unicode 文字"
"列で指定します。また、 $uni_value に 'undef' を指定すると、 $uni_key で指定し"
"た環境変数を削除します。\n"
"\n"
"  返却された値のうち、デコードできない文字は \"\\x{FFFD}\" (Unicode の未定義"
"扱い  文字) に置き換えられます。\n"
"\n"
"  decode_argv() では、代替のチェック動作を要求するインターフェイスはありませ"
"ん。自分自身でエンコード／デコードを呼び出したい場合は、下記のようにします:\n"
"\n"
"      my $key = Encode::encode(locale => $uni_key, Encode::FB_CROAK);       "
"my $uni_value = Encode::decode(locale => $ENV{$key}, Encode::FB_CROAK);\n"
"* reinit( )\n"
"* reinit( $encoding )\n"
"\n"
"  ロケール情報からエンコーディングを再初期化します。ロケールに影響する設定を"
"変更したりしたような場合に、この関数を呼び出してください。\n"
"\n"
"  また、この関数は判断したエンコーディングが Encode モジュールで認識されない"
"場合にも使用します。\n"
"\n"
"  指定したロケールに変更したい場合は、 $ENCODING_... 変数をお使いください。\n"
"* $ENCODING_LOCALE\n"
"\n"
"  現在のロケールに適切であると判断されたエンコーディング名が含まれます。"
"Encode のマニュアルページでは \"locale\" としてこのエンコーディングが書かれて"
"います。\n"
"* $ENCODING_LOCALE_FS\n"
"\n"
"  ファイル名を含むファイルシステムのインターフェイスに対して、適切であると判"
"断されたエンコーディング名が含まれます。Encode のマニュアルページでは "
"\"locale\" としてこのエンコーディングが書かれています。\n"
"* $ENCODING_CONSOLE_IN\n"
"* $ENCODING_CONSOLE_OUT\n"
"\n"
"  コンソールとの入出力に使用されるエンコーディングです。Encode のマニュアル"
"ページでは \"locale\" としてこのエンコーディングが書かれています。"

#. leap/perl-Error/summary
msgid "Error/exception handling in an OO-ish way"
msgstr "オブジェクト指向のやり方でのエラー／例外処理"

#. leap/perl-Error/description
msgid ""
"The 'Error' package provides two interfaces. Firstly 'Error' provides a "
"procedural interface to exception handling. Secondly 'Error' is a base class "
"for errors/exceptions that can either be thrown, for subsequent catch, or "
"can simply be recorded.\n"
"\n"
"Errors in the class 'Error' should not be thrown directly, but the user "
"should throw errors from a sub-class of 'Error'."
msgstr ""
"'Error' パッケージには 2 つのインターフェイスが存在します。 1 つめは例外処理"
"に対するプロシージャ型のインターフェイス、 2 つめは後でキャッチするためにス"
"ローしたり、単純に記録したりするためのエラー／例外用ベースクラスです。\n"
"\n"
"'Error' クラス内でのエラーは直接投げられるべきものですが、ユーザ側で"
"は'Error' のサブクラスからのエラーを投げるべきです。"

#. leap/perl-Eval-Closure/summary
msgid "Safely and Cleanly Create Closures Via String Eval"
msgstr "文字列の eval で安全かつクリーンなクロージャを生成する方法"

#. leap/perl-Eval-Closure/description
msgid ""
"String eval is often used for dynamic code generation. For instance, 'Moose' "
"uses it heavily, to generate inlined versions of accessors and constructors, "
"which speeds code up at runtime by a significant amount. String eval is not "
"without its issues however - it's difficult to control the scope it's used "
"in (which determines which variables are in scope inside the eval), and it's "
"easy to miss compilation errors, since eval catches them and sticks them in "
"$@ instead.\n"
"\n"
"This module attempts to solve these problems. It provides an 'eval_closure' "
"function, which evals a string in a clean environment, other than a fixed "
"list of specified variables. Compilation errors are rethrown automatically."
msgstr ""
"文字列の eval は動的なコード生成で良く用いられる方法です。たとえば 'Moose' を"
"うまく使用することで、アクセサやコンストラクタをインラインで生成し、実行時の"
"速度を劇的に向上させるようなこともできます。ただし、 eval は問題を発生させや"
"すい仕組みであり、使用するスコープをうまく制御するのは難しい仕組みでもありま"
"す (eval 内でスコープ内にある変数は何か、など) 。また、コンパイルエラーを発生"
"させやすいものでもあるため、 eval で発生する問題を捉えて、問題があれば $@ に"
"その内容を出力するような仕組みもあります。\n"
"\n"
"このモジュールは、これらの問題への解法となるべきものです。 'eval_closure' と"
"いう関数は、変数を指定して与えるのではなく、指定された文字列をクリーンな環境"
"下で eval します。コンパイルエラーについても、自動的に再投入されます。"

#. leap/perl-Eval-LineNumbers/summary
msgid "Add line numbers to heredoc blocks that contain perl source code"
msgstr ""
"Perl のソースコード内にあるヒアドキュメントに行番号を設定するモジュール"

#. leap/perl-Eval-LineNumbers/description
msgid ""
"Add a '#line \"this-file\" 392' comment to heredoc/hereis text that is going "
"to be eval'ed so that error messages will point back to the right place.\n"
"\n"
"Please note: when you embed '\\n' in your code, it gets expanded in double-"
"quote hereis documents so it will mess up your line numbering. Use '\\\\n' "
"instead when you can."
msgstr ""
"コード内のヒアドキュメントに対して、 '#line \"this-file\" 392' のようなコメン"
"トを追加します。これにより、表示されるエラーメッセージが正しい場所を指し示す"
"ようにします。\n"
"\n"
"注意: コード内に '\\n' を埋め込むと、これは二重引用符のヒアト゜キュメントに展"
"開されてしまうため、行番号が正しく表示できなくなります。これをお使いの場合"
"は、代わりに '\\\\n' をお使いください。"

#. leap/perl-Event/summary
msgid "Event loop processing"
msgstr "イベントループ処理"

#. leap/perl-Event/description
msgid ""
"ALERT: Marc Lehmann may have taken over the future of event loops in Perl. "
"Check out his libev library and EV Perl module. 25 Aug 2009\n"
"\n"
"The Event module provide a central facility to watch for various types of "
"events and invoke a callback when these events occur. The idea is to delay "
"the handling of events so that they may be dispatched in priority order when "
"it is safe for callbacks to execute.\n"
"\n"
"Events (in the ordinary sense of the word) are detected by *watchers*, which "
"reify them as *events* (in the special Event module sense). For clarity, the "
"former type of events may be called \"source events\", and the latter "
"\"target events\". Source events, such as signals arriving, happen whether "
"or not they are being watched. If a source event occurs which a watcher is "
"actively watching then the watcher generates a corresponding target event. "
"Target events are only created by watchers. If several watchers are "
"interested in the same source event then each will generate their own target "
"event. Hence, any particular source event may result in zero, one, two, or "
"any number of target events: the same as the number of watchers which were "
"actively watching for it.\n"
"\n"
"Target events are queued to be processed in priority order (priority being "
"determined by the creating watcher) and in FIFO order among events of the "
"same priority. Queued (\"pending\") events can, in some cases, be cancelled "
"before being processed. A queued event is processed by being passed to the "
"callback function (or method on a particular object or class) which was "
"specified to the watcher.\n"
"\n"
"A watcher, once created, operates autonomously without the Event user having "
"to retain any reference to it. However, keeping a reference makes it "
"possible to modify most of the watcher's characteristics. A watcher can be "
"switched between active and inactive states. When inactive, it does not "
"generate target events.\n"
"\n"
"Some types of source event are not reified as target events immediately. "
"Signals received, for example, are counted initially. The counted signals "
"are reified at certain execution points. Hence, signal events may be "
"processed out of order, and if handled carelessly, on the wrong side of a "
"state change in event handling. A useful way to view this is that occurrence "
"of the source event is not actually the arrival of the signal but is "
"triggered by the counting of the signal.\n"
"\n"
"Reification can be forced when necessary. The schedule on which some other "
"events are created is non-obvious. This is especially the case with watchers "
"that watch for a condition rather than an event. In some cases, target "
"events are generated on a schedule that depends on the operation of the "
"event loop."
msgstr ""
"警告: Marc Lehmann 氏が Perl におけるイベントループ機能を引き継いで開発する可"
"能性があります。詳しくは libev ライブラリと EV Perl モジュールをご覧ください "
"(2009年8月25日)\n"
"\n"
"Event モジュールは様々なタイプのイベントを監視し、イベント発生時には必要な"
"コールバックを呼び出す仕組みを提供します。イベントの処理を遅らせることで、優"
"先順位を元に実行したり、実行時に安全にコールバックを呼び出したりする機能を提"
"供します。\n"
"\n"
"一般に、イベントは *watcher* (監視するもの) が検出し、それを (Event モジュー"
"ルで言うところの) *イベント* に組み替えます。以降の説明では、前者のイベント"
"を \"ソースイベント\" 、後者のイベントを \"ターゲットイベント\" と称します。"
"プロセスに対するシグナルなど、ソースイベントが発生した場合は、まずそれが監視"
"対象であるかどうかを判断します。 watcher が監視している対象のものであれば、 "
"watcher は関連するターゲットイベントを生成します。ターゲットイベントは "
"watcher だけが生成します。複数の watcher が同じソースイベントを監視していた場"
"合は、それぞれでターゲットイベントを生成します。そのため、ソースイベントは "
"watcher が監視対象にしているかどうかに従って、 0 個以上のターゲットイベントに"
"変換されることになります。\n"
"\n"
"ターゲットイベントは watcher の判断によって優先順位順に並べ替えられます。優先"
"順位が同じであれば、それは FIFO (早いもの順) に並べられます。このように並べら"
"れた (\"ペンディング状態の\") イベントは、場合によっては処理前にキャンセルさ"
"れる場合もあります。並べられた後は watcher 側で指定したとおり、それぞれのコー"
"ルバック関数 (または特定のオブジェクトやクラスに結びつけられたメソッド) を呼"
"び出します。\n"
"\n"
"watcher は作成されると自律的に動作します。イベントのユーザ側が参照を保持する"
"必要もありません。しかしながら、参照を保持しておくことで、 watcher の振る舞い"
"の多くを修正することができるようになります。また、 watcher は有効／無効の状態"
"を切り替えることができます。無効化された場合は、ターゲットイベントは生成され"
"ません。\n"
"\n"
"ソースイベントの種類によっては、即時にターゲットイベントが作成されないものも"
"あります。たとえばシグナルなどの場合、最初はそれを数えるだけの処理が行なわ"
"れ、その後対応する処理が実行されます。そのため、シグナルのイベントは順序通り"
"には処理されない場合があるほか、不用意に処理してしまうと、正しい状態を認識で"
"きない場合もあります。これを正しく認識するには、ソースイベントの発生は実際の"
"シグナルを示すものではなく、シグナルを数えて処理していることに留意する必要が"
"あります。\n"
"\n"
"また、必要であれば組み替えを強制的に実施することもできます。その他のイベント"
"のスケジュールの作成については自明ではありません。これは特に watcher がイベン"
"トではなく条件を監視しているような場合に当てはまります。また場合によっては"
"ターゲットイベントの生成はイベントループ内の操作に従って生成されます。"

#. leap/perl-Exception-Base/summary
msgid "Lightweight exceptions"
msgstr "軽量な例外実装"

#. leap/perl-Exception-Base/description
msgid ""
"This class implements a fully OO exception mechanism similar to Exception::"
"Class or Class::Throwable. It provides a simple interface allowing "
"programmers to declare exception classes. These classes can be thrown and "
"caught. Each uncaught exception prints full stack trace if the default "
"verbosity is increased for debugging purposes.\n"
"\n"
"The features of 'Exception::Base':\n"
"\n"
"  * fast implementation of the exception class\n"
"\n"
"  * fully OO without closures and source code filtering\n"
"\n"
"  * does not mess with '$SIG{__DIE__}' and '$SIG{__WARN__}'\n"
"\n"
"  * no external run-time modules dependencies, requires core Perl modules "
"only\n"
"\n"
"  * the default behavior of exception class can be changed globally or just "
"for the thrown exception\n"
"\n"
"  * matching the exception by class, message or other attributes\n"
"\n"
"  * matching with string, regex or closure function\n"
"\n"
"  * creating automatically the derived exception classes (perlfunc/use "
"interface)\n"
"\n"
"  * easily expendable, see Exception::System class for example\n"
"\n"
"  * prints just an error message or dumps full stack trace\n"
"\n"
"  * can propagate (rethrow) an exception\n"
"\n"
"  * can ignore some packages for stack trace output\n"
"\n"
"  * some defaults (i.e. verbosity) can be different for different exceptions"
msgstr ""
"このクラスは完全なオブジェクト指向の例外機構を自走するもので、 Exception::"
"Class や Class::Throwable に似た仕組みです。シンプルなインターフェイスによ"
"り、プログラマに対して例外クラスの作成を容易にしています。これらのクラスは "
"throw することができるほか、 catch で捕らえることもできます。デバッグ用に既定"
"の冗長出力を増やしている環境では、 catch で捕らえられていない例外が発生する"
"と、完全なスタックトレースを表示します。\n"
"\n"
"'Exception::Base' の機能:\n"
"\n"
"  * 高速な例外クラスの実装\n"
"\n"
"  * クロージャやソースコードのフィルタ無しでの完全オブジェクト指向\n"
"\n"
"  * '$SIG{__DIE__}' や '$SIG{__WARN__}' を利用していないため、混乱を来たしま"
"せん\n"
"\n"
"  * 実行時にモジュールの外部依存関係がありません。純粋な Perl モジュールのみ"
"で作られています\n"
"\n"
"  * 例外クラスの既定の動作をグローバルに変更できるほか、特定の例外のみに設定"
"することも可能\n"
"\n"
"  * クラスやメッセージ、その他の属性による例外マッチング処理\n"
"\n"
"  * 文字列や正規表現、クロージャ関数によマッチング\n"
"\n"
"  * 派生例外クラスの自動作成 (perlfunc/use インターフェイス)\n"
"\n"
"  * 容易に拡張可能 (例は Exception::System をお読みください)\n"
"\n"
"  * エラーメッセージを単純に出力するか、完全なスタックトレースを出力するのか"
"を選択可能\n"
"\n"
"  * 例外の伝播 (再スロー) にも対応\n"
"\n"
"  * スタックトレースの出力でいくつかのパッケージを無視可能\n"
"\n"
"  * 様々な例外ごとに異なる既定値 (冗長性) を設定可能"

#. leap/perl-Exception-Class/summary
msgid "Module That Allows You to Declare Real Exception Classes in Perl"
msgstr "Perl における本格的な例外クラスの定義のためのモジュール"

#. leap/perl-Exception-Class/description
msgid ""
"*RECOMMENDATION 1*: If you are writing modern Perl code with Moose or Moo I "
"highly recommend using Throwable instead of this module. \n"
"*RECOMMENDATION 2*: Whether or not you use Throwable, you should use Try::"
"Tiny.\n"
"\n"
"Exception::Class allows you to declare exception hierarchies in your modules "
"in a \"Java-esque\" manner.\n"
"\n"
"It features a simple interface allowing programmers to 'declare' exception "
"classes at compile time. It also has a base exception class, Exception::"
"Class::Base, that can be easily extended.\n"
"\n"
"It is designed to make structured exception handling simpler and better by "
"encouraging people to use hierarchies of exceptions in their applications, "
"as opposed to a single catch-all exception class.\n"
"\n"
"This module does not implement any try/catch syntax. Please see the \"OTHER "
"EXCEPTION MODULES (try/catch syntax)\" section for more information on how "
"to get this syntax.\n"
"\n"
"You will also want to look at the documentation for Exception::Class::Base, "
"which is the default base class for all exception objects created by this "
"module."
msgstr ""
"*注意 1*: Moose や Moo でモダンな Perl コードを作成している場合は、このモ"
"ジュールではなく Throwable をお使いください。\n"
"*注意 2*: Throwable を使うかどうかはともかく、まずは Try::Tiny を使ってみてく"
"ださい。\n"
"\n"
"Exception::Class は、お使いのモジュール内で \"Java のような\" やり方で例外の"
"階層構造を作成することができます。\n"
"\n"
"プログラマに対しては、コンパイル時にシンプルな 'declare' 例外クラスのシンプル"
"なインターフェイスを提供します。ベースとなる例外クラス Exception::Class::"
"Base についても、容易に拡張が可能です。\n"
"\n"
"このモジュールは構造化された例外をシンプルにかつよりよく扱うことができるよう"
"に設計されていて、人々に対してアプリケーション側から単一の全キャッチ型例外ク"
"ラスではなく、階層的な例外を使用するよう支援しています。\n"
"\n"
"このモジュールは try/catch 文法については実装していません。この文法を使用する"
"場合について、詳しくは \"OTHER EXCEPTION MODULES (try/catch syntax)\" をお読"
"みください。\n"
"\n"
"また、 Exception::Class::Base 向けのドキュメンテーションについても、お読みい"
"ただくことをお勧めします。こちらはこのモジュールで作成される全例外クラスの既"
"定のベースクラスです。"

#. leap/perl-Expect/summary
msgid ""
"Automate Interactions with Command Line Programs That Expose a Text Term[cut]"
msgstr "テキストベースのコマンドラインプログラムと自動的に対話するモジュール"

#. leap/perl-Expect/description
msgid ""
"See an explanation of at http://code-maven.com/expect\n"
"\n"
"The Expect module is a successor of Comm.pl and a descendent of Chat.pl. It "
"more closely resembles the Tcl Expect language than its predecessors. It "
"does not contain any of the networking code found in Comm.pl. I suspect this "
"would be obsolete anyway given the advent of IO::Socket and external tools "
"such as netcat.\n"
"\n"
"Expect.pm is an attempt to have more of a switch() & case feeling to make "
"decision processing more fluid. Three separate types of debugging have been "
"implemented to make code production easier.\n"
"\n"
"It is possible to interconnect multiple file handles (and processes) much "
"like Tcl's Expect. An attempt was made to enable all the features of Tcl's "
"Expect without forcing Tcl on the victim programmer :-) .\n"
"\n"
"Please, before you consider using Expect, read the FAQs about \"I want to "
"automate password entry for su/ssh/scp/rsh/...\" and \"I want to use Expect "
"to automate [anything with a buzzword]...\""
msgstr ""
"http://code-maven.com/expect にある説明も併せてご覧ください。\n"
"\n"
"Expect モジュールは Comm.pl の後継、かつ Chat.pl の子孫となるモジュールで、従"
"来のモジュールよりも Tcl の Excpect 言語により近い形式を提供しています。 "
"Comm.pl には通信用のコードが含まれていませんが、 IO::Socket を利用したり "
"netcat のような外部ツールを利用したりするのは、時代遅れだと間が家庭ます。\n"
"\n"
"Expect.pm は switch() と case を多用して、処理の判断をより流動的に行なうよう"
"になっています。また、コードの作成をより容易にするため、 3 種類のデバッグタイ"
"プが用意されています。\n"
"\n"
"また、 Tcl の Expect のように、複数のファイルハンドル (およびプロセス) を相互"
"に接続することもできます。このモジュールは、 Tcl を強要することでプログラマに"
"犠牲を強いるようなことが無いようにする目的もあります。\n"
"\n"
"なお、 Expect を利用する際には、 事前に \"I want to automate password entry "
"for su/ssh/scp/rsh/...\" (su/ssh/scp/rsh などでパスワードの入力を自動化した"
"い) や \"I want to use Expect to automate [anything with a buzzword]...\" (何"
"らかのモジュールを Expect で自動化したい) に書かれた FAQ をお読みください。"

#. leap/perl-Export-Attrs/summary
msgid "The Perl 6 'is export(...)' trait as a Perl 5 attribute"
msgstr ""
"Perl 5 属性として 'is export(...)' の形質を Perl 6 に取り込むモジュール"

#. leap/perl-Export-Attrs/description
msgid ""
"*NOTE:* This module is a fork of Perl6::Export::Attrs created to restore "
"compatibility with Perl6::Export::Attrs version 0.0.3.\n"
"\n"
"Implements a Perl 5 native version of what the Perl 6 symbol export "
"mechanism will look like (with some unavoidable restrictions).\n"
"\n"
"It's very straightforward:\n"
"\n"
"  * If you want a subroutine or package variable to be capable of being "
"exported (when explicitly requested in the 'use' arguments), you mark it "
"with the ':Export' attribute.\n"
"\n"
"  * If you want a subroutine or package variable to be automatically "
"exported when the module is used (without specific overriding arguments), "
"you mark it with the ':Export(:DEFAULT)' attribute.\n"
"\n"
"  * If you want a subroutine or package variable to be automatically "
"exported when the module is used (even if the user specifies overriding "
"arguments), you mark it with the ':Export(:MANDATORY)' attribute.\n"
"\n"
"  * If the subroutine or package variable should also be exported when "
"particular export groups are requested, you add the names of those export "
"groups to the attribute's argument list.\n"
"\n"
"That's it."
msgstr ""
"*注意:* このモジュールは、 Perl6::Export::Attrs バージョン 0.0.3 との互換性を"
"取り戻すために作られた、 Perl6::Export::Attrs のフォークです。\n"
"\n"
"Perl 6 シンボル公開機構を Perl 5 ネイティブ版で実装したもので、下記のような仕"
"組みになっています (ただし避けられない制限もあります)。\n"
"\n"
"これは非常に直感的な仕組みです:\n"
"\n"
"  * サブルーチンやパッケージの変数を公開可能にしたい場合 ('use' のパラメータ"
"で明示的にリクエストしたい場合) は、 ':Export' 属性でマークしてください。\n"
"\n"
"  * サブルーチンやパッケージの変数を、モジュールを利用した際に自動的に公開さ"
"れる設定にしたい場合 (固有のオーバーライドは行なわない) は、 ':Export(:"
"DEFAULT)' 属性でマークしてください。\n"
"\n"
"  * サブルーチンやパッケージの変数を、モジュールを利用した際に自動的に公開さ"
"れる設定にしたい場合  (ユーザがオーバーライドパラメータを使用している場合) "
"は、 ':Export(:MANDATORY)' 属性でマークしてください。\n"
"\n"
"  * サブルーチンやパッケージの変数を、特定の公開グループを要求した場合に公開"
"したい場合は、それらの公開グループの名前を属性のパラメータリストに追加してく"
"ださい。\n"
"\n"
"これで全てです。"

#. leap/perl-Exporter-Declare/summary
msgid "Exporting done right"
msgstr "より正しいエクスポート"

#. leap/perl-Exporter-Declare/description
msgid ""
"Exporter::Declare is a meta-driven exporting tool. Exporter::Declare tries "
"to adopt all the good features of other exporting tools, while throwing away "
"horrible interfaces. Exporter::Declare also provides hooks that allow you to "
"add options and arguments for import. Finally, Exporter::Declare's meta-"
"driven system allows for top-notch introspection."
msgstr ""
"Exporter::Declare はメタ駆動型エクスポートツールです。 Exporter::Declare は他"
"のエクスポートツールの良い機能を、恐ろしいインターフェイスを修正してすべて取"
"り込もうとしています。また、 Exporter::Declare はオプションを追加するための"
"フック機能や、インポート時のパラメータなども設定することができます。最後に、 "
"Exporter::Declare は一流のイントロスペクション向けのメタ駆動型システムです。"

#. leap/perl-Exporter-Lite/summary
msgid "Lightweight Exporting of Functions and Variables"
msgstr "関数と変数の軽量なエクスポート"

#. leap/perl-Exporter-Lite/description
msgid ""
"Exporter::Lite is an alternative to Exporter, intended to provide a "
"lightweight subset of the most commonly-used functionality. It supports "
"'import()', '@EXPORT' and '@EXPORT_OK' and not a whole lot else.\n"
"\n"
"Unlike Exporter, it is not necessary to inherit from Exporter::Lite; Ie you "
"don't need to write:\n"
"\n"
" @ISA = qw(Exporter::Lite);\n"
"\n"
"Exporter::Lite simply exports its import() function into your namespace. "
"This might be called a \"mix-in\" or a \"role\".\n"
"\n"
"Setting up a module to export its variables and functions is simple:\n"
"\n"
"    package My::Module;     use Exporter::Lite;\n"
"\n"
"    our @EXPORT = qw($Foo bar);\n"
"\n"
"Functions and variables listed in the '@EXPORT' package variable are "
"automatically exported if you use the module and don't explicitly list any "
"imports. Now, when you 'use My::Module', '$Foo' and 'bar()' will show up.\n"
"\n"
"Optional exports are listed in the '@EXPORT_OK' package variable:\n"
"\n"
"    package My::Module;     use Exporter::Lite;\n"
"\n"
"    our @EXPORT_OK = qw($Foo bar);\n"
"\n"
"When My::Module is used, '$Foo' and 'bar()' will _not_ show up, unless you "
"explicitly ask for them:\n"
"\n"
"    use My::Module qw($Foo bar);\n"
"\n"
"Note that when you specify one or more functions or variables to import, "
"then you must also explicitly list any of the default symbols you want to "
"use. So if you have an exporting module:\n"
"\n"
"    package Games;     our @EXPORT    = qw/ pacman defender  /;     our "
"@EXPORT_OK = qw/ galaga centipede /;\n"
"\n"
"Then if you want to use both 'pacman' and 'galaga', then you'd write:\n"
"\n"
"    use Games qw/ pacman galaga /;"
msgstr ""
"Exporter::Lite は Exporter に対する代替モジュールで、もっともよく使用される機"
"能のみを提供する軽量なサブセットとなるものです。 'import()', '@EXPORT', "
"'@EXPORT_OK' に対応していますが、それ以外のほとんどに対応していません。\n"
"\n"
"Exporter とは異なり、 Exporter::Lite から派生させる必要はありません。言い換え"
"ると、下記のようなコードは不要となります:\n"
"\n"
" @ISA = qw(Exporter::Lite);\n"
"\n"
"Exporter::Lite は単純に import() 関数をお使いのネームスペースに公開するだけ"
"で、言わば \"混用\" や \"役割\" とも呼ぶことができます。\n"
"\n"
"モジュール内の変数や関数を公開する手順は至ってシンプルです:\n"
"\n"
"    package My::Module;     use Exporter::Lite;\n"
"\n"
"    our @EXPORT = qw($Foo bar);\n"
"\n"
"このモジュールを使用すると、インポートを明示的に指定することなく、 '@EXPORT' "
"パッケージ変数内に書かれている関数と変数は自動的に公開されるようになります。"
"上記の例では、 'use My::Module' のように指定するだけで、 '$Foo' と 'bar()' を"
"利用できるようになります。\n"
"\n"
"任意の公開は '@EXPORT_OK' 変数を利用して行ないます:\n"
"\n"
"    package My::Module;     use Exporter::Lite;\n"
"\n"
"    our @EXPORT_OK = qw($Foo bar);\n"
"\n"
"上記のように指定すると、下記のように明記しない限り、 My::Module を使用しても "
"'$Foo' および 'bar()' は表示されなくなります:\n"
"\n"
"    use My::Module qw($Foo bar);\n"
"\n"
"なお、 1 つまたは複数の関数や変数を取り込むものとして指定する場合は、既定で公"
"開されるシンボルも含めなければなりません。そのため、下記のようなモジュールが"
"存在した場合:\n"
"\n"
"    package Games;     our @EXPORT    = qw/ pacman defender  /;     our "
"@EXPORT_OK = qw/ galaga centipede /;\n"
"\n"
"上記のモジュール内にある 'pacman' と 'galaga' の両方を利用したい場合は、下記"
"のように記述する必要があります:\n"
"\n"
"    use Games qw/ pacman galaga /;"

#. leap/perl-Exporter-Tidy/summary
msgid "Another way of exporting symbols"
msgstr "シンボルを公開するためのもう 1 つの方法"

#. leap/perl-Exporter-Tidy/description
msgid ""
"This module serves as an easy, clean alternative to Exporter. Unlike "
"Exporter, it is not subclassed, but it simply exports a custom import() into "
"your namespace.\n"
"\n"
"With Exporter::Tidy, you don't need to use any package global in your "
"module. Even the subs you export can be lexically scoped."
msgstr ""
"このモジュールは、簡易でクリーンな Exporter 代替モジュールです。 Exporter と"
"は異なり、サブクラス化されていませんが、シンプルに独自の import() を行なうこ"
"とができます。\n"
"\n"
"Exporter::Tidy と共に利用した場合は、このモジュール内でパッケージグローバルを"
"利用する必要が無くなります。公開するサブルーチンでさえも字句スコープ下にある"
"ものとされます。"

#. leap/perl-Exporter-Tiny/summary
msgid ""
"An Exporter with the Features of Sub::Exporter but Only Core Dependencies"
msgstr ""
"Sub::Exporter の機能を持ちながら、中枢部にしか依存関係を持たないエクスポータ"

#. leap/perl-Exporter-Tiny/description
msgid ""
"Exporter::Tiny supports many of Sub::Exporter's external-facing features "
"including renaming imported functions with the '-as', '-prefix' and '-"
"suffix' options; explicit destinations with the 'into' option; and "
"alternative installers with the 'installer' option. But it's written in only "
"about 40% as many lines of code and with zero non-core dependencies.\n"
"\n"
"Its internal-facing interface is closer to Exporter.pm, with configuration "
"done through the '@EXPORT', '@EXPORT_OK' and '%EXPORT_TAGS' package "
"variables.\n"
"\n"
"If you are trying to *write* a module that inherits from Exporter::Tiny, "
"then look at:\n"
"\n"
"  * Exporter::Tiny::Manual::QuickStart\n"
"\n"
"  * Exporter::Tiny::Manual::Exporting\n"
"\n"
"If you are trying to *use* a module that inherits from Exporter::Tiny, then "
"look at:\n"
"\n"
"  * Exporter::Tiny::Manual::Importing"
msgstr ""
"Exporter::Tiny は、インポートされた関数の名前変更 ('-as', '-prefix', '-"
"suffix' オプションもあります) などの機能を含む Sub::Exporter の外部公開機能に"
"多数対応しています。 'into' オプションによる明示的な宛先指定や 'installer' オ"
"プションによる代替インストーラにも対応しています。ただし、コードの 40% 程度の"
"行数で書かれていて、中枢以外の依存関係を持たないのが特長です。\n"
"\n"
"内部向けのインターフェイスは Exporter.pm に似た構造で、 '@EXPORT', "
"'@EXPORT_OK', '%EXPORT_TAGS' などのパッケージ変数で設定を行なうことができま"
"す。\n"
"\n"
"Exporter::Tiny から派生したモジュールを作成しようとしている場合は、下記をお読"
"みください:\n"
"\n"
"  * Exporter::Tiny::Manual::QuickStart\n"
"\n"
"  * Exporter::Tiny::Manual::Exporting\n"
"\n"
"また、 Exporter::Tiny から派生したモジュールを使用しようとしている場合は、下"
"記をお読みください:\n"
"\n"
"  * Exporter::Tiny::Manual::Importing"

#. leap/perl-ExtUtils-CBuilder/summary
msgid "Compile and link C code for Perl modules"
msgstr "Perl モジュールのコンパイルとインストール"

#. leap/perl-ExtUtils-CBuilder/description
msgid ""
"This module can build the C portions of Perl modules by invoking the "
"appropriate compilers and linkers in a cross-platform manner. It was "
"motivated by the 'Module::Build' project, but may be useful for other "
"purposes as well. However, it is _not_ intended as a general cross-platform "
"interface to all your C building needs. That would have been a much more "
"ambitious goal!"
msgstr ""
"このモジュールは Perl モジュールの C 言語部分を構築することができる仕組みで、"
"クロスプラットフォーム対応の仕組みでコンパイラやリンカを呼び出すことができま"
"す。 'Module::Build' プロジェクトで作られた仕組みですが、他の目的でも便利に使"
"用することができます。ただし、一般的な C 言語ソースコードをクロスプラット"
"フォーム対応でコンパイルする仕組みを目指しているわけではないことに注意してく"
"ださい。それはもっと野心的なプロジェクトになるためです！"

#. leap/perl-ExtUtils-CChecker/summary
msgid "Configure-time utilities for using C headers,"
msgstr "Cヘッダを使用するための設定時ユーティリティ"

#. leap/perl-ExtUtils-CChecker/description
msgid ""
"Often Perl modules are written to wrap functionality found in existing C "
"headers, libraries, or to use OS-specific features. It is useful in the "
"_Build.PL_ or _Makefile.PL_ file to check for the existance of these "
"requirements before attempting to actually build the module.\n"
"\n"
"Objects in this class provide an extension around ExtUtils::CBuilder to "
"simplify the creation of a _.c_ file, compiling, linking and running it, to "
"test if a certain feature is present.\n"
"\n"
"It may also be necessary to search for the correct library to link against, "
"or for the right include directories to find header files in. This class "
"also provides assistance here."
msgstr ""
"多くの場合、Perlモジュールは、既存のCヘッダーやライブラリにある機能をラップしたり、OS固有の機能を使用するように書かれています。実際にモジュールを構"
"築しようとする前に、_Build.PL_または_Makefile.PL_ファイルでこれらの要件が存在するかどうかをチェックすると便利です。\n"
"\n"
"このクラスのオブジェクトは、ExtUtils::CBuilderを囲む拡張を提供して、_."
"c_ファイルの作成、コンパイル、リンク、実行、特定の機能が存在するかどうかのテストを簡略化します。\n"
"\n"
"また、リンクする正しいライブラリを検索したり、ヘッダファイルを見つけるためのインクルードディレクトリを検索したりする必要もあります。このクラスは、ここでも"
"サポートを提供します。"

#. leap/perl-ExtUtils-Config/summary
msgid "A wrapper for perl's configuration"
msgstr "Perl の設定向けラッパー"

#. leap/perl-ExtUtils-Config/description
msgid ""
"ExtUtils::Config is an abstraction around the %Config hash. By itself it is "
"not a particularly interesting module by any measure, however it ties "
"together a family of modern toolchain modules."
msgstr ""
"ExtUtils::Config は %Config ハッシュに対する抽象化モジュールです。このモ"
"ジュール自身は特に興味深いモジュールではありませんが、モダンなツールチェイン"
"モジュールと共に使用すると良いでしょう。"

#. leap/perl-ExtUtils-CppGuess/summary
msgid "Guess C++ Compiler and Flags"
msgstr "C++ コンパイラとフラグの推測"

#. leap/perl-ExtUtils-CppGuess/description
msgid ""
"'ExtUtils::CppGuess' attempts to guess the system's C++ compiler that is "
"compatible with the C compiler that your perl was built with.\n"
"\n"
"It can generate the necessary options to the Module::Build constructor or to "
"ExtUtils::MakeMaker's 'WriteMakefile' function."
msgstr ""
"'ExtUtils::CppGuess' はシステムの C++ コンパイラを推測し、 Perl をコンパイル"
"したときの C コンパイラと互換性があるかどうかを確認します。\n"
"\n"
"Module::Build コンストラクタや ExtUtils::MakeMaker の 'WriteMakefile' 関数"
"で、必要なオプションを生成するのに必要となります。"

#. leap/perl-ExtUtils-Depends/summary
msgid "Easily build XS extensions that depend on XS extensions"
msgstr "XS 拡張に依存した構築しやすい XS 拡張"

#. leap/perl-ExtUtils-Depends/description
msgid ""
"This module tries to make it easy to build Perl extensions that use "
"functions and typemaps provided by other perl extensions. This means that a "
"perl extension is treated like a shared library that provides also a C and "
"an XS interface besides the perl one.\n"
"\n"
"This works as long as the base extension is loaded with the RTLD_GLOBAL flag "
"(usually done with a\n"
"\n"
"\tsub dl_load_flags {0x01}\n"
"\n"
"in the main .pm file) if you need to use functions defined in the module.\n"
"\n"
"The basic scheme of operation is to collect information about a module in "
"the instance, and then store that data in the Perl library where it may be "
"retrieved later. The object can also reformat this information into the data "
"structures required by ExtUtils::MakeMaker's WriteMakefile function.\n"
"\n"
"For information on how to make your module fit into this scheme, see "
"\"hashref = ExtUtils::Depends::load (name)\".\n"
"\n"
"When creating a new Depends object, you give it a name, which is the name of "
"the module you are building. You can also specify the names of modules on "
"which this module depends. These dependencies will be loaded automatically, "
"and their typemaps, header files, etc merged with your new object's stuff. "
"When you store the data for your object, the list of dependencies are stored "
"with it, so that another module depending on your needn't know on exactly "
"which modules yours depends.\n"
"\n"
"For example:\n"
"\n"
"  Gtk2 depends on Glib\n"
"\n"
"  Gnome2::Canvas depends on Gtk2\n"
"\n"
"  ExtUtils::Depends->new ('Gnome2::Canvas', 'Gtk2');      this command "
"automatically brings in all the stuff needed      for Glib, since Gtk2 "
"depends on it.\n"
"\n"
"When the configuration information is saved, it also includes a class method "
"called 'Inline', inheritable by your module. This allows you in your module "
"to simply say at the top:\n"
"\n"
"  package Mymod;   use parent 'Mymod::Install::Files'; # to inherit 'Inline' "
"method\n"
"\n"
"And users of 'Mymod' who want to write inline code (using Inline) will "
"simply be able to write:\n"
"\n"
"  use Inline with => 'Mymod';\n"
"\n"
"And all the necessary header files, defines, and libraries will be added for "
"them.\n"
"\n"
"The 'Mymod::Install::Files' will also implement a 'deps' method, which will "
"return a list of any modules that 'Mymod' depends on - you will not normally "
"need to use this:\n"
"\n"
"  require Mymod::Install::Files;   @deps = Mymod::Install::Files->deps;"
msgstr ""
"このモジュールは、関数やその他の Perl 拡張が提供するタイプマップを使用する "
"Perl の拡張について、これらの構築をしやすくしようとする試みです。 Perl の拡張"
"を共有ライブラリのように扱い、 Perl そのものに対する拡張だけでなく、 C や XS "
"のインターフェイスも提供することを目指しています。\n"
"\n"
"このモジュール内の関数を利用したい場合、基本拡張として動作する際には "
"RTLD_GLOBAL フラグが設定されて読み込みます (通常は\n"
"\n"
"\tsub dl_load_flags {0x01}\n"
"\n"
"をメインの .pm ファイルに設定する必要があります) 。\n"
"\n"
"基本的な処理としては、インスタンス内のモジュールに関する情報の収集と、後から"
"設定される Perl のライブラリ内にそのデータを保存することにあります。オブジェ"
"クトはこの情報を利用して、 ExtUtils::MakeMaker の WriteMakefile で利用可能な"
"データ構造に変換することもできます。\n"
"\n"
"お使いのモジュールをこのスキームに組み込むための情報は、 \"hashref = "
"ExtUtils::Depends::load (name)\" をご利用ください。\n"
"\n"
"新しい Depends オブジェクトを作成する際には、構築対象のモジュールの名前を設定"
"します。依存関係にあるモジュールの名前も指定することができます。これらの依存"
"関係やタイプマップ、ヘッダファイルなどは自動的に読み込まれ、新しいオブジェク"
"ト内の要素として組み込まれます。オブジェクト向けにデータを保存する際には、依"
"存関係のリストが保存されるため、他のモジュールから必要とされた場合も、特に気"
"にすることなく処理することができるようになります。\n"
"\n"
"たとえば下記のようになります:\n"
"\n"
"  Gtk2 は Glib に依存しています\n"
"\n"
"  Gnome2::Canvas は Gtk2 に依存しています\n"
"\n"
"  ExtUtils::Depends->new ('Gnome2::Canvas', 'Gtk2');      Gtk2 は Glib に依存"
"しているため、このコマンドは Glib に必要なものを自動的に読み込みます。\n"
"\n"
"設定情報を保存すると、 'Inline' という名前のクラスメソッドも含まれるようにな"
"ります。このメソッドはお使いのモジュール側で継承可能です。これにより、お使い"
"のモジュールの冒頭で下記のように記述することができるようになります:\n"
"\n"
"  package Mymod;   use parent 'Mymod::Install::Files'; # to inherit 'Inline' "
"method\n"
"\n"
"Inline を利用してインラインのコードを作成したい 'Mymod' のユーザは、下記のよ"
"うに記述するだけで済むようになります:\n"
"\n"
"  use Inline with => 'Mymod';\n"
"\n"
"これにより、必要なヘッダファイルや定義、ライブラリなどが追加されるようになり"
"ます。\n"
"\n"
"また、 'Mymod::Install::Files' では 'deps' と呼ばれるメソッドも実装するように"
"なりますが、こちらは 'Mymod' が依存するモジュールの一覧を返します。たとえば下"
"記のようになります:\n"
"\n"
"  require Mymod::Install::Files;   @deps = Mymod::Install::Files->deps;"

#. leap/perl-ExtUtils-F77/summary
msgid "Simple interface to F77 libs"
msgstr "F77 ライブラリ向けのシンプルインターフェイス"

#. leap/perl-ExtUtils-F77/description
msgid ""
"This module tries to figure out how to link C programs with Fortran "
"subroutines on your system. Basically one must add a list of Fortran runtime "
"libraries. The problem is their location and name varies with each OS/"
"compiler combination! It was originally developed to make building and "
"installation of the PGPLOT module easier, which links to the pgplot Fortran "
"graphics library. It is now used by a number of perl modules.\n"
"\n"
"This module tries to implement a simple 'rule-of-thumb' database for various "
"flavours of UNIX systems. A simple self-documenting Perl database of "
"knowledge/code for figuring out how to link for various combinations of OS "
"and compiler is embedded in the modules Perl code. Please help save the "
"world by submitted patches for new database entries for your system at "
"https://github.com/PDLPorters/extutils-f77\n"
"\n"
"Note the default on most systems is now to search for a generic 'GNU' "
"compiler which can be gfortran, g77, g95 or fort77 (in that order based on "
"usage) and then find the appropriate link libraries automatically. (This is "
"the 'Generic' 'GNU' database entry in the code.)\n"
"\n"
"The target compiler can be explicitly overriden by setting the environment "
"variable F77, e.g.\n"
"\n"
" % setenv F77 \"x86_64-pc-linux-gnu-gfortran\"  % perl -MExtUtils::F77 -e "
"'print ExtUtils::F77->compiler, \"\\n\"'\n"
"\n"
"The library list which the module returns can be explicitly overridden by "
"setting the environment variable F77LIBS, e.g.\n"
"\n"
"  % setenv F77LIBS \"-lfoo -lbar\"   % perl -MExtUtils::F77 -e 'print "
"ExtUtils::F77->runtime, \"\\n\"'   ..."
msgstr ""
"このモジュールは、お使いのシステムで Fortran サブルーチンと C プログラムをリ"
"ンクさせる方法を示すためのものです。基本的には Fortran のランタイムライブラリ"
"を追加しなければなりません。また、発生しうる問題は、 OS とコンパイラの組み合"
"わせによって異なります。もともとは pgplot Fortran グラフィックライブラリにリ"
"ンクされている PGPLOT モジュールの構築とインストールを簡単に行なうために開発"
"されていました。現在はさまざまな Perl モジュールで使用されています。\n"
"\n"
"このモジュールは、様々な UNIX プラットフォームに対して 'rule-of-thumb'のデー"
"タベースを実装しようとしている試みです。シンプルな自己ドキュメント型の知識／"
"コード Perl データベースで、様々な OS とコンパイラの組み合わせで、 Perl コー"
"ドのモジュール内でのリンク方法を示すためのものです。お使いのシステムで新しい"
"データベースを使用している場合は、対応するパッチを作成して開発をご支援くださ"
"い。詳細は https://github.com/PDLPorters/extutils-f77 をお読みください。\n"
"\n"
"なお、ほとんどのシステムにおける既定は、汎用の 'GNU' コンパイラであり、 "
"gfortran, g77, g95, fort77 などという名前を検索するようになっている (検索順"
"序) ほか、適切なライブラリリンクも自動的に行ないます (コード内の 'Generic' "
"'GNU' データベース項目で設定されています) 。\n"
"\n"
"ターゲットコンパイラは、環境変数 F77 を設定することにより、明示的に上書きでき"
"ます。たとえば、以下のようになります。\n"
"\n"
" % setenv F77 \"x86_64-pc-linux-gnu-gfortran\"  % perl -MExtUtils::F77 -e "
"'print ExtUtils::F77->compiler, \"\\n\"'\n"
"\n"
"このライブラリは、 F77LIBS 環境変数を設定することで、明示的に上書きすることが"
"できます:\n"
"\n"
"  % setenv F77LIBS \"-lfoo -lbar\"   % perl -MExtUtils::F77 -e 'print "
"ExtUtils::F77->runtime, \"\\n\"'   ..."

#. leap/perl-ExtUtils-Helpers/summary
msgid "Various portability utilities for module builders"
msgstr "モジュール構築者向けの各種移植ユーティリティ"

#. leap/perl-ExtUtils-Helpers/description
msgid ""
"This module provides various portable helper functions for module building "
"modules."
msgstr ""
"このモジュールは、モジュールを構築する際に必要な様々な移植性のある支援関数を"
"提供します。"

#. leap/perl-ExtUtils-InstallPaths/summary
msgid "Build.PL install path logic made easy"
msgstr "Build.PL のインストールパスロジックを簡単にするモジュール"

#. leap/perl-ExtUtils-InstallPaths/description
msgid ""
"This module tries to make install path resolution as easy as possible.\n"
"\n"
"When you want to install a module, it needs to figure out where to install "
"things. The nutshell version of how this works is that default installation "
"locations are determined from the ExtUtils::Config manpage, and they may be "
"individually overridden by using the 'install_path' attribute. An "
"'install_base' attribute lets you specify an alternative installation root "
"like _/home/foo_ and 'prefix' does something similar in a rather different "
"(and more complicated) way. 'destdir' lets you specify a temporary "
"installation directory like _/tmp/install_ in case you want to create "
"bundled-up installable packages.\n"
"\n"
"The following types are supported by default. \n"
"* * lib\n"
"\n"
"  Usually pure-Perl module files ending in _.pm_ or _.pod_. \n"
"* * arch\n"
"\n"
"  \"Architecture-dependent\" module files, usually produced by compiling "
"XS,   the Inline manpage, or similar code. \n"
"* * script\n"
"\n"
"  Programs written in pure Perl. In order to improve reuse, you may want "
"to   make these as small as possible - put the code into modules whenever   "
"possible. \n"
"* * bin\n"
"\n"
"  \"Architecture-dependent\" executable programs, i.e. compiled C code or   "
"something. Pretty rare to see this in a perl distribution, but it   "
"happens. \n"
"* * bindoc\n"
"\n"
"  Documentation for the stuff in 'script' and 'bin'. Usually generated "
"from   the POD in those files. Under Unix, these are manual pages belonging "
"to   the 'man1' category. Unless explicitly set, this is only available on   "
"platforms supporting manpages. \n"
"* * libdoc\n"
"\n"
"  Documentation for the stuff in 'lib' and 'arch'. This is usually   "
"generated from the POD in _.pm_ and _.pod_ files. Under Unix, these are   "
"manual pages belonging to the 'man3' category. Unless explicitly set,   this "
"is only available on platforms supporting manpages. \n"
"* * binhtml\n"
"\n"
"  This is the same as 'bindoc' above, but applies to HTML documents. "
"Unless   explicitly set, this is only available when perl was configured to "
"do so. \n"
"* * libhtml\n"
"\n"
"  This is the same as 'libdoc' above, but applies to HTML documents. "
"Unless   explicitly set, this is only available when perl was configured to "
"do so."
msgstr ""
"このモジュールは、インストールパスの解決をできる限り簡単にするモジュールで"
"す。\n"
"\n"
"モジュールをインストールするにあたっては、インストール先を識別する必要があり"
"ます。このモジュールは、簡単に言うと既定のインストール先を ExtUtils::Config "
"を利用して判断しますが、 'install_path' 属性が指定されていれば、その値で上書"
"きすることもできる仕組みです。また、 'install_base' 属性が指定されている場合"
"は、 _/home/foo_ のように代替のインストール先を指定することができるほか、  "
"'prefix' でも似たようなこと (ただしより複雑です) を行なうことができます。この"
"ほか、 'destdir' では _/tmp/install_ のような一時的なインストール先を指定する"
"こともできます。こちらは直接インストール可能なパッケージを作成する際に利用し"
"ます。\n"
"\n"
"既定では下記のタイプに対応しています。\n"
"* * lib\n"
"\n"
"  通常は _.pm_ や _.pod_ で終わる Perl のみで作られたモジュールのインストール"
"先です。\n"
"* * arch\n"
"\n"
"  \"アーキテクチャ依存の\" モジュールファイルで、通常は XS が生成したモジュー"
"ルやインラインのマニュアルページなどのコードがインストールされます。\n"
"* * script\n"
"\n"
"  Perl のみで作成されたプログラムのインストール先です。再利用性を高めるため、"
"これらはできるだけ小さくしておき、モジュール内にコードを配置するようにしてく"
"ださい。\n"
"* * bin\n"
"\n"
"  \"アーキテクチャ依存の\" 実行プログラム (例: コンパイルされた C 言語のコー"
"ドなど) のインストール先です。 Perl の配布物としてはほとんど使われることがあ"
"りません。\n"
"* * bindoc\n"
"\n"
"  'script' や 'bin' にインストールしたファイル向けのドキュメンテーションのイ"
"ンストール先です。通常は POD から生成します。 Unix 環境では 'man1' の分類に属"
"するマニュアルページです。明示的に指定しない限り、マニュアルページに対応した"
"プラットフォームでのみ利用することができます。\n"
"* * libdoc\n"
"\n"
"  'lib' や 'arch' にインストールしたファイル向けのドキュメンテーションのイン"
"ストール先です。通常は _.pm_ や _.pod_ ファイル内の POD から生成します。 "
"Unix 環境では 'man3\" の分類に属するマニュアルページです。明示的に指定しない"
"限り、マニュアルページに対応したプラットフォームでのみ利用することができま"
"す。\n"
"* * binhtml\n"
"\n"
"  上述の 'bindoc' と同じですが、 HTML 文書のみのインストール先です。明示的に"
"指定しない限り、 Perl 側で設定されていないと利用することができません。\n"
"* * libhtml\n"
"\n"
"  上述の 'libdoc' と同じですが、 HTML 文書のみのインストール先です。明示的に"
"指定しない限り、 Perl 側で設定されていないと利用することができません。"

#. leap/perl-ExtUtils-LibBuilder/summary
msgid "Tool to Build C Libraries"
msgstr "C ライブラリの構築ツール"

#. leap/perl-ExtUtils-LibBuilder/description
msgid "A tool to build C libraries."
msgstr "C ライブラリを構築するためのツールです。"

#. leap/perl-ExtUtils-MakeMaker/summary
msgid "Create a module Makefile"
msgstr "モジュールに対する Makefile の作成"

#. leap/perl-ExtUtils-MakeMaker/description
msgid ""
"This utility is designed to write a Makefile for an extension module from a "
"Makefile.PL. It is based on the Makefile.SH model provided by Andy Dougherty "
"and the perl5-porters.\n"
"\n"
"It splits the task of generating the Makefile into several subroutines that "
"can be individually overridden. Each subroutine returns the text it wishes "
"to have written to the Makefile.\n"
"\n"
"As there are various Make programs with incompatible syntax, which use "
"operating system shells, again with incompatible syntax, it is important for "
"users of this module to know which flavour of Make a Makefile has been "
"written for so they'll use the correct one and won't have to face the "
"possibly bewildering errors resulting from using the wrong one.\n"
"\n"
"On POSIX systems, that program will likely be GNU Make; on Microsoft "
"Windows, it will be either Microsoft NMake, DMake or GNU Make. See the "
"section on the L</\"MAKE\"> parameter for details.\n"
"\n"
"ExtUtils::MakeMaker (EUMM) is object oriented. Each directory below the "
"current directory that contains a Makefile.PL is treated as a separate "
"object. This makes it possible to write an unlimited number of Makefiles "
"with a single invocation of WriteMakefile().\n"
"\n"
"All inputs to WriteMakefile are Unicode characters, not just octets. EUMM "
"seeks to handle all of these correctly. It is currently still not possible "
"to portably use Unicode characters in module names, because this requires "
"Perl to handle Unicode filenames, which is not yet the case on Windows.\n"
"\n"
"See L<ExtUtils::MakeMaker::FAQ> for details of the design and usage."
msgstr ""
"このユーティリティは、 Makefile.PL から拡張モジュール向けの Makefile を作成す"
"るために設計されたモジュールです。 Andy Dougherty 氏と Perl5 移植作業者の皆様"
"が提供する Makefile.SH のモデルをベースにしています。\n"
"\n"
"Makefile の生成に際しては、それを複数のサブルーチンに分割して、個別にオーバー"
"ライドできるようにしてあります。各サブルーチンでは、 Makefile に書き込みたい"
"内容を返します。\n"
"\n"
"Make プログラムには様々なものがあり、それらは互換性のない仕組みであるほか、オ"
"ペレーティングシステムのシェルについても相互に互換性が確保できていないため、"
"このモジュールを利用するにあたっては、どの Make を利用する Makefile を作成し"
"ているのかを事前に知っておいて、異なる環境の Make 向けの出力に悩まされないよ"
"うにする必要があります。\n"
"\n"
"POSIX システムでは通常、 GNU Make を利用します。 Microsoft Windows では "
"Microsoft NMake, DMake, GNU Make のいずれかを利用します。詳しくは L</\"MAKE"
"\"> パラメータをお読みください。\n"
"\n"
"ExtUtils::MakeMaker (EUMM) はオブジェクト指向です。カレントディレクトリ以下の"
"各ディレクトリに Makefile.PL が含まれていると、それらは個別のオブジェクトとし"
"て扱われます。これにより、 WriteMakefile() を一度だけ呼び出すだけで、制限無"
"く Makefile を作成することができるようになっています。\n"
"\n"
"WriteMakefile への入力は Unicode 文字であり、単なるオクテットではないことに注"
"意してください。 EUMM ではこれらを正しく処理します。また、現時点ではモジュー"
"ル名に Unicode 文字を利用することはできません。これは Perl 側で Unicode の"
"ファイル名を扱う必要があるためですが、 Windows ではまだ実装されていません。\n"
"\n"
"設計や使用方法について、詳しくは L<ExtUtils::MakeMaker::FAQ> をお読みくださ"
"い。"

#. leap/perl-ExtUtils-MakeMaker-CPANfile/summary
msgid "Cpanfile Support for Eumm"
msgstr "Eumm 向け Cpanfile サポート"

#. leap/perl-ExtUtils-MakeMaker-CPANfile/description
msgid ""
"ExtUtils::MakeMaker::CPANfile loads 'cpanfile' in your distribution and "
"modifies parameters for 'WriteMakefile' in your Makefile.PL. Just use it "
"instead of ExtUtils::MakeMaker (which should be loaded internally), and "
"prepare 'cpanfile'.\n"
"\n"
"As of version 0.03, ExtUtils::MakeMaker::CPANfile also removes WriteMakefile "
"parameters that the installed version of ExtUtils::MakeMaker doesn't know, "
"to avoid warnings."
msgstr ""
"ExtUtils::MakeMaker::CPANfile はお使いの配布物内にある 'cpanfile' を読み込"
"み、お使いの Makefile.PL 内の 'WriteMakefile' 向けのパラメータを修正します。 "
"ExtUtils::MakeMaker を直接利用せず (このモジュールの内部で読み込みます) 、本"
"モジュールをお使いのうえ、 'cpanfile' をご用意ください。\n"
"\n"
"バージョン 0.03 の ExtUtils::MakeMaker::CPANfile では、警告を避けるため、イン"
"ストール済みの ExtUtils::MakeMaker のバージョンで理解できない WriteMakefile "
"のパラメータは削除されるようになっています。"

#. leap/perl-ExtUtils-Manifest/summary
msgid "Utilities to write and check a MANIFEST file"
msgstr "MANIFEST ファイルの作成とチェックのためのユーティリティ"

#. leap/perl-ExtUtils-Manifest/description
msgid "..."
msgstr "..."

#. leap/perl-ExtUtils-PkgConfig/summary
msgid "Simplistic Interface to Pkg-Config"
msgstr "Pkg-Config に対する単純なインターフェイス"

#. leap/perl-ExtUtils-PkgConfig/description
msgid ""
"The pkg-config program retrieves information about installed libraries, "
"usually for the purposes of compiling against and linking to them.\n"
"\n"
"ExtUtils::PkgConfig is a very simplistic interface to this utility, intended "
"for use in the Makefile.PL of perl extensions which bind libraries that pkg-"
"config knows. It is really just boilerplate code that you would've written "
"yourself."
msgstr ""
"pkg-config プログラムはインストールされたライブラリに関する情報を取得します。"
"通常はそれらのライブラリを利用してコンパイルしたり、リンクしたりする際に使用"
"します。\n"
"\n"
"ExtUtils::PkgConfig はこのユーティリティに対するとてもシンプルなインターフェ"
"イスで、 Makefile.PL から pkg-config が知っているライブラリに対して、問い合わ"
"せを実施するのに使用します。これはご自分でも記述可能な、文例コードとしても利"
"用できます。"

#. leap/perl-ExtUtils-Typemaps-Default/summary
msgid "A set of useful typemaps"
msgstr "便利なタイプマップ集"

#. leap/perl-ExtUtils-Typemaps-Default/description
msgid ""
"'ExtUtils::Typemaps::Default' is an 'ExtUtils::Typemaps' subclass that "
"provides a set of default mappings (in addition to what perl itself "
"provides). These default mappings are currently defined as the combination "
"of the mappings provided by the following typemap classes which are provided "
"in this distribution:\n"
"\n"
"the ExtUtils::Typemaps::ObjectMap manpage, the ExtUtils::Typemaps::STL "
"manpage, the ExtUtils::Typemaps::Basic manpage"
msgstr ""
"'ExtUtils::Typemaps::Default' は 'ExtUtils::Typemaps' のサブクラスで、既定の"
"マッピング集 (および Perl 自身が提供するもの) を提供するものです。これらの既"
"定のマッピングは現在、この配布物で提供されている下記のタイプマップクラスの組"
"み合わせとして定義されています:\n"
"\n"
"ExtUtils::Typemaps::ObjectMap, ExtUtils::Typemaps::STL, ExtUtils::Typemaps::"
"Basic"

#. leap/perl-ExtUtils-XSpp/summary
msgid "XS for C++"
msgstr "C++ 向け XS"

#. leap/perl-ExtUtils-XSpp/description
msgid ""
"Anything that does not look like a XS++ directive or a class declaration is "
"passed verbatim to XS. If you want XS++ to ignore code that looks like a XS+"
"+ directive or class declaration, simply surround it with a raw block "
"delimiter like this:\n"
"\n"
"  %{   XS++ won't interpret this   %}"
msgstr ""
"XS++ のディレクティブやクラスの定義には見えないようなものを XS に渡すことがで"
"きます。 XS++ に対して、 XS++ のディレクティブやクラス定義に見えないものを無"
"視させたい場合は、下記のようにしてブロックを括ってください:\n"
"\n"
"  %{   XS++ won't interpret this   %}"

#. leap/perl-FFI-CheckLib/summary
msgid "Check that a library is available for FFI"
msgstr "FFI 向けに作られたライブラリが利用可能かどうかのチェック"

#. leap/perl-FFI-CheckLib/description
msgid ""
"This module checks whether a particular dynamic library is available for FFI "
"to use. It is modeled heavily on Devel::CheckLib, but will find dynamic "
"libraries even when development packages are not installed. It also provides "
"a find_lib function that will return the full path to the found dynamic "
"library, which can be feed directly into FFI::Platypus or another FFI system."
msgstr ""
"このモジュールは FFI を使用する際に特定の動的ライブラリが使用できるかどうかを"
"確認します。主に Devel::CheckLib の仕組みを参考にしていますが、開発用のパッ"
"ケージがインストールされていない環境でもライブラリが検索できるようにしていま"
"す。このほか、必要な動的ライブラリのフルパスを得ることができる find_lib 関数"
"が提供され、 FFI::Platypus やその他の FFI システムに直接与えることができるよ"
"うになっています。"

#. leap/perl-Feed-Find/summary
msgid "Syndication feed auto-discovery"
msgstr "Syndication feed 自動検出"

#. leap/perl-Feed-Find/description
msgid ""
"_Feed::Find_ implements feed auto-discovery for finding syndication feeds, "
"given a URI. It (currently) passes all of the auto-discovery tests at "
"_http://diveintomark.org/tests/client/autodiscovery/_.\n"
"\n"
"_Feed::Find_ will discover the following feed formats: \n"
"* * RSS 0.91 \n"
"* * RSS 1.0 \n"
"* * RSS 2.0 \n"
"* * Atom"
msgstr ""
"_Feed::Find_ "
"は、URIを指定すると、シンジケーション・フィードを検索するフィード自動検出を実装します。(現時点では)_http://diveintomark.org/"
"tests/client/autodiscovery/_での自動検出テストにすべて合格しています。\n"
"\n"
"_Feed::Find_は、次のフィードフォーマットを検出します:\n"
"* * RSS 0.91\n"
"* * RSS 1.0\n"
"* * RSS 2.0\n"
"* * Atom"

#. leap/perl-Fennec-Lite/summary
msgid "Minimalist Fennec, the commonly used bits."
msgstr "よく使用される部分だけを含む最小 Fennec"

#. leap/perl-Fennec-Lite/description
msgid ""
"the Fennec manpage does a ton, but it may be hard to adopt it all at once. "
"It also is a large project, and has not yet been fully split into component "
"projects. Fennec::Lite takes a minimalist approach to do for Fennec what "
"Mouse does for Moose.\n"
"\n"
"Fennec::Lite is a single module file with no non-core dependencies. It can "
"easily be used by any project, either directly, or by copying it into your "
"project. The file itself is less than 300 lines of code at the time of this "
"writing, that includes whitespace.\n"
"\n"
"This module does not cover any of the more advanced features such as result "
"capturing or SPEC workflows. This module only covers test grouping and group "
"randomization. You can also use the FENNEC_ITEM variable with a group name "
"or line number to run a specific test group only. Test::Builder is used "
"under the hood for TAP output."
msgstr ""
"Fennec は多数の処理を実施しますが、それらすべてを一度に行なうのは困難です。 "
"Fennec は巨大なプロジェクトであり、まだコンポーネントオブジェクトのレベルまで"
"完全に分割できていないためです。 Fennec::Lite は、 Mouse や Moose が行なうよ"
"うなことを、最小限のアプローチで実現しています。\n"
"\n"
"Fennec::Lite は Perl の中枢モジュール以外には依存関係のない、単一のモジュール"
"です。どのプロジェクトでも、直接またはコピー経由で簡単に利用することができま"
"す。ファイルそれ自身は、これを記述している時点で空白行を含め 300 行未満のコー"
"ドでできています。\n"
"\n"
"このモジュールは結果のキャプチャや SPEC のワークフローなど、より高度な機能に"
"は対応していません。このモジュールはテストのグループ化とグループの順序のラン"
"ダム化のみを実施します。また、特定のテストグループのみを実行するために、グ"
"ループ名や行番号を指定する FENNEC_ITEM 変数を利用することもできます。 Test::"
"Builder は TAP の出力をベースに使用します。"

#. leap/perl-File-BaseDir/summary
msgid "Use the Freedesktop.org base directory specification"
msgstr "Freedesktop.org のベースディレクトリ仕様の実装"

#. leap/perl-File-BaseDir/description
msgid ""
"This module can be used to find directories and files as specified by the "
"Freedesktop.org Base Directory Specification. This specifications gives a "
"mechanism to locate directories for configuration, application data and "
"cache data. It is suggested that desktop applications for e.g. the GNOME, "
"KDE or Xfce platforms follow this layout. However, the same layout can just "
"as well be used for non-GUI applications.\n"
"\n"
"This module forked from File::MimeInfo.\n"
"\n"
"This module follows version 0.6 of BaseDir specification."
msgstr ""
"このモジュールは、Freedesktop.org Base Directory Specificationで指定されているディレクトリとファイルを検索する"
"ために使用できます。この仕様は、構成、アプリケーション・データ、キャッシュ・データ用のディレクトリーを見つけるメカニズムを提供します。GNOME、KDE、"
"Xfceプラットフォームなどのデスクトップアプリケーションは、このレイアウトに従うことをお勧めします。ただし、GUI以外のアプリケーションにも同じレイアウ"
"トを使用できます。\n"
"\n"
"このモジュールはFile::MimeInfoからフォークしました。\n"
"\n"
"このモジュールは、baseDir仕様のバージョン0.6に準拠しています。"

#. leap/perl-File-Basename-Object/summary
msgid "Object-oriented syntax sugar for File::Basename"
msgstr "File::Basename 向けオブジェクト指向文法 Sugar"

#. leap/perl-File-Basename-Object/description
msgid ""
"File::Basename::Object is an object-oriented wrapper around File::Basename. "
"The goal is to allow pathnames to be presented and manipulated easily.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Tyler \"Crackerjack\" MacDonald <japh@crackerjack.net>"
msgstr ""
"File::Basename::Object は File::Basename まわりのオブジェクト指向のラッパーで"
"す。 パス名を簡単に表示したり操作したりすることを目的にしています。\n"
"\n"
"\n"
"\n"
"作者:\n"
"--------     Tyler \"Crackerjack\" MacDonald <japh@crackerjack.net>"

#. leap/perl-File-Comments/summary
msgid "Recognizes file formats and extracts format-specific comments"
msgstr "ファイル形式の認識と形式固有のコメントの抽出"

#. leap/perl-File-Comments/description
msgid ""
"File::Comments guesses the type of a given file, determines the format used "
"for comments, extracts all comments, and returns them as a reference to an "
"array of chunks. Alternatively, it strips all comments from a file.\n"
"\n"
"Currently supported are Perl scripts, C/C++ programs, Java, makefiles, "
"JavaScript, Python and PHP.\n"
"\n"
"The plugin architecture used by File::Comments makes it easy to add new "
"formats. To support a new format, a new plugin module has to be installed. "
"No modifications to the File::Comments codebase are necessary, new plugins "
"will be picked up automatically.\n"
"\n"
"File::Comments can also be used to simply guess a file's type. It it "
"somewhat more flexible than File::MMagic and File::Type. File types in File::"
"Comments are typically based on file name suffixes (*.c, *.pl, etc.). If no "
"suffix is available, or a given suffix is ambiguous (e.g. if several plugins "
"have registered a handler for the same suffix), then the file's content is "
"used to narrow down the possibilities and arrive at a decision.\n"
"\n"
"WARNING: THIS MODULE IS UNDER DEVELOPMENT, QUALITY IS ALPHA. IF YOU FIND "
"BUGS, OR WANT TO CONTRIBUTE PLUGINS, PLEASE SEND THEM MY WAY."
msgstr ""
"File::Comments は指定したファイルの種類を推測し、その種類で用いられるコメント"
"箇所を判断して抽出し、それらをチャンクの配列への参照として返します。このほ"
"か、ファイルからすべてのコメントを抽出することもできます。\n"
"\n"
"現時点では Perl スクリプトのほか、 C/C++ 言語のプログラムや Java, Makefile, "
"JavaScript, Pytho, PHP にそれぞれ対応しています。\n"
"\n"
"File::Comments はプラグイン形式の仕組みを採用しているため、新しいコメント書式"
"を追加するのも用意です。新しい形式に対応させたい場合は、新しいプラグインモ"
"ジュールをインストールする必要があります。なお、 File::Comments のコードベー"
"ス自身を変更する必要はありません。新しいプラグインは自動的に検出され、使用さ"
"れるためです。\n"
"\n"
"File::Comments ではファイルの種類のみを判断することもできます。 File::MMagic "
"や File::Type よりもさらに柔軟な仕組みです。 File::Comments 内でのファイルタ"
"イプは、一般にファイル名の接尾辞 (*.c, *.pl など) をベースにして行なわれま"
"す。接尾辞がない場合や、接尾辞だけでは不十分な場合 (同じ接尾辞で複数のプラグ"
"インが登録されているような場合) は、ファイルの中身を読み込んで候補を絞り込"
"み、最終的に判断に至ります。\n"
"\n"
"警告: このモジュールは現在開発中のもので、アルファ版の状態です。バグを発見し"
"た場合や、プラグインを貢献したい場合は、指定の方法でお送りください。"

#. leap/perl-File-Copy-Recursive/summary
msgid "Perl extension for recursively copying files and directories"
msgstr "再帰的にファイルやディレクトリをコピーするための Perl 拡張"

#. leap/perl-File-Copy-Recursive/description
msgid ""
"This module copies and moves directories recursively (or single files, "
"well... singley) to an optional depth and attempts to preserve each file or "
"directory's mode."
msgstr ""
"このモジュールは、各ファイルやディレクトリのモードを維持したまま、必要であれ"
"ば指定した深さまでのディレクトリやファイルを再帰的にコピーまたは移動します。"

#. leap/perl-File-Copy-Recursive-Reduced/summary
msgid "Recursive copying of files and directories within Perl 5 toolchain"
msgstr "Perl 5 ツールチェイン内での再帰的なファイルやディレクトリのコピー"

#. leap/perl-File-Copy-Recursive-Reduced/description
msgid ""
"This library is intended as a not-quite-drop-in replacement for certain "
"functionality provided by CPAN distribution File-Copy-Recursive|http://"
"search.cpan.org/dist/File-Copy-Recursive/. The library provides methods "
"similar enough to that distribution's 'fcopy()', 'dircopy()' and 'rcopy()' "
"functions to be usable in those CPAN distributions often described as being "
"part of the Perl toolchain."
msgstr ""
"このライブラリは CPAN の配布物である File-Copy-Recursive|http://search.cpan."
"org/dist/File-Copy-Recursive/ に対する置き換えとなるべく開発されているもので"
"す。このライブラリは、配布物内にある 'fcopy()', 'dircopy()', 'rcopy()' の各関"
"数に類似した関数を提供し、 Perl ツールチェイン内の配布物の一部として規定され"
"るものとして使用できるような作りになっています。"

#. leap/perl-File-DesktopEntry/summary
msgid "Object to handle .desktop files"
msgstr ".desktop ファイルを処理するためのオブジェクト"

#. leap/perl-File-DesktopEntry/description
msgid ""
"This module is designed to work with _.desktop_ files. The format of these "
"files is specified by the freedesktop \"Desktop Entry\" specification. This "
"module can parse these files but also knows how to run the applications "
"defined by these files.\n"
"\n"
"For this module version 1.0 of the specification was used.\n"
"\n"
"This module was written to support File::MimeInfo::Applications.\n"
"\n"
"Please remember: case is significant for the names of Desktop Entry keys."
msgstr ""
"このモジュールは、 _.desktop_ ファイルの処理を行なうためのモジュールです。こ"
"れらのファイルの書式は、 freedesktop の \"Desktop Entry\" 仕様で規定されてい"
"ます。このモジュールはこれらのファイルを処理することができるほか、これらの"
"ファイルで指定されたアプリケーションについて、その起動方法を知ることもできま"
"す。\n"
"\n"
"このモジュールでは、仕様バージョン 1.0 が使用されています。\n"
"\n"
"このモジュールは、 File::MimeInfo::Applications に対応するために作成されてい"
"ます。\n"
"\n"
"なお、 Desktop Entry のキー名は、大文字と小文字を区別することに注意してくださ"
"い。"

#. leap/perl-File-FcntlLock/summary
msgid "File locking with L<fcntl(2)>"
msgstr "L<fcntl(2)> を利用したファイルロック (施錠)"

#. leap/perl-File-FcntlLock/description
msgid ""
"File locking in Perl is usually done using the 'flock' function. "
"Unfortunately, this only allows locks on whole files and is often "
"implemented in terms of the the flock(2) manpage system function which has "
"some shortcomings (especially concerning locks on remotely mounted file "
"systems) and slightly different behaviour than the fcntl(2) manpage.\n"
"\n"
"Using this module file locking via the fcntl(2) manpage can be done "
"(obviously, this restricts the use of the module to systems that have a the "
"fcntl(2) manpage system call). Before a file (or parts of a file) can be "
"locked, an object simulating a flock structure, containing information in a "
"binary format to be passed to the fcntl(2) manpage for locking requests, "
"must be created and its properties set. Afterwards, by calling the the "
"lock() manpage method a lock can be set and removed or it can be determined "
"if and which process currently holds the lock.\n"
"\n"
"File::FcntlLock (or its alias File::FcntlLock::XS) uses a shared library, "
"build during installation, to call the the fcntl(2) manpage system function "
"directly. If this is unsuitable there are two alternatives, File::FcntlLock::"
"Pure and File::FcntlLock::Inline. Both call the Perl 'fcntl' function "
"instead and use Perl code to assemble and disassemble the structure. For "
"this at some time the (system-dependent) binary layout of the flock "
"structure must have been determined via a program written in C. The "
"difference between File::FcntlLock::Pure and File::FcntlLock::Inline is that "
"for the former this happened when the package is installed while for the "
"latter it is done each time the package is loaded (e.g., with 'use'). Thus, "
"for File::FcntlLock::Inline to work a C compiler must be available. There "
"are some minor differences in the functionality and the behaviour on passing "
"the method for locking invalid arguments to be described below."
msgstr ""
"Perl におけるファイルロック (施錠) は、 'flock' 関数を利用して行ないますが、"
"不幸にもこの関数はファイル全体をロックするだけの機能しか持ち合わせていないば"
"かりか、しばしば flock(2) システム関数を利用して実装されている仕組みであるこ"
"とから、それに伴う欠点も存在します (特にリモートのファイルシステムをマウント"
"しているような場合など) 。また、少しだけではありますが fcntl(2) と動作も異な"
"ります。\n"
"\n"
"このモジュールを利用することで、 fcntl(2) を利用してファイルロックを行なうこ"
"とができるようになります (そのため、 fcntl(2) システムコールが存在するシステ"
"ムのみで動作します) 。なお、ファイル (またはファイルの一部) をロックする前"
"に、 fcntl(2) に渡されるバイナリ形式の情報を含む flock の構造体を疑似するオブ"
"ジェクトを作成し、関連するプロパティを設定しなければなりません。作成および設"
"定した後は、 lock() メソッドでロックを設定または解除することができるほか、"
"ロックされているかどうかやロックしているプロセスなども判断することができま"
"す。\n"
"\n"
"File::FcntlLock (もしくはその別名 File::FcntlLock::XS) では共有ライブラリを使"
"用しているため、インストール時のビルド処理や実際の呼び出しでは fcntl(2) シス"
"テム関数を直接呼び出すことができます。このような仕組みでは不便になってしまう"
"ような環境であれば、 File::FcntlLock::Pure や File::FcntlLock::Inline などの"
"代替品を使用することもできます。いずれのオブジェクトとも、代わりに Perl の "
"'fcntl' 関数を呼び出して、 Perl コード内で構造を組み立てたりそれを読み込んだ"
"りしています。このような仕組みにより、場合によってはシステムに依存する flock "
"バイナリ構造体を、 C 言語で記述したプログラム経由で判断しなければならない場合"
"があります。 FIle::FcntlLock::Pure では、その処理はパッケージのインストール時"
"に行ない、 File::FcntlLock::Inline はパッケージを読み込んだ ('use') 際に行な"
"います。そのため、 File::FcntlLock::Inline を利用するには、動作する C コンパ"
"イラが存在していなければなりません。それ以外にも機能面で少し異なる面があるほ"
"か、不正なパラメータを指定してメソッドを実行した際の動作についても、違いが存"
"在します。"

#. leap/perl-File-Find-Rule/summary
msgid "Alternative interface to File::Find"
msgstr "File::Find に対する代替インターフェイス"

#. leap/perl-File-Find-Rule/description
msgid ""
"File::Find::Rule is a friendlier interface to File::Find. It allows you to "
"build rules which specify the desired files and directories."
msgstr ""
"File::Find::Rule は File::Find に対するよりフレンドリーなインターフェイスで"
"す。必要なファイルやディレクトリを指定するためのルールを構築することができま"
"す。"

#. leap/perl-File-Find-Rule-Perl/summary
msgid "Common rules for searching for Perl things"
msgstr "Perl で何かを検索する際の汎用ルール"

#. leap/perl-File-Find-Rule-Perl/description
msgid ""
"I write a lot of things that muck with Perl files. And it always annoyed me "
"that finding \"perl files\" requires a moderately complex the File::Find::"
"Rule manpage pattern. \n"
"*File::Find::Rule::Perl* provides methods for finding various types Perl-"
"related files, or replicating search queries run on a distribution in "
"various parts of the CPAN ecosystem."
msgstr ""
"今まで多数の Perl ファイルの断片を作成してきましたが、 \"Perl のファイル\" を"
"検索するにあたっては、複雑な File::Find::Rule のパターンを作成する必要がある"
"ことから、やっかいな存在でした。\n"
"*File::Find::Rule::Perl* は Perl 関連のファイルを検索する際のメソッドを提供す"
"るほか、 CPAN のエコシステムの様々なパーツに合わせて、配布物内の問い合わせを"
"置き換えたりすることができます。"

#. leap/perl-File-Finder/summary
msgid "nice wrapper for File::Find ala find(1)"
msgstr "File::Find find(1) に対する適切なラッパー"

#. leap/perl-File-Finder/description
msgid ""
"'File::Find' is great, but constructing the 'wanted' routine can sometimes "
"be a pain. This module provides a 'wanted'-writer, using syntax that is "
"directly mappable to the _find_ command's syntax.\n"
"\n"
"Also, I find myself (heh) frequently just wanting the list of names that "
"match. With 'File::Find', I have to write a little accumulator, and then "
"access that from a closure. But with 'File::Finder', I can turn the problem "
"inside out.\n"
"\n"
"A 'File::Finder' object contains a hash of 'File::Find' options, and a "
"series of steps that mimic _find_'s predicates. Initially, a 'File::Finder' "
"object has no steps. Each step method clones the previous object's options "
"and steps, and then adds the new step, returning the new object. In this "
"manner, an object can be grown, step by step, by chaining method calls. "
"Furthermore, a partial sequence can be created and held, and used as the "
"head of many different sequences.\n"
"\n"
"For example, a step sequence that finds only files looks like:\n"
"\n"
"  my $files = File::Finder->type('f');\n"
"\n"
"Here, 'type' is acting as a class method and thus a constructor. An instance "
"of 'File::Finder' is returned, containing the one step to verify that only "
"files are selected. We could use this immediately as a 'File::Find::find' "
"wanted routine, although it'd be uninteresting:\n"
"\n"
"  use File::Find;   find($files, \"/tmp\");\n"
"\n"
"Calling a step method on an existing object adds the step, returning the new "
"object:\n"
"\n"
"  my $files_print = $files->print;\n"
"\n"
"And now if we use this with 'find', we get a nice display:\n"
"\n"
"  find($files_print, \"/tmp\");\n"
"\n"
"Of course, we didn't really need that second object: we could have generated "
"it on the fly:\n"
"\n"
"  find($files->print, \"/tmp\");\n"
"\n"
"'File::Find' supports options to modify behavior, such as depth-first "
"searching. The 'depth' step flags this in the options as well:\n"
"\n"
"  my $files_depth_print = $files->depth->print;\n"
"\n"
"However, the 'File::Finder' object needs to be told explictly to generate an "
"options hash for 'File::Find::find' to pass this information along:\n"
"\n"
"  find($files_depth_print->as_options, \"/tmp\");\n"
"\n"
"A 'File::Finder' object, like the _find_ command, supports AND, OR, NOT, and "
"parenthesized sub-expressions. AND binds tighter than OR, and is also "
"implied everywhere that it makes sense. Like _find_, the predicates are "
"computed in a \"short-circuit\" fashion, so that a false to the left of the "
"(implied) AND keeps the right side from being evaluated, including entire "
"parenthesized subexpressions. Similarly, if the left side of an OR is false, "
"the right side is evaluated, and if the left side of the OR is true, the "
"right side is skipped. Nested parens are handled properly. Parens are "
"indicated with the rather ugly 'left' and 'right' methods:\n"
"\n"
"  my $big_or_old_files = $files->left->size(\"+50\")->or->atime(\"+30\")-"
">right;\n"
"\n"
"The parens here correspond directly to the parens in:\n"
"\n"
"  find somewhere -type f '(' -size +50 -o -atime +30 ')'\n"
"\n"
"and are needed so that the OR and the implied ANDs have the right nesting.\n"
"\n"
"Besides passing the constructed 'File::Finder' object to 'File::Finder::"
"find' directly as a 'wanted' routine or an options hash, you can also call "
"'find' implictly, with 'in'. 'in' provides a list of starting points, and "
"returns all filenames that match the criteria.\n"
"\n"
"For example, a list of all names in /tmp can be generated simply with:\n"
"\n"
" my @names = File::Finder->in(\"/tmp\");\n"
"\n"
"For more flexibility, use 'collect' to execute an arbitrary block in a list "
"context, concatenating all the results (similar to 'map'):\n"
"\n"
"  my %sizes = File::Finder     ->collect(sub { $File::Find::name => -s _ }, "
"\"/tmp\");\n"
"\n"
"That's all I can think of for now. The rest is in the detailed reference "
"below."
msgstr ""
"'File::Find' は、時として痛みを伴う '必須' ルーチンを構築した仕組みです。この"
"モジュールは、 _find_ コマンドの文法に直接結びつけることのできる文法で、必要"
"な機能を提供します。\n"
"\n"
"また、私自身で発見したところによると、該当する名前を繰り返し検索したいような"
"要件があることがわかりました。 'File::Find' を利用することで、小さなアキュム"
"レータを作成することで、クロージャからそれらにアクセスすることができます。 "
"'File::Finder' を利用すると、問題を簡単に解決することができます。\n"
"\n"
"'File::Finder' オブジェクトには 'File::Find' オプションのハッシュが含まれてい"
"るほか、 _find_ の述語を疑似するための各種ステップが含まれています。 'File::"
"Finder' の初期状態ではどのステップも含まれていませんが、各ステップメソッドが"
"以前のオブジェクトのオプションとステップを複製したあと、新しいステップを追加"
"して新しいオブジェクトを返します。このような仕組みにより、メソッド呼び出しを"
"繋げることで、オブジェクトをステップ単位で大きくすることができます。これに加"
"えて、部分的な手順も作成して保持することができます。\n"
"\n"
"たとえば、ファイルだけを検索するようなシーケンスは、下記のようにして作成しま"
"す:\n"
"\n"
"  my $files = File::Finder->type('f');\n"
"\n"
"ここで、 'type' はクラスメソッドとして動作するもので、コンストラクタとしても"
"動作します。これにより、ファイルだけを選択するステップを含む 'File::Finder' "
"のインスタンスが返されます。このようにして作成したオブジェクトを 'File::"
"Find::find' のパラメータとして与えることができます (ただし、これだけでは不十"
"分でしょう):\n"
"\n"
"  use File::Find;   find($files, \"/tmp\");\n"
"\n"
"既存のオブジェクトに対してステップメソッドを呼び出すと、新しいステップを追加"
"して新しいオブジェクトを返します:\n"
"\n"
"  my $files_print = $files->print;\n"
"\n"
"これを 'find' のパラメータとして与えれば、そのまま結果が出力されます:\n"
"\n"
"  find($files_print, \"/tmp\");\n"
"\n"
"もちろん 2 つめのオブジェクトが不要な場合は、その場で作成して与えることもでき"
"ます:\n"
"\n"
"  find($files->print, \"/tmp\");\n"
"\n"
"'File::Find' では、深さを優先して検索するなどの動作変更オプションにも対応して"
"います。深さを優先したい場合は、 'depth' ステップを指定します:\n"
"\n"
"  my $files_depth_print = $files->depth->print;\n"
"\n"
"このほか、 'File::Finder' オブジェクトには、 'File::Find::find' にオプション"
"値を明示的に渡すためのインターフェイスも用意されています:\n"
"\n"
"  find($files_depth_print->as_options, \"/tmp\");\n"
"\n"
"'File::Finder' のオブジェクトは、 _find_ コマンドと同様に AND/OR/NOT や括弧な"
"どの表現に対応しています。 AND は OR よりも優先して動作する仕組みで、複数の条"
"件を指定すれば暗黙のうちに設定されます。また、 _find_ と同様に、述語は \"でき"
"る限り短く\" 解釈するため、より左側の判断で false が検知され、 (暗黙の) AND "
"が存在すると、右側の条件は解釈されなくなります。それらが括弧でくくられていた"
"場合も同様です。同様に、 OR の左側が false であった場合は右側を解釈しますが、"
"左側が true であった場合は右側を解釈しません。また、入れ子構造は適切に処理さ"
"れます。括弧は 'left' および 'right' のメソッドで指定します (わかりにくいです"
"が・・):\n"
"\n"
"  my $big_or_old_files = $files->left->size(\"+50\")->or->atime(\"+30\")-"
">right;\n"
"\n"
"上記の例を find コマンドに置き換えると、下記のようになります:\n"
"\n"
"  find somewhere -type f '(' -size +50 -o -atime +30 ')'\n"
"\n"
"これにより、 OR と暗黙の AND が正しく入れ子になっていることがわかるでしょ"
"う。\n"
"\n"
"構築した 'File::Finder' オブジェクトを 'File::Finder::find' の 'wanted' に直"
"接渡す仕組みやオプションハッシュの出力のほか、 'in' を利用することで、 "
"'find' を暗黙のうちに呼び出すこともできます。 'in' は検索開始点の一覧を指定し"
"て、条件に該当する全てのファイル名を返します。\n"
"\n"
"たとえば /tmp 内の全ての名前を一覧にするには、下記のように指定します:\n"
"\n"
" my @names = File::Finder->in(\"/tmp\");\n"
"\n"
"より柔軟な方法としては、 'collect' メソッドがあります。これはリストコンテキス"
"トで任意のブロックを実行できる仕組みで、全ての結果を繋げるものです ('map' に"
"似た仕組みです):\n"
"\n"
"  my %sizes = File::Finder     ->collect(sub { $File::Find::name => -s _ }, "
"\"/tmp\");"

#. leap/perl-File-Flock/summary
msgid "File Locking with Flock"
msgstr "flock を利用したファイルロック (施錠)"

#. leap/perl-File-Flock/description
msgid ""
"Lock files using the flock() call. If the file to be locked does not exist, "
"then the file is created. If the file was created then it will be removed "
"when it is unlocked assuming it's still an empty file.\n"
"\n"
"Locks can be created by new'ing a *File::Flock* object. Such locks are "
"automatically removed when the object goes out of scope. The *unlock()* "
"method may also be used. \n"
"*lock_rename()* is used to tell File::Flock when a file has been renamed "
"(and thus the internal locking data that is stored based on the filename "
"should be moved to a new name). *unlock()* the new name rather than the "
"original name.\n"
"\n"
"Locks are released on process exit when the process that created the lock "
"exits. Subprocesses that exit do not remove locks. Use forget_locks() or "
"POSIX::_exit() to prevent unlocking on process exit."
msgstr ""
"flock() システムコールを利用したファイルロック (施錠) です。ロック対象のファ"
"イルが存在しない場合は、そのファイルを作成します。また、ファイルを作成した場"
"合は、そのファイルが空であればロック解除時に削除されます。\n"
"\n"
"ロックは新しい *File::Flock* オブジェクトで作成することができます。これらの"
"ロックは、オブジェクトがスコープから外れることで、自動的に削除されます。もち"
"ろん *unlock()' メソッドもご利用いただけます。\n"
"*lock_rename()' は、 File::Flock に対してファイル名が変更された (およびファイ"
"ル名をベースにして保存された内部ロック情報も、新しい名前にあわせて移動した) "
"ことを知らせます。なお、 *unlock()* は元の名前ではなく、新しい方の名前で解除"
"してください。\n"
"\n"
"ロックは、ロックを作成したプロセスが終了することで、開放されます。サブプロセ"
"スの終了時には開放されません。 forget_locks() や POSIX::_exit() を利用するこ"
"とで、プロセス終了時のロック解除を防ぐこともできます。"

#. leap/perl-File-HomeDir/summary
msgid "Find your home and other directories on any platform"
msgstr "任意のプラットフォームでホームディレクトリなどを取得するモジュール"

#. leap/perl-File-HomeDir/description
msgid ""
"*File::HomeDir* is a module for locating the directories that are \"owned\" "
"by a user (typicaly your user) and to solve the various issues that arise "
"trying to find them consistently across a wide variety of platforms.\n"
"\n"
"The end result is a single API that can find your resources on any platform, "
"making it relatively trivial to create Perl software that works elegantly "
"and correctly no matter where you run it.\n"
"\n"
"This module provides two main interfaces.\n"
"\n"
"The first is a modern File::Spec-style interface with a consistent OO API "
"and different implementation modules to support various platforms. You are\n"
"*strongly* recommended to use this interface.\n"
"\n"
"The second interface is for legacy support of the original 0.07 interface "
"that exported a 'home()' function by default and tied the '%~' variable.\n"
"\n"
"It is generally not recommended that you use this interface, but due to back-"
"compatibility reasons they will remain supported until at least 2010.\n"
"\n"
"The '%~' interface has been deprecated. Documentation was removed in 2009, "
"Unit test were removed in 2011, usage will issue warnings from 2012, and the "
"interface will be removed entirely in 2015 (in line with the general Perl "
"toolchain convention of a 10 year support period for legacy APIs that are "
"potentially or actually in common use)."
msgstr ""
"*File::HomeDir* は、特定のユーザ (一般的にはあなた自身) が \"所有する\" ディ"
"レクトリを検索するためのモジュールで、様々なプラットフォームで発生しうる問題"
"を解決し、一貫したインターフェイスを提供する仕組みです。\n"
"\n"
"このモジュールは任意のプラットフォーム内にあるリソースを検出するため、単一の "
"API を提供しています。これにより、比較的ありふれた方法で、動作しているプラッ"
"トフォームにかかわらず、 Perl のソフトウエアを作成できるようになっていま"
"す。\n"
"\n"
"このモジュールは 2 つの主なインターフェイスを提供しています。\n"
"\n"
"1 つめはモダンな File::Spec スタイルのインターフェイスで、オブジェクト指向の "
"API を提供し、様々なプラットフォームに対応するために様々な実装モジュールが存"
"在するものです。こちらのインターフェイスの利用を *強く* お勧めします。\n"
"\n"
"2 つめにはバージョン 0.07 までに存在していた古いバージョン向けのインターフェ"
"イスで、既定では 'home()' 関数と '%~' 変数が公開されているものです。\n"
"\n"
"こちらのインターフェイスは一般に非推奨ですが、後方互換性を確保する理由から、 "
"2010 年まではサポートが継続されています。\n"
"\n"
"'%~' のインターフェイスは廃止予定のもので、 2009 年にはドキュメンテーションか"
"らも削除されました。単体テストは 2011 年まで続けられていて、　2012 年以降は警"
"告を発するようになっています。なお、 2015 年にはインターフェイスが完全に削除"
"される予定 (一般に、汎用の Perl ツールチェインは 10 年間のサポート期限で、潜"
"在的にも実際にもその期間だけ利用するのが一般的であるためです) 。"

#. leap/perl-File-LibMagic/summary
msgid "Determine MIME types of data or files using libmagic"
msgstr "libmagic によるデータやファイルの MIME タイプの判別"

#. leap/perl-File-LibMagic/description
msgid ""
"The 'File::LibMagic' module is a simple perl interface to libmagic from the "
"file package (version 4.x or 5.x). You will need both the library (_libmagic."
"so_) and the header file (_magic.h_) to build this Perl module."
msgstr ""
"'File::LibMagic' モジュールは file パッケージが提供する libmagic (バージョン "
"4.x または 5.x) に対する、シンプルな Perl インターフェイスです。この Perl モ"
"ジュールを構築するには、ライブラリ (_libmagic.so_) とヘッダファイル (_magic."
"h_) の両方が必要となります。"

#. leap/perl-File-Listing/summary
msgid "parse directory listing"
msgstr "ディレクトリ一覧の処理"

#. leap/perl-File-Listing/description
msgid ""
"This module exports a single function called parse_dir(), which can be used "
"to parse directory listings.\n"
"\n"
"The first parameter to parse_dir() is the directory listing to parse. It can "
"be a scalar, a reference to an array of directory lines or a glob "
"representing a filehandle to read the directory listing from.\n"
"\n"
"The second parameter is the time zone to use when parsing time stamps in the "
"listing. If this value is undefined, then the local time zone is assumed.\n"
"\n"
"The third parameter is the type of listing to assume. Currently supported "
"formats are 'unix', 'apache' and 'dosftp'. The default value is 'unix'. "
"Ideally, the listing type should be determined automatically.\n"
"\n"
"The fourth parameter specifies how unparseable lines should be treated. "
"Values can be 'ignore', 'warn' or a code reference. Warn means that the perl "
"warn() function will be called. If a code reference is passed, then this "
"routine will be called and the return value from it will be incorporated in "
"the listing. The default is 'ignore'.\n"
"\n"
"Only the first parameter is mandatory.\n"
"\n"
"The return value from parse_dir() is a list of directory entries. In a "
"scalar context the return value is a reference to the list. The directory "
"entries are represented by an array consisting of [ $filename, $filetype, "
"$filesize, $filetime, $filemode ]. The $filetype value is one of the letters "
"'f', 'd', 'l' or '?'. The $filetime value is the seconds since Jan 1, 1970. "
"The $filemode is a bitmask like the mode returned by stat()."
msgstr ""
"このモジュールでは、ディレクトリ一覧を処理するために使用する parse_dir() と呼"
"ばれる関数を単独で公開しています。\n"
"\n"
"parse_dir() に対する最初のパラメータは、処理対象のディレクトリ一覧です。スカ"
"ラー値として指定することができるほか、ディレクトリ行の配列に対する参照や、"
"ディレクトリ一覧を読み込むファイルハンドルのグロブを指定することもできま"
"す。\n"
"\n"
"2 つめのパラメータは、一覧内でタイムスタンプを処理する際に使用するタイムゾー"
"ンを指定します。この値を undef にすると、ローカルのタイムゾーンを使用しま"
"す。\n"
"\n"
"3 つめのパラメータは、一覧のデータタイプを指定します。現時点でサポートされて"
"いる形式としては 'unix', 'apache', 'dosftp' があります。既定値は 'unix' で"
"す。理想的には自動的に一覧のデータタイプを判断すべきものです。\n"
"\n"
"4 つめのパラメータでは、処理不可能な行をどのように扱うのかを指定しま"
"す。'ignore', 'warn' またはコード参照として指定します。 'warn' を指定する"
"と、 Perl のwarn() 関数が呼び出されます。コード参照を指定した場合は、参照不可"
"能な行で指定したコードが呼び出され、返り値が一覧内に表示されます。既定値は "
"'ignore' です。\n"
"\n"
"最初のパラメータのみが必須で、それ以外は任意です。\n"
"\n"
"parse_dir() からの返り値はディレクトリ項目の一覧です。返り値はスカラー値で、"
"一覧への参照になっています。ディレクトリ項目はそれぞれ [ $filename (ファイル"
"名), $filetype (ファイルタイプ), $filesize (ファイルサイズ), $filetime (タイ"
"ムスタンプ), $filemode(ファイルモード) ] の配列になっています。 $filetime の"
"値は 1970/01/01 からの経過秒数で、 $filemode は stat() で返されるようなビット"
"マスク表記のモード値です。"

#. leap/perl-File-MMagic/summary
msgid "Guess file type"
msgstr "ファイルタイプの推測"

#. leap/perl-File-MMagic/description
msgid ""
"checktype_filename(), checktype_filehandle() and checktype_contents returns "
"string contains file type with MIME mediatype format."
msgstr ""
"checktype_filename(), checktype_filehandle(), checktype_contents は、それぞ"
"れ MIME メディアタイプ形式でファイルの形式を返します。"

#. leap/perl-File-Map/summary
msgid "Memory mapping made simple and safe"
msgstr "シンプルで安全なメモリマッピング"

#. leap/perl-File-Map/description
msgid "File::Map maps files or anonymous memory into perl variables."
msgstr ""
"File::Map はファイルや匿名メモリマップを作成し、 Perl の変数として提供しま"
"す。"

#. leap/perl-File-MimeInfo/summary
msgid "Determine file type from the file name"
msgstr "ファイル名からのファイル種類判別"

#. leap/perl-File-MimeInfo/description
msgid ""
"This module can be used to determine the mime type of a file. It tries to "
"implement the freedesktop specification for a shared MIME database.\n"
"\n"
"For this module shared-mime-info-spec 0.13 was used.\n"
"\n"
"This package only uses the globs file. No real magic checking is used. The "
"File::MimeInfo::Magic package is provided for magic typing.\n"
"\n"
"If you want to determine the mimetype of data in a memory buffer you should "
"use File::MimeInfo::Magic in combination with IO::Scalar.\n"
"\n"
"This module loads the various data files when needed. If you want to hash "
"data earlier see the 'rehash' methods below."
msgstr ""
"このモジュールは、ファイルの MIME タイプを判別するために使用するものです。共"
"有 MIME データベースに対しては、 freedesktop 仕様を実装するように作られていま"
"す。\n"
"\n"
"また、このモジュールでは shared-mime-info-spec 0.13 を使用しています。\n"
"\n"
"このパッケージはファイル名のみを判断対象としています。実際のマジックナンバー"
"チェックは行ないません。 マジックナンバーによるチェックを行ないたい場合は、 "
"File::MimeInfo::Magic パッケージをお使いください。\n"
"\n"
"メモリバッファ内のデータに対して MIME タイプの判別を行ないたい場合は、 IO::"
"Scalar と共に File::MimeInfo::Magic をお使いください。\n"
"\n"
"このモジュールは、必要なときに様々なデータファイルを読み込みます。データの"
"ハッシュ化を行ないたい場合は、 'rehash' メソッドをご覧ください。"

#. leap/perl-File-Mork/summary
msgid "Module to Read Mozilla Url History Files"
msgstr "Mozilla URL 履歴ファイルを読み込むためのモジュール"

#. leap/perl-File-Mork/description
msgid ""
"This is a module that can read the Mozilla URL history file -- normally "
"$HOME/.mozilla/default/*.slt/history.dat -- and extract the id, url, name, "
"hostname, first visted dat, last visited date and visit count.\n"
"\n"
"To find your history file it might be worth using *Mozilla::Backup* which "
"has some platform-independent code for finding the profiles of various "
"Mozilla-isms (including Firefox, Camino, K-Meleon, etc.)."
msgstr ""
"これは Mozilla の URL 履歴ファイル (通常は $HOME/.mozilla/default/*.slt/"
"history.dat にあるファイル) を読み込むことのできるモジュールです。 ID, 名前, "
"ホスト名, 初回の訪問日時, 最終の訪問日時, 訪問回数をそれぞれ抽出することがで"
"きます。\n"
"\n"
"履歴ファイル内を検索したい場合は、 *Mozilla::Backup* をお使いいただくこともで"
"きます。こちらは様々な Mozilla アプリケーション (Firefox, Camino, K-Meleon な"
"ど) でプロファイルを検出するためのプラットフォーム依存のコードが少し含まれて"
"います。"

#. leap/perl-File-Next/summary
#. leap/perl-File-Next/description
msgid "File-finding iterator"
msgstr "ファイル検出列挙器"

#. leap/perl-File-Path/summary
msgid "Create or remove directory trees"
msgstr "ディレクトリツリーの作成および削除"

#. leap/perl-File-Path/description
msgid ""
"This module provides a convenient way to create directories of arbitrary "
"depth and to delete an entire directory subtree from the filesystem."
msgstr ""
"このモジュールは、任意の深さのディレクトリを作成したり、サブツリー全体を削除"
"したりすることのできる便利な方法を提供します。"

#. leap/perl-File-Path-Tiny/summary
msgid ""
"Recursive versions of mkdir() and rmdir() without as much overhead as Fi[cut]"
msgstr "File::Path のオーバーヘッドを軽減した mkdir() と rmdir() の再帰版"

#. leap/perl-File-Path-Tiny/description
msgid ""
"The goal here is simply to provide recursive versions of mkdir() and rmdir() "
"with as little code and overhead as possible.\n"
"\n"
"This module is in no way meant to derogate File::Path and is in no way an "
"endorsement to go out and replace all use of File::Path with File::Path::"
"Tiny.\n"
"\n"
"File::Path is very good at what it does but there's simply a lot happening "
"that we can do without much of the time.\n"
"\n"
"Here are some things File::Path has/does that this module attempts to do "
"without: \n"
"* * multiple interfaces\n"
"\n"
"Backwards compatibility brings in a lot of code and logic that we don't need "
"from here on out. \n"
"* * chdir()s\n"
"\n"
"It forces a ton of chdir()s which could leave you somewhere you're not "
"planning on being and requires much more overhead to do.\n"
"\n"
"This module provides a way to disable that if you know it is safe to do so "
"in your circumstance. \n"
"* * can croak not allowing you to detect and handle failure\n"
"\n"
"Just let me handle errors how I want. Don't make my entire app die or have "
"to wrap it in an eval\n"
"\n"
"The exception here is the security checks can croak, which is what you want. "
"See DIAGNOSTICS for more info. \n"
"* * A well intentioned output system\n"
"\n"
"Just let me do the output how I want. (Nothing, As HTML, print to a "
"filehandle, etc...) \n"
"* * A well intentioned and experimental (IE subject to change) error   "
"handling system.\n"
"\n"
"Just keep it simple and detect failure via a boolean check and do what I "
"want with the error. See \"How can I make/remove multiple paths?\" \n"
"* * According to its POD, removing a tree is apparently not safe unless "
"you   tell it to be with the ‘safe’ or 'keep_root' attributes.\n"
"\n"
"Seems like that should just happen, I don't want to worry about accidentally "
"removing / when I pass it /tmp"
msgstr ""
"このモジュールは、できる限り小さなコードとオーバーヘッドで、 mkdir() と "
"rmdir() の再帰版を提供することを目的としています。\n"
"\n"
"このモジュールは File::Path の機能縮小版ではありませんし、 File::Path の機能"
"のすべてを File::Path::Tiny で置き換えるような意図もありません。\n"
"\n"
"File::Path は機能の割には非常に良質なモジュールですが、このモジュールを使うこ"
"とによる負荷は大きく、このモジュール無しでできることも数多くあります。\n"
"\n"
"下記に File::Path には存在するものの、本モジュールには存在していない機能を示"
"します:\n"
"* * 複数のインターフェイス\n"
"\n"
"後方互換性の確保には大量のコードが必要となりますが、本モジュールでは不要であ"
"るため、削除されています。\n"
"* * chdir()\n"
"\n"
"File::Path には予期せぬ場所に多数の chdir() が存在し、これによって大きなオー"
"バーヘッドになっています。\n"
"\n"
"このモジュールは、お使いの状況下で無効化するのが安全かどうかを知る術を提供し"
"ます。\n"
"* * croak による失敗の検出とその処理\n"
"\n"
"必要に応じてエラーを処理したいものです。アプリケーション全体を終了させたり、"
"わざわざ eval() でラッピングしたりしたくはありません。\n"
"\n"
"ただし、セキュリティチェックでのみ croak することがあります。これはお使いの方"
"にとっても希望の動作でしょう。詳しくは DIAGNOSTICS をお読みください。\n"
"* * よりわかりやすい出力システム\n"
"\n"
"出力形式も必要に応じて処理したいものです (HTML 出力やファイルハンドルへの出力"
"など) 。\n"
"* * よりわかりやすく、実験的 (つまり、仕様を変えやすい) エラー処理システム\n"
"\n"
"シンプルであり、かつ boolean チェックで容易に検出できるエラー処理システムであ"
"るべきです。詳しくは \"How can I make/remove multiple paths?\" (複数のパスを"
"つく性または削除するには？) をお読みください。\n"
"* * POD によると、 ‘safe’ もしくは 'keep_root' の属性を付与しない限り、ツリー"
"の削除は安全ではないものと思われる\n"
"\n"
"誤って / を削除してしまったりなどの心配をする必要はありません。"

#. leap/perl-Image-ExifTool/perl-File-RandomAccess/summary
msgid "Random access reads of sequential file or scalar"
msgstr ""
"シーケンシャル形式のファイルやスカラ値をランダムアクセスで読み込むモジュール"

#. leap/perl-Image-ExifTool/perl-File-RandomAccess/description
msgid ""
"Allows random access to sequential file by buffering the file if necessary. "
"Also allows access to data in memory to be accessed as if it were a file."
msgstr ""
"順次アクセスしかできないファイルに対して、必要であればバッファを設定してラン"
"ダムアクセスできるようにします。メモリ内のデータをファイルであるかのように扱"
"うこともできます。"

#. leap/perl-File-ReadBackwards/summary
msgid "Read a file backwards by lines"
msgstr "逆方向にファイルを 1 行ずつ読み込むモジュール"

#. leap/perl-File-ReadBackwards/description
msgid ""
"This module reads a file backwards line by line. It is simple to use, memory "
"efficient and fast. It supports both an object and a tied handle interface.\n"
"\n"
"It is intended for processing log and other similar text files which "
"typically have their newest entries appended to them. By default files are "
"assumed to be plain text and have a line ending appropriate to the OS. But "
"you can set the input record separator string on a per file basis."
msgstr ""
"このモジュールは、ファイルを逆順に 1 行ずつ読み込む処理を行ないます。使いやす"
"く、メモリ面での効率化が図られ、高速に動作します。また、オブジェクト形式の利"
"用のほか、タイハンドルを利用したインターフェイスにも対応しています。\n"
"\n"
"このモジュールはログファイルやその他のテキストを処理する用途で作られたもの"
"で、もっとも新しい行から順に出力したいような場合に便利な仕組みです。既定では"
"ファイルが純粋なテキストファイルであり、 OS ごとの既定の改行コードで区切られ"
"ているものとして扱われます。なお、必要であればファイルごとに区切り文字を指定"
"して読み込むこともできます。"

#. leap/perl-File-Remove/summary
msgid "Remove files and directories"
msgstr "ファイルやディレクトリの削除"

#. leap/perl-File-Remove/description
msgid ""
"*File::Remove::remove* removes files and directories. It acts like\n"
"*/bin/rm*, for the most part. Although 'unlink' can be given a list of "
"files, it will not remove directories; this module remedies that. It also "
"accepts wildcards, * and ?, as arguments for filenames. \n"
"*File::Remove::trash* accepts the same arguments as *remove*, with the "
"addition of an optional, infrequently used \"other platforms\" hashref."
msgstr ""
"*File::Remove::remove* はファイルやディレクトリを削除します。ほとんどの場合に"
"おいて、 */bin/rm* のような動作をする仕組みです。 'unlink' ではファイルのリス"
"トを渡すことができますが、ディレクトリを削除することができません。このモ"
"ジュールではディレクトリも削除することができます。このほか、ワイルドカード "
"(*, ?) をファイル名のパラメータとして渡すこともできます。\n"
"*File::Remove::trash* は *remove* と同じパラメータをとりますが、オプションで "
"(あまり使用されない) \"他のプラットフォームにおける\" ハッシュ参照もとること"
"ができます。"

#. leap/perl-File-Rsync/summary
msgid "Perl Module Interface to Rsync(1) F<Http://Rsync.Samba.Org/Rsync/>"
msgstr ""
"Rsync(1) F<Http://Rsync.Samba.Org/Rsync/> に対する Perl モジュールインター"
"フェイス"

#. leap/perl-File-Rsync/description
msgid ""
"Perl Convenience wrapper for the rsync(1) program. Written for _rsync-2.3.2_ "
"and updated for _rsync-3.1.1_ but should perform properly with most recent "
"versions."
msgstr ""
"rsync(1) プログラムに対する Perl の便利なラッパーです。 _rsync-2.3.2_ 向けに"
"作成され、 _rsync-3.1.1_ 向けに更新されたものですが、最近のバージョンであれば"
"ほとんどのもので動作します。"

#. leap/perl-File-ShareDir/summary
msgid "Locate per-dist and per-module shared files"
msgstr ""
"ディストリビューションごと、およびモジュールごとの共有ファイルの場所検索"

#. leap/perl-File-ShareDir/description
msgid ""
"The intent of File::ShareDir is to provide a companion to Class::Inspector "
"and File::HomeDir, modules that take a process that is well-known by "
"advanced Perl developers but gets a little tricky, and make it more "
"available to the larger Perl community.\n"
"\n"
"Quite often you want or need your Perl module (CPAN or otherwise) to have "
"access to a large amount of read-only data that is stored on the file-system "
"at run-time.\n"
"\n"
"On a linux-like system, this would be in a place such as /usr/share, however "
"Perl runs on a wide variety of different systems, and so the use of any one "
"location is unreliable.\n"
"\n"
"Perl provides a little-known method for doing this, but almost nobody is "
"aware that it exists. As a result, module authors often go through some very "
"strange ways to make the data available to their code.\n"
"\n"
"The most common of these is to dump the data out to an enormous Perl data "
"structure and save it into the module itself. The result are enormous multi-"
"megabyte .pm files that chew up a lot of memory needlessly.\n"
"\n"
"Another method is to put the data \"file\" after the __DATA__ compiler tag "
"and limit yourself to access as a filehandle.\n"
"\n"
"The problem to solve is really quite simple.\n"
"\n"
"  1. Write the data files to the system at install time.\n"
"\n"
"  2. Know where you put them at run-time.\n"
"\n"
"Perl's install system creates an \"auto\" directory for both every "
"distribution and for every module file.\n"
"\n"
"These are used by a couple of different auto-loading systems to store code "
"fragments generated at install time, and various other modules written by "
"the Perl \"ancient masters\".\n"
"\n"
"But the same mechanism is available to any dist or module to store any sort "
"of data."
msgstr ""
"File::ShareDir の目的は、 Class::Inspector や File::HomeDir に対する手引きと"
"なることです。これらのモジュールは Perl を利用する熟練した開発者がよく知るも"
"のですが、少し奇妙な仕組みであるため、より広い Perl のコミュニティに向けて作"
"られています。\n"
"\n"
"ファイルシステム内に保存された巨大なデータファイルに対して、読み込みのみの高"
"速なアクセスを行なう Perl モジュール (CPAN など) は、よく必要とされるもので"
"す。\n"
"\n"
"Linux 系のシステムでは、これらは /usr/share などのディレクトリに配置されます"
"が、Perl は幅広いシステムで使用されるものであるため、このディレクトリをそのま"
"ま利用することはできません。\n"
"\n"
"Perl はこれを行なうために少し知られた機能を提供していますが、それが存在してい"
"ることはあまり知られていません。結果として、モジュールの作者はコード内からそ"
"れらの共有データを使用する際、奇妙な方法を実装して実現している状況です。\n"
"\n"
"よくあるやり方としては、主に巨大な Perl のデータ構造を出力し、モジュール内に"
"保存するようなやり方です。出力結果は巨大な .pm ファイルになるため、不要なメモ"
"リを対象に消費することになってしまいます。\n"
"\n"
"もう 1 つの方法はコンパイラタグの __DATA__ を使用する方法で、データ \"ファイ"
"ル\" をその後ろに配置して、モジュール自身からのみアクセスできるようにしま"
"す。\n"
"\n"
"以上のことから、解決すべき問題は非常にシンプルです。\n"
"\n"
"  1. インストール時に、システム内にデータファイルを書き込む\n"
"\n"
"  2. 実行時にその場所を知ることができるようにする\n"
"\n"
"Perl のインストールシステムは、それぞれの配布物および各モジュールファイルに対"
"して、 \"auto\" というディレクトリを作成します。\n"
"\n"
"これらは様々な自動読み込みのシステムで使用しているもので、インストール時に"
"コード以外の残りを保存する、というやり方は、 \"長老\" とも呼ばれる様々な "
"Perl モジュールで記述されています。\n"
"\n"
"同様の仕組みを、任意の配布物やモジュールで利用できるようにしたものが本モ"
"ジュールです。"

#. leap/perl-File-ShareDir-Install/summary
msgid "Install shared files"
msgstr "共有ファイルのインストール"

#. leap/perl-File-ShareDir-Install/description
msgid ""
"File::ShareDir::Install allows you to install read-only data files from a "
"distribution. It is a companion module to File::ShareDir, which allows you "
"to locate these files after installation.\n"
"\n"
"It is a port of Module::Install::Share to ExtUtils::MakeMaker with the "
"improvement of only installing the files you want; '.svn', '.git' and other "
"source-control junk will be ignored.\n"
"\n"
"Please note that this module installs read-only data files; empty "
"directories will be ignored."
msgstr ""
"File::ShareDir::Install は、配布物から読み込み専用のデータファイルをインス"
"トールすることができます。 File::ShareDir に対するコンパニオンモジュールで、"
"インストール後にこれらのファイルを配置することができます。\n"
"\n"
"このモジュールは Module::Install:Share を ExtUtils::MakeMaker に移植したもの"
"で、必要なファイルのみ ('.svn', '.git' などのソース制御システム用のファイルを"
"除外して) をインストールするように改善されています。\n"
"\n"
"ただし、このモジュールでインストールすることができるのは、読み込み専用ファイ"
"ルだけであることに注意してください。また、空のディレクトリは無視されます。"

#. leap/perl-File-ShareDir-ProjectDistDir/summary
#. leap/perl-File-ShareDir-ProjectDistDir/description
msgid ""
"Simple set-and-forget using of a '/share' directory in your projects root"
msgstr ""
"お使いのプロジェクトルート内に '/share' ディレクトリを設定するシンプルな仕組"
"み"

#. leap/perl-File-Slurp/summary
msgid "Simple and Efficient Reading/Writing of Complete Files"
msgstr "ファイル全体を読み込んだり書き込んだりするためのシンプルで効果的な方法"

#. leap/perl-File-Slurp/description
msgid ""
"This module provides subs that allow you to read or write entire files with "
"one simple call. They are designed to be simple to use, have flexible ways "
"to pass in or get the file contents and to be very efficient. There is also "
"a sub to read in all the files in a directory other than '.' and '..'\n"
"\n"
"These slurp/spew subs work for files, pipes and sockets, stdio, pseudo-"
"files, and the DATA handle. Read more about why slurping files is a good "
"thing in the file 'slurp_article.pod' in the extras/ directory.\n"
"\n"
"If you are interested in how fast these calls work, check out the "
"slurp_bench.pl program in the extras/ directory. It compares many different "
"forms of slurping. You can select the I/O direction, context and file sizes. "
"Use the --help option to see how to run it."
msgstr ""
"このモジュールは、ファイルを一括で読み込んだり、書き込んだりするための sub を"
"提供しています。これらはシンプルで使いやすくなるように作られていて、読み込み"
"結果や書き込むべき内容は、柔軟で効果的に指定することができます。また、 '.' "
"や '..' を除くディレクトリについて、これらの中にあるファイルを読み込む機能も"
"用意されています。\n"
"\n"
"これらの slurp/spew サブは、ファイルのほかパイプやソケット、標準入出力や擬似"
"ファイル、データハンドルに対しても動作させることができます。ファイルの一括読"
"み込みがなぜ必要なのかについて、詳しくは extras/ ディレクトリ内にあ"
"る'slurp_article.pod' ファイルをお読みください。\n"
"\n"
"このコールがなぜこれだけ高速に動作するのかについて知りたい場合は、 extras/ "
"ディレクトリ内にある slurp_bench.pl プログラムをお読みください。ここでは様々"
"な形式での slurp 処理が記述されています。ここでは I/O の方向やコンテキスト、"
"ファイルサイズなども指定することができます。詳しくは --help オプションを実行"
"して、表示されるヘルプをお読みください。"

#. leap/perl-File-Slurp-Tiny/summary
msgid "Simple, Sane and Efficient File Slurper [Discouraged]"
msgstr "シンプルでありふれた効果的なファイル読み書き [非推奨]"

#. leap/perl-File-Slurp-Tiny/description
msgid ""
"This module provides functions for fast and correct slurping and spewing. "
"All functions are optionally exported."
msgstr ""
"このモジュールは、高速で正確なファイル読み書き機能を提供します。すべての関数"
"は必要に応じて公開されます。"

#. leap/perl-File-Slurp-Unicode/summary
msgid "Reading/Writing of Complete Files with Character Encoding Support"
msgstr "文字エンコーディングに対応したファイル全体の読み書き"

#. leap/perl-File-Slurp-Unicode/description
msgid ""
"This module wraps the File::Slurp manpage and adds character encoding "
"support through the *'encoding'* parameter. It exports the same functions "
"which take all the same parameters as File::Slurp. Please see the the File::"
"Slurp manpage documentation for basic usage; only the differences are "
"described from here on out."
msgstr ""
"このモジュールは File::Slurp をラッピングするもので、 *'encoding'* パラメータ"
"を通じて文字エンコーディングの設定に対応するものです。 File::Slurp と全く同じ"
"パラメータをとる同名関数を公開します。基本的な使いかいたについて、詳しくは "
"File::Slurp のドキュメンテーションをお読みください。ここでは File::Slurp との"
"違いのみを説明しています。"

#. leap/perl-File-Slurper/summary
msgid "Simple, Sane and Efficient Module to Slurp a File"
msgstr "シンプルでありふれた効果的なファイル読み書きモジュール"

#. leap/perl-File-Slurper/description
msgid ""
"This module provides functions for fast and correct slurping and spewing. "
"All functions are optionally exported. All functions throw exceptions on "
"errors, write functions don't return any meaningful value."
msgstr ""
"このモジュールは、高速で正確なファイル読み書き機能を提供します。すべての関数"
"は必要に応じて公開されます。全ての関数はエラー時に例外をスローするほか、書き"
"込み系の関数は意味のある値を返しません。"

#. leap/perl-File-Sync/summary
msgid "Perl access to fsync() and sync() function calls"
msgstr "Perl からの fsync(), sync() 関数呼び出し"

#. leap/perl-File-Sync/description
msgid ""
"The fsync() function takes a Perl file handle as its only argument, and "
"passes its fileno() to the C function fsync(). It returns _undef_ on "
"failure, or _true_ on success.\n"
"\n"
"The fsync_fd() function is used internally by fsync(); it takes a file "
"descriptor as its only argument.\n"
"\n"
"The sync() function is identical to the C function sync().\n"
"\n"
"This module does *not* export any methods by default, but fsync() is made "
"available as a method of the _FileHandle_ and _IO::Handle_ classes."
msgstr ""
"fsync() 関数は唯一のパラメータとして Perl のファイルハンドルを取り、 "
"fileno() を介して C 関数 fsync() を呼び出します。失敗した場合は _undef_ が返"
"り、成功した場合は _true_ が帰ります。\n"
"\n"
"fsync_fd() 関数は fsync() の内部で使用されている関数で、ファイルディスクリプ"
"タを唯一のパラメータとして設定します。\n"
"\n"
"sync() 関数は C 関数 sync() と同一です。\n"
"\n"
"このモジュールは、既定ではどのメソッドも公開して *いません* が、 "
"_FileHandle_ や _IO::Handle_ クラスのメソッドとして fsync() を利用することは"
"可能です。"

#. leap/perl-File-Tail/summary
msgid "Perl extension for reading from continously updated files"
msgstr "継続的に更新されるファイルを読み込むための Perl 拡張"

#. leap/perl-File-Tail/description
msgid ""
"The primary purpose of File::Tail is reading and analysing log files while "
"they are being written, which is especialy usefull if you are monitoring the "
"logging process with a tool like Tobias Oetiker's MRTG.\n"
"\n"
"The module tries very hard NOT to \"busy-wait\" on a file that has little "
"traffic. Any time it reads new data from the file, it counts the number of "
"new lines, and divides that number by the time that passed since data were "
"last written to the file before that. That is considered the average time "
"before new data will be written. When there is no new data to read, 'File::"
"Tail' sleeps for that number of seconds. Thereafter, the waiting time is "
"recomputed dynamicaly. Note that 'File::Tail' never sleeps for more than the "
"number of seconds set by 'maxinterval'.\n"
"\n"
"If the file does not get altered for a while, 'File::Tail' gets suspicious "
"and startschecking if the file was truncated, or moved and recreated. If "
"anything like that had happened, 'File::Tail' will quietly reopen the file, "
"and continue reading. The only way to affect what happens on reopen is by "
"setting the reset_tail parameter (see below). The effect of this is that the "
"scripts need not be aware when the logfiles were rotated, they will just "
"quietly work on.\n"
"\n"
"Note that the sleep and time used are from Time::HiRes, so this module "
"should do the right thing even if the time to sleep is less than one "
"second.\n"
"\n"
"The logwatch script (also included) demonstrates several ways of calling the "
"methods."
msgstr ""
"File::Tail の主な目的は、今まさに書き込みが行なわれているログファイルに対し"
"て、読み込みや分析を行なうことにあります。特に Tobias Oetiker 氏の MRTG な"
"ど、プロセスを監視しているような場合に便利です。\n"
"\n"
"このモジュールは、システムに負荷をかけるような \"ビジーウエイト\" を使用しな"
"いように努力して作られています。ファイルに対して新しいデータが書き込まれる"
"と、新しい行の行数を数えて、その行数を前回の書き込み日時からの経過時間で割る"
"ことで、平均時間を計算します。新しいデータがない場合、 'File::Tail' は数秒程"
"度スリープします。このとき、待機時間は動的に計算されます。なお、 'File::"
"Tail' は 'maxinterval' で指定した値よりも長く待つことはありません。\n"
"\n"
"ファイルに対してしばらく書き込みがないと、 'File::Tail' はファイルが切り詰め"
"られてしまったり、移動や再作成されてしまったかどうかを疑い、チェックを行なう"
"ようになっています。切り詰め、移動、再作成のいずれかが発生していると、 "
"'File::Tail' は特にメッセージを表示することなくファイルを開き直し、処理を続行"
"します。開き直す処理に影響があるパラメータとして、唯一のものが reset_tail パ"
"ラメータとなります (下記をお読みください) 。ここで指定した値は、ログファイル"
"の切り替えなどのチェックを行なう間隔になります。\n"
"\n"
"なお、 sleep と time の各関数は Time::HiRes のものを使用しているため、スリー"
"プ時間が 1 秒未満の場合であったとしても、正しく動作するようになっています。\n"
"\n"
"logwatch スクリプト (添付) では、これらのメソッドを呼び出した場合の処理をデモ"
"ンストレーションしています。"

#. leap/perl-File-Temp/summary
msgid "Return name and handle of a temporary file safely"
msgstr "一時ファイルの名前とハンドルを安全に返すモジュール"

#. leap/perl-File-Temp/description
msgid ""
"'File::Temp' can be used to create and open temporary files in a safe way. "
"There is both a function interface and an object-oriented interface. The "
"File::Temp constructor or the tempfile() function can be used to return the "
"name and the open filehandle of a temporary file. The tempdir() function can "
"be used to create a temporary directory.\n"
"\n"
"The security aspect of temporary file creation is emphasized such that a "
"filehandle and filename are returned together. This helps guarantee that a "
"race condition can not occur where the temporary file is created by another "
"process between checking for the existence of the file and its opening. "
"Additional security levels are provided to check, for example, that the "
"sticky bit is set on world writable directories. See the \"safe_level\" "
"manpage for more information.\n"
"\n"
"For compatibility with popular C library functions, Perl implementations of "
"the mkstemp() family of functions are provided. These are, mkstemp(), "
"mkstemps(), mkdtemp() and mktemp().\n"
"\n"
"Additionally, implementations of the standard POSIX tmpnam() and tmpfile() "
"functions are provided if required.\n"
"\n"
"Implementations of mktemp(), tmpnam(), and tempnam() are provided, but "
"should be used with caution since they return only a filename that was valid "
"when function was called, so cannot guarantee that the file will not exist "
"by the time the caller opens the filename.\n"
"\n"
"Filehandles returned by these functions support the seekable methods."
msgstr ""
"'File::Temp' は、一時ファイルの作成とオープンを安全に行なう際に使用するモ"
"ジュールです。関数型のインターフェイスとオブジェクト指向のインターフェイスの"
"両方に対応しています。 File::Temp のコンストラクタや tempfile() 関数は、一時"
"ファイルの名前とファイルハンドルを返すことができます。このほか、 tempdir() 関"
"数は一時ディレクトリを作成する際に使用することができます。\n"
"\n"
"一時ファイルを作成する際にセキュリティを確保するため、ファイルハンドルとファ"
"イル名の両方を返すようになっています。このような仕組みにより、万が一他のプロ"
"セスが同じ一時ファイル名を生成してしまったような場合であっても、いずれか片方"
"のプロセスでファイルを開く際に失敗するため、競合してしまうようなことがなくな"
"ります。もう 1 つのセキュリティレベルとしては、たとえば全ユーザに対して書き込"
"み可能なディレクトリで、 sticky ビットが設定されているかどうかをチェックした"
"りすることもできます。\n"
"\n"
"有名な C ライブラリ関数との互換関数という意味では、 Perl で実装された "
"mkstemp() ファミリがあります。これらには、 mkstemp(), mkstemps(), mkdtemp(), "
"mktemp() が用意されています。\n"
"\n"
"これに加えて、必要であれば標準的な POSIX の tmpnam() と tmpfile() 関数の実装"
"も提供されています。\n"
"\n"
"mktemp(), tmpnam(), tempnam() の各実装も提供されていますが、これらはファイル"
"名のみが返される仕組みであるため、関数が呼び出された時点でのみ有効であり、そ"
"の名前でファイルを作成する際、ファイルが存在しないことを保証することはできま"
"せん。\n"
"\n"
"これらの関数で返されるファイルハンドルは、いずれも seek に対応しています。"

#. leap/perl-File-Touch/summary
msgid ""
"Update File Access and Modification Times, Optionally Creating Files If "
"Needed"
msgstr ""
"ファイルのアクセス日時と変更日時の更新 (必要であればファイルの作成) モジュー"
"ル"

#. leap/perl-File-Touch/description
msgid ""
"Here's a list of arguments that can be used with the object-oriented "
"contruction: \n"
"* atime_only => [0|1]\n"
"\n"
"If nonzero, change only the access time of files. Default is zero. \n"
"* mtime_only => [0|1]\n"
"\n"
"If nonzero, change only the modification time of files. Default is zero. \n"
"* no_create => [0|1]\n"
"\n"
"If nonzero, do not create new files. Default is zero. \n"
"* reference => $reference_file\n"
"\n"
"If defined, use timestamps from this file instead of current time. The "
"timestamps are read from the reference file when the object is created, not "
"when '<-'touch>> is invoked. Default is undefined. \n"
"* time => $time\n"
"\n"
"If defined, then this value will be used for both access time and "
"modification time, whichever of those are set. This time is overridden by "
"the 'atime' and 'mtime' arguments, if you use them. \n"
"* atime => $time\n"
"\n"
"If defined, use this time (in epoch seconds) instead of current time for "
"access time. \n"
"* mtime => $time\n"
"\n"
"If defined, use this time (in epoch seconds) instead of current time for "
"modification time."
msgstr ""
"下記にオブジェクト指向のコンストラクタを利用する際に指定することができる、パ"
"ラメータの一覧を示します:\n"
"* atime_only => [0|1]\n"
"\n"
"0 以外の値を指定すると、ファイルのアクセス日時のみを変更します。既定は 0 で"
"す。\n"
"* mtime_only => [0|1]\n"
"\n"
"0 以外の値を指定すると、ファイルの更新日時のみを変更します。既定は 0 です。\n"
"* no_create => [0|1]\n"
"\n"
"0 以外の値を指定すると、新しいファイルを作成しなくなります。既定は 0 です。\n"
"* reference => $reference_file\n"
"\n"
"値を指定すると、現在の時刻ではなく指定したファイルのタイムスタンプを利用する"
"ようになります。オブジェクトを作成する際、参照先のファイルからタイムスタンプ"
"を読み込みます。既定では値が指定されていません。\n"
"* time => $time\n"
"\n"
"値を指定すると、アクセス日時と更新日時を指定した値に設定します。 'atime', "
"'mtime' の指定よりも優先して働きます。\n"
"* atime => $time\n"
"\n"
"値を指定すると、アクセス日時として指定した日時 (エポックからの秒数) を使用す"
"るようになります。\n"
"* mtime => $time\n"
"\n"
"値を指定すると、更新日時として指定した日時 (エポックからの秒数) を使用するよ"
"うになります。"

#. leap/perl-File-Type/summary
msgid "determine file type using magic"
msgstr "マジックナンバーを使用するファイル種類判別"

#. leap/perl-File-Type/description
msgid ""
"File::Type uses magic numbers (typically at the start of a file) to "
"determine the MIME type of that file.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Paul Mison <pmison at fotango dot com>"
msgstr ""
"File::Type はマジックナンバー (一般にファイルの冒頭にあるもの) を使用し、この"
"ファイルの MIME 種類を判別するモジュールです。\n"
"\n"
"\n"
"\n"
"作者:\n"
"--------     Paul Mison <pmison at fotango dot com>"

#. leap/perl-File-Unpack/summary
msgid "An strong archive file unpacker, based on mime-types"
msgstr "MIME タイプをベースにした強力なファイル展開モジュール"

#. leap/perl-File-Unpack/description
msgid ""
"File::Unpack is an unpacker for archives and files (bz2/gz/zip/tar/cpio/iso/"
"rpm/deb/cab/lzma/7z/rar/...).  We call it strong, because it is not fooled "
"by file suffixes, or multiply wrapped packages. It reliably detects mime-"
"types and recursivly descends into each archive found until it finally "
"exposes all unpackable payload contents. A precise logfile can be written, "
"describing mimetypes and unpack actions. Most of the known archive file "
"formats are supported. Shell-script-style plugins can be added to support "
"additinal formats."
msgstr ""
"File::Unpack はアーカイブファイル (bz2/gz/zip/tar/cpio/iso/rpm/deb/cab/"
"lzma/7z/rar/...) に対する展開モジュールです。我々が協力と称している理由として"
"は、ファイルの接尾辞 (拡張子) に惑わされない天にあります。 MIME タイプを確実"
"に検出して、全ての展開可能なコンテンツが現われるまで、再帰的に内容を展開する"
"ことができます。また、 MIME タイプや展開処理に関する精密なログファイルを書き"
"込むことができます。そのため、ほぼ全てのファイル希有式に対応しています。この"
"ほか、シェルスクリプト形式のプラグインを作成することで、追加の形式に対応する"
"こともできます。"

#. leap/perl-File-Which/summary
msgid "Perl implementation of the which utility as an API"
msgstr "which ユーティリティを Perl API として実装したもの"

#. leap/perl-File-Which/description
msgid ""
"File::Which finds the full or relative paths to executable programs on the "
"system. This is normally the function of 'which' utility. 'which' is "
"typically implemented as either a program or a built in shell command. On "
"some platforms, such as Microsoft Windows it is not provided as part of the "
"core operating system. This module provides a consistent API to this "
"functionality regardless of the underlying platform.\n"
"\n"
"The focus of this module is correctness and portability. As a consequence "
"platforms where the current directory is implicitly part of the search path "
"such as Microsoft Windows will find executables in the current directory, "
"whereas on platforms such as UNIX where this is not the case executables in "
"the current directory will only be found if the current directory is "
"explicitly added to the path.\n"
"\n"
"If you need a portable 'which' on the command line in an environment that "
"does not provide it, install App::pwhich which provides a command line "
"interface to this API."
msgstr ""
"File::Which はシステム上に存在する実行可能なプログラムを、絶対パスまたは相対"
"パスで返すモジュールです。通常は 'which' ユーティリティが実施する機能で、一般"
"的に単体のプログラムか、シェル内蔵コマンドとして提供されているものです。 "
"Microsoft Windows などのプラットフォームでは、オペレーティングシステムの中枢"
"としては提供されていないものです。このモジュールは、動作するプラットフォーム"
"とは無関係に、この機能を安定した API として提供します。\n"
"\n"
"このモジュールは、主に正しさと移植性を重視して作られています。そのため、 "
"Microsoft Windows などのようにカレントディレクトリを暗黙のうちに検索パスに入"
"れてしまうプラットフォームの場合は、カレントディレクトリも検索対象になりま"
"す。 UNIX のようなプラットフォームでは、明示的に指定しない限り、カレントディ"
"レクトリは検索対象とはなりません。\n"
"\n"
"コマンドライン環境で 'which' コマンドが提供されていないシステムで、そのコマン"
"ドを利用したい場合は、 App::pwhich モジュールをインストールしてお使いくださ"
"い。こちらは、この API のコマンドラインインターフェイスを提供します。"

#. leap/perl-File-chdir/summary
msgid "More sensible way to change directories"
msgstr "ディレクトリを変更する際の気の利いた方法"

#. leap/perl-File-chdir/description
msgid ""
"Perl's 'chdir()' has the unfortunate problem of being very, very, very "
"global. If any part of your program calls 'chdir()' or if any library you "
"use calls 'chdir()', it changes the current working directory for the\n"
"*whole* program.\n"
"\n"
"This sucks.\n"
"\n"
"File::chdir gives you an alternative, '$CWD' and '@CWD'. These two variables "
"combine all the power of 'chdir()', File::Spec and Cwd."
msgstr ""
"Perl の 'chdir()' はとてもとてもグローバルな問題を抱えた不幸なシステムです。"
"お使いのプログラムのどこかで 'chdir()' を呼び出したり、どこかのライブラリで "
"'chdir()' が呼び出されたりすると、プログラム全体に対して作業ディレクトリが変"
"更されてしまいます。\n"
"\n"
"これはあまりにも問題です。\n"
"\n"
"File::chdir では、代替となる '$CWD' と '@CWD' を提供しています。この 2 つの変"
"数は 'chdir()' と File::Spec and Cwd. の威力のすべてを結集した仕組みです。"

#. leap/perl-File-pushd/summary
msgid "Change Directory Temporarily for a Limited Scope"
msgstr "限られた範囲内での一時的なディレクトリ変更"

#. leap/perl-File-pushd/description
msgid ""
"File::pushd does a temporary 'chdir' that is easily and automatically "
"reverted, similar to 'pushd' in some Unix command shells. It works by "
"creating an object that caches the original working directory. When the "
"object is destroyed, the destructor calls 'chdir' to revert to the original "
"working directory. By storing the object in a lexical variable with a "
"limited scope, this happens automatically at the end of the scope.\n"
"\n"
"This is very handy when working with temporary directories for tasks like "
"testing; a function is provided to streamline getting a temporary directory "
"from File::Temp.\n"
"\n"
"For convenience, the object stringifies as the canonical form of the "
"absolute pathname of the directory entered. \n"
"*Warning*: if you create multiple 'pushd' objects in the same lexical scope, "
"their destruction order is not guaranteed and you might not wind up in the "
"directory you expect."
msgstr ""
"File::pushd は一時的な 'chdir' を実施するもので、簡単でかつ自動的に元のディレ"
"クトリに戻ることができる仕組みです。 Unix のコマンドシェルの一部で提供されて"
"いる 'pushd' に似た動作になります。元のディレクトリに戻る機能は、オブジェクト"
"の作成時点でのディレクトリを覚えておくことによって実現しています。オブジェク"
"トが破壊された際には、デストラクタが 'chdir' を呼び出して元の作業ディレクトリ"
"に戻します。オブジェクトを特定のスコープ内に入れておくことによって、スコープ"
"の終了時に自動的にディレクトリを戻すことができます。\n"
"\n"
"このモジュールは、たとえばテストのタスクのような一時的なディレクトリ変更には"
"非常に有用です。関数は File::Temp 経由で生成した一時ディレクトリを直接指定す"
"ることもできます。\n"
"\n"
"また、利便性のため、オブジェクトでは入力したディレクトリの絶対パスを正規化し"
"て保持しています。\n"
"*警告*: 同じ文法スコープ内で複数の 'pushd' オブジェクトを作成した場合は、オブ"
"ジェクトの破壊順序が保証されないため、期待通りにディレクトリが戻らない可能性"
"があることに注意してください。"

#. leap/perl-FileHandle-Unget/summary
msgid "FileHandle which supports multi-byte unget"
msgstr "マルチバイトの unget に対応した FileHandle"

#. leap/perl-FileHandle-Unget/description
msgid ""
"FileHandle::Unget operates exactly the same as FileHandle, except that it "
"provides a version of ungetc that allows you to unget more than one "
"character. It also provides ungets to unget a string.\n"
"\n"
"This module is useful if the filehandle refers to a stream for which you "
"can't just 'seek()' backwards. Some operating systems support multi-byte "
"'ungetc()', but this is not guaranteed. Use this module if you want a "
"portable solution. In addition, on some operating systems, eof() will not be "
"reset if you ungetc after having read to the end of the file.\n"
"\n"
"NOTE: Using 'sysread()' with 'ungetc()' and other buffering functions is "
"still a bad idea."
msgstr ""
"FileHandle::Unget は FileHandle と全く同じ動作をするものですが、 ungetc で1 "
"文字以上の (文字列を含む) unget に対応しています。\n"
"\n"
"このモジュールは、ファイルハンドルがストリームを示すもので、 'seek()' で戻る"
"ことのできない場合に有用です。オペレーティングシステムによってはマルチバイト"
"の 'ungetc()' に対応していますが、これは保証されるものではありません。このモ"
"ジュールを使用することで移植性の高い unget を行なうことができるほか、オペレー"
"ティングシステムによっては、ファイルの終わりまで到達した場合に ungetc して"
"も、 eof() がリセットされない問題を回避することもできます。"

#. leap/perl-Filesys-Df/summary
msgid "Perl extension for filesystem disk space information"
msgstr "ファイルシステムのディスク領域情報を利用するための Perl 拡張"

#. leap/perl-Filesys-Df/description
msgid ""
"This module provides a way to obtain filesystem disk space information. This "
"is a Unix only distribution. If you want to gather this information for Unix "
"and Windows, use Filesys::DfPortable. The only major benefit of using "
"Filesys::Df over Filesys::DfPortable, is that Filesys::Df supports the use "
"of open filehandles as arguments.\n"
"\n"
"Authors:     Ian Guthrie <IGuthrie@aol.com>"
msgstr ""
"このモジュールは、ファイルシステム上でのディスク領域情報を取得することができ"
"ます。 Unix のみに対応しています。 Unix と Windows の両方で動作するモジュール"
"をご希望の場合は、 Filesys::DfPortable をお使いください。 FileSys::Df では、"
"ファイルハンドルをパラメータとして使用することができる点が異なります。\n"
"\n"
"Authors:     Ian Guthrie <IGuthrie@aol.com>"

#. leap/perl-Filesys-Notify-Simple/summary
msgid "Simple and dumb file system watcher"
msgstr "シンプルで単純なファイルシステム監視"

#. leap/perl-Filesys-Notify-Simple/description
msgid ""
"Filesys::Notify::Simple is a simple but unified interface to get "
"notifications of changes to a given filesystem path. It utilizes inotify2 on "
"Linux, fsevents on OS X, kqueue on FreeBSD and FindFirstChangeNotification "
"on Windows if they're installed, with a fallback to the full directory scan "
"if they're not available.\n"
"\n"
"There are some limitations in this module. If you don't like it, use File::"
"ChangeNotify.\n"
"\n"
"  * There is no file name based filter. Do it in your own code.\n"
"\n"
"  * You can not get types of events (created, updated, deleted).\n"
"\n"
"  * Currently 'wait' method blocks.\n"
"\n"
"In return, this module doesn't depend on any non-core modules. Platform "
"specific optimizations with Linux::Inotify2, Mac::FSEvents, Filesys::Notify::"
"KQueue and Win32::ChangeNotify are truely optional.\n"
"\n"
"NOTE: Using Win32::ChangeNotify may put additional limitations.\n"
"\n"
"  * Win32::ChangeNotify uses FindFirstChangeNotificationA so that Unicode "
"characters can not be handled. On cygwin (1.7 or later), Unicode characters "
"should be able to be handled when Win32::ChangeNotify is not used.\n"
"\n"
"  * If more than 64 directories are included under the specified paths, an "
"error occurrs."
msgstr ""
"Filesys::Notify::Simple はシンプルながらも統一的なインターフェイスで、指定し"
"たファイルシステムパスの変更通知を受け取ることができる仕組みです。 Linux で"
"は inotify2 を、 OSX では fsevents を、 FreeBSD では kqueue を、 Windows で"
"は FindFirstChangeNotification をそれぞれインストールされていれば利用するほ"
"か、インストールされていない場合は完全なディレクトリスキャンを実施して実現し"
"ます。\n"
"\n"
"なお、このモジュールにはいくつかの制限事項があります。制限事項がお気に召さな"
"い場合は File::ChangeNotify をお使いください。\n"
"\n"
"* ファイル名ベースのフィルタはありません。ファイル名の判断はお使いのコード内"
"で実施してください。\n"
"\n"
"* イベントの種類 (作成／更新／削除など) を取得することはできません。\n"
"\n"
"* 現時点では 'wait' メソッドはブロックしてしまいます。\n"
"\n"
"その代わり、このモジュールは中枢モジュールを除いて、どのモジュールにも依存し"
"ていません。 プラットフォームごとの最適化については、それぞれ Linux::"
"Inotify2, Mac::FSEvents, Filesys::Notify::KQueue, Win32::ChangeNotify をお読"
"みください。いずれも必須ではありません。\n"
"\n"
"注意: Win32::ChangeNotify を利用する場合は、さらなる制限事項があります。\n"
"\n"
"* Win32::ChangeNotify では FindFirstChangeNotificationA を利用しているため、 "
"Unicode 文字は処理することができません。 cygwin (バージョン 1.7 もしくはそれ"
"以降) で Win32::ChangeNotify を利用しない場合は、 Unicode 文字を扱うことがで"
"きます。\n"
"\n"
"* 指定したパス内に 64 個以上のディレクトリが存在すると、エラーになってしまい"
"ます。"

#. leap/perl-Filesys-Statvfs/summary
msgid "Perl extension for statvfs() and fstatvfs()"
msgstr "statvfs() および fstatvfs() に対する Perl 拡張"

#. leap/perl-Filesys-Statvfs/description
msgid ""
"Interface for statvfs() and fstatvfs()\n"
"\n"
"Unless you need access to the bsize, flag, and namemax values, you should "
"probably look at using Filesys::DfPortable or Filesys::Df instead. They will "
"generally provide you with more functionality and portability.\n"
"\n"
"The module should work with all flavors of Unix that implement the "
"'statvfs()' and 'fstatvfs()' calls. This would include Linux, *BSD, HP-UX, "
"AIX, Solaris, Mac OS X, Irix, Cygwin, etc ...\n"
"\n"
"The 'statvfs()' and 'fstatvfs()' functions will return a list of values, or "
"will return 'undef' and set '$!' if there was an error.\n"
"\n"
"The values returned are described in the statvfs/fstatvfs header or the "
"'statvfs()/fstatvfs()' man page.\n"
"\n"
"The module assumes that if you have 'statvfs()', 'fstatvfs()' will also be "
"available."
msgstr ""
"statvfs() および fstatvfs() に対するインターフェイスです。\n"
"\n"
"bsize, flag, namemax の各値にアクセスする必要が無い限り、代わりに Filesys::"
"DfPortable または Filesys:Df をお使いになることをお勧めします。これらのモ"
"ジュールは、いずれも機能が豊富で、可搬性にも優れています。\n"
"\n"
"また、このモジュールは 'statvfs()' および 'fstatvfs()' コールに対応する全て"
"の Unix 系 OS で動作すべきものです。これにはたとえば Linux のほか、 *BSD, HP-"
"UX, AIX, Solaris, Mac OS X, Irix, Cygwin などが含まれます。\n"
"\n"
"なお、 'statvfs()' と 'fstatvfs()' の各関数は値のリストを返すほか、エラー時に"
"は 'undef' を返して '$!' に値が設定されます。\n"
"\n"
"返される値は statvfs/fstatvfs ヘッダ内、もしくは 'statvfs()/fstatvfs()' のマ"
"ニュアルページで説明されています。\n"
"\n"
"このモジュールは、 'statvfs()' および 'fstatvfs()' が存在しているものとして動"
"作します。"

#. leap/perl-Finance-Quote/summary
msgid "Get stock and mutual fund quotes from various exchanges"
msgstr "様々な取引所から株式情報やファンド情報を取得するモジュール"

#. leap/perl-Finance-Quote/description
msgid ""
"This module gets stock quotes from various internet sources, including "
"Yahoo! Finance, Fidelity Investments, and the Australian Stock Exchange. "
"There are two methods of using this module -- a functional interface that is "
"deprecated, and an object-orientated method that provides greater "
"flexibility and stability.\n"
"\n"
"With the exception of straight currency exchange rates, all information is "
"returned as a two-dimensional hash (or a reference to such a hash, if called "
"in a scalar context). For example:\n"
"\n"
"    %info = $q->fetch(\"australia\",\"CML\");     print \"The price of CML "
"is \".$info{\"CML\",\"price\"};\n"
"\n"
"The first part of the hash (eg, \"CML\") is referred to as the stock. The "
"second part (in this case, \"price\") is referred to as the label."
msgstr ""
"このモジュールは、様々なインターネット情報の情報源、たとえば Yahoo! Finance, "
"Fidelity Investments, Australian Stock Exchange などから、金融情報を取得する"
"ためのモジュールです。このモジュールには 2 種類の方式が用意されていて、 1 つ"
"は廃止予定の関数型のインターフェイス、もう 1 つは非常に柔軟で安定性のあるオブ"
"ジェクト指向のメソッドです。\n"
"\n"
"直接的な通貨交換レートを除いて、すべての情報は 2 次元のハッシュ (スカラーコン"
"テキスト内で呼び出した場合は 2 次元のハッシュ参照) で返されます。たとえば下記"
"のようになります:\n"
"\n"
"    %info = $q->fetch(\"australia\",\"CML\");     print \"The price of CML "
"is \".$info{\"CML\",\"price\"};\n"
"\n"
"ハッシュの最初のキー (例: \"CML\") はストック情報を、 2 つめのキー (例: "
"\"price\") はラベルを意味しています。"

#. leap/perl-FindBin-Real/summary
msgid "Locate directory of original perl script"
msgstr "元の Perl スクリプトのディレクトリ判断"

#. leap/perl-FindBin-Real/description
msgid ""
"Locates the full path to the script bin directory to allow the use of paths "
"relative to the bin directory.\n"
"\n"
"This allows a user to setup a directory tree for some software with "
"directories <root>/bin and <root>/lib and then the above example will allow "
"the use of modules in the lib directory without knowing where the software "
"tree is installed.\n"
"\n"
"If perl is invoked using the *-e* option or the perl script is read from "
"'STDIN' then FindBin sets both 'Bin()' and 'RealBin()' return values to the "
"current directory."
msgstr ""
"bin ディレクトリからの相対パスを利用できるようにするため、スクリプトの bin "
"ディレクトリのフルパスを取得することができます。\n"
"\n"
"これにより、いくつかのソフトウエアに対して <root>/bin や <root>/lib のような"
"ディレクトリツリーを設定し、そのソフトウエア自身のインストール先を判断するこ"
"となく、もジョールの bin/lib ディレクトリを取得できるようになります。\n"
"\n"
"なお、 Perl を *-e* オプション付きで実行した場合や、 Perl のスクリプトを "
"'STDIN' から読み込んだ場合は、 FindBin における 'Bin()' や 'RealBin()' の呼び"
"出しは、カレントディレクトリを指す値を返します。"

#. leap/perl-Font-AFM/summary
msgid "Interface to Adobe Font Metrics Files"
msgstr "Adobe フォントメトリックファイルへのインターフェイス"

#. leap/perl-Font-AFM/description
msgid ""
"This module implements the Font::AFM class. Objects of this class are "
"initialized from an AFM file and allow you to obtain information about the "
"font and the metrics of the various glyphs in the font.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Gisle Aas <gisle@aas.no>"
msgstr ""
"このモジュールは Font::AFM クラスを実装しています。 このクラスのオブジェクト"
"は AFM ファイルによって初期化され、フォントに関する情報やフォント内の様々なグ"
"リフのメトリックを取得することができます。\n"
"\n"
"\n"
"\n"
"作者:\n"
"--------     Gisle Aas <gisle@aas.no>"

#. leap/perl-Font-FreeType/summary
msgid "Read Font Files and Render Glyphs From Perl Using Freetype2"
msgstr ""
"Freetype2 を利用して Perl からフォントファイルを読み込んだり、グリフを描画し"
"たりするモジュール"

#. leap/perl-Font-FreeType/description
msgid ""
"This module allows Perl programs to conveniently read information from font "
"files. All the font access is done through the FreeType2 library, which "
"supports many formats. It can render images of characters with high-quality "
"hinting and antialiasing, extract metrics information, and extract the "
"outlines of characters in scalable formats like TrueType.\n"
"\n"
"Warning: this module is currently in 'beta' stage. It'll be another release "
"or two before it stabilizes. The API may change in ways that break programs "
"based on it, but I don't think it will change much. Some of the values "
"returned may be wrong, or not scaled correctly. See the _TODO_ file to get a "
"handle on how far along this work is. Contributions welcome, particularly if "
"you know more than I do (which isn't much) about fonts and the FreeType2 "
"library."
msgstr ""
"このモジュールは、 Perl のプログラムからフォントファイルの情報を便利に読み込"
"む機能を提供します。すべてのフォントへのアクセスは、多数の形式に対応している "
"FreeType2 ライブラリを介して行ないます。このほか、高品質なヒンティングやアン"
"チエイリアス処理を利用して、文字を画像として描画することもできるほか、メト"
"リック情報の取得や TrueType のようなスケーラブル形式で輪郭を抽出することもで"
"きます。\n"
"\n"
"警告: このモジュールは現時点では 'ベータ' 版です。安定版がリリースされるまで"
"に 1 回もしくは複数回のリリースが行なわれる予定です。また、 API の仕様も変更"
"されて互換性が失われることもありますが、大幅には変更されない予定です。また、"
"返される値が間違っていたり、正しくスケールされていない場合もあります。現在作"
"業中の項目について、詳しくは _TODO_ ファイルをお読みください。フォントや "
"FreeType2 ライブラリに詳しい方で、手伝っていだたける方の貢献をお待ちしており"
"ます。"

#. leap/perl-Font-TTF/summary
msgid "Perl module for TrueType Font hacking"
msgstr "TrueType フォントをハッキングするための Perl モジュール"

#. leap/perl-Font-TTF/description
msgid ""
"This module allows you to do almost anything to a TrueType/OpenType Font "
"including modify and inspect nearly all tables."
msgstr ""
"このモジュールは、 TrueType/OpenType のフォントを変更したり、ほぼすべての内容"
"を調査したりすることのできる機能を提供します。"

#. leap/perl-FreezeThaw/summary
msgid "Converting Perl structures to strings and back"
msgstr "Perl の構造体と文字列との間を相互変換するモジュール"

#. leap/perl-FreezeThaw/description
msgid ""
"Converts data to/from stringified form, appropriate for saving-to/reading-"
"from permanent storage.\n"
"\n"
"Deals with objects, circular lists, repeated appearence of the same refence. "
"Does not deal with overloaded stringify operator yet.\n"
"\n"
"  Author:\tIlya Zakharevich"
msgstr ""
"データと文字列形式との間を相互に変換するためのモジュールです。ストレージへの"
"保存やストレージからの読み出しに便利な仕組みです。\n"
"\n"
"オブジェクトや循環リスト、同一参照の繰り返し出現にも対応しています。なお、 "
"stringify オペレータのオーバーロードには対応していません。\n"
"\n"
"  Author:\tIlya Zakharevich"

#. leap/perl-Furl/summary
msgid "Lightning-fast URL fetcher"
msgstr "非常に高速な URL フェッチャ"

#. leap/perl-Furl/description
msgid ""
"Furl is yet another HTTP client library. LWP is the de facto standard HTTP "
"client for Perl 5, but it is too slow for some critical jobs, and too "
"complex for weekend hacking. Furl resolves these issues. Enjoy it!"
msgstr ""
"Furl はもう 1 つの HTTP クライアントライブラリです。 LWP は Perl 5 での事実上"
"の標準 HTTP クライアントではありますが、時間に厳格な用途では遅すぎるだけでな"
"く、簡易的に使用するには複雑な仕組みです。 Furl はこれらの問題を解決します。"

#. leap/perl-Fuse/summary
msgid "Write filesystems in Perl using FUSE"
msgstr "FUSE を利用する Perl 内でのファイルシステムへの書き込み"

#. leap/perl-Fuse/description
msgid ""
"This lets you implement filesystems in perl, through the FUSE (Filesystem in "
"USErspace) kernel/lib interface."
msgstr ""
"このモジュールは、 FUSE (ユーザスペース内ファイルシステム (Filesystem in "
"USErspace)) のカーネル／ライブラリインターフェイスを利用することで、 Perl 内"
"からファイルシステムにアクセスする機能を実装することができます。"

#. leap/perl-Future/summary
msgid "Represent an operation awaiting completion"
msgstr "処理中を表示するためのモジュール"

#. leap/perl-Future/description
msgid ""
"A 'Future' object represents an operation that is currently in progress, or "
"has recently completed. It can be used in a variety of ways to manage the "
"flow of control, and data, through an asynchronous program.\n"
"\n"
"Some futures represent a single operation and are explicitly marked as ready "
"by calling the 'done' or 'fail' methods. These are called \"leaf\" futures "
"here, and are returned by the 'new' constructor.\n"
"\n"
"Other futures represent a collection of sub-tasks, and are implicitly marked "
"as ready depending on the readiness of their component futures as required. "
"These are called \"convergent\" futures here as they converge control and "
"data-flow back into one place. These are the ones returned by the various "
"'wait_*' and 'need_*' constructors.\n"
"\n"
"It is intended that library functions that perform asynchronous operations "
"would use future objects to represent outstanding operations, and allow "
"their calling programs to control or wait for these operations to complete. "
"The implementation and the user of such an interface would typically make "
"use of different methods on the class. The methods below are documented in "
"two sections; those of interest to each side of the interface.\n"
"\n"
"It should be noted however, that this module does not in any way provide an "
"actual mechanism for performing this asynchronous activity; it merely "
"provides a way to create objects that can be used for control and data flow "
"around those operations. It allows such code to be written in a neater, "
"forward-reading manner, and simplifies many common patterns that are often "
"involved in such situations.\n"
"\n"
"See also Future::Utils which contains useful loop-constructing functions, to "
"run a future-returning function repeatedly in a loop.\n"
"\n"
"Unless otherwise noted, the following methods require at least version "
"_0.08_."
msgstr ""
"'Future' オブジェクトは現在処理の操作や、すぐに終わるような操作を表わすもので"
"す。非同期に動作するプログラムに対して、制御やデータの流れを管理するための"
"様々な方法が用意されています。\n"
"\n"
"'Future' では単一の操作を表わすことができるほか、 'done' や 'fail' などのメ"
"ソッドを呼び出すことで、明示的に終了を表わすこともできます。これらは \"Leaf "
"Future' と呼ばれ、 'new' コンストラクタで返される値になります。\n"
"\n"
"そのほかにも、サブタスクの集合を表わす 'Future' のほか、必要なコンポーネント"
"として依存先の処理状況に応じたマーキングを暗黙のうちに行なうこともできます。"
"これらは \"Convergent Future\" (収束型 Future) と呼ばれ、制御やデータの流れを"
"一カ所で行なうことになります。これらは様々な 'wait_*' または 'need_*' コンス"
"トラクタで返される値になります。\n"
"\n"
"このモジュールは、ライブラリの関数に対して非同期の処理を実施させ、 Future オ"
"ブジェクトを利用して進行状況を表示させ、呼び出し元のプログラム側で何らかの制"
"御を行なうか、もしくは待機するかを指定することができる仕組みです。実装とその"
"実装を使用するユーザは、クラス内の様々なメソッドを使用して必要な処理を行ない"
"ます。下記のメソッドは 2 つのセクションに分かれていますが、これらはインター"
"フェイスの各面を表わしています。\n"
"\n"
"ただし、このモジュールは実際の仕組みや非同期の処理そのものを提供するものでは"
"ありません。単純に制御や制御内のデータで使用するオブジェクトを作成するだけで"
"す。このモジュールを利用することで、より洗練されわかりやすく、かつシンプルな"
"汎用パターンを利用して、非同期の処理を実現することができるようになります。\n"
"\n"
"なお、便利なループを構築するための機能については、 Future::Utils をお読みくだ"
"さい。こちらには、ループ内で繰り返し呼び出す場合の関数が提供されています。\n"
"\n"
"なお、下記のメソッドは明示されているものを除き、バージョン _0.08_ 以降が必要"
"です。"

#. leap/perl-GD/summary
msgid "Interface to Gd Graphics Library"
msgstr "Gd グラフィックライブラリ向けインターフェイス"

#. leap/perl-GD/description
msgid ""
"*GD.pm* is a Perl interface to Thomas Boutell's gd graphics library (version "
"2.01 or higher; see below). GD allows you to create color drawings using a "
"large number of graphics primitives, and emit the drawings as PNG files."
msgstr ""
"*GD.pm* は Thomas Boutell 氏による GD グラフィックライブラリ (バージョン "
"2.01 またはそれ以降) に対する Perl インターフェイスです。 GD は多数のグラ"
"フィックプリミティブを利用して描画を行なうことができるもので、 PNG ファイルと"
"して結果を出力することができます。"

#. leap/perl-GD-Barcode/summary
msgid "Create barcode image with GD"
msgstr "GD を利用したバーコード画像の作成"

#. leap/perl-GD-Barcode/description
msgid ""
"GD::Barcode is a subclass of GD and allows you to create barcode image with "
"GD. This module based on \"Generate Barcode Ver 1.02 By Shisei Hanai "
"97/08/22\".\n"
"\n"
"From 1.14, you can use this module even if no GD (except plot method)."
msgstr ""
"GD::Barcode は GD のサブクラスで、 GD を利用してバーコード画像を作成すること"
"のできるものです。このモジュールは、 \"Generate Barcode Ver 1.02 By Shisei "
"Hanai 97/08/22\" をベースにしています。\n"
"\n"
"バージョン 1.14 では、このモジュールを GD 無しで利用できるようになっています "
"(ただし plot メソッドを除きます) 。"

#. leap/perl-GD-Graph3d/summary
msgid "3d extension for perl-GDGraph"
msgstr "perl-GDGraph 向け三次元拡張"

#. leap/perl-GD-Graph3d/description
msgid ""
"This is the GD::Graph3d extensions module. It provides 3D graphs for the GD::"
"Graph module by Martien Verbruggen, which in turn generates graph using "
"Lincoln Stein's GD.pm."
msgstr ""
"これは GD::Graph3d 拡張モジュールです。 Martien Verbruggen 氏による GD::"
"Graph モジュール向けの三次元グラフィックを提供し、 その代わりに Lincoln "
"Stein 氏による GD.pm を使用したグラフィックを生成します。"

#. leap/perl-GDGraph/summary
#. leap/perl-GDGraph/description
msgid "Produces charts with GD"
msgstr "GD を利用したグラフ作成"

#. leap/perl-GDTextUtil/summary
#. leap/perl-GDTextUtil/description
msgid "GDTextUtil Perl module"
msgstr "GDTextUtil Perl モジュール"

#. leap/perl-GStreamer1/summary
msgid "Perl interface to the GStreamer library"
msgstr "GStreamer ライブラリへの Perl インターフェイス"

#. leap/perl-GStreamer1/description
msgid ""
"This package provides perl bindings for GStreamer 1.x. GStreamer is a "
"library for constructing graphs of media-handling components. The "
"applications it supports range from simple OGG Vorbis playback, audio/video "
"streaming to complex audio (mixing) and video (non-linear editing) "
"processing."
msgstr ""
"このパッケージは、 GStreamer 1.x に対する Perl のバインディングを作成しま"
"す。 GStreamer はメディア処理コンポーネントのフレームワークで、シンプルな "
"OGG Vorbis オーディオ／ビデオストリーミングから、複雑なオーディオ (ミキシン"
"グ) 処理およびビデオ (ノンリニア編集) 処理に対応したライブラリです。"

#. leap/perl-Geo-Coordinates-UTM/summary
msgid "Perl extension for Latitude Longitude conversions"
msgstr "緯度／経度を変換するための Perl 拡張"

#. leap/perl-Geo-Coordinates-UTM/description
msgid ""
"This module will translate latitude longitude coordinates to Universal "
"Transverse Mercator(UTM) coordinates and vice versa."
msgstr ""
"このモジュールは、緯度／経度のデータと Universal Transverse Mercator(UTM) 値"
"との間を、相互に変換するモジュールです。"

#. leap/perl-Geography-Countries/summary
msgid "2-letter, 3-letter, and numerical codes for countries"
msgstr "2 桁 または 3 桁、および数字による国コード"

#. leap/perl-Geography-Countries/description
msgid ""
"This module maps country names, and their 2-letter, 3-letter and numerical "
"codes, as defined by the ISO-3166 maintenance agency [1], and defined by the "
"UNSD."
msgstr ""
"このモジュールは、 ISO-3166 メンテナンスエージェンシーおよび UNSD が定義す"
"る、 2 文字もしくは 3 文字の国コード、および数値による国コードのマッピングを"
"提供しています。"

#. leap/perl-Getopt-ArgvFile/summary
msgid "Perl Module to interpolate Script Options from Files into @ARGV"
msgstr ""
"ファイルから @ARGV に対してスクリプトのオプションを補完する Perl モジュール"

#. leap/perl-Getopt-ArgvFile/description
msgid ""
"This module simply interpolates option file hints in @ARGV by the contents "
"of the pointed files. This enables option reading from files instead of or "
"additional to the usual reading from the command line.\n"
"\n"
"Alternatively, you can process any array instead of @ARGV which is used by "
"default and mentioned mostly in this manual.\n"
"\n"
"The interpolated @ARGV could be subsequently processed by the usual option "
"handling, e.g. by a Getopt::xxx module. Getopt::ArgvFile does not perform "
"any option handling itself, it only prepares the array @ARGV."
msgstr ""
"このモジュールは、指定されたファイルの内容を元にして @ARGV 内のオプションを補"
"完する仕組みです。これにより、通常のコマンドラインからの読み込みの代わりに、"
"もしくはコマンドラインからの読み込みに加えて、ファイルの内容をオプションとし"
"て取り込むことができるようになります。\n"
"\n"
"それ以外にも、このマニュアルに記述されている機能のほとんどに対して、 @ARGV を"
"処理する代わりに配列を利用することもできます。\n"
"\n"
"@ARGV を補完したあとは、 Getopt::xxx モジュールなどで通常通りオプションの処理"
"を行なうことができます。なお、 Getopt::ArgvFile 自身はオプションを処理せず、 "
"@ARGV 配列の準備のみを行ないます。"

#. leap/perl-Getopt-Long-Descriptive/summary
msgid "Getopt::Long, but simpler and more powerful"
msgstr "シンプルでよりパワフルな Getopt::Long"

#. leap/perl-Getopt-Long-Descriptive/description
msgid ""
"Getopt::Long::Descriptive is yet another Getopt library. It's built atop "
"Getopt::Long, and gets a lot of its features, but tries to avoid making you "
"think about its huge array of options.\n"
"\n"
"It also provides usage (help) messages, data validation, and a few other "
"useful features."
msgstr ""
"Getopt::Long::Descriptive はもう 1 つの Getopt ライブラリです。 Getopt::Long "
"上に構築されているモジュールですが、多数の機能が追加されていますが、非常に大"
"きなオプション類を気にしなくても動作できるようにしてあります。\n"
"\n"
"また、このモジュールは利用方法に関するメッセージ (ヘルプ) やデータの検証、お"
"よびいくつかの便利な追加機能も提供されています。"

#. leap/perl-Getopt-Tabular/summary
msgid "table-driven argument parsing for Perl 5"
msgstr "Perl 5 向けのテーブル駆動型パラメータ処理"

#. leap/perl-Getopt-Tabular/description
msgid ""
"*Getopt::Tabular* is a Perl 5 module for table-driven argument parsing, "
"vaguely inspired by John Ousterhout's Tk_ParseArgv. All you really need to "
"do to use the package is set up a table describing all your command-line "
"options, and call &GetOptions with three arguments: a reference to your "
"option table, a reference to '@ARGV' (or something like it), and an optional "
"third array reference (say, to '@newARGV'). &GetOptions will process all "
"arguments in '@ARGV', and copy any leftover arguments (i.e. those that are "
"not options or arguments to some option) to the '@newARGV' array. (If the "
"'@newARGV' argument is not supplied, 'GetOptions' will replace '@ARGV' with "
"the stripped-down argument list.) If there are any invalid options, "
"'GetOptions' will print an error message and return 0.\n"
"\n"
"Before I tell you all about why Getopt::Tabular is a wonderful thing, let me "
"explain some of the terminology that will keep popping up here. \n"
"* argument\n"
"\n"
"  any single word appearing on the command-line, i.e. one element of the   "
"'@ARGV' array. \n"
"* option\n"
"\n"
"  an argument that starts with a certain sequence of characters; the   "
"default is \"-\". (If you like GNU-style options, you can change this to   "
"\"--\".) In most Getopt::Tabular-based applications, options can come   "
"anywhere on the command line, and their order is unimportant (unless one   "
"option overrides a previous option). Also, Getopt::Tabular will allow any   "
"non-ambiguous abbreviation of options. \n"
"* option argument\n"
"\n"
"  (or _value_) an argument that immediately follows certain types of   "
"options. For instance, if '-foo' is a scalar-valued integer option, and   '-"
"foo 3' appears on the command line, then '3' will be the argument to   '-"
"foo'. \n"
"* option type\n"
"\n"
"  controls how 'GetOptions' deals with an option and the arguments that   "
"follow it. (Actually, for most option types, the type interacts with the   "
"'num_values' field, which determines whether the option is scalar- or   "
"vector-valued. This will be fully explained in due course.)"
msgstr ""
"*Getopt::Tabular* はテーブル駆動型のパラメータ処理を実現する Perl 5 モジュー"
"ルで、 John Ousterhout 氏の Tk_ParseArgv をヒントにして作られたものです。この"
"パッケージを利用するにあたって必要な作業は、処理すべきコマンドラインオプショ"
"ンを指定するテーブルを構築し、これを元に &GetOptions を呼び出すだけです。 "
"&GetOptions には、構築したテーブルと '@ARGV' の参照 (もしくはそれに類するも"
"の) 、そして任意指定の配列参照 ('@newARGV' のようなもの) です。 &GetOptions "
"は '@ARGV' にあるすべてのパラメータを処理し、残りのパラメータ (コマンドライン"
"オプション以外のパラメータや、コマンドラインオプションの値など) を "
"'@newARGV' 配列にコピーします ('@newARGV' パラメータを指定しなかった場合は、 "
"'&GetOptions' は '@ARGV' で指定した配列を、抽出したパラメータリストに置き換え"
"ます) 。正しくないオプションが指定された場合は、 'GetOptions' はエラーメッ"
"セージを出力し、 0 を返します。\n"
"Getopt::Tabular が素晴らしいものであることを示す前に、まずは本モジュールで使"
"用する用語について説明します:\n"
"* パラメータ\n"
"\n"
"  コマンドライン内に現われる単語。 '@ARGV' 配列のうちの 1 要素。\n"
"* オプション\n"
"\n"
"  特定の文字順序で表現されるパラメータ。既定では \"-\" (GNU 形式のオプション"
"を設定したい場合は、 \"--\" に変更することもできます) 。ほとんどの Getopt::"
"Tabular ベースのアプリケーションでは、オプションはコマンドライン内のどこに現"
"われてもかまわないものとし、順序についても特に気にしないものとされます (ただ"
"し、一方のオプションが他方のオプションを上書きするような場合は除きます) 。ま"
"た、 Getopt::Tabular ではオプションの省略形 (明らかである場合のみ) を利用する"
"こともできます。\n"
"* オプション値\n"
"\n"
"  (もしくは単に _値_) 。特定のタイプのオプションの後ろに現われる、パラメータ"
"の値。たとえば '-foo' がスカラー値の整数を受け取るオプションであったとする"
"と、コマンドライン内で '-foo 3' というパラメータが現われると、オプション '-"
"foo' に対して '3' が設定されたものと見なされます。\n"
"\n"
"* オプションタイプ\n"
"\n"
"  'GetOptions' からのオプションの処理方法と、それに続くオプション値の種類 (実"
"際には、多くのオプションタイプではオプション値の型のほか、スカラー値なのかベ"
"クトル値なのかを指定することもできます。これに関しては後ほど詳しく説明しま"
"す) 。"

#. leap/perl-Git-Version-Compare/summary
msgid "Functions to compare Git versions"
msgstr "git バージョン間の比較関数"

#. leap/perl-Git-Version-Compare/description
msgid ""
"Git::Version::Compare contains a selection of subroutines that make dealing "
"with Git-related things (like versions) a little bit easier.\n"
"\n"
"The strings to compare can be version numbers, tags from 'git.git' or the "
"output of 'git version' or 'git describe'.\n"
"\n"
"These routines collect the knowledge about Git versions that was accumulated "
"while developing Git::Repository."
msgstr ""
"Git::Version::Compare は git に関連するもの (特にバージョン管理) を少し簡単に"
"行なうことのできるサブルーチン集です。\n"
"\n"
"文字列としてバージョン番号のほか、 'git.git' のタグや 'git version' もしくは "
"'git describe' の出力を与えることができます。\n"
"\n"
"これらのルーチンは Git::Repository を開発する際に蓄積された git バージョンの"
"知識を集約したものです。"

#. leap/perl-Glib/summary
msgid "Perl wrappers for the GLib utility and Object libraries"
msgstr "Glib ユーティリティとオブジェクトライブラリ向けの Perl ラッパー"

#. leap/perl-Glib/description
msgid ""
"This wrapper attempts to provide a perlish interface while remaining as true "
"as possible to the underlying C API, so that any reference materials you can "
"find on using GLib may still apply to using the libraries from perl. This "
"module also provides facilities for creating wrappers for other GObject-"
"based libraries. The SEE ALSO section contains pointers to all sorts of good "
"information."
msgstr ""
"このラッパーは、裏側に存在する C 言語 API を維持したまま、できるかぎり Perl "
"形式のインターフェイスを提供するように目指したものです。これにより、 glib 内"
"に存在する様々な要素を、 Perl から利用できるようにしています。このモジュール"
"には、他の GOBject ベースのライブラリに対するラッパー作成機構も用意されていま"
"す。詳しい情報へのポインタは、マニュアルページの SEE ALSO をお読みください。"

#. leap/perl-Glib-Object-Introspection/summary
#. leap/perl-Glib-Object-Introspection/description
msgid "Dynamically create Perl language bindings"
msgstr "動的な Perl 言語バインディングの作成"

#. leap/perl-Gnome2/summary
msgid "Perl interface to the 2.x series of the GNOME libraries"
msgstr ""
"GNOME ライブラリのバージョン 2.x シリーズに対する Perl インターフェイス"

#. leap/perl-Gnome2/description
msgid ""
"Since this module tries to stick very closely to the C API, the "
"documentation found at\n"
"\n"
"  http://developer.gnome.org/libgnome\n"
"\n"
"and\n"
"\n"
"  http://developer.gnome.org/libgnomeui\n"
"\n"
"is the canonical reference.\n"
"\n"
"In addition to that, there's also the automatically generated API "
"documentation: Gnome2::index(3pm).\n"
"\n"
"The mapping described in Gtk2::api(3pm) also applies to this module.\n"
"\n"
"To discuss this module, ask questions and flame/praise the authors, join gtk-"
"perl-list@gnome.org at lists.gnome.org."
msgstr ""
"このモジュールは C 言語の API に非常に似通った構造になるように作られていま"
"す。そのため、一般的なリファレンスをお求めの場合は、下記をご覧ください:\n"
"\n"
"  http://developer.gnome.org/libgnome\n"
"  http://developer.gnome.org/libgnomeui\n"
"\n"
"これに加えて、自動で生成された API ドキュメンテーションも用意されています: "
"Gnome2::index マニュアルページ (3pm).\n"
"\n"
"このモジュールでは、 Gtk2::api マニュアルページ(3pm) で説明されているマッピン"
"グにも対応しています。\n"
"\n"
"このモジュールに関する議論や質問、著者に対するクレームや賞賛は gtk-perl-"
"list@gnome.org (lists.gnome.org) にお送りください。"

#. leap/perl-Gnome2-Canvas/summary
msgid "Gnome2-Canvas Perl module"
msgstr "Gnome2-Canvas Perl モジュール"

#. leap/perl-Gnome2-Canvas/description
msgid ""
"The Gnome2::Canvas module allows a perl developer to use the GnomeCanvas "
"widget with Gtk2-Perl.  Find out more about Gnome+ at http://www.gnome.org.\n"
"\n"
"Like the Gtk2 module on which it depends, Gnome2::Canvas follows the C API "
"of libgnomecanvas-2.0 as closely as possible while still being perlish. "
"Thus, the C API reference remains the canonical documentation.\n"
"\n"
"To discuss gtk2-perl, ask questions and flame/praise the authors, join gtk-"
"perl-list@gnome.org at lists.gnome.org.\n"
"\n"
"Also have a look at the gtk2-perl website and sourceforge project page, "
"http://gtk2-perl.sourceforge.net"
msgstr ""
"Gnome2::Canvas モジュールは、 Perl の開発者に対して、 Gtk2-Perl 経由での "
"GnomeCanvas ウイジェットの機能を提供するためのものです。 Gnome+ について、詳"
"しくは http://www.gnome.org をお読みください。\n"
"\n"
"本モジュールの依存先である Gtk2 モジュールと同様に、 Gnome2::Canvas でも、 "
"Perl の体裁を守りながら libgnomecanvas-2.0 の C 言語 API にできる限り近くなる"
"ように作られています。そのため、正式なドキュメンテーションとして C 言語の "
"API リファレンスをお使いいただくことができます。\n"
"\n"
"gtk2-perl について議論したい場合、および質問やクレーム、賞賛を送りたい場合"
"は、 gtk-perl-list@gnome.org (lists.gnome.org) のメーリングリストにご参加くだ"
"さい。\n"
"\n"
"なお、 gtk2-perl について、詳しくは gtk2-perl の Web サイト、もしくは "
"sourceforge のプロジェクトページ (http://gtk2-perl.sourceforge.net) をお読み"
"ください。"

#. leap/perl-Gnome2-GConf/summary
msgid "Perl wrappers for the GConf configuration engine"
msgstr "GConf 設定エンジンに対する Perl ラッパー"

#. leap/perl-Gnome2-GConf/description
msgid ""
"Perl bindings to the 2.x series of the Gnome widget set.  This module allows "
"you to write graphical user interfaces in a perlish and object-oriented way, "
"freeing you from the casting and memory management in C, yet remaining very "
"close in spirit to original API."
msgstr ""
"Gnome ウイジェットセットのバージョン 2.x 系に対する Perl バインディングです。"
"このモジュールを利用することで、 Perl からオブジェクト指向の方法でグラフィカ"
"ルなユーザインターフェイスを作成できるようになるほか、 C 言語のキャスト処理や"
"メモリの管理などの手間を省くことができます。また、オリジナルの API の考え方を"
"非常に強く継承しています。"

#. leap/perl-Gnome2-VFS/summary
msgid "Perl interface to the 2.x series of the GNOME VFS library"
msgstr "GNOME VFS ライブラリのバージョン 2.x に対する Perl インターフェイス"

#. leap/perl-Gnome2-VFS/description
msgid ""
"Since this module tries to stick very closely to the C API, the "
"documentation found at\n"
"\n"
"  L<http://developer.gnome.org/doc/API/2.0/gnome-vfs-2.0/>\n"
"\n"
"is the canonical reference.\n"
"\n"
"In addition to that, there's also the automatically generated API "
"documentation: the Gnome2::VFS::index manpage.\n"
"\n"
"The mapping described in the Gtk2::api manpage also applies to this module.\n"
"\n"
"To discuss this module, ask questions and flame/praise the authors, join gtk-"
"perl-list@gnome.org at lists.gnome.org."
msgstr ""
"このモジュールは C 言語の API に非常に似通った構造になっていますので、下記の"
"ドキュメンテーションを正式のものとしてお使いいただくことができます:\n"
"\n"
" L<http://developer.gnome.org/doc/API/2.0/gnome-vfs-2.0/>\n"
"\n"
"これに加えて、自動で生成された API ドキュメンテーションもご利用いただくことが"
"できます: Gnome2::VFS::index\n"
"\n"
"Gtk2::api マニュアルページで説明されているマッピングについても、本モジュール"
"でお使いいただくことができます。\n"
"\n"
"このモジュールに関する議論や質問、著者へのクレームや賞賛については、  gtk-"
"perl-list@gnome.org (lists.gnome.org) のメーリングリストにお送りください。"

#. leap/perl-Gnome2-Wnck/summary
msgid "Perl interface to the Window Navigator Construction Kit"
msgstr "Window Navigator Construction Kit に対する Perl インターフェイス"

#. leap/perl-Gnome2-Wnck/description
msgid ""
"This module allows you to use the Window Navigator Construction Kit library "
"(libwnck for short) from Perl.\n"
"\n"
"The index of the automatically generated API documentation can be accessed "
"with:\n"
"\n"
"  perldoc Gnome2::Wnck::index"
msgstr ""
"このモジュールは、 Perl から Window Navigator Construction Kit ライブラリ (略"
"して libwnck) を利用できるようにするための仕組みです。\n"
"\n"
"自動生成された API ドキュメンテーションについては、下記をお読みください:\n"
"\n"
" perldoc Gnome2::Wnck::index"

#. leap/perl-GnuPG-Interface/summary
msgid "Perl interface to GnuPG"
msgstr "GnuPG に対する Perl インターフェイス"

#. leap/perl-GnuPG-Interface/description
msgid ""
"GnuPG::Interface and its associated modules are designed to provide an "
"object-oriented method for interacting with GnuPG, being able to perform "
"functions such as but not limited to encrypting, signing, decryption, "
"verification, and key-listing parsing."
msgstr ""
"GnuPG::Interface と関連するモジュールは、 GnuPG との対話処理をオブジェクト指"
"向の方法で提供するよう設計されているものです。このモジュールを利用すること"
"で、暗号化や署名、暗号の解読や署名の検証、キー一覧の処理などを行なうことがで"
"きます。"

#. leap/perl-Goo-Canvas/summary
#. leap/perl-Goo-Canvas/description
msgid "Goo::Canvas Perl module"
msgstr "Goo::Canvas Perl モジュール"

#. leap/perl-Graph/summary
msgid "Graph Data Structures and Algorithms"
msgstr "データ構造やアルゴリズムのグラフ化"

#. leap/perl-Graph/description
msgid "graph data structures and algorithms"
msgstr "データ構造やアルゴリズムのグラフ化"

#. leap/perl-GraphViz/summary
msgid "Interface to AT&T's GraphViz. Deprecated. See GraphViz2"
msgstr ""
"AT&T の GraphViz へのインターフェイスです。廃止予定です。 GraphViz2 をご覧く"
"ださい。"

#. leap/perl-GraphViz/description
msgid ""
"This module provides an interface to layout and image generation of directed "
"and undirected graphs in a variety of formats (PostScript, PNG, etc.) using "
"the \"dot\", \"neato\", \"twopi\", \"circo\" and \"fdp\" programs from the "
"Graphviz project (http://www.graphviz.org/ or http://www.research.att.com/sw/"
"tools/graphviz/).\n"
"\n"
"GraphViz is deprecated in favour of GraphViz2."
msgstr ""
"このモジュールはレイアウトに対するインターフェイスを提供するもので、様々な形"
"式 (PostScript, PNG など) の画像でグラフを生成することができるものです。グラ"
"フの生成にあたっては、 Graphviz プロジェクトが提供する \"dot\", \"neato\", "
"\"twopi\", \"circo\", \"fdp\" の各プログラムを利用することができます (http://"
"www.graphviz.org/ もしくは http://www.research.att.com/sw/tools/"
"graphviz/) 。\n"
"\n"
"GraphViz は、 GraphViz2 の登場によって廃止される予定です。"

#. leap/perl-Graphics-ColorUtils/summary
msgid "Easy-to-use color space conversions and more"
msgstr "使いやすいカラースペース変換など"

#. leap/perl-Graphics-ColorUtils/description
msgid ""
"This modules provides some utility functions to handle colors and color "
"space conversions.\n"
"\n"
"The interface has been kept simple, so that most functions can be called "
"\"inline\" when making calls to graphics libraries such as GD, Tk, or when "
"generating HTML/CSS. (E.g. for GD: '$c = $img->colorAllocate( hsv2rgb( 270, "
"0.5, 0.3 ) );'.)\n"
"\n"
"Features: \n"
"* Color Space Conversions\n"
"\n"
"  Color space conversions, in particular between the \"intuitive\" color   "
"spaces HSV (Hue/Saturation/Value) and HLS (Hue/Lightness/Saturation) to   "
"and from RGB (Red/Green/Blue). \n"
"* Color Lookup\n"
"\n"
"  Color lookup by name for three standard sets of colors: WWW/CSS, SVG, "
"and   X11. \n"
"* Color Gradients\n"
"\n"
"  Management of color gradients, which can be indexed by a floating point   "
"number in the range 0..1. (Mostly intended for false-color data   "
"visualization.)"
msgstr ""
"このモジュールは色そのものやカラースペースの変換を扱うためのユーティリティ関"
"数を提供しています。\n"
"\n"
"インターフェイスはシンプルになるように維持されているため、ほとんどの関数は "
"GD や Tk, HTML/CSS 等のグラフィックライブラリを呼び出す場合、 \"インライン\" "
"で呼び出すことができるようになっています (GD の場合の例: '$c = $img-"
">colorAllocate( hsv2rgb( 270, 0.5, 0.3 ) );'.)\n"
"\n"
"機能: \n"
"* カラースペース変換\n"
"\n"
"  特に HSV (色相/彩度/明度) および HLS (色相/彩度/輝度) などの \"直感的な\" "
"カラースペースを、 RGB (赤/緑/青) のカラースペースに変換することができま"
"す。\n"
"* 色の参照\n"
"\n"
"  WWW/CSS, SVG, X11 などの色名定義を検索することができます。\n"
"* 色のグラデーション\n"
"\n"
"  0.1 単位の小数で色のグラデーション管理を行なうことができます (主に偽色デー"
"タの視覚化に使用します) 。"

#. leap/perl-Gravatar-URL/summary
msgid "Make URLs for Gravatars from an email address"
msgstr "電子メールアドレスからの Gravatars の URL の生成"

#. leap/perl-Gravatar-URL/description
msgid ""
"A Gravatar is a Globally Recognized Avatar for a given email address. This "
"allows you to have a global picture associated with your email address. You "
"can look up the Gravatar for any email address by constructing a URL to get "
"the image from gravatar.com. This module does that.\n"
"\n"
"Examples of use include the author faces on http://search.cpan.org.\n"
"\n"
"See http://gravatar.com for more info."
msgstr ""
"Gravatar は Globally Recognized Avatar の略で、電子メールアドレスから生成する"
"アバターです。このモジュールを利用することで、電子メールアドレスからグローバ"
"ルな画像を生成することができます。 URL を構築して gravatar.com にアクセスする"
"ことで、電子メールアドレスから Gravatar を参照することができます。\n"
"\n"
"使い方の例として、 http://search.cpan.org をご覧いただくと、著者の Gravatar "
"を参照することができます。\n"
"\n"
"詳しくは http://gravatar.com をお読みください。"

#. leap/perl-Growl-GNTP/summary
msgid "Perl implementation of GNTP Protocol (Client Part)"
msgstr "GNTP プロトコルの Perl 実装 (クライアント側)"

#. leap/perl-Growl-GNTP/description
msgid "Growl::GNTP is Perl implementation of GNTP Protocol (Client Part)"
msgstr "Growl::GNTP は GNTP プロトコルの Perl 実装 (クライアント側) です。"

#. leap/perl-Gtk2/summary
msgid "Perl interface to the 2.x series of the Gimp Toolkit library"
msgstr ""
"Gimp  ツールキットライブラリのバージョン 2.x に対する Perl インターフェイス"

#. leap/perl-Gtk2/description
msgid ""
"The Gtk2 module allows a Perl developer to use the Gtk+ graphical user "
"interface library. Find out more about Gtk+ at http://www.gtk.org.\n"
"\n"
"The GTK+ Reference Manual is also a handy companion when writing Gtk "
"programs in any language. http://developer.gnome.org/doc/API/2.0/gtk/ The "
"Perl bindings follow the C API very closely, and the C reference "
"documentation should be considered the canonical source.\n"
"\n"
"To discuss gtk2-perl, ask questions and flame/praise the authors, join gtk-"
"perl-list@gnome.org at lists.gnome.org.\n"
"\n"
"Also have a look at the gtk2-perl website and sourceforge project page, "
"http://gtk2-perl.sourceforge.net"
msgstr ""
"Gtk2 モジュールは、 Perl の開発者に対して Gtk+ グラフィカルユーザインターフェ"
"イスライブラリを提供する仕組みです。 Gtk+ について、詳しくは http://www.gtk."
"org をお読みください。\n"
"\n"
"Gtk プログラムを開発したい場合は、言語にかかわらず GTK+ リファレンスマニュア"
"ルをお読みになるのが適切でしょう。 http://developer.gnome.org/doc/API/2.0/"
"gtk/  です。Perl のバインディングは C 言語の API に非常に似通った構造になるよ"
"うに作られていて、 C 言語のリファレンス文書を正式なものとしてお使いいただくこ"
"とができます。\n"
"\n"
"このモジュールに関する議論や質問、著者へのクレームや賞賛については、  gtk-"
"perl-list@gnome.org (lists.gnome.org) のメーリングリストにお送りください。\n"
"\n"
"また、 gtk2-perl の Web サイトや sourceforge のプロジェクトページ (http://"
"gtk2-perl.sourceforge.net) もご覧ください"

#. leap/perl-Gtk2-AppIndicator/summary
msgid "Perl interface to the libappindicator"
msgstr "libappindicator に対する Perl インターフェイス"

#. leap/perl-Gtk2-AppIndicator/description
msgid ""
"This package provides perl bindings for libappindicator. libappindicator is "
"a library which provides a tray icon in desktop environments via "
"StatusNotifierItem implementation."
msgstr ""
"このパッケージは、 libappindicator に対する Perl バインディングを提供しま"
"す。 libappindicator は、 StatusNotifierItem の実装を通してデスクトップ環境内"
"にトレイアイコンを設置する機能を提供します。"

#. leap/perl-Gtk2-ImageView/summary
msgid "Perl bindings to the GtkImageView image viewer widget"
msgstr "GtkImageView イメージビューアウイジェットに対する Perl バインディング"

#. leap/perl-Gtk2-ImageView/description
msgid ""
"The Gtk2::ImageView module allows a Perl developer to use the GtkImageView "
"image viewer widget. Find out more about GtkImageView at http://trac.bjourne."
"webfactional.com/.\n"
"\n"
"To discuss Gtk2::ImageView or gtk2-perl, ask questions and flame/praise the "
"authors, join gtk-perl-list@gnome.org at lists.gnome.org."
msgstr ""
"Gtk2::ImageView は Perl の開発者に対して、 GtkImageView イメージビューアウイ"
"ジェットの機能を提供します。 GtkImageView について、詳しくは http://trac."
"bjourne.webfactional.com/ をお読みください。\n"
"\n"
"Gtk2::ImageView や gtk2-perl に関する議論、著者への質問やクレーム、賞賛につい"
"ては、 gtk-perl-list@gnome.org (lists.gnome.org) のメーリングリストにお送りく"
"ださい。"

#. leap/perl-Gtk2-Unique/summary
msgid "Perl bindings for the C library \"libunique\""
msgstr "\"libunique\" C ライブラリ向け Perl バインディング"

#. leap/perl-Gtk2-Unique/description
msgid ""
"Perl bindings for the C library \"libunique\" that provides a mechanism for "
"writing single instance applications. If you launch a single instance "
"application twice, the second instance will either just quit or will send a "
"message to the running instance."
msgstr ""
"\"libunique\" は単一インスタンスのアプリケーションを記述するためのライブラリ"
"で、このバインディングはそのライブラリに対する Perl のバインディングです。単"
"一インスタンスのアプリケーションを二重に起動すると、 2 つめのインスタンスは単"
"に終了するか、起動済みのインスタンスにメッセージを送信します。"

#. leap/perl-Gtk3/summary
msgid "Perl interface to the 3.x series of the gtk+ toolkit"
msgstr "gtk+ ツールキットのバージョン 3.x に対する Perl インターフェイス"

#. leap/perl-Gtk3/description
msgid ""
"The 'Gtk3' module allows a Perl developer to use the gtk+ graphical user "
"interface library. Find out more about gtk+ at http://www.gtk.org.\n"
"\n"
"The gtk+ reference manual is also a handy companion when writing 'Gtk3' "
"programs in Perl: http://developer.gnome.org/gtk3/stable/. The Perl bindings "
"follow the C API very closely, and the C reference documentation should be "
"considered the canonical source. The principles underlying the mapping from "
"C to Perl are explained in the documentation of Glib::Object::Introspection, "
"on which 'Gtk3' is based.\n"
"\n"
"Glib::Object::Introspection also comes with the 'perli11ndoc' program which "
"displays the API reference documentation of all installed libraries "
"organized in accordance with these principles."
msgstr ""
"'Gtk3' モジュールは、 Perl の開発者に対して gtk+ グラフィカルユーザインター"
"フェイスライブラリを提供する仕組みです。 gtk+ について、詳しくは https://www."
"gtk.org/ をお読みください。\n"
"\n"
"Perl で 'Gtk3' アプリケーションを開発する際は gtk+ リファレンスマニュアルをお"
"読みになるのが適切でしょう (http://developer.gnome.org/gtk3/stable/) 。 Perl "
"のバインディングは C 言語の API に非常に似通った構造になるように作られてい"
"て、 C 言語のリファレンス文書を正式なものとしてお使いいただくことができます。"
"また、 C 言語から Perl へのマッピングについては、 'Gtk3' のベースとなってい"
"る Glib::Object::Introspection 内にあるドキュメンテーションをお読みくださ"
"い。\n"
"\n"
"Glib::Object::Introspection にはインストールされている全てのライブラリをそれ"
"らの考え方とともに API リファレンスを表示することのできる 'perli11ndoc' プロ"
"グラムが付属しています。"

#. leap/perl-Guard/summary
msgid "Safe Cleanup Blocks"
msgstr "安全なクリーンアップブロック"

#. leap/perl-Guard/description
msgid ""
"This module implements so-called \"guards\". A guard is something (usually "
"an object) that \"guards\" a resource, ensuring that it is cleaned up when "
"expected.\n"
"\n"
"Specifically, this module supports two different types of guards: guard "
"objects, which execute a given code block when destroyed, and scoped guards, "
"which are tied to the scope exit."
msgstr ""
"このモジュールは \"guard\" (ガード) と呼ばれる仕組みを実装するものです。 "
"\"guard\" とは、必要になったときにクリーンアップされるよう、何らかのもの (一"
"般的にはオブジェクト) がリソースを \"保護\" するものです。\n"
"\n"
"具体的に言うと、このモジュールには 2 種類のガードが用意されています: 1 つは"
"ガードオブジェクトと呼ばれ、オブジェクトの破壊時に指定したブロックを実行する"
"機能で、もう 1 つはスコープガードと呼ばれ、スコープの終了時に結びつけられる仕"
"組みです。"

#. leap/perl-HTML-Clean/summary
msgid "Cleans up HTML code for web browsers, not humans"
msgstr "人間向けではなく Web ブラウザ向けの HTML クリーンアップ"

#. leap/perl-HTML-Clean/description
msgid ""
"The HTML::Clean module encapsulates a number of common techniques for "
"minimizing the size of HTML files. You can typically save between 10% and "
"50% of the size of a HTML file using these methods. It provides the "
"following features: \n"
"* Remove unneeded whitespace (beginning of line, etc) \n"
"* Remove unneeded META elements. \n"
"* Remove HTML comments (except for styles, javascript and SSI) \n"
"* Replace tags with equivalent shorter tags (<strong> --> <b>) \n"
"* etc.\n"
"\n"
"The entire process is configurable, so you can pick and choose what you want "
"to clean."
msgstr ""
"HTML::Clean モジュールは HTML ファイルを最小化するための汎用テクニックを数多"
"く集めてカプセル化したものです。これらの方式を使用することで、一般的に 10% か"
"ら 50% ほどサイズを節約できるようになっています。主な機能は下記のとおりで"
"す: \n"
"* 不要な空白の削除 (行頭など)\n"
"* 不要な META 要素の削除\n"
"* HTML コメントの削除 (スタイルシートや JavaScript, SSI などは除外されます)\n"
"* より短いタグへの置き換え (<strong> --> <b>) \n"
"* 等々\n"
"\n"
"全ての処理に対して設定を行なうことができますので、必要な機能のみを選択するこ"
"とができます。"

#. leap/perl-HTML-Element-Extended/summary
msgid "Extension for HTML::Element"
msgstr "HTML::Element に対する拡張"

#. leap/perl-HTML-Element-Extended/description
msgid ""
"HTML-Element-Extended is a package of several enhanced HTML::Element "
"classes, most of which arose during the effort to implement an HTML::Element "
"based table class.\n"
"\n"
"The modules are:         HTML::ElementTable         HTML::"
"ElementSuper         HTML::ElementGlob         HTML::ElementRaw\n"
"\n"
"The resulting functionality enables:         tables         element "
"globs         element coordinates         content replacement         "
"content wrapping         element cloning         raw HTML string adoption"
msgstr ""
"HTML-Element-Extended は HTML::Element クラスに対するいくつかの拡張パッケージ"
"で、これらの多くは HTML::Element ベースのテーブルクラスを実装する際に生まれた"
"ものです。\n"
"\n"
"モジュールには下記のものがあります:          HTML::ElementTable         "
"HTML::ElementSuper         HTML::ElementGlob         HTML::ElementRaw\n"
"\n"
"上記を実装した結果、下記の機能が提供されています: 表, 要素, グロブ, 要素の座"
"標, 内容の置換, コンテンツのラッピング, 要素のクローン, HTML 文字列のありのま"
"まの追加"

#. leap/perl-HTML-Encoding/summary
msgid "Determine the encoding of HTML/XML/XHTML documents"
msgstr "HTML/XML/XHTML ドキュメントのエンコーディングの判別"

#. leap/perl-HTML-Encoding/description
msgid ""
"HTML::Encoding helps to determine the encoding of HTML and XML/XHTML "
"documents."
msgstr ""
"HTML::Encoding は、 HTML, XML, XHTML の各文書に対して、そのエンコーディングを"
"判別を支援する機能を提供します。"

#. leap/perl-HTML-FillInForm/summary
msgid "Populates HTML Forms with data"
msgstr "HTML フォームへのデータ入力"

#. leap/perl-HTML-FillInForm/description
msgid ""
"This module fills in an HTML form with data from a Perl data structure, "
"allowing you to keep the HTML and Perl separate.\n"
"\n"
"Here are two common use cases:\n"
"\n"
"1. A user submits an HTML form without filling out a required field. You "
"want to redisplay the form with all the previous data in it, to make it easy "
"for the user to see and correct the error.\n"
"\n"
"2. You have just retrieved a record from a database and need to display it "
"in an HTML form."
msgstr ""
"このモジュールは、 Perl のデータ構造から HTML のフォームにデータを埋め込む処"
"理を行ないます。これにより、 HTML と Perl のコードを分離することができま"
"す。\n"
"\n"
"主な用途としては、下記のようなものがあります:\n"
"\n"
"1. ユーザが HTML のフォーム内に入力を行なったものの、必要な項目に記入がないよ"
"うな場合。フォームを再度表示するにあたって、入力済みの項目にはデータを入力し"
"たままの状態で表示するほうが便利であり、エラーの訂正も容易になります。\n"
"\n"
"2. データベースから特定のレコードを抽出して、それを HTML フォーム内に表示する"
"必要がある場合。"

#. leap/perl-HTML-Form/summary
msgid "Class that represents an HTML form element"
msgstr "HTML フォーム要素を表わすクラス"

#. leap/perl-HTML-Form/description
msgid ""
"Objects of the 'HTML::Form' class represents a single HTML '<form> ... </"
"form>' instance. A form consists of a sequence of inputs that usually have "
"names, and which can take on various values. The state of a form can be "
"tweaked and it can then be asked to provide 'HTTP::Request' objects that can "
"be passed to the request() method of 'LWP::UserAgent'."
msgstr ""
"'HTML::Form' クラスのオブジェクトは、 1 つの '<form>...</form>' (フォーム) イ"
"ンスタンスを表わします。フォームには名前など、様々な値のタイプを取り得る入力"
"項目が用意されます。フォームの状態を調整できる仕組みがあることから、 'LWP::"
"UserAgent' のメソッド request() に渡すことのできる 'HTTP::Request' オブジェク"
"トを提供するようにすることもできます。"

#. leap/perl-HTML-FormHandler/summary
msgid "HTML forms using Moose"
msgstr "Moose を利用した HTML フォーム"

#. leap/perl-HTML-FormHandler/description
msgid ""
"*** Although documentation in this file provides some overview, it is mainly "
"intended for API documentation. See HTML::FormHandler::Manual::Intro for an "
"introduction, with links to other documentation.\n"
"\n"
"HTML::FormHandler maintains a clean separation between form construction and "
"form rendering. It allows you to define your forms and fields in a number of "
"flexible ways. Although it provides renderers for HTML, you can define "
"custom renderers for any kind of presentation.\n"
"\n"
"HTML::FormHandler allows you to define form fields and validators. It can be "
"used for both database and non-database forms, and will automatically update "
"or create rows in a database. It can be used to process structured data that "
"doesn't come from an HTML form.\n"
"\n"
"One of its goals is to keep the controller/application program interface as "
"simple as possible, and to minimize the duplication of code. In most cases, "
"interfacing your controller to your form is only a few lines of code.\n"
"\n"
"With FormHandler you shouldn't have to spend hours trying to figure out how "
"to make a simple HTML change that would take one minute by hand. Because you "
"_can_ do it by hand. Or you can automate HTML generation as much as you "
"want, with template widgets or pure Perl rendering classes, and stay "
"completely in control of what, where, and how much is done automatically. "
"You can define custom renderers and display your rendered forms however you "
"want.\n"
"\n"
"You can split the pieces of your forms up into logical parts and compose "
"complete forms from FormHandler classes, roles, fields, collections of "
"validations, transformations and Moose type constraints. You can write "
"custom methods to process forms, add any attribute you like, and use Moose "
"method modifiers. FormHandler forms are Perl classes, so there's a lot of "
"flexibility in what you can do.\n"
"\n"
"HTML::FormHandler provides rendering through roles which are applied to form "
"and field classes (although there's no reason you couldn't write a renderer "
"as an external object either). There are currently two flavors: all-in-one "
"solutions like HTML::FormHandler::Render::Simple and HTML::FormHandler::"
"Render::Table that contain methods for rendering field widget classes, and "
"the HTML::FormHandler::Widget roles, which are more atomic roles which are "
"automatically applied to fields and form. See HTML::FormHandler::Manual::"
"Rendering for more details. (And you can easily use hand-built forms - "
"FormHandler doesn't care.)\n"
"\n"
"The typical application for FormHandler would be in a Catalyst, DBIx::Class, "
"Template Toolkit web application, but use is not limited to that. "
"FormHandler can be used in any Perl application.\n"
"\n"
"More Formhandler documentation and a tutorial can be found in the manual at "
"HTML::FormHandler::Manual."
msgstr ""
"*** このファイル内のドキュメンテーションには、いくつかの概要も含まれています"
"が、主に API のドキュメンテーションを目的として作成されています。導入部をお読"
"みになりたい場合は、 HTML::FormHandler::Manual::Intro および他のドキュメン"
"テーションへのリンクを参照してください。\n"
"\n"
"HTML::FormHandler は構築と描画を分離するための仕組みを提供します。フォームや"
"フィールドを各種の柔軟な方法で設定することができます。 HTML 用のレンダラも用"
"意されていますが、様々な出力をするための独自のレンダラを設定することもできま"
"す。\n"
"\n"
"HTML::FormHandler はフォームのフィールドとバリデータを設定することができま"
"す。データベース向けのフォームも、データベース向けではないフォームも作成する"
"ことができるほか、データベース内の行を自動的に更新したり、追加したりすること"
"もできます。このほか、 HTML フォームから作られるものではない構造化されたデー"
"タを処理することもできます。\n"
"\n"
"このモジュールの目的のうちの 1 つには、できる限りシンプルなコントローラ／アプ"
"リケーションプログラミングインターフェイスを維持し続け、コードの重複を最小化"
"することにあります。多くの場合、フォームに対するコントローラのインターフェイ"
"スは、コード数行程度で済みます。\n"
"\n"
"FormHandler については、手作業では数分程度でできてしまうようなシンプルな "
"HTML の変更に対して、時間を要するようなことはありません。なぜなら手作業でも記"
"述できるためです。そうでない場合も、 HTML 生成機能が必要なだけ自動化してくれ"
"ますし、テンプレートウイジェットや Perl のレンダリングクラスなどを利用するこ"
"ともできます。このほか、何をどこでどれだけ変更すべきなのかを自動制御させるこ"
"ともできます。また、必要であれば独自のレンダラを定義して、必要なフォーム生成"
"を行なうこともできます。\n"
"\n"
"フォームは複数の論理パーツに分解することができ、 FormHandler クラスやロール、"
"フィールドやバリデーションのコレクション、変換や Moose タイプ制約などを利用し"
"て、完全なフォームを組み合わせることができます。 FormHandler フォームは Perl "
"のクラスであるため、たいへんに柔軟な仕組みになっています。\n"
"\n"
"HTML::FormHandler は、フォームやフィールドのクラスに適用されるロールを介して"
"描画されます (ただし、外部オブジェクトとしてレンダラを作成し、利用することも"
"できます) 。現時点では 2 種類のフレーバーが用意され、一方は HTML::"
"FormHandler::Render::Simple や HTML::FormHandler::Render::Table のようなオー"
"ルインワンソリューションで、メソッドやレンダリングフィールドウイジェットなど"
"が提供されている仕組みで、他方は  HTML::FormHandler::Widget のようなロール"
"で、フィールドやフォームに自動的に適用されるような、より細かいロールを提供す"
"るものです。詳しくは HTML::FormHandler::Manual::Rendering をお読みください "
"(もちろん独自のフォームハンドラを利用することもできます) 。\n"
"\n"
"FormHandler の主な用途は、 Catalyst, DBIx::Class のほか、テンプレートツール"
"キットの Web アプリケーションなどがあります。もちろんそれ以外の用途もあります"
"ので、 FormHandler は任意の Perl アプリケーションで利用できる仕組みといえま"
"す。\n"
"\n"
"FormHandler のドキュメンテーションやチュートリアルについては、 HTML::"
"FormHandler::Manual をお読みください。"

#. leap/perl-HTML-Format/summary
#. leap/perl-HTML-Format/description
msgid "Base class for HTML formatters"
msgstr "HTML フォーマッタ向け基本クラス"

#. leap/perl-HTML-FormatText-WithLinks/summary
msgid "HTML to text conversion with links as footnotes"
msgstr "リンクを脚注に変換する HTML からテキストへの変換モジュール"

#. leap/perl-HTML-FormatText-WithLinks/description
msgid ""
"HTML::FormatText::WithLinks takes HTML and turns it into plain text but "
"prints all the links in the HTML as footnotes. By default, it attempts to "
"mimic the format of the lynx text based web browser's --dump option."
msgstr ""
"HTML::FormatText::WithLinks は HTML をパラメータとして受け取り、全ての HTML "
"内のリンクを脚注として純粋なテキストに変換します。既定では、 lync テキスト"
"ベースブラウザの --dump オプションの出力を疑似するように作られています。"

#. leap/perl-HTML-Parser/summary
msgid "HTML parser class"
msgstr "HTML パーサークラス"

#. leap/perl-HTML-Parser/description
msgid ""
"Objects of the 'HTML::Parser' class will recognize markup and separate it "
"from plain text (alias data content) in HTML documents. As different kinds "
"of markup and text are recognized, the corresponding event handlers are "
"invoked.\n"
"\n"
"'HTML::Parser' is not a generic SGML parser. We have tried to make it able "
"to deal with the HTML that is actually \"out there\", and it normally parses "
"as closely as possible to the way the popular web browsers do it instead of "
"strictly following one of the many HTML specifications from W3C. Where there "
"is disagreement, there is often an option that you can enable to get the "
"official behaviour.\n"
"\n"
"The document to be parsed may be supplied in arbitrary chunks. This makes on-"
"the-fly parsing as documents are received from the network possible.\n"
"\n"
"If event driven parsing does not feel right for your application, you might "
"want to use 'HTML::PullParser'. This is an 'HTML::Parser' subclass that "
"allows a more conventional program structure."
msgstr ""
"'HTML::Parser' のクラスオブジェクトは、 HTML ドキュメント内に書かれているマー"
"クアップを認識して、それらを純粋なテキストデータに分割することができます。複"
"数種類のマークアップとテキストを解釈できるようにするため、それぞれ関連付けら"
"れたイベントハンドラを呼び出す形式になっています。\n"
"\n"
"'HTML::Parser' は汎用の SGML パーサーではありません。まさに \"向こう側\" の存"
"在である HTML を取り扱うことができるようにするために努力を重ね、 W3C が提供す"
"る多数の HTML 仕様に厳密に準拠するのではなく、有名な Webブラウザが行なう方法"
"にできる限り近い結果を出すようにしてあります。そのため各種の不適合性が存在し"
"ますが、それは本来の動作を行なうようにするオプションで提供しています。\n"
"\n"
"ドキュメントは任意の長さのブロックに分割されます。これにより、ネットワークか"
"ら受信してその場でドキュメントを解釈することもできる仕組みになっています。\n"
"\n"
"イベント駆動型の仕組みがお使いのアプリケーションには合わないとお感じの場合"
"は、 'HTML::PullParser' をお使いください。これは 'HTML::Parser' のサブクラス"
"で、より便利なプログラム構造を提供しています。"

#. leap/perl-HTML-RewriteAttributes/summary
msgid "Concise Attribute Rewriting"
msgstr "簡潔な属性書き換え"

#. leap/perl-HTML-RewriteAttributes/description
msgid ""
"'HTML::RewriteAttributes' is designed for simple yet powerful HTML attribute "
"rewriting.\n"
"\n"
"You simply specify a callback to run for each attribute and we do the rest "
"for you.\n"
"\n"
"This module is designed to be subclassable to make handling special cases "
"eaiser. See the source for methods you can override."
msgstr ""
"HTML::RewriteAttributes はシンプルながらもパワフルな HTML 属性の変更機能を提"
"供します。\n"
"\n"
"各属性に対してコールバック関数を指定するだけで、残りの作業はこのモジュールが"
"すべて行ないます。\n"
"\n"
"このモジュールは、特殊なケースをより簡単に扱うことができるよう、サブクラス化"
"される前提で作られています。オーバーライド可能なメソッドについて、詳しくは"
"ソースコードをお読みください。"

#. leap/perl-HTML-Scrubber/summary
msgid "Perl extension for scrubbing/sanitizing HTML"
msgstr "HTML の洗浄と消毒化のための Perl 拡張"

#. leap/perl-HTML-Scrubber/description
msgid ""
"If you want to \"scrub\" or \"sanitize\" html input in a reliable and "
"flexible fashion, then this module is for you.\n"
"\n"
"I wasn't satisfied with HTML::Sanitizer because it is based on HTML::"
"TreeBuilder, so I thought I'd write something similar that works directly "
"with HTML::Parser."
msgstr ""
"HTML での入力を、信頼性が高く柔軟な方法で \"洗浄\" し、 \"消毒\" したい場合"
"は、このモジュールが便利です。\n"
"\n"
"HTML::Sanitizer は HTML::TreeBuilder をベースにしているため、不十分であると考"
"えています。そのため、 HTML::Parser で直接処理することのできる、本モジュール"
"を作成したものです。"

#. leap/perl-HTML-SimpleParse/summary
msgid "a bare-bones HTML parser"
msgstr "骨組みだけの HTML 処理"

#. leap/perl-HTML-SimpleParse/description
msgid ""
"This is the HTML::SimpleParse module.  It is a bare-bones HTML parser, "
"similar to HTML::Parser, but with a couple important distinctions:\n"
"\n"
"First, HTML::Parser knows which tags can contain other tags, which start "
"tags have corresponding end tags, which tags can exist only in the <HEAD> "
"portion of the document, and so forth.  HTML::SimpleParse does not know any "
"of these things.  It just finds tags and text in the HTML you give it, it "
"does not care about the specific content of these tags (though it does "
"distiguish between different _types_ of tags, such as comments, starting "
"tags like <b>, ending tags like </b>, and so on).\n"
"\n"
"Second, HTML::SimpleParse does not create a hierarchical tree of HTML "
"content, but rather a simple linear list.  It does not pay any attention to "
"balancing start tags with corresponding end tags, or which pairs of tags are "
"inside other pairs of tags.\n"
"\n"
"Because of these characteristics, you can make a very effective HTML filter "
"by sub-classing HTML::SimpleParse.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Ken Williams <ken@forum.swarthmore.edu>"
msgstr ""
"このパッケージは HTML::SimpleParse モジュールです。骨組みだけが用意された"
"HTML パーサーで、 HTML::Parser に似た仕組みですが、 2 つの点が大きく異なりま"
"す:\n"
"\n"
"第一に HTML::Parser は、他のタグを包含できるタグを知っているため、始まりのタ"
"グと終わりのタグを検知することができます。たとえば文書内の <HEAD> タグ内にど"
"のようなタグが存在しうるのかを知っています。 HTML::SimpleParse にはこのような"
"情報はありません。単純に HTML タグを解析し、その中のテキストを取り出すだけ"
"で、それらのタグの構造には関与しません (ただし異なる _タイプ_ のタグ、たとえ"
"ばコメントタグや <b> のような開始タグ、 </b> のような終了タグについては識別し"
"ます) 。\n"
"\n"
"第二に HTML::SimpleParse は、 HTML コンテンツに対するツリー構造を生成せず、単"
"純にシンプルな一覧のみを保持します。開始タグと終了タグについてもバランスが取"
"られていることを確認しないほか、タグ内にさらなるタグ対が存在することについて"
"も、確認を行ないません。\n"
"\n"
"このような成立から、 HTML::SimpleParse のサブクラスを作成することで、とても効"
"率的な HTML フィルタを作成することができるようになっています。\n"
"\n"
"\n"
"\n"
"作者:\n"
"--------     Ken Williams <ken@forum.swarthmore.edu>"

#. leap/perl-HTML-Stream/summary
msgid "HTML output stream class, and some markup utilities"
msgstr ""
"いくつかのマークアップユーティリティが付属した HTML 出力ストリームクラス"

#. leap/perl-HTML-Stream/description
msgid ""
"The *HTML::Stream* module provides you with an object-oriented (and "
"subclassable) way of outputting HTML. Basically, you open up an \"HTML stream"
"\" on an existing filehandle, and then do all of your output to the HTML "
"stream. You can intermix HTML-stream-output and ordinary-print-output, if "
"you like.\n"
"\n"
"There's even a small built-in subclass, *HTML::Stream::Latin1*, which can "
"handle Latin-1 input right out of the box. But all in good time..."
msgstr ""
"*HTML::Stream* モジュールは、オブジェクト指向の (かつサブクラス化可能な) "
"HTML 出力方法を提供するものです。基本的には、既存のファイルハンドルに対して "
"\"HTML ストリーム\" を開き、その後 HTML ストリーム内にデータを書き込んでいく"
"手順になっています。必要であれば、 HTML のストリーム出力と通常の print 出力を"
"混在させることもできます。\n"
"\n"
"なお、小さな内蔵サブクラスである *HTML::Stream::Latin1* も含まれています。こ"
"ちらは Latin-1 の入力を処理できる仕組みです。"

#. leap/perl-HTML-TableExtract/summary
msgid ""
"Perl module for extracting the content contained in tables within an HTM[cut]"
msgstr "HTML 文書の表に含まれる内容を抽出する Perl モジュール"

#. leap/perl-HTML-TableExtract/description
msgid ""
"HTML::TableExtract is a subclass of HTML::Parser that serves to extract the "
"information from tables of interest contained within an HTML document. The "
"information from each extracted table is stored in table objects. Tables can "
"be extracted as text, HTML, or HTML::ElementTable structures (for in-place "
"editing or manipulation).\n"
"\n"
"There are currently four constraints available to specify which tables you "
"would like to extract from a document: _Headers_, _Depth_, _Count_, and "
"_Attributes_.\n"
"\n"
"_Headers_, the most flexible and adaptive of the techniques, involves "
"specifying text in an array that you expect to appear above the data in the "
"tables of interest. Once all headers have been located in a row of that "
"table, all further cells beneath the columns that matched your headers are "
"extracted. All other columns are ignored: think of it as vertical slices "
"through a table. In addition, TableExtract automatically rearranges each row "
"in the same order as the headers you provided. If you would like to disable "
"this, set _automap_ to 0 during object creation, and instead rely on the "
"column_map() method to find out the order in which the headers were found. "
"Furthermore, TableExtract will automatically compensate for cell span issues "
"so that columns are really the same columns as you would visually see in a "
"browser. This behavior can be disabled by setting the _gridmap_ parameter to "
"0. HTML is stripped from the entire textual content of a cell before header "
"matches are attempted -- unless the _keep_html_ parameter was enabled.\n"
"\n"
"_Depth_ and _Count_ are more specific ways to specify tables in relation to "
"one another. _Depth_ represents how deeply a table resides in other tables. "
"The depth of a top-level table in the document is 0. A table within a top-"
"level table has a depth of 1, and so on. Each depth can be thought of as a "
"layer; tables sharing the same depth are on the same layer. Within each of "
"these layers, _Count_ represents the order in which a table was seen at that "
"depth, starting with 0. Providing both a _depth_ and a _count_ will uniquely "
"specify a table within a document.\n"
"\n"
"_Attributes_ match based on the attributes of the html <table> tag, for "
"example, border widths or background color.\n"
"\n"
"Each of the _Headers_, _Depth_, _Count_, and _Attributes_ specifications are "
"cumulative in their effect on the overall extraction. For instance, if you "
"specify only a _Depth_, then you get all tables at that depth (note that "
"these could very well reside in separate higher- level tables throughout the "
"document since depth extends across tables). If you specify only a _Count_, "
"then the tables at that _Count_ from all depths are returned (i.e., the "
"_n_th occurrence of a table at each depth). If you only specify _Headers_, "
"then you get all tables in the document containing those column headers. If "
"you have specified multiple constraints of _Headers_, _Depth_, _Count_, and "
"_Attributes_, then each constraint has veto power over whether a particular "
"table is extracted.\n"
"\n"
"If no _Headers_, _Depth_, _Count_, or _Attributes_ are specified, then all "
"tables match.\n"
"\n"
"When extracting only text from tables, the text is decoded with HTML::"
"Entities by default; this can be disabled by setting the _decode_ parameter "
"to 0."
msgstr ""
"HTML::TableExtract は HTML::Parser のサブクラスで、 HTML 文書内にある表 (テー"
"ブル)について、その中に含まれる情報を取り出すために使用します。それぞれ取り出"
"した情報は表オブジェクト内に保存されます。表はテキストとして取り出すことがで"
"きるほか、HTML や HTML::ElementTable の構造 (その場での操作や編集のため) とし"
"て取り出すことができます。\n"
"\n"
"文書から情報を取り出す表を指定するにあたっては、下記の 4 つの制約条件を指定す"
"ることができます: _Headers_, _Depth_, _Count_, _Attributes_.\n"
"\n"
"_Headers_ (ヘッダ) は、最も柔軟で他の技術との親和性が高い方法で、配列内にテキ"
"ストを指定することで、データを取り出す対象を指定します。該当の表に対する全て"
"のヘッダ行にアクセスすると、該当列の残りのセルを取り出すことができる仕組みで"
"す。つまり、表を縦に分断して取り出す方式です。それに加えて、 TableExtract は"
"指定した順序に並ぶように列を入れ替えます。この入れ替え処理を無効化したい場合"
"は、オブジェクト生成時 _automap_ に 0 を指定してください。この場合は "
"column_map() メソッドに依存して、ヘッダの順序が決められます。それに加えて、 "
"TableExtract ではセルの長さに関する問題を解決することができます。これにより、"
"ブラウザ内で見えているとおりにデータを取り出すことができます。この動作は "
"_gridmap_ パラメータを 0 にすることで無効化できます。なお、ヘッダの適合処理が"
"行なわれる前に HTML が解釈されることに注意してください。これは _keep_html_ パ"
"ラメータを有効にすることで回避できます。\n"
"\n"
"_Depth_ と _Count_ は 2 つの表の関連性をより厳密に指定できる方法です。 "
"_Depth_ は他の表内で対象の表がどれだけ深いものであるのかを指定します。文書内"
"でのトップレベルの (一番外側の) 表は 0 になります。トップレベル内にある表は "
"1 、その中にある表は 2 のようになります。それぞれの深さはレイヤ (層) としても"
"考えられるもので、同じ深さの表は同じレイヤにある表と言えます。このようなレイ"
"ヤの仕組みの中で、_Count_ は同じ深さの中での順序を指定します。これは 0 から始"
"まる値で、 _Depth_ と _Count_ を指定することで、文書内の表を厳密に指定するこ"
"とができます。\n"
"\n"
"_Attributes_ でのマッチングは、 html の <table> タグにおける属性 (アトリ"
"ビュート)を基準にして行なうものです。たとえば枠線の幅や背景色などです。\n"
"\n"
"_Headers_, _Depth_, _Count_, _Attributes_ の各指定は、組み合わせて指定するこ"
"ともできます。たとえば _Depth_ だけを指定した場合は、その深さの表全てを対象と"
"することになります (ただしそれぞれの親となる表が文書内でどこにあるのかをきち"
"んと把握しておく必要があります) 。また _Count_ だけを指定した場合、全ての深さ"
"にある表のうち、その位置 (順番) のものだけが返されます。 _Headers_ だけを指定"
"した場合も同様で、指定した列ヘッダのものだけを取り出します。 _Headers_, "
"_Depth_, _Count_, _Attributes_ を組み合わせて指定すると複数の組み合わせ条件と"
"なり、指定した条件全てに該当するものだけが返されます。\n"
"\n"
"逆に _Headers_, _Depth_, _Count_, _Attributes_ のいずれも指定しない場合は、全"
"ての表が該当することになります。\n"
"\n"
"表からテキストだけを取り出す場合、既定ではテキストは HTML::Entities でデコー"
"ドされます。これは _decode_ パラメータを 0 にすることで無効化できます。"

#. leap/perl-HTML-Tagset/summary
msgid "Data tables useful in parsing HTML"
msgstr "HTML を扱うための便利なデータテーブル"

#. leap/perl-HTML-Tagset/description
msgid ""
"This module contains several data tables useful in various kinds of HTML "
"parsing operations.\n"
"\n"
"Note that all tag names used are lowercase.\n"
"\n"
"In the following documentation, a \"hashset\" is a hash being used as a set\n"
"-- the hash conveys that its keys are there, and the actual values "
"associated with the keys are not significant. (But what values are there, "
"are always true.)"
msgstr ""
"このモジュールには、 HTML 処理操作に利用する各種の便利なデータテーブルが含ま"
"れています。\n"
"\n"
"ただし、すべてのタグ名は小文字で処理されることに注意してください。\n"
"\n"
"付属のドキュメンテーションで、 \"ハッシュセット\" とはセットとして使用される"
"ハッシュのことを指し、キーとして存在するだけで値には意味を持たないものを指し"
"ます(通常は値が true になっています)"

#. leap/perl-HTML-Template/summary
msgid "Perl module to use HTML-like templating language"
msgstr "HTML に似たテンプレート言語を使用する Perl モジュール"

#. leap/perl-HTML-Template/description
msgid ""
"This module attempts to make using HTML templates simple and natural. It "
"extends standard HTML with a few new HTML-esque tags - '<TMPL_VAR>' "
"'<TMPL_LOOP>', '<TMPL_INCLUDE>', '<TMPL_IF>', '<TMPL_ELSE>' and "
"'<TMPL_UNLESS>'. The file written with HTML and these new tags is called a "
"template. It is usually saved separate from your script - possibly even "
"created by someone else! Using this module you fill in the values for the "
"variables, loops and branches declared in the template. This allows you to "
"separate design - the HTML - from the data, which you generate in the Perl "
"script.\n"
"\n"
"This module is licensed under the same terms as Perl. See the LICENSE "
"section below for more details."
msgstr ""
"このモジュールは、 HTML のひな型をシンプルかつ中立に作成しようとしている試み"
"です。標準の HTML に対して、新しい HTML 風タグ ('<TMPL_VAR>' '<TMPL_LOOP>', "
"'<TMPL_INCLUDE>', '<TMPL_IF>', '<TMPL_ELSE>' and '<TMPL_UNLESS>') を導入し"
"て、ひな型の仕組みを構成しています。ひな形のファイル自身は HTML 形式で作成"
"し、新しいタグをテンプレートと呼びます。このような仕組みにより、たとえだれが"
"作ったものであっても、スクリプトとコンテンツを分離できるようになります。この"
"モジュールを使用することで、テンプレート内に定義されたとおりに値を設定した"
"り、ループや分岐などを作成することができます。また、 Perl においてデザイン "
"(HTML) とデータを分離することにもなります。\n"
"\n"
"このモジュールは Perl と同じライセンスで提供されています。詳しくはLICENSE セ"
"クションをお読みください。"

#. leap/perl-HTML-Tidy/summary
msgid "(X)HTML validation in a Perl object"
msgstr "Perl オブジェクト内での (X)HTML 検証"

#. leap/perl-HTML-Tidy/description
msgid ""
"'HTML::Tidy' is an HTML checker in a handy dandy object. It's meant as a "
"replacement for HTML::Lint. If you're currently an HTML::Lint user looking "
"to migrate, see the section Converting from HTML::Lint."
msgstr ""
"'HTML::Tidy' は使いやすい HTML チェッカーです。 HTML::Lint の代替として利用す"
"ることができるようになっています。現時点で HTML::Lint をお使いで、代替品をお"
"探しの場合は、 HTML::Lint のマニュアルページ内にある /Converting セクションを"
"お読みください。"

#. leap/perl-HTML-TokeParser-Simple/summary
msgid "Easy to use C<HTML::TokeParser> interface"
msgstr "使いやすい C<HTML::TokeParser> インターフェイス"

#. leap/perl-HTML-TokeParser-Simple/description
msgid ""
"'HTML::TokeParser' is an excellent module that's often used for parsing "
"HTML. However, the tokens returned are not exactly intuitive to parse:\n"
"\n"
" [\"S\",  $tag, $attr, $attrseq, $text]  [\"E\",  $tag, $text]  [\"T\",  "
"$text, $is_data]  [\"C\",  $text]  [\"D\",  $text]  [\"PI\", $token0, "
"$text]\n"
"\n"
"To simplify this, 'HTML::TokeParser::Simple' allows the user ask more "
"intuitive (read: more self-documenting) questions about the tokens "
"returned.\n"
"\n"
"You can also rebuild some tags on the fly. Frequently, the attributes "
"associated with start tags need to be altered, added to, or deleted. This "
"functionality is built in.\n"
"\n"
"Since this is a subclass of 'HTML::TokeParser', all 'HTML::TokeParser' "
"methods are available. To truly appreciate the power of this module, please "
"read the documentation for 'HTML::TokeParser' and 'HTML::Parser'."
msgstr ""
"'HTML::TokeParser' は HTML を処理するにあたって、よく用いられる上品なモジュー"
"ルです。ですが、返却されるトークンはあまり直観的なものではありません:\n"
"\n"
" [\"S\",  $tag, $attr, $attrseq, $text]  [\"E\",  $tag, $text]  [\"T\",  "
"$text, $is_data]  [\"C\",  $text]  [\"D\",  $text]  [\"PI\", $token0, "
"$text]\n"
"\n"
"これを単純化するため、 'HTML::TokeParser::Simple' というモジュールでは、返却"
"されるトークンに対して、より直観的な質問を投げられるようになっています (詳し"
"くは内蔵のドキュメントをお読みください) 。\n"
"\n"
"また、本モジュールではその場でタグを再構築することができます。たとえば開始タ"
"グ内に結び付けられた属性を変更したり、追加や削除を行なったりすることができま"
"す。このような機能は内蔵機能で実現されています。\n"
"\n"
"このモジュールは 'HTML::TokeParser' のサブクラスであるため、 'HTML::"
"TokeParser' のすべてのメソッドが利用できます。このモジュールの真の威力を知る"
"には、 'HTML::TokeParser' と 'HTML::Parser' の各ドキュメンテーションをお読み"
"ください。"

#. leap/perl-HTML-Tree/summary
msgid "Build and Scan Parse-Trees of Html"
msgstr "HTML ツリー構造の構築とスキャン"

#. leap/perl-HTML-Tree/description
msgid ""
"HTML-Tree is a suite of Perl modules for making parse trees out of HTML "
"source. It consists of mainly two modules, whose documentation you should "
"refer to: HTML::TreeBuilder and HTML::Element.\n"
"\n"
"HTML::TreeBuilder is the module that builds the parse trees. (It uses HTML::"
"Parser to do the work of breaking the HTML up into tokens.)\n"
"\n"
"The tree that TreeBuilder builds for you is made up of objects of the class "
"HTML::Element.\n"
"\n"
"If you find that you do not properly understand the documentation for HTML::"
"TreeBuilder and HTML::Element, it may be because you are unfamiliar with "
"tree-shaped data structures, or with object-oriented modules in general. "
"Sean Burke has written some articles for _The Perl Journal_ ('www.tpj.com') "
"that seek to provide that background. The full text of those articles is "
"contained in this distribution, as: \n"
"* HTML::Tree::AboutObjects\n"
"\n"
"\"User's View of Object-Oriented Modules\" from TPJ17. \n"
"* HTML::Tree::AboutTrees\n"
"\n"
"\"Trees\" from TPJ18 \n"
"* HTML::Tree::Scanning\n"
"\n"
"\"Scanning HTML\" from TPJ19\n"
"\n"
"Readers already familiar with object-oriented modules and tree-shaped data "
"structures should read just the last article. Readers without that "
"background should read the first, then the second, and then the third."
msgstr ""
"HTML-Tree は、 HTML ソースを解釈し、その解釈結果をツリー構造に仕立てることの"
"できる Perl モジュール集です。このモジュール集は主に 2 つのモジュールから構成"
"され、それぞれ HTML::TreeBuilder と HTML::Element という名称です。\n"
"\n"
"HTML::TreeBuilder は処理ツリーを構成するモジュールです (このモジュールは "
"HTML::Parser を利用して、 HTML を部品ごとに分解しています) 。\n"
"\n"
"TreeBuilder におけるツリーは、複数の HTML::Element クラスのオブジェクトから構"
"成されています。\n"
"\n"
"HTML::TreeBuilder や HTML::Element のドキュメンテーションを読んでもうまく理解"
"できない場合、それはツリー型のデータ構造やオブジェクト指向の構造に慣れていな"
"いためであると思われます。 Sean Burke 氏は _The Perl Journal_ ('www.tpj."
"com') 向けにいくつかの記事を作成していて、そこで詳しい解説を行なっています。"
"この記事の全文は下記の配布物に含まれています:\n"
"* HTML::Tree::AboutObjects\n"
"\n"
"TPJ17: \"User's View of Object-Oriented Modules\" (オブジェクト指向のモジュー"
"ルに関するユーザからの見た目)\n"
"* HTML::Tree::AboutTrees\n"
"\n"
"TPJ18: \"Trees\" (ツリー構造)\n"
"* HTML::Tree::Scanning\n"
"\n"
"TPJ19: \"Scanning HTML\" (HTML のスキャン)\n"
"\n"
"オブジェクト指向のモジュールやツリー構造のデータに慣れている場合は、最後の記"
"事のみをお読みになるのがよいでしょう。慣れていない場合は最初の記事から順に読"
"んでいくと良いでしょう。"

#. leap/perl-HTTP-Body/summary
msgid "HTTP Body Parser"
msgstr "HTTP ボディパーサ"

#. leap/perl-HTTP-Body/description
msgid ""
"HTTP::Body parses chunks of HTTP POST data and supports application/octet-"
"stream, application/json, application/x-www-form-urlencoded, and multipart/"
"form-data.\n"
"\n"
"Chunked bodies are supported by not passing a length value to new().\n"
"\n"
"It is currently used by the Catalyst manpage to parse POST bodies."
msgstr ""
"HTTP::Body は HTTP POST データのチャンクを処理するモジュールです。 "
"application/octet-stream, application/json, application/x-www-form-"
"urlencoded, multipart/form-data の各形式に対応しています。\n"
"\n"
"チャンク化されたボディにも対応していますが、この場合は new() に対して長さの値"
"を指定しないでください。\n"
"\n"
"現時点では、 Catalyst が POST ボディを処理する際に使用しています。"

#. leap/perl-HTTP-Cookies/summary
msgid "HTTP cookie jars"
msgstr "HTTP cookie jar"

#. leap/perl-HTTP-Cookies/description
msgid ""
"This class is for objects that represent a \"cookie jar\" -- that is, a "
"database of all the HTTP cookies that a given LWP::UserAgent object knows "
"about.\n"
"\n"
"Cookies are a general mechanism which server side connections can use to "
"both store and retrieve information on the client side of the connection. "
"For more information about cookies refer to <URL:http://curl.haxx.se/rfc/"
"cookie_spec.html> and <URL:http://www.cookiecentral.com/>. This module also "
"implements the new style cookies described in at https://tools.ietf.org/html/"
"rfc2965. The two variants of cookies are supposed to be able to coexist "
"happily.\n"
"\n"
"Instances of the class _HTTP::Cookies_ are able to store a collection of Set-"
"Cookie2: and Set-Cookie: headers and are able to use this information to "
"initialize Cookie-headers in _HTTP::Request_ objects. The state of a _HTTP::"
"Cookies_ object can be saved in and restored from files."
msgstr ""
"このクラスは \"cookie jar\" を表わすオブジェクト向けのものです。言い換えれ"
"ば、すべての LWP::UserAgent オブジェクトが知っているすべての HTTP Cookie の"
"データベースです。\n"
"\n"
"Cookie とは接続とは独立した仕組みで、サーバ側の接続情報をクライアント側に保存"
"したり、それを問い合わせたりするための仕組みです。 Cookie について、詳しくは"
"<URL:http://curl.haxx.se/rfc/cookie_spec.html> と <URL:http://www."
"cookiecentral.com/>をお読みください。また、このモジュールでは https://tools."
"ietf.org/html/rfc2965 で規定される新しいスタイルのCookie も実装しています。 "
"Cookie に対する 2 つの形式は問題なく共存可能です。\n"
"\n"
"また、 _HTTP::Cookies_ クラスのインスタンスは、 Set-Cookie2: や Set-Cookie: "
"のヘッダを集めて保存することができるほか、この情報を利用して _HTTP::Request_ "
"オブジェクト内の Cookie ヘッダを初期化することもできます。 HTTP::Cookies_ オ"
"ブジェクトの状態は、ファイルに保存したり、ファイルから復元したりすることもで"
"きます。"

#. leap/perl-HTTP-DAV/summary
msgid "WebDAV client library for Perl5"
msgstr "Perl5 向け WebDAV クライアントライブラリ"

#. leap/perl-HTTP-DAV/description
msgid ""
"HTTP::DAV is a Perl API for interacting with and modifying content on "
"webservers using the WebDAV protocol. Now you can LOCK, DELETE and PUT files "
"and much more on a DAV-enabled webserver."
msgstr ""
"HTTP:DAV は WebDAV プロトコルを使用する Web サーバに対して、内容の修正を行な"
"うための Perl ライブラリです。 DAV サーバ上でファイルに対して LOCK, DELETE, "
"PUT の各処理を行なうことが できるなどの機能を備えています。"

#. leap/perl-HTTP-Daemon/summary
msgid "a simple http server class"
msgstr "シンプルな http サーバクラス"

#. leap/perl-HTTP-Daemon/description
msgid ""
"Instances of the 'HTTP::Daemon' class are HTTP/1.1 servers that listen on a "
"socket for incoming requests. The 'HTTP::Daemon' is a subclass of 'IO::"
"Socket::INET', so you can perform socket operations directly on it too.\n"
"\n"
"The accept() method will return when a connection from a client is "
"available. The returned value will be an 'HTTP::Daemon::ClientConn' object "
"which is another 'IO::Socket::INET' subclass. Calling the get_request() "
"method on this object will read data from the client and return an 'HTTP::"
"Request' object. The ClientConn object also provide methods to send back "
"various responses."
msgstr ""
"'HTTP::Daemon' クラスのインスタンスは、要求を待ち受ける HTTP/1.1 サーバとなり"
"ます。 'HTTP::Daemon' は 'IO::Socket::INET' のサブクラスであるため、ソケット"
"に対する直接操作も実施することができます。\n"
"\n"
"クライアントからの接続が到着すると、 accept() メソッドの呼び出しが返却されま"
"す。返却された値は 'HTTP::Daemon::ClientConn' オブジェクトのインスタンスで、"
"こちらは 'IO::Socket::INET' のサブクラスです。このオブジェクトに対して "
"get_request() メソッドを呼び出すと、クライアントからのデータを読み込ん"
"で'HTTP::Request' のインスタンスを返却します。 ClientConn オブジェクトでは、"
"様々な応答を返すためのメソッドが用意されています。"

#. leap/perl-HTTP-Date/summary
msgid "Date conversion routines"
msgstr "日付変換ルーチン"

#. leap/perl-HTTP-Date/description
msgid ""
"This module provides functions that deal the date formats used by the HTTP "
"protocol (and then some more). Only the first two functions, time2str() and "
"str2time(), are exported by default."
msgstr ""
"このモジュールは、 HTTP プロトコル (その他のものも含みます) で使用される日付"
"形式を扱う関数を提供しています。既定では time2str() and str2time() という 2 "
"種類の関数だけが公開されます。"

#. leap/perl-HTTP-Entity-Parser/summary
msgid "PSGI compliant HTTP Entity Parser"
msgstr "PSGI 準拠の HTTP エンティティパーサ"

#. leap/perl-HTTP-Entity-Parser/description
msgid ""
"HTTP::Entity::Parser is a PSGI-compliant HTTP Entity parser. This module "
"also is compatible with HTTP::Body. Unlike HTTP::Body, HTTP::Entity::Parser "
"reads HTTP entities from PSGI's environment '$env->{'psgi.input'}' and "
"parses it. This module supports application/x-www-form-urlencoded, multipart/"
"form-data and application/json."
msgstr ""
"HTTP::Entity::Parser は PSGI 準拠の HTTP エンティティパーサです。このモジュー"
"ルは HTTP::Body との互換性もあります。 HTTP::Body とは異なり、 HTTP::Entity::"
"Parser は PSGI の環境変数 '$env->{'psgi.input'}' から HTTP エンティティを読み"
"込んで処理します。また、このモジュールは application/x-www-form-urlencoded, "
"multipart/form-data, application/json に対応しています。"

#. leap/perl-HTTP-Headers-ActionPack/summary
msgid "HTTP Action, Adventure and Excitement"
msgstr "HTTP アクションパック"

#. leap/perl-HTTP-Headers-ActionPack/description
msgid ""
"This is a module to handle the inflation and deflation of complex HTTP "
"header types. In many cases header values are simple strings, but in some "
"cases they are complex values with a lot of information encoded in them. The "
"goal of this module is to make the parsing and analysis of these headers as "
"easy as calling 'inflate' on a compatible object (see below for a list).\n"
"\n"
"This top-level class is basically a Factory for creating instances of the "
"other classes in this module. It contains a number of convenience methods to "
"help make common cases easy to write."
msgstr ""
"このモジュールは、複雑な HTTP ヘッダタイプの相互変換のためのモジュールです。"
"多くの場合、値は単純な文字列ですが、場合によっては多数の情報がエンコードされ"
"た複雑な値である場合もあります。このモジュールは、互換性のあるオブジェクト "
"(下記に一覧を示します) で 'inflate' を呼び出すだけで、簡単にヘッダを処理し、"
"分析できる機能を提供します。\n"
"\n"
"このトップレベルのクラスは基本的に Factory で、このモジュールの他クラスのイン"
"スタンスを作成する際に利用します。このほか、多くの用途で書きやすくなるように"
"するための便利メソッドも多数用意されています。"

#. leap/perl-HTTP-Headers-Fast/summary
msgid "Faster Implementation of Http::Headers"
msgstr "Http::Headers のより高速な実装"

#. leap/perl-HTTP-Headers-Fast/description
msgid ""
"HTTP::Headers::Fast is a perl class for parsing/writing HTTP headers.\n"
"\n"
"The interface is same as HTTP::Headers."
msgstr ""
"HTTP::Headers::Fast は HTTP ヘッダの処理や書き出しに対応した Perl クラスで"
"す。\n"
"\n"
"インターフェイスは HTTP::Headers と同じです。"

#. leap/perl-HTTP-Lite/summary
msgid "Lightweight HTTP implementation"
msgstr "軽量 HTTP 実装"

#. leap/perl-HTTP-Lite/description
msgid ""
"*Note:* you should look at the HTTP::Tiny manpage or the LWP manpage before "
"using this module.\n"
"\n"
"HTTP::Lite is a stand-alone lightweight HTTP/1.1 implementation for perl. It "
"is not intended as a replacement for the fully-featured LWP module. Instead, "
"it is intended for use in situations where it is desirable to install the "
"minimal number of modules to achieve HTTP support, or where LWP is not a "
"good candidate due to CPU overhead, such as slower processors. HTTP::Lite is "
"also significantly faster than LWP.\n"
"\n"
"HTTP::Lite is ideal for CGI (or mod_perl) programs or for bundling for "
"redistribution with larger packages where only HTTP GET and POST "
"functionality are necessary.\n"
"\n"
"HTTP::Lite supports basic POST and GET operations only. As of 0.2.1, HTTP::"
"Lite supports HTTP/1.1 and is compliant with the Host header, necessary for "
"name based virtual hosting. Additionally, HTTP::Lite now supports Proxies.\n"
"\n"
"As of 2.0.0 HTTP::Lite now supports a callback to allow processing of "
"request data as it arrives. This is useful for handling very large files "
"without consuming memory.\n"
"\n"
"If you require more functionality, such as FTP or HTTPS, please see "
"libwwwperl (LWP). LWP is a significantly better and more comprehensive "
"package than HTTP::Lite, and should be used instead of HTTP::Lite whenever "
"possible."
msgstr ""
"*注意:* このモジュールを使用する前に、まずは HTTP::Tiny や LWP をご検討くださ"
"い。\n"
"\n"
"HTTP::Lite は Perl 向けの単独型かつ軽量の HTTP/1.1 実装です。すべての機能がそ"
"ろった LWP モジュールの代替となることは目指しておらず、 HTTP に対応するにあ"
"たって最小限のモジュールをインストールするだけで済ませたいような状況で使用す"
"るみことを目指しているものです。このほか、 LWP ではプロセッサの速度が遅くて "
"CPU のオーパヘッドが大きく、実用に耐えないような場合などにも適切です。 HTTP::"
"Lite は LWP よりも比較的高速に動作します。\n"
"\n"
"HTTP::Lite は CGI (もしくは mod_perl) プログラムで便利な仕組みであるほか、 "
"HTTP の GET や POST の機能のみが必要な巨大パッケージで、配布物に同梱したい用"
"途などにも適切です。\n"
"\n"
"HTTP::Lite は基本手無き POST/GET 操作のみに対応しています。バージョン 0.2.1 "
"では HTTP::Lite は HTTP/1.1 と Host ヘッダに対応し、名前ベースの仮想ホストと"
"の間で通信を行なう際の要件に対応しています。また、 HTTP::Lite はプロキシにも"
"対応しています。\n"
"\n"
"HTTP::LIte 2.0.0 では、データが届いた際に処理を行なうためのコールバックにも対"
"応しています。これはメモリを消費することなく、巨大なデータを処理する必要があ"
"る環境に便利です。\n"
"\n"
"FTP や HTTPS など、より高度な機能を必要とする場合は、 libwwwperl (LWP) をご覧"
"ください。 LWP　は HTTP::Lite と比べると比較的良好かつ広範囲に対応するモ"
"ジュールで、可能であれば HTTP::Lite ではなく、 LWP のほうがお勧めです。"

#. leap/perl-HTTP-Message/summary
msgid "HTTP style message (base class)"
msgstr "HTTP スタイルメッセージ (ベースクラス)"

#. leap/perl-HTTP-Message/description
msgid ""
"An 'HTTP::Message' object contains some headers and a content body. The "
"following methods are available: \n"
"* $mess = HTTP::Message->new \n"
"* $mess = HTTP::Message->new( $headers ) \n"
"* $mess = HTTP::Message->new( $headers, $content )\n"
"\n"
"This constructs a new message object. Normally you would want construct "
"'HTTP::Request' or 'HTTP::Response' objects instead.\n"
"\n"
"The optional $header argument should be a reference to an 'HTTP::Headers' "
"object or a plain array reference of key/value pairs. If an 'HTTP::Headers' "
"object is provided then a copy of it will be embedded into the constructed "
"message, i.e. it will not be owned and can be modified afterwards without "
"affecting the message.\n"
"\n"
"The optional $content argument should be a string of bytes. \n"
"* $mess = HTTP::Message->parse( $str )\n"
"\n"
"This constructs a new message object by parsing the given string. \n"
"* $mess->headers\n"
"\n"
"Returns the embedded 'HTTP::Headers' object. \n"
"* $mess->headers_as_string \n"
"* $mess->headers_as_string( $eol )\n"
"\n"
"Call the as_string() method for the headers in the message. This will be the "
"same as\n"
"\n"
"    $mess->headers->as_string\n"
"\n"
"but it will make your program a whole character shorter :-) \n"
"* $mess->content \n"
"* $mess->content( $bytes )\n"
"\n"
"The content() method sets the raw content if an argument is given. If no "
"argument is given the content is not touched. In either case the original "
"raw content is returned.\n"
"\n"
"If the 'undef' argument is given, the content is reset to its default value, "
"which is an empty string.\n"
"\n"
"Note that the content should be a string of bytes. Strings in perl can "
"contain characters outside the range of a byte. The 'Encode' module can be "
"used to turn such strings into a string of bytes. \n"
"* $mess->add_content( $bytes )\n"
"\n"
"The add_content() methods appends more data bytes to the end of the current "
"content buffer. \n"
"* $mess->add_content_utf8( $string )\n"
"\n"
"The add_content_utf8() method appends the UTF-8 bytes representing the "
"string to the end of the current content buffer. \n"
"* $mess->content_ref \n"
"* $mess->content_ref( \\$bytes )\n"
"\n"
"The content_ref() method will return a reference to content buffer string. "
"It can be more efficient to access the content this way if the content is "
"huge, and it can even be used for direct manipulation of the content, for "
"instance:\n"
"\n"
"  ${$res->content_ref} =~ s/\\bfoo\\b/bar/g;\n"
"\n"
"This example would modify the content buffer in-place.\n"
"\n"
"If an argument is passed it will setup the content to reference some "
"external source. The content() and add_content() methods will automatically "
"dereference scalar references passed this way. For other references "
"content() will return the reference itself and add_content() will refuse to "
"do anything. \n"
"* $mess->content_charset\n"
"\n"
"This returns the charset used by the content in the message. The charset is "
"either found as the charset attribute of the 'Content-Type' header or by "
"guessing.\n"
"\n"
"See http://www.w3.org/TR/REC-html40/charset.html#spec-char-encoding for "
"details about how charset is determined. \n"
"* $mess->decoded_content( %options )\n"
"\n"
"Returns the content with any 'Content-Encoding' undone and for textual "
"content the raw content encoded to Perl's Unicode strings. If the 'Content-"
"Encoding' or 'charset' of the message is unknown this method will fail by "
"returning 'undef'.\n"
"\n"
"The following options can be specified.\n"
"\n"
"  * 'charset'\n"
"\n"
"This override the charset parameter for text content. The value 'none' can "
"used to suppress decoding of the charset.\n"
"\n"
"  * 'default_charset'\n"
"\n"
"This override the default charset guessed by content_charset() or if that "
"fails \"ISO-8859-1\".\n"
"\n"
"  * 'alt_charset'\n"
"\n"
"If decoding fails because the charset specified in the Content-Type header "
"isn't recognized by Perl's Encode module, then try decoding using this "
"charset instead of failing. The 'alt_charset' might be specified as 'none' "
"to simply return the string without any decoding of charset as alternative.\n"
"\n"
"  * 'charset_strict'\n"
"\n"
"Abort decoding if malformed characters is found in the content. By default "
"you get the substitution character (\"\\x{FFFD}\") in place of malformed "
"characters.\n"
"\n"
"  * 'raise_error'\n"
"\n"
"If TRUE then raise an exception if not able to decode content. Reason might "
"be that the specified 'Content-Encoding' or 'charset' is not supported. If "
"this option is FALSE, then decoded_content() will return 'undef' on errors, "
"but will still set $@.\n"
"\n"
"  * 'ref'\n"
"\n"
"If TRUE then a reference to decoded content is returned. This might be more "
"efficient in cases where the decoded content is identical to the raw content "
"as no data copying is required in this case. \n"
"* $mess->decodable \n"
"* HTTP::Message::decodable()\n"
"\n"
"This returns the encoding identifiers that decoded_content() can process. In "
"scalar context returns a comma separated string of identifiers.\n"
"\n"
"This value is suitable for initializing the 'Accept-Encoding' request header "
"field. \n"
"* $mess->decode\n"
"\n"
"This method tries to replace the content of the message with the decoded "
"version and removes the 'Content-Encoding' header. Returns TRUE if "
"successful and FALSE if not.\n"
"\n"
"If the message does not have a 'Content-Encoding' header this method does "
"nothing and returns TRUE.\n"
"\n"
"Note that the content of the message is still bytes after this method has "
"been called and you still need to call decoded_content() if you want to "
"process its content as a string. \n"
"* $mess->encode( $encoding, ... )\n"
"\n"
"Apply the given encodings to the content of the message. Returns TRUE if "
"successful. The \"identity\" (non-)encoding is always supported; other "
"currently supported encodings, subject to availability of required "
"additional modules, are \"gzip\", \"deflate\", \"x-bzip2\" and \"base64\".\n"
"\n"
"A successful call to this function will set the 'Content-Encoding' header.\n"
"\n"
"Note that 'multipart/*' or 'message/*' messages can't be encoded and this "
"method will croak if you try. \n"
"* $mess->parts \n"
"* $mess->parts( @parts ) \n"
"* $mess->parts( \\@parts )\n"
"\n"
"Messages can be composite, i.e. contain other messages. The composite "
"messages have a content type of 'multipart/*' or 'message/*'. This method "
"give access to the contained messages.\n"
"\n"
"The argumentless form will return a list of 'HTTP::Message' objects. If the "
"content type of $msg is not 'multipart/*' or 'message/*' then this will "
"return the empty list. In scalar context only the first object is returned. "
"The returned message parts should be regarded as read-only (future versions "
"of this library might make it possible to modify the parent by modifying the "
"parts).\n"
"\n"
"If the content type of $msg is 'message/*' then there will only be one part "
"returned.\n"
"\n"
"If the content type is 'message/http', then the return value will be either "
"an 'HTTP::Request' or an 'HTTP::Response' object.\n"
"\n"
"If a @parts argument is given, then the content of the message will be "
"modified. The array reference form is provided so that an empty list can be "
"provided. The @parts array should contain 'HTTP::Message' objects. The "
"@parts objects are owned by $mess after this call and should not be modified "
"or made part of other messages.\n"
"\n"
"When updating the message with this method and the old content type of $mess "
"is not 'multipart/*' or 'message/*', then the content type is set to "
"'multipart/mixed' and all other content headers are cleared.\n"
"\n"
"This method will croak if the content type is 'message/*' and more than one "
"part is provided. \n"
"* $mess->add_part( $part )\n"
"\n"
"This will add a part to a message. The $part argument should be another "
"'HTTP::Message' object. If the previous content type of $mess is not "
"'multipart/*' then the old content (together with all content headers) will "
"be made part #1 and the content type made 'multipart/mixed' before the new "
"part is added. The $part object is owned by $mess after this call and should "
"not be modified or made part of other messages.\n"
"\n"
"There is no return value. \n"
"* $mess->clear\n"
"\n"
"Will clear the headers and set the content to the empty string. There is no "
"return value \n"
"* $mess->protocol \n"
"* $mess->protocol( $proto )\n"
"\n"
"Sets the HTTP protocol used for the message. The protocol() is a string like "
"'HTTP/1.0' or 'HTTP/1.1'. \n"
"* $mess->clone\n"
"\n"
"Returns a copy of the message object. \n"
"* $mess->as_string \n"
"* $mess->as_string( $eol )\n"
"\n"
"Returns the message formatted as a single string.\n"
"\n"
"The optional $eol parameter specifies the line ending sequence to use. The "
"default is \"\\n\". If no $eol is given then as_string will ensure that the "
"returned string is newline terminated (even when the message content is "
"not). No extra newline is appended if an explicit $eol is passed. \n"
"* $mess->dump( %opt )\n"
"\n"
"Returns the message formatted as a string. In void context print the "
"string.\n"
"\n"
"This differs from '$mess->as_string' in that it escapes the bytes of the "
"content so that it's safe to print them and it limits how much content to "
"print. The escapes syntax used is the same as for Perl's double quoted "
"strings. If there is no content the string \"(no content)\" is shown in its "
"place.\n"
"\n"
"Options to influence the output can be passed as key/value pairs. The "
"following options are recognized:\n"
"\n"
"  * maxlength => $num\n"
"\n"
"How much of the content to show. The default is 512. Set this to 0 for "
"unlimited.\n"
"\n"
"If the content is longer then the string is chopped at the limit and the "
"string \"...\\n(### more bytes not shown)\" appended.\n"
"\n"
"  * no_content => $str\n"
"\n"
"Replaces the \"(no content)\" marker.\n"
"\n"
"  * prefix => $str\n"
"\n"
"A string that will be prefixed to each line of the dump.\n"
"\n"
"All methods unknown to 'HTTP::Message' itself are delegated to the 'HTTP::"
"Headers' object that is part of every message. This allows convenient access "
"to these methods. Refer to HTTP::Headers for details of these methods:\n"
"\n"
"    $mess->header( $field => $val )     $mess->push_header( $field => "
"$val )     $mess->init_header( $field => $val )     $mess-"
">remove_header( $field )     $mess->remove_content_headers     $mess-"
">header_field_names     $mess->scan( \\&doit )\n"
"\n"
"    $mess->date     $mess->expires     $mess->if_modified_since     $mess-"
">if_unmodified_since     $mess->last_modified     $mess->content_type     "
"$mess->content_encoding     $mess->content_length     $mess-"
">content_language     $mess->title     $mess->user_agent     $mess-"
">server     $mess->from     $mess->referer     $mess->www_authenticate     "
"$mess->authorization     $mess->proxy_authorization     $mess-"
">authorization_basic     $mess->proxy_authorization_basic"
msgstr ""
"'HTTP::Message' オブジェクトには、いくつかのヘッダと内容が含まれています。下記のようなメソッドを利用することができます:\n"
"* $mess = HTTP::Message->new\n"
"* $mess = HTTP::Message->new( $headers )\n"
"* $mess = HTTP::Message->new( $headers, $content )\n"
"\n"
"  これらのメソッドは、いずれも新しいメッセージオブジェクトを作成します。通常はこのオブジェクトを直接作成することはなく、 'HTTP::"
"Request' または 'HTTP::Response' オブジェクトを作成します。\n"
"\n"
"  オプションで指定することのできる $header パラメータは、 'HTTP::Headers' "
"オブジェクトに対する参照を指定することができるほか、純粋にキーと値の対を持つ配列参照を指定することもできます。なお、 'HTTP::Headers' オブ"
"ジェクトを指定した場合は、オブジェクトをコピーして保持するようになります。つまり、指定したオブジェクトは、メッセージに影響することなく後から利用できること"
"になります。\n"
"\n"
"  また、オプションで指定できる $content は、バイトデータの文字列を指定します。\n"
"* $mess = HTTP::Message->parse( $str )\n"
"\n"
"  このメソッドは、指定された文字列を処理して新しいメッセージオブジェクトを作成します。\n"
"* $mess->headers\n"
"\n"
"  取り込まれている 'HTTP::Headers' オブジェクトを返します。n\n"
"* $mess->headers_as_string\n"
"* $mess->headers_as_string( $eol )\n"
"\n"
"  メッセージ内のヘッダに対して as_string() を呼び出します。下記のメソッドと同じ意味になります:\n"
"\n"
"      $mess->headers->as_string\n"
"\n"
"  ただし、 header_as_string のほうが幾分記述する文字数が少なくできます :-)\n"
"* $mess->content\n"
"* $mess->content( $bytes )\n"
"\n"
"  content() メソッドは、パラメータが指定されていた場合はその内容をそのまま保存します。何もパラメータが指定されていない場合は、内容は変更されま"
"せん。いずれの場合も、内容のそのままのデータが返されます。\n"
"\n"
"  ただし、内容はバイトデータの文字列であるべきことに注意してください。 Perl における文字列は、バイト範囲外の文字も含めることができてしまいますが、"
"そのような場合は 'Encode' モジュールを利用して、文字列をバイトデータの文字列に変換してください。\n"
"* $mess->add_content( $bytes )\n"
"\n"
"  add_content() メソッドは、現在保存されている内容にデータバイトを追記します。\n"
"* $mess->add_content_utf8( $string )\n"
"\n"
"  add_content_utf8() メソッドは、現在保存されている内容に UTF-8 形式で文字列のバイトデータを追記します。\n"
"* $mess->content_ref\n"
"* $mess->content_ref( \\$bytes )\n"
"\n"
"  content_ref() メソッドは、現在保存されている内容を参照で返します。内容が巨大なサイズである場合、この方法でアクセスしたほうがより効率的に"
"なる場合があります。それは、下記のようにして直接的な操作を実施することができるためです:\n"
"\n"
"    ${$res->content_ref} =~ s/\\bfoo\\b/bar/g;\n"
"\n"
"  上記の例では、内容バッファをその場で修正します。\n"
"\n"
"  パラメータを指定した場合は、その情報に対する参照を保存します。 content(), add_content() "
"メソッドでは、その方法で指定した参照を自動的に外します。その他の参照の場合、 content() は参照それ自身を返すほか、 add_content() "
"はいかなる処理も拒否するようになってしまいます。\n"
"* $mess->content_charset\n"
"\n"
"  このメソッドを実行すると、メッセージ内の内容で使用されている文字セットを返します。文字セットはヘッダ内の 'Content-Type' "
"ヘッダに記されたもののほか、推測で返す場合もあります。\n"
"\n"
"  文字セットの判断について、詳しくは http://www.w3.org/TR/REC-html40/charset.html#spec-char-"
"encoding をお読みください。\n"
"* $mess->decoded_content( %options )\n"
"\n"
"  'Content-Encoding' によるエンコードを実施する前の内容で、かつ Perl の Unicode "
"文字列にエンコードされた生データを返します。メッセージの 'Content-Encoding' および 'charset' がわからない場合、"
"このメソッドは 'undef' を返して失敗を表します。\n"
"\n"
"  下記のオプションを指定することができます。\n"
"  * 'charset'\n"
"\n"
"    このオプションを指定すると、 charset パラメータを上書きすることができます。 'none' "
"を指定すると、文字セットのデコードを行なわなくなります。\n"
"\n"
"  * 'default_charset'\n"
"\n"
"    このオプションを指定すると、 content_charset() で既定の文字セットを推測するようになります。推測が失敗した場合は \"ISO"
"-8859-1\" になります。\n"
"  * 'alt_charset'\n"
"\n"
"    Content-Type ヘッダ内に設定された文字セットが Perl の Encode "
"モジュールで認識されずに失敗した場合、ここで指定した文字セットでデコードを行なうようになります。 'alt_charset' に 'none' "
"を指定すると、代替の文字セットを判断することなく、デコード前の文字列をそのまま返すようになります。\n"
"  * 'charset_strict'\n"
"\n"
"    Abort decoding if malformed characters is found in the content. By     "
"default you get the substitution character (\"\\x{FFFD}\") in place of     "
"malformed characters.\n"
"  * 'raise_error'\n"
"\n"
"    TRUE を指定すると、内容をデコードできない場合に例外を発生させるようになります。いずれの場合も、理由は 'Content-Encoding' "
"または 'charset' が未対応のものであった場合です。 FALSE を指定すると、 decoded_content() はエラー時に "
"'undef' を返すようになりますが、 $@ にも値は設定されます。\n"
"  * 'ref'\n"
"\n"
"    TRUE を指定すると、デコードされた内容の参照を返すようになります。これはデコードされた内容が元々の内容と同じで、データのコピーが不要となるよう"
"な場合により効率的になります。\n"
"* $mess->decodable\n"
"* HTTP::Message::decodable()\n"
"\n"
"  このメソッドは、 decoded_content() が処理することのできる識別子を返します。スカラー形式で、カンマ区切りの複数の識別子が返されます。"
"\n"
"\n"
"  この値は、 'Accept-Encoding' リクエストヘッダを設定する際に便利です。\n"
"* $mess->decode\n"
"\n"
"  このメソッドはメッセージの内容をデコードしたもので置き換え、 'Content-Encoding' ヘッダを削除します。成功した場合は TRUE を、"
"失敗した場合は FALSE を返します。\n"
"\n"
"  メッセージ内に 'Content-Encoding' ヘッダが含まれていない場合、このメソッドは何も実施せずに TRUE を返します。\n"
"\n"
"  ただし、このメッセージを呼び出しても、メッセージの内容がバイトデータのままであることに注意してください。文字列として内容を取り出すには、 "
"decoded_content() を呼び出す必要があります。\n"
"* $mess->encode( $encoding, ... )\n"
"\n"
"  指定したエンコーディングをメッセージの内容に適用します。成功した場合は TRUE を返します。 \"identity\" (何もエンコードしない) "
"指定にも対応しています。その他のエンコーディング、具体的には \"gzip\", \"deflate\", \"x-bzip2\", \"base64\""
" については、それぞれ追加のモジュールが必要となります。\n"
"\n"
"  このメソッドの呼び出しが成功すると、 'Content-Encoding' ヘッダが設定されます。\n"
"\n"
"  なお、 'multipart/*' や 'message/*' のメッセージはエンコードできません。このメソッドを呼び出すと、 croak "
"が実行されます。\n"
"* $mess->parts\n"
"* $mess->parts( @parts )\n"
"* $mess->parts( \\@parts )\n"
"\n"
"  あるメッセージには他のメッセージを包含することができます。包含されたメッセージは 'multipart/*' または 'message/*' の "
"Content-Type が設定されます。このメソッドを利用することで、このような包含メッセージにアクセスすることができます。\n"
"\n"
"  何もパラメータを指定しない場合は、 'HTTP::Message' のリストが返却されます。メッセージの Content-Type が '"
"multipart/*' または 'message/*' のどちらでもない場合、このメソッドは空のリストを返します。スカラーコンテキストの場合は、最初のオ"
"ブジェクトのみを返します。なお、返却されたメッセージのパーツは、読み込み専用で利用すべきものです "
"(このライブラリの将来のバージョンでは、パーツを修正することで元のオブジェクトを修正できるようになる予定です) 。\n"
"\n"
"  メッセージの Content-Type が 'message/*' である場合、 1 つのパートのみがあるものとみなされて返されます。\n"
"\n"
"  Content-Type が 'message/http' である場合、返却される値は 'HTTP::Request' または 'HTTP::"
"Response' オブジェクトのいずれかになります。\n"
"\n"
"  @parts パラメータを指定した場合は、メッセージの内容を修正します。配列の参照で指定する場合は、空のリストも設定することができます。 @"
"parts 配列は 'HTTP::Message' のオブジェクトを含んでいるべきです。 @parts "
"で指定したオブジェクトは、このコール実行後に占有されることになりますので、後から変更したり他のメッセージの一部にしたりすべきではありません。\n"
"\n"
"  このメソッドを利用してメッセージを更新していて、古いほうの内容の Content-Type が 'multipart/*' または 'message/"
"*' のいずれでもない場合、 Content-Type は 'multipart/mixed' に設定され、その他のすべての Content "
"ヘッダが消去されます。\n"
"\n"
"  Content-Type が 'message/*' であり、 1 つ以上のパーツを指定した場合には croak が実行されます。\n"
"* $mess->add_part( $part )\n"
"\n"
"  このメソッドを実行すると、 $part をメッセージに追加します。 $part パラメータは他の 'HTTP::Message' "
"オブジェクトであるべきです。メッセージの Content-Type が 'multipart/*' でない場合、古い内容 (および内容関連のヘッダ) "
"はパート #1 として設定され、新しいパートを追加する前に Content-Type が 'multipart/mixed' に設定されます。 $"
"part で指定したオブジェクトは、このコール実行後に占有されることになりますので、後から変更したり他のメッセージの一部にしたりすべきではありません。\n"
"\n"
"  このメソッドは何も値を返しません。\n"
"* $mess->clear\n"
"\n"
"  ヘッダを消去し、内容を空の文字列に設定します。このメソッドは何も値を返しません。\n"
"* $mess->protocol\n"
"* $mess->protocol( $proto )\n"
"\n"
"  メッセージで使用する HTTP プロトコルを指定します。 'HTTP/1.0' や 'HTTP/1.1' のような文字列を指定します。\n"
"* $mess->clone\n"
"\n"
"  メッセージオブジェクトのコピーを返します。\n"
"* $mess->as_string\n"
"* $mess->as_string( $eol )\n"
"\n"
"  単一の文字列に変換してメッセージを返します。\n"
"\n"
"  オプションの $eol パラメータを指定すると、使用すべき行末文字を設定することができます。既定値は \"\\n"
"\" で、何も $eol を指定しない場合は、この既定値を行末の区切りとします (メッセージの内容がそうでなくても) 。明示的に $eol "
"を指定すると、その文字を行末の区切りとします。\n"
"* $mess->dump( %opt )\n"
"\n"
"  メッセージを文字列に変換して返します。\n"
"\n"
"  '$mess->as_string' との違いは内容の処理方法にあります。このメソッドでは、安全に表示できない文字をエスケープ処理するほか、表示する最"
"大の長さを指定することもできます。エスケープ処理は、 Perl の二重引用符内でのものと同じ方式です。何も内容が設定されていない場合は、 \"(no "
"content)\" と表示されます。\n"
"\n"
"  キー／値の対で、オプションパラメータを指定することもできます。それぞれ下記のオプションに対応しています:\n"
"  * maxlength => $num\n"
"\n"
"    表示すべき内容の最大長を指定します。既定値は 512 で、 0 を指定すると無制限になります。\n"
"\n"
"    内容がこの値よりも長い場合は、文字列がそこで切られて、末尾に \"...\\n"
"(### more bytes not shown)\" が付加されます。\n"
"  * no_content => $str\n"
"\n"
"    \"(no content)\" の置き換えを指定します。\n"
"  * prefix => $str\n"
"\n"
"    各ダンプ行の冒頭に、指定した文字列を表示します。\n"
"\n"
"なお、 'HTTP::Message' 自身で理解できないすべてのメソッドは、各メッセージにある 'HTTP::Headers' "
"オブジェクトに転送されます。これにより、メソッドにアクセスしやすく作られています。下記のメソッドについての詳細は、 HTTP::Headers "
"のマニュアルページをお読みください:\n"
"\n"
"    $mess->header( $field => $val )     $mess->push_header( $field => $val )"
"     $mess->init_header( $field => $val )     $mess->remove_header( $field )"
"     $mess->remove_content_headers     $mess->header_field_names     "
"$mess->scan( \\&doit )\n"
"\n"
"    $mess->date     $mess->expires     $mess->if_modified_since     $mess-"
">if_unmodified_since     $mess->last_modified     $mess->content_type     "
"$mess->content_encoding     $mess->content_length     $mess-"
">content_language     $mess->title     $mess->user_agent     $mess-"
">server     $mess->from     $mess->referer     $mess->www_authenticate     "
"$mess->authorization     $mess->proxy_authorization     $mess-"
">authorization_basic     $mess->proxy_authorization_basic"

#. leap/perl-HTTP-MultiPartParser/summary
msgid "HTTP MultiPart Parser"
msgstr "HTTP マルチパートパーサ"

#. leap/perl-HTTP-MultiPartParser/description
msgid ""
"This class provides a low-level API for processing MultiPart MIME data "
"streams conforming to MultiPart types as defined in at http://tools.ietf.org/"
"html/rfc2616#section-3.7.2."
msgstr ""
"このクラスは http://tools.ietf.org/html/rfc2616#section-3.7.2 で MultiPart タ"
"イプとして規定されているマルチパート型の MIME データストリームを処理するため"
"の低レベル API を提供しています。"

#. leap/perl-HTTP-Negotiate/summary
msgid "choose a variant to serve"
msgstr "HTTP Content Negotiation 仕様の実装"

#. leap/perl-HTTP-Negotiate/description
msgid ""
"This module provides a complete implementation of the HTTP content "
"negotiation algorithm specified in _draft-ietf-http-v11-spec-00.ps_ chapter "
"12. Content negotiation allows for the selection of a preferred content "
"representation based upon attributes of the negotiable variants and the "
"value of the various Accept* header fields in the request.\n"
"\n"
"The variants are ordered by preference by calling the function choose().\n"
"\n"
"The first parameter is reference to an array of the variants to choose "
"among. Each element in this array is an array with the values [$id, $qs, "
"$content_type, $content_encoding, $charset, $content_language, "
"$content_length] whose meanings are described below. The $content_encoding "
"and $content_language can be either a single scalar value or an array "
"reference if there are several values.\n"
"\n"
"The second optional parameter is either a HTTP::Headers or a HTTP::Request "
"object which is searched for \"Accept*\" headers. If this parameter is "
"missing, then the accept specification is initialized from the CGI "
"environment variables HTTP_ACCEPT, HTTP_ACCEPT_CHARSET, HTTP_ACCEPT_ENCODING "
"and HTTP_ACCEPT_LANGUAGE.\n"
"\n"
"In an array context, choose() returns a list of [variant identifier, "
"calculated quality, size] tuples. The values are sorted by quality, highest "
"quality first. If the calculated quality is the same for two variants, then "
"they are sorted by size (smallest first). _E.g._:\n"
"\n"
"  (['var1', 1, 2000], ['var2', 0.3, 512], ['var3', 0.3, 1024]);\n"
"\n"
"Note that also zero quality variants are included in the return list even if "
"these should never be served to the client.\n"
"\n"
"In a scalar context, it returns the identifier of the variant with the "
"highest score or 'undef' if none have non-zero quality.\n"
"\n"
"If the $HTTP::Negotiate::DEBUG variable is set to TRUE, then a lot of noise "
"is generated on STDOUT during evaluation of choose()."
msgstr ""
"このモジュールは、 _draft-ietf-http-v11-spec-00.ps_ 内の第 12 章 \"12. "
"Content negotiation\" として規定された、 HTTP content negotiation アルゴリズ"
"ムを実装したものです。この仕組みにより、クライアントからネゴシエーションとし"
"て送信された変数 (属性) やリクエスト内の Accept* ヘッダの内容を元に、サーバ側"
"で必要なコンテンツを選択する機能を提供します。\n"
"\n"
"複数のコンテンツは、 choose() 関数を呼び出すことで優先順位を指定することがで"
"きます。\n"
"\n"
"最初のパラメータには、選択範囲のコンテンツを示す、配列への参照を指定しま"
"す。\n"
"配列内の各要素はさらなる配列になっていて、 [$id, $qs, $content_type, "
"$content_encoding, $charset, $content_language, $content_length] を指定しま"
"す。$content_encoding と $content_language は単一のスカラー値を指定できるほ"
"か、複数の値がありうる場合は配列を指定することもできます。\n"
"\n"
"2 つめのパラメータは HTTP::Headers または HTTP::Request のオブジェクト"
"で、\"Accept*\" ヘッダを検索するためのものです。このパラメータの指定を省略す"
"ると、CGI 用の環境変数である HTTP_ACCEPT, HTTP_ACCEPT_CHARSET, "
"HTTP_ACCEPT_ENCODING, HTTP_ACCEPT_LANGUAGE の各変数から、 accept の値を設定し"
"ます。\n"
"\n"
"choose() の返り値を配列として見た場合、 [variant identifier, calculated "
"quality, size] のリストになっています。これらの値は品質順で並べ替えられたもの"
"で、最初の値が最も高い品質値を持つデータになっています。もしも複数の値が同じ"
"品質値が得られた場合は、その中はサイズで並べ替えられます (小さいものが先にな"
"ります) 。たとえば下記のようになります:\n"
"\n"
"  (['var1', 1, 2000], ['var2', 0.3, 512], ['var3', 0.3, 1024]);\n"
"\n"
"ここで、品質値が 0 のものは、アルゴリズム上クライアント側に返却されるべきでは"
"ないにも関わらず、返却される配列にはそれらが含まれることに注意してくださ"
"い。\n"
"\n"
"スカラー値として見た場合は、最も高い品質値を持つ要素の識別子になっています。"
"0 より大きいものがない場合は、 'undef' になります。\n"
"\n"
"また、 $HTTP::Negotiate::DEBUG 変数が TRUE に設定されている場合、 choose() の"
"処理を行なう際には、 STDOUT に多数の出力が生成されます。"

#. leap/perl-HTTP-Parser-XS/summary
msgid "Fast, Primitive Http Request Parser"
msgstr "高速で原始的な HTTP リクエストパーサー"

#. leap/perl-HTTP-Parser-XS/description
msgid ""
"HTTP::Parser::XS is a fast, primitive HTTP request/response parser.\n"
"\n"
"The request parser can be used either for writing a synchronous HTTP server "
"or a event-driven server.\n"
"\n"
"The response parser can be used for writing HTTP clients.\n"
"\n"
"Note that even if this distribution name ends '::XS', *pure Perl* "
"implementation is supported, so you can use this module on compiler-less "
"environments."
msgstr ""
"HTTP::Parser::XS は高速で原始的な HTTP リクエスト／レスポンスパーサーです。\n"
"\n"
"リクエストパーサーは、同期型もしくはイベント駆動型の HTTP サーバを作成する際"
"に利用することができます。\n"
"\n"
"レスポンスパーサーは HTTP クライアントを作成する際に利用することができま"
"す。\n"
"\n"
"なお、ディストリビューション名が '::XS' で終わっていますが、　*Perl のみでの"
"* 実装にも対応しています。そのため、このモジュールをコンパイラ無しの環境で利"
"用することも可能です。"

#. leap/perl-HTTP-Request-AsCGI/summary
msgid "Set up a CGI environment from an HTTP::Request"
msgstr "HTTP::Request からの CGI 環境のセットアップ"

#. leap/perl-HTTP-Request-AsCGI/description
msgid ""
"Provides a convenient way of setting up an CGI environment from an HTTP::"
"Request."
msgstr ""
"HTTP::Request から CGI 環境をセットするのに必要な、便利な機能を提供します。"

#. leap/perl-HTTP-Server-Simple/summary
msgid "Lightweight HTTP server"
msgstr "軽量 HTTP サーバ"

#. leap/perl-HTTP-Server-Simple/description
msgid ""
"This is a simple standalone HTTP server. By default, it doesn't thread or "
"fork. It does, however, act as a simple frontend which can be used to build "
"a standalone web-based application or turn a CGI into one.\n"
"\n"
"It is possible to use Net::Server classes to create forking, pre-forking, "
"and other types of more complicated servers; see net_server.\n"
"\n"
"By default, the server traps a few signals: \n"
"* HUP\n"
"\n"
"When you 'kill -HUP' the server, it lets the current request finish being "
"processed, then uses the 'restart' method to re-exec itself. Please note "
"that in order to provide restart-on-SIGHUP, HTTP::Server::Simple sets a "
"SIGHUP handler during initialisation. If your request handling code forks "
"you need to make sure you reset this or unexpected things will happen if "
"somebody sends a HUP to all running processes spawned by your app (e.g. by "
"\"kill -HUP <script>\") \n"
"* PIPE\n"
"\n"
"If the server detects a broken pipe while writing output to the client, it "
"ignores the signal. Otherwise, a client closing the connection early could "
"kill the server."
msgstr ""
"これは単独で動作するシンプルな HTTP サーバです。既定ではスレッドを使用せず、"
"かつ fork も行ないません。しかしながら、単独の Web ベースのアプリケーションを"
"構築したり、 CGI を利用したりするのに便利なフロントエンドです。\n"
"\n"
"fork や pre-fork のほか、より複雑なサーバを構築したい場合は、 Net::Server ク"
"ラスを利用することもできます。詳しくは net_server をお読みください。\n"
"\n"
"既定では、サーバは下記のシグナルをトラップします:\n"
"* HUP\n"
"\n"
"  サーバを 'kill -HUP' すると、現在処理中のリクエストを処理してから、再起動の"
"ために 'restart' メソッドが呼び出されます。ただし、 SIGHUP 時に再起動するため"
"に、 HTTP::Server::Simple では起動時にのみ SIGHUP ハンドラを設定しています。"
"お使いのリクエスト処理コードが fork を利用している場合は、これをリセットする"
"必要があることに注意してください。リセットを行なわないと、誰かがスクリプトに"
"対して SIGHUP を送った場合 (例: \"kill -HUP <script>\") に、予期しない結果が"
"発生します。\n"
"* PIPE\n"
"\n"
"  サーバからクライアントに対する出力で broken pipe を検出しても、シグナルは無"
"視されます。無視しておかないと、接続を閉じるだけでサーバが終了してしまいま"
"す。"

#. leap/perl-HTTP-Thin/summary
msgid "A Thin Wrapper around HTTP::Tiny to play nice with HTTP::Message"
msgstr "HTTP::Message をよりよく処理するための HTTP::Tiny に対する薄いラッパー"

#. leap/perl-HTTP-Thin/description
msgid ""
"WARNING: This module is untested beyond the very basics. The implementation "
"is simple enough that it shouldn't do evil things but, yeah it's still not "
"approved for use by small children.\n"
"\n"
"'HTTP::Thin' is a thin wrapper around the HTTP::Tiny manpage adding the "
"ability to pass in the HTTP::Request manpage objects and get back the HTTP::"
"Response manpage objects. The maintainers of the HTTP::Tiny manpage, "
"justifiably, don't want to have to maintain compatibility but many other "
"projects already consume the the HTTP::Message manpage objects. This is just "
"glue code doing what it does best."
msgstr ""
"警告: このモジュールは、ごく基本的なテストを除いて検証が行なわれていません。"
"実装は十分にシンプルですが、うまく動作するかどうかは不透明で、特にお子様のご"
"利用はおやめください。\n"
"\n"
"'HTTP::Thin' は HTTP::Tiny に対する薄いラッパーで、 HTTP::Request オブジェク"
"ト内で渡すことができる機能を追加しているほか、 HTTP::Response オブジェクトを"
"取り出す機能も追加されています。 HTTP::Tiny のメンテナによると、互換性を維持"
"するためのメンテナンスは予定されていないが、他の多数のオブジェクト側で HTTP::"
"Message オブジェクトを利用できるので、そちらを参照してほしいとのことです。こ"
"れは、単純なグルーコードです。"

#. leap/perl-HTTP-Tiny/summary
msgid "Small, Simple, Correct Http/1.1 Client"
msgstr "小さくてシンプル、かつ正しい HTTP/1.1 クライアント"

#. leap/perl-HTTP-Tiny/description
msgid ""
"This is a very simple HTTP/1.1 client, designed for doing simple requests "
"without the overhead of a large framework like LWP::UserAgent.\n"
"\n"
"It is more correct and more complete than HTTP::Lite. It supports proxies "
"and redirection. It also correctly resumes after EINTR.\n"
"\n"
"If IO::Socket::IP 0.25 or later is installed, HTTP::Tiny will use it instead "
"of IO::Socket::INET for transparent support for both IPv4 and IPv6.\n"
"\n"
"Cookie support requires HTTP::CookieJar or an equivalent class."
msgstr ""
"このモジュールは非常にシンプルな HTTP/1.1 クライアントです。 LWP::UserAgent "
"のような巨大なフレームワークのオーパヘッドを避け、シンプルなリクエストを実現"
"できるようになっています。\n"
"\n"
"HTTP::Lite よりはより正しく、かつ完全な機能を実現しています。プロキシや転送に"
"も対応しているほか、 EINTR 後の再開も正しく処理することができます。\n"
"\n"
"IO::Socket::IP バージョン 0.25 もしくはそれ以降のバージョンがインストールされ"
"ている場合、 HTTP::Tiny は IPv4 と IPv6 の両方を透過的にサポートするため、"
"IO::Socket::INET ではなく IO::Socket::IP を使用します。\n"
"\n"
"Cookie への対応は、 HTTP::CookieJar もしくはそれに等価なクラスが必要です。"

#. leap/perl-HTTPS-Daemon/summary
msgid "a simple http server class with SSL support"
msgstr "SSL 対応のシンプルな http サーバクラス"

#. leap/perl-HTTPS-Daemon/description
msgid ""
"HTTP::Daemon::SSL is a descendant of HTTP::Daemon that uses SSL sockets (via "
"IO::Socket::SSL) instead of cleartext sockets.  It also handles SSL-specific "
"problems, such as dealing with HTTP clients that attempt to connect to it "
"without using SSL."
msgstr ""
"HTTP::Daemon::SSL は、 SSL ソケット (IO::Socket::SSL 経由) による暗号化を使用"
"する  HTTP::Daemon の子クラスです。 このクラスは、 SSL 固有の問題も処理しま"
"す。たとえば SSL を使用しないで 接続しようとするクライアントへの対応などがあ"
"ります。"

#. leap/perl-Hash-Merge/summary
msgid "Merges arbitrarily deep hashes into a single hash"
msgstr "任意の複数のハッシュを単一のハッシュに置き換えるモジュール"

#. leap/perl-Hash-Merge/description
msgid ""
"Hash::Merge merges two arbitrarily deep hashes into a single hash. That is, "
"at any level, it will add non-conflicting key-value pairs from one hash to "
"the other, and follows a set of specific rules when there are key value "
"conflicts (as outlined below). The hash is followed recursively, so that "
"deeply nested hashes that are at the same level will be merged when the "
"parent hashes are merged. *Please note that self-referencing hashes, or "
"recursive references, are not handled well by this method.*\n"
"\n"
"Values in hashes are considered to be either ARRAY references, HASH "
"references, or otherwise are treated as SCALARs. By default, the data passed "
"to the merge function will be cloned using the Clone module; however, if "
"necessary, this behavior can be changed to use as many of the original "
"values as possible. (See 'set_clone_behavior')."
msgstr ""
"Hash::Merge は 2 つの深いハッシュを 1 つに合成します。これは、どのレベルで"
"も、一方のハッシュから他方のハッシュに対して、矛盾のないキー／値のペアを追加"
"し、何らかのキー／値の矛盾が発生した場合に、特定のルールセットに従うというモ"
"ジュールです。ハッシュは再帰的に追跡することができるため、同じレベルで入れ子"
"になった深いハッシュ同士を、親のハッシュを合成して実現することができます。 *"
"ただし、自己参照型のハッシュや、再帰的な参照については、このメソッドで正しく"
"処理することができません。 *\n"
"\n"
"ハッシュ内の値は配列への参照かハッシュの参照、もしくは単にスカラー値として考"
"えることができます。既定では、合成関数に渡されたデータは Clone モジュールで複"
"製されます; しかしながら、必要であればこの動作を変更して、できる限り元の値と"
"同じだけ多く変更することもできます ('set_clone_behavior' をご覧ください) 。"

#. leap/perl-Hash-Merge-Simple/summary
msgid "Recursively merge two or more hashes, simply"
msgstr "2 つもしくはそれ以上のハッシュのシンプルな再帰的合成"

#. leap/perl-Hash-Merge-Simple/description
msgid ""
"Hash::Merge::Simple will recursively merge two or more hashes and return the "
"result as a new hash reference. The merge function will descend and merge "
"hashes that exist under the same node in both the left and right hash, but "
"doesn't attempt to combine arrays, objects, scalars, or anything else. The "
"rightmost hash also takes precedence, replacing whatever was in the left "
"hash if a conflict occurs.\n"
"\n"
"This code was pretty much taken straight from the Catalyst::Utils manpage, "
"and modified to handle more than 2 hashes at the same time."
msgstr ""
"Hash::Merge::Simple は 2 つまたはそれ以上のハッシュを再帰的に合成し、新しい"
"ハッシュ参照として返します。合成関数は、一方と他方のハッシュ内の同じノードに"
"属するハッシュを展開して合成しますが、配列やオブジェクトなどは組み合わせたり"
"はしないようになっています。衝突が発生した場合は一番右側のハッシュがもっとも"
"優先され、左側のハッシュを置き換えます。\n"
"\n"
"このコードは Catalyst:Utils の考え方を直接取り入れていて、同時に 2 つ以上の"
"ハッシュを処理できるように修正されています。"

#. leap/perl-Hash-MoreUtils/summary
msgid "Provide the stuff missing in Hash::Util"
msgstr "Hash::Util で提供されていない機能の提供"

#. leap/perl-Hash-MoreUtils/description
msgid ""
"Similar to List::MoreUtils, 'Hash::MoreUtils' contains trivial but commonly-"
"used functionality for hashes. The primary focus for the moment is providing "
"a common API - speeding up by XS is far away at the moment."
msgstr ""
"List::MoreUtils と同様に、 'Hash::MoreUtils' では些細なものながらよく使用され"
"るハッシュ向け機能が含まれています。現時点では一般的な API を提供することを目"
"的とし、 XS による高速化は遠い将来の目標となっています。"

#. leap/perl-Hash-MultiValue/summary
msgid "Store multiple values per key"
msgstr "キーごとの多値の格納"

#. leap/perl-Hash-MultiValue/description
msgid ""
"Hash::MultiValue is an object (and a plain hash reference) that may contain "
"multiple values per key, inspired by MultiDict of WebOb."
msgstr ""
"Hash::MultiValue はキーごとに複数の値を含めることのできるオブジェクト (および"
"単純なハッシュ参照) です。 WebOb の MultiDict にヒントを得て作られています。"

#. leap/perl-Hash-Util-FieldHash-Compat/summary
msgid "Use Hash::Util::FieldHash or ties, depending on availability"
msgstr "状況に応じて Hash::Util::FieldHash またはタイを使用するモジュール"

#. leap/perl-Hash-Util-FieldHash-Compat/description
msgid ""
"Under older perls this module provides a drop-in compatible API to Hash::"
"Util::FieldHash using perltie. When Hash::Util::FieldHash is available it "
"will use that instead.\n"
"\n"
"This way code requiring field hashes can benefit from fast, robust field "
"hashes on Perl 5.10 and newer, but still run on older perls that don't ship "
"with that module.\n"
"\n"
"See Hash::Util::FieldHash for all the details of the API."
msgstr ""
"古いバージョンの Perl に対しては、このモジュールは perltie を利用して Hash::"
"Util::FieldHash 互換の API を提供する仕組みです。 Hash::Util::FieldHash が利"
"用できる場合は、そちらを利用します。\n"
"\n"
"この方法により、フィールドハッシュが必要なコードは、 Perl 5.10 もしくはそれ以"
"降のバージョンでこのモジュールを利用することで、高速かつ屈強なフィールドハッ"
"シュを利用できるようになりますが、古いバージョンの Perl でも動作するようにす"
"ることができます。\n"
"\n"
"API の詳細について、詳しくは Hash::Util::FieldHash をお読みください。"

#. leap/perl-Hook-LexWrap/summary
msgid "Lexically scoped subroutine wrappers"
msgstr "文法スコープ付きのサブルーチンラッパー"

#. leap/perl-Hook-LexWrap/description
msgid ""
"Hook::LexWrap allows you to install a pre- or post-wrapper (or both) around "
"an existing subroutine. Unlike other modules that provide this capacity (e."
"g. Hook::PreAndPost and Hook::WrapSub), Hook::LexWrap implements wrappers in "
"such a way that the standard 'caller' function works correctly within the "
"wrapped subroutine.\n"
"\n"
"To install a prewrappers, you write:\n"
"\n"
"        use Hook::LexWrap;\n"
"\n"
"        wrap 'subroutine_name', pre => \\&some_other_sub;\n"
"\n"
"   \n"
"\n"
"The first argument to 'wrap' is a string containing the name of the "
"subroutine to be wrapped (or the typeglob containing it, or a reference to "
"it). The subroutine name may be qualified, and the subroutine must already "
"be defined. The second argument indicates the type of wrapper being applied "
"and must be either ''pre'' or ''post''. The third argument must be a "
"reference to a subroutine that implements the wrapper.\n"
"\n"
"To install a post-wrapper, you write:\n"
"\n"
"        wrap 'subroutine_name', post => \\&yet_another_sub;\n"
"\n"
"   \n"
"\n"
"To install both at once:\n"
"\n"
"        wrap 'subroutine_name',              pre  => "
"\\&some_other_sub,              post => \\&yet_another_sub;\n"
"\n"
"or:\n"
"\n"
"        wrap *subroutine_name,              post => \\&yet_another_sub,  # "
"order in which wrappers are              pre  => \\&some_other_sub;   # "
"specified doesn't matter\n"
"\n"
"Once they are installed, the pre- and post-wrappers will be called before "
"and after the subroutine itself, and will be passed the same argument list.\n"
"\n"
"The pre- and post-wrappers and the original subroutine also all see the same "
"(correct!) values from 'caller' and 'wantarray'."
msgstr ""
"Hook::LexWrap は既存のサブルーチンに対して、事前もしくは事後 (もしくはその両"
"方) に対して適用されるラッパーをインストールすることができる仕組みです。同様"
"の機能を提供する他のモジュール (Hook::PreAndPost や Hook::WrapSub) とは異な"
"り、 Hook:LexWrap はラッパーを実装しているため、ラップされたサブルーチン内で"
"標準の 'caller' 関数が正しく動作します。\n"
"\n"
"事前ラッパーをインストールするには、下記のように記述します:\n"
"\n"
"        use Hook::LexWrap;\n"
"\n"
"        wrap 'subroutine_name', pre => \\&some_other_sub;\n"
"\n"
"   \n"
"\n"
"'wrap' に対する最初のパラメータには、ラッピングを実施したいサブルーチンの名前"
"を文字列で指定します (タイプグロブもしくは参照でもかまいません) 。サブルーチ"
"ンは修飾済みであってもかまいませんが、サブルーチン自体がすでに存在していなけ"
"ればなりません。 2 番目のパラメータは適用するラッパーの種類を指定します。具体"
"的には \"pre\" (事前) または \"post\" (事後) を指定します。 3 番目のパラメー"
"タは、ラッパーを実装するサブルーチンへの参照を指定します。\n"
"\n"
"事後ラッパーをインストールするには、下記のように記述します:\n"
"\n"
"        wrap 'subroutine_name', post => \\&yet_another_sub;\n"
"\n"
"   \n"
"\n"
"両方を一括でインストールするには、下記のように記述します:\n"
"\n"
"        wrap 'subroutine_name',              pre  => "
"\\&some_other_sub,              post => \\&yet_another_sub;\n"
"\n"
"もしくは下記のように記述します:\n"
"\n"
"        wrap *subroutine_name,              post => \\&yet_another_sub,  # "
"order in which wrappers are              pre  => \\&some_other_sub;   # "
"specified doesn't matter\n"
"\n"
"ラッパーをインストールすると、事前および事後のラッパーが、それぞれサブルーチ"
"ンの呼び出し前後に呼び出されるようになります。また、パラメータリストは同じも"
"のが渡されます。\n"
"\n"
"事前および事後のラッパー、および元のサブルーチンでは、 'caller', 'wantarray' "
"からの値が同じに (かつ正しく！) なります。"

#. leap/perl-IO-All/summary
msgid "IO::All to Larry Wall!"
msgstr "IO::All to Larry Wall!"

#. leap/perl-IO-All/description
msgid ""
"IO::All combines all of the best Perl IO modules into a single nifty object "
"oriented interface to greatly simplify your everyday Perl IO idioms. It "
"exports a single function called 'io', which returns a new IO::All object. "
"And that object can do it all!\n"
"\n"
"The IO::All object is a proxy for IO::File, IO::Dir, IO::Socket, Tie::File, "
"File::Spec, File::Path, File::MimeInfo and File::ReadBackwards; as well as "
"all the DBM and MLDBM modules. You can use most of the methods found in "
"these classes and in IO::Handle (which they inherit from). IO::All adds "
"dozens of other helpful idiomatic methods including file stat and "
"manipulation functions.\n"
"\n"
"IO::All is pluggable, and modules like IO::All::LWP and IO::All::Mailto add "
"even more functionality. Optionally, every IO::All object can be tied to "
"itself. This means that you can use most perl IO builtins on it: readline, "
"'<>', getc, print, printf, syswrite, sysread, close.\n"
"\n"
"The distinguishing magic of IO::All is that it will automatically open (and "
"close) files, directories, sockets and other IO things for you. You never "
"need to specify the mode ('<', '>>', etc), since it is determined by the "
"usage context. That means you can replace this:\n"
"\n"
"    open STUFF, '<', './mystuff'       or die \"Can't open './mystuff' for "
"input:\\n$!\";     local $/;     my $stuff = <STUFF>;     close STUFF;\n"
"\n"
"with this:\n"
"\n"
"    my $stuff < io './mystuff';\n"
"\n"
"And that is a *good thing*!"
msgstr ""
"IO::All は最良の Perl IO モジュール群を 1 つの気の利いたオブジェクト指向のイ"
"ンターフェイスにまとめたもので、日々の Perl IO 処理を非常に簡単に行なうことが"
"できるようにするものです。このモジュールは、 IO::All オブジェクトを返す 'io' "
"と呼ばれる単一の関数を公開し、このオブジェクトからすべてのことを実施すること"
"ができます！\n"
"\n"
"IO::All オブジェクトはそれぞれ IO::File, IO::Dir, IO::Socket, Tie::File, "
"File::Spec, File::Path, File::MimeInfo, File::ReadBackwards のほか、 DBM と "
"MLDBM に対する代理モジュールとしても動作します。これらのクラス内や IO::"
"Handle (派生元) にあるほとんどのメソッドを利用することができます。このほか、 "
"IO::All にはファイルの stat や操作を行なうための慣用的なメソッドも多数用意さ"
"れています。\n"
"\n"
"IO:ALl はプラグイン型のモジュールで、 IO::All::LWP や IO::All::Mailto のよう"
"な追加機能を含むモジュールも用意されています。また、オプションでそれぞれの "
"IO:All オブジェクトは自分自身に結びつけることもできます。これにより、ほとんど"
"の IO 内蔵関数を利用することができるようになります: readline, '<>', getc, "
"print, printf, syswrite, sysread, close\n"
"\n"
"IO:All の魔法のような使い心地としてあげられるのは、自動的にファイルやディレク"
"トリ、ソケットなどの IO を、自動的に開く (および閉じる) ことができる点です。"
"利用情報から自動的に判断する仕組みであるため、モードを指定する必要もありませ"
"ん。たとば下記のようなスクリプトがあったとします:\n"
"\n"
"    open STUFF, '<', './mystuff'       or die \"Can't open './mystuff' for "
"input:\\n$!\";     local $/;     my $stuff = <STUFF>;     close STUFF;\n"
"\n"
"これを、単に下記のように記述することができます:\n"
"\n"
"    my $stuff < io './mystuff';"

#. leap/perl-IO-Async/summary
msgid "Asynchronous event-driven programming"
msgstr "非同期のイベント駆動型プログラミング"

#. leap/perl-IO-Async/description
msgid ""
"This collection of modules allows programs to be written that perform "
"asynchronous filehandle IO operations. A typical program using them would "
"consist of a single subclass of the IO::Async::Loop manpage to act as a "
"container of other objects, which perform the actual IO work required by the "
"program. As well as IO handles, the loop also supports timers and signal "
"handlers, and includes more higher-level functionality built on top of these "
"basic parts.\n"
"\n"
"Because there are a lot of classes in this collection, the following "
"overview gives a brief description of each."
msgstr ""
"このモジュールのコレクションは、プログラムにタイしてファイルハンドルの非同期"
"処理を記述できるようにするためのものです。これを利用する典型的なプログラムで"
"は、 IO::Async::Loop にタイする単一のサブクラスを用意して、プログラム側で必要"
"となる実際の I/O 処理を実施する他のオブジェクトのコンテナとして、動作させる方"
"法があります。 IO ハンドルと同様に、ループではタイマーやシグナルに対応してい"
"るほか、これらの基本パーツ上に高レベルな機能も追加されています。\n"
"\n"
"このコレクションには多数のクラスが存在するしますので、詳しくは下記の概要をお"
"読みください。"

#. leap/perl-IO-CaptureOutput/summary
msgid "Capture STDOUT and STDERR from Perl code, subprocesses or XS"
msgstr ""
"Perl コードやサブプロセス、もしくは XS からの標準出力 (STDOUT) や標準エラー出"
"力 (STDERR) のキャプチャ"

#. leap/perl-IO-CaptureOutput/description
msgid ""
"*This module is no longer recommended by the maintainer* - see the Capture::"
"Tiny manpage instead.\n"
"\n"
"This module provides routines for capturing STDOUT and STDERR from perl "
"subroutines, forked system calls (e.g. 'system()', 'fork()') and from XS or "
"C modules."
msgstr ""
"*このモジュールは、もはやメンテナが推奨していません* - 代わりに Capture::"
"Tiny をご覧ください。\n"
"\n"
"このモジュールは、 Perl のサブルーチンや fork されたシステムコール (例: "
"'system()', 'fork()') のほか、 XS や C モジュールからの標準出力 (STDOUT) およ"
"び標準エラー出力 (STDERR) をキャプチャするためのルーチンを提供します。"

#. leap/perl-IO-Event/summary
msgid "Tied Filehandles for Nonblocking IO with Object Callbacks"
msgstr ""
"オブジェクトコールバック付きの非ブロック I/O のためのタイファイルハンドル"

#. leap/perl-IO-Event/description
msgid ""
"IO::Event provides a object-based callback system for handling nonblocking "
"IO. The design goal is to provide a system that just does the right thing w/"
"o the user needing to think about it much.\n"
"\n"
"All APIs are kept as simple as possible yet at the same time, all "
"functionality is accesible if needed. Simple things are easy. Hard things "
"are possible.\n"
"\n"
"Most of the time file handling syntax will work fine: '<$filehandle>' and "
"'print $filehandle 'stuff''.\n"
"\n"
"IO::Event provides automatic buffering of output (with a callback to "
"throttle). It provides automatic line-at-a-time input.\n"
"\n"
"After initial setup, call 'IO::Event::loop()'.\n"
"\n"
"IO::Event was originally written to use the Event manpage. IO::Event still "
"defaults to using the Event manpage but it can now use the AnyEvent manpage "
"or its own event loop."
msgstr ""
"IO::Event は、非ブロッキング I/O 向けのオブジェクト指向のコールバックシステム"
"を提供します。設計上のゴールは、ユーザがあまり考えることなく、正しいことを行"
"なえるようにすることです。\n"
"\n"
"全ての API はできる限りシンプルであるように作られているほか、同時に全ての機能"
"にアクセスできるようにも作られています。シンプルであれば簡単であり、難しいこ"
"とは可能である、という考え方に基づいています。\n"
"\n"
"なお、ほとんどの場合において、ファイル処理の文法をそのまま利用することができ"
"ます: '<$filehandle>' や 'print $filehandle 'stuff''\n"
"\n"
"IO::Event では、出力の自動バッファにも対応しています (スロットルへのコール"
"バックもあります) 。また、 1 行を一括で入力できる仕組みもあります。\n"
"\n"
"初期設定が完了したら、まずは 'IO::Event::loop()' を呼び出してください。\n"
"\n"
"IO::Event は元々、 Event を使用するように作られており、現在も既定ではこれを使"
"用するようになっていますが、 AnyEvent や独自のループを使用するようにすること"
"もできます。"

#. leap/perl-IO-HTML/summary
msgid "Open an HTML file with automatic charset detection"
msgstr "キャラクタセットを自動検出して HTML ファイルを開くモジュール"

#. leap/perl-IO-HTML/description
msgid ""
"IO::HTML provides an easy way to open a file containing HTML while "
"automatically determining its encoding. It uses the HTML5 encoding sniffing "
"algorithm specified in section 8.2.2.2 of the draft standard.\n"
"\n"
"The algorithm as implemented here is: \n"
"* 1.\n"
"\n"
"  If the file begins with a byte order mark indicating UTF-16LE, UTF-16BE,   "
"or UTF-8, then that is the encoding. \n"
"* 2.\n"
"\n"
"  If the first 1024 bytes of the file contain a '<meta>' tag that "
"indicates   the charset, and Encode recognizes the specified charset name, "
"then that   is the encoding. (This portion of the algorithm is implemented "
"by   'find_charset_in'.)\n"
"\n"
"  The '<meta>' tag can be in one of two formats:\n"
"\n"
"    <meta charset=\"...\">     <meta http-equiv=\"Content-Type\" content="
"\"...charset=...\">\n"
"\n"
"  The search is case-insensitive, and the order of attributes within the   "
"tag is irrelevant. Any additional attributes of the tag are ignored. The   "
"first matching tag with a recognized encoding ends the search. \n"
"* 3.\n"
"\n"
"  If the first 1024 bytes of the file are valid UTF-8 (with at least 1   non-"
"ASCII character), then the encoding is UTF-8. \n"
"* 4.\n"
"\n"
"  If all else fails, use the default character encoding. The HTML5 "
"standard   suggests the default encoding should be locale dependent, but "
"currently   it is always 'cp1252' unless you set '$IO::HTML::"
"default_encoding' to a   different value. Note: 'sniff_encoding' does not "
"apply this step; only   'html_file' does that."
msgstr ""
"IO::HTML は HTML を含むファイルを開くための簡単な方法で、エンコード方式を自動"
"的に判別することができます。 HTML5 のドラフト標準内のセクション 8.2.2.2 で規"
"定されたエンコード検出アルゴリズムを利用しています。\n"
"\n"
"アルゴリズムは下記のように実装されています:\n"
"* 1.\n"
"\n"
"  ファイルの冒頭が UTF-16LE, UTF-16BE, UTF-8 の各バイトオーダーマークであった"
"場合は、そのエンコード方式を採用する。\n"
"* 2.\n"
"\n"
"  ファイルの冒頭 1024 バイト内に '<meta>' タグが含まれていて、そこにキャラク"
"タセットと対応するエンコード方式が書かれている場合、そのエンコード方式を採用"
"する (アルゴリズムのうち、この部分は 'find_charset_in' で実装しています) 。\n"
"\n"
"  '<meta>' タグは下記の 2 つのうちのいずれかの形式であるものとする:\n"
"\n"
"    <meta charset=\"...\">     <meta http-equiv=\"Content-Type\" content="
"\"...charset=...\">\n"
"\n"
"  検索時、大文字と小文字は区別しないほか、タグ内での属性出現順序は気にしない"
"ものとする。また、タグに付けられたその他の属性は無視するものとする。エンコー"
"ドを認識可能な最初のタグが見つかった場合は、その時点で検索を終了する。\n"
"* 3.\n"
"\n"
"  ファイルの冒頭 1024 バイトが UTF-8 として正当なものである (少なくとも 1 文"
"字以上の非 ASCII 文字がある) 場合、エンコード方式を UTF-8 とする。\n"
"* 4.\n"
"\n"
"  これまでの処理のすべてが失敗した場合は、既定の文字エンコード方式を利用す"
"る。HTML5 標準では既定のエンコード方式はロケール依存であるが、 '$IO::HTML::"
"default_encoding' で異なる値を指定していない限り、エンコード方式は常に "
"'cp1252' であるものとみなされる。注意: 'sniff_encoding' は上記までの手順を実"
"施せず、'html_file' のみが上記の手順を実施することに注意すること。"

#. leap/perl-IO-Handle-Util/summary
msgid "Functions for working with L<IO::Handle> like objects"
msgstr "L<IO::Handle> のようなオブジェクトを処理する関数"

#. leap/perl-IO-Handle-Util/description
msgid ""
"This module provides a number of helpful routines to manipulate or create "
"the IO::Handle manpage like objects."
msgstr ""
"このモジュールは、 IO::Handle をオブジェクトのように操作したり、作成したりす"
"るための様々な便利ルーチンを提供しています。"

#. leap/perl-IO-Interactive/summary
msgid "Utilities for interactive I/O"
msgstr "対話型 I/O 向けユーティリティ"

#. leap/perl-IO-Interactive/description
msgid ""
"This module provides three utility subroutines that make it easier to "
"develop interactive applications.\n"
"\n"
"The 'ARGV' filehandle, the one that '<>' or an empty 'readline()' uses, has "
"various magic associated with it. It's not actually opened until you try to "
"read from it. Checking '-t ARGV' before you've tried to read from it might "
"give you the wrong answer. Not only that, you might not read from 'ARGV'. If "
"the value in '@ARGV' is the magic filename '-' (a convention to mean the "
"standard filehandle for input or output), 'ARGV' might actually be 'STDIN'. "
"You don't want to think about all of this. This module is discussed in _Perl "
"Best Practices_ on page 218. Also see the 'ARGV' entry in perlvar and the "
"'readline' entry in perlfunc. \n"
"* 'is_interactive()'\n"
"\n"
"This subroutine returns true if '*ARGV' and the currently selected "
"filehandle (usually '*STDOUT') are connected to the terminal. The test is "
"considerably more sophisticated than:\n"
"\n"
"    -t *ARGV && -t *STDOUT\n"
"\n"
"as it takes into account the magic behaviour of '*ARGV'.\n"
"\n"
"You can also pass 'is_interactive' a writable filehandle, in which case it "
"requires that filehandle be connected to a terminal (instead of the "
"currently selected). The usual suspect here is '*STDERR':\n"
"\n"
"    if ( is_interactive(*STDERR) ) {         carp $warning;     } \n"
"* 'interactive()'\n"
"\n"
"This subroutine returns '*STDOUT' if 'is_interactive' is true. If "
"'is_interactive()' is false, 'interactive' returns a filehandle that does "
"not print.\n"
"\n"
"This makes it easy to create applications that print out only when the "
"application is interactive:\n"
"\n"
"    print {interactive} \"Please enter a value: \";     my $value = <>;\n"
"\n"
"You can also pass 'interactive' a writable filehandle, in which case it "
"writes to that filehandle if it is connected to a terminal (instead of "
"writing to '*STDOUT'). Once again, the usual suspect is '*STDERR':\n"
"\n"
"    print {interactive(*STDERR)} $warning; \n"
"* 'busy {...}'\n"
"\n"
"This subroutine takes a block as its single argument and executes that "
"block. Whilst the block is executed, '*ARGV' is temporarily replaced by a "
"closed filehandle. That is, no input from '*ARGV' is possible in a 'busy' "
"block. Furthermore, any attempts to send input into the 'busy' block through "
"'*ARGV' is intercepted and a warning message is printed to '*STDERR'. The "
"'busy' call returns a filehandle that contains the intercepted input.\n"
"\n"
"A 'busy' block is therefore useful to prevent attempts at input when the "
"program is busy at some non-interactive task."
msgstr ""
"このモジュールは、対話的なアプリケーションを開発しやすくするための 3 種類の"
"ユーティリティサブルーチンを提供しています。\n"
"\n"
"'<>' または空の 'readline()' が使用する 'ARGV' ファイルハンドルには、様々なマ"
"ジックが関連付けられています。実際には、読み取ろうとするまで開かれません。読"
"み取ろうとする前に '-t ARGV' をチェックすると、間違った答えが返ってくる可能性"
"があります。それだけでなく、'ARGV' から読み取らない可能性もあります。'@ARGV' "
"の値がマジックファイル名 '-' (入力または出力用の標準ファイルハンドルを意味す"
"る規約)の場合、'ARGV' は実際には 'STDIN' になる可能性があります。これらをすべ"
"て考慮する必要はありません。このモジュールについては、「Perlベスト・プラク"
"ティス」218 ページで説明しています。また、perlvarの 'ARGV' エントリおよび "
"perlfunc の 'readline' エントリも参照してください。\n"
"* 'is_interactive()'\n"
"\n"
"このサブルーチンは、 '*ARGV' と現在選択されているファイルハンドル (通常は "
"'*STDOUT') が端末に接続されているかどうかを確認し、そうであれば true を返しま"
"す。このテストは下記の方法よりも洗練された仕組みと考えることができます:\n"
"\n"
"    -t *ARGV && -t *STDOUT\n"
"\n"
"また、 '*ARGV' に対する魔法のような処理も含まれています。\n"
"\n"
"このほか、端末に (現在選択されているファイルハンドルではなく) ファイルハンド"
"ルを接続する必要がある場合は、 'is_interactive' に書き込み可能なファイルハン"
"ドルを指定することもできます。たとえば '*STDERR' などを接続することができま"
"す:\n"
"\n"
"    if ( is_interactive(*STDERR) ) {         carp $warning;     }\n"
"* 'interactive()'\n"
"\n"
"このサブルーチンは、 'is_interactive' が true であった場合に、 '*STDOUT' を返"
"します。 'is_interactive' が false であった場合は、何も表示しないファイルハン"
"ドルを返します。\n"
"\n"
"このサブルーチンは、アプリケーション側で対話処理が必要な場合にのみ出力するよ"
"うな仕組みを作るためのものです:\n"
"\n"
"    print {interactive} \"Please enter a value: \";     my $value = <>;\n"
"\n"
"このほか、端末に ('*STDOUT' ではなく) ファイルハンドルを接続する必要がある場"
"合は、 'interactive' に書き込み可能なファイルハンドルを指定することもできま"
"す。たとえば、ここでも '*STDERR' などを接続することができます:\n"
"\n"
"    print {interactive(*STDERR)} $warning;\n"
"* 'busy {...}'\n"
"\n"
"このサブルーチンはブロックを受け付ける仕組みで、 1 つのパラメータをとってブ"
"ロックを実行します。ブロックが実行されている間、 '*ARGV' は一時的に、閉じられ"
"たファイルハンドルに置き換えられます。言い換えると、 'busy' 内のブロックで"
"は、 '*ARGV' からの入力ができなくなります。これに加えて、 '*ARGV' を介して "
"'busy' ブロック内に入力を送信するような仕組みも遮られ、 '*STDERR' に警告メッ"
"セージが表示されるようになります。 'busy' が終了すると、遮られた入力を含む"
"ファイルハンドルを返します。\n"
"\n"
"'busy' ブロックは、何らかの非対話処理を実施する際、プログラム側にデータが入力"
"できないようにするための仕組みです。"

#. leap/perl-IO-Interface/summary
msgid "Perl extension for access to network card configuration information"
msgstr "ネットワークカードの設定情報にアクセスするための Perl 拡張"

#. leap/perl-IO-Interface/description
msgid ""
"IO::Interface adds methods to IO::Socket objects that allows them to be used "
"to retrieve and change information about the network interfaces on your "
"system. In addition to the object-oriented access methods, you can use a "
"function-oriented style.\n"
"\n"
"THIS API IS DEPRECATED. Please see IO::Interface::Simple for the preferred "
"way to get and set interface configuration information."
msgstr ""
"IO::Interface は IO::Socket オブジェクトにメソッドを追加するもので、お使いの"
"システムにあるネットワークインターフェイスに対して、情報を取得したり変更した"
"りする機能を提供します。\n"
"\n"
"この API は廃止される予定です。インターフェイスの設定情報の取得と設定につい"
"て、好ましい方法は IO::Interface::Simple をご覧ください。"

#. leap/perl-IO-Multiplex/summary
msgid "Manage IO on many file handles"
msgstr "多数のファイルハンドルの管理"

#. leap/perl-IO-Multiplex/description
msgid ""
"It is object oriented in design, and will notify you of significant events "
"by calling methods on an object that you supply. If you are not using "
"objects, you can simply supply '__PACKAGE__' instead of an object "
"reference.\n"
"\n"
"You may have one callback object registered for each file handle, or one "
"global one. Possibly both -- the per-file handle callback object will be "
"used instead of the global one.\n"
"\n"
"Each file handle may also have a timer associated with it. A callback "
"function is called when the timer expires."
msgstr ""
"このモジュールはオブジェクト指向の設計になっていて、指定したオブジェクトに対"
"してメソッドを呼び出すことで、必要なイベントの通知を受け取ることができるよう"
"になります。オブジェクトを使用していない場合は、オブジェクトの参照ではなく "
"'__PACKAGE__' を指定することもできます。\n"
"\n"
"各ファイルハンドルに対して 1 つのコールバックオブジェクトを設定できるほか、グ"
"ローバルなコールバックオブジェクトも 1 つだけ設定することができます。おそらく"
"はグローバルなコールバックオブジェクトではなく、ファイルハンドルごとのコール"
"バックオブジェクトのほうが必要でしょう。\n"
"\n"
"各ファイルハンドルにはタイマーを関連づけることもできます。この場合、タイマー"
"の期限が切れるとコールバック関数が呼び出されます。"

#. leap/perl-IO-Pager/summary
msgid "Select a pager (possibly perl-based) & pipe it text if a TTY"
msgstr ""
"ポケベル(Perlベースの場合もあります)を選択し、TTY だった場合にそれをパイプ"

#. leap/perl-IO-Pager/description
msgid ""
"IO::Pager can be used to locate an available pager and set the _PAGER_ "
"environment variable (see NOTES). It is also a factory for creating I/O "
"objects such as IO::Pager::Buffered and IO::Pager::Unbuffered.\n"
"\n"
"IO::Pager subclasses are designed to programmatically decide whether or not "
"to pipe a filehandle's output to a program specified in _PAGER_. Subclasses "
"may implement only the IO handle methods desired and inherit the remainder "
"of those outlined below from IO::Pager. For anything else, YMMV. See the "
"appropriate subclass for implementation specific details."
msgstr ""
"IO::Pager は利用可能なページャを検出して、それを _PAGER_ 環境に設定します (詳"
"しくは /NOTES をお読みください) 。また、 IO::Pager は IO::Pager::Buffered や "
"IO::Pager::Unbuffered のような I/O オブジェクトを作成する際のファクトリとして"
"も機能します。\n"
"\n"
"IO::Pager のサブクラスは、 _PAGER_ に指定したプログラムがファイルハンドルに出"
"力するかどうかを、機械的に判断するよう設計されています。サブクラス側では必要"
"な IO 処理メソッドを実装し、残りは IO::Pager からの継承で賄うこともできます。"
"もちろんそれ以外の方法でもかまいません。実装に関する個別の詳細については、そ"
"れぞれのサブクラスをご覧ください。"

#. leap/perl-IO-Pipely/summary
msgid "Portably create pipe() or pipe-like handles, one way or another."
msgstr ""
"一方向または双方向の pipe() またはパイプに似たハンドルを可搬性のある方法で作"
"成するモジュール"

#. leap/perl-IO-Pipely/description
msgid ""
"Pipes are troublesome beasts because there are a few different, incompatible "
"ways to create them. Not all platforms support all ways, and some platforms "
"may have hidden difficulties like incomplete or buggy support.\n"
"\n"
"IO::Pipely provides a couple functions to portably create one- and two-way "
"pipes and pipe-like socket pairs. It acknowledges and works around known "
"platform issues so you don't have to.\n"
"\n"
"On the other hand, it doesn't work around unknown issues, so please report "
"any problems early and often.\n"
"\n"
"IO::Pipely currently understands pipe(), UNIX-domain socketpair() and "
"regular IPv4 localhost sockets. This covers every platform tested so far, "
"but it's hardly complete. Please help support other mechanisms, such as INET-"
"domain socketpair() and IPv6 localhost sockets.\n"
"\n"
"IO::Pipely will use different kinds of pipes or sockets depending on the "
"operating system's capabilities and the number of directions requested. The "
"autodetection may be overridden by specifying a particular pipe type."
msgstr ""
"パイプはそれを作成する際に様々な方法があり、それらは互換性の無い仕組みである"
"ことから、トラブルの多い代物です。すべてのプラットフォームですべての方法に対"
"応しているというわけでもありませんし。プラットフォームによっては互換性やバグ"
"などの問題を抱えているものもあります。\n"
"\n"
"IO::Pipely は一方向または双方向のパイプ、もしくはパイプに似たソケットペアを、"
"可搬性のある方法で作成する機能群を提供します。また、既知のプラットフォーム上"
"の問題についても回避策が用意されているため、心配する必要もありません。\n"
"\n"
"もしも何らかの未知の問題に直面し、回避策が見つからない場合は、できる限り早急"
"に問題を報告してください。\n"
"\n"
"IO::Pipely は現時点では pipe(), UNIX ドメインの socketpair(), 通常の IPv4 "
"ローカルホストソケットにそれぞれ対応しています。それぞれのプラットフォームで"
"も動作テストが行なわれていますが、すべてのテストを完了するには至っていませ"
"ん。 INET ドメインの socketpair() や IPv6 ローカルホストソケットなど、その他"
"の仕組みへの対応をご支援いただければと考えております。\n"
"\n"
"IO::Pipely は異なる種類のパイプやソケットを利用することができますが、これはオ"
"ペレーティングシステムの機能と、リクエストの多さに依存して作られています。自"
"動検出を行なうこともできますが、特定のパイプタイプを指定することで、検出を上"
"書きすることもできます。"

#. leap/perl-IO-SessionData/summary
msgid "Supporting module for SOAP::Lite"
msgstr "SOAP::Lite 向けのサポートモジュール"

#. leap/perl-IO-SessionData/description
msgid "supporting module for SOAP::Lite"
msgstr "SOAP::Lite サポートモジュール"

#. leap/perl-IO-Socket-INET6/summary
msgid "Object interface for AF_INET/AF_INET6 domain sockets"
msgstr "AF_INET/AF_INET6 ドメインソケット向けオブジェクトインターフェイス"

#. leap/perl-IO-Socket-INET6/description
msgid ""
"IO::Socket::INET6 provides an object interface to creating and using    "
"sockets in either AF_INET or AF_INET6 domains. It is built upon the    IO::"
"Socket interface and inherits all the methods defined by IO::Socket."
msgstr ""
"IO::Socket::INET6 は、 AF_INET と AF_INET6 の両方において、ソケットを作成した"
"り 使用したりするためのオブジェクトインターフェイスを提供します。 IO::Socket "
"インターフェイスを ベースに構築され、このインターフェイスで定義された全てのメ"
"ソッドを継承しています。"

#. leap/perl-IO-Socket-Multicast/summary
msgid "Send and receive multicast messages"
msgstr "マルチキャストメッセージの送信と受信"

#. leap/perl-IO-Socket-Multicast/description
msgid ""
"The IO::Socket::Multicast module subclasses IO::Socket::INET to enable you "
"to manipulate multicast groups. With this module (and an operating system "
"that supports multicasting), you will be able to receive incoming multicast "
"transmissions and generate your own outgoing multicast packets.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Lincoln Stein <lstein@cshl.org>"
msgstr ""
"IO::Socket::Multicast モジュールは IO::Socket::INET のサブクラスで、マルチ"
"キャストグループを処理することができます。このモジュール (とマルチキャストに"
"対応するオペレーティングシステム) を使用することで、マルチキャスト伝送を受信"
"することができるほか、マルチキャストパケットを生成することもできます。\n"
"\n"
"\n"
"\n"
"作者:\n"
"--------     Lincoln Stein <lstein@cshl.org>"

#. leap/perl-IO-Socket-PortState/summary
msgid "Perl extension for checking the open or closed status of a port."
msgstr "ポートが開いているかどうかをチェックするための Perl 拡張"

#. leap/perl-IO-Socket-PortState/description
msgid ""
"You can use it to check if a port is open or closed for a given host and "
"protocol."
msgstr ""
"指定したホストとプロトコルで、ポートが開いているかどうかをチェックすることが"
"できます。"

#. leap/perl-IO-Socket-SSL/summary
msgid "Nearly transparent SSL encapsulation for IO::Socket::INET"
msgstr "IO::Socket::INET に対するほぼ透過的な SSL カプセル化"

#. leap/perl-IO-Socket-SSL/description
msgid ""
"IO::Socket::SSL makes using SSL/TLS much easier by wrapping the necessary "
"functionality into the familiar IO::Socket interface and providing secure "
"defaults whenever possible. This way, existing applications can be made SSL-"
"aware without much effort, at least if you do blocking I/O and don't use "
"select or poll.\n"
"\n"
"But, under the hood, SSL is a complex beast. So there are lots of methods to "
"make it do what you need if the default behavior is not adequate. Because it "
"is easy to inadvertently introduce critical security bugs or just hard to "
"debug problems, I would recommend studying the following documentation "
"carefully.\n"
"\n"
"The documentation consists of the following parts: \n"
"* * \"Essential Information About SSL/TLS\" \n"
"* * \"Basic SSL Client\" \n"
"* * \"Basic SSL Server\" \n"
"* * \"Common Usage Errors\" \n"
"* * \"Common Problems with SSL\" \n"
"* * \"Using Non-Blocking Sockets\" \n"
"* * \"Advanced Usage\" \n"
"* * \"Integration Into Own Modules\" \n"
"* * \"Description Of Methods\"\n"
"\n"
"Additional documentation can be found in \n"
"* * IO::Socket::SSL::Intercept - Doing Man-In-The-Middle with SSL \n"
"* * IO::Socket::SSL::Utils - Useful functions for certificates etc"
msgstr ""
"IO::Socket::SSL はわかりやすい IO::Socket のインターフェイス内に SSL/TLS で必"
"要な機能をラッピングして、可能な限り既定のままで機密な接続となるように作られ"
"ている仕組みです。このモジュールを利用することで、既存のアプリケーションがブ"
"ロッキング I/O を利用していて select や poll を利用していないような場合でも、"
"手間をかけることなく SSL 機能を追加できるようになります。\n"
"\n"
"しかしながら、 SSL は複雑な仕組みです。既定の動作では不十分な場合は、多数のメ"
"ソッドを呼び出して対応する必要があります。不注意によってセキュリティ上のバグ"
"を作り出してしまったり、単にデバッグが難しかったりすることがありますので、下"
"記のドキュメンテーションをよくお読みになり、学習することをお勧めします。\n"
"\n"
"ドキュメンテーションには下記の章があります:\n"
"* * \"SSL/TLS に関する概要\"\n"
"* * \"基本的な SSL クライアント\"\n"
"* * \"基本的な SSL サーバ\"\n"
"* * \"一般的な使用時エラー\"\n"
"* * \"SSL を利用する際の一般的な問題\"\n"
"* * \"非ブロッキングソケットの使用\"\n"
"* * \"高度な使い方\"\n"
"* * \"独自のモジュールとの統合\"\n"
"* * \"メソッドの説明\"\n"
"\n"
"追加のドキュメンテーションはそれぞれ下記の場所にあります:\n"
"* * IO::Socket::Intercept - SSL で Man-In-The-Middle を実施\n"
"* * IO::Socket::SSL::Utils - 証明書などの便利な関数集"

#. leap/perl-IO-Socket-Timeout/summary
msgid "IO::Socket with read/write timeout"
msgstr "読み書きのタイムアウト設定を行なうことのできる IO::Socket"

#. leap/perl-IO-Socket-Timeout/description
msgid ""
"'IO::Socket' provides a way to set a timeout on the socket, but the timeout "
"will be used only for connection, not for reading / writing operations.\n"
"\n"
"This module provides a way to set a timeout on read / write operations on an "
"'IO::Socket' instance, or any 'IO::Socket::*' modules, like 'IO::Socket::"
"INET'."
msgstr ""
"'IO::Socket' はソケットに対してタイムアウトを設定することのできる機能を提供し"
"ますが、これは接続時のタイムアウトだけで、読み書きのタイムアウトが含まれてい"
"ません。\n"
"\n"
"このモジュールは、 'IO::Socket' のインスタンスや任意の 'IO::Socket::*' モ"
"ジュールの読み書きの操作に対して、タイムアウトを設定することができるモジュー"
"ルです。"

#. leap/perl-IO-String/summary
msgid "Perl IO/String interface"
msgstr "Perl IO/String インターフェイス"

#. leap/perl-IO-String/description
msgid ""
"IO::String is an IO::File (and IO::Handle) compatible class that reads or "
"writes data from in-core strings.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Gisle Aas.  <gisle@aas.no>"
msgstr ""
"IO::String は IO::File (と IO::Handle) の互換クラスで、 Perl 内蔵の文字列から"
"データを読んだり書いたりすることができます。\n"
"\n"
"\n"
"\n"
"作者:\n"
"--------     Gisle Aas.  <gisle@aas.no>"

#. leap/perl-IO-Stty/summary
msgid "Change and print terminal line settings"
msgstr "端末の行設定の変更と出力"

#. leap/perl-IO-Stty/description
msgid "This is the PERL POSIX compliant stty."
msgstr "これは PERL POSIX 準拠ライブラリです。"

#. leap/perl-IO-Tee/summary
msgid "Multiplex output to multiple output handles"
msgstr "複数の出力ハンドルに出力する多重化モジュール"

#. leap/perl-IO-Tee/description
msgid ""
"'IO::Tee' objects can be used to multiplex input and output in two different "
"ways. The first way is to multiplex output to zero or more output handles. "
"The 'IO::Tee' constructor, given a list of output handles, returns a tied "
"handle that can be written to. When written to (using print or printf), the "
"'IO::Tee' object multiplexes the output to the list of handles originally "
"passed to the constructor. As a shortcut, you can also directly pass a "
"string or an array reference to the constructor, in which case 'IO::File::"
"new' is called for you with the specified argument or arguments.\n"
"\n"
"The second way is to multiplex input from one input handle to zero or more "
"output handles as it is being read. The 'IO::Tee' constructor, given an "
"input handle followed by a list of output handles, returns a tied handle "
"that can be read from as well as written to. When written to, the 'IO::Tee' "
"object multiplexes the output to all handles passed to the constructor, as "
"described in the previous paragraph. When read from, the 'IO::Tee' object "
"reads from the input handle given as the first argument to the 'IO::Tee' "
"constructor, then writes any data read to the output handles given as the "
"remaining arguments to the constructor.\n"
"\n"
"The 'IO::Tee' class supports certain 'IO::Handle' and 'IO::File' methods "
"related to input and output. In particular, the following methods will "
"iterate themselves over all handles associated with the 'IO::Tee' object, "
"and return TRUE indicating success if and only if all associated handles "
"returned TRUE indicating success: \n"
"* close \n"
"* truncate \n"
"* write \n"
"* syswrite \n"
"* format_write \n"
"* formline \n"
"* fcntl \n"
"* ioctl \n"
"* flush \n"
"* clearerr \n"
"* seek\n"
"\n"
"The following methods perform input multiplexing as described above: \n"
"* read \n"
"* sysread \n"
"* readline \n"
"* getc \n"
"* gets \n"
"* eof \n"
"* getline \n"
"* getlines\n"
"\n"
"The following methods can be used to set (but not retrieve) the current "
"values of output-related state variables on all associated handles: \n"
"* autoflush \n"
"* output_field_separator \n"
"* output_record_separator \n"
"* format_page_number \n"
"* format_lines_per_page \n"
"* format_lines_left \n"
"* format_name \n"
"* format_top_name \n"
"* format_line_break_characters \n"
"* format_formfeed\n"
"\n"
"The following methods are directly passed on to the input handle given as "
"the first argument to the 'IO::Tee' constructor: \n"
"* input_record_separator \n"
"* input_line_number\n"
"\n"
"Note that the return value of input multiplexing methods (such as 'print') "
"is always the return value of the input action, not the return value of "
"subsequent output actions. In particular, no error is indicated by the "
"return value if the input action itself succeeds but subsequent output "
"multiplexing fails."
msgstr ""
"'IO::Tee' オブジェクトは、 2 種類の異なる方法で入出力を多重化することができま"
"す。 1 つめの方法は、 0 個以上の出力ハンドルに多重化することです。 'IO::Tee' "
"のコンストラクタに出力ハンドルのリストを与えると、書き込み可能なタイハンドル"
"が返されます。 (print や printf などを利用して) 'IO::Tee' のオブジェクトに書"
"き込むと、コンストラクタに渡された各ハンドルに対して、出力が多重化されます。"
"なお、簡略化のため、コンストラクタには文字列や配列参照を直接渡すこともできま"
"すが、この場合は 'IO::File::new' が指定されたパラメータに対して呼び出されま"
"す。\n"
"\n"
"2 つめの方法は、読み込むべき入力を 1 つまたは複数の出力ハンドルに多重化するこ"
"とです。 'IO::Tee' のコンストラクタに、出力ハンドルのリストに続いて入力ハンド"
"ルを指定します。すると、書き込みだけでなく読み込みのできるタイハンドルが返さ"
"れます。 'IO::Tee' のオブジェクトに書き込みを行なった場合は、前項と同じで複数"
"の出力ハンドルに多重化されますが、読み込んだ場合は 'IO::Tee' コンストラクタで"
"指定した入力ハンドルから読み込みを行ない、読み込まれたデータを残りの出力ハン"
"ドルに多重化する処理を行ないます。\n"
"\n"
"'IO:Tee' クラスでは、入力や出力に関する箇所で 'IO::Handle' と 'IO::File' のメ"
"ソッドに対応しています。特に下記のメソッドでは、 'IO::Tee' オブジェクトに結び"
"つけられた全てのファイルハンドルを列挙し、全ての関連づけられたハンドルで "
"TRUE を返した場合にのみ、 TRUE を返すようになっています:\n"
"* close \n"
"* truncate \n"
"* write \n"
"* syswrite \n"
"* format_write \n"
"* formline \n"
"* fcntl \n"
"* ioctl \n"
"* flush \n"
"* clearerr \n"
"* seek\n"
"\n"
"下記のメソッドでは、上述のとおり入力側の多重化を行ないます:\n"
"* read \n"
"* sysread \n"
"* readline \n"
"* getc \n"
"* gets \n"
"* eof \n"
"* getline \n"
"* getlines\n"
"\n"
"下記のメソッドでは出力関連の状態変数を設定することができますが、これは関連づ"
"けられた全てのハンドルに対して行なわれます:\n"
"* autoflush \n"
"* output_field_separator \n"
"* output_record_separator \n"
"* format_page_number \n"
"* format_lines_per_page \n"
"* format_lines_left \n"
"* format_name \n"
"* format_top_name \n"
"* format_line_break_characters \n"
"* format_formfeed\n"
"\n"
"下記のメソッドは、 'IO::Tee' コンストラクタのパラメータとして指定された、入力"
"ハンドルに対して直接渡されます:\n"
"* input_record_separator \n"
"* input_line_number\n"
"\n"
"ただし、多重化時の返り値 (例えば 'print') は入力側のアクションに対する返り値"
"を示すものであって、後続の出力アクションに対する返り値ではないことに注意して"
"ください。入力側が成功していれば、出力側の多重化が失敗しても、エラーにはなり"
"ません。"

#. leap/perl-IO-TieCombine/summary
msgid "Produce Tied (and Other) Separate but Combined Variables"
msgstr "分離されていながら結合もされているタイ (もしくは他の) 変数の生成"

#. leap/perl-IO-TieCombine/description
msgid "produce tied (and other) separate but combined variables"
msgstr "分離されていながら結合もされているタイ (もしくは他の) 変数の生成"

#. leap/perl-IO-Tty/summary
msgid "Low-level allocate a pseudo-Tty, import constants."
msgstr "擬似端末の低レベル割り当てと定数インポート"

#. leap/perl-IO-Tty/description
msgid ""
"'IO::Tty' is used internally by 'IO::Pty' to create a pseudo-tty. You "
"wouldn't want to use it directly except to import constants, use 'IO::Pty'. "
"For a list of importable constants, see the IO::Tty::Constant manpage.\n"
"\n"
"Windows is now supported, but ONLY under the Cygwin environment, see the "
"http://sources.redhat.com/cygwin/ manpage.\n"
"\n"
"Please note that pty creation is very system-dependend. From my experience, "
"any modern POSIX system should be fine. Find below a list of systems that "
"'IO::Tty' should work on. A more detailed table (which is slowly getting out-"
"of-date) is available from the project pages document manager at SourceForge "
"the http://sourceforge.net/projects/expectperl/ manpage.\n"
"\n"
"If you have problems on your system and your system is listed in the "
"\"verified\" list, you probably have some non-standard setup, e.g. you "
"compiled your Linux-kernel yourself and disabled ptys (bummer!). Please ask "
"your friendly sysadmin for help.\n"
"\n"
"If your system is not listed, unpack the latest version of 'IO::Tty', do a "
"''perl Makefile.PL; make; make test; uname -a'' and send me (_RGiersig@cpan."
"org_) the results and I'll see what I can deduce from that. There are "
"chances that it will work right out-of-the-box...\n"
"\n"
"If it's working on your system, please send me a short note with details "
"(version number, distribution, etc. 'uname -a' and 'perl -V' is a good "
"start; also, the output from \"perl Makefile.PL\" contains a lot of "
"interesting info, so please include that as well) so I can get an overview. "
"Thanks!"
msgstr ""
"'IO::Tty' は 'IO::Pty' で内部的に用いられているモジュールで、疑似端末を作成す"
"る際に利用されるものです。定数の取り込み以外の処理を直接使いたくない場合は、 "
"'IO::Pty' をお使いください。重要な定数について、詳しくは IO::Tty::Constant の"
"マニュアルページをお読みください。\n"
"\n"
"Windows にも対応していますが、 cygwin 環境のみで利用できます。詳しくはhttp://"
"sources.redhat.com/cygwin/ のマニュアルページをお読みください。\n"
"\n"
"pty の作成は非常にシステムに依存したつくりになっていることに注意してくださ"
"い。ただ、私の経験では、新しい POSIX システムであればどのようなものでも利用で"
"きます。'IO::Tty' が動作するシステムについて、詳しくはマニュアル内の表をお読"
"みください。より詳しい一覧 (ただし少しずつ古いものが混じっています) について"
"は、 SourceForge 内のプロジェクトページ  http://sourceforge.net/projects/"
"expectperl/ から、マニュアルページをお読みください。\n"
"\n"
"お使いのシステムで問題が発生した場合で、 \"検証済み\" リストにお使いのシステ"
"ムが掲載されている場合は、標準的ではない構成でシステムを動作させているものと"
"思われます (たとえばカーネルを独自に構築していて、 pty 機能を無効化させている"
"場合など) 。このような場合、詳しくはシステムの管理者にお尋ねください。\n"
"\n"
"お使いのシステムが掲載されていない場合は、最新バージョンの 'IO::Tty' を展開"
"し、''perl Makefile.PL; make; make test; uname -a'' を実行したあと、その結果"
"を私 (_RGiersig@cpan.org_) 宛にお送りください。そこから推測可能な情報を提供さ"
"せていただきます。うまくすればそのまま動作するのかもしれませんが...\n"
"\n"
"お使いのシステムでうまく動作しない場合は、私宛に詳細を簡潔にお送りください"
"(バージョン番号、ディストリビューションなど。 'uname -a' や 'perl -V' を含め"
"ていただけると助かります; また、 \"perl Makefile.PL\" の実行結果には多数の有"
"用な情報が含まれているため、できるだけ含めるようにしてください) 。これによ"
"り、ヒントが得られるかもしれません。"

#. leap/perl-IO-stringy/summary
#. leap/perl-IO-stringy/description
msgid "IO::stringy Perl module"
msgstr "IO::stringy Perl モジュール"

#. leap/perl-IP-Country/summary
msgid "Fast Lookup of Country Codes From Ip Addresses"
msgstr "IP アドレスから国コードへの高速な検索"

#. leap/perl-IP-Country/description
msgid ""
"Finding the home country of a client using only the IP address can be "
"difficult. Looking up the domain name associated with that address can "
"provide some help, but many IP address are not reverse mapped to any useful "
"domain, and the most common domain (.com) offers no help when looking for "
"country.\n"
"\n"
"This module comes bundled with a database of countries where various IP "
"addresses have been assigned. Although the country of assignment will "
"probably be the country associated with a large ISP rather than the client "
"herself, this is probably good enough for most log analysis applications, "
"and under test has proved to be as accurate as reverse-DNS and WHOIS lookup."
msgstr ""
"IP アドレスだけを利用して国を判別するのは難しい作業です。 IP アドレスからドメ"
"イン名を参照することができる仕組みを利用することで、ある程度の判断はできます"
"が、多くの IP アドレスからの参照は国に結びつかず、もっともよくある汎用ドメイ"
"ン名 (.com) になってしまい、国を判別することができません。\n"
"\n"
"このモジュールにはデータベースが同梱されていて、様々な IP アドレスがどの国の"
"ものであるのかを示しています。国からの割り当ては巨大なプロバイダに対してのみ"
"行なわれ、個人まではわかりません。ですが、ログ分析アプリケーションに対しては"
"十分な情報源となります。また、テストの結果によると、 DNS の逆参照や WHOIS の"
"参照と同等に正確であることが示されています。"

#. leap/perl-IPC-Run/summary
msgid "System() and background procs w/ piping, redirs, ptys (Unix, Win32)"
msgstr ""
"パイプ、リダイレクト、擬似端末 (Unix, Win32) に対応した system() とバックグラ"
"ウンドプロシージャ"

#. leap/perl-IPC-Run/description
msgid ""
"IPC::Run allows you to run and interact with child processes using files, "
"pipes, and pseudo-ttys. Both system()-style and scripted usages are "
"supported and may be mixed. Likewise, functional and OO API styles are both "
"supported and may be mixed.\n"
"\n"
"Various redirection operators reminiscent of those seen on common Unix and "
"DOS command lines are provided."
msgstr ""
"IPC::Run は、ファイルやパイプ、擬似 tty を使用して子プロセスを起動し、それら"
"と通信を行なうことができるモジュールです。 system() 形式とスクリプト形式の使"
"用の両方に対応し、混在させることもできます。また、関数形式とオブジェクト指向"
"の API の 両方に対応し、混在させることもできます。\n"
"\n"
"Unix や DOS のコマンドラインを連想されるような、さまざまなリダイレクト演算子"
"機能も提供されています。"

#. leap/perl-IPC-Run3/summary
msgid "Run a Subprocess with Input/Ouput Redirection"
msgstr "入出力の転送機能付きのサブプロセス実行モジュール"

#. leap/perl-IPC-Run3/description
msgid ""
"This module allows you to run a subprocess and redirect stdin, stdout, and/"
"or stderr to files and perl data structures. It aims to satisfy 99% of the "
"need for using 'system', 'qx', and 'open3' with a simple, extremely Perlish "
"API.\n"
"\n"
"Speed, simplicity, and portability are paramount. (That's speed of Perl "
"code; which is often much slower than the kind of buffered I/O that this "
"module uses to spool input to and output from the child command.)"
msgstr ""
"このモジュールは、サブプロセスを起動してそれらの標準入力や標準出力、標準エ"
"ラー出力などをファイルや Perl のデータ構造に転送することができます。 "
"'system' や'qx', 'open3' などを利用するための 99% の要件を満たすことを目指し"
"ていて、シンプルかつ Perl 風の API になっています。\n"
"\n"
"速度 (Perl コードの速度です; よくある仕組みではバッファされた I/O よりもずっ"
"と遅いですが、子プロセスからの入出力をスプールとして処理することにより解決し"
"ています) とシンプルさは最も重要です。"

#. leap/perl-IPC-ShareLite/summary
msgid "Lightweight interface to shared memory"
msgstr "共有メモリに対する軽量なインターフェイス"

#. leap/perl-IPC-ShareLite/description
msgid ""
"IPC::ShareLite provides a simple interface to shared memory, allowing data "
"to be efficiently communicated between processes. Your operating system must "
"support SysV IPC (shared memory and semaphores) in order to use this "
"module.\n"
"\n"
"IPC::ShareLite provides an abstraction of the shared memory and semaphore "
"facilities of SysV IPC, allowing the storage of arbitrarily large data; the "
"module automatically acquires and removes shared memory segments as needed. "
"Storage and retrieval of data is atomic, and locking functions are provided "
"for higher-level synchronization.\n"
"\n"
"In many respects, this module is similar to IPC::Shareable. However, IPC::"
"ShareLite does not provide a tied interface, does not (automatically) allow "
"the storage of variables, and is written in C for additional speed.\n"
"\n"
"Construct an IPC::ShareLite object by calling its constructor:\n"
"\n"
"    my $share = IPC::ShareLite->new(         -key     => 1971,         -"
"create  => 'yes',         -destroy => 'no'     ) or die $!;\n"
"\n"
"Once an instance has been created, data can be written to shared memory by "
"calling the store() method:\n"
"\n"
"\t$share->store(\"This is going in shared memory\");\n"
"\n"
"Retrieve the data by calling the fetch() method:\n"
"\n"
"\tmy $str = $share->fetch();\n"
"\n"
"The store() and fetch() methods are atomic; any processes attempting to read "
"or write to the memory are blocked until these calls finish. However, in "
"certain situations, you'll want to perform multiple operations atomically. "
"Advisory locking methods are available for this purpose.\n"
"\n"
"An exclusive lock is obtained by calling the lock() method:\n"
"\n"
"\t$share->lock();\n"
"\n"
"Happily, the lock() method also accepts all of the flags recognized by the "
"flock() system call. So, for example, you can obtain a shared lock like "
"this:\n"
"\n"
"\t$share->lock( LOCK_SH );\n"
"\n"
"Or, you can make either type of lock non-blocking:\n"
"\n"
"\t$share->lock( LOCK_EX|LOCK_NB );\n"
"\n"
"Release the lock by calling the unlock() method:\n"
"\n"
"\t$share->unlock;"
msgstr ""
"IPC::ShareLite は、プロセス間で効率的なデータ通信を行なうのに必要な、共有メモ"
"リに対するシンプルなインターフェイスを提供します。このモジュールを利用するに"
"は、お使いのオペレーティングシステムが SysV IPC (共有メモリとセマフォ) に対応"
"しなければなりません。\n"
"\n"
"IPC::ShareLite は、 SysV IPC の共有メモリおよびセマフォの機能に対して抽象的な"
"手段を提供します。これにより、任意のデータに対するストレージとして利用し、必"
"要に応じて共有メモリのセグメントを取得または開放します。データの取得と保存は"
"アトミックに行なわれるほか、高レベルな同期のためにロック (施錠) 機能も利用す"
"ることができます。\n"
"\n"
"このモジュールは、様々な点で IPC::Shareable に似ています。しかしながら、 "
"IPC::ShareLite はタイインターフェイスを提供しないほか、変数の (自動的な) 保存"
"にも対応せず、速度の追求のために C 言語で書かれています。\n"
"\n"
"IPC::ShareLite オブジェクトを作成するには、下記のようにして実行します:\n"
"\n"
"    my $share = IPC::ShareLite->new(         -key     => 1971,         -"
"create  => 'yes',         -destroy => 'no'     ) or die $!;\n"
"\n"
"インスタンスを作成したあとは、 store() メソッドで共有メモリにデータを書き込む"
"ことができます:\n"
"\n"
"\t$share->store(\"This is going in shared memory\");\n"
"\n"
"データを取得したい場合は、 fetch() メソッドを呼び出します:\n"
"\n"
"\tmy $str = $share->fetch();\n"
"\n"
"store(), fetch() の各メソッドはアトミックに動作します; メモリに対して読み書き"
"の処理を行なうにあたっては、以前の処理が終わるまで待たされます。ただし、場合"
"によっては複数の処理を同時並行に処理させたいような場合もありますので、この場"
"合はアドバイザリロックのメソッドをご利用いただけます。\n"
"\n"
"また、排他ロックを取得したい場合は、 lock() メソッドを呼び出します:\n"
"\n"
"\t$share->lock();\n"
"\n"
"なお、 lock() メソッドは flock() システムコールで利用することのできるフラグを"
"指定することもできます。たとえば共有ロックを設定したい場合は、下記のようにし"
"て実行します:\n"
"\n"
"\t$share->lock( LOCK_SH );\n"
"\n"
"非ブロック型のロックを設定したい場合は、下記のようにします:\n"
"\n"
"\t$share->lock( LOCK_EX|LOCK_NB );\n"
"\n"
"ロックを解除するには、 unlock() メソッドを利用します:\n"
"\n"
"\t$share->unlock;"

#. leap/perl-IPC-System-Simple/summary
msgid "Run commands simply, with detailed diagnostics"
msgstr "詳細な解析機能のあるシンプルなコマンド実行"

#. leap/perl-IPC-System-Simple/description
msgid ""
"Calling Perl's in-built 'system()' function is easy, determining if it was "
"successful is _hard_. Let's face it, '$?' isn't the nicest variable in the "
"world to play with, and even if you _do_ check it, producing a well-"
"formatted error string takes a lot of work.\n"
"\n"
"'IPC::System::Simple' takes the hard work out of calling external commands. "
"In fact, if you want to be really lazy, you can just write:\n"
"\n"
"    use IPC::System::Simple qw(system);\n"
"\n"
"and all of your 'system' commands will either succeed (run to completion and "
"return a zero exit value), or die with rich diagnostic messages.\n"
"\n"
"The 'IPC::System::Simple' module also provides a simple replacement to "
"Perl's backticks operator. Simply write:\n"
"\n"
"    use IPC::System::Simple qw(capture);\n"
"\n"
"and then use the the /capture() manpage command just like you'd use "
"backticks. If there's an error, it will die with a detailed description of "
"what went wrong. Better still, you can even use 'capturex()' to run the "
"equivalent of backticks, but without the shell:\n"
"\n"
"    use IPC::System::Simple qw(capturex);\n"
"\n"
"    my $result = capturex($command, @args);\n"
"\n"
"If you want more power than the basic interface, including the ability to "
"specify which exit values are acceptable, trap errors, or process "
"diagnostics, then read on!"
msgstr ""
"Perl の内蔵関数 'system()' は簡単に使うことのできるものですが、その成功を判断"
"するのは _難しい_ ものです。コマンドによっては '$?' を正しく設定しないものも"
"ありますし、たとえ正しく設定するプログラムであったとしても、エラー時にエラー"
"の文字列を処理するのは面倒です。\n"
"\n"
"'IPC::System::Simple' は、外部のプログラムを呼び出す際の面倒な手間を省きま"
"す。面倒なことをしたくないのであれば、たとえば下記のように記述することができ"
"ます:\n"
"\n"
"    use IPC::System::Simple qw(system);\n"
"\n"
"上記を記述することにより、 'system' コマンドが成功したかどうか (コマンドが終"
"了し、かつ返り値が 0 であったかどうか) や、饒舌なエラーメッセージが出力されて"
"終了したかどうかを調べることができます。\n"
"\n"
"'IPC::System::Simple' モジュールでは、 Perl のバッククオート演算子の代替とな"
"る機能も用意されています。単純に下記のように記述するだけで利用することができ"
"ます:\n"
"\n"
"    use IPC::System::Simple qw(capture);\n"
"\n"
"あとはバッククオートを利用していた箇所で、 /capture() コマンドを利用するだけ"
"です。エラーが発生した場合は、何が悪かったのかを示す詳細な説明が表示されて終"
"了します。このほかにも、シェル無しでバッククオートを実行する場合は、 "
"'capturex()' を利用することができます:\n"
"\n"
"    use IPC::System::Simple qw(capturex);\n"
"\n"
"    my $result = capturex($command, @args);\n"
"\n"
"終了コードが正常な値かどうかや、エラーの捕捉、およびプロセスの分析機能など、"
"基本的なインターフェイス以上の機能も用意されています。詳しくは同梱のマニュア"
"ルをお読みください！"

#. leap/perl-IRI/summary
msgid "Internationalized Resource Identifiers"
msgstr "国際化資源識別子 (IRI)"

#. leap/perl-IRI/description
msgid ""
"The IRI module provides an object representation for Internationalized "
"Resource Identifiers (IRIs) as defined by at http://www.ietf.org/rfc/rfc3987."
"txt and supports their parsing, serializing, and base resolution."
msgstr ""
"IRI モジュールは、 http://www.ietf.org/rfc/rfc3987.txt で規定されている国際化"
"資源識別子 (IRI) 向けのオブジェクト表記で、  IRI の処理やシリアライズ、および"
"基本的な解決機能などを提供しています。"

#. leap/perl-Ima-DBI/summary
msgid "Database connection caching and organization"
msgstr "データベース接続のキャッシュおよび整理"

#. leap/perl-Ima-DBI/description
msgid ""
"Ima::DBI attempts to organize and facilitate caching and more efficient use "
"of database connections and statement handles by storing DBI and SQL "
"information with your class (instead of as seperate objects). This allows "
"you to pass around just one object without worrying about a trail of DBI "
"handles behind it.\n"
"\n"
"One of the things I always found annoying about writing large programs with "
"DBI was making sure that I didn't have duplicate database handles open. I "
"was also annoyed by the somewhat wasteful nature of the prepare/execute/"
"finish route I'd tend to go through in my subroutines. The new DBI-"
">connect_cached and DBI->prepare_cached helped a lot, but I still had to "
"throw around global datasource, username and password information.\n"
"\n"
"So, after a while I grew a small library of DBI helper routines and "
"techniques. Ima::DBI is the culmination of all this, put into a nice(?), "
"clean(?) class to be inherited from."
msgstr ""
"Ima::DBI は、 (個別のオブジェクトではなく) お使いのクラス内で DBI と SQL 情報"
"を利用し、データベースへの接続やステートメントハンドルを整理し、キャッシュの"
"利用を促進することで、より効率的な利用を目指すものです。この仕組みにより、"
"たった 1 つのオブジェクトでも DBI ハンドルへの影響を心配することなく、データ"
"ベースへの問い合わせを行なうことができます。\n"
"\n"
"たとえば私の経験してきた限りでは、 DBI を利用する巨大なプログラムで、重複して"
"データベースハンドルを開いていないかどうかを確認する処理を書くのは面倒だった"
"りしますし、サブルーチンを通して prepare/execute/finish のルートが正しいかど"
"うかを確認するのも面倒でした。新しい DBI->connect_cached と DBI-"
">prepare_cached を利用することで、これらの面倒事のほとんどに対応することがで"
"きます。もちろんデータソースやユーザ名、パスワードなどの情報は従来通り設定す"
"ることができます。\n"
"\n"
"元々は DBI のヘルパールーチンとして小さなライブラリでしたが、 Ima::DBI はこれ"
"らのサブルーチンの筆頭となるもので、派生可能なわかりやすく (?) クリーンな "
"(?) クラスになっています。"

#. leap/perl-Image-ExifTool/summary
msgid "Read and write meta information"
msgstr "メタ情報の読み取りと書き込み"

#. leap/perl-Image-ExifTool/description
msgid ""
"Reads and writes meta information in a wide variety of files, including the "
"maker notes of many digital cameras by various manufacturers such as Canon, "
"Casio, DJI, FLIR, FujiFilm, GE, GoPro, HP, JVC/Victor, Kodak, Leaf, Minolta/"
"Konica-Minolta, Nikon, Nintendo, Olympus/Epson, Panasonic/Leica, Pentax/"
"Asahi, Phase One, Reconyx, Ricoh, Samsung, Sanyo, Sigma/Foveon and Sony."
msgstr ""
"Canon、Casio、DJI、FLIR、FuJiFilm、GE、GoPro、HP、JVC/Victor、Kodak、Leaf、Minolta/"
"Konica-Minolta、Nikon、Nintendo、Olympus/Epson、Panasonic/Leica、Pentax/Asahi、"
"Phase One、Reconyx、Ricoh、Samsung、Sanyo、Sigma/"
"Foveon、Sonyなど、さまざまなメーカーの多数のデジタルカメラのメーカーノートなど、さまざまなファイルのメタ情報の読み取りと書き込みを行います。"

#. leap/perl-Image-Info/summary
msgid "Extract meta information from image files"
msgstr "画像ファイルからのメタ情報抽出"

#. leap/perl-Image-Info/description
msgid ""
"This module provides functions to extract various kinds of meta information "
"from image files."
msgstr ""
"このモジュールは、画像ファイルから様々な種類のメタ情報を抽出する関数を提供し"
"ます。"

#. leap/perl-Image-Sane/summary
msgid "Perl extension for the SANE (Scanner Access Now Easy)"
msgstr ""
"SANE (Scanner Access Now Easy; スキャナアクセス簡略化) 向けの Perl 拡張"

#. leap/perl-Image-Sane/description
msgid ""
"These Perl bindings for the SANE (Scanner Access Now Easy) Project allow you "
"to access SANE-compatible scanners in a Perlish and object-oriented way, "
"freeing you from the casting and memory management in C, yet remaining very "
"close in spirit to original API.\n"
"\n"
"Find out more about SANE at http://www.sane-project.org."
msgstr ""
"SANE (Scanner Access Now Easy) プロジェクト向けのこれらの Perl バインディング"
"を利用することで、 Perl から Perl 風かつオブジェクト指向の方法で SANE 互換の"
"スキャナにアクセスできるようになるほか、 C 言語のキャスト処理やメモリの管理な"
"どの手間を省くことができます。また、オリジナルの API の考え方を非常に強く継承"
"しています。\n"
"\n"
"SANE に関する詳細は http://www.sane-project.org. をお読みください。"

#. leap/perl-Image-Size/summary
msgid "Read the dimensions of an image in several popular formats"
msgstr "いくつかの有名な形式に対応した画像のサイズ読み込み"

#. leap/perl-Image-Size/description
msgid ""
"The *Image::Size* library is based upon the 'wwwis' script written by Alex "
"Knowles _(alex@ed.ac.uk)_, a tool to examine HTML and add 'width' and "
"'height' parameters to image tags. The sizes are cached internally based on "
"file name, so multiple calls on the same file name (such as images used in "
"bulleted lists, for example) do not result in repeated computations."
msgstr ""
"*Image::Size* ライブラリは、 Alex Knowles _(alex@ed.ac.uk)_ 氏作成の \"wwwis"
"\" スクリプトをベースにしたもので、 HTML を参照して画像タグに '幅' と '高さ' "
"のパラメータを追加するユーティリティです。大きさはファイル名をベースにして内"
"部的に記憶されるため、同じファイル名に対する複数の参照が存在した場合 (たとえ"
"ば箇条書きで冒頭に書く点の画像など) は、計算処理を繰り返さずに出力されます。"

#. leap/perl-Import-Into/summary
msgid "Import packages into other packages"
msgstr "他のパッケージへのパッケージの取り込み"

#. leap/perl-Import-Into/description
msgid ""
"Writing exporters is a pain. Some use the Exporter manpage, some use the "
"Sub::Exporter manpage, some use the Moose::Exporter manpage, some use the "
"Exporter::Declare manpage ... and some things are pragmas.\n"
"\n"
"Exporting on someone else's behalf is harder. The exporters don't provide a "
"consistent API for this, and pragmas need to have their import method called "
"directly, since they effect the current unit of compilation.\n"
"\n"
"'Import::Into' provides global methods to make this painless."
msgstr ""
"exporter を作成するのは苦痛を伴います。人によって Exporter, Sub::Exporter, "
"Moose::Exporter, Exporter::Declare など、様々なモジュールを使っていて、場合に"
"よってはプラグマを利用したりもしています。\n"
"\n"
"どこかの誰かのコードをエクスポートするのは難しいものです。現在のコンパイル単"
"位に影響があることから、 exporter は一貫した API を提供するものではありません"
"し、それらが提供するインポートメソッドを直接呼び出すプラグマなども提供されて"
"いません。\n"
"\n"
"'Import::Info' では、このような苦痛を回避するためのグローバルメソッドを提供し"
"ています。"

#. leap/perl-Importer/summary
msgid "Alternative but compatible interface to modules that export symbols"
msgstr ""
"シンボルをエクスポートするモジュールに対する代替かつ互換のインターフェイス"

#. leap/perl-Importer/description
msgid ""
"This module acts as a layer between Exporter and modules which consume "
"exports. It is feature-compatible with Exporter, plus some much needed "
"extras. You can use this to import symbols from any exporter that follows "
"Exporters specification. The exporter modules themselves do not need to use "
"or inherit from the Exporter module, they just need to set '@EXPORT' and/or "
"other variables."
msgstr ""
"このモジュールは、エクスポートするモジュールとそのエクスポートを受け入れるモ"
"ジュールの間で、レイヤとなるモジュールです。 Exporter との機能の互換性があり"
"ますが、それ以上に追加されている機能もあります。このモジュールを利用すること"
"で、 Exporters の仕様に従った任意のエクスポートモジュールから、シンボルを取り"
"込むことができます。エクスポートする側のモジュール自身では Exporter モジュー"
"ルを使用したり継承したりする必要はありません。単純に '@EXPORT' やその他の変数"
"を設定するだけで済みます。"

#. leap/perl-Inline/summary
msgid "Write Perl Subroutines in Other Programming Languages"
msgstr "他のプログラミング言語で Perl のサブルーチンを作成するモジュール"

#. leap/perl-Inline/description
msgid ""
"The Inline module allows you to put source code from other programming "
"languages directly \"inline\" in a Perl script or module. The code is "
"automatically compiled as needed, and then loaded for immediate access from "
"Perl.\n"
"\n"
"Inline saves you from the hassle of having to write and compile your own "
"glue code using facilities like XS or SWIG. Simply type the code where you "
"want it and run your Perl as normal. All the hairy details are handled for "
"you. The compilation and installation of your code chunks all happen "
"transparently; all you will notice is the delay of compilation on the first "
"run.\n"
"\n"
"The Inline code only gets compiled the first time you run it (or whenever it "
"is modified) so you only take the performance hit once. Code that is Inlined "
"into distributed modules (like on the CPAN) will get compiled when the "
"module is installed, so the end user will never notice the compilation "
"time.\n"
"\n"
"Best of all, it works the same on both Unix and Microsoft Windows. See "
"Inline- Support for support information."
msgstr ""
"Inline モジュールは、 Perl スクリプトまたはモジュールの中に直接他の言語のソー"
"スコードを \"インライン\" で埋め込むモジュールです。コードは必要に応じて自動"
"的にコンパイルされ、 Perl から即時にアクセスできるよう読み込まれます。\n"
"\n"
"Inline は XS や SWIG のような機構を使用したグルーコードを作成してコンパイルす"
"る手間を省くことができます。必要なコードを中に記述して、 Perl を通常通りに実"
"行するだけです。難しい処理は Inline が行ないます。コードチャンクのコンパイル"
"とインストールは透過的に行なわれます; 初回の起動時にコンパイルが動作するた"
"め、その時にのみ遅いと感じる程度でしょう。\n"
"\n"
"Inline のコードは初回の実行時 (および変更時) にのみコンパイルされるため、性能"
"の劣化もその時だけです。 Inline で記述されたコードは (CPAN などで) モジュール"
"内で配布することもできますので、モジュールを読み込んだ時にコンパイルが行なわ"
"れ、エンドユーザは何もすることなくそのまま実行できるようになります。\n"
"\n"
"Unix および Microsoft Windows で同じように動作します。サポート情報について、"
"詳しくは Inline- Support のマニュアルページをお読みください。"

#. leap/perl-Inline-Python/summary
msgid "Write Perl subs and classes in Python"
msgstr "Python 内での Perl サブルーチンとクラスの作成"

#. leap/perl-Inline-Python/description
msgid ""
"The 'Inline::Python' module allows you to put Python source code directly "
"\"inline\" in a Perl script or module. It sets up an in-process Python "
"interpreter, runs your code, and then examines Python's symbol table for "
"things to bind to Perl. The process of interrogating the Python interpreter "
"for globals only occurs the first time you run your Python code. The "
"namespace is cached, and subsequent calls use the cached version.\n"
"\n"
"This document describes 'Inline::Python', the Perl package which gives you "
"access to a Python interpreter. For lack of a better place to keep it, it "
"also gives you instructions on how to use 'perlmodule', the Python package "
"which gives you access to the Perl interpreter."
msgstr ""
"'Inline::Python' モジュールは、 Perl のスクリプトやモジュール内に \"インライ"
"ンの\" Python ソースコードを配置することができるようにする仕組みです。プロセ"
"ス内 Python インタプリタを設定し、対象のコードを動作させたあと、 Python のシ"
"ンボルテーブルを Perl に結びつけます。 Python インタプリタへの問い合わせ処理"
"は、 Python コードの初回実行時にのみグローバルで動作します。ネームスペースは"
"キャッシュされ、次回以降の呼び出しではキャッシュ番を使用します。\n"
"\n"
"この文書では 'Inline::Python' と呼ばれる、 Python インタプリタへのアクセスを"
"提供する Perl パッケージについて記述しています。それを維持するための適切な場"
"所がないため、 Perl インタプリタに対するアクセスを提供する Python パッケージ"
"である 'perlmodule' の使用方法についても説明を行なっています。"

#. leap/perl-Iterator/summary
msgid "A general-purpose iterator class"
msgstr "汎用目的の列挙クラス"

#. leap/perl-Iterator/description
msgid ""
"This module is meant to be the definitive implementation of iterators, as "
"popularized by Mark Jason Dominus's lectures and recent book (_Higher Order "
"Perl_, Morgan Kauffman, 2005).\n"
"\n"
"An \"iterator\" is an object, represented as a code block that generates the "
"\"next value\" of a sequence, and generally implemented as a closure. When "
"you need a value to operate on, you pull it from the iterator. If it depends "
"on other iterators, it pulls values from them when it needs to. Iterators "
"can be chained together (see the Iterator::Util manpage for functions that "
"help you do just that), queueing up work to be done but _not actually doing "
"it_ until a value is needed at the front end of the chain. At that time, one "
"data value is pulled through the chain.\n"
"\n"
"Contrast this with ordinary array processing, where you load or compute all "
"of the input values at once, then loop over them in memory. It's analogous "
"to the difference between looping over a file one line at a time, and "
"reading the entire file into an array of lines before operating on it.\n"
"\n"
"Iterator.pm provides a class that simplifies creation and use of these "
"iterator objects. Other 'Iterator::' modules (see the /\"SEE ALSO\" manpage) "
"provide many general-purpose and special-purpose iterator functions.\n"
"\n"
"Some iterators are infinite (that is, they generate infinite sequences), and "
"some are finite. When the end of a finite sequence is reached, the iterator "
"code block should throw an exception of the type 'Iterator::X::"
"Am_Now_Exhausted'; this is usually done via the the /is_done manpage "
"function.. This will signal the Iterator class to mark the object as "
"exhausted. The the /is_exhausted manpage method will then return true, and "
"the the /isnt_exhausted manpage method will return false. Any further calls "
"to the the /value manpage method will throw an exception of the type "
"'Iterator::X::Exhausted'. See the /DIAGNOSTICS manpage.\n"
"\n"
"Note that in many, many cases, you will not need to explicitly create an "
"iterator; there are plenty of iterator generation and manipulation functions "
"in the other associated modules. You can just plug them together like "
"building blocks."
msgstr ""
"このモジュールは列挙子に対する良質な実装となるべく作られたもので、 Mark "
"Jason Dominus 氏のレクチャーや直近の書籍 (_Higher Order Perl_, Morgan "
"Kauffman, 2005) で広められたモジュールです。\n"
"\n"
"\"列挙子\" はオブジェクトであり、順序内の \"次の値\" を生成するコードブロック"
"として表わされ、一般的にはクロージャとして実装される仕組みです。操作対象の値"
"が必要になるたびに、列挙子から値を引き出します。他の列挙子に依存していた場合"
"は、依存先の列挙子から値を取得します。列挙子は連鎖構造をとることもでき (詳し"
"くは Iterator::Util をお読みください) 、実施すべき作業を並べることもできま"
"す。ただし、チェインのフロントエンド側で値が必要になるまでは、実際の処理は行"
"なわれません。また、一方のデータ値はチェインを介して取得されます。\n"
"\n"
"通常の配列処理とは対照的に、入力値を一括で読み込みまたは計算し、その後にメモ"
"リ内でループすることになりますが、これはファイルを 1 行ずつ読み込んで繰り返す"
"処理に似ていて、一括でファイルを読み込んでから処理する形態です。\n"
"\n"
"Iterator.pm は、このような列挙子クラスを作成したり使用したりする作業を単純化"
"するためのクラスを提供しています。その他の 'Iterator::' モジュール (詳しく"
"は /\"SEE ALSO\" をお読みください) では、多くの汎用目的および特殊目的の列挙関"
"数が提供されています。\n"
"\n"
"列挙子は永遠に繰り返すことのできる (無限に順序を生成する) ものもあります。有"
"限の列挙子では、その終了に到達すると、列挙子のコードブロックは 'Iterator::X::"
"Am_Now_Exhausted' のタイプの例外をスローします。これは通常、 /is_done 関数経"
"由で実施されます。これは列挙子クラスに対して終了を表わすもので、それ以降のす"
"べての /value メソッドの呼び出しは 'Iterator::X::Exhausted' のタイプの例外を"
"スローします。詳しくは /DIAGNOSTICS をお読みください。\n"
"\n"
"なお、多くの場合において、列挙子を明示的に作成する必要はありません。列挙子を"
"生成するには多数の方法や他の関連モジュールの操作関数があるためです。構築ブ"
"ロックのようにそれをつなぎ合わせるだけです。"

#. leap/perl-Iterator-Util/summary
msgid "Essential utilities for the Iterator class"
msgstr "列挙子クラスの基本ユーティリティ"

#. leap/perl-Iterator-Util/description
msgid ""
"This module implements many useful functions for creating and manipulating "
"iterator objects.\n"
"\n"
"An \"iterator\" is an object, represented as a code block that generates the "
"\"next value\" of a sequence, and generally implemented as a closure. For "
"further information, including a tutorial on using iterator objects, see the "
"the Iterator manpage documentation."
msgstr ""
"このモジュールは、列挙子クラスを作成したり操作したりするための、多数の便利関"
"数を実装しています。\n"
"\n"
"\"列挙子\" はオブジェクトであり、順序内の \"次の値\" を生成するコードブロック"
"として表わされ、一般的にはクロージャとして実装される仕組みです。列挙子オブ"
"ジェクトの使用に際するチュートリアルなど、詳しくは列挙子クラスのドキュメン"
"テーションをお読みください。"

#. leap/perl-JSON/summary
msgid "JSON (JavaScript Object Notation) encoder/decoder"
msgstr "JSON (JavaScript オブジェクト表記) エンコーダ／デコーダ"

#. leap/perl-JSON/description
msgid ""
"This module is a thin wrapper for JSON::XS-compatible modules with a few "
"additional features. All the backend modules convert a Perl data structure "
"to a JSON text as of RFC4627 (which we know is obsolete but we still stick "
"to; see below for an option to support part of RFC7159) and vice versa. This "
"module uses JSON::XS by default, and when JSON::XS is not available, this "
"module falls back on JSON::PP, which is in the Perl core since 5.14. If "
"JSON::PP is not available either, this module then falls back on JSON::"
"backportPP (which is actually JSON::PP in a different .pm file) bundled in "
"the same distribution as this module. You can also explicitly specify to use "
"Cpanel::JSON::XS, a fork of JSON::XS by Reini Urban.\n"
"\n"
"All these backend modules have slight incompatibilities between them, "
"including extra features that other modules don't support, but as long as "
"you use only common features (most important ones are described below), "
"migration from backend to backend should be reasonably easy. For details, "
"see each backend module you use."
msgstr ""
"このモジュールは JSON::XS 互換のモジュールに対して、いくつかの追加機能を伴う"
"薄いラッパーです。バックエンドモジュールは、 RFC4627 に従って、 Perl のデータ"
"構造を JSON テキストに変換したり、その逆の変換を行なったりします (なお、 "
"RFC4627 は既に廃止されていますが、本モジュールは現在もこの RFC を反映していま"
"す。新しい RFC7159 に対応するオプションについては、下記をお読みください) 。ま"
"た、このモジュールは既定で JSON::XS を使用しますが、 JSON::XS が利用できない"
"場合は、本モジュールに同梱された JSON::backportPP (実際には JSON::PP と同じも"
"のですが、異なる .pm ファイルです) にフォールバックして動作します。また、明示"
"的に指定することで、 Reini Urban 氏が JSON::XS から fork して作成した "
"Cpanel::JSON::XS を使用することもできます。\n"
"\n"
"なお、一方のバックエンドモジュールで対応している追加機能が、他方のバックエン"
"ドでは利用できないなど、バックエンドモジュール間で若干の非互換性が存在してい"
"ますが、一般的な機能 (最も重要なものは後述) のみを利用している限り、バックエ"
"ンド間の移行はそれほど難しくないものと思われます。詳しくはお使いになるバック"
"エンドモジュールをご覧ください。"

#. leap/perl-JSON-Any/summary
msgid "(DEPRECATED) Wrapper Class for the various JSON classes"
msgstr "(廃止予定) 様々な JSON クラス向けラッパークラス"

#. leap/perl-JSON-Any/description
msgid ""
"This module tries to provide a coherent API to bring together the various "
"JSON modules currently on CPAN. This module will allow you to code to any "
"JSON API and have it work regardless of which JSON module is actually "
"installed.\n"
"\n"
"    use JSON::Any;\n"
"\n"
"    my $j = JSON::Any->new;\n"
"\n"
"    $json = $j->objToJson({foo=>'bar', baz=>'quux'});     $obj = $j-"
">jsonToObj($json);\n"
"\n"
"or\n"
"\n"
"    $json = $j->encode({foo=>'bar', baz=>'quux'});     $obj = $j-"
">decode($json);\n"
"\n"
"or\n"
"\n"
"    $json = $j->Dump({foo=>'bar', baz=>'quux'});     $obj = $j-"
">Load($json);\n"
"\n"
"or\n"
"\n"
"    $json = $j->to_json({foo=>'bar', baz=>'quux'});     $obj = $j-"
">from_json($json);\n"
"\n"
"or without creating an object:\n"
"\n"
"    $json = JSON::Any->objToJson({foo=>'bar', baz=>'quux'});     $obj = "
"JSON::Any->jsonToObj($json);\n"
"\n"
"On load, JSON::Any will find a valid JSON module in your @INC by looking for "
"them in this order:\n"
"\n"
"    Cpanel::JSON::XS     JSON::XS     JSON::PP     JSON     JSON::DWIW\n"
"\n"
"And loading the first one it finds.\n"
"\n"
"You may change the order by specifying it on the 'use JSON::Any' line:\n"
"\n"
"    use JSON::Any qw(DWIW XS CPANEL JSON PP);\n"
"\n"
"Specifying an order that is missing modules will prevent those module from "
"being used:\n"
"\n"
"    use JSON::Any qw(CPANEL PP); # same as JSON::MaybeXS\n"
"\n"
"This will check in that order, and will never attempt to load the JSON::XS "
"manpage, the JSON.pm/JSON manpage, or the JSON::DWIW manpage. This can also "
"be set via the '$ENV{JSON_ANY_ORDER}' environment variable.\n"
"\n"
"the JSON::Syck manpage has been deprecated by its author, but in the attempt "
"to still stay relevant as a \"Compatibility Layer\" JSON::Any still supports "
"it. This support however has been made optional starting with JSON::Any "
"1.19. In deference to a bug request starting with JSON 1.20, the JSON::Syck "
"manpage and other deprecated modules will still be installed, but only as a "
"last resort and will now include a warning.\n"
"\n"
"    use JSON::Any qw(Syck XS JSON);\n"
"\n"
"or\n"
"\n"
"    $ENV{JSON_ANY_ORDER} = 'Syck XS JSON';\n"
"\n"
"At install time, JSON::Any will attempt to install the JSON::PP manpage as a "
"reasonable fallback if you do not appear have *any* backends installed on "
"your system.\n"
"\n"
"WARNING: If you call JSON::Any with an empty list\n"
"\n"
"    use JSON::Any ();\n"
"\n"
"It will skip the JSON package detection routines and will die loudly that it "
"couldn't find a package."
msgstr ""
"このモジュールは、 CPAN 内に存在する様々な JSON モジュールをまとめて、矛盾の"
"ない API を提供しようとする試みです。このモジュールは任意の JSON API を利用し"
"て、どの JSON モジュールがインストールされているのかに関係なく作業ができるよ"
"うにするものです。\n"
"\n"
"    use JSON::Any;\n"
"\n"
"    my $j = JSON::Any->new;\n"
"\n"
"    $json = $j->objToJson({foo=>'bar', baz=>'quux'});     $obj = $j-"
">jsonToObj($json);\n"
"\n"
"もしくは、下記のように記述することもできます:\n"
"\n"
"    $json = $j->encode({foo=>'bar', baz=>'quux'});     $obj = $j-"
">decode($json);\n"
"\n"
"もしくは、下記のように記述することもできます:\n"
"\n"
"    $json = $j->Dump({foo=>'bar', baz=>'quux'});     $obj = $j-"
">Load($json);\n"
"\n"
"もしくは、下記のように記述することもできます:\n"
"\n"
"    $json = $j->to_json({foo=>'bar', baz=>'quux'});     $obj = $j-"
">from_json($json);\n"
"\n"
"オブジェクトを作成せずに実行することもできます:\n"
"\n"
"    $json = JSON::Any->objToJson({foo=>'bar', baz=>'quux'});     $obj = "
"JSON::Any->jsonToObj($json);\n"
"\n"
"読み込みの際、 JSON::Any は @INC 内を調べて、利用可能な JSON モジュールを検出"
"しようとします。このとき、下記の優先順序で検索を行ないます:\n"
"\n"
"    Cpanel::JSON::XS     JSON::XS     JSON::PP     JSON     JSON::DWIW\n"
"\n"
"この中から最初に見つかったものを読み込みます。\n"
"\n"
"'use JSON::Any' の行で指定することで、優先順序を変更することもできます:\n"
"\n"
"    use JSON::Any qw(DWIW XS CPANEL JSON PP);\n"
"\n"
"モジュールを指定しなければ、そのモジュールを使用しないようにすることができま"
"す:\n"
"\n"
"    use JSON::Any qw(CPANEL PP); # JSON::MaybeXS と同じ\n"
"\n"
"これにより、指定した順序でチェックを行ないますが、 JSON::XS, JSON.pm/JSON, "
"JSON::DWIW については読み込みを行なわないようになります。この指定は "
"'$ENV{JSON_ANY_ORDER}' 環境変数からも行なうことができます。\n"
"\n"
"JSON::Syck はその著者によって廃止されることが表明されていますが、 \"互換レイ"
"ヤ\" として使用する可能性があることから、  JSON::Any でもサポートが続けられて"
"います。このサポートは JSON::Any 1.19 以降で任意となりましたが、 JSON 1.20 以"
"降のバグリクエストで、 JSON::Syck とその他の廃止予定モジュールがインストール"
"できるようになっています。ただし、優先順位は最も低く、かつ警告を表示するよう"
"になっています:\n"
"\n"
"    use JSON::Any qw(Syck XS JSON);\n"
"\n"
"もしくは、下記のように記述することもできます:\n"
"\n"
"    $ENV{JSON_ANY_ORDER} = 'Syck XS JSON';\n"
"\n"
"インストールの時点では、お使いのシステム内に *その他の* バックエンドが存在し"
"なかった場合、 JSON::Any は JSON::PP を合理的なフォールバックとしてインストー"
"ルしようとします。\n"
"\n"
"警告: JSON::Any を空のリストで呼び出した場合、 JSON パッケージの検出ルーチン"
"が飛ばされ、パッケージが見つからないとして die してしまいます:\n"
"\n"
"    use JSON::Any ();"

#. leap/perl-JSON-DWIW/summary
msgid "JSON converter that Does What I Want"
msgstr "期待通りのことを実行する JSON コンバータ"

#. leap/perl-JSON-DWIW/description
msgid ""
"Other JSON modules require setting several parameters before calling the "
"conversion methods to do what I want. This module does things by default "
"that I think should be done when working with JSON in Perl. This module also "
"encodes and decodes faster than the JSON manpage.pm and the JSON::Syck "
"manpage in my benchmarks.\n"
"\n"
"This means that any piece of data in Perl (assuming it's valid unicode) will "
"get converted to something in JSON instead of throwing an exception. It also "
"means that output will be strict JSON, while accepted input will be "
"flexible, without having to set any options.\n"
"\n"
"For a list of changes in recent versions, see the documentation for the "
"JSON::DWIW::Changes manpage.\n"
"\n"
"This module can be downloaded from the http://www.cpan.org/authors/id/D/DO/"
"DOWENS/ manpage."
msgstr ""
"他の JSON モジュールをお使いの場合、必要な処理を実施するのに、あらかじめいく"
"つかのパラメータを設定する必要があります。このモジュールは、 Perl 内で JSON "
"を利用する際、既定で必要な処理を行なうのに必要なことを実施します。このモ"
"ジュールは、ベンチマークによると JSON.pm や JSON::Syck よりも高速にエンコード"
"／デコードすることができることが示されています。\n"
"\n"
"このモジュールは、 Perl 内の任意のデータ (正しく Unicode でエンコードされてい"
"ることが前提です) を、例外を投げることなく JSON 形式に変換する機能を提供しま"
"す。出力は厳密な JSON の形式で出力されますが、入力はオプションを設定する必要"
"もなく、柔軟に処理されます。\n"
"\n"
"直近のバージョンにおける変更点の一覧は、 JSON::DWIW::Changes のマニュアルペー"
"ジをご覧ください。\n"
"\n"
"また、モジュールのダウンロードは http://www.cpan.org/authors/id/D/DO/DOWENS/ "
"から行なってください。"

#. leap/perl-JSON-MaybeXS/summary
msgid "Use L<Cpanel::JSON::XS> with a fallback to L<JSON::XS> and L<JSON::PP>"
msgstr ""
"L<JSON::XS> と L<JSON::PP> にフォールバックすることのできる L<Cpanel::JSON::"
"XS>"

#. leap/perl-JSON-MaybeXS/description
msgid ""
"This module first checks to see if either Cpanel::JSON::XS or JSON::XS is "
"already loaded, in which case it uses that module. Otherwise it tries to "
"load Cpanel::JSON::XS, then JSON::XS, then JSON::PP in order, and either "
"uses the first module it finds or throws an error.\n"
"\n"
"It then exports the 'encode_json' and 'decode_json' functions from the "
"loaded module, along with a 'JSON' constant that returns the class name for "
"calling 'new' on.\n"
"\n"
"If you're writing fresh code rather than replacing JSON.pm usage, you might "
"want to pass options as constructor args rather than calling mutators, so we "
"provide our own 'new' method that supports that."
msgstr ""
"このモジュールは、まず Cpanel::JSON::XS または JSON::XS がすでに読み込まれて"
"いるかどうかをチェックし、いずれかのモジュールが読み込まれていればそれを使用"
"します。どのモジュールも読み込まれていない場合は、 Cpanel::JSON::XS を読み込"
"もうとしたあと、 JSON::XS および JSON::PP を読み込もうとし、見つかった最初の"
"モジュールを使用するか、エラーを返します。\n"
"\n"
"モジュールが読み込まれると、そのモジュールから 'encode_json' と "
"'decode_json' の関数、および 'JSON' 定数がそれぞれ公開されるようになります。"
"定数は 'new' を呼び出す際のクラス名を含んでいます。\n"
"\n"
"既存の JSON コードではなく新規に作成しようとしている場合は、ミューテータでは"
"なくコンストラクタのパラメータとしてパラメータを指定してください。これに対応"
"するための独自の 'new' メソッドが提供されています。"

#. leap/perl-JSON-RPC/summary
msgid "JSON RPC 2.0 Server Implementation"
msgstr "JSON RPC 2.0 サーバ実装"

#. leap/perl-JSON-RPC/description
msgid ""
"JSON::RPC is a set of modules that implement JSON RPC 2.0 protocol.\n"
"\n"
"    If you are using old JSON::RPC code (up to 0.96), DO NOT EXPECT     YOUR "
"CODE TO WORK WITH THIS VERSION. THIS VERSION IS     ****BACKWARDS "
"INCOMPATIBLE****"
msgstr ""
"JSON::RPC は JSON RPC 2.0 プロトコルを実装するモジュールセットです。\n"
"\n"
"    古い JSON::RPC コード (0.96 またはそれ以前) を利用している場合、このバー"
"ジョンでお使いのコードが動作することは期待してはなりません。このバージョンに"
"は ****後方互換性がありません**** 。"

#. leap/perl-JSON-Validator/summary
msgid "Validate data against a JSON schema"
msgstr "JSON スキーマによるデータの検証"

#. leap/perl-JSON-Validator/description
msgid ""
"JSON::Validator is a data structure validation library based around at "
"https://json-schema.org/. This module can be used directly with a JSON "
"schema or you can use the elegant DSL schema-builder JSON::Validator::Joi to "
"define the schema programmatically."
msgstr ""
"JSON::Validator は https://json-schema.org/ をベースにしたデータ構造の検証ラ"
"イブラリです。このモジュールは JSON スキーマを直接利用することができるほか、"
"スキーマを機械的に定義するため、上品な DSL スキーマビルダである JSON::"
"Validator::Joi を使用することもできます。"

#. leap/perl-JSON-XS/summary
msgid "JSON serialising/deserialising, done correctly and fast"
msgstr "正しく高速に動作する JSON シリアライズ／デシリアライズ"

#. leap/perl-JSON-XS/description
msgid ""
"This module converts Perl data structures to JSON and vice versa. Its "
"primary goal is to be _correct_ and its secondary goal is to be _fast_. To "
"reach the latter goal it was written in C.\n"
"\n"
"Beginning with version 2.0 of the JSON module, when both JSON and JSON::XS "
"are installed, then JSON will fall back on JSON::XS (this can be overridden) "
"with no overhead due to emulation (by inheriting constructor and methods). "
"If JSON::XS is not available, it will fall back to the compatible JSON::PP "
"module as backend, so using JSON instead of JSON::XS gives you a portable "
"JSON API that can be fast when you need it and doesn't require a C compiler "
"when that is a problem.\n"
"\n"
"As this is the n-th-something JSON module on CPAN, what was the reason to "
"write yet another JSON module? While it seems there are many JSON modules, "
"none of them correctly handle all corner cases, and in most cases their "
"maintainers are unresponsive, gone missing, or not listening to bug reports "
"for other reasons.\n"
"\n"
"See MAPPING, below, on how JSON::XS maps perl values to JSON values and vice "
"versa."
msgstr ""
"このモジュールは、 Perl のデータ構造を JSON 形式に変換したり、その逆変換を行"
"なったりすることができます。主に正しさを重視した構造とし、速度はその次になる"
"構造とするようにしています。本モジュールは特に後者を重視したつくりになってい"
"て、 C 言語で作成されています。\n"
"\n"
"JSON モジュールバージョン 2.0 以降では、 JSON, JSON::XS の両方がインストール"
"されている場合、 JSON は JSON::XS をその実装として使用します (必要であれば設"
"定を変更することもできます) 。この実装では、コンストラクタやメソッドを継承し"
"ているため、オーバーヘッドは全く発生しません。 JSON::XS が利用できない環境の"
"場合は、 JSON:PP モジュールを実装として使用しますが、この場合はJSON::XS の代"
"わりに JSON モジュールの API を利用することで、可搬性のあるJSON API にするこ"
"とができます。\n"
"\n"
"このモジュールは CPAN において n 番目の JSON モジュールであるため、なぜわざわ"
"ざ新しい JSON モジュールを開発したのかをよく尋ねられます。数多くの他の JSON "
"モジュールでは、例外的なデータ構造に正しく対応できていないほか、メンテナに問"
"い合わせても返答が無かったり、そもそもメンテナが行方不明になってしたり、バグ"
"報告を受け付けていなかったりしているためです。\n"
"\n"
"MAPPING セクションには、 JSON::XS が Perl 変数と JSON 値をどのように対応づけ"
"ているのか、その逆はどうなのかについて、詳しく説明しています。"

#. leap/perl-JavaScript-Minifier-XS/summary
msgid "XS based JavaScript minifier"
msgstr "XS ベースの JavaScript 最小化機構"

#. leap/perl-JavaScript-Minifier-XS/description
msgid ""
"'JavaScript::Minifier::XS' is a JavaScript \"minifier\"; its designed to "
"remove un-necessary whitespace and comments from JavaScript files, which "
"also *not* breaking the JavaScript.\n"
"\n"
"'JavaScript::Minifier::XS' is similar in function to 'JavaScript::Minifier', "
"but is substantially faster as its written in XS and not just pure Perl."
msgstr ""
"'JavaScript::Minifier::XS' は JavaScript をできる限り小さくまとめるための仕組"
"みです。 JavaScript ファイルから、その動作に影響を与えることなく、不要なホワ"
"イトスペースを削除したり、コメント部分を削除したりすることができます。\n"
"\n"
"'JavaScript::Minifier::XS' は 'JavaScript::Minifier' に似た機能を提供する仕組"
"みですが、純粋な Perl コードだけでなく XS で記述されているために高速に動作し"
"ます。"

#. leap/perl-LWP-MediaTypes/summary
msgid "guess media type for a file or a URL"
msgstr "ファイルや URL からのメディア種類の推測"

#. leap/perl-LWP-MediaTypes/description
msgid ""
"This module provides functions for handling media (also known as MIME) types "
"and encodings. The mapping from file extensions to media types is defined by "
"the _media.types_ file. If the _~/.media.types_ file exists it is used "
"instead. For backwards compatibility we will also look for _~/.mime.types_.\n"
"\n"
"The following functions are exported by default: \n"
"* guess_media_type( $filename ) \n"
"* guess_media_type( $uri ) \n"
"* guess_media_type( $filename_or_uri, $header_to_modify )\n"
"\n"
"  This function tries to guess media type and encoding for a file or a "
"URI.   It returns the content type, which is a string like '\"text/html\"'. "
"In   array context it also returns any content encodings applied (in the "
"order   used to encode the file). You can pass a URI object reference, "
"instead of   the file name.\n"
"\n"
"  If the type can not be deduced from looking at the file name, then   "
"guess_media_type() will let the '-T' Perl operator take a look. If this   "
"works (and '-T' returns a TRUE value) then we return _text/plain_ as the   "
"type, otherwise we return _application/octet-stream_ as the type.\n"
"\n"
"  The optional second argument should be a reference to a HTTP::Headers   "
"object or any object that implements the $obj->header method in a similar   "
"way. When it is present the values of the 'Content-Type' and   'Content-"
"Encoding' will be set for this header. \n"
"* media_suffix( $type, ... )\n"
"\n"
"  This function will return all suffixes that can be used to denote the   "
"specified media type(s). Wildcard types can be used. In a scalar context   "
"it will return the first suffix found. Examples:\n"
"\n"
"    @suffixes = media_suffix('image/*', 'audio/basic');     $suffix = "
"media_suffix('text/html');\n"
"\n"
"The following functions are only exported by explicit request: \n"
"* add_type( $type, @exts )\n"
"\n"
"  Associate a list of file extensions with the given media type. Example:\n"
"\n"
"      add_type(\"x-world/x-vrml\" => qw(wrl vrml)); \n"
"* add_encoding( $type, @ext )\n"
"\n"
"  Associate a list of file extensions with an encoding type. Example:\n"
"\n"
"   add_encoding(\"x-gzip\" => \"gz\"); \n"
"* read_media_types( @files )\n"
"\n"
"  Parse media types files and add the type mappings found there. Example:\n"
"\n"
"      read_media_types(\"conf/mime.types\");"
msgstr ""
"このモジュールは、メディアタイプ (MIME とも呼ばれます) とエンコーディングを処"
"理する関数を提供します。ファイルの拡張子からメディアタイプへの割り当ては、 "
"_media.types_ ファイルで指定します。 _~/.media.types_ ファイルが存在する場合"
"は、このファイルが優先的に使われます。また、後方互換性のため、 _~/.mime."
"types_ にも対応しています。\n"
"\n"
"既定では、下記の関数が公開されています:\n"
"* guess_media_type( $filename )\n"
"* guess_media_type( $uri )\n"
"* guess_media_type( $filename_or_uri, $header_to_modify )\n"
"\n"
"  この関数は、ファイルまたは URI に対するメディアタイプとエンコーディングを推"
"測します。返り値は Content-Type の値で、たとえば '\"text/html\"' のような文字"
"列になります。配列のコンテキストであれば、コンテンツに対するエンコーディング"
"も返されます (ファイルをエンコードする際に利用していたもの) 。また、ファイル"
"の代わりに URI オブジェクトの参照を指定したりすることもできます。\n"
"\n"
"  ファイル名を見ただけではタイプを判別できない場合、 guess_media_type() は'-"
"T' の Perl 演算子を利用して、内容を参照します。これがうまく動作した場合 (か"
"つ '-T' が TRUE を返した場合) は、タイプに _text/plain_ を設定しますが、うま"
"く動作しなかった場合は、タイプとして _application/octet-stream_ を設定しま"
"す。\n"
"\n"
"  任意で指定できる 2 つめのパラメータは、 HTTP::Headers オブジェクトの参照ま"
"たは似たような方法で $obj->header メソッドを実装するオブジェクトを指定するこ"
"とができます。それぞれ 'Content-Type' や 'Content-Encoding' の値が存在する場"
"合、これらの値が書き換えられます。\n"
"* media_suffix( $type, ... )\n"
"\n"
"  この関数は、指定したメディアタイプを示す接尾辞を返却します。ワイルドカード"
"での指定も行なうことができます。スカラーコンテキストの場合、最初に見つかった"
"接尾辞を返します。たとえば下記のようになります:\n"
"\n"
"    @suffixes = media_suffix('image/*', 'audio/basic');     $suffix = "
"media_suffix('text/html');\n"
"\n"
"下記の関数は、明示的に要求した場合にのみ公開されます:\n"
"* add_type( $type, @exts )\n"
"\n"
"  メディアタイプに対して、ファイルの拡張子の一覧を割り当てます。たとえば下記"
"のようになります:\n"
"\n"
"      add_type(\"x-world/x-vrml\" => qw(wrl vrml));\n"
"* add_encoding( $type, @ext )\n"
"\n"
"  エンコーディングタイプに対して、ファイルの拡張子の一覧を割り当てます。たと"
"えば下記のようになります:\n"
"\n"
"   add_encoding(\"x-gzip\" => \"gz\");\n"
"* read_media_types( @files )\n"
"\n"
"  メディアタイプを処理して、見つかったタイプマップを追加します。たとえば下記"
"のようになります:\n"
"\n"
"      read_media_types(\"conf/mime.types\");"

#. leap/perl-LWP-Online/summary
msgid "Does your process have access to the web"
msgstr "プロセスからの Web アクセス"

#. leap/perl-LWP-Online/description
msgid ""
"This module attempts to answer, as accurately as it can, one of the nastiest "
"technical questions there is. \n"
"*Am I on the internet?*\n"
"\n"
"The answer is useful in a wide range of decisions. For example...\n"
"\n"
"_Should my test scripts run the online portion of the tests or just skip "
"them?_\n"
"\n"
"_Do I try to fetch fresh data from the server?_\n"
"\n"
"_If my request to the server breaks, is it because I'm offline, or because "
"the server is offline?_\n"
"\n"
"And so on, and so forth.\n"
"\n"
"But a host of networking and security issues make this problem very "
"difficult. There are firewalls, proxies (both well behaved and badly "
"behaved). We might not have DNS. We might not have a network card at all!\n"
"\n"
"You might have network access, but only to a for-money wireless network that "
"responds to ever HTTP request with a page asking you to enter your credit "
"card details for paid access. Which means you don't \"REALLY\" have access.\n"
"\n"
"The mere nature of the question makes it practically unsolvable.\n"
"\n"
"But with the answer being so useful, and the only other alternative being to "
"ask the user \"duh... are you online?\" (when you might not have a user at "
"all) it's my gut feeling that it is worthwhile at least making an attempt to "
"solve the problem, if only in a limited way."
msgstr ""
"このモジュールは、下記のような素朴な質問への回答を提供しようとするものです:\n"
"* インターネットに繋がっているかどうか？\n"
"\n"
"上記の質問に対する回答は、様々な用途で利用することができます。たとえば:\n"
"\n"
"_テストスクリプトを実行するにあたって、オンライン接続が必要なものを実行すべき"
"かどうか？_\n"
"\n"
"_サーバから新しいデータを取り込んでみるべきか？_\n"
"\n"
"_サーバへの要求が失敗した場合、それはこちら側の接続の問題なのか、それともサー"
"バ側の問題なのか？_\n"
"\n"
"等々・・・\n"
"\n"
"ネットワークの構成やセキュリティの問題があることから、これを判断するのは非常"
"に難しいものです。たとえばファイアウオールやプロキシ (正しく動作するものもあ"
"れば、正しく動作しないものもあります) 経由でアクセスしなければならないかもし"
"れませんし、 DNS サーバが存在しないかもしれません。ネットワークカードさえも接"
"続していない環境がありえます。\n"
"\n"
"インターネットに接続可能な環境でも、有料の無線ネットワークを経由しなければな"
"らない場合もあります。この場合は、料金を請求するため、どの HTTP リクエストに"
"対してもクレジットカードの情報を入力するように求めたりすることがあります。こ"
"のような場合は、 \"本当に\" インターネット接続ができると判断すべきではありま"
"せん。\n"
"\n"
"このようなことから、上記の質問に対して正確に答えるとすれば、それは回答不可能"
"であることになります。\n"
"\n"
"とはいえ、それ以外の方法としてはユーザに \"オンラインですか？\" と尋ねるくら"
"いしか方法がありません (場合によっては目の前にユーザが居ない場合もありま"
"す) 。このようなことから、このようなチェックは不確実ではあるものの、それなり"
"に有用なものとなります。"

#. leap/perl-LWP-Protocol-https/summary
msgid "Provide https support for LWP::UserAgent"
msgstr "LWP::UserAgent 向けの https サポート"

#. leap/perl-LWP-Protocol-https/description
msgid ""
"The LWP::Protocol::https module provides support for using https schemed "
"URLs with LWP. This module is a plug-in to the LWP protocol handling, so you "
"don't use it directly. Once the module is installed LWP is able to access "
"sites using HTTP over SSL/TLS.\n"
"\n"
"If hostname verification is requested by LWP::UserAgent's 'ssl_opts', and "
"neither 'SSL_ca_file' nor 'SSL_ca_path' is set, then 'SSL_ca_file' is "
"implied to be the one provided by Mozilla::CA. If the Mozilla::CA module "
"isn't available SSL requests will fail. Either install this module, set up "
"an alternative 'SSL_ca_file' or disable hostname verification.\n"
"\n"
"This module used to be bundled with the libwww-perl, but it was unbundled in "
"v6.02 in order to be able to declare its dependencies properly for the CPAN "
"tool-chain. Applications that need https support can just declare their "
"dependency on LWP::Protocol::https and will no longer need to know what "
"underlying modules to install."
msgstr ""
"LWP::Protocol::https モジュールは、 https スキームを利用する URL 向けのLWP モ"
"ジュールです。このモジュールは LWP プロトコルハンドらに対するプラグインとして"
"動作するものであり、直接使用してはなりません。このモジュールをインストールす"
"ることで、 LWP から HTTP over SSL/TLS を利用してアクセスできるようになりま"
"す。\n"
"\n"
"LWP::UserAgent の 'ssl_opts' でホスト名検証が要求された場合で、 "
"'SSL_ca_file' と 'SSL_ca_path' のいずれも指定されない場合は、 'SSL_ca_file' "
"は Mozilla::CA が提供するものを利用します。 Mozilla::CA モジュールが利用でき"
"ない場合は、 SSL 要求は失敗します。そのモジュールをインストールするか、 "
"'SSL_ca_file' で代替の CA ファイルを指定するか、もしくはホスト名検証を無効化"
"してください。\n"
"\n"
"このモジュールは libwww-perl と共に同梱して使用するように作られていますが、"
"v6.02 以降のバージョンでは、 CPAN のツールチェインに対して正しい依存関係を提"
"供する目的で、同梱されないようになりました。 https サポートを必要とするアプリ"
"ケーションは、依存関係情報として LWP::Protocol::https を定義するだけで、これ"
"を利用するためのモジュールは定義不要になっています。"

#. leap/perl-Lexical-Persistence/summary
msgid "Persistent lexical variable values for arbitrary calls."
msgstr "任意の呼び出しに対するレキシカル変数の永続化"

#. leap/perl-Lexical-Persistence/description
msgid ""
"Lexical::Persistence does a few things, all related. Note that all the "
"behaviors listed here are the defaults. Subclasses can override nearly every "
"aspect of Lexical::Persistence's behavior.\n"
"\n"
"Lexical::Persistence lets your code access persistent data through lexical "
"variables. This example prints \"some value\" because the value of $x "
"persists in the $lp object between setter() and getter().\n"
"\n"
"\tuse Lexical::Persistence;\n"
"\n"
"\tmy $lp = Lexical::Persistence->new(); \t$lp->call(\\&setter); \t$lp-"
">call(\\&getter);\n"
"\n"
"\tsub setter { my $x = \"some value\" } \tsub getter { print my $x, \"\\n"
"\" }\n"
"\n"
"Lexicals with leading underscores are not persistent.\n"
"\n"
"By default, Lexical::Persistence supports accessing data from multiple "
"sources through the use of variable prefixes. The set_context() member sets "
"each data source. It takes a prefix name and a hash of key/value pairs. By "
"default, the keys must have sigils representing their variable types.\n"
"\n"
"\tuse Lexical::Persistence;\n"
"\n"
"\tmy $lp = Lexical::Persistence->new(); \t$lp->set_context( pi => "
"{ '$member' => 3.141 } ); \t$lp->set_context( e => { '@member' => [ 2, '.', "
"7, 1, 8 ] } ); \t$lp->set_context( \t\tanimal => { \t\t\t'%member' => { cat "
"=> \"meow\", dog => \"woof\" } \t\t} \t);\n"
"\n"
"\t$lp->call(\\&display);\n"
"\n"
"\tsub display { \t\tmy ($pi_member, @e_member, %animal_member);\n"
"\n"
"\t\tprint \"pi = $pi_member\\n\"; \t\tprint \"e = @e_member\\n\"; \t\twhile "
"(my ($animal, $sound) = each %animal_member) { \t\t\tprint \"The $animal "
"goes... $sound!\\n\"; \t\t} \t}\n"
"\n"
"And the corresponding output:\n"
"\n"
"\tpi = 3.141 \te = 2 . 7 1 8 \tThe cat goes... meow! \tThe dog goes... "
"woof!\n"
"\n"
"By default, call() takes a single subroutine reference and an optional list "
"of named arguments. The arguments will be passed directly to the called "
"subroutine, but Lexical::Persistence also makes the values available from "
"the \"arg\" prefix.\n"
"\n"
"\tuse Lexical::Persistence;\n"
"\n"
"\tmy %animals = ( \t\tsnake => \"hiss\", \t\tplane => \"I'm Cartesian\", "
"\t);\n"
"\n"
"\tmy $lp = Lexical::Persistence->new(); \twhile (my ($animal, $sound) = each "
"%animals) { \t\t$lp->call(\\&display, animal => $animal, sound => $sound); "
"\t}\n"
"\n"
"\tsub display { \t\tmy ($arg_animal, $arg_sound); \t\tprint \"The "
"$arg_animal goes... $arg_sound!\\n\"; \t}\n"
"\n"
"And the corresponding output:\n"
"\n"
"\tThe plane goes... I'm Cartesian! \tThe snake goes... hiss!\n"
"\n"
"Sometimes you want to call functions normally. The wrap() method will wrap "
"your function in a small thunk that does the call() for you, returning a "
"coderef.\n"
"\n"
"\tuse Lexical::Persistence;\n"
"\n"
"\tmy $lp = Lexical::Persistence->new(); \tmy $thunk = $lp-"
">wrap(\\&display);\n"
"\n"
"\t$thunk->(animal => \"squirrel\", sound => \"nuts\");\n"
"\n"
"\tsub display { \t\tmy ($arg_animal, $arg_sound); \t\tprint \"The "
"$arg_animal goes... $arg_sound!\\n\"; \t}\n"
"\n"
"And the corresponding output:\n"
"\n"
"\tThe squirrel goes... nuts!\n"
"\n"
"Prefixes are the characters leading up to the first underscore in a lexical "
"variable's name. However, there's also a default context named underscore. "
"It's literally \"_\" because the underscore is not legal in a context name "
"by default. Variables without prefixes, or with prefixes that have not been "
"previously defined by set_context(), are stored in that context.\n"
"\n"
"The get_context() member returns a hash for a named context. This allows "
"your code to manipulate the values within a persistent context.\n"
"\n"
"\tuse Lexical::Persistence;\n"
"\n"
"\tmy $lp = Lexical::Persistence->new(); \t$lp->set_context( \t\t_ => { \t\t"
"\t'@mind' => [qw(My mind is going. I can feel it.)] \t\t} \t);\n"
"\n"
"\twhile (1) { \t\t$lp->call(\\&display); \t\tmy $mind = $lp->get_context(\"_"
"\")->{'@mind'}; \t\tsplice @$mind, rand(@$mind), 1; \t\tlast unless @$mind; "
"\t}\n"
"\n"
"\tsub display { \t\tmy @mind; \t\tprint \"@mind\\n\"; \t}\n"
"\n"
"Displays something like:\n"
"\n"
"\tMy mind is going. I can feel it. \tMy is going. I can feel it. \tMy is "
"going. I feel it. \tMy going. I feel it. \tMy going. I feel \tMy I feel \tMy "
"I \tMy\n"
"\n"
"It's possible to create multiple Lexical::Persistence objects, each with a "
"unique state.\n"
"\n"
"\tuse Lexical::Persistence;\n"
"\n"
"\tmy $lp_1 = Lexical::Persistence->new(); \t$lp_1->set_context( _ => "
"{ '$foo' => \"context 1's foo\" } );\n"
"\n"
"\tmy $lp_2 = Lexical::Persistence->new(); \t$lp_2->set_context( _ => "
"{ '$foo' => \"the foo in context 2\" } );\n"
"\n"
"\t$lp_1->call(\\&display); \t$lp_2->call(\\&display);\n"
"\n"
"\tsub display { \t\tprint my $foo, \"\\n\"; \t}\n"
"\n"
"Gets you this output:\n"
"\n"
"\tcontext 1's foo \tthe foo in context 2\n"
"\n"
"You can also compile and execute perl code contained in plain strings in a a "
"lexical environment that already contains the persisted variables.\n"
"\n"
"\tuse Lexical::Persistence;\n"
"\n"
"\tmy $lp = Lexical::Persistence->new();\n"
"\n"
"\t$lp->do( 'my $message = \"Hello, world\" );\n"
"\n"
"\t$lp->do( 'print \"$message\\n\"' );\n"
"\n"
"Which gives the output:\n"
"\n"
"\tHello, world\n"
"\n"
"If you come up with other fun uses, let us know."
msgstr ""
"Lexical::Persistence は小さいながらも関連性のある仕組みです。なお、ここに示さ"
"れている動作はすべて既定値のものであり、サブクラス側では Lexical::"
"Persistence の動作のほぼすべてをオーバーライドすることができます。\n"
"\n"
"Lexical::Persistence はお使いのコード内で、レキシカル変数を介した永続性のある"
"データ保持機能を提供します。下記の例は \"some value\" という値を出力します"
"が、これは $lp 内で $x の値が永続化されていて、 setter() を呼び出した後も保持"
"され、 getter() で取得できるためです:\n"
"\n"
"\tuse Lexical::Persistence;\n"
"\n"
"\tmy $lp = Lexical::Persistence->new(); \t$lp->call(\\&setter); \t$lp-"
">call(\\&getter);\n"
"\n"
"\tsub setter { my $x = \"some value\" } \tsub getter { print my $x, \"\\n"
"\" }\n"
"\n"
"なお、アンダースコア(_)で始まるレキシカル変数は、永続化されません。\n"
"\n"
"また、既定では Lexical::Persistence は変数プレフィクスを利用することで、複数"
"のソースからのデータにアクセスすることができます。この場合、 set_context() メ"
"ソッドでそれぞれのデータソースを設定します。このメソッドはプレフィクス名と"
"キー／値の対を持つハッシュをパラメータとして指定するもので、既定ではキーに変"
"数のタイプを表わす sigil を設定しなければなりません:\n"
"\n"
"\tuse Lexical::Persistence;\n"
"\n"
"\tmy $lp = Lexical::Persistence->new(); \t$lp->set_context( pi => "
"{ '$member' => 3.141 } ); \t$lp->set_context( e => { '@member' => [ 2, '.', "
"7, 1, 8 ] } ); \t$lp->set_context( \t\tanimal => { \t\t\t'%member' => { cat "
"=> \"meow\", dog => \"woof\" } \t\t} \t);\n"
"\n"
"\t$lp->call(\\&display);\n"
"\n"
"\tsub display { \t\tmy ($pi_member, @e_member, %animal_member);\n"
"\n"
"\t\tprint \"pi = $pi_member\\n\"; \t\tprint \"e = @e_member\\n\"; \t\twhile "
"(my ($animal, $sound) = each %animal_member) { \t\t\tprint \"The $animal "
"goes... $sound!\\n\"; \t\t} \t}\n"
"\n"
"上記を実行すると、下記のように出力されます:\n"
"\n"
"\tpi = 3.141 \te = 2 . 7 1 8 \tThe cat goes... meow! \tThe dog goes... "
"woof!\n"
"\n"
"また、既定では call() は 1 つのサブルーチン参照と、任意で名前付きのパラメータ"
"を指定します。パラメータは呼び出されたサブルーチンに直接渡されますが、 "
"Lexical::Persistence では \"arg\" のプレフィクスを付けてアクセスすることもで"
"きます:\n"
"\n"
"\tuse Lexical::Persistence;\n"
"\n"
"\tmy %animals = ( \t\tsnake => \"hiss\", \t\tplane => \"I'm Cartesian\", "
"\t);\n"
"\n"
"\tmy $lp = Lexical::Persistence->new(); \twhile (my ($animal, $sound) = each "
"%animals) { \t\t$lp->call(\\&display, animal => $animal, sound => $sound); "
"\t}\n"
"\n"
"\tsub display { \t\tmy ($arg_animal, $arg_sound); \t\tprint \"The "
"$arg_animal goes... $arg_sound!\\n\"; \t}\n"
"\n"
"上記を実行すると、下記のように出力されます:\n"
"\n"
"\tThe plane goes... I'm Cartesian! \tThe snake goes... hiss!\n"
"\n"
"場合によっては関数を通常通り呼び出したい場合もあるでしょう。 wrap() メソッド"
"はお使いの関数を小さなトランクにラッピングして、 call() できるようにします。"
"返される値はコード参照です:\n"
"\n"
"\tuse Lexical::Persistence;\n"
"\n"
"\tmy $lp = Lexical::Persistence->new(); \tmy $thunk = $lp-"
">wrap(\\&display);\n"
"\n"
"\t$thunk->(animal => \"squirrel\", sound => \"nuts\");\n"
"\n"
"\tsub display { \t\tmy ($arg_animal, $arg_sound); \t\tprint \"The "
"$arg_animal goes... $arg_sound!\\n\"; \t}\n"
"\n"
"上記を実行すると、下記のように出力されます:\n"
"\n"
"\tThe squirrel goes... nuts!\n"
"\n"
"プレフィクスは、レキシカル変数の名前の中でアンダースコアから始まる文字です。"
"ただし、既定のコンテキストとしてアンダースコア(_)というものもあります。既定で"
"はコンテキスト名に \"_\" を設定することはできませんので、他のコンテキストと衝"
"突することはありません。また、プレフィクス無しの変数や set_context() で設定さ"
"れていないプレフィクスが設定された場合は、既定のコンテキスト内に保存されま"
"す。\n"
"\n"
"get_context() メソッドは名前付きのコンテキストに対するハッシュを返すもので、"
"これによって永続的なコンテキスト内で変数を操作できるようになります:\n"
"\n"
"\tuse Lexical::Persistence;\n"
"\n"
"\tmy $lp = Lexical::Persistence->new(); \t$lp->set_context( \t\t_ => { \t\t"
"\t'@mind' => [qw(My mind is going. I can feel it.)] \t\t} \t);\n"
"\n"
"\twhile (1) { \t\t$lp->call(\\&display); \t\tmy $mind = $lp->get_context(\"_"
"\")->{'@mind'}; \t\tsplice @$mind, rand(@$mind), 1; \t\tlast unless @$mind; "
"\t}\n"
"\n"
"\tsub display { \t\tmy @mind; \t\tprint \"@mind\\n\"; \t}\n"
"\n"
"下記のように表示されます:\n"
"\n"
"\tMy mind is going. I can feel it. \tMy is going. I can feel it. \tMy is "
"going. I feel it. \tMy going. I feel it. \tMy going. I feel \tMy I feel \tMy "
"I \tMy\n"
"\n"
"複数の Lexical::Persistence オブジェクトを作成することもできます。これらはそ"
"れぞれ独自の状態を持つことができます。\n"
"\n"
"\tuse Lexical::Persistence;\n"
"\n"
"\tmy $lp_1 = Lexical::Persistence->new(); \t$lp_1->set_context( _ => "
"{ '$foo' => \"context 1's foo\" } );\n"
"\n"
"\tmy $lp_2 = Lexical::Persistence->new(); \t$lp_2->set_context( _ => "
"{ '$foo' => \"the foo in context 2\" } );\n"
"\n"
"\t$lp_1->call(\\&display); \t$lp_2->call(\\&display);\n"
"\n"
"\tsub display { \t\tprint my $foo, \"\\n\"; \t}\n"
"\n"
"下記のように表示されます:\n"
"\n"
"\tcontext 1's foo \tthe foo in context 2\n"
"\n"
"すでに永続化されているレキシカル変数が存在した場合、文字列に含まれている "
"Perl のコードをコンパイルして実行することもできます:\n"
"\n"
"\tuse Lexical::Persistence;\n"
"\n"
"\tmy $lp = Lexical::Persistence->new();\n"
"\n"
"\t$lp->do( 'my $message = \"Hello, world\" );\n"
"\n"
"\t$lp->do( 'print \"$message\\n\"' );\n"
"\n"
"下記のように表示されます:\n"
"\n"
"\tHello, world\n"
"\n"
"上記以外にも何か面白い使い方をご存じの場合は、是非お知らせください。"

#. leap/perl-Lexical-SealRequireHints/summary
msgid "Prevent Leakage of Lexical Hints"
msgstr "レキシカルヒントによる漏洩の保護"

#. leap/perl-Lexical-SealRequireHints/description
msgid ""
"This module works around two historical bugs in Perl's handling of the "
"'%^H' (lexical hints) variable. One bug causes lexical state in one file to "
"leak into another that is 'require'd/'use'd from it. This bug, [perl\n"
"\n"
"The second bug causes lexical state (normally a blank '%^H' once the first "
"bug is fixed) to leak outwards from 'utf8.pm', if it is automatically loaded "
"during Unicode regular expression matching, into whatever source is "
"compiling at the time of the regexp match. This bug, [perl #73174], was "
"present from Perl 5.8.7 up to Perl 5.11.5, fixed in Perl 5.12.0.\n"
"\n"
"Both of these bugs seriously damage the usability of any module relying on "
"'%^H' for lexical scoping, on the affected Perl versions. It is in practice "
"essential to work around these bugs when using such modules. On versions of "
"Perl that require such a workaround, this module globally changes the "
"behaviour of 'require', including 'use' and the implicit 'require' performed "
"in Unicode regular expression matching, so that it no longer exhibits these "
"bugs.\n"
"\n"
"The workaround supplied by this module takes effect the first time its "
"'import' method is called. Typically this will be done by means of a 'use' "
"statement. This should be done as early as possible, because it only affects "
"'require'/'use' statements that are compiled after the workaround goes into "
"effect. For 'use' statements, and 'require' statements that are executed "
"immediately and only once, it suffices to invoke the workaround when loading "
"the first module that will set up vulnerable lexical state. Delayed-action "
"'require' statements, however, are more troublesome, and can require the "
"workaround to be loaded much earlier. Ultimately, an affected Perl program "
"may need to load the workaround as very nearly its first action. Invoking "
"this module multiple times, from multiple modules, is not a problem: the "
"workaround is only applied once, and applies to everything subsequently "
"compiled.\n"
"\n"
"This module is implemented in XS, with a pure Perl backup version for "
"systems that can't handle XS modules. The XS version has a better chance of "
"playing nicely with other modules that modify 'require' handling. The pure "
"Perl version can't work at all on some Perl versions; users of those "
"versions must use the XS. On all Perl versions suffering the underlying hint "
"leakage bug, pure Perl hooking of 'require' breaks the use of 'require' "
"without an explicit parameter (implicitly using '$_')."
msgstr ""
"このモジュールは、 Perl に古くから存在するバグである '%^H' (レキシカルヒン"
"ト) 変数の処理に対して、回避策を提供するものです。 あるバグを利用することで、"
"一方のファイル内にある語彙状態を、 'require' または 'use' を利用することで、"
"他方のファイルに漏洩してしまいます。\n"
"\n"
"もう 1 つのバグは、語彙状態 (上述のバグを修正すれば、通常 '%^H' は空白になり"
"ます) を 'utf8.pm' から外に漏らしてしまうというもので、 Unicode の正規表現"
"マッチングで自動的にこのモジュールを読み込んでしまうと、正規表現のマッチング"
"処理時を行なっただけで、どのソースであっても情報漏洩が発生してしまいます。こ"
"れは [perl #73174] としてバグ報告されているもので、 Perl 5.8.7 から 5.11.5 ま"
"でのバージョンで発生し、 5.12.0 で解決したものです。\n"
"\n"
"いずれのバグとも、影響のある Perl バージョンを使用している環境では、 '%^H' を"
"レキシカルスコープ用に使用しているモジュールの危険性を高めてしまいます。それ"
"らのモジュールをどうしても使用する必要がある場合は、回避策を実施する必要があ"
"りますが、このモジュールは 'require' のほか、 'use' や Unicode 正規表現を利用"
"する際の暗黙の 'require' の動作をグローバルに変更することで、 バグを発生させ"
"ないようにしています。\n"
"\n"
"このモジュールが提供する回避策は、'import' メソッドを呼び出した際に最初に効果"
"を発揮します。一般に、この処理は 'use' ステートメント経由で実行されます。この"
"処理は、 'require' や 'use' のステートメントが実行されてからでないと有効にな"
"らないため、できる限り早いうちに実行すべきものです。 'use' ステートメントや "
"'require' ステートメントの場合、それは即時に 1 度だけ実行されるため、早いうち"
"に実行しておけば、脆弱なレキシカル変数による影響を小さくすることができるため"
"です。なお、遅延アクションである 'require' ステートメントを利用すると、より問"
"題を引き起こす可能性が高くなるため、回避策はできる限り早く読み込まれるべきで"
"す。極論を言うと、 Perl のプログラム内で最初の処理として実行されるべきです。"
"このモジュールを複数回起動しても問題はありません。回避策は一度だけ実行され、"
"適用されます。\n"
"\n"
"このモジュールは XS で実装されていますが、 XS モジュールを処理できない環境に"
"合わせて、純粋な Perl 版も用意されています。 XS 版のほうが 'require' 処理を書"
"き換えるのに都合よく動作します。なお、純粋 Perl 版は Perl のバージョンによっ"
"ては全く動作しない場合もあります。この場合は XS 版をお使いください。ヒント漏"
"洩バグが発生するすべてのバージョンでは、純粋 Perl 版を利用して 'require' を"
"フックすると、明示的なパラメータ無しで 'require' を実行しても、正しく動作しま"
"せん (暗黙で '$_' を使用します) 。"

#. leap/perl-Lingua-EN-FindNumber/summary
msgid "Locate (written) numbers in English text"
msgstr "英語の文章内での数値の検出"

#. leap/perl-Lingua-EN-FindNumber/description
msgid ""
"This module provides a regular expression for finding numbers in English "
"text. It also provides functions for extracting and manipulating such "
"numbers."
msgstr ""
"このモジュールは、英語の文章内で数字を検出するための正規表現を提供します。検"
"出した数字に対して、抽出や操作を行なうための機能も用意されています。"

#. leap/perl-Lingua-EN-Inflect/summary
msgid "Convert singular to plural. Select \"a\" or \"an\""
msgstr "単数形から複数形への変換、および \"a\", \"an\" の選択"

#. leap/perl-Lingua-EN-Inflect/description
msgid ""
"*[_Note:_ This module is strictly in maintenance mode now. Take a look at "
"the newer Lingua::EN::Inflexion module, which offers a cleaner and more "
"convenient interface, has many more features (including plural->singular "
"inflexions), and is also much better tested. If you have existing code that "
"relies on Lingua::EN::Inflect, see the section of the documentation entitled "
"\"CONVERTING FROM LINGUA::EN::INFLECT\". ]*\n"
"\n"
"The exportable subroutines of Lingua::EN::Inflect provide plural "
"inflections, \"a\"/\"an\" selection for English words, and manipulation of "
"numbers as words\n"
"\n"
"Plural forms of all nouns, most verbs, and some adjectives are provided. "
"Where appropriate, \"classical\" variants (for example: \"brother\" -> "
"\"brethren\", \"dogma\" -> \"dogmata\", etc.) are also provided.\n"
"\n"
"Pronunciation-based \"a\"/\"an\" selection is provided for all English "
"words, and most initialisms.\n"
"\n"
"It is also possible to inflect numerals (1,2,3) to ordinals (1st, 2nd, 3rd) "
"and to English words (\"one\", \"two\", \"three).\n"
"\n"
"In generating these inflections, Lingua::EN::Inflect follows the Oxford "
"English Dictionary and the guidelines in Fowler's Modern English Usage, "
"preferring the former where the two disagree.\n"
"\n"
"The module is built around standard British spelling, but is designed to "
"cope with common American variants as well. Slang, jargon, and other English "
"dialects are _not_ explicitly catered for.\n"
"\n"
"Where two or more inflected forms exist for a single word (typically a "
"\"classical\" form and a \"modern\" form), Lingua::EN::Inflect prefers the "
"more common form (typically the \"modern\" one), unless \"classical\" "
"processing has been specified (see \"MODERN VS CLASSICAL INFLECTIONS\")."
msgstr ""
"*[_注意:_ このモジュールは厳密にはメンテナンスモード下にあります。より新しい "
"Lingua::EN::Inflexion モジュールをご覧ください。こちらのほうがよりクリーン"
"で、かつ便利なインターフェイスを提供しているほか、多数の追加機能も用意されて"
"います (単数形から複数形への変態など) し、テストもよりよく行なわれています。"
"また、 Lingua::EN::Inflect に依存するコードをお持ちの場合は、上述のモジュール"
"内に書かれている \"CONVERTING FROM LINGUA::EN::INFLECT\" (Lingua::EN::"
"Inflect からの変換) というタイトルのドキュメンテーションをお読みくださ"
"い。 ]*\n"
"\n"
"Lingua::EN::Inflect で公開されているサブルーチンでは、英語における複数形の変"
"換や \"a\"/\"an\" の選択、および数値を言葉に変換する機能などが用意されていま"
"す。\n"
"\n"
"すべての名詞やほとんどの動詞、そしていくつかの形容詞に対する複数形が提供され"
"ています。また、存在すれば \"古い\" 形式にも対応しています (例: \"brother\" -"
"> \"brethren\", \"dogma\" -> \"dogmata\" など) 。\n"
"\n"
"このほか、英単語に対する発音ベースの \"a\"/\"an\" の選択機能も当初から用意さ"
"れています。\n"
"\n"
"また、数値 (1,2,3) を順序表記 (1st, 2nd, 3rd) や英単語 (\"one\", \"two\", "
"\"three\") に変換する機能もあります。\n"
"\n"
"これらの変換機能の作成にあたっては、 Lingua::EN::Inflect は Oxford 社の英語辞"
"書と Fowler's Modern English Usage 内のガイドラインに従っています。双方で異な"
"る見解になってるものについては、前者のものを採用しています。\n"
"\n"
"このモジュールは標準的なイギリス英語のスペルを利用していますが、アメリカ英語"
"への対応も行なわれています。ただし、スラングやジャーゴンなど、その他の方言に"
"ついては基本的に対応していません。\n"
"\n"
"なお、 1 つの単語に対して 2 つもしくはそれ以上の変化形が存在するような場合 "
"(一般的には \"古い形式\" と \"新しい形式\" など) は、 \"classical\" (古い形"
"式) を明示的に指定した場合を除いて、 Lingua::EN::Inflect はより一般的な形態 "
"(通常は \"新しい形式\") を採用しています (詳しくは \"MODERN VS CLASSICAL "
"INFLECTIONS\" をお読みください)。"

#. leap/perl-Lingua-EN-Inflect-Number/summary
msgid "Force number of words to singular or plural"
msgstr "単語の数値を単数形または複数形に強制するモジュール"

#. leap/perl-Lingua-EN-Inflect-Number/description
msgid ""
"This module extends the functionality of Lingua::EN::Inflect with three new "
"functions available for export:"
msgstr ""
"このモジュールは Lingua::EN::Inflect の機能を拡張するもので、公開される 3 種"
"類の新しい関数が用意されています:"

#. leap/perl-Lingua-EN-Inflect-Phrase/summary
msgid "Inflect short English Phrases"
msgstr "短い英語の語句に対する変形"

#. leap/perl-Lingua-EN-Inflect-Phrase/description
msgid ""
"Attempts to pluralize or singularize short English phrases.\n"
"\n"
"Does not throw exceptions at present, if you attempt to pluralize an already "
"pluralized phrase, it will leave it unchanged (and vice versa.)\n"
"\n"
"The behavior of this module is subject to change as I tweak the heuristics, "
"as some things get fixed others might regress. The processing of natural "
"language is a messy business.\n"
"\n"
"If it doesn't work, please email or submit to RT the example you tried, and "
"I'll try to fix it."
msgstr ""
"短い英語の語句を、複数形または単数形に変換します。\n"
"\n"
"すでに複数形になっている語句を再度複数形に変換しようとしても、現時点では例外"
"をスローすることはなく、単にそのままの文字列が返されます (単数形を単数形に変"
"換した場合も同様です) 。\n"
"\n"
"今後、何らかの変更を行なうことで他の箇所に影響が及ぶこともありうるため、この"
"モジュールの動作は将来変更されるかもしれません。それだけ自然言語を処理するの"
"はやっかいだと言うことでもあります。\n"
"\n"
"もしもうまく動作しない場合は、うまくいかなかった語句を電子メールまたは RT で"
"報告してください。修正させていただきます。"

#. leap/perl-Lingua-EN-Number-IsOrdinal/summary
msgid "detect if English number is ordinal or cardinal"
msgstr "英語で序数があるかどうかを検出するモジュール"

#. leap/perl-Lingua-EN-Number-IsOrdinal/description
msgid ""
"This module will tell you if a number, either in words or as digits, is a "
"cardinal or the ordinal number|http://www.ego4u.com/en/cram-up/vocabulary/"
"numbers/ordinal manpage.\n"
"\n"
"This is useful if you e.g. want to distinguish these types of numbers found "
"with the Lingua::EN::FindNumber manpage and take different actions."
msgstr ""
"このモジュールは数字を検出するモジュールで、英単語のほか、アラビア数字や序数"
"にも対応しています (http://www.ego4u.com/en/cram-up/vocabulary/numbers/"
"ordinal) 。\n"
"\n"
"このモジュールは、 Lingua::EN::FindNumber で見つかった数字に対して、それぞれ"
"異なる処理を行ないたい場合に便利な仕組みです。"

#. leap/perl-Lingua-EN-Sentence/summary
msgid "Split Text Into Sentences"
msgstr "テキストを文章に分解するためのモジュール"

#. leap/perl-Lingua-EN-Sentence/description
msgid ""
"The 'Lingua::EN::Sentence' module contains the function get_sentences, which "
"splits text into its constituent sentences, based on a regular expression "
"and a list of abbreviations (built in and given).\n"
"\n"
"Certain well know exceptions, such as abbreviations, may cause incorrect "
"segmentations. But some of them are already integrated into this code and "
"are being taken care of. Still, if you see that there are words causing the "
"get_sentences function to fail, you can add those to the module, so it "
"notices them."
msgstr ""
"'Lingua::EN::Sentence' モジュールでは、 get_sentences と呼ばれる関数が提供さ"
"れています。この関数は、正規表現と略称一覧 (内蔵のものを使用することができる"
"ほか、指定することもできます) を利用して、テキストを文章ごとに分割することが"
"できます。\n"
"\n"
"このようなモジュールは、略称などがあるとうまく動作せず、正しくない分割などが"
"行なわれてしまうことが知られていますが、これらのうちのいくつかは既にコード内"
"で対応済みで、配慮されるようになっています。ただし、場合によっては "
"get_sentences 関数で失敗することがありますので、モジュールに対して追加するこ"
"とで対応できるようになっています。"

#. leap/perl-Lingua-EN-Tagger/summary
msgid "Part-of-speech tagger for English natural language processing"
msgstr "英語の自然言語処理向けパートスピーチタグ作成"

#. leap/perl-Lingua-EN-Tagger/description
msgid ""
"The module is a probability based, corpus-trained tagger that assigns POS "
"tags to English text based on a lookup dictionary and a set of probability "
"values. The tagger assigns appropriate tags based on conditional "
"probabilities - it examines the preceding tag to determine the appropriate "
"tag for the current word. Unknown words are classified according to word "
"morphology or can be set to be treated as nouns or other parts of speech.\n"
"\n"
"The tagger also extracts as many nouns and noun phrases as it can, using a "
"set of regular expressions."
msgstr ""
"このモジュールは、言語資料を学習して利用する確率ベースのタグ生成器です。辞書"
"を参照して、確率値をもとにして POS タグを英語テキストに割り当てます。タグは分"
"岐の確率をベースにして設定されるもので、前のタグが次のタグに対して影響を及ぼ"
"す仕組みです。未知の単語は単語の形態素をもとに分類したりすることができるほ"
"か、名詞やスピーチの他の場所との関連づけによって分類することができます。\n"
"\n"
"このタグ生成器は多数の名詞や名詞句を、正規表現のセットを利用してできるだけ多"
"く抽出することもできます。"

#. leap/perl-Lingua-EN-Words2Nums/summary
msgid "convert English text to numbers"
msgstr "英語のテキストを数字に変換するモジュール"

#. leap/perl-Lingua-EN-Words2Nums/description
msgid ""
"This module converts English text into numbers. It supports both ordinal and "
"cardinal numbers, negative numbers, and very large numbers.\n"
"\n"
"The main subroutine, which is exported by default, is words2nums(). This "
"subroutine, when fed a string, will attempt to convert it into a number. If "
"it succeeds, the number will be returned. If it fails, it returns undef."
msgstr ""
"このモジュールは、英語のテキストを数字に変換するモジュールです。序数などのほ"
"か、負の数や巨大な数値などにも対応しています。\n"
"\n"
"既定で公開されているメインのサブルーチンは words2nums() です。このサブルーチ"
"ンに対して文字列を与えると、それを数字に変換しようとします。問題なく変換でき"
"れば、変換結果の数字が返ります。失敗した場合は undef が返ります。"

#. leap/perl-Lingua-PT-Stemmer/summary
msgid "Portuguese language stemming"
msgstr "ポルトガル語の語幹抽出"

#. leap/perl-Lingua-PT-Stemmer/description
msgid ""
"This module implements a Portuguese stemming algorithm proposed in the paper "
"*A Stemming Algorithm for the Portuguese Language* by *Moreira, V.* and "
"*Huyck, C.*\n"
"\n"
"The eight steps of stemming algorithm are listed as follows: \n"
"* * Plural Reduction \n"
"* * Feminine Reduction \n"
"* * Adverb Reduction \n"
"* * Augmentative/Diminutive Reduction \n"
"* * Noun Suffix Reduction \n"
"* * Verb Suffix Reduction \n"
"* * Vowel Reduction \n"
"* * Accents Removal"
msgstr ""
"このモジュールは、 *Moreira, V.* 氏と *Huyck, C.* 氏による記事 *A Stemming "
"Algorithm for the Portuguese Language* で提案されている、ポルトガル語の語幹抽"
"出機能を提供します。\n"
"\n"
"変換アルゴリズムは下記の 8 段階に分かれています:\n"
"* * 複数形の変換\n"
"* * 女性名詞の変換\n"
"* * 副詞の変換\n"
"* * 接頭辞／接尾辞の変換\n"
"* * 名詞に対する接尾語の変換\n"
"* * 動詞に対する接尾語の変換\n"
"* * 母音の変換\n"
"* * アクセントの削除"

#. leap/perl-Lingua-Stem/summary
msgid "Stemming of words"
msgstr "単語の語幹抽出"

#. leap/perl-Lingua-Stem/description
msgid ""
"This routine applies stemming algorithms to its parameters, returning the "
"stemmed words as appropriate to the selected locale.\n"
"\n"
"You can import some or all of the class methods.\n"
"\n"
"use Lingua::Stem qw (stem clear_stem_cache stem_caching add_exceptions "
"delete_exceptions get_exceptions set_locale get_locale :all :locale :"
"exceptions :stem :caching);\n"
"\n"
" :all        - imports  stem add_exceptions delete_exceptions "
"get_exceptions                set_locale get_locale  :stem       - imports  "
"stem  :caching    - imports  stem_caching clear_stem_cache  :locale     - "
"imports  set_locale get_locale  :exceptions - imports  add_exceptions "
"delete_exceptions get_exceptions\n"
"\n"
"Currently supported locales are:\n"
"\n"
"      DA          - Danish       DE          - German       EN          - "
"English (also EN-US and EN-UK)       FR          - French       GL          "
"- Galician       IT          - Italian       NO          - Norwegian       "
"PT          - Portuguese       RU          - Russian (also RU-RU and RU-RU."
"KOI8-R)       SV          - Swedish\n"
"\n"
"If you have the memory and lots of stemming to do, I *strongly* suggest "
"using cache level 2 and processing lists in 'big chunks' (long lists) for "
"best performance."
msgstr ""
"このルーチンは語幹抽出アルゴリズムに対してバラメータを適用するもので、選択し"
"たロケールに対して適切な抽出済み単語を返します。\n"
"\n"
"クラスメソッドは指定したもののみを取り込むことができるほか、すべてを取り込む"
"こともできます。\n"
"\n"
"use Lingua::Stem qw (stem clear_stem_cache stem_caching add_exceptions "
"delete_exceptions get_exceptions set_locale get_locale :all :locale :"
"exceptions :stem :caching);\n"
"\n"
" :all        - stem add_exceptions delete_exceptions "
"get_exceptions                set_locale get_locale をそれぞれ取り込みま"
"す。\n"
" :stem    - stem のみを取り込みます。\n"
" :caching    - stem_caching clear_stem_cache をそれぞれ取り込みます。\n"
" :locale     - set_locale get_locale をそれぞれ取り込みます。\n"
" :exceptions - add_exceptions delete_exceptions get_exceptions をそれぞれ取り"
"込みます。\n"
"\n"
"現時点で対応しているロケールは下記の通りです:\n"
"\n"
"      DA          - デンマーク語\n"
"      DE          - ドイツ語\n"
"      EN          - 英語 (EN-US および EN-UK)\n"
"      FR          - フランス語\n"
"      GL          - ガリシア語\n"
"      IT           - イタリア語\n"
"      NO          - ノルウェー語\n"
"      PT          - ポルトガル語\n"
"      RU          - ロシア語 (RU-RU および RU-RU.KOI8-R)\n"
"      SV          - スウェーデン語\n"
"\n"
"メモリを大量にお持ちで多数の語幹抽出を行なう場合は、性能を最大限に引き出すた"
"め、キャッシュレベル 2 の使用と '巨大チャンク' (巨大リスト) 内での処理をお勧"
"めします。"

#. leap/perl-Lingua-Stem-Fr/summary
msgid "Perl French Stemming"
msgstr "Perl フランス語語幹抽出"

#. leap/perl-Lingua-Stem-Fr/description
msgid ""
"This module use the a modified version of the Porter Stemming Algorithm to "
"return a stemmed words."
msgstr ""
"このモジュールは、 Porter Stemming Algorithm の修正版で、語幹抽出の結果を返す"
"仕組みです。"

#. leap/perl-Lingua-Stem-It/summary
msgid "Porter's stemming algorithm for Italian"
msgstr "イタリア語向け Porter's stemming algorithm"

#. leap/perl-Lingua-Stem-It/description
msgid ""
"This module applies the Porter Stemming Algorithm to its parameters, "
"returning the stemmed words.\n"
"\n"
"The algorithm is implemented exactly (I hope :-) as described in:\n"
"\n"
"    http://snowball.tartarus.org/algorithms/italian/stemmer.html\n"
"\n"
"The code is carefully crafted to work in conjunction with the the Lingua::"
"Stem manpage module by Benjamin Franz, from which I've also borrowed some "
"functionalities (caching and exception list)."
msgstr ""
"このモジュールは Porter Stemming Algorithm に対してパラメータを適用するもの"
"で、語幹抽出した結果を返します。\n"
"\n"
"アルゴリズムは下記に示されているものを (願わくは) 正確に実装しています:\n"
"\n"
"    http://snowball.tartarus.org/algorithms/italian/stemmer.html\n"
"\n"
"コードは Benjamin Franz 氏のモジュール Lingua::Stem と共に動作するよう注意深"
"く作られており、ここからいくつかの機能を借りています (キャッシュや例外リスト"
"など) 。"

#. leap/perl-Lingua-Stem-Ru/summary
msgid "Porter's stemming algorithm for Russian (KOI8-R only)"
msgstr "ロシア語向け Porter's stemming algorithm (KOI-8 のみ)"

#. leap/perl-Lingua-Stem-Ru/description
msgid ""
"This module applies the Porter Stemming Algorithm to its parameters, "
"returning the stemmed words.\n"
"\n"
"The algorithm is implemented exactly as described in:\n"
"\n"
"    http://snowball.tartarus.org/algorithms/russian/stemmer.html\n"
"\n"
"The code is carefully crafted to work in conjunction with the Lingua::Stem "
"module by Benjamin Franz. This stemmer is also based on the work of Aldo "
"Capini, see Lingua::Stem::It."
msgstr ""
"このモジュールは Porter Stemming Algorithm に対してパラメータを適用するもの"
"で、語幹抽出した結果を返します。\n"
"\n"
"アルゴリズムは下記に示されているものを正確に実装しています:\n"
"\n"
"    http://snowball.tartarus.org/algorithms/italian/stemmer.html\n"
"\n"
"コードは Benjamin Franz 氏のモジュール Lingua::Stem と共に動作するよう注意深"
"く作られています。この語幹抽出は Aldo Capini 氏の成果をベースにしています (詳"
"しくは Lingua::Stem::It をご覧ください) 。"

#. leap/perl-Lingua-Stem-Snowball/summary
msgid "Perl interface to Snowball stemmers"
msgstr "Snowball stemmers に対する Perl インターフェイス"

#. leap/perl-Lingua-Stem-Snowball/description
msgid ""
"Stemming reduces related words to a common root form -- for instance, \"horse"
"\", \"horses\", and \"horsing\" all become \"hors\". Most commonly, stemming "
"is deployed as part of a search application, allowing searches for a given "
"term to match documents which contain other forms of that term.\n"
"\n"
"Authors:\n"
"--------     Oleg Bartunov, <oleg at sai dot msu dot su>     Teodor Sigaev, "
"<teodor at stack dot net>     Marvin Humphrey <marvin at rectangular dot com>"
msgstr ""
"ステミングとはそれぞれの単語を 1 つの根幹となる形式に変換する処理のことを言い"
"ます。たとえば \"horse\", \"horses\", \"horsing\" は、いずれも \"hors\" とい"
"う根幹に変換することができます。より一般的に言うと、ステミングは検索アプリ"
"ケーションの一部として利用されているもので、指定した単語とその変化形を一括で"
"検索できるようにする仕組みです。\n"
"\n"
"作者:\n"
"--------     Oleg Bartunov, <oleg at sai dot msu dot su>     Teodor Sigaev, "
"<teodor at stack dot net>     Marvin Humphrey <marvin at rectangular dot com>"

#. leap/perl-Lingua-Stem-Snowball-Da/summary
msgid "Porters stemming algorithm for Denmark"
msgstr "デンマーク語向け Porters stemming algorithm"

#. leap/perl-Lingua-Stem-Snowball-Da/description
msgid ""
"The stem function takes a scalar as a parameter and stems the word according "
"to Martin Porters Danish stemming algorithm, which can be found at the "
"Snowball website: http://snowball.tartarus.org/."
msgstr ""
"この語幹抽出関数は、パラメータとしてスカラー値を取り、 Martin Porters 氏によ"
"るデンマーク語の語幹抽出アルゴリズムに従って処理を行ないます。詳しくは "
"Snowball の Web サイトをお読みください: http://snowball.tartarus.org/ 。"

#. leap/perl-Lingua-Translit/summary
msgid "Transliterates Text Between Writing Systems"
msgstr "筆記システム間のテキスト音訳"

#. leap/perl-Lingua-Translit/description
msgid ""
"Lingua::Translit can be used to convert text from one writing system to "
"another, based on national or international transliteration tables. Where "
"possible a reverse transliteration is supported.\n"
"\n"
"The term 'transliteration' describes the conversion of text from one writing "
"system or alphabet to another one. The conversion is ideally unique, mapping "
"one character to exactly one character, so the original spelling can be "
"reconstructed. Practically this is not always the case and one single letter "
"of the original alphabet can be transcribed as two, three or even more "
"letters.\n"
"\n"
"Furthermore there is more than one transliteration scheme for one writing "
"system. Therefore it is an important and necessary information, which scheme "
"will be or has been used to transliterate a text, to work integrative and be "
"able to reconstruct the original data.\n"
"\n"
"Reconstruction is a problem though for non-unique transliterations, if no "
"language specific knowledge is available as the resulting clusters of "
"letters may be ambiguous. For example, the Greek character \"PSI\" maps to "
"\"ps\", but \"ps\" could also result from the sequence \"PI\", \"SIGMA\" "
"since \"PI\" maps to \"p\" and \"SIGMA\" maps to s. If a transliteration "
"table leads to ambiguous conversions, the provided table cannot be used "
"reverse.\n"
"\n"
"Otherwise the table can be used in both directions, if appreciated. So if "
"ISO 9 is originally created to convert Cyrillic letters to the Latin "
"alphabet, the reverse transliteration will transform Latin letters to "
"Cyrillic."
msgstr ""
"Lingua::Translit は一方の筆記システムから他方の著作システムにテキストを変換す"
"るシステムで、同言語または異言語の音訳にも対応しています。また、逆方向の音訳"
"ができる場合もあります。\n"
"\n"
"'音訳' (transliteration) とは、一方の筆記システムのテキストまたはアルファベッ"
"トを、他方のものに変換する作業のことを言います。理想的には、変換はユニークな"
"仕組みで、一方の 1 文字を他方の 1 文字に正確にマッピングするもので、元のスペ"
"ルを正確に再現できるものを言います。ただし、場合によっては 1 文字が 2 文字も"
"しくはそれ以上の文字に変換される場合もあります。\n"
"\n"
"これに加えて、 1 つの筆記システムに対して複数の方式の音訳が提供されます。元の"
"テキストと併せて作業を行なう場合や、元のテキストを再構築することができるよう"
"にするため、音訳時にどの方式を利用してテキストを変換するのかは重要かつ必要な"
"情報となります。\n"
"\n"
"再構築は非ユニークな音訳の際には問題となりうるもので、たとえば変換結果を生成"
"するシステムに言語固有の知識が無い場合、変換結果は曖昧なものになってしまいま"
"す。たとえばギリシャ語の文字 \"PSI\" は \"ps\" にマッピングされますが、 \"ps"
"\" は \"PI\", \"SIGMA\" からの変換結果 (\"PI\" は \"p\" に、 \"SIGMA\" は \"s"
"\" に変換されるため) にもなりうるものです。もしも音訳結果が曖昧なものである場"
"合は、このテーブルを逆方向への変換に利用することができなくなってしまいま"
"す。\n"
"\n"
"上記以外の場合は、テーブルを両方向の変換に利用することができます。そのため、 "
"ISO 9 は元々キリル文字をラテンのアルファベットに変換するために作られました"
"が、逆方向の音訳 (ラテン文字からキリル文字へ) にも対応しています。"

#. leap/perl-Linux-DesktopFiles/summary
msgid "Fast parsing of the Linux desktop files"
msgstr "Linux desktop ファイルの高速な処理"

#. leap/perl-Linux-DesktopFiles/description
msgid ""
"The 'Linux::DesktopFiles', a very fast and simple way to parse the Linux "
"desktop files."
msgstr ""
"'Linux::DesktopFiles' は、非常に高速でシンプルな Linux desktop ファイル処理モ"
"ジュールです。"

#. leap/perl-Linux-Inotify2/summary
msgid "Scalable directory/file change notification"
msgstr "スケーラブルなディレクトリ／ファイルの変更通知"

#. leap/perl-Linux-Inotify2/description
msgid ""
"This module implements an interface to the Linux 2.6.13 and later Inotify "
"file/directory change notification system.\n"
"\n"
"It has a number of advantages over the Linux::Inotify module:\n"
"\n"
"   - it is portable (Linux::Inotify only works on x86)    - the equivalent "
"of fullname works correctly    - it is better documented    - it has "
"callback-style interface, which is better suited for      integration.\n"
"\n"
"As for the inotify API itself - it is a very tricky, and somewhat unreliable "
"API. For a good overview of the challenges you might run into, see this LWN "
"article: https://lwn.net/Articles/605128/."
msgstr ""
"このモジュールは Linux 2.6.13 およびそれ以降で提供されるようになった、 "
"inotify ファイル／ディレクトリ変更通知システムに対するインターフェイスを実装"
"するものです。\n"
"\n"
"Linux::Inotify モジュールに比べると、多数の改善が図られています。\n"
"\n"
"   - 可搬性があります (Linux::Inotify は x86 でしか動作しませんでした)    - "
"fullname と等価な機能が正しく動作します    - より適切に文書化されています    "
"- コールバック型のインターフェイスが用意されていますので、統合に便利です。\n"
"\n"
"inotify それ自身については、トリッキーで幾分信頼性に欠ける API になっていま"
"す。詳しい仕組みについて知りたい場合は、 https://lwn.net/Articles/605128/ に"
"ある LWN の記事をお読みになると良いでしょう。"

#. leap/perl-Linux-Pid/summary
msgid "Get the native PID and the PPID on Linux"
msgstr "Linux でのネイティブ PID および PPID の取得"

#. leap/perl-Linux-Pid/description
msgid ""
"Why should one use a module to get the PID and the PPID of a process where "
"there are the '$$' variable and the 'getppid()' builtin ? (Not mentioning "
"the equivalent 'POSIX::getpid()' and 'POSIX::getppid()' functions.)\n"
"\n"
"In fact, this is useful on Linux, with multithreaded programs. Linux' C "
"library, using the linux thread model, returns different values of the PID "
"and the PPID from different threads. (Other thread models such as NPTL don't "
"have the same behaviour). This module forces perl to call the underlying C "
"functions 'getpid()' and 'getppid()'."
msgstr ""
"一般に、内蔵変数である '$$' や内蔵関数 'getppid()' を利用すれば、 PID や "
"PPID を取得できてしまいます (同等の機能を提供する 'POSIX::getpid()' や "
"'POSIX::getppid()' 関数については例外とします) が、なぜこのようなモジュールが"
"必要なのでしょうか？\n"
"\n"
"事実、 Linux でマルチスレッド型のプログラムを作成する場合には、このモジュール"
"が便利です。 Linux スレッドモデルを採用する Linux C ライブラリでは、各スレッ"
"ドで PID と PPID が異なる値に設定されます (一方、 NPTL のスレッドでは動作が異"
"なります) 。このモジュールを利用することで、 Perl に対して C 関数である "
"'getpid()' および 'getppid()' の使用を強制することができます。"

#. leap/perl-List-AllUtils/summary
msgid ""
"Combines List::Util, List::SomeUtils and List::UtilsBy in one bite-sized[cut]"
msgstr ""
"List::Util, List::SomeUtils and List::UtilsBy を一囓りのサイズにまとめたモ"
"ジュール"

#. leap/perl-List-AllUtils/description
msgid ""
"Are you sick of trying to remember whether a particular helper is defined in "
"List::Util, List::SomeUtils or List::UtilsBy? I sure am. Now you don't have "
"to remember. This module will export all of the functions that either of "
"those three modules defines.\n"
"\n"
"Note that all function documentation has been shamelessly copied from List::"
"Util, List::SomeUtils and List::UtilsBy."
msgstr ""
"List::Util, List::SomeUtils, List::UtilsBy でそれぞれ定義されている各ヘルパー"
"を覚えるのが面倒ではありませんか？私は面倒に感じています。このモジュールを利"
"用すれば、これら 3 種類のモジュールが定義するすべての関数を、一括で公開するこ"
"とができます。\n"
"\n"
"なお、関数のドキュメンテーションは、恥ずかしながら List::Util, List::"
"SomeUtils, List::UtilsBy からコピーしてあります。"

#. leap/perl-List-BinarySearch-XS/summary
msgid "Binary Search a sorted array with XS routines."
msgstr "並べ替えられた配列をバイナリ検索する XS ルーチン"

#. leap/perl-List-BinarySearch-XS/description
msgid ""
"A binary search searches _sorted_ lists using a divide and conquer "
"technique. On each iteration the search domain is cut in half, until the "
"result is found. The computational complexity of a binary search is O(log "
"n).\n"
"\n"
"This module implements several Binary Search algorithms using XS code for "
"optimal performance. You are free to use this module directly, or as a "
"plugin for the more general List::BinarySearch.\n"
"\n"
"The binary search algorithm implemented in this module is known as a "
"_Deferred Detection_ Binary Search. Deferred Detection provides *stable "
"searches*. Stable binary search algorithms have the following "
"characteristics, contrasted with their unstable binary search cousins: \n"
"* * In the case of non-unique keys, a stable binary search will always   "
"return the lowest-indexed matching element.  An unstable binary search   "
"would   return the first one found, which may not be the chronological "
"first. \n"
"* * Best and worst case time complexity is always O(log n).  Unstable   "
"searches may stop once the target is found, but in the worst case are   "
"still   O(log n).  In practical terms, this difference is usually not "
"meaningful. \n"
"* * Stable binary searches only require one relational comparison of a   "
"given pair of data elements per iteration, where unstable binary searches   "
"require two comparisons per iteration. \n"
"* * The net result is that although an unstable binary search might have   "
"better \"best case\" performance, the fact that a stable binary search "
"gets   away   with fewer comparisons per iteration gives it better "
"performance in the   worst   case, and approximately equal performance in "
"the average case. By trading   away   slightly better \"best case\" "
"performance, the stable search gains the   guarantee   that the element "
"found will always be the lowest-indexed element in a   range of   non-unique "
"keys."
msgstr ""
"分割統治法を使用する並べ替え済みリストのバイナリ検索です。それぞれの列挙で領"
"域を半分に分割していき、結果が見つかるまで繰り替えし処理を行ないます。バイナ"
"リ検索での計算の複雑性は O(log n) です。\n"
"\n"
"このモジュールは性能を改善する目的で、 XS コードを利用したバイナリ検索アルゴ"
"リズムをいくつか実装しています。このモジュールを直接使用してもかまいません"
"し、一般的な List::BinarySearch のプラグインとして使用してもかまいません。\n"
"\n"
"このモジュールにおけるバイナリ検索のアルゴリズムは _Deferred Detection_ とし"
"ても知られていて、この _Deferred Detection_ は安定的な検索を提供します。安定"
"的な検索アルゴリズムでは、不安定な検索アルゴリズムと比較すると下記のような特"
"性があります:\n"
"* * ユニークではないキーが存在する場合、バイナリ検索は常に該当する要素の中に"
"ある最初の値を返すことになります。不安定なバイナリ検索では、最初のもの以外を"
"返す場合があります。\n"
"* * 最悪の場合でも最良の場合でも、計算の複雑性は常に O(log n) になります。不"
"安定な検索では目的の値が見つかった時点で停止しますが、最悪の場合 O(log n) に"
"なります。実用的な観点では通常意味はありません。\n"
"* * 安定的なバイナリ検索では列挙ごとに 1 つの対に対して 1 回の関係比較が行な"
"われますが、不安定なバイナリ検索では 2 回の比較が必要になります。\n"
"* * 全体的な結果では、不安定なバイナリ検索のほうが \"最適な場合\" の性能が高"
"くなりますが、安定したバイナリ検索の場合のほうが比較回数が少なくなるという事"
"実から、最悪の場合の性能が向上することになります。また、平均的にはほぼ同等の"
"性能になります。\n"
"安定的な検索では \"最適な場合\" の性能を少し無駄にしてしまう代わりに、ユニー"
"クではないキーが存在する場合でも最初の要素を返すことが保証されます。"

#. leap/perl-List-Compare/summary
#. leap/perl-List-Compare/description
msgid "Compare elements of two or more lists"
msgstr "2 つもしくは複数のリスト内の要素の比較"

#. leap/perl-List-MoreUtils/summary
#. leap/perl-List-SomeUtils/summary
msgid "Provide the stuff missing in List::Util"
msgstr "List::Util では提供されていない機能の提供"

#. leap/perl-List-MoreUtils/description
msgid ""
"*List::MoreUtils* provides some trivial but commonly needed functionality on "
"lists which is not going to go into List::Util.\n"
"\n"
"All of the below functions are implementable in only a couple of lines of "
"Perl code. Using the functions from this module however should give slightly "
"better performance as everything is implemented in C. The pure-Perl "
"implementation of these functions only serves as a fallback in case the C "
"portions of this module couldn't be compiled on this machine."
msgstr ""
"*List::MoreUtils* は、リストに対する機能のうち List::Util には取り入れられな"
"かった、細かくも一般的に必要となるだろう機能が含まれています。\n"
"\n"
"下記に示す全ての機能は、複数行の Perl コードだけで実装可能なものですが、これ"
"らのモジュールが提供する機能は、全てを C 言語で実装した場合と同じくらい比較的"
"高速に動作します。これらの機能の純粋な Perl 版は、このモジュールが対象のマシ"
"ンでコンパイルできなかった場合のフォールバックとしてのみ動作します。"

#. leap/perl-List-MoreUtils-XS/summary
msgid "Provide compiled List::MoreUtils functions"
msgstr "コンパイル型 List::MoreUtils 機能"

#. leap/perl-List-MoreUtils-XS/description
msgid ""
"List::MoreUtils::XS is a backend for List::MoreUtils. Even if it's possible "
"(because of user wishes) to have it practically independent from List::"
"MoreUtils, it technically depend on 'List::MoreUtils'. Since it's only a "
"backend, the API is not public and can change without any warning."
msgstr ""
"List::MoreUtils::XS は List::MoreUtils に対するバックエンドです。 (ユーザが望"
"むとおり) List::MoreUtils から独立して作成することも可能ではあるのですが、技"
"術的に 'List::MoreUtils' に依存した作りになっています。また、このモジュールは"
"バックエンドであるため、 API は公開されておらず、警告無しに内容が変更されま"
"す。"

#. leap/perl-List-SomeUtils/description
msgid ""
"*List::SomeUtils* provides some trivial but commonly needed functionality on "
"lists which is not going to go into List::Util.\n"
"\n"
"All of the below functions are implementable in only a couple of lines of "
"Perl code. Using the functions from this module however should give slightly "
"better performance as everything is implemented in C. The pure-Perl "
"implementation of these functions only serves as a fallback in case the C "
"portions of this module couldn't be compiled on this machine."
msgstr ""
"*List::SomeUtils* は、リストに対する機能のうち List::Util には取り入れられな"
"かった、細かくも一般的に必要となるだろう機能が含まれています。\n"
"\n"
"下記に示す全ての機能は、複数行の Perl コードだけで実装可能なものですが、これ"
"らのモジュールが提供する機能は、全てを C 言語で実装した場合と同じくらい比較的"
"高速に動作します。これらの機能の純粋な Perl 版は、このモジュールが対象のマシ"
"ンでコンパイルできなかった場合のフォールバックとしてのみ動作します。"

#. leap/perl-List-SomeUtils-XS/summary
msgid "XS implementation for List::SomeUtils"
msgstr "List::SomeUtils 向け XS 実装"

#. leap/perl-List-SomeUtils-XS/description
msgid ""
"There are no user-facing parts here. See List::SomeUtils for API details.\n"
"\n"
"You shouldn't have to install this module directly. When you install List::"
"SomeUtils, it checks whether your system has a compiler. If it does, then it "
"adds a dependency on this module so that it gets installed and you have the "
"faster XS implementation.\n"
"\n"
"This distribution requires List::SomeUtils but to avoid a circular "
"dependency, that dependency is explicitly left out from the this "
"distribution's metadata. However, without LSU already installed this module "
"cannot function."
msgstr ""
"ここにはユーザに対する説明は書かれていません。 API についての詳細は List::"
"SomeUtils をお読みください。\n"
"\n"
"このモジュールは直接インストールすべきものではありません。 List::SomeUtils を"
"インストールすると、お使いのシステムにコンパイラが存在するかどうかを確認しま"
"す。コンパイラが存在すると、このモジュールに対して依存関係が設定され、インス"
"トールしてより高速な XS 実装を利用するようになります。\n"
"\n"
"この配布物は List::SomeUtils を必要としていますが、これは依存関係の循環を避け"
"るための措置であり、この配布物のメタデータから明示的に除外されるものです。し"
"かしながら、 LSU 無しにはこのモジュールは動作しません。"

#. leap/perl-List-UtilsBy/summary
msgid "Higher-Order List Utility Functions"
msgstr "高レベルのリストユーティリティ関数"

#. leap/perl-List-UtilsBy/description
msgid ""
"This module provides a number of list utility functions, all of which take "
"an initial code block to control their behaviour. They are variations on "
"similar core perl or 'List::Util' functions of similar names, but which use "
"the block to control their behaviour. For example, the core Perl function "
"'sort' takes a list of values and returns them, sorted into order by their "
"string value. The 'sort_by' function sorts them according to the string "
"value returned by the extra function, when given each value.\n"
"\n"
" my @names_sorted = sort @names;\n"
"\n"
" my @people_sorted = sort_by { $_->name } @people;"
msgstr ""
"このモジュールは複数のリストユーティリティ関数を提供するもので、いずれもその"
"動作を制御するのに初期コードブロックを利用します。これらは Perl の中枢内、も"
"しくは 'List::Util' 関数などで提供されている機能の派生版ですが、こちらはその"
"動作を制御するのに初期コードブロックを利用することができる仕組みです。たとえ"
"ば Perl 関数の 'sort' は値のリストをパラメータとして受け取って同じ型を返しま"
"すが、並べ替えにあたってはその文字列値をキーにします。 'sort_by' 関数では、"
"コードブロック内で返された文字列を元にして、並べ替えを行ないます。\n"
"\n"
" my @names_sorted = sort @names;\n"
"\n"
" my @people_sorted = sort_by { $_->name } @people;"

#. leap/perl-Locale-Maketext-Gettext/summary
msgid "Joins the gettext and Maketext frameworks"
msgstr "gettext と Maketext のフレームワークの合体"

#. leap/perl-Locale-Maketext-Gettext/description
msgid ""
"Locale::Maketext::Gettext joins the GNU gettext and Maketext frameworks. It "
"is a subclass of Locale::Maketext(3) that follows the way GNU gettext works. "
"It works seamlessly, _both in the sense of GNU gettext and Maketext_. As a "
"result, you _enjoy both their advantages, and get rid of both their "
"problems, too._\n"
"\n"
"You start as a usual GNU gettext localization project: Work on PO files with "
"the help of translators, reviewers and Emacs. Turn them into MO files with "
"_msgfmt_. Copy them into the appropriate locale directory, such as _/usr/"
"share/locale/de/LC_MESSAGES/myapp.mo_.\n"
"\n"
"Then, build your Maketext localization class, with your base class changed "
"from Locale::Maketext(3) to Locale::Maketext::Gettext. That is all."
msgstr ""
"Locale::Maketext::Gettext は GNU gettext と Maketext フレームワークを組み合わ"
"せたものです。これは Locale::Maketext(3) のサブクラスで、 GNU gettext と同じ"
"処理を行ないます。このモジュールは GNU gettext と Maketext の両方の考え方を"
"シームレスに取り入れています。そのために両方の利点を生かすことができるほか、"
"両方の問題点もうまく回避できるようになっています。\n"
"\n"
"GNU gettext で一般的なローカライズを行なう場合、まずは翻訳者やレビュアー、そ"
"して emacs 等の助けの元に PO ファイルを処理します。 PO ファイルは _msgfmt_ "
"で MO ファイルに変換して、それを _/usr/share/locale/de/LC_MESSAGES/myapp.mo_ "
"のような適切なロケールディレクトリに配置します。\n"
"\n"
"その後、 Maketext ローカライズクラスを構築して、ベースクラスを Locale::"
"Maketext(3) から Locale::Maketext::Gettext に変更します。これだけです。"

#. leap/perl-Locale-Maketext-Lexicon/summary
msgid "Use other catalog formats in Maketext"
msgstr "Maketext で他のカタログ形式を使用するモジュール"

#. leap/perl-Locale-Maketext-Lexicon/description
msgid ""
"This module provides lexicon-handling modules to read from other "
"localization formats, such as _Gettext_, _Msgcat_, and so on.\n"
"\n"
"If you are unfamiliar with the concept of lexicon modules, please consult "
"the Locale::Maketext manpage and the 'webl10n' HTML files in the 'docs/' "
"directory of this module.\n"
"\n"
"A command-line utility the xgettext.pl manpage is also installed with this "
"module, for extracting translatable strings from source files."
msgstr ""
"このモジュールは、他のローカライズ用フォーマット、たとえば _Gettext_ や "
"_Msgcat_ などの形式を読み込むことができる語彙処理モジュールです。\n"
"\n"
"語彙モジュールの考え方について詳しく知りたい場合は、 Locale::Maketext のマ"
"ニュアルページと、本モジュールの 'docs/' ディレクトリ以下にある 'webl10n' "
"HTML ファイルをお読みください。\n"
"\n"
"コマンドラインユーティリティ xgettext.pl のマニュアルページも、本モジュールと"
"ともにインストールされます。これはソースファイルから翻訳可能な文字列を取り出"
"す際に使用します。"

#. leap/perl-Locale-Msgfmt/summary
#. leap/perl-Locale-Msgfmt/description
msgid "Compile .po files to .mo files"
msgstr ".po ファイルから .mo ファイルへのコンパイル"

#. leap/perl-Locale-US/summary
msgid ""
"Two letter codes for state identification in the United States and vice versa"
msgstr ""
"アメリカ合衆国内での 2 文字の州コードと、その州名を相互に変換するモジュール"

#. leap/perl-Locale-US/description
msgid ""
"Two letter codes for state identification in the United States and vice "
"versa."
msgstr ""
"アメリカ合衆国内での 2 文字の州コードと、その州名を相互に変換するモジュールで"
"す。"

#. leap/perl-LockFile-Simple/summary
msgid "Simple file locking scheme"
msgstr "シンプルなファイルロック (施錠) スキーム"

#. leap/perl-LockFile-Simple/description
msgid ""
"This simple locking scheme is not based on any file locking system calls "
"such as 'flock()' or 'lockf()' but rather relies on basic file system "
"primitives and properties, such as the atomicity of the 'write()' system "
"call. It is not meant to be exempt from all race conditions, especially over "
"NFS. The algorithm used is described below in the *ALGORITHM* section.\n"
"\n"
"It is possible to customize the locking operations to attempt locking once "
"every 5 seconds for 30 times, or delete stale locks (files that are deemed "
"too ancient) before attempting the locking."
msgstr ""
"このシンプルなロック (施錠) スキームは、 'flock()' や 'lockf()' のようなファ"
"イルロックのためのシステムコールをベースにしたものではなく、 'write()' システ"
"ムコールのアトミック性など、基本的なファイルプリミティブやプロパティに依存し"
"て作られています。ただし、 NFS 経由のファイルシステムなど、競合状態によって発"
"生する問題を回避する仕組みではありません。使用されているアルゴリズムについ"
"て、詳しくは *ALGORITHM* セクションをお読みください。\n"
"\n"
"なお、ロック操作を 5 秒間隔で 30 回試行するようにカスタマイズすることもできる"
"ほか、失効したロック (すでに使われていないものと判断できるロック) を解除して"
"から、ロックし直すこともできます。"

#. leap/perl-Log-Any/summary
msgid "Bringing loggers and listeners together"
msgstr "ロガーとリスナの合体"

#. leap/perl-Log-Any/description
msgid ""
"'Log::Any' provides a standard log production API for modules. Log::Any::"
"Adapter allows applications to choose the mechanism for log consumption, "
"whether screen, file or another logging mechanism like Log::Dispatch or Log::"
"Log4perl.\n"
"\n"
"Many modules have something interesting to say. Unfortunately there is no "
"standard way for them to say it - some output to STDERR, others to 'warn', "
"others to custom file logs. And there is no standard way to get a module to "
"start talking - sometimes you must call a uniquely named method, other times "
"set a package variable.\n"
"\n"
"This being Perl, there are many logging mechanisms available on CPAN. Each "
"has their pros and cons. Unfortunately, the existence of so many mechanisms "
"makes it difficult for a CPAN author to commit his/her users to one of them. "
"This may be why many CPAN modules invent their own logging or choose not to "
"log at all.\n"
"\n"
"To untangle this situation, we must separate the two parts of a logging API. "
"The first, _log production_, includes methods to output logs (like '$log-"
">debug') and methods to inspect whether a log level is activated (like '$log-"
">is_debug'). This is generally all that CPAN modules care about. The second, "
"_log consumption_, includes a way to configure where logging goes (a file, "
"the screen, etc.) and the code to send it there. This choice generally "
"belongs to the application.\n"
"\n"
"A CPAN module uses 'Log::Any' to get a log producer object. An application, "
"in turn, may choose one or more logging mechanisms via Log::Any::Adapter, or "
"none at all.\n"
"\n"
"'Log::Any' has a very tiny footprint and no dependencies beyond Perl 5.8.1, "
"which makes it appropriate for even small CPAN modules to use. It defaults "
"to 'null' logging activity, so a module can safely log without worrying "
"about whether the application has chosen (or will ever choose) a logging "
"mechanism.\n"
"\n"
"See http://www.openswartz.com/2007/09/06/standard-logging-api/ for the "
"original post proposing this module."
msgstr ""
"'Log::Any' はモジュールに対して標準的なログ出力 API を提供するものです。ま"
"た、 Log::Any::Adapter はアプリケーションに対して、ログの出力先 (画面、ファイ"
"ル、もしくは Log::Dispatch や Log::Log4perl などの他のログ機構など) を選択す"
"る仕組みを提供します。\n"
"\n"
"様々なモジュールでログの出力機能は用意されているのですが、不幸なことにそれら"
"は標準化されていません。モジュールによっては STDERR に出力するほか、 'warn' "
"で出力したり、独自のファイルログに出力したりしています。また、ログ出力モ"
"ジュールの取得方法も標準化されていません。独自の名前のメソッドを呼び出す必要"
"があるもののほか、パッケージ変数で取得できるものもあります。\n"
"\n"
"Perl の世界では、 CPAN 内に多数のログ機構が用意されています。それらには良い点"
"も悪い点もあるのですが、こちらも不幸なことに、既存の多数のログ出力機構では、"
"ユーザから CPAN 作者へのコミットが難しい仕組みになっています。このような理由"
"から、 CPAN モジュールの作者は独自のログ出力機構を別々に用意する結果になって"
"しまっています。\n"
"\n"
"このような問題を解決するため、我々はまずログ API を 2 つのパーツに分解しまし"
"た。一方は _ログ出力_ 機能と呼べる仕組みで、 '$log->debug' のようなログの出力"
"メソッドのほか、 '$log->is_debug' のように特定のログベルが有効化されているか"
"どうかを調べるメソッドが含まれます。これは様々な CPAN モジュールでも提供され"
"ているものです。もう一方は _ログ消費_ 機能と呼べる仕組みで、ログの行き先 "
"(ファイル／画面など) を設定する方法を提供するものです。こちらは一般にアプリ"
"ケーション側に属するものです。\n"
"\n"
"CPAN モジュール側では 'Log::Any' を利用することで、ログ出力オブジェクトを取得"
"することができます。アプリケーション側では、 Log::Any::Adapter を介してログの"
"出力先を規定することができますし、どこにも出力しないようにすることもできま"
"す。\n"
"\n"
"'Log::Any' は非常に小さいモジュールであり、 Perl 5.8.1 以降では一切の依存関係"
"がありません。このような構造により、小さな CPAN モジュールでよりよく動作する"
"ようになっています。また、既定では 'null' ログ出力になっているため、予期しな"
"い場所に出力されてしまうようなこともありません。\n"
"\n"
"このモジュールを提案していた元々の投稿については、 http://www.openswartz."
"com/2007/09/06/standard-logging-api/ をご覧ください。"

#. leap/perl-Log-Contextual/summary
msgid "Simple logging interface with a contextual log"
msgstr "状況依存のシンプルなログインターフェイス"

#. leap/perl-Log-Contextual/description
msgid ""
"Major benefits: \n"
"* * Efficient\n"
"\n"
"The default logging functions take blocks, so if a log level is disabled, "
"the block will not run:\n"
"\n"
"   log_debug { \"the new count in the database is \" . $rs->count };\n"
"\n"
"Similarly, the 'D' prefixed methods only 'Dumper' the input if the level is "
"enabled. \n"
"* * Handy\n"
"\n"
"The logging functions return their arguments, so you can stick them in the "
"middle of expressions:\n"
"\n"
" for (log_debug { \"downloading:\\n\" . join qq(\\n), @_ } @urls) { ... } \n"
"* * Generic\n"
"\n"
"'Log::Contextual' is an interface for all major loggers. If you log through "
"'Log::Contextual' you will be able to swap underlying loggers later. \n"
"* * Powerful\n"
"\n"
"'Log::Contextual' chooses which logger to use based on user defined "
"'CodeRef's. Normally you don't need to know this, but you can take advantage "
"of it when you need to later. \n"
"* * Scalable\n"
"\n"
"If you just want to add logging to your basic application, start with Log::"
"Contextual::SimpleLogger and then as your needs grow you can switch to Log::"
"Dispatchouli or Log::Dispatch or Log::Log4perl or whatever else.\n"
"\n"
"This module is a simple interface to extensible logging. It exists to "
"abstract your logging interface so that logging is as painless as possible, "
"while still allowing you to switch from one logger to another.\n"
"\n"
"It is bundled with a really basic logger, Log::Contextual::SimpleLogger, but "
"in general you should use a real logger instead. For something more serious "
"but not overly complicated, try Log::Dispatchouli (see SYNOPSIS for example.)"
msgstr ""
"主な利点:\n"
"* * 効率的であること\n"
"\n"
"ログ関数には既定ではコードブロックを指定しますが、指定したログレベルが無効化"
"されている場合、ブロックは実行されなくなります:\n"
"\n"
"   log_debug { \"the new count in the database is \" . $rs->count };\n"
"\n"
"同様に 'D' で始まるメソッドは、指定したログレベルが有効化されている場合にの"
"み、 'Dumper' されます。\n"
"* * 扱いやすい仕組みであること\n"
"\n"
"ログ関数はパラメータをそのまま返す仕組みであるため、下記のようにして表現の中"
"に組み込むことができます:\n"
"\n"
" for (log_debug { \"downloading:\\n\" . join qq(\\n), @_ } @urls) { ... }\n"
"* * 汎用的であること\n"
"\n"
"'Log::Contextual' はメジャーなログ出力すべてに対するインターフェイスです。 "
"'Log::Contextual' を介してログ出力するだけで、出力先を後から切り替えることが"
"できます。\n"
"* * パワフルであること\n"
"\n"
"'Log::Contextual' はユーザが定義した 'コード参照' をベースにしてログの出力を"
"選択します。普通は知っておく必要がないものですが、必要になった時にその利点が"
"わかるようになるものと思います。\n"
"* * スケーラブルであること\n"
"\n"
"開発中のアプリケーションでログの出力機能を追加したいだけであれば、まず Log::"
"Contextual::SimpleLogger をお使いになり、必要に応じて後から Log::"
"Dispatchouli, Log::Dispatch, Log::Log4perl などに切り替えていくことができま"
"す。\n"
"\n"
"このモジュールは広範囲のログ機能に対応するため、シンプルなインターフェイスに"
"なっています。これにより、お使いのログインターフェイスを抽象化できることか"
"ら、一方の出力先から他方に切り替える際も、できる限り負担無くログ出力ができる"
"ようになっています。\n"
"\n"
"また、このモジュールには、基本的なログ出力機能を有する Log::Contextual::"
"SimpleLogger が付属していますが、一般的には実際のログ出力機能を利用した方がよ"
"いでしょう。また、本格的にログ出力機能を実装したい場合は、 Log::Dispatchouli "
"をお試しください (SYNOPSIS に例が載っています) 。"

#. leap/perl-Log-Dispatch/summary
msgid "Dispatches messages to one or more outputs"
msgstr "メッセージを 1 つまたは複数の宛先に出力するモジュール"

#. leap/perl-Log-Dispatch/description
msgid ""
"This module manages a set of Log::Dispatch::* output objects that can be "
"logged to via a unified interface.\n"
"\n"
"The idea is that you create a Log::Dispatch object and then add various "
"logging objects to it (such as a file logger or screen logger). Then you "
"call the 'log' method of the dispatch object, which passes the message to "
"each of the objects, which in turn decide whether or not to accept the "
"message and what to do with it.\n"
"\n"
"This makes it possible to call single method and send a message to a log "
"file, via email, to the screen, and anywhere else, all with very little code "
"needed on your part, once the dispatching object has been created."
msgstr ""
"このモジュールは Log::Dispatch::* の出力オブジェクトを管理するもので、単一の"
"インターフェイスからログ機能を提供します。\n"
"\n"
"Log::Dispatch オブジェクトを作成し、様々なログオブジェクトをそれに追加します"
"(たとえばファイルロガーや画面ロガーなど) 。それらは Dispatch オブジェクト"
"の'log' メソッドで呼び出すことができ、メッセージを受け渡すことができます。ロ"
"グオブジェクト側ではメッセージを受け取るかどうかを判断したり、それらを処理し"
"たりします。\n"
"\n"
"このような仕組みにより、単一のメソッドからファイルやメール、画面などの出力先"
"に送信することができるため、独自に作成するコードを非常に小さくすることができ"
"ます。"

#. leap/perl-Log-Dispatch-Array/summary
msgid "log events to an array (reference)"
msgstr "ログイベントを配列 (参照) に出力するモジュール"

#. leap/perl-Log-Dispatch-Array/description
msgid ""
"This provides a Log::Dispatch log output system that appends logged events "
"to an array reference. This is probably only useful for testing the logging "
"of your code."
msgstr ""
"このモジュールは、 Log::Dispatch のログ出力システムを提供するもので、イベント"
"を配列の参照に記録するものです。お使いのコードのテスト用に便利な仕組みです。"

#. leap/perl-Log-Dispatch-Config/summary
msgid "Log4j for Perl"
msgstr "Perl 向け log4j"

#. leap/perl-Log-Dispatch-Config/description
msgid ""
"Log::Dispatch::Config is a subclass of Log::Dispatch and provides a way to "
"configure Log::Dispatch object with configulation file (default, in "
"AppConfig format). I mean, this is log4j for Perl, not with all API "
"compatibility though."
msgstr ""
"Log::Dispatch::Config は Log::Dispatch のサブクラスで、設定ファイル (既定で"
"は AppConfig 形式) を利用して Log::Dispatch オブジェクトを設定する機能を提供"
"します。言わば Perl 向けの log4j とも呼べる仕組みですが、 API の互換性はあり"
"ません。"

#. leap/perl-Log-Dispatch-FileRotate/summary
msgid "Log to Files that Archive/Rotate Themselves"
msgstr "アーカイブ処理やローテート処理を行なうログ機能"

#. leap/perl-Log-Dispatch-FileRotate/description
msgid ""
"This module extends the base class Log::Dispatch::Output to provides a "
"simple object for logging to files under the Log::Dispatch::* system, and "
"automatically rotating them according to different constraints. This is "
"basically a Log::Dispatch::File wrapper with additions."
msgstr ""
"このモジュールはベースクラスである Log::Dispatch::Output を拡張したもので、 "
"Log::Dispatch:* システム内のファイルに対して動作するシンプルなオブジェクト"
"で、様々な条件で自動的にローテート処理を行なわせることができます。基本的には "
"Log::Dispatch::File のラッパーに機能を追加したものです。"

#. leap/perl-Log-Dispatchouli/summary
msgid "Simple wrapper around Log::Dispatch"
msgstr "Log::Dispatch に対するシンプルなラッパー"

#. leap/perl-Log-Dispatchouli/description
msgid ""
"Log::Dispatchouli is a thin layer above Log::Dispatch and meant to make it "
"dead simple to add logging to a program without having to think much about "
"categories, facilities, levels, or things like that. It is meant to make "
"logging just configurable enough that you can find the logs you want and "
"just easy enough that you will actually log things.\n"
"\n"
"Log::Dispatchouli can log to syslog (if you specify a facility), standard "
"error or standard output, to a file, or to an array in memory. That last one "
"is mostly useful for testing.\n"
"\n"
"In addition to providing as simple a way to get a handle for logging "
"operations, Log::Dispatchouli uses String::Flogger to process the things to "
"be logged, meaning you can easily log data structures. Basically: strings "
"are logged as is, arrayrefs are taken as (sprintf format, args), and "
"subroutines are called only if needed. For more information read the String::"
"Flogger docs."
msgstr ""
"Log::Dispatchouli は Log::Dispatch に対する薄いレイヤで、様々なカテゴリやファ"
"シリティ、レベル等々を考慮することなく、プログラム側にログ出力機能を提供する"
"シンプルな仕組みです。これは、ログを設定するだけで作業が完了し、すぐにログ出"
"力を行なうことができるようにするためのものです。\n"
"\n"
"Log::Dispatchouli は syslog (ファシリティを指定した場合) のほか、標準エラー出"
"力や標準出力、ファイルやメモリ内の配列にそれぞれ出力することができます。メモ"
"リ内の配列は主にテスト用のものです。\n"
"\n"
"ログ操作に対してハンドルを得るためのシンプルな方法に加えて、 Log::"
"Dispatchouli では String::Flogger を利用して対象となるログの処理を行ない、ロ"
"グのデータ構造を簡単に作ることができます。基本的には、文字列はそのまま、配列"
"の参照はその内容を (sprintf format, args) 、サブルーチンは必要なときにのみ呼"
"び出されます。詳しくは String::Flogger をお読みください。"

#. leap/perl-Log-Log4perl/summary
msgid "Log4j implementation for Perl"
msgstr "Perl 向け log4j 実装"

#. leap/perl-Log-Log4perl/description
msgid ""
"Log::Log4perl lets you remote-control and fine-tune the logging behaviour of "
"your system from the outside. It implements the widely popular (Java-based) "
"Log4j logging package in pure Perl. \n"
"*For a detailed tutorial on Log::Log4perl usage, please read*\n"
"\n"
"http://www.perl.com/pub/a/2002/09/11/log4perl.html\n"
"\n"
"Logging beats a debugger if you want to know what's going on in your code "
"during runtime. However, traditional logging packages are too static and "
"generate a flood of log messages in your log files that won't help you.\n"
"\n"
"'Log::Log4perl' is different. It allows you to control the number of logging "
"messages generated at three different levels:\n"
"\n"
"  * At a central location in your system (either in a configuration file or "
"in the startup code) you specify _which components_ (classes, functions) of "
"your system should generate logs.\n"
"\n"
"  * You specify how detailed the logging of these components should be by "
"specifying logging _levels_.\n"
"\n"
"  * You also specify which so-called _appenders_ you want to feed your log "
"messages to (\"Print it to the screen and also append it to /tmp/my.log\") "
"and which format (\"Write the date first, then the file name and line "
"number, and then the log message\") they should be in.\n"
"\n"
"This is a very powerful and flexible mechanism. You can turn on and off your "
"logs at any time, specify the level of detail and make that dependent on the "
"subsystem that's currently executed.\n"
"\n"
"Let me give you an example: You might find out that your system has a "
"problem in the 'MySystem::Helpers::ScanDir' component. Turning on detailed "
"debugging logs all over the system would generate a flood of useless log "
"messages and bog your system down beyond recognition. With 'Log::Log4perl', "
"however, you can tell the system: \"Continue to log only severe errors to "
"the log file. Open a second log file, turn on full debug logs in the "
"'MySystem::Helpers::ScanDir' component and dump all messages originating "
"from there into the new log file\". And all this is possible by just "
"changing the parameters in a configuration file, which your system can re-"
"read even while it's running!"
msgstr ""
"Log::Log4perl は、お使いのシステムにおけるログ動作を、ソースコードの外側から"
"リモート制御／調整することのできるモジュールです。よく知られた (Java ベース"
"の)log4j ログパッケージを、純粋な Perl のみで作成したものといえます。\n"
"*Log::Log4perl の使用方法について、詳しくは下記をお読みください*\n"
"\n"
"    http://www.perl.com/pub/a/2002/09/11/log4perl.html\n"
"\n"
"ログ機能はデバッガにも匹敵する機能で、お使いのコードを実行する際、何が起こっ"
"ているのかを知ることができる機能です。従来のログパッケージは、あまりにも柔軟"
"性がなく、ログファイル内に大量のメッセージを出力してしまい、あまり助けにはな"
"りませんでした。\n"
"\n"
"'Log::Log4perl' はこのようなものではありません。 3 種類のレベルを用意し、生成"
"されるログメッセージの量を制御することができます。\n"
"\n"
"* *\n"
"\n"
"お使いのシステムにおける中枢となる場所 (設定ファイルまたは起動時のコード) "
"で、どのコンポーネント (クラス、関数) からのログを記録するのかを設定すること"
"ができます。\n"
"\n"
"* *\n"
"\n"
"また、ログレベルを設定することで、これらのコンポーネントから、どれだけ詳細な"
"ログを出力するのかを指定することもできます。\n"
"\n"
"* *\n"
"\n"
"これ以外にも、アペンダと呼ばれる仕組みを指定することもできます。これはログ"
"メッセージの出力先を指定する (\"画面に表示するのか、もしくは /tmp/my.log のよ"
"うなファイルに追記するのかなど\") ほか、書式 (\"日付を先に書いて、ファイル名"
"と行番号、メッセージなどが続く\") を指定することもできます。\n"
"\n"
"これはとてもパワフルで柔軟な仕組みです。任意の時点でログ機能を有効／無効に切"
"り替えることができるほか、ログの詳細さを指定したり、現在実行中のサブサブシス"
"テムを設定することもできます。\n"
"\n"
"たとえば下記のような例を考えてみます: お使いのシステムで、 'MySystem::"
"Helpers::ScanDir' というコンポーネントに問題があるものの、詳細なログ機能を有"
"効にしてしまうと、不要なログが大量に生成されてしまい、その問題について調べる"
"前にシステムをダウンさせてしまうような状況です。 'Log::Log4perl' を使用すれ"
"ば、システムに対して \"通常のログファイルには重大なエラーのみを記録するものと"
"する。 2 つめのログファイルには、 'MySystem::Helpers::ScanDir'コンポーネント"
"に関する完全なデバッグログを出力し、これを発生元とするメッセージはすべて新し"
"いログファイルに書き込む\" のような指定を行なうことができます。これらの設定は"
"すべて設定ファイルから行なうことができるほか、設定ファイルは実行中でも読み込"
"み直すように指示することができます。"

#. leap/perl-Log-Message/summary
msgid "A generic message storing mechanism"
msgstr "汎用メッセージ保管機構"

#. leap/perl-Log-Message/description
msgid ""
"Log::Message is a generic message storage mechanism. It allows you to store "
"messages on a stack -- either shared or private -- and assign meta-data to "
"it. Some meta-data will automatically be added for you, like a timestamp and "
"a stack trace, but some can be filled in by the user, like a tag by which to "
"identify it or group it, and a level at which to handle the message (for "
"example, log it, or die with it)\n"
"\n"
"Log::Message also provides a powerful way of searching through items by "
"regexes on messages, tags and level."
msgstr ""
"Log::Message は汎用的なメッセージ保管の仕組みです。メッセージを共有または独自"
"のスタック内に保存し、それに対してメタデータを割り当てます。タイムスタンプや"
"スタックトレースなど、いくつかのメタデータは自動的に追加されますが、ユーザ側"
"でメタデータを設定することもできます。これにはたとえば、識別やグループ化のた"
"めのタグや、メッセージを処理する際のレベル (ログを記録するだけなのか、それと"
"も die で終了するのか) などがあります。\n"
"\n"
"Log::Message では、メッセージやタグ、レベルに対して、正規表現を利用したパワフ"
"ルな検索機能も用意されています。"

#. leap/perl-Log-Message-Simple/summary
msgid "Simplified interface to Log::Message"
msgstr "Log::Message に対するシンプルなインターフェイス"

#. leap/perl-Log-Message-Simple/description
msgid ""
"This module provides standardized logging facilities using the 'Log::"
"Message' module."
msgstr ""
"このモジュールは、 'Log::Message' モジュールを利用して、標準化されたログ出力"
"機構を提供します。"

#. leap/perl-MCE/summary
msgid "Many-Core Engine for Perl providing parallel processing capabilities"
msgstr "並列処理機能を提供する Perl 向けメニーコアエンジン"

#. leap/perl-MCE/description
msgid ""
"MCE spawns a pool of workers and therefore does not fork a new process per "
"each element of data. Instead, MCE follows a bank queuing model. Imagine the "
"line being the data and bank-tellers the parallel workers. MCE enhances that "
"model by adding the ability to chunk the next n elements from the input "
"stream to the next available worker."
msgstr ""
"MCE はワーカーのプールを起動する仕組みであるため、データ内の要素ごとに新しい"
"プロセスを起動するようなことがありません。その代わり、 MCE では銀行の待ち行列"
"モデルを使用しています。待機列がデータで、ワーカーが銀行窓口であると考えると"
"分かりやすいでしょう。 MCE ではこのモデルに対して、次に利用可能なワーカーに対"
"して入力ストリームから次の N 個の要素を提供するような仕組みで、拡張を行なって"
"います。"

#. leap/perl-MIME-Charset/summary
msgid "Charset Information for MIME"
msgstr "MIME 向けキャラクタセット情報"

#. leap/perl-MIME-Charset/description
msgid ""
"MIME::Charset provides information about character sets used for MIME "
"messages on Internet."
msgstr ""
"MIME::Charset は、インターネット上の MIME メッセージで使用される、キャラクタ"
"セットに関する情報を提供します。"

#. leap/perl-MIME-EncWords/summary
msgid "deal with RFC 2047 encoded words (improved)"
msgstr "RFC 2047 でエンコードされた単語を扱うモジュール (改善版)"

#. leap/perl-MIME-EncWords/description
msgid ""
"Fellow Americans, you probably won't know what the hell this module is for. "
"Europeans, Russians, et al, you probably do. ':-)'.\n"
"\n"
"For example, here's a valid MIME header you might get:\n"
"\n"
"      From: =?US-ASCII?Q?Keith_Moore?= <moore@cs.utk.edu>       To: =?"
"ISO-8859-1?Q?Keld_J=F8rn_Simonsen?= <keld@dkuug.dk>       CC: =?ISO-8859-1?Q?"
"Andr=E9_?= Pirard <PIRARD@vm1.ulg.ac.be>       Subject: =?ISO-8859-1?B?"
"SWYgeW91IGNhbiByZWFkIHRoaXMgeW8=?=        =?ISO-8859-2?B?"
"dSB1bmRlcnN0YW5kIHRoZSBleGFtcGxlLg==?=        =?US-ASCII?Q?.._cool!?=\n"
"\n"
"The fields basically decode to (sorry, I can only approximate the Latin "
"characters with 7 bit sequences /o and 'e):\n"
"\n"
"      From: Keith Moore <moore@cs.utk.edu>       To: Keld J/orn Simonsen "
"<keld@dkuug.dk>       CC: Andr'e  Pirard <PIRARD@vm1.ulg.ac.be>       "
"Subject: If you can read this you understand the example... cool! \n"
"*Supplement*: Fellow Americans, Europeans, you probably won't know what the "
"hell this module is for. East Asians, et al, you probably do. '(^_^)'.\n"
"\n"
"For example, here's a valid MIME header you might get:\n"
"\n"
"      Subject: =?EUC-KR?B?sNTAuLinKGxhemluZXNzKSwgwvzB9ri7seIoaW1w?=        "
"=?EUC-KR?B?YXRpZW5jZSksILGzuLgoaHVicmlzKQ==?=\n"
"\n"
"The fields basically decode to (sorry, I cannot approximate the non-Latin "
"multibyte characters with any 7 bit sequences):\n"
"\n"
"      Subject: ???(laziness), ????(impatience), ??(hubris)"
msgstr ""
"アメリカの人々にとっては、このモジュールがいったい何物なのかがわからないで"
"しょう。ヨーロッパやロシアなどの人々であればわかるものでしょう ':-)'\n"
"\n"
"たとえば、下記のような正しい MIME ヘッダが届いたとします:\n"
"\n"
"      From: =?US-ASCII?Q?Keith_Moore?= <moore@cs.utk.edu>       To: =?"
"ISO-8859-1?Q?Keld_J=F8rn_Simonsen?= <keld@dkuug.dk>       CC: =?ISO-8859-1?Q?"
"Andr=E9_?= Pirard <PIRARD@vm1.ulg.ac.be>       Subject: =?ISO-8859-1?B?"
"SWYgeW91IGNhbiByZWFkIHRoaXMgeW8=?=        =?ISO-8859-2?B?"
"dSB1bmRlcnN0YW5kIHRoZSBleGFtcGxlLg==?=        =?US-ASCII?Q?.._cool!?=\n"
"\n"
"これらのフィールドは下記のようにデコードされることになります (実際には /o や "
"'e (アクセント付き文字) などの特殊なアルファベットが入ります):\n"
"\n"
"      From: Keith Moore <moore@cs.utk.edu>       To: Keld J/orn Simonsen "
"<keld@dkuug.dk>       CC: Andr'e  Pirard <PIRARD@vm1.ulg.ac.be>       "
"Subject: If you can read this you understand the example... cool!\n"
"*補足*: 下記はアメリカやヨーロッパの人々によっては分からないものですが、東ア"
"ジア系の人々であればわかるものでしょう '(^_^)'\n"
"\n"
"たとえば、下記のような正しい MIME ヘッダが届いたとします:\n"
"\n"
"      Subject: =?EUC-KR?B?sNTAuLinKGxhemluZXNzKSwgwvzB9ri7seIoaW1w?=        "
"=?EUC-KR?B?YXRpZW5jZSksILGzuLgoaHVicmlzKQ==?=\n"
"\n"
"これらのフィールドは下記のようにデコードされることになります:\n"
"\n"
"      Subject: ???(laziness), ????(impatience), ??(hubris)"

#. leap/perl-MIME-Lite/summary
msgid "Low-calorie MIME generator"
msgstr "低カロリーの MIME 生成モジュール"

#. leap/perl-MIME-Lite/description
msgid ""
"In the never-ending quest for great taste with fewer calories, we proudly "
"present: _MIME::Lite_.\n"
"\n"
"MIME::Lite is intended as a simple, standalone module for generating (not "
"parsing!) MIME messages... specifically, it allows you to output a simple, "
"decent single- or multi-part message with text or binary attachments. It "
"does not require that you have the Mail:: or MIME:: modules installed, but "
"will work with them if they are.\n"
"\n"
"You can specify each message part as either the literal data itself (in a "
"scalar or array), or as a string which can be given to open() to get a "
"readable filehandle (e.g., \"<filename\" or \"somecommand|\").\n"
"\n"
"You don't need to worry about encoding your message data: this module will "
"do that for you. It handles the 5 standard MIME encodings."
msgstr ""
"小さな手まで大きな成果を得るための果てしない作業として、我々は _MIME::Lite_ "
"を提供します。\n"
"\n"
"MIME::Lite はシンプルな使い心地でありながら、 MIME メッセージを生成する (読み"
"取ることはできません) 単独動作のモジュールです。特に、シンプルで見苦しくない"
"テキストまたはバイナリ形式のシングルパート、またはマルチパートのメッセージを"
"生成することができます。 Mail:: や MIME:: の他のモジュールを必要とすることは"
"ありませんが、必要であればそれらと協調動作させることもできます。\n"
"\n"
"メッセージパートはリテラルデータそのもの (スカラー値または配列) で指定するこ"
"とができるほか、 open() でファイルハンドルを開くことのできる文字列(例: \"<"
"ファイル名\" または \"コマンド|\") を指定することもできます。\n"
"\n"
"メッセージデータのエンコード方法については、心配不要です。このモジュールは自"
"動的に判別して処理を行ないます。現時点で 5 種類の標準 MIME エンコーディングに"
"対応しています。"

#. leap/perl-MIME-Types/summary
msgid "Definition of MIME types"
msgstr "MIME タイプの定義"

#. leap/perl-MIME-Types/description
msgid ""
"MIME types are used in many applications (for instance as part of e-mail and "
"HTTP traffic) to indicate the type of content which is transmitted. or "
"expected. See RFC2045 at _https://www.ietf.org/rfc/rfc2045.txt_\n"
"\n"
"Sometimes detailed knowledge about a mime-type is need, however this module "
"only knows about the file-name extensions which relate to some filetype. It "
"can also be used to produce the right format: types which are not registered "
"at IANA need to use 'x-' prefixes.\n"
"\n"
"This object administers a huge list of known mime-types, combined from "
"various sources. For instance, it contains *all IANA* types and the "
"knowledge of Apache. Probably the most complete table on the net!"
msgstr ""
"MIME タイプは多数のアプリケーションが使用する仕組み (例えば電子メールや HTTP "
"トラフィックなど) で、転送していたり期待していたりする際のコンテンツの種類を"
"示すものです。 MIME は RFC2045 (_https://www.ietf.org/rfc/rfc2045.txt_) で規"
"定されています。\n"
"\n"
"MIME タイプに関する詳しい知識が必要となる場合がありますが、このモジュールは"
"ファイル名の拡張子とファイルタイプを知っているだけの存在です。正しい形式を生"
"成する際に使用することもできるものであるほか、 IANA に登録されていないタイプ"
"の場合は、 'x-' の接頭辞で始まる値を使用することもできます。\n"
"\n"
"このオブジェクトは既知の MIME タイプに対する巨大なリストで、さまざまな情報源"
"からのものを組み合わせて作られています。たとえば *すべての IANA* タイプや "
"Apache の情報が含まれています。おそらくはネット上で最も完全なリストであること"
"でしょう。"

#. leap/perl-MIME-tools/summary
#. leap/perl-MIME-tools/description
msgid "Tools to manipulate MIME messages"
msgstr "MIME メッセージを扱うためのモジュール"

#. leap/perl-MLDBM/summary
msgid "store multi-level Perl hash structure in single level tied hash"
msgstr "多階層 Perl ハッシュ構造からの単一階層のタイハッシュへの保存"

#. leap/perl-MLDBM/description
msgid ""
"This module can serve as a transparent interface to any TIEHASH package that "
"is required to store arbitrary perl data, including nested references. Thus, "
"this module can be used for storing references and other arbitrary data "
"within DBM databases.\n"
"\n"
"It works by serializing the references in the hash into a single string. In "
"the underlying TIEHASH package (usually a DBM database), it is this string "
"that gets stored. When the value is fetched again, the string is "
"deserialized to reconstruct the data structure into memory.\n"
"\n"
"For historical and practical reasons, it requires the *Data::Dumper* "
"package, available at any CPAN site. *Data::Dumper* gives you really nice-"
"looking dumps of your data structures, in case you wish to look at them on "
"the screen, and it was the only serializing engine before version 2.00. "
"However, as of version 2.00, you can use any of *Data::Dumper*,\n"
"*FreezeThaw* or *Storable* to perform the underlying serialization, as "
"hinted at by the the SYNOPSIS manpage overview above. Using *Storable* is "
"usually much faster than the other methods.\n"
"\n"
"See the the BUGS manpage section for important limitations."
msgstr ""
"このモジュールは、任意の TIEHASH パッケージに対する透過型インターフェイスで、"
"入れ子構造の参照を含む任意の Perl データを保存する際に必要となるものです。そ"
"のため、このモジュールは参照のほか DBM データベース内の任意のデータを保存する"
"のに利用することができます。\n"
"\n"
"このモジュールは、ハッシュ内の参照を単一の文字列に直列化 (シリアライズ) する"
"ことで処理を行なっています。裏で動作している TIEHASH パッケージ (一般に DBM "
"データベース) 内では、これは保存されるべき文字列になっています。値に再アクセ"
"スした場合は、文字列は逆変換 (デシリアライズ) されて、データ構造をメモリ内に"
"再構成します。\n"
"\n"
"過去の経緯や現実面の問題により、本パッケージは *Data::Dumper* パッケージを必"
"要とします (CPAN サイトで公開されています) 。 *Data::Dumper* は、指定したデー"
"タ構造にわかりやすくアクセスする機能を提供し、それを画面内に表示したりするこ"
"とができるほか、バージョン 2.00 以降では任意の *Data::Dumper* に対して"
"*FreezeThaw* や *Storable* を実行して、マニュアルページ内の SYNOPSIS にヒント"
"が書かれているとおり、裏のシリアライズを実施しています。 *Storable* は通常、"
"他のメソッドを使用する場合に比べてとても高速に動作します。\n"
"\n"
"重要な制限事項について、詳しくはマニュアルページの BUGS セクションをお読みく"
"ださい。"

#. leap/perl-MLDBM-Sync/summary
msgid "Perl module for safe concurrent access to MLDBM databases"
msgstr "MLDBM データベースに対する安全な同時アクセスを提供する Perl モジュール"

#. leap/perl-MLDBM-Sync/description
msgid ""
"This module wraps around the MLDBM interface, by handling concurrent access "
"to MLDBM databases with file locking, and flushes i/o explicity per lock/"
"unlock. The new [Read]Lock()/UnLock() API can be used to serialize requests "
"logically and improve performance for bundled reads & writes."
msgstr ""
"このモジュールは MLDBM インターフェイスに対するラッピングを行ない、 MLDBM "
"データベースに対するファイルロックとロック／アンロック時の I/O 同期を 提供し"
"て同時アクセスを処理します。新しい [Read]Lock()/UnLock() API をリクエストの "
"直列化に使用することもできますので、多数の読み込みや書き込みに対する性能も 改"
"善することができます。"

#. leap/perl-MRO-Compat/summary
msgid "Mro::* Interface Compatibility for Perls < 5.9.5"
msgstr "Perl < 5.9.5 向けの mro::* インターフェイス互換性モジュール"

#. leap/perl-MRO-Compat/description
msgid ""
"The \"mro\" namespace provides several utilities for dealing with method "
"resolution order and method caching in general in Perl 5.9.5 and higher.\n"
"\n"
"This module provides those interfaces for earlier versions of Perl (back to "
"5.6.0 anyways).\n"
"\n"
"It is a harmless no-op to use this module on 5.9.5+. That is to say, code "
"which properly uses MRO::Compat will work unmodified on both older Perls and "
"5.9.5+.\n"
"\n"
"If you're writing a piece of software that would like to use the parts of "
"5.9.5+'s mro:: interfaces that are supported here, and you want "
"compatibility with older Perls, this is the module for you.\n"
"\n"
"Some parts of this code will work better and/or faster with Class::C3::XS "
"installed (which is an optional prereq of Class::C3, which is in turn a "
"prereq of this package), but it's not a requirement.\n"
"\n"
"This module never exports any functions. All calls must be fully qualified "
"with the 'mro::' prefix.\n"
"\n"
"The interface documentation here serves only as a quick reference of what "
"the function basically does, and what differences between MRO::Compat and "
"5.9.5+ one should look out for. The main docs in 5.9.5's mro are the real "
"interface docs, and contain a lot of other useful information."
msgstr ""
"\"mro\" ネームスペースは Perl 5.9.5 およびそれ以降のバージョンに対応し、メ"
"ソッドの解決順序やメソッドのキャッシュ機構を扱うためのいくつかのユーティリ"
"ティを提供しています。\n"
"\n"
"このモジュールには、古いバージョン (5.6.0 以降のバージョン) でそれらの機能に"
"対応するための仕組みが含まれています。\n"
"\n"
"このモジュールを Perl 5.9.5 以降のバージョンで利用した場合は、特に悪影響もな"
"く何も動作を行なわないモジュールになります。言い換えれば、 MRO::Compat モ"
"ジュールを正しく使用することで、古いバージョンと 5.9.5 以降のバージョンの両方"
"で動作する仕組みを作成することができます。\n"
"\n"
"Perl 5.9.5 以降で対応した mro:: インターフェイスを使用するソフトウエアを作成"
"している場合で、古いバージョンの Perl でも動作させたいような場合に、有用な仕"
"組みです。\n"
"\n"
"このコードのいくつかの部分は、 Class::C3::XS がインストールされていると、より"
"うまく、かつ高速に動作します (Class::C3 クラスからは任意指定の prereq とし"
"て、逆にこのクラスからは通常の prereq として定義されています) が、必ずしも必"
"要となるものではありません。\n"
"\n"
"このモジュールは、いかなる関数も公開していません。全ての機能は、完全修飾型の "
"'mro::' プレフィクス経由で利用します。\n"
"\n"
"インターフェイスのドキュメンテーションは、それぞれの関数がどのように動作する"
"のかを簡潔に示しただけのものであるほか、 MRO::Compat と Perl 5.9.5 以降のバー"
"ジョンでの違いも示しています。 5.9.5 のメインのドキュメンテーションでは、実際"
"のインターフェイスに対するドキュメンテーションが書かれていて、そこには多数の"
"有用な情報が書かれています。"

#. leap/perl-Mac-PropertyList/summary
msgid "Work with Mac plists at a low level"
msgstr "Mac のプロパティリストを低レベルで操作するモジュール"

#. leap/perl-Mac-PropertyList/description
msgid ""
"This module is a low-level interface to the Mac OS X Property List (plist) "
"format in either XML or binary. You probably shouldn't use this in "
"applications–build interfaces on top of this so you don't have to put all "
"the heinous multi-level object stuff where people have to look at it.\n"
"\n"
"You can parse a plist file and get back a data structure. You can take that "
"data structure and get back the plist as XML. If you want to change the "
"structure inbetween that's your business. :)\n"
"\n"
"You don't need to be on Mac OS X to use this. It simply parses and "
"manipulates a text format that Mac OS X uses.\n"
"\n"
"If you need to work with the old ASCII or newer JSON formet, you can use the "
"*plutil* tool that comes with MacOS X:\n"
"\n"
"\t% plutil -convert xml1 -o ExampleBinary.xml.plist ExampleBinary.plist\n"
"\n"
"Or, you can extend this module to handle those formats (and send a pull "
"request)."
msgstr ""
"このモジュールは Mac OS X のプロパティリスト (plist) 形式に対する低レベルなイ"
"ンターフェイスです。これを利用してアプリケーションを構築するためのインター"
"フェイスとするものではないため、ユーザが参照するようなものをここにおくべきで"
"はありません。\n"
"\n"
"このモジュールは plist ファイルを処理することができるほか、それをデータ構造に"
"戻すこともできます。データ構造はそのまま取得することができるほか、 XML 形式"
"で plist に戻すこともできます。データ構造を変更したい場合は、それぞれ必要に応"
"じて独自に実施してください。\n"
"\n"
"このモジュールを利用するにあたっては、 Mac OS X である必要はありません。この"
"モジュールは、 Mac OS X が使用するテキスト形式を、単純に処理して操作するだけ"
"です。\n"
"\n"
"古い ASCII や新しい JSON 形式を扱う必要がある場合は、 MacOS Xに付属する "
"*plutil* を利用することもできます:\n"
"\n"
"\t% plutil -convert xml1 -o ExampleBinary.xml.plist ExampleBinary.plist\n"
"\n"
"それ以外にも、このモジュールを拡張してそれらの形式に対応させる (そして pull "
"request を送信する) こともできます。"

#. leap/perl-Mail-DKIM/summary
msgid "Signs/verifies Internet mail with DKIM/DomainKey signatures"
msgstr "インターネットメールに対する DKIM/DomainKey 署名の作成と検証"

#. leap/perl-Mail-DKIM/description
msgid ""
"This module implements the various components of the DKIM and DomainKeys "
"message-signing and verifying standards for Internet mail. It currently "
"tries to implement these specifications: \n"
"* RFC4871, for DKIM \n"
"* RFC4870, for DomainKeys\n"
"\n"
"The module uses an object-oriented interface. You use one of two different "
"classes, depending on whether you are signing or verifying a message. To "
"sign, use the the Mail::DKIM::Signer manpage class. To verify, use the the "
"Mail::DKIM::Verifier manpage class. Simple, eh?"
msgstr ""
"このモジュールは DKIM の様々なコンポーネントを実装し、インターネットメールに"
"対する DomainKeys のメッセージ署名と、検証に関する標準機能を提供します。現時"
"点では、下記の仕様を実装するように目指しています:\n"
"* RFC4871 (DKIM)\n"
"* RFC4870 (DomainKeys)\n"
"\n"
"このモジュールには、オブジェクト指向のインターフェイスが用意されています。ま"
"た、メッセージへ署名する場合と検証する場合に備えて、 2 種類の異なるクラスを利"
"用することができます。署名を行なう場合は Mail::DKIM::Signer クラスを、検証を"
"行なう場合は Mail::DKIM::Verifier クラスを利用します。"

#. leap/perl-Mail-IMAPClient/summary
msgid "An IMAP Client API"
msgstr "IMAP クライアント API"

#. leap/perl-Mail-IMAPClient/description
msgid ""
"This module provides methods implementing the IMAP protocol to support "
"interacting with IMAP message stores.\n"
"\n"
"The module is used by constructing or instantiating a new IMAPClient object "
"via the new constructor method. Once the object has been instantiated, the "
"connect method is either implicitly or explicitly called. At that point "
"methods are available that implement the IMAP client commands as specified "
"in *RFC3501*. When processing is complete, the logout object method should "
"be called.\n"
"\n"
"This documentation is not meant to be a replacement for RFC3501 nor any "
"other IMAP related RFCs.\n"
"\n"
"Note that this documentation uses the term _folder_ in place of RFC3501's "
"use of _mailbox_. This documentation reserves the use of the term _mailbox_ "
"to refer to the set of folders owned by a specific IMAP id."
msgstr ""
"このモジュールは、 IMAP メッセージストアとの対話に対応する、 IMAP プロトコル"
"を実装するメソッドを提供します。\n"
"\n"
"モジュールは /new コンストラクタメソッドを利用して IMAPClient オブジェクトを"
"構築もしくはインスタンス化して使用します。オブジェクトがインスタンス化される"
"と、 /connect を明示的もしくは暗黙的に呼び出します。この時点では、 *RFC3501* "
"に規定された IMAP クライアントコマンドのみを実装しています。処理が終わった"
"ら、 /logout メソッドを呼び出すべきです。\n"
"\n"
"なお、このドキュメンテーションでは RFC3501 そのものやその他の IMAP 関連 RFC "
"を説明するものではありません。\n"
"\n"
"ただし、このドキュメンテーションでは RFC3501 で _メールボックス_ と呼ばれるも"
"のを _フォルダ_ として説明しています。このドキュメンテーションにおける _メー"
"ルボックス_ は、 IMAP id で識別されるフォルダの所有者を意味します。"

#. leap/perl-Mail-Mbox-MessageParser/summary
msgid "Fast and Simple Mbox Folder Reader"
msgstr "高速でシンプルな mbox フォルダ読み取り器"

#. leap/perl-Mail-Mbox-MessageParser/description
msgid ""
"This module implements a fast but simple mbox folder reader. One of three "
"implementations (Cache, Grep, Perl) will be used depending on the wishes of "
"the user and the system configuration. The first implementation is a cached-"
"based one which stores email information about mailboxes on the file system. "
"Subsequent accesses will be faster because no analysis of the mailbox will "
"be needed. The second implementation is one based on GNU grep, and is "
"significantly faster than the Perl version for mailboxes which contain very "
"large (10MB) emails. The final implementation is a fast Perl-based one which "
"should always be applicable.\n"
"\n"
"The Cache implementation is about 6 times faster than the standard Perl "
"implementation. The Grep implementation is about 4 times faster than the "
"standard Perl implementation. If you have GNU grep, it's best to enable both "
"the Cache and Grep implementations. If the cache information is available, "
"you'll get very fast speeds. Otherwise, you'll take about a 1/3 performance "
"hit when the Grep version is used instead.\n"
"\n"
"The overriding requirement for this module is speed. If you wish more "
"sophisticated parsing, use Mail::MboxParser (which is based on this module) "
"or Mail::Box."
msgstr ""
"このモジュールは高速でありながらシンプルな mbox フォルダ読み込みモジュールで"
"す。 3 種類の実装 (Cache, Grep, Perl) が用意されていて、ユーザ側の要件やシス"
"テムの設定に応じて選択することができます。最初の実装はキャッシュベースの仕組"
"みで、ファイルシステム内のメールボックスに対して、電子メールの情報を一括で読"
"み込みます。 2 回目移行のアクセスではメールボックスの分析処理がなくなるため、"
"高速に動作するようになります。 2 つめの実装は GNU grep をベースにした仕組み"
"で、非常に巨大な (10MB) 電子メールを含むメールボックスの場合、 Perl 版よりも"
"高速に動作します。最後の実装は高速な Perl ベースの仕組みで、どのような環境に"
"も適合できる仕組みです。\n"
"\n"
"Cache 実装は標準の Perl 実装よりも 6 倍程度高速に動作するほか、 Grep 実装も標"
"準より 4 倍程度高速に動作します。 GNU grep をお持ちの場合は、 Cache, Grep の"
"両方を有効化しておくのがよいでしょう。また、キャッシュ情報が利用できる場合、"
"非常に高速に動作しますが、 Grep 版を代わりに使用した場合は、 1/3 程度の性能に"
"なってしまいます。\n"
"\n"
"このモジュールに対するオーバライドの要件はスピードです。より洗練された処理を"
"ご希望の場合は、 Mail::MboxParser (このモジュールをベースにしています) や "
"Mail::Box をお使いください。"

#. leap/perl-Mail-SPF/summary
msgid "An object-oriented implementation of Sender Policy Framework"
msgstr "Sender Policy Framework (SPF) のオブジェクト指向な実装"

#. leap/perl-Mail-SPF/description
msgid ""
"*Mail::SPF* is an object-oriented implementation of Sender Policy Framework "
"(SPF). See the http://www.openspf.org manpage for more information about "
"SPF.\n"
"\n"
"This class collection aims to fully conform to the SPF specification (RFC "
"4408) so as to serve both as a production quality SPF implementation and as "
"a reference for other developers of SPF implementations."
msgstr ""
"Mail::SPF は Sender Policy Framework (SPF) に対するオブジェクト指向の実装で"
"す。 SPF について、詳しくは http://www.openspf.org をお読みください。\n"
"\n"
"このクラス集は、 SPF 仕様 (RFC 4408) に完全準拠し、商用品質の SPF 実装として"
"利用するだけでなく、他の開発者に対する SPF のリファレンス実装としても利用でき"
"るものです。"

#. leap/perl-Mail-SPF-Test/summary
msgid "SPF test-suite class"
msgstr "SPF テストスイートクラス"

#. leap/perl-Mail-SPF-Test/description
msgid ""
"  *Mail::SPF::Test* is a class for reading and manipulating SPF test-suite   "
"data."
msgstr ""
"  *Mail::SPF::Test* は SPF のデータを読み込んで操作することができるテストス"
"イートです。"

#. leap/perl-Mail-Sender/summary
msgid ""
"(DEPRECATED) module for sending mails with attachments through an SMTP server"
msgstr ""
"(廃止予定) SMTP サーバを介して添付ファイル付きのメールを送信するためのモ"
"ジュール"

#. leap/perl-Mail-Sender/description
msgid ""
"Mail::Sender is deprecated. Email::Sender is the go-to choice when you need "
"to send Email from Perl. Go there, be happy!\n"
"\n"
"Mail::Sender provides an object-oriented interface to sending mails. It "
"directly connects to the mail server using IO::Socket."
msgstr ""
"Mail::Sender は廃止予定です。 Perl から電子メールを送信したい場合は、 Email::"
"Sender をお勧めします。\n"
"\n"
"Mail::Sender は、メールを送信するにあたってのオブジェクト指向のインターフェイ"
"スを提供します。 IO::Socket を利用して、メールサーバに直接接続します。"

#. leap/perl-Mail-Sendmail/summary
msgid "Simple platform independent mailer"
msgstr "シンプルなプラットフォーム非依存メーラー"

#. leap/perl-Mail-Sendmail/description
msgid ""
"Simple platform independent e-mail from your perl script. Only requires Perl "
"5 and a network connection.\n"
"\n"
"Mail::Sendmail takes a hash with the message to send and sends it to your "
"mail server. It is intended to be very easy to setup and use. See also "
"\"FEATURES\" below, and as usual, read this documentation.\n"
"\n"
"There is also a FAQ (see \"NOTES\")."
msgstr ""
"お使いの Perl スクリプトから利用することのできる、シンプルなプラットフォーム"
"非依存の電子メールクライアントです。 Perl 5 とネットワーク接続のみが必要で"
"す。\n"
"\n"
"Mail::Sendmail はメッセージをハッシュとして受け取り、それをお使いのメールサー"
"バに送信します。非常に簡単に設定できるほか、使いやすくもなっています。詳しく"
"は \"FEATURES\" をお読みになるほか、通常はドキュメンテーションをお読みくださ"
"い。\n"
"\n"
"このほか、 FAQ (\"NOTES\") も用意されています。"

#. leap/perl-MailTools/summary
msgid "Bundle of Ancient Email Modules"
msgstr "古い電子メールモジュールのバンドル"

#. leap/perl-MailTools/description
msgid ""
"MailTools is a bundle: an ancient form of combining packages into one "
"distribution. Gladly, it can be distributed as if it is a normal "
"distribution as well. \n"
"*Be warned:* The code you find here is very old. It works for simple emails, "
"but when you start with new code then please use more sofisticated "
"libraries. The main reason that you still find this code on CPAN, is because "
"many books use it as example."
msgstr ""
"MailTools は、従来は複数のぱっヶー時の組み合わせとして提供されていたものを、 "
"1 つにまとめたものです。嬉しいことに、通常の配布物としても公開されていま"
"す。\n"
"*警告:* ここで書かれているコードは非常に古いものです。シンプルな電子メールと"
"しては問題なく動作しますが、新しいコードではお勧めできません。代わりにより洗"
"練されたライブラリをお使いください。 CPAN などで本モジュールを発見したのも、"
"多数の文献が本モジュールを参照しているからと思われます。"

#. leap/perl-Mason/summary
msgid "Powerful, high-performance templating for the web and beyond"
msgstr "Web 向けのパワフルで高性能なテンプレートシステム"

#. leap/perl-Mason/description
msgid ""
"Mason is a powerful Perl-based templating system, designed to generate "
"dynamic content of all kinds.\n"
"\n"
"Unlike many templating systems, Mason does not attempt to invent an "
"alternate, \"easier\" syntax for templates. It provides a set of syntax and "
"features specific to template creation, but underneath it is still clearly "
"and proudly recognizable as Perl.\n"
"\n"
"Mason is most often used for generating web pages. It has a companion web "
"framework, Poet, designed to take maximum advantage of its routing and "
"content generation features. It can also be used as the templating layer for "
"web frameworks such as Catalyst::View::Mason2 and Dancer::Template::Mason2.\n"
"\n"
"All documentation is indexed at the Mason::Manual manpage.\n"
"\n"
"The previous major version of Mason (1.x) is available under the name the "
"HTML::Mason manpage."
msgstr ""
"Mason はパワフルな Perl ベースのテンプレートシステムです。様々な種類の動的コ"
"ンテンツを生成するよう設計されています。\n"
"\n"
"多数あるテンプレートシステムとは異なり、 Mason はテンプレートに対して新しく "
"\"わかりやすい\" 文法を発明しようとしたりはしていません。テンプレートを作成す"
"る際に固有の文法と機能を提供しますが、 Perl として明快に認識できるもので"
"す。\n"
"\n"
"Mason は Web ページを生成する際にもっともよく使われるもので、コンパニオン "
"Web フレームワーク Poet には、ルーティングやコンテンツの生成機能を最大限に生"
"かすように設計されています。このほか、 Catalyst::View::Mason2 や Dancer::"
"Template::Mason2 のような Web フレームワーク向けのテンプレートレイヤとしても"
"使用することができます。\n"
"\n"
"すべてのドキュメンテーションは Mason::Manual 内にあります。\n"
"\n"
"以前のメジャーバージョン (1.x) は、 HTML::Mason の名称で公開されています。"

#. leap/perl-Math-Base-Convert/summary
msgid "Very Fast Base to Base Conversion"
msgstr "非常に高速な基数間変換"

#. leap/perl-Math-Base-Convert/description
msgid ""
"This module provides fast functions and methods to convert between arbitrary "
"number bases from 2 (binary) thru 65535.\n"
"\n"
"This module is pure Perl, has no external dependencies, and is backward "
"compatible with old versions of Perl 5."
msgstr ""
"このモジュールは、 2 (バイナリ) から 65535 までの間の任意の基数の数値を高速に"
"変換する機能を提供します。\n"
"\n"
"このモジュールは純粋な Perl として作られていて、外部の依存関係はありません。"
"また、 Perl 5 の古いバージョンへの後方互換性もあります。"

#. leap/perl-Math-BigInt/summary
msgid "Arbitrary size integer/float math package"
msgstr "任意のサイズの整数／小数点計算パッケージ"

#. leap/perl-Math-BigInt/description
msgid ""
"Math::BigInt provides support for arbitrary precision integers. Overloading "
"is also provided for Perl operators."
msgstr ""
"Math::BigInt は任意の精度の整数に対応しています。 Perl の演算子に対するオー"
"バーロードも提供されています。"

#. leap/perl-Math-BigInt-GMP/summary
msgid "Backend library for Math::BigInt etc. based on GMP"
msgstr "GMP をベースにした Math::BigInt 等向けバックエンドライブラリ"

#. leap/perl-Math-BigInt-GMP/description
msgid ""
"Math::BigInt::GMP is a replacement library for Math::BigInt::Calc that "
"reimplements some of the Math::BigInt::Calc functions in XS. It can be used "
"via:\n"
"\n"
"    use Math::BigInt lib => 'GMP';\n"
"\n"
"This package contains a replacement (drop-in) module for Math::BigInt's "
"core, Math::BigInt::Calc.pm."
msgstr ""
"Math::BigInt::GMP は Math::BigInt::Calc に対する代替ライブラリで、 XS を利用"
"して Math::BigInt::Calc の機能を再実装したものです。下記のように実行すること"
"で、本モジュールを利用することができます:\n"
"\n"
"    use Math::BigInt lib => 'GMP';\n"
"\n"
"このパッケージには、 Math::BigInt の中枢部分に対する (完全互換の) 代替モ"
"ジュール Math::BigInt::Calc.pm が含まれています。"

#. leap/perl-Math-Calc-Units/summary
msgid "Human-readable unit-aware calculator"
msgstr "人間にとってわかりやすい形式の単位に対応した計算機"

#. leap/perl-Math-Calc-Units/description
msgid ""
"Math::Calc::Units is a simple calculator that keeps track of units. It "
"currently handles combinations of byte sizes and duration only, although "
"adding any other multiplicative types is easy. Any unknown type is treated "
"as a unique user type (with some effort to map English plurals to their "
"singular forms).\n"
"\n"
"The primary intended use is via the ucalc script that prints out all of the "
"\"readable\" variants of a value. For example, \"3 bytes\" will only produce "
"\"3 byte\", but \"3 byte / sec\" produces the original along with \"180 "
"byte / minute\", \"10.55 kilobyte / hour\", etc."
msgstr ""
"Math::Calc::Units は単位を扱うことのできるシンプルな計算機です。現時点ではバ"
"イトサイズと時間単位のみを扱うことができますが、他の乗法単位への変換は簡単に"
"行なうことができます。未知のタイプはユーザ定義の独自型として扱われます (ただ"
"し、英語の複数形を単数形に変換することはできます) 。\n"
"\n"
"主な使い方としては、 ucalc スクリプト経由で値を \"わかりやすくする\" 方法があ"
"ります。たとえば \"3 bytes (バイト)\" は単に \"3 byte\" としか表現できません"
"が、 \"3 byte / sec (バイト毎秒)\" は \"180 byte / minute (バイト毎分)\" や "
"\"10.55 kilobyte / hour (キロバイト毎秒)\" に変換することができます。"

#. leap/perl-Math-Clipper/summary
msgid "Polygon clipping in 2D"
msgstr "2D 内でのポリゴンクリッピング"

#. leap/perl-Math-Clipper/description
msgid ""
"'Clipper' is a C++ (and Delphi) library that implements polygon clipping."
msgstr ""
"'Clipper' は C++ (および Delphi) 言語向けのポリゴンクリッピングを実装するライ"
"ブラリです。"

#. leap/perl-Math-ConvexHull/summary
msgid "Calculate convex hulls using Graham's scan (n*log(n))"
msgstr "グラハムスキャン (n*log(n)) を利用した凸包の計算"

#. leap/perl-Math-ConvexHull/description
msgid ""
"'Math::ConvexHull' is a simple module that calculates convex hulls from a "
"set of points in 2D space. It is a straightforward implementation of the "
"algorithm known as Graham's scan which, with complexity of O(n*log(n)), is "
"the fastest known method of finding the convex hull of an arbitrary set of "
"points. There are some methods of eliminating points that cannot be part of "
"the convex hull. These may or may not be implemented in a future version.\n"
"\n"
"The implementation cannot deal with duplicate points. Therefore, points "
"which are very, very close (think floating point close) to the previous "
"point are dropped since version 1.02 of the module. However, if you pass in "
"randomly ordered data which contains duplicate points, this safety measure "
"might not help you. In that case, you will have to remove duplicates "
"yourself."
msgstr ""
"'Math::ConvexHull' は 2D 領域内の点の集合から、凸包を計算するためのシンプルな"
"モジュールです。任意の点の集合から凸包を計算するにあたって、既知のもの中で"
"もっとも高速なアルゴリズムであるグラハムスキャン (計算量 O(n*log(n))) をその"
"まま実装しています。また、凸包の中に含まれない除去点向けのメソッドもいくつか"
"用意されています。ただし、将来のバージョンでは実装が変わる可能性もありま"
"す。\n"
"\n"
"なお、この実装では重複する点を扱うことができません。そのため、直前の点と現在"
"の点が (小数点の単位で) 非常に近い場合、本モジュールのバージョン 1.02 以降で"
"は無視されるようになっています。しかしながら、重複する点をランダムな順序で与"
"えた場合は、この安全機能はうまく動作しませんので、ご自身で取り除く必要があり"
"ます。"

#. leap/perl-Math-ConvexHull-MonotoneChain/summary
msgid "Andrew's monotone chain algorithm for finding a convex hull in 2D"
msgstr "2D 内で凸包を検出するための Andrew's モノトーンチェインアルゴリズム"

#. leap/perl-Math-ConvexHull-MonotoneChain/description
msgid ""
"This is somewhat experimental still.\n"
"\n"
"This (XS) module optionally exports a single function 'convex_hull' which "
"calculates the convex hull of the input points and returns it. The algorithm "
"is 'O(n log n)' due to having to sort the input list, but should be somewhat "
"faster than a plain Graham's scan (also 'O(n log n)') in practice since it "
"avoids polar coordinates."
msgstr ""
"これは幾分か実験的なものです。\n"
"\n"
"この (XS) モジュールは、入力した点の凸包を計算し、その結果を返す "
"'convex_hull' 関数のみをオプションで公開しています。アルゴリズムは入力リスト"
"を並び替える必要があることから、 'O(n log n)' になりますが、極座標を避ける仕"
"組みが備わっていることから、純粋なグラハムスキャン (こちらも 'O(n log n)' で"
"す) よりは幾分高速になるべき仕組みです。"

#. leap/perl-Math-Geometry-Voronoi/summary
msgid "compute Voronoi diagrams from sets of points"
msgstr "点の集合からボロノイ図を計算するモジュール"

#. leap/perl-Math-Geometry-Voronoi/description
msgid ""
"This module computes Voronoi diagrams from a set of input points. Info on "
"Voronoi diagrams can be found here:\n"
"\n"
"  http://en.wikipedia.org/wiki/Voronoi_diagram\n"
"\n"
"This module is a wrapper around a C implementation found here:\n"
"\n"
"  http://www.derekbradley.ca/voronoi.html\n"
"\n"
"Which is itself a modification of code by Steve Fortune, the inventor of the "
"algorithm used (Fortune's algorithm):\n"
"\n"
"  http://cm.bell-labs.com/who/sjf/\n"
"\n"
"I made changes to the C code to allow reading input and writing output to/"
"from Perl data-structures. I also modified the memory allocation code to use "
"Perl's memory allocator. Finally, I changed all floats to doubles to provide "
"better precision and to match Perl's NVs."
msgstr ""
"このモジュールは入力点の集合からボロノイ図を算出します。ボロノイ図に関する情"
"報は、下記をお読みください:\n"
"\n"
"  https://ja.wikipedia.org/wiki/ボロノイ図\n"
"\n"
"このモジュールは C 言語実装におけるラッパーです。詳しくは下記をお読みくださ"
"い:\n"
"\n"
"  http://www.derekbradley.ca/voronoi.html\n"
"\n"
"これは、使用しているアルゴリズム (Fortune's algorithm) の発見者である Steve "
"Fortune 氏によるコードの修正版です:\n"
"\n"
"  http://cm.bell-labs.com/who/sjf/\n"
"\n"
"なお、本モジュールでは Perl のデータ構造を入出力するのに必要となるため、デー"
"タの読み書き機能を追加するよう C 言語のソースコードを修正しています。また、 "
"Perl のメモリアロケータを使用するのに必要な修正も実施しているほか、精度の改善"
"や Perl の NV にうまく当てはまるよう、単精度の小数点を倍精度に変更していま"
"す。"

#. leap/perl-Math-Libm/summary
msgid "Perl extension for the C math library, libm"
msgstr "C 数学ライブラリ libm 向け Perl 拡張"

#. leap/perl-Math-Libm/description
msgid ""
"This module is a translation of the C _math.h_ file. It exports the "
"following selected constants and functions."
msgstr ""
"このモジュールは C 言語版の _math_h_ ファイルの翻訳版で、様々な定数や関数など"
"を公開しています。"

#. leap/perl-Math-PlanePath/summary
msgid "Points on a path through the 2-D plane"
msgstr "2D 平面を介したパス上のポイント"

#. leap/perl-Math-PlanePath/description
msgid ""
"This is a base class for some mathematical paths which map an integer "
"position '$n' to and from coordinates '$x,$y' in the 2D plane.\n"
"\n"
"The current classes include the following. The intention is that any 'Math::"
"PlanePath::Something' is a PlanePath, and supporting base classes or related "
"things are further down like 'Math::PlanePath::Base::Xyzzy'.\n"
"\n"
"    SquareSpiral           four-sided spiral     PyramidSpiral          "
"square base pyramid     TriangleSpiral         equilateral triangle "
"spiral     TriangleSpiralSkewed   equilateral skewed for compactness     "
"DiamondSpiral          four-sided spiral, looping faster     "
"PentSpiral             five-sided spiral     PentSpiralSkewed       five-"
"sided spiral, compact     HexSpiral              six-sided spiral     "
"HexSpiralSkewed        six-sided spiral skewed for compactness     "
"HeptSpiralSkewed       seven-sided spiral, compact     "
"AnvilSpiral            anvil shape     OctagramSpiral         eight pointed "
"star     KnightSpiral           an infinite knight's tour     "
"CretanLabyrinth        7-circuit extended infinitely\n"
"\n"
"    SquareArms             four-arm square spiral     DiamondArms            "
"four-arm diamond spiral     AztecDiamondRings      four-sided rings     "
"HexArms                six-arm hexagonal spiral     GreekKeySpiral         "
"square spiral with Greek key motif     MPeaks                 \"M\" shape "
"layers\n"
"\n"
"    SacksSpiral            quadratic on an Archimedean spiral     "
"VogelFloret            seeds in a sunflower     TheodorusSpiral        unit "
"steps at right angles     ArchimedeanChords      unit chords on an "
"Archimedean spiral     MultipleRings          concentric circles     "
"PixelRings             concentric rings of midpoint pixels     "
"FilledRings            concentric rings of pixels     Hypot                  "
"points by distance     HypotOctant            first octant points by "
"distance     TriangularHypot        points by triangular distance     "
"PythagoreanTree        X^2+Y^2=Z^2 by trees\n"
"\n"
"    PeanoCurve             3x3 self-similar quadrant     "
"PeanoDiagonals         across unit squares     WunderlichSerpentine   "
"transpose parts of PeanoCurve     HilbertCurve           2x2 self-similar "
"quadrant     HilbertSides           along sides of unit squares     "
"HilbertSpiral          2x2 self-similar whole-plane     "
"ZOrderCurve            replicating Z shapes     GrayCode               Gray "
"code splits     WunderlichMeander      3x3 \"R\" pattern quadrant     "
"BetaOmega              2x2 self-similar half-plane     "
"AR2W2Curve             2x2 self-similar of four parts     "
"KochelCurve            3x3 self-similar of two parts     "
"DekkingCurve           5x5 self-similar, edges     DekkingCentres         "
"5x5 self-similar, centres     CincoCurve             5x5 self-similar\n"
"\n"
"    ImaginaryBase          replicate in four directions     "
"ImaginaryHalf          half-plane replicate three directions     "
"CubicBase              replicate in three directions     "
"SquareReplicate        3x3 replicating squares     CornerReplicate        "
"2x2 replicating \"U\"     LTiling                self-similar L shapes     "
"DigitGroups            digits grouped by zeros     FibonacciWordFractal   "
"turns by Fibonacci word bits\n"
"\n"
"    Flowsnake              self-similar hexagonal tile traversal     "
"FlowsnakeCentres         likewise but centres of hexagons     "
"GosperReplicate        self-similar hexagonal tiling     "
"GosperIslands          concentric island rings     GosperSide             "
"single side or radial\n"
"\n"
"    QuintetCurve           self-similar \"+\" traversal     "
"QuintetCentres           likewise but centres of squares     "
"QuintetReplicate       self-similar \"+\" tiling\n"
"\n"
"    DragonCurve            paper folding     DragonRounded          paper "
"folding rounded corners     DragonMidpoint         paper folding segment "
"midpoints     AlternatePaper         alternating direction folding     "
"AlternatePaperMidpoint alternating direction folding, midpoints     "
"TerdragonCurve         ternary dragon     TerdragonRounded       ternary "
"dragon rounded corners     TerdragonMidpoint      ternary dragon segment "
"midpoints     AlternateTerdragon     alternate ternary dragon     "
"R5DragonCurve          radix-5 dragon curve     R5DragonMidpoint       "
"radix-5 dragon curve midpoints     CCurve                 \"C\" curve     "
"ComplexPlus            base i+realpart     ComplexMinus           base i-"
"realpart, including twindragon     ComplexRevolving       revolving base i"
"+1\n"
"\n"
"    SierpinskiCurve        self-similar right-triangles     "
"SierpinskiCurveStair   self-similar right-triangles, stair-step     "
"HIndexing              self-similar right-triangles, squared up\n"
"\n"
"    KochCurve              replicating triangular notches     "
"KochPeaks              two replicating notches     KochSnowflakes         "
"concentric notched 3-sided rings     KochSquareflakes       concentric "
"notched 4-sided rings     QuadricCurve           eight segment zig-zag     "
"QuadricIslands           rings of those zig-zags     SierpinskiTriangle     "
"self-similar triangle by rows     SierpinskiArrowhead    self-similar "
"triangle connectedly     SierpinskiArrowheadCentres  likewise but centres of "
"triangles\n"
"\n"
"    Rows                   fixed-width rows     Columns                fixed-"
"height columns     Diagonals              diagonals between X and Y axes     "
"DiagonalsAlternating   diagonals Y to X and back again     "
"DiagonalsOctant        diagonals between Y axis and X=Y centre     "
"Staircase              stairs down from the Y to X axes     "
"StaircaseAlternating   stairs Y to X and back again     "
"Corner                 expanding stripes around a corner     "
"CornerAlternating      expanding up and down around a corner     "
"PyramidRows            expanding stacked rows pyramid     "
"PyramidSides           along the sides of a 45-degree pyramid     "
"CellularRule           cellular automaton by rule number     "
"CellularRule54         cellular automaton rows pattern     "
"CellularRule57         cellular automaton (rule 99 mirror too)     "
"CellularRule190        cellular automaton (rule 246 mirror too)     "
"UlamWarburton          cellular automaton diamonds     "
"UlamWarburtonQuarter   cellular automaton quarter-plane\n"
"\n"
"    DiagonalRationals      rationals X/Y by diagonals     "
"FactorRationals        rationals X/Y by prime factorization     "
"GcdRationals           rationals X/Y by rows with GCD integer     "
"RationalsTree          rationals X/Y by tree     FractionsTree          "
"fractions 0<X/Y<1 by tree     ChanTree               rationals X/Y multi-"
"child tree     CfracDigits            continued fraction 0<X/Y<1 by "
"digits     CoprimeColumns         coprime X,Y     DivisibleColumns       X "
"divisible by Y     WythoffArray           Fibonacci recurrences     "
"WythoffPreliminaryTriangle     PowerArray             powers in rows     "
"File                   points from a disk file\n"
"\n"
"And in the separate Math-PlanePath-Toothpick distribution\n"
"\n"
"    ToothpickTree          pattern of toothpicks     ToothpickReplicate     "
"same by replication rather than tree     ToothpickUpist         toothpicks "
"only growing upwards     ToothpickSpiral        toothpicks around the "
"origin\n"
"\n"
"    LCornerTree            L-shape corner growth     LCornerReplicate       "
"same by replication rather than tree     OneOfEight     "
"HTree                  H shapes replicated\n"
"\n"
"The paths are object oriented to allow parameters, though many have none. "
"See 'examples/numbers.pl' in the Math-PlanePath sources for a sample "
"printout of numbers from selected paths or all paths."
msgstr ""
"このモジュールは、整数表記の '$n' と二次元座標 '$x,$y' との間を相互に変換する"
"ことのできる、数学におけるパスを利用するためのベースクラスです。 \n"
"\n"
"現時点では下記のようなクラスが用意されています。それぞれ 'Math::PlanePath::"
"Something' は PlanePath を意図していて、サポートするベースクラスや関連するク"
"ラスは 'Math::PlanePath::Base::Xyzzy' のようなクラスになっています。\n"
"\n"
"    SquareSpiral           four-sided spiral     PyramidSpiral          "
"square base pyramid     TriangleSpiral         equilateral triangle "
"spiral     TriangleSpiralSkewed   equilateral skewed for compactness     "
"DiamondSpiral          four-sided spiral, looping faster     "
"PentSpiral             five-sided spiral     PentSpiralSkewed       five-"
"sided spiral, compact     HexSpiral              six-sided spiral     "
"HexSpiralSkewed        six-sided spiral skewed for compactness     "
"HeptSpiralSkewed       seven-sided spiral, compact     "
"AnvilSpiral            anvil shape     OctagramSpiral         eight pointed "
"star     KnightSpiral           an infinite knight's tour     "
"CretanLabyrinth        7-circuit extended infinitely\n"
"\n"
"    SquareArms             four-arm square spiral     DiamondArms            "
"four-arm diamond spiral     AztecDiamondRings      four-sided rings     "
"HexArms                six-arm hexagonal spiral     GreekKeySpiral         "
"square spiral with Greek key motif     MPeaks                 \"M\" shape "
"layers\n"
"\n"
"    SacksSpiral            quadratic on an Archimedean spiral     "
"VogelFloret            seeds in a sunflower     TheodorusSpiral        unit "
"steps at right angles     ArchimedeanChords      unit chords on an "
"Archimedean spiral     MultipleRings          concentric circles     "
"PixelRings             concentric rings of midpoint pixels     "
"FilledRings            concentric rings of pixels     Hypot                  "
"points by distance     HypotOctant            first octant points by "
"distance     TriangularHypot        points by triangular distance     "
"PythagoreanTree        X^2+Y^2=Z^2 by trees\n"
"\n"
"    PeanoCurve             3x3 self-similar quadrant      "
"PeanoDiagonals         across unit squares     WunderlichSerpentine   "
"transpose parts of PeanoCurve     HilbertCurve           2x2 self-similar "
"quadrant     HilbertSides           along sides of unit squares     "
"HilbertSpiral          2x2 self-similar whole-plane     "
"ZOrderCurve            replicating Z shapes     GrayCode               Gray "
"code splits     WunderlichMeander      3x3 \"R\" pattern quadrant     "
"BetaOmega              2x2 self-similar half-plane     "
"AR2W2Curve             2x2 self-similar of four parts     "
"KochelCurve            3x3 self-similar of two parts     "
"DekkingCurve           5x5 self-similar, edges     DekkingCentres         "
"5x5 self-similar, centres     CincoCurve             5x5 self-similar\n"
"\n"
"    ImaginaryBase          replicate in four directions     "
"ImaginaryHalf          half-plane replicate three directions     "
"CubicBase              replicate in three directions     "
"SquareReplicate        3x3 replicating squares     CornerReplicate        "
"2x2 replicating \"U\"     LTiling                self-simlar L shapes     "
"DigitGroups            digits grouped by zeros     FibonacciWordFractal   "
"turns by Fibonacci word bits\n"
"\n"
"    Flowsnake              self-similar hexagonal tile traversal     "
"FlowsnakeCentres         likewise but centres of hexagons     "
"GosperReplicate        self-similar hexagonal tiling     "
"GosperIslands          concentric island rings     GosperSide             "
"single side or radial\n"
"\n"
"    QuintetCurve           self-similar \"+\" traversal     "
"QuintetCentres           likewise but centres of squares     "
"QuintetReplicate       self-similar \"+\" tiling\n"
"\n"
"    DragonCurve            paper folding     DragonRounded          paper "
"folding rounded corners     DragonMidpoint         paper folding segment "
"midpoints     AlternatePaper         alternating direction folding     "
"AlternatePaperMidpoint alternating direction folding, midpoints     "
"TerdragonCurve         ternary dragon     TerdragonRounded       ternary "
"dragon rounded corners     TerdragonMidpoint      ternary dragon segment "
"midpoints     AlternateTerdragon     alternate ternary dragon     "
"R5DragonCurve          radix-5 dragon curve     R5DragonMidpoint       "
"radix-5 dragon curve midpoints     CCurve                 \"C\" curve     "
"ComplexPlus            base i+realpart     ComplexMinus           base i-"
"realpart, including twindragon     ComplexRevolving       revolving base i"
"+1\n"
"\n"
"    SierpinskiCurve        self-similar right-triangles     "
"SierpinskiCurveStair   self-similar right-triangles, stair-step     "
"HIndexing              self-similar right-triangles, squared up\n"
"\n"
"    KochCurve              replicating triangular notches     "
"KochPeaks              two replicating notches     KochSnowflakes         "
"concentric notched 3-sided rings     KochSquareflakes       concentric "
"notched 4-sided rings     QuadricCurve           eight segment zig-zag     "
"QuadricIslands           rings of those zig-zags     SierpinskiTriangle     "
"self-similar triangle by rows     SierpinskiArrowhead    self-similar "
"triangle connectedly     SierpinskiArrowheadCentres  likewise but centres of "
"triangles\n"
"\n"
"    Rows                   fixed-width rows     Columns                fixed-"
"height columns     Diagonals              diagonals between X and Y axes     "
"DiagonalsAlternating   diagonals Y to X and back again     "
"DiagonalsOctant        diagonals between Y axis and X=Y centre     "
"Staircase              stairs down from the Y to X axes     "
"StaircaseAlternating   stairs Y to X and back again     "
"Corner                 expanding stripes around a corner     "
"CornerAlternating      expanding up and down around a corner     "
"PyramidRows            expanding stacked rows pyramid     "
"PyramidSides           along the sides of a 45-degree pyramid     "
"CellularRule           cellular automaton by rule number     "
"CellularRule54         cellular automaton rows pattern     "
"CellularRule57         cellular automaton (rule 99 mirror too)     "
"CellularRule190        cellular automaton (rule 246 mirror too)     "
"UlamWarburton          cellular automaton diamonds     "
"UlamWarburtonQuarter   cellular automaton quarter-plane\n"
"\n"
"    DiagonalRationals      rationals X/Y by diagonals     "
"FactorRationals        rationals X/Y by prime factorization     "
"GcdRationals           rationals X/Y by rows with GCD integer     "
"RationalsTree          rationals X/Y by tree     FractionsTree          "
"fractions 0<X/Y<1 by tree     ChanTree               rationals X/Y multi-"
"child tree     CfracDigits            continued fraction 0<X/Y<1 by "
"digits     CoprimeColumns         coprime X,Y     DivisibleColumns       X "
"divisible by Y     WythoffArray           Fibonacci recurrences     "
"WythoffPreliminaryTriangle     PowerArray             powers in rows     "
"File                   points from a disk file\n"
"\n"
"And in the separate Math-PlanePath-Toothpick distribution\n"
"\n"
"    ToothpickTree          pattern of toothpicks     ToothpickReplicate     "
"same by replication rather than tree     ToothpickUpist         toothpicks "
"only growing upwards     ToothpickSpiral        toothpicks around the "
"origin\n"
"\n"
"    LCornerTree            L-shape corner growth     LCornerReplicate       "
"same by replication rather than tree     OneOfEight     "
"HTree                  H shapes replicated\n"
"\n"
"パスはパラメータを許容できるようにするためオブジェクト指向になっていますが、"
"そうでないものも多数あります。選択したパスやすべてのパスからの数値出力につい"
"て、詳しくは Math-PlanePath ソース内の 'examples/numbers.pl' をお読みくださ"
"い。"

#. leap/perl-Math-Random-ISAAC/summary
msgid "Perl interface to the ISAAC PRNG algorithm"
msgstr "ISAAC PRNG アルゴリズムに対する Perl インターフェイス"

#. leap/perl-Math-Random-ISAAC/description
msgid ""
"As with other Pseudo-Random Number Generator (PRNG) algorithms like the "
"Mersenne Twister (see Math::Random::MT), this algorithm is designed to take "
"some seed information and produce seemingly random results as output. "
"However, ISAAC (Indirection, Shift, Accumulate, Add, and Count) has "
"different goals than these commonly used algorithms. In particular, it's "
"really fast - on average, it requires only 18.75 machine cycles to generate "
"a 32-bit value. This makes it suitable for applications where a significant "
"amount of random data needs to be produced quickly, such solving using the "
"Monte Carlo method or for games. The results are uniformly distributed, "
"unbiased, and unpredictable unless you know the seed. The algorithm was "
"published by Bob Jenkins in the late 90s and despite the best efforts of "
"many security researchers, no feasible attacks have been found to date."
msgstr ""
"Mersenne Twister (Math::Random::MT) など、他の疑似乱数生成器 (PRNG) と同様"
"に、このアルゴリズムもいくつかのシード情報を受け取って、擬似的な乱数を出力し"
"ます。しかしながら、 ISAAC (Indirection, Shift, Accumulate, Add, and Count) "
"は、これらの一般的なアルゴリズムとは異なる目的を有しています。特にこれは高速"
"性の点で優れており、 32 ビットの値を生成するのに 18.75 マシンサイクルしか必要"
"としません。これは高速に乱数を生成する必要のあるアプリケーション用途で便利な"
"仕組みで、モンテカルロ法の解決やゲームなどに最適です。結果は均一に散らばって"
"いて偏りもなく、シード値を知らない限り予測不能な値を出力します。アルゴリズム"
"は 90 年代終盤に Job Jenkins 氏により公開されたものですが、現在も多くのセキュ"
"リティ研究者が研究している限りにおいて、実行可能な攻撃手法は見つかっていませ"
"ん。"

#. leap/perl-Math-Round/summary
msgid "Perl extension for rounding numbers"
msgstr "数値を丸めるための Perl 拡張"

#. leap/perl-Math-Round/description
msgid ""
"*Math::Round* supplies functions that will round numbers in different ways. "
"The functions *round* and *nearest* are exported by default; others are "
"available as described below. \"use ... qw(:all)\" exports all functions."
msgstr ""
"*Math::Round* は様々な方法で数値を丸める機能を提供します。既定では *round* "
"と *nearest* の各館数が公開されますが、その他の関数は指定に応じて公開されま"
"す。 \"use ... qw(:all)\" を指定すると、すべての関数を公開します。"

#. leap/perl-Memoize-ExpireLRU/summary
msgid "Expiry plug-in for Memoize that adds LRU cache expiration"
msgstr "LRU キャッシュの期限切れを記憶するプラグイン"

#. leap/perl-Memoize-ExpireLRU/description
msgid ""
"For the theory of Memoization, please see the Memoize module documentation. "
"This module implements an expiry policy for Memoize that follows LRU "
"semantics, that is, the last n results, where n is specified as the argument "
"to the 'CACHESIZE' parameter, will be cached."
msgstr ""
"記憶の理論的な仕組みについては、 Memorize モジュールのドキュメンテーションを"
"お読みください。このモジュールは、 LRU の方式で Memorize 向けの期限切れポリ"
"シーを実装しています。 LRU では最新の n 個の項目のみを記憶する仕組みで、 n "
"は 'CACHESIZE' パラメータで指定することができます。"

#. leap/perl-Meta-Builder/summary
msgid "Tools for creating Meta objects to track custom metrics"
msgstr "Meta オブジェクトに対して独自のメトリックを追跡するためのツール"

#. leap/perl-Meta-Builder/description
msgid ""
"Meta programming is becoming more and more popular. The popularity of Meta "
"programming comes from the fact that many problems are made significantly "
"easier. There are a few specialized Meta tools out there, for instance Class:"
"MOP which is used by Moose to track class metadata.\n"
"\n"
"Meta::Builder is designed to be a generic tool for writing Meta objects. "
"Unlike specialized tools, Meta::Builder makes no assumptions about what "
"metrics you will care about. Meta::Builder also makes it simple for others "
"to extend your meta-object based tools by providing hooks for other packages "
"to add metrics to your meta object.\n"
"\n"
"If a specialized Meta object tool is available to meet your needs please use "
"it. However if you need a simple Meta object to track a couple metrics, use "
"Meta::Builder.\n"
"\n"
"Meta::Builder is also low-sugar and low-dep. In most cases you will not want "
"a class that needs a meta object to use your meta-object class directly. "
"Rather you will usually want to create a sugar class that exports enhanced "
"API functions that manipulate the meta object."
msgstr ""
"メタプログラミングは日に日に知られるようになってきています。メタプログラミン"
"グの知名度は、多くの問題が比較的簡単であるという事実から来ています。いくつか"
"の特化したメタツールが公開されていて、たとえば Mosse で使用されている Class:"
"MOP などは、クラスのメタデータを追跡する際に使用するものです。\n"
"\n"
"Meta::Builder はメタオブジェクトを記述するための汎用的なツールです。特化した"
"ツールとは異なり、 Meta::Builder は特定のメトリックを使用していることを想定し"
"ていません。このほかにも、 Meta::Builder では、お使いのメタオブジェクト内にメ"
"トリックを追加するにあたって、他のパッケージ向けのフックを提供することで、メ"
"タオブジェクトベースのツールを拡張しやすくする仕組みも用意されています。\n"
"\n"
"特定の用途に特化したメタオブジェクトツールをご希望の場合は、そちらをお使い管"
"井。しかしながら、メトリックの対を追跡するためのシンプルなメタオブジェクトを"
"必要とする場合は、 Meta::Builder をお使いください。\n"
"\n"
"Meta::Builder は省エネルギーな仕組みです。多くの場合、お使いのメタオブジェク"
"トのクラスで使用する際、メタオブジェクトを直接必要とするクラスは作成する必要"
"はありません。その代わり、メタオブジェクトを操作するための拡張 API 関数を公開"
"する、 \"シュガークラス\" を作成する必要があるはずです。"

#. leap/perl-Method-Signatures/summary
msgid "Method and Function Declarations with Signatures and No Source Filter"
msgstr "シグネーチャ付きでソースフィルタのないメソッドと関数の宣言"

#. leap/perl-Method-Signatures/description
msgid ""
"Provides two new keywords, 'func' and 'method', so that you can write "
"subroutines with signatures instead of having to spell out 'my $self = "
"shift; my($thing) = @_'\n"
"\n"
"'func' is like 'sub' but takes a signature where the prototype would "
"normally go. This takes the place of 'my($foo, $bar) = @_' and does a whole "
"lot more.\n"
"\n"
"'method' is like 'func' but specifically for making methods. It will "
"automatically provide the invocant as '$self' (by default). No more 'my "
"$self = shift'."
msgstr ""
"'func' と 'method' という 2 つのキーワードを提供します。これらを利用すること"
"で、 'my $self = shift; my($thing) = @_' のような記述を行なうことなくシグネー"
"チャ付きのサブルーチンを作成することができます。\n"
"\n"
"'func' は 'sub' に似た仕組みですが、通常はどのようなパラメータを指定すべきか"
"を示すシグネーチャを設定します。これは  'my($foo, $bar) = @_' にとって代わる"
"仕組みで、それ以上のことを行なう仕組みです。\n"
"\n"
"'method' は 'func' に似た仕組みですが、こちらはメソッドを作成する際に使用する"
"ものです。これにより、自動的に '$self' を指定して実行する仕組みを提供します。"
"言い換えると、 'my $self = shift' はもはや不要になるということです。"

#. leap/perl-Method-Signatures-Simple/summary
#. leap/perl-Method-Signatures-Simple/description
msgid "Basic method declarations with signatures, without source filters"
msgstr "シグネーチャ付きの基本的なメソッド宣言 (ソースフィルタなし)"

#. leap/perl-Minion/summary
msgid "Job queue"
msgstr "ジョブキュー"

#. leap/perl-Minion/description
msgid ""
"Minion is a high performance job queue for the Perl programming language, "
"with support for multiple named queues, priorities, high priority fast lane, "
"delayed jobs, job dependencies, job progress, job results, retries with "
"backoff, rate limiting, unique jobs, expiring jobs, statistics, distributed "
"workers, parallel processing, autoscaling, remote control, at https://"
"mojolicious.org admin ui, resource leak protection and multiple backends "
"(such as at https://www.postgresql.org).\n"
"\n"
"Job queues allow you to process time and/or computationally intensive tasks "
"in background processes, outside of the request/response lifecycle of web "
"applications. Among those tasks you'll commonly find image resizing, spam "
"filtering, HTTP downloads, building tarballs, warming caches and basically "
"everything else you can imagine that's not super fast.\n"
"\n"
"Take a look at our excellent documentation in Minion::Guide!"
msgstr ""
"Minion は Perl プログラミング言語における高性能なジョブキューです。複数の名前"
"付きキューに対応しているほか、優先順位、高優先順位ファーストレーンや遅延ジョ"
"ブ、ジョブ同士の依存関係や進捗管理、結果やバックオフ付きの再試行、ユニーク"
"ジョブやジョブの有効期限設定、統計情報や分散ワーカー、並行処理や自動スケー"
"ル、リモートコントロール (https://mojolicious.org) 、管理 UI やリソースリーク"
"検出、複数バックエンド (https://www.postgresql.org など) の機能がありま"
"す。 \n"
"\n"
"ジョブキューは裏での一括処理を管理する仕組みで、 Web アプリケーションのリクエ"
"スト／レスポンスとは別枠で動作するものです。これらのタスクには例えば、画像の"
"サイズ変更や SPAM のフィルタリング、 HTTP のダウンロードや tar ボールのビル"
"ド、キャッシュの再活性化など、あらゆることを非常に高速に処理することができま"
"す。\n"
"\n"
"Minion::Guide の優れたドキュメントをご覧ください!"

#. leap/perl-Minion-Backend-SQLite/summary
msgid "SQLite backend for Minion job queue"
msgstr "Minion ジョブキュー向け SQLite バックエンド"

#. leap/perl-Minion-Backend-SQLite/description
msgid ""
"Minion::Backend::SQLite is a backend for Minion based on Mojo::SQLite. All "
"necessary tables will be created automatically with a set of migrations "
"named 'minion'. If no connection string or ':temp:' is provided, the "
"database will be created in a temporary directory."
msgstr ""
"Minion::Backend::SQLite は Mojo::SQLIte をベースにした Minion 向けバックエン"
"ドです。必要な全てのテーブルは自動的に作成され、 'minion' と命名された移行処"
"理を実施するようになっています。また、接続文字列や ':temp:' が提供されない場"
"合は、一時ディレクトリ内にデータベースを作成します。"

#. leap/perl-Mixin-Linewise/summary
msgid "Write your linewise code for handles; this does the rest"
msgstr "ハンドル用の行コードを記述します。これが残りを行います。"

#. leap/perl-Mixin-Linewise/description
msgid ""
"It's boring to deal with opening files for IO, converting strings to handle-"
"like objects, and all that. With Mixin::Linewise::Readers and Mixin::"
"Linewise::Writers, you can just write a method to handle handles, and "
"methods for handling strings and filenames are added for you."
msgstr ""
"IO用にファイルを開いたり、ストリングをハンドルのようなオブジェクトに変換したりするのは退屈です。Mixin::Linewise::ReadersとMix"
"in::Linewise::Writersでは、ハンドルを処理するメソッドを作成するだけで、文字列やファイル名を処理するメソッドが追加されます。"

#. leap/perl-Mo/summary
msgid "Micro Objects. Mo is less"
msgstr "マイクロオブジェクト (Mo is less)"

#. leap/perl-Mo/description
msgid "Micro Objects. Mo is less."
msgstr "マイクロオブジェクト (Mo is less) です。"

#. leap/perl-Mock-Config/summary
msgid "Temporarily Set Config or Xsconfig Values"
msgstr "一時的な設定もしくは Xsconfig 値の変更"

#. leap/perl-Mock-Config/description
msgid "temporarily set Config or XSConfig values"
msgstr "一時的な設定もしくは Xsconfig 値の変更"

#. leap/perl-Mock-Quick/summary
msgid "Quickly mock objects and classes, even temporarily replace them,"
msgstr "すばやくオブジェクトやクラスを真似るツール (一時的な置き換えにも対応)"

#. leap/perl-Mock-Quick/description
msgid ""
"Mock-Quick is here to solve the current problems with Mocking libraries.\n"
"\n"
"There are a couple Mocking libraries available on CPAN. The primary problems "
"with these libraries include verbose syntax, and most importantly side-"
"effects. Some Mocking libraries expect you to mock a specific class, and "
"will unload it then redefine it. This is particularly a problem if you only "
"want to override a class on a lexical level.\n"
"\n"
"Mock-Quick provides a declarative mocking interface that results in a very "
"concise, but clear syntax. There are separate facilities for mocking object "
"instances, and classes. You can quickly create an instance of an object with "
"custom attributes and methods. You can also quickly create an anonymous "
"class, optionally inheriting from another, with whatever methods you "
"desire.\n"
"\n"
"Mock-Quick also provides a tool that provides an OO interface to overriding "
"methods in existing classes. This tool also allows for the restoration of "
"the original class methods. Best of all this is a localized tool, when your "
"control object falls out of scope the original class is restored."
msgstr ""
"Mock-Quick は Mocking ライブラリを使用する際に発生する問題に対応するための仕"
"組みです。\n"
"\n"
"CPAN には様々な Mocking ライブラリが公開されています。これらのライブラリで主"
"に発生する問題としては、冗長な文法であったり、重要な副作用があったりなどがあ"
"ります。 Mocking ライブラリによっては、特定のクラスを真似るように求めるものが"
"あり、いったんアンロードして再定義するようなものもあります。これは特に、文法"
"レベルでクラスをオーバーライドしたいだけの場合には問題となります。\n"
"\n"
"Mock-Quick は定義型のモックインターフェイスを提供します。これにより、簡潔であ"
"りながらも明確な文法になります。オブジェクトのインスタンスやクラスを真似るた"
"めの個別の仕組みも用意されています。独自の属性やメソッドを持つオブジェクトの"
"インスタンスを、すばやく作成することができます。匿名クラスの作成にも対応して"
"いるほか、匿名クラスを一方のクラスから継承させたり、必要なメソッドを取り込ん"
"だりすることもできます。\n"
"\n"
"Mock-Quick では、既存のクラス内でメソッドをオーバーライドするための、オブジェ"
"クト指向インターフェイスを提供するツールも用意されています。このツールによ"
"り、もともとのクラスメソッドを復元することもできるようになります。これらすべ"
"てはローカライズされたツールで、お使いのコントロールオブジェクトがスコープか"
"ら外れた際、元のクラスが復元される仕組みです。"

#. leap/perl-Modern-Perl/summary
msgid "Enable all of the features of Modern Perl with one import"
msgstr "Perl の新しい機能を一括でインポートするモジュール"

#. leap/perl-Modern-Perl/description
msgid "enable all of the features of Modern Perl with one import"
msgstr "Perl の新しい機能を一括でインポートするモジュール"

#. leap/perl-Module-Build/summary
msgid "Build and install Perl modules"
msgstr "Perl モジュールの構築とインストール"

#. leap/perl-Module-Build/description
msgid ""
"'Module::Build' is a system for building, testing, and installing Perl "
"modules. It is meant to be an alternative to 'ExtUtils::MakeMaker'. "
"Developers may alter the behavior of the module through subclassing in a "
"much more straightforward way than with 'MakeMaker'. It also does not "
"require a 'make' on your system - most of the 'Module::Build' code is pure-"
"perl and written in a very cross-platform way.\n"
"\n"
"See \"MOTIVATIONS\" for more comparisons between 'ExtUtils::MakeMaker' and "
"'Module::Build'.\n"
"\n"
"To install 'Module::Build', and any other module that uses 'Module::Build' "
"for its installation process, do the following:\n"
"\n"
"  perl Build.PL       # 'Build.PL' script creates the 'Build' script   ./"
"Build             # Need ./ to ensure we're using this \"Build\" script   ./"
"Build test        # and not another one that happens to be in the PATH   ./"
"Build install\n"
"\n"
"This illustrates initial configuration and the running of three 'actions'. "
"In this case the actions run are 'build' (the default action), 'test', and "
"'install'. Other actions defined so far include:\n"
"\n"
"  build                          manifest   clean                          "
"manifest_skip   code                           manpages   "
"config_data                    pardist   diff                           "
"ppd   dist                           ppmdist   "
"distcheck                      prereq_data   distclean                      "
"prereq_report   distdir                        pure_install   "
"distinstall                    realclean   distmeta                       "
"retest   distsign                       skipcheck   "
"disttest                       test   docs                           "
"testall   fakeinstall                    testcover   "
"help                           testdb   html                           "
"testpod   install                        testpodcoverage   "
"installdeps                    versioninstall\n"
"\n"
"You can run the 'help' action for a complete list of actions."
msgstr ""
"'Module::Build' は Perl モジュールを構築し、テストし、インストールするための"
"システムです。 'ExtUtils::MakeMaker' の代替となるべく開発されています。開発者"
"は 'MakeMaker' よりもずっと直観的な方法で、モジュールの動作を変更することもで"
"きます。また、お使いのシステムには 'make' を必要としなくなります。それは、 "
"'Module::Build' のほとんどのコードは純粋な Perl で作成されていて、クロスプ"
"ラットフォームな方法で書かれているためです。\n"
"\n"
"'ExtUtils::MakeMaker' と 'Module::Build' の比較について、詳しくは "
"\"MOTIVATIONS\" のマニュアルページをお読みください。\n"
"\n"
"'Module::Build' やこれをインストール時に使用するモジュールをインストールする"
"には、下記のようにして行ないます:\n"
"\n"
"  perl Build.PL       # 'Build.PL' スクリプトが 'Build' スクリプトを作成しま"
"す   ./Build             # カレントディレクトリにある \"Build\" スクリプトを"
"指定して実行します   ./Build test           ./Build install\n"
"\n"
"これは初期設定と 3 種類の 'アクション' を説明しているものです。この場合、 "
"'build' (既定のアクション), 'test', 'install' の各処理を実行しています。その"
"他のアクションには、下記のようなものがあります:\n"
"\n"
"  build                          manifest   clean                          "
"manifest_skip   code                           manpages   "
"config_data                    pardist   diff                           "
"ppd   dist                           ppmdist   "
"distcheck                      prereq_data   distclean                      "
"prereq_report   distdir                        pure_install   "
"distinstall                    realclean   distmeta                       "
"retest   distsign                       skipcheck   "
"disttest                       test   docs                           "
"testall   fakeinstall                    testcover   "
"help                           testdb   html                           "
"testpod   install                        testpodcoverage   "
"installdeps                    versioninstall\n"
"\n"
"動作の一覧について、詳しくは 'help' のセクションをお読みください。"

#. leap/perl-Module-Build-Deprecated/summary
msgid "Collection of Modules Removed From Module-Build"
msgstr "Module-Build から削除されたモジュール集"

#. leap/perl-Module-Build-Deprecated/description
msgid ""
"This module contains a number of module that have been removed from Module-"
"Build: \n"
"* * Module::Build::ModuleInfo\n"
"\n"
"This has been superceded by Module::Metadata \n"
"* * Module::Build::Version\n"
"\n"
"This has been replaced by version \n"
"* * Module::Build::YAML\n"
"\n"
"This has been replaced by CPAN::Meta::YAML"
msgstr ""
"このモジュールには、 Module-Build から削除された多数のモジュールが含まれてい"
"ます:\n"
"* * Module::Build::ModuleInfo\n"
"\n"
"こちらは Module::Metadata に置き換えられたものです。\n"
"* * Module::Build::Version\n"
"\n"
"こちらは version に置き換えられたものです。\n"
"* * Module::Build::YAML\n"
"\n"
"こちらは CPAN::Meta::YAML に置き換えられたものです。"

#. leap/perl-Module-Build-Tiny/summary
msgid "A tiny replacement for Module::Build"
msgstr "Module::Build の簡易的な置き換え"

#. leap/perl-Module-Build-Tiny/description
msgid ""
"Many Perl distributions use a Build.PL file instead of a Makefile.PL file to "
"drive distribution configuration, build, test and installation. "
"Traditionally, Build.PL uses Module::Build as the underlying build system. "
"This module provides a simple, lightweight, drop-in replacement.\n"
"\n"
"Whereas Module::Build has over 6,700 lines of code; this module has less "
"than 120, yet supports the features needed by most distributions."
msgstr ""
"多くの Perl の配布物では Makefile.PL ファイルではなく Build.PL を利用して、配"
"布物の設定や構築、テストやインストールなどを行なっています。伝統的には Build."
"PL は Module::Build を裏の構築システムとして使用しています。このモジュール"
"は、シンプルで軽量な、その場で置き換えられる仕組みを提供します。\n"
"\n"
"Module::Build は 6,700 行ものコードがありますが、このモジュールは多くの配布物"
"で必要な機能に対応しながら、 120 行未満でできています。"

#. leap/perl-Module-Build-WithXSpp/summary
msgid "XS++ enhanced flavour of Module::Build"
msgstr "Module::Build の XS++ 拡張フレーバー"

#. leap/perl-Module-Build-WithXSpp/description
msgid ""
"This subclass of the Module::Build manpage adds some tools and processes to "
"make it easier to use for wrapping C++ using XS++ (the ExtUtils::XSpp "
"manpage).\n"
"\n"
"There are a few minor differences from using 'Module::Build' for an ordinary "
"XS module and a few conventions that you should be aware of as an XS++ "
"module author. They are documented in the the /\"FEATURES AND CONVENTIONS\" "
"manpage section below. But if you can't be bothered to read all that, you "
"may choose skip it and blindly follow the advice in the /\"JUMP START FOR "
"THE IMPATIENT\" manpage.\n"
"\n"
"An example of a full distribution based on this build tool can be found in "
"the the ExtUtils::XSpp manpage distribution under _examples/XSpp-Example_. "
"Using that example as the basis for your 'Module::Build::WithXSpp'-based "
"distribution is probably a good idea."
msgstr ""
"この Module::Build のサブクラスは、いくつかのツールやプロセスを追加すること"
"で、 XS++ (ExtUtils::XSpp) を利用した C++ のラッピングを使いやすくします。\n"
"\n"
"'Module::Build' を利用する通常の XS モジュールとは少し異なる点があるほか、 XS"
"++ モジュールの作者が注意すべきいくつかの慣例があります。これらは /"
"\"FEATURES AND CONVENTIONS\" セクションで説明しています。ただし、すべてを読む"
"のが面倒だとお感じの場合は、左記の章を読み飛ばして、 /\"JUMP START FOR THE "
"IMPATIENT\" 内にあるアドバイスに従ってください。\n"
"\n"
"この構築ツールをベースにした完全な配布物の例は、 _examples/XSpp-Example_ 内に"
"ある ExtUtils::XSpp をご覧ください。 'Module::Build::WithXSpp' ベースの配布物"
"を作成する際は、この例を利用するとよいでしょう。"

#. leap/perl-Module-Build-XSUtil/summary
msgid "Module::Build class for building XS modules"
msgstr "XS モジュールを構築するために必要な Module::Build クラス"

#. leap/perl-Module-Build-XSUtil/description
msgid ""
"Module::Build::XSUtil is subclass of Module::Build for support building XS "
"modules.\n"
"\n"
"This is a list of a new parameters in the Module::Build::new method: \n"
"* needs_compiler_c99\n"
"\n"
"This option checks C99 compiler's availability. If it's not available, Build."
"PL exits by 0. \n"
"* needs_compiler_cpp\n"
"\n"
"This option checks C++ compiler's availability. If it's not available, Build."
"PL exits by 0.\n"
"\n"
"In addition, append 'extra_compiler_flags' and 'extra_linker_flags' for C+"
"+. \n"
"* generate_ppport_h\n"
"\n"
"Genereate ppport.h by Devel::PPPort. \n"
"* generate_xshelper_h\n"
"\n"
"Genereate xshelper.h which is a helper header file to include EXTERN.h, perl."
"h, XSUB.h and ppport.h, and defines some portability stuff which are not "
"supported by ppport.h.\n"
"\n"
"It is porting from Module::Install::XSUtil. \n"
"* cc_warnings\n"
"\n"
"Enable compiler warnings flag. It is enable by default. \n"
"* -g options\n"
"\n"
"If invoke Build.PL with '-g' option, It will build with debug options."
msgstr ""
"Module::Build::XSUtil は Module::Build に対するサブクラスで、 XS モジュールを"
"構築するのに必要なモジュールです。\n"
"\n"
"Module::Build::new メソッドで利用できる新しいパラメータは下記のとおりです:\n"
"* needs_compiler_c99\n"
"\n"
"このオプションを設定すると、 C99 コンパイラが存在するかどうかを確認します。存"
"在していれば Build.PL は 0 で終了します。\n"
"* needs_compiler_cpp\n"
"\n"
"このオプションは C++ コンパイラが存在するかどうかを確認します。存在していれ"
"ば Build.PL は 0 で終了します。\n"
"\n"
"これに加えて、 C++ には 'extra_compiler_flags' や 'extra_linker_flags' があり"
"ます。\n"
"* generate_ppport_h\n"
"\n"
"Devel::PPPort で ppport.h を生成します。\n"
"* generate_xshelper_h\n"
"\n"
"EXTERN.h, perl.h, XSUB.h, ppport.h へのヘルパーヘッダファイルである xshelper."
"h を生成するほか、 ppport.h では対応していない可搬性のオプションなどを設定し"
"ます。\n"
"\n"
"こちらは Module::Install::XSUtil から移植したものです。\n"
"* cc_warnings\n"
"\n"
"コンパイラの警告フラグを有効にします。既定で有効化されます。\n"
"* -g options\n"
"\n"
"'-g' オプション付きで Build.PL を実行した場合、デバッグオプション付きで構築す"
"ることができます。"

#. leap/perl-Module-CPANfile/summary
msgid "Parse cpanfile"
msgstr "cpanfile の処理"

#. leap/perl-Module-CPANfile/description
msgid ""
"Module::CPANfile is a tool to handle cpanfile format to load application "
"specific dependencies, not just for CPAN distributions."
msgstr ""
"Module::CPANfile は cpanfile 形式を処理するためのツールで、アプリケーション固"
"有の依存関係を読み込む際に利用します。 CPAN 配布物以外でも利用することができ"
"ます。"

#. leap/perl-Module-Depends/summary
msgid "Identify the Dependencies of a Distribution"
msgstr "配布物の依存関係の識別"

#. leap/perl-Module-Depends/description
msgid ""
"Module::Depends extracts module dependencies from an unpacked distribution "
"tree.\n"
"\n"
"Module::Depends only evaluates the META.yml shipped with a distribution. "
"This won't be effective until all distributions ship META.yml files, so we "
"suggest you take your life in your hands and look at Module::Depends::"
"Intrusive."
msgstr ""
"Module::Depends は圧縮されていない配布物のツリーから、モジュールの依存関係を"
"抽出することができます。\n"
"\n"
"Module::Depends は配布物に含まれている META.yml のみを読み込みます。すべての"
"配布物に META.yml が含まれていないと意味のない仕組みですが、このモジュールの"
"ために作成しておくことをお勧めします。また、 Module::Depends::Intrusive につ"
"いてもお読みください。"

#. leap/perl-Module-Find/summary
msgid "Find and use installed modules in a (sub)category"
msgstr "(サブ) カテゴリ内でのインストール済みモジュールの検出と利用"

#. leap/perl-Module-Find/description
msgid ""
"Module::Find lets you find and use modules in categories. This can be very "
"useful for auto-detecting driver or plugin modules. You can differentiate "
"between looking in the category itself or in all subcategories.\n"
"\n"
"If you want Module::Find to search in a certain directory on your harddisk "
"(such as the plugins directory of your software installation), make sure you "
"modify '@INC' before you call the Module::Find functions."
msgstr ""
"Module::Find はカテゴリごとにモジュールを検索し、それを使用することができる仕"
"組みです。ドライバやプラグインを自動検出させたいような用途には、非常に便利な"
"仕組みです。なお、カテゴリそれ自身の中を検索する場合と、すべてのカテゴリで検"
"索する場合を分けることもできます。\n"
"\n"
"Module::Find でお使いのハードディスク内の特定のディレクトリを検索したい場合 "
"(たとえばソフトウエアのディレクトリ内のプラグインディレクトリ) は、 Module::"
"Find 関数を呼び出す前に '@INC' を変更してください。"

#. leap/perl-Module-Implementation/summary
msgid "Loads one of several alternate underlying implementations for a module"
msgstr "モジュールに対する代替実装のうちのいずれかを読み込むモジュール"

#. leap/perl-Module-Implementation/description
msgid ""
"This module abstracts out the process of choosing one of several underlying "
"implementations for a module. This can be used to provide XS and pure Perl "
"implementations of a module, or it could be used to load an implementation "
"for a given OS or any other case of needing to provide multiple "
"implementations.\n"
"\n"
"This module is only useful when you know all the implementations ahead of "
"time. If you want to load arbitrary implementations then you probably want "
"something like a plugin system, not this module."
msgstr ""
"このモジュールは、モジュールに対する実装を選択する処理を抽象化します。これは "
"XS や純粋な Perl モジュールの実装を使用することができるほか、指定したOS やそ"
"の他の実装から選択することもできます。\n"
"\n"
"このモジュールは、あらかじめ実装を知っている場合にのみ有効な仕組みです。プラ"
"グインシステムのようなものをご希望の場合は、このモジュールは不適切です。"

#. leap/perl-Module-Info/summary
msgid "Information about Perl modules"
msgstr "Perl モジュールに関する情報"

#. leap/perl-Module-Info/description
msgid ""
"Module::Info gives you information about Perl modules *without actually "
"loading the module*. It actually isn't specific to modules and should work "
"on any perl code."
msgstr ""
"Module::Info は、実際にそのモジュールを読み込むことなく Perl モジュールの情報"
"を取得することができるモジュールです。実際にはモジュールに限定されず、いかな"
"る Perl コードでも動作するはずのものです。"

#. leap/perl-Module-Install/summary
msgid "Standalone, extensible Perl module installer"
msgstr "単独で動作する拡張可能な Perl モジュールインストーラ"

#. leap/perl-Module-Install/description
msgid ""
"*Module::Install* is a package for writing installers for CPAN (or CPAN-"
"like) distributions that are clean, simple, minimalist, act in a strictly "
"correct manner with ExtUtils::MakeMaker, and will run on any Perl "
"installation version 5.005 or newer.\n"
"\n"
"The intent is to make it as easy as possible for CPAN authors (and "
"especially for first-time CPAN authors) to have installers that follow all "
"the best practices for distribution installation, but involve as much DWIM "
"(Do What I Mean) as possible when writing them."
msgstr ""
"*Module::Install* は CPAN (または CPAN に似た) 配布物のインストーラを作成する"
"ためのモジュールです。クリーンでシンプルな仕組みで、余計なコードもなく、 "
"ExtUtils::MakeMaker を利用して厳密に正しい動作をするようになっています。ま"
"た、 Perl のバージョン 5.005 もしくはそれ以降のバージョンで動作します。\n"
"\n"
"このモジュールは、 CPAN の作者に対してできる限り簡単にインストーラを作成でき"
"るようにするためのもので、各配布物に対して最適な方法に従いながら、できる限り "
"DWIM (Do What I Mean; 意図したとおりにやる) の原則に従ってインストーラが完成"
"するように作られています。"

#. leap/perl-Module-Install-AuthorTests/summary
msgid "Designate Tests Only Run by Module Authors"
msgstr "モジュールの作者のみが実行するテストの指定"

#. leap/perl-Module-Install-AuthorTests/description
msgid "designate tests only run by module authors"
msgstr "モジュールの作者のみが実行するテストの指定"

#. leap/perl-Module-Install-ExtraTests/summary
msgid "Contextual Tests That the Harness Can Ignore"
msgstr "無視することもできる状況依存のテスト"

#. leap/perl-Module-Install-ExtraTests/description
msgid "contextual tests that the harness can ignore"
msgstr "無視することもできる状況依存のテスト"

#. leap/perl-Module-Load-Conditional/summary
msgid "Looking up module information / loading at runtime"
msgstr "実行時にモジュールの情報を参照して読み込むモジュール"

#. leap/perl-Module-Load-Conditional/description
msgid ""
"Module::Load::Conditional provides simple ways to query and possibly load "
"any of the modules you have installed on your system during runtime.\n"
"\n"
"It is able to load multiple modules at once or none at all if one of them "
"was not able to load. It also takes care of any error checking and so forth."
msgstr ""
"Module::Load::Conditional は、お使いのシステムにインストールされている任意の"
"モジュールを、実行時に問い合わせたり読み込んだりすることができるシンプルな仕"
"組みを提供します。\n"
"\n"
"いずれかのモジュールが読み込めない場合、複数のモジュールを一括で読み込むこと"
"ができるほか、まったく読み込まないかを選択することもできます。エラーチェック"
"などの機能も用意されています。"

#. leap/perl-Module-Metadata/summary
msgid "Gather package and POD information from perl module files"
msgstr ""
"Perl のモジュールファイルからパッケージと POD の情報を収集するモジュール"

#. leap/perl-Module-Metadata/description
msgid ""
"This module provides a standard way to gather metadata about a .pm file "
"through (mostly) static analysis and (some) code execution. When determining "
"the version of a module, the '$VERSION' assignment is 'eval'ed, as is "
"traditional in the CPAN toolchain."
msgstr ""
"このモジュールは、大半は静的な分析で、残りの少しはコードを実行することで、 ."
"pm ファイルに関するメタデータを収集するための標準的な方法を提供します。 CPAN "
"ツールチェインがかつて実施していたように、モジュールのバージョンを判断する際"
"には、 '$VERSION' に代入した値を 'eval' します。"

#. leap/perl-Module-Path/summary
msgid "get the full path to a locally installed module"
msgstr "ローカルにインストールされたモジュールの古パスを取得するモジュール"

#. leap/perl-Module-Path/description
msgid ""
"This module provides a single function, 'module_path()', which takes a "
"module name and finds the first directory in your '@INC' path where the "
"module is installed locally. It returns the full path to that file, "
"resolving any symlinks. It is portable and only depends on core modules.\n"
"\n"
"It works by looking in all the directories in '@INC' for an appropriately "
"named file:\n"
"\n"
"I wrote this module because I couldn't find an alternative which dealt with "
"the points listed above, and didn't pull in what seemed like too many "
"dependencies to me.\n"
"\n"
"The distribution for 'Module::Path' includes the 'mpath' script, which lets "
"you get the path for a module from the command-line:\n"
"\n"
" % mpath Module::Path\n"
"\n"
"The 'module_path()' function will also cope if the module name includes '."
"pm'; this means you can pass a partial path, such as used as the keys in "
"'%INC':\n"
"\n"
"  module_path('Test/More.pm') eq $INC{'Test/More.pm'}\n"
"\n"
"The above is the basis for one of the tests."
msgstr ""
"このモジュールは 'module_path()' と呼ばれる関数を 1 つだけ公開しています。こ"
"の関数はモジュール名をパラメータとしてとり、まずはローカルにインストールされ"
"ている場合のパスである '@INC' を検索します。関数の返り値はファイルへのフルパ"
"スで、シンボリックリンクの場合はそれを解決してから返します。可搬性があり、中"
"枢モジュールのみに依存しています。\n"
"\n"
"なお、 '@INC' に設定されているすべてのディレクトリを参照して、該当する名前が"
"存在していないかどうかを調べます。\n"
"\n"
"上記のような機能を実現し、かつ多くの依存関係を持たないような代替モジュールが"
"見つからなかったことから、本モジュールを作成しました。\n"
"\n"
"配布物である 'Module::Path' には 'mpath' スクリプトが含まれていますが、こちら"
"はコマンドラインからモジュールのパスを取得することができるものです:\n"
"\n"
" % mpath Module::Path\n"
"\n"
"'module_path()' 関数は、モジュール名に '.pm' が含まれている場合にも対応してい"
"ます。これにより、 '%INC' 内のキーとして使われているような、部分パスを指定す"
"ることもできます。\n"
"\n"
"  module_path('Test/More.pm') eq $INC{'Test/More.pm'}\n"
"\n"
"上記はテスト内にあるものをベースにしています。"

#. leap/perl-Module-Pluggable/summary
msgid "Automatically Give Your Module the Ability to Have Plugins"
msgstr "お使いのモジュールに自動的にプラグイン機能を追加するモジュール"

#. leap/perl-Module-Pluggable/description
msgid ""
"Provides a simple but, hopefully, extensible way of having 'plugins' for "
"your module. Obviously this isn't going to be the be all and end all of "
"solutions but it works for me.\n"
"\n"
"Essentially all it does is export a method into your namespace that looks "
"through a search path for .pm files and turn those into class names.\n"
"\n"
"Optionally it instantiates those classes for you."
msgstr ""
"お使いのモジュールに対して、シンプルながらも拡張性の高い 'プラグイン' 機能を"
"提供します。必要なすべての機能を網羅しているわけではありませんが、私が使用す"
"るには十分な機能が提供されています。\n"
"\n"
"内部的には、 .pm ファイルの検索パスを参照して、これらをクラス名に変換し、ネー"
"ムスペース内にメソッドを公開する仕組みです。\n"
"\n"
"オプションでこれらのクラスのインスタンスを作成することもできます。"

#. leap/perl-Module-Reader/summary
msgid "Find and read perl modules like perl does"
msgstr "Perl のコードのようにモジュールのソースを検索して読み込むモジュール"

#. leap/perl-Module-Reader/description
msgid ""
"This module finds modules in '@INC' using the same algorithm perl does. From "
"that, it will give you the source content of a module, the file name (where "
"available), and how it was found. Searches (and content) are based on the "
"same internal rules that perl uses for _require|perlfunc/require_ and _do|"
"perlfunc/do_."
msgstr ""
"このモジュールは、 Perl の '@INC' と同じアルゴリズムでモジュールを検索する仕"
"組みです。対象モジュールの内容 (ソースコード) のほか、ファイル名 (利用できれ"
"ば) や検出方法などを提供します。検索 (およびその内容抽出) は、 _require|"
"perlfunc/require_ や _do|perlfunc/do_ で Perl が内部で使用しているルールを元"
"に実施します。"

#. leap/perl-Module-Refresh/summary
msgid "Refresh %INC files when updated on disk"
msgstr "ディスク上で更新された際に %INC ファイルを更新するモジュール"

#. leap/perl-Module-Refresh/description
msgid ""
"This module is a generalization of the functionality provided by Apache::"
"StatINC and Apache::Reload. It's designed to make it easy to do simple "
"iterative development when working in a persistent environment.\n"
"\n"
"It does not require mod_perl."
msgstr ""
"このモジュールは Apache::StatINC と Apache::Reload が提供する機能を汎用化した"
"ものです。永続的な環境で作業をする際、シンプルな反復型開発を実施することがで"
"きます。\n"
"\n"
"なお、このモジュールでは mod_perl は不要です。"

#. leap/perl-Module-Runtime/summary
msgid "Runtime Module Handling"
msgstr "ランタイムモジュールの処理"

#. leap/perl-Module-Runtime/description
msgid ""
"The functions exported by this module deal with runtime handling of Perl "
"modules, which are normally handled at compile time. This module avoids "
"using any other modules, so that it can be used in low-level "
"infrastructure.\n"
"\n"
"The parts of this module that work with module names apply the same syntax "
"that is used for barewords in Perl source. In principle this syntax can vary "
"between versions of Perl, and this module applies the syntax of the Perl on "
"which it is running. In practice the usable syntax hasn't changed yet. "
"There's some intent for Unicode module names to be supported in the future, "
"but this hasn't yet amounted to any consistent facility.\n"
"\n"
"The functions of this module whose purpose is to load modules include "
"workarounds for three old Perl core bugs regarding 'require'. These "
"workarounds are applied on any Perl version where the bugs exist, except for "
"a case where one of the bugs cannot be adequately worked around in pure Perl."
msgstr ""
"このモジュールが提供する関数は、 Perl モジュールの実行時処理を取り扱うもので"
"す。 Perl のモジュールは通常コンパイル時に処理されるもので、このモジュールは"
"一切のモジュールと依存関係を持たない仕組みになっていることから、低レベルな構"
"造になっています。\n"
"\n"
"本モジュール内の部品のうち、モジュール名での処理を行なうものは、 Perl ソース"
"内で使用していた元々のものと同じ文法になっています。また、この文法は一般に、"
"Perl のバージョン間で異なる構造になっているため、このモジュールでは実行中の"
"Perl のバージョンに合わせて文法が変わる仕組みになっています。実際に使用する文"
"法が変わったりしていることはありませんが、将来的に Unicode のモジュール名に対"
"応する可能性を考えると、これは一貫した仕組みとは呼べないものなっています。\n"
"\n"
"このモジュールの機能は、古い Perl コアに存在していた 3 種類の 'require' まわ"
"りのバグに回避策を設定してモジュールを読み込むことにあります。これらの回避策"
"は、バグの存在する全てのバージョンに対して適用されますが、純粋な Perl では簡"
"単に解決できないバグは除外されています。"

#. leap/perl-Module-Runtime-Conflicts/summary
msgid "Provide information on conflicts for Module::Runtime"
msgstr "Module::Runtime に対する矛盾情報の提供"

#. leap/perl-Module-Runtime-Conflicts/description
msgid ""
"This module provides conflicts checking for Module::Runtime, which had a "
"recent release that broke some versions of Moose. It is called from Moose::"
"Conflicts and 'moose-outdated'."
msgstr ""
"このモジュールは、 Module::Runtime モジュールに対して矛盾チェックの機能を提供"
"します。これは、 Moose のバージョンによっては依存関係を壊してしまうリリースが"
"存在していたことによるものです。 Moose::Conflicts および 'moose-outdated' か"
"ら呼び出されます。"

#. leap/perl-Module-ScanDeps/summary
msgid "Recursively scan Perl code for dependencies"
msgstr "Perl コードを再帰的に読み込んで依存関係を生成するモジュール"

#. leap/perl-Module-ScanDeps/description
msgid ""
"This module scans potential modules used by perl programs, and returns a "
"hash reference; its keys are the module names as appears in '%INC' (e.g. "
"'Test/More.pm'); the values are hash references with this structure:\n"
"\n"
"    {         file    => '/usr/local/lib/perl5/5.8.0/Test/More.pm',         "
"key     => 'Test/More.pm',         type    => 'module',    # or 'autoload', "
"'data', 'shared'         used_by => [ 'Test/Simple.pm', ... ],         "
"uses    => [ 'Test/Other.pm', ... ],     }\n"
"\n"
"One function, 'scan_deps', is exported by default. Other functions such as "
"('scan_line', 'scan_chunk', 'add_deps', 'path_to_inc_name') are exported "
"upon request.\n"
"\n"
"Users of *App::Packer* may also use this module as the dependency-checking "
"frontend, by tweaking their _p2e.pl_ like below:\n"
"\n"
"    use Module::ScanDeps;     ...     my $packer = App::Packer-"
">new( frontend => 'Module::ScanDeps' );     ...\n"
"\n"
"Please see App::Packer::Frontend for detailed explanation on the structure "
"returned by 'get_files'."
msgstr ""
"このモジュールは Perl プログラムが潜在的に使用するモジュールを一覧にし、それ"
"をハッシュ参照として返します。参照のキーは '%INC' 内で現われるようなモジュー"
"ル名 (例: 'Test/More.pm') で、値はこの構造体へのハッシュ参照になります:\n"
"\n"
"    {         file    => '/usr/local/lib/perl5/5.8.0/Test/More.pm',         "
"key     => 'Test/More.pm',         type    => 'module',    # or 'autoload', "
"'data', 'shared'         used_by => [ 'Test/Simple.pm', ... ],         "
"uses    => [ 'Test/Other.pm', ... ],     }\n"
"\n"
"1 つめの関数 'scan_deps' は既定で公開されている関数ですが、それ以外の関数 (た"
"とえば 'scan_line', 'scan_chunk', 'add_deps', 'path_to_inc_name' など) は必要"
"に応じて公開される関数です。\n"
"\n"
"*App::Packer* を利用しているユーザであれば、  _p2e.pl_ を下記のように修正する"
"ことで、このモジュールを依存関係のチェック用に使用することができます:\n"
"\n"
"    use Module::ScanDeps;     ...     my $packer = App::Packer-"
">new( frontend => 'Module::ScanDeps' );     ...\n"
"\n"
"'get_files' で返される構造について、詳しくは App::Packer::Frontend をご覧くだ"
"さい。"

#. leap/perl-Module-Signature/summary
msgid "Module signature file manipulation"
msgstr "モジュールの署名ファイルの操作"

#. leap/perl-Module-Signature/description
msgid ""
"*Module::Signature* adds cryptographic authentications to CPAN "
"distributions, via the special _SIGNATURE_ file.\n"
"\n"
"If you are a module user, all you have to do is to remember to run 'cpansign "
"-v' (or just 'cpansign') before issuing 'perl Makefile.PL' or 'perl Build."
"PL'; that will ensure the distribution has not been tampered with.\n"
"\n"
"Module authors can easily add the _SIGNATURE_ file to the distribution "
"tarball; see NOTES below for how to do it as part of 'make dist'.\n"
"\n"
"If you _really_ want to sign a distribution manually, simply add 'SIGNATURE' "
"to _MANIFEST_, then type 'cpansign -s' immediately before 'make dist'. Be "
"sure to delete the _SIGNATURE_ file afterwards.\n"
"\n"
"Please also see NOTES about _MANIFEST.SKIP_ issues, especially if you are "
"using *Module::Build* or writing your own _MANIFEST.SKIP_.\n"
"\n"
"Signatures made with Module::Signature prior to version 0.82 used the SHA1 "
"algorithm by default. SHA1 is now considered broken, and therefore module "
"authors are strongly encouraged to regenerate their _SIGNATURE_ files. Users "
"verifying old SHA1 signature files will receive a warning."
msgstr ""
"*Module::Signatur* は CPAN の配布物に対して、特別な _SIGNATURE_ ファイルを介"
"して暗号化された認証機能を提供します。\n"
"\n"
"モジュールのユーザ側の立場では、忘れずに 'perl Makefile.PL' や 'perl Build."
"PL' を実行する前に 'cpansign -v' (もしくは単に 'cpansign') を実行するようにし"
"ます。これにより、配布物が不用意に改変されていないことを確認することができま"
"す。\n"
"\n"
"モジュールの作者の立場では、配布物の tar ボール内に _SIGNATURE_ ファイルを追"
"加するだけの簡単な作業です。 'make dist' の一部として実行する場合について"
"は、 NOTES をお読みください。\n"
"\n"
"配布物に対して手作業で署名を行ないたい場合は、 _MANIFEST_ ファイル内に "
"'SIGNATURE' を追加して、 'make dist' の直後に 'cpansign -s' を実行してくださ"
"い。なお、作業完了後には忘れずに _SIGNATURE_ ファイルを削除してください。\n"
"\n"
"特に *Module::Build' を利用している場合や、独自の _MANIFEST.SKIP_ を作成して"
"いるような場合など、 _MANIFEST.SKIP_ の問題については NOTES をお読みくださ"
"い。\n"
"\n"
"バージョン0.82より前の Module::Signature で作成された署名では、デフォルトで "
"SHA1 アルゴリズムが使用されていました。SHA1 はセキュアでないと考えられるた"
"め、モジュールの作成者には _SIGNATURE_ ファイルを再生成することを強くお薦めし"
"ます。古い SHA1 署名ファイルを検証するユーザーには警告が表示されます。"

#. leap/perl-Module-Starter/summary
msgid "Simple starter kit for any module"
msgstr "任意のモジュールに対するシンプルなスターターキット"

#. leap/perl-Module-Starter/description
msgid ""
"This is the core module for Module::Starter. If you're not looking to extend "
"or alter the behavior of this module, you probably want to look at module-"
"starter instead.\n"
"\n"
"Module::Starter is used to create a skeletal CPAN distribution, including "
"basic builder scripts, tests, documentation, and module code. This is done "
"through just one method, 'create_distro'."
msgstr ""
"これは Module::Starter の中枢モジュールです。このモジュールの機能を追加したり"
"変更したりしたい場合でなければ、まず module-starter をお読みください。\n"
"\n"
"Module::Starter は、基本的な構築スクリプトやテスト、ドキュメンテーションやモ"
"ジュールのコードなど、 CPAN 配布物の骨格を作成するために使用するモジュールで"
"す。作業は 'create_distro' メソッドを呼び出すだけです。"

#. leap/perl-Module-Util/summary
msgid "Module name tools and transformations"
msgstr "モジュール名／変形ツール"

#. leap/perl-Module-Util/description
msgid ""
"This module provides a few useful functions for manipulating module names. "
"Its main aim is to centralise some of the functions commonly used by modules "
"that manipulate other modules in some way, like converting module names to "
"relative paths."
msgstr ""
"このモジュールはモジュールの名前を操作するための便利な関数をいくつか提供して"
"います。主にモジュール名を相対パスに変換するなど、他のモジュールを集約的に操"
"作する機能を提供しています。"

#. leap/perl-Mojo-DOM58/summary
msgid "Minimalistic HTML/XML DOM parser with CSS selectors"
msgstr "CSS セレクタ付きの最小 HTML/XML DOM パーサ"

#. leap/perl-Mojo-DOM58/description
msgid ""
"Mojo::DOM58 is a minimalistic and relaxed pure-perl HTML/XML DOM parser "
"based on Mojo::DOM. It supports the at https://html.spec.whatwg.org/ and at "
"https://www.w3.org/TR/xml/, and matching based on at https://www.w3.org/TR/"
"selectors/. It will even try to interpret broken HTML and XML, so you should "
"not use it for validation."
msgstr ""
"Mojo::DOM58 は Mojo::DOM をベースにして、最小限の実装で緩やかな純粋 Perl 製"
"の HTML/XML DOM パーサです。 https://html.spec.whatwg.org/ と https://www.w3."
"org/TR/xml/ にある仕様に対応し、 https://www.w3.org/TR/selectors/ にあるマッ"
"チングをベースにしています。ただし、壊れた HTML/XML の処理にも対応しています"
"ので、検証用に使用すべきではありません。"

#. leap/perl-Mojo-IOLoop-ReadWriteProcess/summary
msgid "Execute external programs or internal code blocks as separate process"
msgstr "別のプロセスでの外部プログラムや内部コードブロックの実行"

#. leap/perl-Mojo-IOLoop-ReadWriteProcess/description
msgid "Mojo::IOLoop::ReadWriteProcess is yet another process manager."
msgstr "Mojo::IOLoop::ReadWriteProcess はもう 1 つのプロセスマネージャです。"

#. leap/perl-Mojo-Pg/summary
msgid "Wrapper around DBD::Pg for using PostgreSql with Mojolicious"
msgstr "Mojolicious を使用する PostgreSql 向けの DBD::Pg ラッパー"

#. leap/perl-Mojo-Pg/description
msgid ""
"Mojo::Pg is a tiny wrapper around DBD::Pg that makes at http://www."
"postgresql.org a lot of fun to use with the at https://mojolicious.org real-"
"time web framework. Perform queries blocking and non-blocking, use all at "
"https://www.postgresql.org/docs/current/static/sql.html PostgreSQL has to "
"offer, generate CRUD queries from data structures, manage your database "
"schema with migrations and build scalable real-time web applications with "
"the publish/subscribe pattern."
msgstr ""
"Mojo::Pg は DBD::Pg に対する簡易ラッパーで、 http://www.postgresql.org を "
"https://mojolicious.org リアルタイム Web フレームワークで使用するための仕組み"
"です。問い合わせは https://www.postgresql.org/docs/current/static/sql.html "
"PostgreSQL が提供するとおり、ブロックあり／無しを選択できます。データ構造か"
"ら CRUD の問い合わせを生成したり、マイグレーションを利用してデータベースス"
"キーマを管理したり、公開／購読パターンを利用して、スケーラブルなリアルタイム "
"Web アプリケーションを構築することもできます。"

#. leap/perl-Mojo-RabbitMQ-Client/summary
msgid "Mojo::IOLoop based RabbitMQ client"
msgstr "Mojo::IOLoop ベースの RabbitMQ クライアント"

#. leap/perl-Mojo-RabbitMQ-Client/description
msgid ""
"Mojo::RabbitMQ::Client is a rewrite of AnyEvent::RabbitMQ to work on top of "
"Mojo::IOLoop."
msgstr ""
"Mojo::RabbitMQ::Client は、 Mojo::IOLoop 上で動作させるための AnyEvent::"
"RabbitMQ の書き換え版です。"

#. leap/perl-Mojo-SQLite/summary
msgid "Tiny Mojolicious wrapper for SQLite"
msgstr "SQLite 向け簡易 Mojolicious ラッパー"

#. leap/perl-Mojo-SQLite/description
msgid ""
"Mojo::SQLite is a tiny wrapper around DBD::SQLite that makes at https://www."
"sqlite.org/ a lot of fun to use with the at https://mojolico.us real-time "
"web framework. Use all at http://sqlite.org/lang.html SQLite has to offer, "
"generate CRUD queries from data structures, and manage your database schema "
"with migrations."
msgstr ""
"Mojo::SQLite は DBD::SQLite に対する簡易ラッパーで、 https://www.sqlite.org/ "
"で提供されている興味深い仕組みを https://mojolico.us リアルタイム Web フレー"
"ムワークで使用することができます。 SQLite で提供されている機能についての詳細"
"や、データ構造からの CRUD クエリの生成方法、移行機能付きのデータベーススキー"
"マ管理については http://sqlite.org/lang.html をお読みください。"

#. leap/perl-Mojolicious/summary
msgid "Real-time web framework"
msgstr "リアルタイム Web フレームワーク"

#. leap/perl-Mojolicious/description
msgid ""
"An amazing real-time web framework built on top of the powerful Mojo web "
"development toolkit. With support for RESTful routes, plugins, commands, "
"Perl-ish templates, content negotiation, session management, form "
"validation, testing framework, static file server, 'CGI'/'PSGI' detection, "
"first class Unicode support and much more for you to discover.\n"
"\n"
"Take a look at our excellent documentation in Mojolicious::Guides!"
msgstr ""
"Mojo Web 開発ツールキット上に構築された、素晴らしいリアルタイム Web フレーム"
"ワークです。 RESTful なルート、プラグイン、コマンド、 Perl のようなテンプレー"
"ト、コンテンツのネゴシエーション、セッション管理、フォームのバリデーション、"
"テストフレームワーク、固定ファイルのサーバ、 'CGI'/'PSGI' の検出、ファースト"
"クラス Unicode サポートなど、様々な機能が用意されています。\n"
"\n"
"まずは Mojolicious::Guides 内にある素晴らしいドキュメンテーションをお読みくだ"
"さい。"

#. leap/perl-Mojolicious-Plugin-AssetPack/summary
msgid "Compress and convert CSS, Less, Sass, JavaScript and CoffeeScript files"
msgstr "CSS, Less, Sass, JavaScript と CoffeeScript ファイルの圧縮と変換"

#. leap/perl-Mojolicious-Plugin-AssetPack/description
msgid ""
"Mojolicious::Plugin::AssetPack is a Mojolicious plugin for processing static "
"assets. The idea is that JavaScript and CSS files should be served as one "
"minified file to save bandwidth and roundtrip time to the server.\n"
"\n"
"There are many external tools for doing this, but integrating them with "
"Mojolicious can be a struggle: You want to serve the source files directly "
"while developing, but a minified version in production. This assetpack "
"plugin will handle all of that automatically for you.\n"
"\n"
"Your application creates and refers to an asset by its topic (virtual asset "
"name). The process of building actual assets from their components is "
"delegated to \"pipe objects\"."
msgstr ""
"Mojolicious::Plugin::AssetPack は固定のアセットを処理するための Mojolicious "
"のプラグインです。サーバとの帯域やラウンドトリップタイムの問題を最小化するた"
"め、 JavaScript や CSS ファイルは最小限のサイズにすべきである、という考え方か"
"ら来ているものです。\n"
"\n"
"ここにはこれを実現するための多数の外部ツールが存在していますが、 Mojolicious "
"本体への統合は戦いでもあります: 開発中はソースファイルを直接提供したくても、"
"本番環境ではそれを小さくまとめて送りたいものです。このアセットパックプラグイ"
"ンは、これらの処理をすべてを自動的に行ないます。\n"
"\n"
"お使いのアプリケーションはトピック (仮想アセット名) でアセットを作成して参照"
"します。コンポーネントからの実際のアセット構築処理は、 \"パイプオブジェクト"
"\" に移譲されています。"

#. leap/perl-Mojolicious-Plugin-CHI/summary
msgid "Use CHI Caches in Mojolicious"
msgstr "Mojolicious 内の CHI キャッシュ"

#. leap/perl-Mojolicious-Plugin-CHI/description
msgid ""
"Mojolicious::Plugin::CHI is a simple plugin to work with CHI caches within "
"Mojolicious."
msgstr ""
"Mojolicious::Plugin::CHI は Mojolicious 内で CGI キャッシュを処理するためのサ"
"ンプルプラグインです。"

#. leap/perl-Mojolicious-Plugin-NYTProf/summary
msgid "Auto handling of Devel::NYTProf in your Mojolicious app"
msgstr "お使いの Mojolicious アプリ内での Devel::NYTProf の自動処理"

#. leap/perl-Mojolicious-Plugin-NYTProf/description
msgid ""
"This plugin enables Mojolicious to automatically generate Devel::NYTProf "
"profiles and routes for your app, it has been inspired by Dancer::Plugin::"
"NYTProf"
msgstr ""
"このプラグインは、お使いの Mojolicious アプリに対して Devel::NYTProf プロファ"
"イルとルーチンを自動生成する機能を提供します。 Dancer::Plugin::NYTProf をヒン"
"トに作られています。"

#. leap/perl-Mojolicious-Plugin-OAuth2/summary
msgid "Auth against OAuth2 APIs including OpenID Connect"
msgstr "OpenID Connectを含むOAuth2 APIに対する認証"

#. leap/perl-Mojolicious-Plugin-OAuth2/description
msgid ""
"This Mojolicious plugin allows you to easily authenticate against a at "
"http://oauth.net or at https://openid.net/connect/ provider. It includes "
"configurations for a few popular providers, but you can add your own as "
"well.\n"
"\n"
"See register for a full list of bundled providers."
msgstr ""
"このMojoliciousプラグインを使用すると、http://oauth.netやhttps://openid.net/connect/"
"プロバイダでの認証を簡単に行うことができます。一部の一般的なプロバイダ用の設定が含まれていますが、独自の設定を追加することもできます。\n"
"\n"
"バンドルされたプロバイダの完全なリストについては、registerを参照してください。"

#. leap/perl-Mojolicious-Plugin-RenderFile/summary
msgid "\"render_file\" helper for Mojolicious"
msgstr "Mojolicious 向け \"render_file\" ヘルパー"

#. leap/perl-Mojolicious-Plugin-RenderFile/description
msgid ""
"Mojolicious::Plugin::RenderFile is a Mojolicious plugin that adds "
"\"render_file\" helper. It does not read file in memory and just streaming "
"it to a client."
msgstr ""
"Mojolicious::Plugin::RenderFile は \"render_file\" ヘルパーを追加する "
"Mojolicious のプラグインです。メモリ内にはファイルを読み込まず、そのままクラ"
"イアントに対して転送します。"

#. leap/perl-Monitoring-Plugin/summary
msgid "Family of Perl modules to streamline writing Nagios compatible plugins"
msgstr "Nagios 互換プラグインを直感的に作成するための Perl モジュールファミリ"

#. leap/perl-Monitoring-Plugin/description
msgid ""
"Monitoring::Plugin and its associated Monitoring::Plugin::* modules are a "
"family of perl modules to streamline writing Monitoring plugins. The main "
"end user modules are Monitoring::Plugin, providing an object-oriented "
"interface to the entire Monitoring::Plugin::* collection, and Monitoring::"
"Plugin::Functions, providing a simpler functional interface to a useful "
"subset of the available functionality.\n"
"\n"
"The purpose of the collection is to make it as simple as possible for "
"developers to create plugins that conform the Monitoring Plugin guidelines "
"(https://www.monitoring-plugins.org/doc/guidelines.html)."
msgstr ""
"Monitoring::Plugin と関連する Monitoring::Plugin::* モジュールは、 Nagios の"
"プラグインを素早く作成するために提供されている Perl モジュール集です。メイン"
"のエンドユーザ向けモジュールは Monitoring::Plugin で、このモジュールは "
"Monitoring::Plugin::* コレクション全体に対するオブジェクト指向のインターフェ"
"イスを提供するものです。また、 Monitoring::Plugin::Functions は、左記のモ"
"ジュールの機能に対するサブセットを提供する、よりシンプルなインターフェイスで"
"す。\n"
"\n"
"このコレクションは、開発者に対して Monitoring Plugin ガイドラインを遵守しなが"
"ら、できる限りシンプルにモジュールを作成できる仕組みを提供することを目指して"
"います (https://www.monitoring-plugins.org/doc/guidelines.html) 。"

#. leap/perl-Moo/summary
msgid "Minimalist Object Orientation (with Moose compatibility)"
msgstr "最小限のオブジェクト指向実装 (Moose 互換)"

#. leap/perl-Moo/description
msgid ""
"'Moo' is an extremely light-weight Object Orientation system. It allows one "
"to concisely define objects and roles with a convenient syntax that avoids "
"the details of Perl's object system. 'Moo' contains a subset of Moose and is "
"optimised for rapid startup.\n"
"\n"
"'Moo' avoids depending on any XS modules to allow for simple deployments. "
"The name 'Moo' is based on the idea that it provides almost -- but not quite "
"-- two thirds of Moose.\n"
"\n"
"Unlike Mouse this module does not aim at full compatibility with Moose's "
"surface syntax, preferring instead to provide full interoperability via the "
"metaclass inflation capabilities described in MOO AND MOOSE.\n"
"\n"
"For a full list of the minor differences between Moose and Moo's surface "
"syntax, see INCOMPATIBILITIES WITH MOOSE."
msgstr ""
"'Moo' は非常に軽量なオブジェクト指向システムです。 Perl のオブジェクトシステ"
"ムの詳細を気にすることなく、簡潔にオブジェクトと役割を定義することができま"
"す。 'Moo' には Moose のサブセットが含まれ、高速に起動できるように最適化がな"
"されています。\n"
"\n"
"'Moo' はシンプルなデプロイのため、どの XS モジュールとも依存関係を持ちませ"
"ん。 'Moo' という名前は、 Moose の 2/3 程度 (かなりの量とは言えませんが・・) "
"を提供する、という考え方をベースにしています。\n"
"\n"
"Mouse とは異なり、このモジュールは Moose のサーフェイス文法との完全な互換性は"
"目指していません。その代わりに、 MOO AND MOOSE で記述されているメタクラスの膨"
"張機能を介して、すべての相互運用性を提供することを目指しています。\n"
"\n"
"Moose と Moo のサーフェイス文法についての細かい差異については、 "
"INCOMPATIBILITIES WITH MOOSE をお読みください。"

#. leap/perl-MooX-HandlesVia/summary
msgid "NativeTrait-like behavior for Moo"
msgstr "Moo 向けの NativeTrait に似た動作をするモジュール"

#. leap/perl-MooX-HandlesVia/description
msgid ""
"MooX::HandlesVia is an extension of Moo's 'handles' attribute functionality. "
"It provides a means of proxying functionality from an external class to the "
"given atttribute. This is most commonly used as a way to emulate 'Native "
"Trait' behavior that has become commonplace in Moose code, for which there "
"was no Moo alternative."
msgstr ""
"MooX::HandlesVia は Moo の 'handles' 属性の機能を拡張するものです。外部クラス"
"から指定した属性に対して機能を代行する機能を提供しています。これは 'Native "
"Trait' 動作を疑似するための方法として使われているもので、 Moose のコード内で"
"も一般的になっているものですが、 Moo にはその代替となるものが存在していなかっ"
"たために作られました。"

#. leap/perl-MooX-Types-MooseLike/summary
msgid "Some Moosish Types and a Type Builder"
msgstr "Moose に似たタイプのタイプビルダ"

#. leap/perl-MooX-Types-MooseLike/description
msgid ""
"This module provides a possibility to build your own set of Moose-like "
"types. These custom types can then be used to describe fields in Moo-based "
"classes.\n"
"\n"
"See the MooX::Types::MooseLike::Base manpage for a list of available base "
"types. Its source also provides an example of how to build base types, along "
"with both parameterizable and non-parameterizable."
msgstr ""
"このモジュールは、 Moose のようなタイプ集を独自に構築する機能を提供します。独"
"自のタイプは Moo ベースのクラス内で、フィールドを定義する際に利用することがで"
"きます。\n"
"\n"
"利用可能なベースタイプについて、詳しくは MooX::Types::MooseLike::Base をお読"
"みください。このソースでは、基本タイプの構築方法例のほか、パラメータ化可能／"
"不可能設定についても説明があります。"

#. leap/perl-MooX-Types-MooseLike-Numeric/summary
msgid "Moo types for numbers"
msgstr "数値向け Moo タイプ"

#. leap/perl-MooX-Types-MooseLike-Numeric/description
msgid ""
"A set of numeric types to be used in Moo-based classes. Adapted from MooseX::"
"Types::Common::Numeric"
msgstr ""
"Moo ベースのクラス内で使用されるべき数値型のセットです。 MooseX::Types::"
"Common::Numeric から作られているものです"

#. leap/perl-MooX-late/summary
msgid "easily translate Moose code to Moo"
msgstr "Moose コードを Moo に簡単に編訳できるモジュール"

#. leap/perl-MooX-late/description
msgid ""
"the Moo manpage is a light-weight object oriented programming framework "
"which aims to be compatible with the Moose manpage. It does this by "
"detecting when Moose has been loaded, and automatically \"inflating\" its "
"classes and roles to full Moose classes and roles. This way, Moo classes can "
"consume Moose roles, Moose classes can extend Moo classes, and so forth.\n"
"\n"
"However, the surface syntax of Moo differs somewhat from Moose. For example "
"the 'isa' option when defining attributes in Moose must be either a string "
"or a blessed the Moose::Meta::TypeConstraint manpage object; but in Moo must "
"be a coderef. These differences in surface syntax make porting code from "
"Moose to Moo potentially tricky. the MooX::late manpage provides some "
"assistance by enabling a slightly more Moosey surface syntax.\n"
"\n"
"MooX::late does the following: \n"
"* 1.\n"
"\n"
"  Supports 'isa => $stringytype'. \n"
"* 2.\n"
"\n"
"  Supports 'does => $rolename' . \n"
"* 3.\n"
"\n"
"  Supports 'lazy_build => 1'. \n"
"* 4.\n"
"\n"
"  Exports 'blessed' and 'confess' functions to your namespace. \n"
"* 5.\n"
"\n"
"  Handles certain attribute traits. Currently 'Hash', 'Array' and 'Code'   "
"are supported. This feature requires the MooX::HandlesVia manpage.\n"
"\n"
"  'String', 'Number', 'Counter' and 'Bool' are unlikely to ever be   "
"supported because of internal implementation details of Moo. If you need   "
"another attribute trait to be supported, let me know and I will consider   "
"it.\n"
"\n"
"Five features. It is not the aim of 'MooX::late' to make every aspect of Moo "
"behave exactly identically to Moose. It's just going after the low-hanging "
"fruit. So it does five things right now, and I promise that future versions "
"will never do more than seven.\n"
"\n"
"Previous releases of MooX::late added support for 'coerce => 1' and 'default "
"=> $nonref'. These features have now been added to Moo itself, so MooX::late "
"no longer has to deal with them."
msgstr ""
"Moo はオブジェクト指向のプログラミングフレームワークで、 Moose との互換性を目"
"指しているものです。 Moose が読み込まれたタイミングを検出することで、自動的に"
"自己のクラスや役割を自動的に \"膨張\" させ、完全な Moose クラスや役割となるよ"
"うに作られています。この方法により、 Moo のクラスは Moose の役割を消費するこ"
"とができますし、逆に Moose のクラスは Moo のクラス拡張することができます。\n"
"\n"
"しかしながら、 Moo のサーフェイス文法は Moose のものとは少し異なります。たと"
"えば Moose 内で属性を定義する際の 'isa' オプションは、文字列または Moose::"
"Meta::TypeConstraint オブジェクトのブレスを指定しますが、 Moo ではコード参照"
"でなければなりません。このようなサーフェイス文法の差異は、 Moose から Moo へ"
"のコードの移植を潜在的にやりにくくしています。 MooX::late では、 Moosey サー"
"フェイス文法を有効化するためのいくつかの支援機能が提供されています。\n"
"\n"
"MooX::late では下記のようなことを行ないます:\n"
"* 1.\n"
"\n"
"  'isa => $stringytype' のサポート\n"
"* 2.\n"
"\n"
"  'does => $rolename'  のサポート\n"
"* 3.\n"
"\n"
"  'lazy_build => 1' のサポート\n"
"* 4.\n"
"\n"
"  お使いのネームスペースに対する 'blessed' と 'confess' の関数\n"
"* 5.\n"
"\n"
"  特定の属性形質の処理。現時点では 'ハッシュ', '配列', 'コード' にそれぞれ対"
"応しています。この機能を利用するには、 MooX::HandlesVia が必要です。\n"
"\n"
"  'String', 'Number', 'Counter','Bool' は、 Moo の内部実装詳細により、サポー"
"トされることはまずありません。サポートすべき他の属性がある場合は、まず私たち"
"あてに連絡を取ってください。こちらで判断させていただきます。\n"
"\n"
"5 つの機能。 Moo の様々な局面で、 'MooX::late' が Moose と正確に同じ動作をす"
"ることは目指していません。このモジュールは、取りやすいフルーツのようなもので"
"あるべきであると考えています。そのため、現時点では 5 つの要素がありますが、将"
"来的に 7 つ以上になることは決してありません。\n"
"\n"
"MooX::late の以前のリリースでは、 'coerce => 1' と 'default => $nonref' に対"
"するサポートが追加されました。これらの機能は Moo 自身にも追加されているた"
"め、 MooX::late ではもはやそれを扱わなくなっています。"

#. leap/perl-Moose/summary
msgid "Postmodern Object System for Perl 5"
msgstr "Perl 5 向けポストモダンオブジェクトシステム"

#. leap/perl-Moose/description
msgid ""
"Moose is an extension of the Perl 5 object system.\n"
"\n"
"The main goal of Moose is to make Perl 5 Object Oriented programming easier, "
"more consistent, and less tedious. With Moose you can think more about what "
"you want to do and less about the mechanics of OOP.\n"
"\n"
"Additionally, Moose is built on top of Class::MOP, which is a metaclass "
"system for Perl 5. This means that Moose not only makes building normal Perl "
"5 objects better, but it provides the power of metaclass programming as well."
msgstr ""
"Moose は Perl 5 のオブジェクトシステムに対する拡張です。\n"
"\n"
"Moose の主な目的は、 Perl 5 のオブジェクト指向プログラミングを、よりわかりや"
"すくより一貫した仕組みにし、つまらなさを排除することにあります。 Moose を利用"
"することで、やりたいことを明確にし、 OOP の仕組みそのものに対して心配する必要"
"がなくなります。\n"
"\n"
"これに加えて、 Moose は Class::MOP 上で構築されています。これは Perl 5 向けの"
"メタクラスシステムで、 Moose は通常のオブジェクトを簡単に構築できるだけでな"
"く、メタクラスプログラミングの利点をも享受できることになります。"

#. leap/perl-Moose-Autobox/summary
msgid "Autoboxed wrappers for Native Perl datatypes"
msgstr "ネイティブ Perl データタイプ向けオートボクシングラッパー"

#. leap/perl-Moose-Autobox/description
msgid ""
"Moose::Autobox provides an implementation of SCALAR, ARRAY, HASH & CODE for "
"use with autobox. It does this using a hierarchy of roles in a manner "
"similar to what Perl 6 _might_ do. This module, like Class::MOP and Moose, "
"was inspired by my work on the Perl 6 Object Space, and the 'core types' "
"implemented there."
msgstr ""
"Moose::Autobox は、オートボクシングで使用するためのスカラー／配列／ハッシュ／"
"コード実装です。 Perl 6 がやるはずの役割の階層を利用して実現している仕組みで"
"す。このモジュールは、 Class::MOP や Moose のように、 Perl 6 のオブジェクトス"
"ペースと、そこで実装されている 'コアタイプ' 上での私の作業からヒントを得て作"
"られているものです。"

#. leap/perl-MooseX-Aliases/summary
msgid "easy aliasing of methods and attributes in Moose"
msgstr "Moose 内でメソッドと属性の別名を簡単に設定するためのモジュール"

#. leap/perl-MooseX-Aliases/description
msgid ""
"The MooseX::Aliases module will allow you to quickly alias methods in Moose. "
"It provides an alias parameter for 'has()' to generate aliased accessors as "
"well as the standard ones. Attributes can also be initialized in the "
"constructor via their aliased names.\n"
"\n"
"You can create more than one alias at once by passing a arrayref:\n"
"\n"
"    has ip_addr => (         alias => [ qw(ipAddr ip) ],     );"
msgstr ""
"MooseX::Aliases モジュールは、 Moose 内で簡単に別名を定義することができるモ"
"ジュールです。 'has()' に対して別名のパラメータを指定することで、標準のアクセ"
"サに加えて別名のアクセサが生成されます。属性はコンストラクタ内で別名を利用し"
"て初期化することもできます。\n"
"\n"
"また、配列の参照を利用することで、複数の別名を一括で作成することもできます:\n"
"\n"
"    has ip_addr => (         alias => [ qw(ipAddr ip) ],     );"

#. leap/perl-MooseX-App-Cmd/summary
msgid "Mashes up MooseX::Getopt and App::Cmd"
msgstr "MooseX::Getopt と App::Cmd のマッシュアップ"

#. leap/perl-MooseX-App-Cmd/description
msgid ""
"This module marries App::Cmd with MooseX::Getopt.\n"
"\n"
"Use it like App::Cmd advises (especially see App::Cmd::Tutorial), swapping "
"App::Cmd::Command for MooseX::App::Cmd::Command.\n"
"\n"
"Then you can write your moose commands as Moose classes, with MooseX::Getopt "
"defining the options for you instead of 'opt_spec' returning a Getopt::Long::"
"Descriptive spec."
msgstr ""
"このモジュールは、 App:Cmd と MooseX::Getopt を合体させたものです。\n"
"\n"
"App::Cmd が提案しているように (特に App::Cmd::Tutorial をお読みください) 、 "
"MooseX::App::Cmd::Command を App::Cmd::Command に置き換えてお使いください。\n"
"\n"
"あとは Moose のクラスとして moose コマンドを記述するだけです。 MooseX::"
"Getopt では Getopt::Long::Descriptive スペックを返す 'opt_spec' の代用とし"
"て、オプションを定義することができます。"

#. leap/perl-MooseX-ArrayRef/summary
msgid "blessed arrayrefs with Moose"
msgstr "Moose によるブレスされた配列参照"

#. leap/perl-MooseX-ArrayRef/description
msgid ""
"Objects implemented with arrayrefs rather than hashrefs are often faster "
"than those implemented with hashrefs. Moose's default object implementation "
"is hashref based. Can we go faster?\n"
"\n"
"Simply 'use MooseX::ArrayRef' instead of 'use Moose', but note the "
"limitations in the section below.\n"
"\n"
"The current implementation is mostly a proof of concept, but it does mostly "
"seem to work."
msgstr ""
"配列参照で実装されているオブジェクトは、ハッシュ参照で実装されているものより"
"しばしば高速に動作します。 Moose の既定のオブジェクト実装はハッシュ参照をベー"
"スにしていますが、配列参照に直すことでより高速化できるかもしれません。\n"
"\n"
"'use Moose' の代わりに 'use MooseX::ArrayRef' を使用するだけですが、下記のよ"
"うな制限事項もあります。\n"
"\n"
"現在の実装はほとんどコンセプト実証目的ではありますが、多くは問題なく動作する"
"はずです。"

#. leap/perl-MooseX-Attribute-ENV/summary
msgid "Set default of an attribute to a value from %ENV"
msgstr "属性の既定値を %ENV からの値に設定するモジュール"

#. leap/perl-MooseX-Attribute-ENV/description
msgid ""
"This is a Moose attribute trait that you use when you want the default value "
"for an attribute to be populated from the %ENV hash. So, for example if you "
"have set the environment variable USERNAME = 'John' you can do:\n"
"\n"
"\tpackage MyApp::MyClass;\n"
"\n"
"\tuse Moose; \tuse MooseX::Attribute::ENV;\n"
"\n"
"\thas 'username' => (is=>'ro', traits=>['ENV']);\n"
"\n"
"\tpackage main;\n"
"\n"
"\tmy $myclass = MyApp::MyClass->new();\n"
"\n"
"\tprint $myclass->username; # STDOUT => 'John';\n"
"\n"
"This is basically similar functionality to something like:\n"
"\n"
"\thas 'attr' => ( \t\tis=>'ro', \t\tdefault=> sub { \t\t\t$ENV{uc 'attr'}; \t"
"\t}, \t);\n"
"\n"
"but this module has a few other features that offer merit, as well as being "
"a simple enough attribute trait that I hope it can serve as a learning "
"tool.\n"
"\n"
"If the named key isn't found in %ENV, then defaults will execute as normal."
msgstr ""
"これは Moose の属性形質と呼ばれるもので、属性に対する既定値を %ENV ハッシュか"
"ら採用する際に使用するものです。そのため、たとえば環境変数 USERNAME に "
"'John' という値が入っている場合、下記のようなコードを作成することができま"
"す:\n"
"\n"
"\tpackage MyApp::MyClass;\n"
"\n"
"\tuse Moose; \tuse MooseX::Attribute::ENV;\n"
"\n"
"\thas 'username' => (is=>'ro', traits=>['ENV']);\n"
"\n"
"\tpackage main;\n"
"\n"
"\tmy $myclass = MyApp::MyClass->new();\n"
"\n"
"\tprint $myclass->username; # STDOUT => 'John';\n"
"\n"
"これは下記と同じような仕組みです:\n"
"\n"
"\thas 'attr' => ( \t\tis=>'ro', \t\tdefault=> sub { \t\t\t$ENV{uc 'attr'}; \t"
"\t}, \t);\n"
"\n"
"このモジュールにはメリットを提供するいくつかの機能が用意されていますが、学習"
"ツールとして利用できるような十分にシンプルな属性形質になるようになっていま"
"す。\n"
"\n"
"なお、 %ENV 内に名前付きのキーが見つからない場合は、既定値は通常通りに処理さ"
"れます。"

#. leap/perl-MooseX-AttributeHelpers/summary
msgid "(DEPRECATED) Extend your attribute interfaces"
msgstr "(廃止予定) 属性インターフェイスの拡張"

#. leap/perl-MooseX-AttributeHelpers/description
msgid ""
"*This distribution is deprecated. The features it provides have been added "
"to the Moose core code as Moose::Meta::Attribute::Native. This distribution "
"should not be used by any new code.*\n"
"\n"
"While Moose attributes provide you with a way to name your accessors, "
"readers, writers, clearers and predicates, this library provides commonly "
"used attribute helper methods for more specific types of data.\n"
"\n"
"As seen in the SYNOPSIS, you specify the extension via the 'metaclass' "
"parameter. Available meta classes are:"
msgstr ""
"*この配布物は廃止予定です。このモジュールで提供されている機能は、 Moose の中"
"枢コード内に取り込まれ、 Moose::Meta::Attribute::Native になっています。この"
"配布物は新しいコードで使用すべきではありません。*\n"
"\n"
"Moose の属性はアクセサやリーダ、クリアラや述語などを提供するための仕組みです"
"が、このライブラリは特定のデータタイプに対して、属性支援メソッドとして使用で"
"きる機能を提供します。\n"
"\n"
"SYNOPSIS にも書いてあるとおり、 'metaclass' パラメータを介して拡張を指定しま"
"す。利用可能なメタクラスは下記のとおりです:"

#. leap/perl-MooseX-AuthorizedMethods/summary
msgid "Syntax sugar for authorized methods"
msgstr "認可されたメソッドに対する構文追加機能"

#. leap/perl-MooseX-AuthorizedMethods/description
msgid ""
"This method exports the \"authorized\" declarator that makes a verification "
"if the user has the required permissions before the acual invocation. The "
"default verification method will take the \"user\" method result and call "
"\"roles\" to list the roles given to that user."
msgstr ""
"このメソッドは \"authorized\" (認可済み) のデコレータを公開するもので、実際の"
"実行の前にユーザが必要なアクセス許可を持っているかどうかを検証するための仕組"
"みです。既定の検証メソッドは \"user\" メソッドの結果を取り、そのユーザに対す"
"る役割を \"roles\" を実行して判断します。"

#. leap/perl-MooseX-ClassAttribute/summary
msgid "Declare class attributes Moose-style"
msgstr "Moose スタイルのクラス属性の定義"

#. leap/perl-MooseX-ClassAttribute/description
msgid ""
"This module allows you to declare class attributes in exactly the same way "
"as object attributes, using 'class_has()' instead of 'has()'.\n"
"\n"
"You can use any feature of Moose's attribute declarations, including "
"overriding a parent's attributes, delegation ('handles'), attribute traits, "
"etc. All features should just work. The one exception is the \"required\" "
"flag, which is not allowed for class attributes.\n"
"\n"
"The accessor methods for class attribute may be called on the class "
"directly, or on objects of that class. Passing a class attribute to the "
"constructor will not set that attribute."
msgstr ""
"このモジュールは、オブジェクトの属性と同じ方法でクラスの属性を定義することが"
"できるモジュールです。メソッドは、 'has()' ではなく 'class_has()' を使用しま"
"す。\n"
"\n"
"親の属性のオーバーライドやデリゲーション ('handles') 、属性の形質など、任意"
"の Moose の属性修飾を利用することもできます。すべての機能が問題なく動作するは"
"ずですが、例外として \"required\" フラグだけは、クラスの属性として使用するこ"
"とができません。\n"
"\n"
"くらいの属性に対するアクセサメソッドは、クラス上から直接呼び出すことができる"
"ほか、クラスのオブジェクトからも呼び出すことができます。クラスの属性をコンス"
"トラクタに渡す際には、これらの属性は設定されません。"

#. leap/perl-MooseX-Clone/summary
msgid "Fine-grained cloning support for Moose objects"
msgstr "Moose オブジェクトに対するきめ細かいクローンのサポート"

#. leap/perl-MooseX-Clone/description
msgid ""
"Out of the box the Moose manpage only provides very barebones cloning "
"support in order to maximize flexibility.\n"
"\n"
"This role provides a 'clone' method that makes use of the low level cloning "
"support already in the Moose manpage and adds selective deep cloning based "
"on introspection on top of that. Attributes with the 'Clone' trait will "
"handle cloning of data within the object, typically delegating to the "
"attribute value's own 'clone' method."
msgstr ""
"Moose 標準では、最大限に柔軟性を生かす目的から、非常に基本的なクローン機能し"
"か提供されていません。\n"
"\n"
"この役割は 'clone' メソッドを提供するもので、すでに Moose 内に存在する低レベ"
"ルのクローンを利用して、それらのイントロスペクションをベースにして選択的な深"
"いクローン処理を実施します。 'Clone' を持つ属性は、オブジェクト内でクローン処"
"理を行ないますが、一般的には属性値が独自で持つ 'clone' メソッドを代理するもの"
"です。"

#. leap/perl-MooseX-ConfigFromFile/summary
msgid "An abstract Moose role for setting attributes from a configfile"
msgstr "設定ファイルから属性を設定するための抽象型の Moose の役割"

#. leap/perl-MooseX-ConfigFromFile/description
msgid ""
"This is an abstract role which provides an alternate constructor for "
"creating objects using parameters passed in from a configuration file. The "
"actual implementation of reading the configuration file is left to concrete "
"sub-roles.\n"
"\n"
"It declares an attribute 'configfile' and a class method 'new_with_config', "
"and requires that concrete roles derived from it implement the class method "
"'get_config_from_file'.\n"
"\n"
"Attributes specified directly as arguments to 'new_with_config' supersede "
"those in the configfile.\n"
"\n"
"the MooseX::Getopt manpage knows about this abstract role, and will use it "
"if available to load attributes from the file specified by the command line "
"flag '--configfile' during its normal 'new_with_options'."
msgstr ""
"このモジュールは、設定ファイルを入力としたパラメータを利用し、オブジェクトを"
"作成するための代替コンストラクタを提供します。設定ファイルに対する実際の読み"
"込み処理は、具体的な副役割が実施します。\n"
"\n"
"このモジュールは 'configfile' 属性と、 'new_with_config' クラスメソッドを定義"
"するほか、クラスメソッド 'get_config_from_file' を実装する具体的な役割を必要"
"とします。\n"
"\n"
"'new_with_config' への引数として直接指定された属性は、設定ファイルの内容を上"
"書きします。\n"
"\n"
"MooseX::Getopt ではこの抽象的な役割を利用して、通常の 'new_with_options' の処"
"理内でコマンドラインフラグ '--configfile' を処理して、そのファイルで指定され"
"た内容の属性を読み込んでいます。"

#. leap/perl-MooseX-Daemonize/summary
msgid "Role for daemonizing your Moose based application"
msgstr "Moose ベースのアプリケーションをデーモン化する役割"

#. leap/perl-MooseX-Daemonize/description
msgid ""
"Often you want to write a persistent daemon that has a pid file, and "
"responds appropriately to Signals. This module provides a set of basic roles "
"as an infrastructure to do that."
msgstr ""
"pid ファイルを持つ永続的なデーモンを作成し、シグナルに対して適切な反応を行な"
"いたい場合は、このモジュールをお使いください。デーモンとして動作するための基"
"本的なインフラストラクチャのセットを提供します。"

#. leap/perl-MooseX-Declare/summary
msgid "(DEPRECATED) Declarative syntax for Moose"
msgstr "(廃止予定) Moose 向け宣言的文法"

#. leap/perl-MooseX-Declare/description
msgid ""
"This module provides syntactic sugar for Moose, the postmodern object system "
"for Perl 5. When used, it sets up the 'class' and 'role' keywords. \n"
"*Note:* Please see the the /WARNING manpage section below!"
msgstr ""
"このモジュールは、 Perl 5 向けのポストモダン型オブジェクトシステムである "
"Moose に対して、文法機能の追加を行なうものです。このモジュールは、 'class' "
"と 'role' のキーワードを追加します。\n"
"*注意:* 下記の /WARNING セクションをお読みください！"

#. leap/perl-MooseX-Getopt/summary
msgid "Moose role for processing command line options"
msgstr "コマンドラインオプションを処理するための Moose の役割"

#. leap/perl-MooseX-Getopt/description
msgid ""
"This is a role which provides an alternate constructor for creating objects "
"using parameters passed in from the command line."
msgstr ""
"これはコマンドラインで渡されたパラメータを利用して、オブジェクトを作成するた"
"めの代替コンストラクタを提供する役割です。"

#. leap/perl-MooseX-GlobRef/summary
msgid "Store a Moose object in glob reference"
msgstr "Moose オブジェクトの glob 参照への保管"

#. leap/perl-MooseX-GlobRef/description
msgid ""
"This module allows to store Moose object in glob reference of file handle. "
"The class attributes will be stored in hash slot associated with glob "
"reference. It allows to create a Moose version of the IO::Handle manpage.\n"
"\n"
"The attributes can be accessed directly with following expression:\n"
"\n"
"  my $hashref = \\%{*$self};   print $hashref->{key};\n"
"\n"
"or shorter:\n"
"\n"
"  print *$self->{key};\n"
"\n"
"but the standard accessors should be used instead:\n"
"\n"
"  print $self->key;"
msgstr ""
"このモジュールは、ファイルハンドルの glob 参照内に Moose のオブジェクトを保存"
"するための仕組みです。クラスの属性は、 glob 参照に結び付けられているハッシュ"
"スロット内に保存されます。これにより、 IO::Handle の Moose 版を作成することが"
"できます。\n"
"\n"
"属性は下記のような表現で直接アクセスすることができます:\n"
"\n"
"  my $hashref = \\%{*$self};   print $hashref->{key};\n"
"\n"
"上記を短縮すると、下記のようになります:\n"
"\n"
"  print *$self->{key};\n"
"\n"
"ただし、標準のアクセサを利用すべきです:\n"
"\n"
"  print $self->key;"

#. leap/perl-MooseX-Has-Options/summary
msgid "Succinct options for Moose"
msgstr "Moose 向けの簡潔なオプション機能"

#. leap/perl-MooseX-Has-Options/description
msgid ""
"This module provides a succinct syntax for declaring options for the Moose "
"manpage attributes."
msgstr ""
"このモジュールは、 Moose の属性内でオプションを設定するための簡潔な文法を提供"
"します。"

#. leap/perl-MooseX-HasDefaults/summary
msgid "Default \"Is\" to \"Ro\" or \"Rw\" for All Attributes"
msgstr ""
"すべての属性に対して \"ro\" (読み込み専用) または \"rw\" (読み書き両対応) の"
"既定値を付与するモジュール"

#. leap/perl-MooseX-HasDefaults/description
msgid ""
"The module MooseX::HasDefaults::RO defaults 'is' to 'ro'.\n"
"\n"
"The module MooseX::HasDefaults::RW defaults 'is' to 'rw'.\n"
"\n"
"If you pass a specific value to any 'has''s 'is', that overrides the "
"default. If you do not want an accessor, pass 'is => undef'."
msgstr ""
"MooseX::HasDefaults::RO は既定値が 'ro' のものを表します。\n"
"\n"
"MooseX::HasDefaults::RW は既定値が 'rw' のものを表します。\n"
"\n"
"なお、 'has' の 'is' に対して特定の値を渡すと、既定値は上書きされます。アクセ"
"サが不要な場合は、 'is => undef' を渡してください。"

#. leap/perl-MooseX-InsideOut/summary
msgid "inside-out objects with Moose"
msgstr "Moose による裏返しオブジェクト"

#. leap/perl-MooseX-InsideOut/description
msgid ""
"MooseX::InsideOut provides metaroles for inside-out objects. That is, it "
"sets up attribute slot storage somewhere other than inside '$self'. This "
"means that you can extend non-Moose classes, whose internals you either "
"don't want to care about or aren't hash-based."
msgstr ""
"MooseX::InsideOut は裏返しのオブジェクト向けの役割を提供します。言い換える"
"と、 '$self' 以外のどこかに、属性スロットのストレージを設定する仕組みです。こ"
"れにより、内部仕様のわからない非 Moose クラスや、ハッシュベースではない非 "
"Moose クラスを拡張することができるようになります。"

#. leap/perl-MooseX-Iterator/summary
msgid "Iterate over collections"
msgstr "コレクションをまたいだ列挙"

#. leap/perl-MooseX-Iterator/description
msgid ""
"This is an attempt to add smalltalk-like streams to Moose. It currently "
"works with ArrayRefs and HashRefs. \n"
"* next\n"
"\n"
"The next method provides the next item in the colletion.\n"
"\n"
"  For arrays it returns the element of the array\n"
"\n"
"  For hashs it returns a pair as a hashref with the keys: key and value \n"
"* has_next\n"
"\n"
"The has_next method is a boolean method that is true if there is another "
"item in the colletion after the current item. and falue if there isn't. \n"
"* peek\n"
"\n"
"The peek method returns the next item without moving the state of the "
"iterator forward. It returns undef if it is at the end of the collection. \n"
"* reset\n"
"\n"
"Resets the cursor, so you can iterate through the elements again."
msgstr ""
"これは smalltalk のようなストリームを Moose に追加しようとする試みです。現時"
"点では、配列参照とハッシュ参照で動作します。\n"
"* next\n"
"\n"
"next メソッドは、コレクション内の次の要素を提供します。\n"
"\n"
"配列の場合は配列の要素を返します。\n"
"\n"
"ハッシュの場合はキーと値を含むハッシュ参照のペアを返します。\n"
"* has_next\n"
"\n"
"has_next メソッドは、コレクション内の現在の要素の次に別の要素が存在した場合"
"に true を返し、そうでなかった場合は false を返す、 boolean 型のメソッドで"
"す。\n"
"* peek\n"
"\n"
"peek メソッドは現在の状態を変えることなく、次の要素を返すメソッドです。コレク"
"ションの終わりに到達している場合は、 undef を返します。\n"
"* reset\n"
"\n"
"カーソルをリセットします。これにより、要素を最初から列挙しなおすことができま"
"す。"

#. leap/perl-MooseX-LazyLogDispatch/summary
#. leap/perl-MooseX-LogDispatch/summary
msgid "Logging Role for Moose"
msgstr "Moose 向けログ役割"

#. leap/perl-MooseX-LazyLogDispatch/description
#. leap/perl-MooseX-LogDispatch/description
msgid "Log::Dispatch role for use with your Moose classes."
msgstr "Log::Dispatch は、 Moose のクラスを利用するログの役割です。"

#. leap/perl-MooseX-LazyRequire/summary
msgid "Required attributes which fail only when trying to use them"
msgstr "利用しようとした場合にのみ失敗させる必須属性"

#. leap/perl-MooseX-LazyRequire/description
msgid ""
"This module adds a 'lazy_required' option to Moose attribute declarations.\n"
"\n"
"The reader methods for all attributes with that option will throw an "
"exception unless a value for the attributes was provided earlier by a "
"constructor parameter or through a writer method."
msgstr ""
"このモジュールは、 Moose の属性定義に \"lazy_required\" オプションを追加しま"
"す。\n"
"\n"
"このオプションが設定されたすべての属性のリーダメソッドは、あらかじめコンスト"
"ラクタのパラメータで設定されるか、もしくはライターメソッドで設定されない限"
"り、例外をスローします。"

#. leap/perl-MooseX-Log-Log4perl/summary
msgid "Logging Role for Moose based on Log::Log4perl"
msgstr "Log::Log4perl をベースにした Moose ベースのログ役割"

#. leap/perl-MooseX-Log-Log4perl/description
msgid ""
"A logging role building a very lightweight wrapper to Log::Log4perl for use "
"with your Moose or Moo classes. The initialization of the Log4perl instance "
"must be performed prior to logging the first log message. Otherwise the "
"default initialization will happen, probably not doing the things you "
"expect.\n"
"\n"
"For compatibility the 'logger' attribute can be accessed to use a common "
"interface for application logging.\n"
"\n"
"Using the logger within a class is as simple as consuming a role:\n"
"\n"
"    package MyClass;     use Moose;     with 'MooseX::Log::Log4perl';\n"
"\n"
"    sub dummy {         my $self = shift;         $self->log->info(\"Dummy "
"log entry\");     }\n"
"\n"
"The logger needs to be setup before using the logger, which could happen in "
"the main application:\n"
"\n"
"    package main;     use Log::Log4perl qw(:easy);     use MyClass;\n"
"\n"
"    BEGIN { Log::Log4perl->easy_init() };\n"
"\n"
"    my $myclass = MyClass->new();     $myclass->log->info(\"In my class\"); "
"# Access the log of the object     $myclass->dummy;                    # "
"Will log \"Dummy log entry\""
msgstr ""
"Moose や Moo のクラス内で使用することを前提として、 Log::Log4perl 向けの非常"
"に軽量なログ役割ラッパーです。最初のメッセージ記録を行なうよりも前に、 "
"Log4perl のインスタンスの初期化処理を実施しなければなりません。初期化処理を実"
"施しない場合は、既定の初期化処理が動作しますが、おそらくそれは期待通りの動作"
"ではないでしょう。\n"
"\n"
"なお、互換性確保の理由から、アプリケーションのログ記録のための汎用インター"
"フェイスを使用するため、 'logger' 属性にもアクセスできるようになっていま"
"す。\n"
"\n"
"クラス内でのロガーの使用は、役割を消費するだけの簡単な仕組みです:\n"
"\n"
"    package MyClass;     use Moose;     with 'MooseX::Log::Log4perl';\n"
"\n"
"    sub dummy {         my $self = shift;         $self->log->info(\"Dummy "
"log entry\");     }\n"
"\n"
"ロガーを使用する前にロガーの初期化を行なう必要があります。これはメインのアプ"
"リケーション内で下記のようにして実施します:\n"
"\n"
"    package main;     use Log::Log4perl qw(:easy);     use MyClass;\n"
"\n"
"    BEGIN { Log::Log4perl->easy_init() };\n"
"\n"
"    my $myclass = MyClass->new();     $myclass->log->info(\"In my class\"); "
"# Access the log of the object     $myclass->dummy;                    # "
"Will log \"Dummy log entry\""

#. leap/perl-MooseX-MarkAsMethods/summary
msgid "Mark overload code symbols as methods"
msgstr "オーバーロードコードシンボルをメソッドとしてマークするモジュール"

#. leap/perl-MooseX-MarkAsMethods/description
msgid ""
"MooseX::MarkAsMethods allows one to easily mark certain functions as Moose "
"methods. This will allow other packages such as the namespace::autoclean "
"manpage to operate without blowing away your overloads. After using MooseX::"
"MarkAsMethods your overloads will be recognized by the Class::MOP manpage as "
"being methods, and class extension as well as composition from roles with "
"overloads will \"just work\".\n"
"\n"
"By default we check for overloads, and mark those functions as methods.\n"
"\n"
"If 'autoclean =&gt; 1' is passed to import on using this module, we will "
"invoke namespace::autoclean to clear out non-methods."
msgstr ""
"MooseX::MarkAsMethods は Moose のメソッドとして特定の関数を簡単にマークするこ"
"とができる仕組みです。これにより、 namespace::autoclean などの他のパッケージ"
"が、オーバーロードを無視することなく動作するようにすることができます。 "
"MooseX::MarkAsMethods を利用すると、オーバーロードは Class::MOP ではメソッド"
"として認識されるようになり、クラスの拡張やオーバーロードされた役割から生成さ"
"れたものも \"単純に動作\" するようになります。\n"
"\n"
"既定ではオーバーロードをチェックし、これらの関数をメソッドとしてマークしま"
"す。\n"
"\n"
"このモジュールを使用する際、インポート時に 'autoclean =&gt; 1' が設定されてい"
"る場合、非メソッドを消去するため、 namespace::autoclean を実行します。"

#. leap/perl-MooseX-Meta-TypeConstraint-ForceCoercion/summary
msgid "Force coercion when validating type constraints"
msgstr "型の制約を検証する際の強制"

#. leap/perl-MooseX-Meta-TypeConstraint-ForceCoercion/description
msgid ""
"This class allows to wrap any \"Moose::Meta::TypeConstraint\" in a way that "
"will force coercion of the value when checking or validating a value against "
"it."
msgstr ""
"このクラスは、値の確認や検証を行なう際、その値の強制を行なうための方法を提供"
"する \"Moose::Meta::TypeConstraint\" 向けのラッパーです。"

#. leap/perl-MooseX-Method-Signatures/summary
msgid ""
"(DEPRECATED) Method declarations with type constraints and no source filter"
msgstr "(廃止予定) シグネーチャ付きのメソッド宣言 (ソースフィルタなし)"

#. leap/perl-MooseX-Method-Signatures/description
msgid ""
"Provides a proper method keyword, like \"sub\" but specifically for making "
"methods and validating their arguments against Moose type constraints."
msgstr ""
"\"sub\" のような適切なメソッドキーワードを提供しますが、特にメソッドの作成と "
"Moose タイプ制約に従ったパラメータの検証を行なうための仕組みを提供します。"

#. leap/perl-MooseX-MultiInitArg/summary
msgid "Attributes with aliases for constructor arguments"
msgstr "コンストラクタのパラメータ向けの別名付き属性"

#. leap/perl-MooseX-MultiInitArg/description
msgid ""
"If you've ever wanted to be able to call an attribute any number of things "
"while you're passing arguments to your object constructor, Now You Can.\n"
"\n"
"The primary motivator is that I have some attributes that were named "
"inconsistently, and I wanted to rename them without breaking backwards "
"compatibility with my existing API."
msgstr ""
"オブジェクトのコンストラクタにパラメータを渡す際、任意の数の属性を呼び出した"
"い場合があります。このモジュールは、このような機能を提供するためのもので"
"す。\n"
"\n"
"名前が一定しないいくつかの属性を設定したいが、既存の API との後方互換性を壊さ"
"ずに名前を変更したいことがあったため、開発を行なったものです。"

#. leap/perl-MooseX-NonMoose/summary
msgid "easy subclassing of non-Moose classes"
msgstr "非 Moose クラスの簡単なサブクラス化"

#. leap/perl-MooseX-NonMoose/description
msgid ""
"'MooseX::NonMoose' allows for easily subclassing non-Moose classes with "
"Moose, taking care of the annoying details connected with doing this, such "
"as setting up proper inheritance from the Moose::Object manpage and "
"installing (and inlining, at 'make_immutable' time) a constructor that makes "
"sure things like 'BUILD' methods are called. It tries to be as non-intrusive "
"as possible - when this module is used, inheriting from non-Moose classes "
"and inheriting from Moose classes should work identically, aside from the "
"few caveats mentioned below. One of the goals of this module is that "
"including it in a the Moose::Exporter manpage-based package used across an "
"entire application should be possible, without interfering with classes that "
"only inherit from Moose modules, or even classes that don't inherit from "
"anything at all.\n"
"\n"
"There are several ways to use this module. The most straightforward is to "
"just 'use MooseX::NonMoose;' in your class; this should set up everything "
"necessary for extending non-Moose modules. the MooseX::NonMoose::Meta::Role::"
"Class manpage and the MooseX::NonMoose::Meta::Role::Constructor manpage can "
"also be applied to your metaclasses manually, either by passing a '-traits' "
"option to your 'use Moose;' line, or by applying them using the Moose::Util::"
"MetaRole manpage in a the Moose::Exporter manpage-based package. the MooseX::"
"NonMoose::Meta::Role::Class manpage is the part that provides the main "
"functionality of this module; if you don't care about inlining, this is all "
"you need to worry about. Applying the MooseX::NonMoose::Meta::Role::"
"Constructor manpage as well will provide an inlined constructor when you "
"immutabilize your class.\n"
"\n"
"'MooseX::NonMoose' allows you to manipulate the argument list that gets "
"passed to the superclass constructor by defining a 'FOREIGNBUILDARGS' "
"method. This is called with the same argument list as the 'BUILDARGS' "
"method, but should return a list of arguments to pass to the superclass "
"constructor. This allows 'MooseX::NonMoose' to support superclasses whose "
"constructors would get confused by the extra arguments that Moose requires "
"(for attributes, etc.)\n"
"\n"
"Not all non-Moose classes use 'new' as the name of their constructor. This "
"module allows you to extend these classes by explicitly stating which method "
"is the constructor, during the call to 'extends'. The syntax looks like "
"this:\n"
"\n"
"  extends 'Foo' => { -constructor_name => 'create' };\n"
"\n"
"similar to how you can already pass '-version' in the 'extends' call in a "
"similar way."
msgstr ""
"'MooseX::NonMoose' は Moose を利用して非 Moose クラスを簡単にサブクラス化する"
"ためのモジュールです。これを利用すれば、例えば Moose:Object からの適切な継承"
"を設定したり、 'BUILD' メソッドのような仕組みを呼び出すコンストラクタをインス"
"トール (および 'make_immutable' の時点でのインライン化) したりなど、細部に注"
"意を払う必要をなくすことができます。なお、このモジュールはできる限り直感的で"
"は無いように作られています。このモジュールを利用した場合、非 Moose クラスから"
"継承するのと Moose クラスから継承するのは同じ処理となり、上記のようないくつか"
"の注意も払う必要がなくなります。このモジュールのゴールのうちの 1 つとしては、"
"アプリケーション全体をまたいで使用される Moose::Exporter ベースのパッケージ内"
"に同梱され、 Moose モジュールからの継承だけを行なっているクラスや、どのクラス"
"からも継承していないクラスを妨害することが無いようにすることを目指していま"
"す。\n"
"\n"
"このモジュールを使用する方法にはいくつかあります。最も簡単な方法は、お使いの"
"クラス内で 'use MooseX::NonMoose;' を追加することです。これにより、非 Moose "
"モジュールを拡張するのに必要なすべてのことを実施します。 MooseX::NonMoose::"
"Meta::Role::Class と MooseX::NonMoose::Meta::Role::Constructor をお使いのメタ"
"クラスに手動で適用することもできますし、 'use Moose;' の行内に '-traits' オプ"
"ションを追加してもかまいません。また、 Moose::Exporter ベースのパッケージ内"
"で Moose::Util::MetaRole を利用して適用してもかまいません。 MooseX::"
"NonMoose::Meta::Role::Class はこのモジュールのメインの機能を提供するもので、"
"インライン化について気にしないのであれば、これですべてです。お使いのクラスに"
"不変性を付与したい場合は、 MooseX::NonMoose::Meta::Role::Constructor をも適用"
"することで、インライン化されたコンストラクタを提供することができます。\n"
"\n"
"'MooseX::NonMoose' を利用することで、 'FOREIGNBUILDARGS' メソッドを定義する"
"スーパークラスのコンストラクタに対して、渡されるパラメータリストを処理するこ"
"とができます。これは同じパラメータリストで 'BUILDARGS' メソッドを呼び出した場"
"合と同じですが、スーパークラスのコンストラクタに渡すべきパラメータリストを返"
"すところが異なります。これにより 'MooseX::NonMoose' は、 Moose が必要とする追"
"加パラメータ (属性など) でコンストラクタが混乱するようなスーパークラスにも対"
"応できるようになります。\n"
"\n"
"すべての非 Moose クラスがコンストラクタに 'new' を使用しているわけではありま"
"せん。このモジュールは、このようなクラスを拡張する際、どのメソッドがコンスト"
"ラクタなのかを 'extends' で指定することができます。具体的には、下記のようにな"
"ります:\n"
"\n"
"  extends 'Foo' => { -constructor_name => 'create' };\n"
"\n"
"'extends' 内では、ほかにも '-version' などを同じ方法で渡すこともできます。"

#. leap/perl-MooseX-Object-Pluggable/summary
msgid "Make your classes pluggable"
msgstr "お使いのクラスをプラグイン可能にするモジュール"

#. leap/perl-MooseX-Object-Pluggable/description
msgid ""
"This module is meant to be loaded as a role from Moose-based classes. It "
"will add five methods and four attributes to assist you with the loading and "
"handling of plugins and extensions for plugins. I understand that this may "
"pollute your namespace, however I took great care in using the least "
"ambiguous names possible."
msgstr ""
"このモジュールは、 Moose ベースのクラスから役割として読み込まれるモジュールで"
"す。 5 種類のメソッドと 4 種類の属性が追加され、プラグインとプラグインに対す"
"る拡張を読み込み、処理するための支援機能を提供します。これによってネームス"
"ペースを汚染する可能性も理解しておりますが、少なくとも不明確な名前に関しては"
"できる限り注意しております。"

#. leap/perl-MooseX-OneArgNew/summary
msgid "Teach ->New to Accept Single, Non-Hashref Arguments"
msgstr "->New における単一の非ハッシュ参照の属性の受け入れ"

#. leap/perl-MooseX-OneArgNew/description
msgid ""
"MooseX::OneArgNew lets your constructor take a single argument, which will "
"be translated into the value for a one-entry hashref. It is a the "
"parameterized role|MooseX::Role::Parameterized manpage with three "
"parameters: \n"
"* type\n"
"\n"
"  The Moose type that the single argument must be for the one-arg form to   "
"work. This should be an existing type, and may be either a string type or   "
"a MooseX::Type. \n"
"* init_arg\n"
"\n"
"  This is the string that will be used as the key for the hashref   "
"constructed from the one-arg call to new. \n"
"* coerce\n"
"\n"
"  If true, a single argument to new will be coerced into the expected type   "
"if possible. Keep in mind that if there are no coercions for the type,   "
"this will be an error, and that if a coercion from HashRef exists, you   "
"might be getting yourself into a weird situation."
msgstr ""
"MooseX::OneArgNew はお使いのコンストラクタを単一のパラメータとし、 1 項目の"
"ハッシュ参照に対する値として解釈するモジュールです。これはパラメータ化された"
"役割で、下記の 3 種類のパラメータを設定することができます:\n"
"* type\n"
"\n"
"  単一のパラメータに対して設定する Moose の型を指定します。これは既存の型であ"
"るべきで、文字列タイプまたは MooseX::Type のいずれかでもかまいません。\n"
"* init_arg\n"
"\n"
"  単一のパラメータでハッシュ参照を使用する際、そのキーとして使用する文字列を"
"指定します。\n"
"* coerce\n"
"\n"
"  true を指定すると、可能であれば new に対する単一のパラメータを既存の型に強"
"制します。ただし、型に対する強制はエラーとなりうるもので、ハッシュ参照に対し"
"て強制を行なうと、予期しない結果になるかもしれません。"

#. leap/perl-MooseX-POE/summary
msgid "The Illicit Love Child of Moose and POE"
msgstr "Moose と POE による不法な愛の子供"

#. leap/perl-MooseX-POE/description
msgid ""
"MooseX::POE is a the Moose manpage wrapper around a the POE::Session manpage."
msgstr "MooseX::POE は POE::Session に対する Moose ラッパーです。"

#. leap/perl-MooseX-Param/summary
msgid "Simple role to provide a standard param method"
msgstr "標準のパラメータ方式を提供するシンプルな役割"

#. leap/perl-MooseX-Param/description
msgid ""
"This is a very simple Moose role which provides a the CGI manpage like "
"'param' method.\n"
"\n"
"I found that I had written this code over and over and over and over again, "
"and each time it was the same. So I thought, why not put it in a role?"
msgstr ""
"これは CGI でいうところの 'param' メソッドのような、非常にシンプルな Moose の"
"役割です。\n"
"\n"
"このコードは様々なプロジェクトで何度も作られているものであり、なぜ役割にまと"
"められていないのか不審に思っていたくらいのものです。"

#. leap/perl-MooseX-Params-Validate/summary
msgid "an extension of Params::Validate using Moose's types"
msgstr "Moose の型を利用した Params::Validate の拡張"

#. leap/perl-MooseX-Params-Validate/description
msgid ""
"This module fills a gap in Moose by adding method parameter validation to "
"Moose. This is just one of many developing options, it should not be "
"considered the \"official\" one by any means though.\n"
"\n"
"You might also want to explore 'MooseX::Method::Signatures' and 'MooseX::"
"Declare'."
msgstr ""
"このモジュールは Moose 内のギャップを埋めるもので、 Moose のメソッドパラメー"
"タの検証機能を追加するための仕組みです。これは多数ある開発オプションの中の 1 "
"つでしかなく、どのような目的であっても \"公式\" のものであるとは考えるべきで"
"はないものです。\n"
"\n"
"'MooseX::Method::Signatures' や 'MooseX::Declare' についてもお読みください。"

#. leap/perl-MooseX-Role-Cmd/summary
msgid "Wrap system command binaries the Moose way"
msgstr "Moose の方式でシステムコマンドのバイナリをラッピングするモジュール"

#. leap/perl-MooseX-Role-Cmd/description
msgid ""
"MooseX::Role::Cmd is a Moose role intended to ease the task of building "
"command-line wrapper modules. It automatically maps Moose objects into "
"command strings which are passed to IPC::Cmd."
msgstr ""
"MooseX::Role::Cmd は Moose の役割であり、コマンドラインのラッパーモジュールの"
"構築処理を簡単にするための仕組みです。自動的にMoose のオブジェクトをコマンド"
"文字列にマッピングし、 IPC::Cmd に渡せる文字列にします。"

#. leap/perl-MooseX-Role-Parameterized/summary
msgid "Moose roles with composition parameters"
msgstr "組成パラメータを持つ Moose の役割"

#. leap/perl-MooseX-Role-Parameterized/description
msgid ""
"Your parameterized role consists of two new things: parameter declarations "
"and a 'role' block.\n"
"\n"
"Parameters are declared using the parameter keyword which very much "
"resembles Moose/has. You can use any option that Moose/has accepts. The "
"default value for the 'is' option is 'ro' as that's a very common case. Use "
"'is => 'bare'' if you want no accessor. These parameters will get their "
"values when the consuming class (or role) uses Moose/with. A parameter "
"object will be constructed with these values, and passed to the 'role' "
"block.\n"
"\n"
"The 'role' block then uses the usual Moose::Role keywords to build up a "
"role. You can shift off the parameter object to inspect what the consuming "
"class provided as parameters. You use the parameters to customize your role "
"however you wish.\n"
"\n"
"There are many possible implementations for parameterized roles (hopefully "
"with a consistent enough API); I believe this to be the easiest and most "
"flexible design. Coincidentally, Pugs originally had an eerily similar "
"design.\n"
"\n"
"See MooseX::Role::Parameterized::Extending for some tips on how to extend "
"this module."
msgstr ""
"パラメータ化した役割には、 2 つのものが含まれています。 1 つはパラメータの修"
"飾子、もう 1 つは 'role' のブロックです。\n"
"\n"
"パラメータは parameter キーワードを利用して定義するもので、 Moose ととても似"
"た仕組みです。ここでは Moose で利用可能な任意のオプションを使用することができ"
"ます。 'is' に対する既定値は 'ro' であり、これは非常に一般的な場合を表してい"
"ます。アクセサが無い場合は、 'is => 'bare'' を指定してください。これらのパラ"
"メータは、消費クラスが Moose を使用する際に値を取得します。パラメータオブジェ"
"クトは、これらの値で構築され、 'role' ブロックに渡されます。\n"
"\n"
"'role' ブロックでは、役割を構築するのに Moose::Role のキーワードを使用しま"
"す。パラメータオブジェクトは、消費クラスがパラメータとして提供したものを検査"
"します。役割をカスタマイズしたい場合は、パラメータを利用して実施してくださ"
"い。\n"
"\n"
"パラメータ化された役割の実装には多数の方法がありますが (十分に一貫性のある "
"API であるものとして) 、この方法が最も簡単で柔軟な設計であるものと考えており"
"ます。偶然にも、 Pugs ではこれと似た設計になっています。\n"
"\n"
"このモジュールの拡張方法についてのヒントは、 MooseX::Role::Parameterized::"
"Extending をお読みください。"

#. leap/perl-MooseX-Role-TraitConstructor/summary
msgid "A wrapper for C<new> that can accept a"
msgstr "C<new> に対するラッパー"

#. leap/perl-MooseX-Role-TraitConstructor/description
msgid ""
"This role allows you to easily accept a 'traits' argument (or another name) "
"into your constructor, which will easily mix roles into an anonymous class "
"before construction, much like the Moose::Meta::Attribute manpage does."
msgstr ""
"この役割は、 'traits' パラメータ (もしくは別の名前) コンストラクタ内に受け付"
"けるためのモジュールで、 Moose::Meta::Attribute が実施するような構築前の匿名"
"クラス内での役割の混在処理を、簡単に行なうことができます。"

#. leap/perl-MooseX-Role-WithOverloading/summary
msgid "(DEPRECATED) Roles which support overloading"
msgstr "(廃止予定) オーバーロードに対応するためのロール"

#. leap/perl-MooseX-Role-WithOverloading/description
msgid ""
"MooseX::Role::WithOverloading allows you to write a the Moose::Role manpage "
"which defines overloaded operators and allows those overload methods to be "
"composed into the classes/roles/instances it's compiled to, where plain the "
"Moose::Role manpages would lose the overloading.\n"
"\n"
"Starting with the Moose manpage version 2.1300, this module is no longer "
"necessary, as the functionality is available already. In that case, 'use "
"MooseX::Role::WithOverloading' behaves identically to 'use Moose::Role'."
msgstr ""
"MooseX::Role::WithOverloading は Moose::Role を作成するためのモジュールで、演"
"算子のオーバーロードを定義することができるほか、オーバーロードしたメソッドを"
"コンパイル先のクラスやロール、インスタンスに組み込み、純粋な Moose::ROle が"
"オーバーロードを失うことができるものです。\n"
"\n"
"Mosse バージョン 2.1300 以降でこのモジュールは必須ではなくなりましたが、機能"
"の提供は引き続き行なわれています。この場合、  'use MooseX::Role::"
"WithOverloading' は 'use Moose::Role' と同等の動作になります。"

#. leap/perl-MooseX-SemiAffordanceAccessor/summary
msgid "Name your accessors foo() and set_foo()"
msgstr "アクセサの命名 (foo(), set_foo())"

#. leap/perl-MooseX-SemiAffordanceAccessor/description
msgid ""
"This module does not provide any methods. Simply loading it changes the "
"default naming policy for the loading class so that accessors are separated "
"into get and set methods. The get methods have the same name as the "
"accessor, while set methods are prefixed with \"set_\".\n"
"\n"
"If you define an attribute with a leading underscore, then the set method "
"will start with \"_set_\".\n"
"\n"
"If you explicitly set a \"reader\" or \"writer\" name when creating an "
"attribute, then that attribute's naming scheme is left unchanged.\n"
"\n"
"The name \"semi-affordance\" comes from David Wheeler's Class::Meta module."
msgstr ""
"このモジュールはメソッドを提供するものではありません。単純に、これを読み込む"
"ことによって、読み込み中のクラスに対する既定の名前付けポリシーが変更され、ア"
"クセサが get と set のメソッドに分割されるようになります。 get メソッドはアク"
"セサと同じ名前になりますが、 set メソッドには \"set_\" というプレフィクスが付"
"けられるようになります。\n"
"\n"
"冒頭にアンダースコア (_) を持つ属性を定義した場合、 set メソッドは \"_set_\" "
"で始まるものになります。\n"
"\n"
"また、属性を作成する際に \"リーダ\" または \"ライター\" の名前を明示的に設定"
"した場合は、属性の名前付け方式は変更されません。\n"
"\n"
"\"semi-affordance\" の名前は、 David Wheeler 氏の Class::Meta モジュールから"
"来ています。"

#. leap/perl-MooseX-SetOnce/summary
msgid "Write-once, read-many attributes for Moose"
msgstr "Mooseの書き込み1回、読み取り多数の属性"

#. leap/perl-MooseX-SetOnce/description
msgid ""
"The 'SetOnce' attribute lets your class have attributes that are not lazy "
"and not set, but that cannot be altered once set.\n"
"\n"
"The logic is very simple: if you try to alter the value of an attribute with "
"the SetOnce trait, either by accessor or writer, and the attribute has a "
"value, it will throw an exception.\n"
"\n"
"If the attribute has a clearer, you may clear the attribute and set it again."
msgstr ""
"'SetOnce' 属性は、遅延型ではなくセットでもない属性をクラス内に定義できるよう"
"にする仕組みで、一回設定したら変更できない属性を作ることができます。\n"
"\n"
"ロジックは非常にシンプルなもので、 SetOnce が設定された属性に対して、アクセサ"
"またはライター経由で値を変更しようとした場合、すでに値が設定されていれば例外"
"をスローするだけです。\n"
"\n"
"属性にクリアラが存在する場合は、属性を消去して設定しなおすこともできます。"

#. leap/perl-MooseX-SimpleConfig/summary
msgid "A Moose role for setting attributes from a simple configuration file"
msgstr "シンプルな設定ファイルから属性を設定するための Moose の役割"

#. leap/perl-MooseX-SimpleConfig/description
msgid ""
"This role loads simple files to set object attributes. It is based on the "
"abstract role the MooseX::ConfigFromFile manpage, and uses the Config::Any "
"manpage to load your configuration file. the Config::Any manpage will in "
"turn support any of a variety of different config formats, detected by the "
"file extension. See the Config::Any manpage for more details about supported "
"formats.\n"
"\n"
"To pass additional arguments to the Config::Any manpage you must provide a "
"'config_any_args()' method, for example:\n"
"\n"
"  sub config_any_args {     return {       driver_args => { General => { '-"
"InterPolateVars' => 1 } }     };   }\n"
"\n"
"Like all the MooseX::ConfigFromFile manpage -derived file loaders, this "
"module is automatically supported by the the MooseX::Getopt manpage role as "
"well, which allows specifying '-configfile' on the command line."
msgstr ""
"この役割は、シンプルなファイルをオブジェクトの属性に設定するためのものです。 "
"MooseX::ConfigFromFile の抽象的な役割をベースにしているほか、 Config::Any を"
"利用して設定ファイルを読み込んでいます。対応する様々なファイル形式 (ファイル"
"の拡張子で判別します) について、詳しくは Config::Any をお読みください。また、"
"対応する形式についても Config::Any をお読みください。\n"
"\n"
"Config::Any に対して追加のパラメータを渡したい場合は、 'config_any_args()' メ"
"ソッドを提供しなければなりません。例えば下記のようになります:\n"
"\n"
"  sub config_any_args {     return {       driver_args => { General => { '-"
"InterPolateVars' => 1 } }     };   }\n"
"\n"
"すべての MooseX::ConfigFromFile からの派生ファイルローダと同様に、このモ"
"ジュールも MooseX::Getopt で自動的にサポートされます。コマンドラインからは '-"
"configfile' を指定してください。"

#. leap/perl-MooseX-Singleton/summary
msgid "Turn your Moose class into a singleton"
msgstr "Moose クラスをシングルトンにするモジュール"

#. leap/perl-MooseX-Singleton/description
msgid ""
"A singleton is a class that has only one instance in an application. "
"'MooseX::Singleton' lets you easily upgrade (or downgrade, as it were) your "
"Moose class to a singleton.\n"
"\n"
"All you should need to do to transform your class is to change 'use Moose' "
"to 'use MooseX::Singleton'. This module uses metaclass roles to do its "
"magic, so it should cooperate with most other 'MooseX' modules."
msgstr ""
"シングルトンとは、アプリケーション内で 1 つだけインスタンスを持つクラスのこと"
"です。 'MooseX::Singleton' は、お使いの Moose クラスをシングルトンにアップグ"
"レード (もしくはダウングレード) することができます。\n"
"\n"
"お使いのクラスを修正するのは簡単で、 'use Moose' を 'use MooseX::Singleton' "
"に変更するだけです。このモジュールはメタクラスの役割を利用することで、このよ"
"うな魔法を提供していますので、ほとんどの他の 'MooseX' モジュールとともに動作"
"することができます。"

#. leap/perl-MooseX-Storage/summary
msgid "Serialization framework for Moose classes"
msgstr "Moose クラス向けシリアライズフレームワーク"

#. leap/perl-MooseX-Storage/description
msgid ""
"MooseX::Storage is a serialization framework for Moose, it provides a very "
"flexible and highly pluggable way to serialize Moose classes to a number of "
"different formats and styles."
msgstr ""
"MooseX:Storage は Moose 向けのシリアライズフレームワークです。非常に柔軟で、"
"高度にプラグイン化可能な仕組みを提供し、 Moose クラスを様々な形式やスタイルに"
"変換することができます。"

#. leap/perl-MooseX-StrictConstructor/summary
msgid "Make your object constructors blow up on unknown attributes"
msgstr "オブジェクトのコンストラクタで未知の属性を排除するモジュール"

#. leap/perl-MooseX-StrictConstructor/description
msgid ""
"Simply loading this module makes your constructors \"strict\". If your "
"constructor is called with an attribute init argument that your class does "
"not declare, then it calls 'Moose->throw_error()'. This is a great way to "
"catch small typos."
msgstr ""
"このモジュールを読み込むだけで、お使いのコンストラクタを \"strict\" にするこ"
"とができます。お使いのクラス内で定義されていない属性初期化パラメータを利用し"
"てコンストラクタが呼び出されると、  'Moose->throw_error()' を呼び出します。こ"
"れは小さな記述ミスを捉えることのできる素晴らしい方法です。"

#. leap/perl-MooseX-Traits/summary
msgid "Automatically apply roles at object creation time"
msgstr "オブジェクトの作成時に自動的に役割を割り当てるモジュール"

#. leap/perl-MooseX-Traits/description
msgid ""
"Often you want to create components that can be added to a class "
"arbitrarily. This module makes it easy for the end user to use these "
"components. Instead of requiring the user to create a named class with the "
"desired roles applied, or apply roles to the instance one-by-one, he can "
"just create a new class from yours with 'with_traits', and then instantiate "
"that.\n"
"\n"
"There is also 'new_with_traits', which exists for compatibility reasons. It "
"accepts a 'traits' parameter, creates a new class with those traits, and "
"then instantiates it.\n"
"\n"
"   Class->new_with_traits( traits => [qw/Foo Bar/], foo => 42, bar => 1 )\n"
"\n"
"returns exactly the same object as\n"
"\n"
"   Class->with_traits(qw/Foo Bar/)->new( foo => 42, bar => 1 )\n"
"\n"
"would. But you can also store the result of 'with_traits', and call other "
"methods:\n"
"\n"
"   my $c = Class->with_traits(qw/Foo Bar/);    $c->new( foo => 42 );    $c-"
">whatever( foo => 1234 );\n"
"\n"
"And so on."
msgstr ""
"任意のクラスに対して追加することのできるコンポーネントを作成したりしたい場合"
"があります。このモジュールはエンドユーザに対して、これらのコンポーネントを使"
"用できるようにします。ユーザに対しては必要な役割が割り当てられた名前付きのク"
"ラスを作成したり、インスタンスに対して一つずつ役割を割り当てたりせずに、 "
"'with_traits' を利用して新しいクラスを作成するだけで、あとはそれをインスタン"
"ス化するだけで済むようになっています。\n"
"\n"
"このモジュールには 'new_with_traits' も含まれていますが、こちらは互換性を維持"
"する理由で残っているものです。これは 'traits' パラメータを受け入れる仕組み"
"で、新しいクラスをそのような trait (形質) 付きで作成し、インスタンス化するた"
"めのものです。\n"
"\n"
"   Class->new_with_traits( traits => [qw/Foo Bar/], foo => 42, bar => 1 )\n"
"\n"
"上記は下記とまったく同じオブジェクトを返すはずです:\n"
"\n"
"   Class->with_traits(qw/Foo Bar/)->new( foo => 42, bar => 1 )\n"
"\n"
"ただし、 'with_traits' の結果を保存して、他のメソッドを呼び出すこともできま"
"す:\n"
"\n"
"   my $c = Class->with_traits(qw/Foo Bar/);    $c->new( foo => 42 );    $c-"
">whatever( foo => 1234 );"

#. leap/perl-MooseX-TransactionalMethods/summary
msgid "Syntax sugar for transactional methods"
msgstr "トランザクション型のメソッド向け文法追加機能"

#. leap/perl-MooseX-TransactionalMethods/description
msgid ""
"This method exports the \"transactional\" declarator that will enclose the "
"method in a txn_do call."
msgstr ""
"このメソッドは、メソッドを txn_do の呼び出し内に封じる \"transactional\" と呼"
"ばれるデコレータを公開します。"

#. leap/perl-MooseX-Types/summary
msgid "Organise your Moose types in libraries"
msgstr "ライブラリ内での Moose 型の統合"

#. leap/perl-MooseX-Types/description
msgid ""
"The type system provided by Moose effectively makes all of its builtin type "
"global, as are any types you declare with Moose. This means that every "
"module that declares a type named 'PositiveInt' is sharing the same type "
"object. This can be a problem when different parts of the code base want to "
"use the same name for different things.\n"
"\n"
"This package lets you declare types using short names, but behind the scenes "
"it namespaces all your type declarations, effectively prevent name clashes "
"between packages.\n"
"\n"
"This is done by creating a type library module like 'MyApp::Types' and then "
"importing types from that module into other modules.\n"
"\n"
"As a side effect, the declaration mechanism allows you to write type names "
"as barewords (really function calls), which catches typos in names at "
"compile time rather than run time.\n"
"\n"
"This module also provides some helper functions for using Moose types "
"outside of attribute declarations.\n"
"\n"
"If you mix string-based names with types created by this module, it will "
"warn, with a few exceptions. If you are declaring a 'class_type()' or "
"'role_type()' within your type library, or if you use a fully qualified name "
"like '\"MyApp::Foo\"'."
msgstr ""
"Moose で提供されるこのタイプシステムは、すべての内蔵されている型をグローバル"
"にするもので、 Moose で定義した任意の型として利用することができます。これによ"
"り、 'PositiveInt' という名前の型を定義するモジュールは、同じ型オブジェクトを"
"共有することになります。これは異なるコードベースのパーツが異なることに対して"
"同じ名前を使用したりしたいような場合に問題となる場合があります。\n"
"\n"
"このパッケージは、短い名前を利用して型を定義しますが、舞台裏ではお使いのすべ"
"ての型定義が効果的にパッケージ間の名前衝突を防ぐ仕組みが用意されています。\n"
"\n"
"これは 'MyApp::Types' のようなタイプライブラリを作成し、そのモジュールから他"
"のモジュール内に肩をインポートすることによって行なわれているものです。\n"
"\n"
"副次的な効果としては、定義の仕組みは型の名前をそのまま (通常は関数の呼び出"
"し) として記述することができるようになります。これにより、実行時ではなくコン"
"パイル時に記述ミスを捕らえられるようになります。\n"
"\n"
"このモジュールでは、属性定義を別にすれば、 Moose の型を利用するためのいくつか"
"の支援関数も提供されています。\n"
"\n"
"文字列ベースの名前とこのモジュールで作成した型を混在させた場合は、警告メッ"
"セージが表示され、場合によっては例外もスローされます。また、タイプライブラリ"
"内で 'class_type()' や 'role_type()' を定義している場合や、 '\"MyApp::Foo\"' "
"のように完全修飾名を利用している場合にも発生します。"

#. leap/perl-MooseX-Types-Common/summary
msgid "Library of Commonly Used Type Constraints"
msgstr "型制約で一般的に使用されるライブラリ"

#. leap/perl-MooseX-Types-Common/description
msgid ""
"A set of commonly-used type constraints that do not ship with Moose by "
"default."
msgstr ""
"Moose の既定では配布されていない、一般的に使用される型制約のセットです。"

#. leap/perl-MooseX-Types-DateTime/summary
msgid "L<DateTime> related constraints and coercions for Moose"
msgstr "Moose 向けの L<DateTime> 関連の制約と強制のためのモジュール"

#. leap/perl-MooseX-Types-DateTime/description
msgid ""
"This module packages several the Moose::Util::TypeConstraints manpage with "
"coercions, designed to work with the the DateTime manpage suite of objects.\n"
"\n"
"Namespaced Example:\n"
"\n"
"    use MooseX::Types::DateTime;\n"
"\n"
"    has time_zone => (         isa => 'DateTime::TimeZone',         is => "
"\"rw\",         coerce => 1,     );\n"
"\n"
"    Class->new( time_zone => \"Africa/Timbuktu\" );"
msgstr ""
"このモジュールは、 DateTime オブジェクトスイートとともに利用する前提で設計さ"
"れた、 Moose::Util::TypeConstraints とその強制機能を提供します。\n"
"\n"
"ネームスペース化した場合の例:\n"
"\n"
"    use MooseX::Types::DateTime;\n"
"\n"
"    has time_zone => (         isa => 'DateTime::TimeZone',         is => "
"\"rw\",         coerce => 1,     );\n"
"\n"
"    Class->new( time_zone => \"Africa/Timbuktu\" );"

#. leap/perl-MooseX-Types-LoadableClass/summary
msgid "ClassName type constraint with coercion to load the class"
msgstr "クラスの読み込みを強制する ClassName 型制約"

#. leap/perl-MooseX-Types-LoadableClass/description
msgid ""
"    use Moose::Util::TypeConstraints;\n"
"\n"
"    my $tc = subtype as ClassName;     coerce $tc, from Str, via { Class::"
"Load::load_class($_); $_ };\n"
"\n"
"I've written those three lines of code quite a lot of times, in quite a lot "
"of places.\n"
"\n"
"Now I don't have to."
msgstr ""
"    use Moose::Util::TypeConstraints;\n"
"\n"
"    my $tc = subtype as ClassName;     coerce $tc, from Str, via { Class::"
"Load::load_class($_); $_ };\n"
"\n"
"今まで上記3行のようなコードを様々な場所で何度も書いてきました。\n"
"\n"
"このモジュールにより、このようなコードが不要になります。"

#. leap/perl-MooseX-Types-Path-Class/summary
msgid "Path::Class type library for Moose"
msgstr "Moose 向け Path::Class タイプライブラリ"

#. leap/perl-MooseX-Types-Path-Class/description
msgid ""
"MooseX::Types::Path::Class creates common Moose types, coercions and option "
"specifications useful for dealing with Path::Class objects as Moose "
"attributes.\n"
"\n"
"Coercions (see Moose::Util::TypeConstraints) are made from both 'Str' and "
"'ArrayRef' to both Path::Class::Dir and Path::Class::File objects. If you "
"have MooseX::Getopt installed, the 'Getopt' option type (\"=s\") will be "
"added for both Path::Class::Dir and Path::Class::File."
msgstr ""
"MooseX::Types::Path::Class は汎用的な Moose の型や強制、オプション仕様などを"
"作成するもので、 Moose の属性として Path:Class を扱う際に便利な仕組みです。\n"
"\n"
"強制 (Moose::Util::TypeConstraints をお読みください) は、 'Str' および "
"'ArrayRef' の両方から Path::Class:Dir および Path::Class::File オブジェクトの"
"両方を作成することができます。 MooseX::Getopt がインストールされている場合"
"は、 'Getopt' オプションタイプ (\"=s\") が Path::Class::Dir と Path::Class::"
"File の両方に追加されます。"

#. leap/perl-MooseX-Types-Path-Tiny/summary
msgid "Path::Tiny types and coercions for Moose"
msgstr "Moose 向け Path::Tiny 型および強制"

#. leap/perl-MooseX-Types-Path-Tiny/description
msgid ""
"This module provides Path::Tiny types for Moose. It handles two important "
"types of coercion:\n"
"\n"
"  * coercing objects with overloaded stringification\n"
"\n"
"  * coercing to absolute paths\n"
"\n"
"It also can check to ensure that files or directories exist."
msgstr ""
"このモジュールは、 Moose に対して Path::Tiny の型を提供するものです。このモ"
"ジュールは、下記 2 つの重要な強制型を処理します:\n"
"\n"
"* オブジェクトに対するオーバーロードされた署名の強制\n"
"\n"
"* 絶対パスに対する強制\n"
"\n"
"また、ファイルやディレクトリが存在しているかどうかをチェックすることもできま"
"す。"

#. leap/perl-MooseX-Types-Perl/summary
msgid "Moose types that check against Perl syntax"
msgstr "Perl の文法をチェックする Moose 型"

#. leap/perl-MooseX-Types-Perl/description
msgid ""
"This library provides MooseX::Types for checking things (mostly strings) "
"against syntax that is, or is a reasonable subset of, Perl syntax."
msgstr ""
"このライブラリは、 Perl (または Perl のサブセット) の文法に照らして、何らかの"
"もの (主に文字列) をチェックするための MooseX::Types を提供します。"

#. leap/perl-MooseX-Types-Set-Object/summary
msgid "Set::Object type with coercions and stuff"
msgstr "強制などの機能が付いた Set::Object 型"

#. leap/perl-MooseX-Types-Set-Object/description
msgid ""
"This module provides a Moose type constraint (see the Moose::Util::"
"TypeConstraints manpage, the MooseX::Types manpage). Note that this "
"constraint and its coercions are *global*, not simply limited to the scope "
"that imported it -- in this way it acts like a regular the Moose manpage "
"type constraint, rather than one from the MooseX::Types manpage."
msgstr ""
"このモジュールは Moose の型制約 (詳しくは Moose::Util::TypeConstraints と "
"MooseX::Types をお読みください) を提供するものです。ただし、このモジュールの"
"制約と強制は *グローバル* であり、取り込んだスコープだけにとどまらないことに"
"注意してください -- このような方法で、 MooseX::Types が提供するものではな"
"く、 Moose の型制約として通常通り動作することになります。"

#. leap/perl-MooseX-Types-Stringlike/summary
msgid "Moose type constraints for strings or string-like objects"
msgstr "文字列や文字列のようなオブジェクトに対する Moose の型制約"

#. leap/perl-MooseX-Types-Stringlike/description
msgid ""
"This module provides a more general version of the 'Str' type. If coercions "
"are enabled, it will accepts objects that overload stringification and "
"coerces them into strings."
msgstr ""
"このモジュールは、より一般的な 'Str' 型を提供します。強制機能を有効化すると、"
"文字列化をオーバーロードしたオブジェクトを受け入れるほか、文字列への強制も実"
"施します。"

#. leap/perl-MooseX-Types-Structured/summary
msgid "Structured Type Constraints for Moose"
msgstr "Moose 向け構造型制約"

#. leap/perl-MooseX-Types-Structured/description
msgid ""
"A structured type constraint is a standard container Moose type constraint, "
"such as an 'ArrayRef' or 'HashRef', which has been enhanced to allow you to "
"explicitly name all the allowed type constraints inside the structure. The "
"generalized form is:\n"
"\n"
"    TypeConstraint[@TypeParameters or %TypeParameters]\n"
"\n"
"Where 'TypeParameters' is an array reference or hash references of Moose::"
"Meta::TypeConstraint objects.\n"
"\n"
"This type library enables structured type constraints. It is built on top of "
"the MooseX::Types library system, so you should review the documentation for "
"that if you are not familiar with it."
msgstr ""
"構造型制約とは 'ArrayRef' や 'HadhRef' のような Moose の標準コンテナで、構造"
"体の内部に許可された型すべての名前を明示的に付与できるよう拡張された仕組みで"
"す。一般化された形式は下記のようになります:\n"
"\n"
"    TypeConstraint[@TypeParameters or %TypeParameters]\n"
"\n"
"ここで、 'TypeParameters' は Moose::Meta::TypeConstraint オブジェクトの配列参"
"照もしくはハッシュ参照です。\n"
"\n"
"このタイプライブラリは構造型制約を有効にします。また、 MooseX::Types ライブラ"
"リシステム上に構築された仕組みです。よくわからない場合はドキュメンテーション"
"をお読みください。"

#. leap/perl-MooseX-Workers/summary
msgid "Simple sub-process management for asynchronous tasks"
msgstr "非同期処理におけるサブプロセスのシンプルな管理モジュール"

#. leap/perl-MooseX-Workers/description
msgid ""
"MooseX::Workers is a Role that provides easy delegation of long-running "
"tasks into a managed child process. Process management is taken care of via "
"POE and its POE::Wheel::Run module."
msgstr ""
"MooseX::Workers は長い時間がかかる処理を管理下にある子プロセスに代理させる役"
"割です。プロセスの管理は POE と POE::Wheel::Run モジュールを介して行なわれま"
"す。"

#. leap/perl-Mouse/summary
msgid "Moose minus the antlers"
msgstr "Moose minus the antlers"

#. leap/perl-Mouse/description
msgid ""
"Moose is a postmodern object system for Perl5. Moose is wonderful.\n"
"\n"
"Unfortunately, Moose has a compile-time penalty. Though significant progress "
"has been made over the years, the compile time penalty is a non-starter for "
"some very specific applications. If you are writing a command-line "
"application or CGI script where startup time is essential, you may not be "
"able to use Moose (we recommend that you instead use persistent Perl "
"executing environments like 'FastCGI' for the latter, if possible).\n"
"\n"
"Mouse is a Moose compatible object system, which aims to alleviate this "
"penalty by providing a subset of Moose's functionality.\n"
"\n"
"We're also going as light on dependencies as possible. Mouse currently has\n"
"*no dependencies* except for building/testing modules. Mouse also works "
"without XS, although it has an XS backend to make it much faster."
msgstr ""
"Moose は Perl5 に対するポストモダン型のオブジェクトシステムです。 Moose は素"
"晴らしいものです。\n"
"\n"
"残念ながら、 Moose にはコンパイル時のペナルティが存在しています。何年にもわ"
"たって大幅に進歩しているものの、コンパイル時のペナルティは特定のアプリケー"
"ションでは起動時以外にも影響を及ぼしてしまいます。起動時間を気にする必要があ"
"るコマンドラインアプリケーションや CGI スクリプトを作成している場合は、 "
"Moose を不便に感じる場合があるかもしれません (この場合は、可能であれば永続的"
"な Perl 実行環境を提供する 'FastCGI' のような仕組みをお使いください) 。\n"
"\n"
"Mouse は Moose 互換のオブジェクトシステムで、 Moose の機能のサブセットを提供"
"しながらペナルティを軽減することを目指しているものです。\n"
"\n"
"なお、できる限り依存関係が軽くなるように作っております。 Mouse では構築やテス"
"ト用のモジュールを除き、依存関係はありません。また、 Mouse は XS 無しでも動作"
"しますが、 XS を利用したほうが非常に高速に動作します。"

#. leap/perl-MouseX-ConfigFromFile/summary
msgid "An abstract Mouse role for setting attributes from a configfile"
msgstr "設定ファイルから属性を設定するための抽象化された Mouse の役割"

#. leap/perl-MouseX-ConfigFromFile/description
msgid ""
"This is an abstract role which provides an alternate constructor for "
"creating objects using parameters passed in from a configuration file. The "
"actual implementation of reading the configuration file is left to concrete "
"subroles.\n"
"\n"
"It declares an attribute 'configfile' and a class method 'new_with_config', "
"and requires that concrete roles derived from it implement the class method "
"'get_config_from_file'.\n"
"\n"
"Attributes specified directly as arguments to 'new_with_config' supercede "
"those in the configfile."
msgstr ""
"このモジュールは、設定ファイルを入力としたパラメータを利用し、オブジェクトを"
"作成するための代替コンストラクタを提供します。設定ファイルに対する実際の読み"
"込み処理は、具体的な副役割が実施します。\n"
"\n"
"このモジュールは 'configfile' 属性と、 'new_with_config' クラスメソッドを定義"
"するほか、クラスメソッド 'get_config_from_file' を実装する具体的な役割を必要"
"とします。\n"
"\n"
"'new_with_config' への引数として直接指定された属性は、設定ファイルの内容を上"
"書きします。"

#. leap/perl-MouseX-Getopt/summary
msgid "Mouse role for processing command line options"
msgstr "コマンドラインオプションを処理するための Mouse の役割"

#. leap/perl-MouseX-Getopt/description
msgid ""
"This is a role which provides an alternate constructor for creating objects "
"using parameters passed in from the command line.\n"
"\n"
"This module attempts to DWIM as much as possible with the command line "
"params by introspecting your class's attributes. It will use the name of "
"your attribute as the command line option, and if there is a type constraint "
"defined, it will configure Getopt::Long to handle the option accordingly.\n"
"\n"
"You can use the trait MouseX::Getopt::Meta::Attribute::Trait or the "
"attribute metaclass MouseX::Getopt::Meta::Attribute to get non-default "
"commandline option names and aliases.\n"
"\n"
"You can use the trait MouseX::Getopt::Meta::Attribute::Trait::NoGetopt or "
"the attribute metaclass MouseX::Getopt::Meta::Attribute::NoGetopt to have "
"'MouseX::Getopt' ignore your attribute in the commandline options.\n"
"\n"
"By default, attributes which start with an underscore are not given "
"commandline argument support, unless the attribute's metaclass is set to "
"MouseX::Getopt::Meta::Attribute. If you don't want your accessors to have "
"the leading underscore in their name, you can do this:\n"
"\n"
"     has '_foo' => (accessor => 'foo', ...);\n"
"\n"
"     has '_bar' => (reader => 'bar', ...);\n"
"\n"
"This will mean that Getopt will not handle a --foo param, but your code can "
"still call the 'foo' method.\n"
"\n"
"If your class also uses a configfile-loading role based on MouseX::"
"ConfigFromFile, such as MouseX::SimpleConfig, MouseX::Getopt's "
"'new_with_options' will load the configfile specified by the '--configfile' "
"option (or the default you've given for the configfile attribute) for you.\n"
"\n"
"Options specified in multiple places follow the following precedence order: "
"commandline overrides configfile, which overrides explicit new_with_options "
"parameters."
msgstr ""
"これは、コマンドラインから渡されたパラメータを使用してオブジェクトを作成する"
"ための代替コンストラクタを提供する役割です。\n"
"\n"
"このモジュールは、クラスの属性をイントロスペクションすることによって、コマン"
"ド・ライン・パラメーターを使用して可能な限りDBIMを試みます。コマンドラインオ"
"プションとして属性の名前を使用し、型制約が定義されている場合は、Getopt::Long"
"を設定してオプションを適切に処理します。\n"
"\n"
"trait MouseX::Getopt::Meta::Attribute::Traitまたは属性metaclass MouseX::"
"Getopt::Meta::Attributeを使用して、既定以外のコマンドラインオプションの名前と"
"エイリアスを取得できます。\n"
"\n"
"trait MouseX::Getopt::Meta::Attribute::Trait::NoGetoptまたは属性metaclass "
"MouseX::Getopt::Meta::Attribute::NoGetoptを使用して、'MouseX::Getopt'がコマン"
"ドラインオプションの属性を無視するようにできます。\n"
"\n"
"既定では、属性のメタクラスがMouseX::Getopt::Meta::Attributeに設定されていない"
"限り、アンダースコアで始まる属性にはコマンドライン引数のサポートが与えられま"
"せん。アクセサの名前に先頭の下線を付けない場合は、次のようにします。\n"
"\n"
"     has '_foo' => (accessor => 'foo', ...);\n"
"\n"
"     has '_bar' => (reader => 'bar', ...);\n"
"これは、Getoptは--fooパラメータを処理しないが、コードは'foo'メソッドを呼び出"
"すことができることを意味します。\n"
"\n"
"MouseX::SimpleConfigのように、クラスがMouseX::ConfigFromFileに基づく"
"configfile-loadingロールも使用する場合、MouseX::Getopt"
"の'new_with_options'は、'--configfile'オプションで指定されたconfigfile(または"
"configfile属性に指定された既定値)をロードします。\n"
"\n"
"複数の場所で指定されたオプションは、次の優先順位に従います。commandline "
"overrides configfile。これは明示的なnew_with_optionsパラメータを上書きしま"
"す。"

#. leap/perl-MouseX-SimpleConfig/summary
msgid "A Mouse role for setting attributes from a simple configfile"
msgstr "シンプルな設定ファイルから属性を設定するための Mouse の役割"

#. leap/perl-MouseX-SimpleConfig/description
msgid ""
"This role loads simple configfiles to set object attributes. It is based on "
"the abstract role MouseX::ConfigFromFile, and uses Config::Any to load your "
"configfile. Config::Any will in turn support any of a variety of different "
"config formats, detected by the file extension. See Config::Any for more "
"details about supported formats.\n"
"\n"
"Like all MouseX::ConfigFromFile -derived configfile loaders, this module is "
"automatically supported by the MouseX::Getopt role as well, which allows "
"specifying '-configfile' on the commandline."
msgstr ""
"この役割はシンプルな設定ファイルを読み込んで、オブジェクトの属性を設定しま"
"す。これは役割 MouseX::ConfigFromFile をベースにしていて、設定ファイルの読み"
"込みにあたっては Config::Any を利用します。 Config::Any はファイルの拡張子を"
"利用して、様々な設定形式に対応しています。対応する形式について、詳しくは "
"Config::Any をお読みください。\n"
"\n"
"MouseX::ConfigFromFile から派生したすべての設定ファイルローダと同様に、このモ"
"ジュールは MouseX::Getopt の役割によって自動的にサポートされ、コマンドライン"
"で '-configfile' を指定できるようになっています。"

#. leap/perl-MouseX-Types/summary
#. leap/perl-MouseX-Types/description
msgid "Organize your Mouse types in libraries"
msgstr "ライブラリ内への Mouse 型の統合"

#. leap/perl-MouseX-Types-Path-Class/summary
msgid "Path::Class type library for Mouse"
msgstr "Mouse 向け Path::Class タイプライブラリ"

#. leap/perl-MouseX-Types-Path-Class/description
msgid ""
"MouseX::Types::Path::Class creates common Mouse types, coercions and option "
"specifications useful for dealing with Path::Class objects as Mouse "
"attributes.\n"
"\n"
"Coercions (see Mouse::Util::TypeConstraints) are made from both 'Str' and "
"'ArrayRef' to both Path::Class::Dir and Path::Class::File objects. If you "
"have MouseX::Getopt installed, the Getopt option type (\"=s\") will be added "
"for both Path::Class::Dir and Path::Class::File."
msgstr ""
"MouseX::Types::Path::Class は汎用的な Mouse の型や強制、オプション仕様などを"
"作成するもので、 Mouse の属性として Path:Class を扱う際に便利な仕組みです。\n"
"\n"
"強制 (Mouse::Util::TypeConstraints をお読みください) は、 'Str' および "
"'ArrayRef' の両方から Path::Class:Dir および Path::Class::File オブジェクトの"
"両方を作成することができます。 MouseX::Getopt がインストールされている場合"
"は、 'Getopt' オプションタイプ (\"=s\") が Path::Class::Dir と Path::Class::"
"File の両方に追加されます。"

#. leap/perl-Mozilla-LDAP/summary
msgid "LDAP module that wraps the OpenLDAP C SDK"
msgstr "OpenLDAP C SDK をラッピングする LDAP モジュール"

#. leap/perl-Mozilla-LDAP/description
msgid "A perl LDAP module that wraps the OpenLDAP C SDK."
msgstr "OpenLDAP C SDK をラッピングする Perl LDAP モジュールです。"

#. leap/perl-MusicBrainz-DiscID/summary
msgid "Perl interface for the MusicBrainz libdiscid library"
msgstr "MusicBrainz libdiscid ライブラリへの Perl インターフェイス"

#. leap/perl-MusicBrainz-DiscID/description
msgid ""
"MusicBrainz::DiscID is a class to calculate a MusicBrainz DiscID from an "
"audio CD in the drive."
msgstr ""
"MusicBrainz::DiscID はドライブ内のオーディオ CD から、 MusicBrainz DiscID を"
"計算するクラスです。"

#. leap/perl-Nagios-Plugin/summary
msgid "A family of perl modules to streamline writing Nagios plugins"
msgstr "Nagios プラグインを直感的に作成するための Perl モジュールファミリ"

#. leap/perl-Nagios-Plugin/description
msgid ""
"Nagios::Plugin and its associated Nagios::Plugin::* modules are a family of "
"perl modules to streamline writing Nagios plugins. The main end user modules "
"are Nagios::Plugin, providing an object-oriented interface to the entire "
"Nagios::Plugin::* collection, and Nagios::Plugin::Functions, providing a "
"simpler functional interface to a useful subset of the available "
"functionality.\n"
"\n"
"The purpose of the collection is to make it as simple as possible for "
"developers to create plugins that conform the Nagios Plugin guidelines "
"(http://nagiosplug.sourceforge.net/developer-guidelines.html)."
msgstr ""
"Nagiois::Plugin と関連する Nagios::Plugin::* モジュールは、 Nagios のプラグイ"
"ンを素早く作成するために提供されている Perl モジュール集です。メインのエンド"
"ユーザ向けモジュールは Nagios::Plugin で、このモジュールは Nagios::Plugin::* "
"コレクション全体に対するオブジェクト指向のインターフェイスを提供するもので"
"す。また、 Nagios::Plugin::Functions は、左記のモジュールの機能に対するサブ"
"セットを提供する、よりシンプルなインターフェイスです。\n"
"\n"
"このコレクションは、開発者に対して Nagios Plugin ガイドラインを遵守しながら、"
"できる限りシンプルにモジュールを作成できる仕組みを提供することを目指していま"
"す。"

#. leap/perl-Net-AMQP/summary
msgid "Advanced Message Queue Protocol (de)serialization and representation"
msgstr "Advanced Message Queue Protocol (デ)シリアライズと表現"

#. leap/perl-Net-AMQP/description
msgid ""
"This module implements the frame (de)serialization and representation of the "
"Advanced Message Queue Protocol (http://www.amqp.org/). It is to be used in "
"conjunction with client or server software that does the actual TCP/IP "
"communication."
msgstr ""
"このモジュールは、 Advanced Message Queue Protocol (http://www.amqp.org/) の"
"シリアライズとデシリアライズ、および内部表現を実装するものです。実際の TCP/"
"IP 通信を行なうクライアント、もしくはサーバで利用するための仕組みです。"

#. leap/perl-Net-CIDR/summary
msgid "Manipulate IPv4/IPv6 netblocks in CIDR notation"
msgstr "CIDR 表記の IPv4/IPv6 ネットブロックの操作"

#. leap/perl-Net-CIDR/description
msgid ""
"The Net::CIDR package contains functions that manipulate lists of IP "
"netblocks expressed in CIDR notation. The Net::CIDR functions handle both "
"IPv4 and IPv6 addresses.\n"
"\n"
"The cidrvalidate() function, described below, checks that its argument is a "
"single, valid IP address or a CIDR. The remaining functions expect that "
"their parameters consist of validated IPs or CIDRs. See cidrvalidate() and "
"BUGS, below, for more information."
msgstr ""
"Net::CIDRパッケージには、CIDR表記で表現されたIPネットブロックのリストを操作す"
"る関数が含まれています。Net::CIDR関数は、IPv4アドレスとIPv6アドレスの両方を処"
"理します。\n"
"\n"
"以下に説明するcidrvalidate()関数は、その引数が単一の有効なIPアドレスまたは"
"CIDRであることをチェックします。残りの関数は、パラメータが有効なIPまたはCIDR"
"で構成されていることを前提としています。詳細については、後述のcidrvalidate() "
"と BUGSを参照してください。"

#. leap/perl-Net-CIDR-Lite/summary
msgid "Perl extension for merging IPv4 or IPv6 CIDR addresses"
msgstr "IPv4 または IPv6 の CIDR アドレスを合成するための Perl 拡張"

#. leap/perl-Net-CIDR-Lite/description
msgid ""
"Faster alternative to Net::CIDR when merging a large number of CIDR address "
"ranges. Works for IPv4 and IPv6 addresses.\n"
"\n"
" Authors:\n"
"--------     Douglas Wilson <dougw@cpan.org>"
msgstr ""
"大規模な CIDR アドレス範囲を合成する際に使用する、 Net::CIDR の高速化版です。"
"IPv4 と IPv6 の両方のアドレスで動作します。\n"
"\n"
" 作者:\n"
"--------     Douglas Wilson <dougw@cpan.org>"

#. leap/perl-Net-CIDR-Set/summary
msgid "Manipulate sets of IP addresses"
msgstr "IP アドレスの集合の操作"

#. leap/perl-Net-CIDR-Set/description
msgid ""
"'Net::CIDR::Set' represents sets of IP addresses and allows standard set "
"operations (union, intersection, membership test etc) to be performed on "
"them.\n"
"\n"
"In spite of the name it can work with sets consisting of arbitrary ranges of "
"IP addresses - not just CIDR blocks.\n"
"\n"
"Both IPv4 and IPv6 addresses are handled - but they may not be mixed in the "
"same set. You may explicitly set the personality of a set:\n"
"\n"
"  my $ip4set = Net::CIDR::Set->new({ type => 'ipv4 }, '10.0.0.0/8');\n"
"\n"
"Normally this isn't necessary - the set will guess its personality from the "
"first data that is added to it."
msgstr ""
"'Net::CIDR::Set' は IP アドレスのセットを表すクラスで、セットに対する標準的な"
"操作 (統合, 分解, 範囲内にあるかどうかのテストなど) を行なうことができま"
"す。\n"
"\n"
"名前には \"CIDR\" が含まれていますが、 CIDR ブロックではなく IP アドレスに対"
"する範囲を設定することもできます。\n"
"\n"
"IPv4 および IPv6 の両方のアドレス体系を処理することができますが、同じセット内"
"に両方を混在させることはできません。アドレスタイプを明示的に指定したい場合"
"は、下記のようにします:\n"
"\n"
"  my $ip4set = Net::CIDR::Set->new({ type => 'ipv4 }, '10.0.0.0/8');\n"
"\n"
"通常は上記のように設定する必要はありません。最初にデータを追加した際に、どち"
"らであるかを自動的に判断します。"

#. leap/perl-Net-DBus/summary
msgid "Perl extension for the DBus message system"
msgstr "DBus メッセージシステム向けの Perl 拡張"

#. leap/perl-Net-DBus/description
msgid ""
"Net::DBus provides a Perl API for the DBus message system. The DBus Perl "
"interface is currently operating against the 0.32 development version of "
"DBus, but should work with later versions too, providing the API changes "
"have not been too drastic.\n"
"\n"
"Users of this package are either typically, service providers in which case "
"the the Net::DBus::Service manpage and the Net::DBus::Object manpage modules "
"are of most relevance, or are client consumers, in which case the Net::DBus::"
"RemoteService manpage and the Net::DBus::RemoteObject manpage are of most "
"relevance."
msgstr ""
"Net::DBus は DBus メッセージシステムに対する Perl API を提供します。 DBus "
"Perl インターフェイスは、現在 DBus の開発バージョン 0.32 で動作する仕組みです"
"が、 API が大幅に変更されない限り、以降のバージョンでも動作するはずのもので"
"す。\n"
"\n"
"このパッケージは一般に、 Net::DBus::Service や Net::DBus::Object のモジュール"
"などから使われるほか、 Net::DBus::RemoteService や Net::DBus::RemoteObjectな"
"ど、クライアント側でも使用する場合があります。"

#. leap/perl-Net-DNS/summary
msgid "Perl Interface to the Domain Name System"
msgstr "ドメインネームシステムに対する Perl インターフェイス"

#. leap/perl-Net-DNS/description
msgid ""
"Net::DNS is a collection of Perl modules that act as a Domain Name System "
"(DNS) resolver. It allows the programmer to perform DNS queries that are "
"beyond the capabilities of \"gethostbyname\" and \"gethostbyaddr\".\n"
"\n"
"The programmer should be somewhat familiar with the format of a DNS packet "
"and its various sections. See RFC 1035 or DNS and BIND (Albitz & Liu) for "
"details."
msgstr ""
"Net::DNS はドメインネームシステム (DNS) の解決器として動作する Perl モジュー"
"ルです。プログラマに対して DNS の問い合わせ機能を提供し、 'gethostbyname' や "
"'gethostbyaddr' が提供する以上のことを行なうことができます。\n"
"\n"
"なお、プログラムを記述する際には DNS パケットの書式とセクションに関する幾分か"
"の知識が必要となります。詳しくは RFC 1035 または DNS and BIND (Albitz & Liu "
"著作) をお読みください。"

#. leap/perl-Net-DNS-Resolver-Mock/summary
msgid "Mock a DNS Resolver object for testing"
msgstr "テスト用の擬似 DNS リゾルバオブジェクト"

#. leap/perl-Net-DNS-Resolver-Mock/description
msgid ""
"A subclass of Net::DNS::Resolver which parses a zonefile for it's data "
"source. Primarily for use in testing."
msgstr ""
"データソースとしてゾーンファイルを処理することのできる、 Net::DNS::Resolver "
"のサブクラスです。主にテスト用に使用します。"

#. leap/perl-Net-DNS-Resolver-Programmable/summary
msgid "Programmable Dns Resolver Class for Offline"
msgstr "オフライン環境用のプログラマブル DNS リゾルバクラス"

#. leap/perl-Net-DNS-Resolver-Programmable/description
msgid ""
"*Net::DNS::Resolver::Programmable* is a *Net::DNS::Resolver* descendant "
"class that allows a virtual DNS to be emulated instead of querying the real "
"DNS. A set of static DNS records may be supplied, or arbitrary code may be "
"specified as a means for retrieving DNS records, or even generating them on "
"the fly."
msgstr ""
"*Net::DNS::Resolver::Programmable* は *Net::DNS::Resolver* の子クラスで、実際"
"の DNS への問い合わせではなく、仮想的な DNS サーバに問い合わせを行うことがで"
"きる仕組みです。静的な DNS レコードのセットを設定することができ、 DNS レコー"
"ドを取得するための任意のコードを設定できますし、それらをその場で変更すること"
"もできます。"

#. leap/perl-Net-Daemon/summary
msgid "Perl extension for portable daemons"
msgstr "可搬性のあるデーモンを作成するための Perl 拡張"

#. leap/perl-Net-Daemon/description
msgid ""
"Net::Daemon is an abstract base class for implementing portable server "
"applications in a very simple way. The module is designed for Perl 5.005 and "
"threads, but can work with fork() and Perl 5.004.\n"
"\n"
"The Net::Daemon class offers methods for the most common tasks a daemon "
"needs: Starting up, logging, accepting clients, authorization, restricting "
"its own environment for security and doing the true work. You only have to "
"override those methods that aren't appropriate for you, but typically "
"inheriting will safe you a lot of work anyways."
msgstr ""
"Net::Daemon は可搬性のあるサーバアプリケーションを簡単に開発できるようにする"
"ための抽象ベースクラスです。このモジュールは Perl 5.005 とスレッドを利用して"
"設計されていますが、 fork() や Perl 5.004 の環境でも動作します。\n"
"\n"
"Net::Daemon はデーモンの動作に必要なほとんどの機能を提供します。たとえば起動"
"やログ記録、クライアントの受け付けや認証、セキュリティ側の要件による環境制限"
"などに対応しています。これらのメソッドが不適切な場合はそれらをオーバーライド"
"することもできますが、一般的にはこれらの機能を派生させて使用するのが安全で"
"す。"

#. leap/perl-Net-Domain-TLD/summary
msgid "Work with TLD names"
msgstr "TLD 名の処理"

#. leap/perl-Net-Domain-TLD/description
msgid ""
"  The purpose of this module is to provide user with current list of   "
"available top level domain names including new ICANN additions and ccTLDs   "
"Currently TLD definitions have been acquired from the following sources:\n"
"\n"
"  http://www.icann.org/tlds/   http://www.dnso.org/constituency/gtld/gtld."
"html   http://www.iana.org/cctld/cctld-whois.htm   https://www.iana.org/"
"domains/root/db"
msgstr ""
"  このモジュールの目的は、トップレベルドメインの最新の一覧を提供することにあ"
"ります。新たに ICANN に追加されたトップレベルドメインや、 ccTLD も含まれてい"
"ます。現時点では、 TLD を下記の情報源から取得しています:\n"
"\n"
"  http://www.icann.org/tlds/   http://www.dnso.org/constituency/gtld/gtld."
"html   http://www.iana.org/cctld/cctld-whois.htm   https://www.iana.org/"
"domains/root/db"

#. leap/perl-Net-Dropbox-API/summary
#. leap/perl-Net-Dropbox-API/description
msgid "A dropbox API interface"
msgstr "DropBox API インターフェイス"

#. leap/perl-Net-HTTP/summary
msgid "Low-level HTTP connection (client)"
msgstr "低レベル HTTP 接続 (クライアント)"

#. leap/perl-Net-HTTP/description
msgid ""
"The 'Net::HTTP' class is a low-level HTTP client. An instance of the 'Net::"
"HTTP' class represents a connection to an HTTP server. The HTTP protocol is "
"described in RFC 2616. The 'Net::HTTP' class supports 'HTTP/1.0' and "
"'HTTP/1.1'.\n"
"\n"
"'Net::HTTP' is a sub-class of one of 'IO::Socket::IP' (IPv6+IPv4), 'IO::"
"Socket::INET6' (IPv6+IPv4), or 'IO::Socket::INET' (IPv4 only). You can mix "
"the methods described below with reading and writing from the socket "
"directly. This is not necessary a good idea, unless you know what you are "
"doing."
msgstr ""
"'Net::HTTP' クラスは低レベルの HTTP クライアントです。 'Net::HTTP' クラスのイ"
"ンスタンスは、 HTTP サーバへの接続を表すものになります。 HTTP プロトコルは "
"RFC 2616 で規定されるもので、 'HTTP/1.0' と 'HTTP/1.1' にそれぞれ対応していま"
"す。\n"
"\n"
"'Net::HTTP' は 'IO::Socket::IP' (IPv6+IPv4), 'IO::Socket::"
"INET6' (IPv6+IPv4), or 'IO::Socket::INET' (IPv4 のみ) のいずれかのサブクラス"
"です。そのため、ソケットに対して直接読み書きを行なうような処理を利用すること"
"もできます。これらの機能は、それが何を意味するのかをよく理解しない限り、使用"
"しないことをお勧めします。"

#. leap/perl-Net-HTTPServer/summary
msgid "A simple perl Http Server"
msgstr "シンプルな Perl HTTP サーバ"

#. leap/perl-Net-HTTPServer/description
msgid ""
"Net::HTTPServer basically turns a CGI script into a stand alone server. "
"Useful for temporary services, mobile/local servers, or embedding an HTTP "
"server into another program."
msgstr ""
"Net::HTTPServer は、基本的に CGI スクリプトを単独のサーバにすることのできるも"
"のです。一時的なサービスやモバイル／ローカルサーバ、他のプログラム内での内蔵 "
"HTTP サーバとして便利です。"

#. leap/perl-Net-IDN-Encode/summary
msgid "Internationalizing Domain Names in Applications (IDNA)"
msgstr ""
"Internationalized Domain Names in Applications (IDNA; アプリケーション内国際"
"ドメイン名) サポート"

#. leap/perl-Net-IDN-Encode/description
msgid ""
"This module provides an easy-to-use interface for encoding and decoding "
"Internationalized Domain Names (IDNs).\n"
"\n"
"IDNs use characters drawn from a large repertoire (Unicode), but IDNA allows "
"the non-ASCII characters to be represented using only the ASCII characters "
"already allowed in so-called host names today (letter-digit-hyphen, '/[A-"
"Z0-9-]/i').\n"
"\n"
"Use this module if you just want to convert domain names (or email "
"addresses), using whatever IDNA standard is the best choice at the moment.\n"
"\n"
"You should be familiar with Unicode support in perl, as this module expects "
"correctly encoded input. See perlunitut, perluniintro and perlunicode for "
"details."
msgstr ""
"このモジュールは、国際ドメイン名 (IDN) をエンコードしたりデコードしたりするた"
"めの使いやすいインターフェイスです。\n"
"\n"
"IDN は様々なレパートリーから構成される文字 (Unicode) を使用していますが、 "
"IDNA は現代のホスト名に対してすでに許可されている文字 (英字／数字／ハイフン: "
"'/[A-Z0-9-]/i') のみを利用して、非 ASCII 文字を表現するように規定していま"
"す。\n"
"\n"
"ドメイン名 (またはメールアドレス) を変換したい場合は、このモジュールをお使い"
"ください。それは、 IDNA 標準が現時点では最適の選択肢であるためです。\n"
"\n"
"このモジュールは正しくエンコードされた文字を期待する構造から、 Perl の "
"Unicode について詳しく知っていることが前提とになります。詳しくは perlunitut, "
"perluniintro, perlunicode の各マニュアルページをお読みください。"

#. leap/perl-Net-IDN-Nameprep/summary
msgid "Stringprep Profile for Internationalized Domain Names (RFC 3491)"
msgstr "国際ドメイン名 (RFC 3491) 向け Stringprep プロファイル"

#. leap/perl-Net-IDN-Nameprep/description
msgid ""
"This module implements the _nameprep_ specification, which describes how to "
"prepare internationalized domain name (IDN) labels in order to increase the "
"likelihood that name input and name comparison work in ways that make sense "
"for typical users throughout the world. Nameprep is a profile of the "
"stringprep protocol and is used as part of a suite of on-the-wire protocols "
"for internationalizing the Domain Name System (DNS)."
msgstr ""
"このモジュールは _nameprep_ 仕様を実装するもので、世界中の一般ユーザに対し"
"て、ドメイン名の入力や比較などの機能を追加する、国際化ドメイン名 (IDN) の機能"
"を提供するものです。 nameprep は stringprep プロトコルのプロファイルであり、"
"ドメイン名システム (DNS) の国際化のためのワイヤレベルのプロトコルのスイートと"
"して使用します。"

#. leap/perl-Net-INET6Glue/summary
msgid "Make common modules IPv6 ready by hotpatching"
msgstr "ホットパッチによって一般的なモジュールを IPv6 対応にするモジュール"

#. leap/perl-Net-INET6Glue/description
msgid ""
"the Net::INET6Glue manpage is a collection of modules to make common modules "
"IPv6 ready by hotpatching them.\n"
"\n"
"Unfortunatly the current state of IPv6 support in perl is that no IPv6 "
"support is in the core and that a lot of important modules (like the Net::"
"FTP manpage, the Net::SMTP manpage, the LWP manpage,...) do not support IPv6 "
"even if the modules for IPv6 sockets like the Socket6 manpage, the IO::"
"Socket::IP manpage or the IO::Socket::INET6 manpage are available.\n"
"\n"
"This module tries to mitigate this by hotpatching. Currently the following "
"submodules are available: \n"
"* the Net::INET6Glue::INET_is_INET6 manpage\n"
"\n"
"  Makes the IO::Socket::INET manpage behave like the IO::Socket::IP "
"manpage   (with fallback to like the IO::Socket::INET6 manpage), especially "
"make it   capable to create IPv6 sockets. This makes the LWP manpage, the "
"Net::SMTP   manpage and others IPv6 capable. \n"
"* the Net::INET6Glue::FTP manpage\n"
"\n"
"  Hotpatches the Net::FTP manpage to support EPRT and EPSV commands which   "
"are needed to deal with FTP over IPv6. Also loads the   Net::INET6Glue::"
"INET_is_INET6 manpage."
msgstr ""
"Net::INET6Glue はホットパッチを利用することによって、一般的なモジュールを "
"IPv6 対応にするためのモジュール集です。\n"
"\n"
"不幸にも、現状 Perl における IPv6 のサポートは中枢には取り入れられておらず、 "
"Socket6, IO::Socket::IP, IO::Socket::INET6 など、 IPv6 対応のモジュールが存在"
"しているにも関わらず、主要なモジュールの多く (Net::FTP や Net::SMTP, LWP な"
"ど) は対応していません。\n"
"\n"
"このモジュールは、ホットパッチの仕組みによってこれを緩和しようとする試みで"
"す。現時点では下記のサブモジュールを利用することができます:\n"
"* Net::INET6Glue::INET_is_INET6 \n"
"\n"
"  IO::Socket::INET を IO::Socket::IP のように動作させ (IO::Socket::INET6 等へ"
"のフォールバック機能もあります) 、特に IPv6 ソケットへの対応を行なうことがで"
"きる仕組みです。これにより、 LWP, Net::SMTP などを IPv6 対応にすることができ"
"ます。\n"
"* Net::INET6Glue::FTP\n"
"\n"
"  Net::FTP を、 IPv6 に対応するのに必要な EPRT, EPSV コマンドに対応させま"
"す。 Net::INET6Glue::INET_is_INET6 モジュールも読みこまれます。"

#. leap/perl-Net-IP/summary
msgid "Allows easy manipulation of IPv4 and IPv6 addresses"
msgstr "IPv4/IPv6 アドレスの簡単な操作"

#. leap/perl-Net-IP/description
msgid ""
"This is the Net::IP module, designed to allow easy manipulation of IPv4 and "
"IPv6 addresses."
msgstr ""
"これは Net::IP モジュールと呼ばれ、 IPv4 および IPv6 アドレスについて 処理を"
"簡単に行なうことができるようにするものです。"

#. leap/perl-Net-IPv4Addr/summary
msgid "Net::IPv4Addr Module for Perl"
msgstr "Perl 向け Net::IPv4Addr モジュール"

#. leap/perl-Net-IPv4Addr/description
msgid ""
"Net::IPv4Addr provides functions for parsing IPv4 addresses both in "
"traditional address/netmask format and in the new CIDR format. There are "
"also methods for calculating the network and broadcast address and also to "
"see check if a given address is in a specific network.\n"
"\n"
"Authors:\n"
"--------     Francis J. Lacoste <francis.lacoste@iNsu.COM>"
msgstr ""
"Net::IPv4Addr は、 IPv4 アドレスの処理について、従来の \"アドレス\" /\"ネット"
"マスク\" 形式のほか、新しい CIDR 形式にも対応したモジュールです。 また、ネッ"
"トワークアドレスやブロードキャストアドレス、および 指定したアドレスが指定した"
"ネットワーク内に存在するかどうかを調べる機能も 備えています。\n"
"\n"
"作者:\n"
"--------     Francis J. Lacoste <francis.lacoste@iNsu.COM>"

#. leap/perl-Net-Ident/summary
msgid "lookup the username on the remote end of a TCP/IP connection"
msgstr "TCP/IP 接続の相手に対してユーザ名を検索するモジュール"

#. leap/perl-Net-Ident/description
msgid ""
"You can either use the simple interface, which does one ident lookup at a "
"time, or use the asynchronous interface to perform (possibly) many "
"simultaneous lookups, or simply continue serving other things while the "
"lookup is proceeding."
msgstr ""
"ident プロトコルによる参照機能を提供したり、複数の方法による参照を同時に行"
"なったり、参照処理中に他の処理を継続したりすることのできる、シンプルなイン"
"ターフェイスです。"

#. leap/perl-Net-Jabber/summary
msgid "Jabber Perl Library"
msgstr "Jabber Perl ライブラリ"

#. leap/perl-Net-Jabber/description
msgid ""
"Net::Jabber is a convenient tool to use for any perl script that would like "
"to utilize the Jabber Instant Messaging protocol. While not a client in and "
"of itself, it provides all of the necessary back-end functions to make a CGI "
"client or command-line perl client feasible and easy to use. Net::Jabber is "
"a wrapper around the rest of the official Net::Jabber::xxxxxx packages.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Ryan Eatmon <reatmon@ti.com>"
msgstr ""
"Net::Jabber は Jabber インスタントメッセージングプロトコルを扱う  Perl スクリ"
"プトを作成するためのツールです。 これ自身をクライアントとして使用してログイン"
"／ログオフすることができるだけでなく、 CGI クライアントやコマンドライン Perl "
"クライアントを作成するのに必要な、 全てのバックエンド機能を備えた十分かつ使い"
"やすいツールです。 Net::Jabber は、残りの公式 Net::Jabber::xxxxxx パッケージ"
"に 対するラッパーです。\n"
"\n"
"\n"
"\n"
"作者:\n"
"--------     Ryan Eatmon <reatmon@ti.com>"

#. leap/perl-Net-LibIDN/summary
msgid "Net::LibIDN Perl module"
msgstr "Net::LibIDN Perl モジュール"

#. leap/perl-Net-LibIDN/description
msgid ""
"This module provides Perl bindings for GNU Libidn by Simon Josefsson (http://"
"www.gnu.org/software/libidn/) in way that was heavily inspired by PHP "
"bindings for the same library done by Turbo Fredriksson (http://php- idn."
"bayour.com/).\n"
"\n"
"Authors:\n"
"--------     Thomas Jacob, http://internet24.de"
msgstr ""
"このモジュールは Simon Josefsson 氏が開発している GNU Libidn (http://www.gnu."
"org/software/libidn/) に対する Perl バインディングで、 Turbo Fredriksson 氏が"
"開発している PHP バインディング (http://php-idn.bayour.com/) を大きなヒントに"
"して開発されています。\n"
"\n"
"作者:\n"
"--------     Thomas Jacob, http://internet24.de"

#. leap/perl-Net-Netmask/summary
msgid "Parse, Manipulate and Lookup Ip Network Blocks"
msgstr "IP ネットワークブロックを処理／操作／参照するモジュール"

#. leap/perl-Net-Netmask/description
msgid ""
"Net::Netmask parses and understands IPv4 CIDR blocks. It's built with an "
"object-oriented interface. Nearly all functions are methods that operate on "
"a Net::Netmask object.\n"
"\n"
"There are methods that provide the nearly all bits of information about a "
"network block that you might want.\n"
"\n"
"There are also functions to put a network block into a table and then later "
"lookup network blocks by IP address in that table. There are functions to "
"turn a IP address range into a list of CIDR blocks. There are functions to "
"turn a list of CIDR blocks into a list of IP addresses.\n"
"\n"
"There is a function for sorting by text IP address."
msgstr ""
"Net::Netmask は IPv4 CIDR ブロックを処理して認識します。このモジュールはオブ"
"ジェクト指向のインターフェイスを持っていて、ほぼすべての関数を Net::Netmask "
"オブジェクトのメソッドとして呼び出すことができます。\n"
"\n"
"本モジュールは、ネットワークブロックに関する情報処理について、必要なものほぼ"
"すべてがそろっています。\n"
"\n"
"本モジュールでは上記以外にも、ネットワークブロックを表形式にして、後から IP "
"アドレスと突き合わせるようなこともできます。また、アドレスの範囲を CIDR ブ"
"ロックのリストに変換したり、その逆を行なったりすることもできます。"

#. leap/perl-Net-OAuth/summary
#. leap/perl-Net-OAuth/description
msgid "OAuth 1.0 for Perl"
msgstr "Perl 向け OAuth 1.0"

#. leap/perl-Net-OpenID-Common/summary
msgid "Libraries shared between Net::OpenID::Consumer and Net::OpenID::Server"
msgstr ""
"Net::OpenID::Consumer と Net::OpenID::Server の間で共有されるライブラリ"

#. leap/perl-Net-OpenID-Common/description
msgid ""
"The Consumer and Server implementations share a few libraries which live "
"with this module. This module is here largely to hold the version number and "
"this documentation, though it also incorporates some utility functions "
"inherited from previous versions of Net::OpenID::Consumer."
msgstr ""
"コンシューマ／サーバの実装ではいくつかのライブラリを共有しますが、このモ"
"ジュールでそれを行なうことができます。このモジュールは主にバージョン番号とド"
"キュメンテーションを保持しますが、 Net::OpenID::Consumer の以前のバージョンか"
"ら派生されるいくつかのユーティリティ関数も統合されています。"

#. leap/perl-Net-OpenID-Consumer/summary
msgid "Library for consumers of OpenID identities"
msgstr "OpenID 認証のコンシューマライブラリ"

#. leap/perl-Net-OpenID-Consumer/description
msgid ""
"This is the Perl API for (the consumer half of) OpenID, a distributed "
"identity system based on proving you own a URL, which is then your identity. "
"More information is available at:\n"
"\n"
"  http://openid.net/"
msgstr ""
"これは OpenID の (コンシューマ側の) Perl API です。 URL の所有者を識別するこ"
"とをベースにした分散型認証システムで、その URL がそのまま識別子になります。詳"
"しい情報は下記をお読みください:\n"
"\n"
"  http://openid.net/"

#. leap/perl-Net-OpenStack-Compute/summary
msgid "Bindings for the OpenStack Compute API"
msgstr "OpenStack Compute API 向けバインディング"

#. leap/perl-Net-OpenStack-Compute/description
msgid ""
"This class is an interface to the OpenStack Compute API. Also see the the "
"oscompute manpage command line tool."
msgstr ""
"このクラスは OpenStack Compute API に対するインターフェイスです。 oscompute "
"コマンドラインツールも併せてご覧ください。"

#. leap/perl-Net-Patricia/summary
msgid "Patricia Trie perl module for fast IP address lookups"
msgstr "高速な IP アドレス参照のための Patricia Trie Perl モジュール"

#. leap/perl-Net-Patricia/description
msgid ""
"This module uses a Patricia Trie data structure to quickly perform IP "
"address prefix matching for applications such as IP subnet, network or "
"routing table lookups. The data structure is based on a radix tree using a "
"radix of two, so sometimes you see patricia implementations called \"radix\" "
"as well. The term \"Trie\" is derived from the word \"retrieval\" but is "
"pronounced like \"try\". Patricia stands for \"Practical Algorithm to "
"Retrieve Information Coded as Alphanumeric\", and was first suggested for "
"routing table lookups by Van Jacobsen. Patricia Trie performance "
"characteristics are well-known as it has been employed for routing table "
"lookups within the BSD kernel since the 4.3 Reno release.\n"
"\n"
"The BSD radix code is thoroughly described in \"TCP/IP Illustrated, Volume "
"2\" by Wright and Stevens and in the paper ``A Tree-Based Packet Routing "
"Table for Berkeley Unix'' by Keith Sklower."
msgstr ""
"このモジュールは Patricia Trie データ構造を利用して、素早く IP アドレスを参照"
"し、 IP サブネットやネットワーク、ルーティングテーブルを見つけ出す処理を行な"
"います。データ構造は 2 を基数とした基数木と呼ばれる構造で、 patricia 実装自体"
"を \"Radix\" (基数) と呼ぶ場合もあります。また、 \"Trie\" とは \"retrieval"
"\" (取得) という言葉から生まれた用語ですが、 \"try\" (トライ) と発音します。 "
"Patricia は \"Practical Algorithm to Retrieve Information Coded as "
"Alphanumeric\" (英数字でコーディングされた情報を取得するための現実的なアルゴ"
"リズム) の略で、 Van Jacobsen 氏がルーティングテーブルの参照のために考案した"
"ものです。 Patricia Trie の性能は、 BSD カーネルのバージョン 4.3 Reno リリー"
"ス以降に含まれている、ルーティングテーブルの参照機能でよく知られた存在になっ"
"ています。"

#. leap/perl-Net-Pcap/summary
msgid "Interface to pcap LBL packet capture library"
msgstr "pcap LBL パケットキャプチャライブラリに対するインターフェイス"

#. leap/perl-Net-Pcap/description
msgid ""
"Net::Pcap is a Perl binding to the LBL pcap(3) library. The README for "
"libpcap describes itself as: \"a system-independent interface for user-level "
"packet capture.  libpcap provides a portable framework for low-level network "
"monitoring.  Applications include network statistics collection, security "
"monitoring, network debugging, etc.\""
msgstr ""
"Net::Pcap は LBL pcap(3) ライブラリに対する Perl バインディングです。 "
"libpcap 内の README では、 libpcap 自身を下記のように説明しています: \"ユーザ"
"レベルのパケットキャプチャを実施する、システムに依存しないライブラリです。 "
"libpcap では低レベルなネットワーク監視に対して、可搬性のあるフレームワークを"
"提供しています。ネットワークの統計情報やセキュリティの監視、ネットワークの不"
"具合調査などを実施するアプリケーション向けの仕組みです。\""

#. leap/perl-Net-SMTP-SSL/summary
msgid "SSL support for Net::SMTP"
msgstr "Net::SMTP 向け SSL サポート"

#. leap/perl-Net-SMTP-SSL/description
msgid ""
"Implements the same API as Net::SMTP, but uses IO::Socket::SSL for its "
"network operations. Due to the nature of 'Net::SMTP''s 'new' method, it is "
"not overridden to make use of a default port for the SMTPS service. Perhaps "
"future versions will be smart like that. Port '465' is usually what you "
"want, and it's not a pain to specify that.\n"
"\n"
"For interface documentation, please see Net::SMTP."
msgstr ""
"Net::SMTP と同じ API を実装しているものですが、ネットワーク操作についてはIO::"
"Socket::SSL を使用しています。 'Net::SMTP' の 'new' メソッドでは SMTPSサービ"
"スのポート番号に対する既定値を設定することはできませんが、将来のバージョンで"
"賢く設定できるようになる予定です。通常は SMTPS サービスに対して'465' を設定し"
"て使用します。"

#. leap/perl-Net-SNMP/summary
msgid "Object oriented interface to SNMP"
msgstr "SNMP に対するオブジェクト指向のインターフェイス"

#. leap/perl-Net-SNMP/description
msgid ""
"The Net::SNMP module abstracts the intricate details of the Simple Network "
"Management Protocol by providing a high level programming interface to the "
"protocol. Each Net::SNMP object provides a one-to-one mapping between a Perl "
"object and a remote SNMP agent or manager. Once an object is created, it can "
"be used to perform the basic protocol exchange actions defined by SNMP.\n"
"\n"
"Authors:\n"
"--------     David M. Town <dtown@fore.com>"
msgstr ""
"Net::SNMP モジュールは、複雑な仕様である Simple Network Management Protocol "
"(SNMP)に対して、高レベルなプログラミングインターフェイスを提供する抽象モ"
"ジュールです。それぞれの Net::SNMP オブジェクトは、リモートの SNMP エージェン"
"トやマネージャと、Perl オブジェクトとの間で、一対一のマッピング機能を提供しま"
"す。オブジェクトを作成すると、 SNMP で定義されている基本的なプロトコル機能を"
"利用できるようになります。\n"
"\n"
"作者:\n"
"--------     David M. Town <dtown@fore.com>"

#. leap/perl-Net-SSH2/summary
msgid "Support for the SSH 2 protocol via libssh2"
msgstr "libssh 経由で SSH 2 プロトコルに対応するモジュール"

#. leap/perl-Net-SSH2/description
msgid ""
"Net::SSH2 is a Perl interface to the libssh2 (http://www.libssh2.org) "
"library. It supports the SSH2 protocol (there is no support for SSH1) with "
"all of the key exchanges, ciphers, and compression of libssh2.\n"
"\n"
"Even if the module can be compiled and linked against very old versions of "
"the library, nothing below 1.5.0 should really be used (older versions were "
"quite buggy and unreliable) and version 1.7.0 or later is recommended."
msgstr ""
"Net::SSH2 は libssh2 (http://www.libssh2.org) ライブラリに対する Perl のイン"
"ターフェイスです。 SSH2 プロトコルに対応 (SSH1 には対応していません) し、 "
"libssh2 が提供する鍵の交換や暗号化、圧縮などに対応しています。\n"
"\n"
"このモジュールは、非常に古いバージョンのライブラリを利用することでもコンパイ"
"ルおよびリンクすることができますが、バージョン 1.5.0 以下のものは使用すべきで"
"はなく (古いバージョンにはバグが多く信頼性に欠けるため) 、 1.7.0 およびそれ以"
"降のバージョンをお勧めしています。"

#. leap/perl-Net-SSLGlue/summary
msgid "Add/Extend Ssl Support for Common Perl Modules"
msgstr "汎用の Perl モジュール向けに SSL 対応を追加／拡張するモジュール"

#. leap/perl-Net-SSLGlue/description
msgid ""
"Some commonly used perl modules don't have SSL support at all, even if the "
"protocol supports it. Others have SSL support, but most of them don't do "
"proper checking of the server's certificate.\n"
"\n"
"The 'Net::SSLGlue::*' modules try to add SSL support or proper certificate "
"checking to these modules. Currently support for the following modules is "
"available: \n"
"* Net::SMTP - add SSL from beginning or using STARTTLS \n"
"* Net::POP3 - add SSL from beginning or using STLS \n"
"* Net::FTP  - add SSL and IPv6 support to Net::FTP \n"
"* Net::LDAP - add proper certificate checking \n"
"* LWP - add proper certificate checking for older LWP versions\n"
"\n"
"There is also a Net::SSLGlue::Socket package which combines ssl and non-ssl "
"and ipv6 capabilities to make it easier to enhance modules based on IO::"
"Socket::INET."
msgstr ""
"プロトコル側では対応しているにもかかわらず、一般的に使用される Perl モジュー"
"ルには SSL のサポートが全く無いものがあります。モジュールによっては SSL に対"
"応しているものもありますが、それらのうちの多くはサーバの証明書を正しくチェッ"
"クしていません。\n"
"\n"
"'Net::SSLGlue::*' モジュールは、これらのモジュールに対して SSL のサポートと、"
"適切な証明書チェックの機能を追加します。現時点で対応するモジュールは下記のと"
"おりです:\n"
"* Net::SMTP - 接続当初からの SSL の有効化、もしくは STARTTLS を利用した暗号化"
"接続に対応\n"
"* Net::POP3 - 接続当初からの SSL の有効化、もしくは STLS を利用した暗号化接続"
"に対応\n"
"* Net::FTP  - Net::FTP に対する SSL と IPv6 サポートの追加に対応\n"
"* Net::LDAP - 正しい証明書かどうかのチェック機能の追加に対応\n"
"* LWP - 古いバージョンの LWP に対して正しい証明書かどうかのチェック機能の追加"
"に対応\n"
"\n"
"SSL 有りと無し、そして IPv6 機能を組み合わせた、 IO::Socket::INET をベースに"
"モジュールを拡張した Net::SSLGlue::Socket パッケージも用意されています。"

#. leap/perl-Net-SSLeay/summary
msgid "Perl extension for using OpenSSL"
msgstr "OpenSSL を使用する Perl 拡張"

#. leap/perl-Net-SSLeay/description
msgid ""
"Net::SSLeay module contains perl bindings to openssl (http://www.openssl."
"org) library. Net::SSLeay module basically comprise of:     High level "
"functions for accessing web servers (by using HTTP/HTTPS)     Low level API "
"(mostly mapped 1:1 to openssl's C functions)     Convenience functions "
"(related to low level API but with more perl friendly interface)"
msgstr ""
"Net::SSLeay モジュールには、 openssl (http://www.openssl.org) ライブラリに対"
"する Perl バインディングが含まれています。 Net:SSLeay モジュールには、主に下"
"記のような機能があります:     Web サーバなどに (HTTP/HTTPS を利用して) アクセ"
"スするための高レベルな関数     低レベルな API (openssl の C 言語関数に対する"
"ほぼ 1:1 のマッピング)     その他の便利な関数 (低レベルな API に関連するもの"
"の、より Perl に近いインターフェイス)"

#. leap/perl-Net-Server/summary
msgid "Extensible, general Perl server engine"
msgstr "拡張性のある汎用 Perl サーバエンジン"

#. leap/perl-Net-Server/description
msgid ""
"'Net::Server' is an extensible, generic Perl server engine.\n"
"\n"
"'Net::Server' attempts to be a generic server as in 'Net::Daemon' and "
"'NetServer::Generic'. It includes with it the ability to run as an inetd "
"process ('Net::Server::INET'), a single connection server ('Net::Server' or "
"'Net::Server::Single'), a forking server ('Net::Server::Fork'), a preforking "
"server which maintains a constant number of preforked children ('Net::"
"Server::PreForkSimple'), or as a managed preforking server which maintains "
"the number of children based on server load ('Net::Server::PreFork'). In all "
"but the inetd type, the server provides the ability to connect to one or to "
"multiple server ports.\n"
"\n"
"The additional server types are made possible via \"personalities\" or sub "
"classes of the 'Net::Server'. By moving the multiple types of servers out of "
"the main 'Net::Server' class, the 'Net::Server' concept is easily extended "
"to other types (in the near future, we would like to add a \"Thread\" "
"personality).\n"
"\n"
"'Net::Server' borrows several concepts from the Apache Webserver. 'Net::"
"Server' uses \"hooks\" to allow custom servers such as SMTP, HTTP, POP3, "
"etc. to be layered over the base 'Net::Server' class. In addition the 'Net::"
"Server::PreFork' class borrows concepts of min_start_servers, max_servers, "
"and min_waiting servers. 'Net::Server::PreFork' also uses the concept of an "
"flock serialized accept when accepting on multiple ports (PreFork can choose "
"between flock, IPC::Semaphore, and pipe to control serialization)."
msgstr ""
"'Net::Server' は拡張性に富んだ汎用の Perl サーバエンジンです。\n"
"\n"
"'Net::Server' は 'Net::Daemon' や 'NetServer::Generic' のような汎用的なサーバ"
"となるように作られています。このほかにも inetd のプロセスとして動作する機能"
"('Net::Server::INET') や、単一接続のサーバ ('Net::Server' または 'Net::"
"Server::Single') 、 fork を使用するサーバ ('Net::Server::Fork') や子プロセス"
"を一定数だけ確保するような、 prefork 型のサーバ ('Net::Server::"
"PreForkSimple') にも対応していますし、サーバの負荷に応じて子プロセス数を制御"
"するような prefork 型のサーバ ('Net::Server::PreFork') にも対応しています。"
"inetd のサーバタイプを除き、それぞれのサーバは 1 つまたは複数の接続を受け入れ"
"ることができるほか、複数のサーバポートにも対応しています。\n"
"\n"
"その他のサーバタイプについては、 \"personalities\" や 'Net::Server' のサブク"
"ラス化などの方法で追加することができます。また、メインとなる 'Net::Server' ク"
"ラスから多数のサーバタイプを分離したため、 'Net::Server' 自身は他のタイプに対"
"して容易に適応できる仕組みになっています (近い将来、 \"Thread\" (スレッド) 型"
"のサーバにも対応予定です) 。\n"
"\n"
"'Net::Server' は Apache Web サーバからいくつかの考え方を取り入れていま"
"す。'Net::Server' は \"フック\" と呼ばれる仕組みを利用して、 SMTP, HTTP, "
"POP3 など、多数のカスタムサーバを構築できるようになっています。これに加えて "
"'Net::Server::PreFork' クラスでは、 min_start_servers, max_servers, "
"min_waiting の考え方も取り入れています。 'Net::Server::PreFork' では、 flock "
"による順序化された受信にも対応し、複数のポートからのアクセスを受け入れること"
"ができます (Prefork ではflock, IRC::Sepaphore, パイプの中から順序化を選択でき"
"ます) 。"

#. leap/perl-Net-TFTP/summary
msgid "TFTP Client class"
msgstr "TFTP クライアントクラス"

#. leap/perl-Net-TFTP/description
msgid ""
"'Net::TFTP' is a class implementing a simple _Trivial File Transfer "
"Protocol_ client in Perl as described in RFC1350. 'Net::TFTP' also supports "
"the TFTP Option Extension (as described in RFC2347), with the following "
"options\n"
"\n"
" RFC2348 Blocksize Option"
msgstr ""
"'Net::TFTP' は RFC1350 で規定されているシンプルな _Trivial File Transfer "
"Protocol_ クライアントを実装するクラスです。 'Net::TFTP' では、 TFTP オプショ"
"ン拡張 (RFC2347) にも対応していて、下記のオプションを利用することができま"
"す:\n"
"\n"
" RFC2348 ブロックサイズオプション"

#. leap/perl-Net-Telnet/summary
msgid "interact with TELNET port or other TCP ports"
msgstr "TELNET ポートまたはその他の TCP ポートを利用した通信"

#. leap/perl-Net-Telnet/description
msgid ""
"Net::Telnet allows you to make client connections to a TCP port and do "
"network I/O, especially to a port using the TELNET protocol. Simple I/O "
"methods such as print, get, and getline are provided. More sophisticated "
"interactive features are provided because connecting to a TELNET port "
"ultimately means communicating with a program designed for human "
"interaction. These interactive features include the ability to specify a "
"time-out and to wait for patterns to appear in the input stream, such as the "
"prompt from a shell. IPv6 support is available when using perl 5.14 or later "
"(see 'family()'.\n"
"\n"
"Other reasons to use this module than strictly with a TELNET port are: \n"
"* *\n"
"\n"
"  You're not familiar with sockets and you want a simple way to make "
"client   connections to TCP services. \n"
"* *\n"
"\n"
"  You want to be able to specify your own time-out while connecting,   "
"reading, or writing. \n"
"* *\n"
"\n"
"  You're communicating with an interactive program at the other end of "
"some   socket or pipe and you want to wait for certain patterns to appear.\n"
"\n"
"Here's an example that prints who's logged-on to a remote host. In addition "
"to a username and password, you must also know the user's shell prompt, "
"which for this example is '\"bash$ \"'\n"
"\n"
"    use Net::Telnet ();     $t = new Net::Telnet (Timeout => "
"10,                           Prompt => '/bash\\$ $/');     $t-"
">open($host);     $t->login($username, $passwd);     @lines = $t->cmd(\"who"
"\");     print @lines;\n"
"\n"
"See the *EXAMPLES* section below for more examples.\n"
"\n"
"Usage questions should be directed to the perlmonks.org discussion group. "
"Bugs can be viewed or reported at cpan.org on the Net::Telnet page."
msgstr ""
"Net::Telnet は指定した TCP ポートに対してクライアントとして接続し、ネットワー"
"ク上の入出力 (特に TELNET プロトコルを利用した通信) を行なうことができます。"
"単純な入出力機能としては print, get, getline などのメソッドがあるほか、より高"
"度な機能 (TELNET プロトコルは、主に人間と対話的に動作することを前提にしたもの"
"であるため) も提供されています。対話的な機能としては、制限時間の設定や入力ス"
"トリーム内における特定パターンの検出 (たとえばシェルのプロンプト) などがあり"
"ます。 Perl 5.14 またはそれ以降のバージョンの場合、 IPv6 にも対応しています "
"(詳しくは 'family()' をお読みください) 。\n"
"\n"
"TELNET ポート以外の用途としては、下記のようなものがあります:\n"
"* *\n"
"\n"
"  ソケットについて詳しい使い方がわからず、指定した TCP サービスに対して単純に"
"クライアント接続を行ないたいような場合。\n"
"* *\n"
"\n"
"  接続時や読み込み時、書き込み時にタイムアウト設定を必要とする場合。\n"
"* *\n"
"\n"
"  ソケットやパイプを通じて他の対話的なプログラムと通信を行ない、特定のパター"
"ンが現れるまで待ちたいような場合。\n"
"\n"
"下記の例は、リモートのホスト上で誰がログインしているのかを表示する例です。"
"ユーザ名とパスワードに加えて、ユーザのシェルプロンプトも設定しなければなりま"
"せん。下記の例は、シェルプロンプトが '\"bash$ \"' である場合の例です。\n"
"\n"
"    use Net::Telnet ();     $t = new Net::Telnet (Timeout => "
"10,                           Prompt => '/bash\\$ $/');     $t-"
">open($host);     $t->login($username, $passwd);     @lines = $t->cmd(\"who"
"\");     print @lines;\n"
"\n"
"上記以外の例について、詳しくは *EXAMPLES* セクションをお読みください。\n"
"\n"
"使用方法の質問は、 perlmonks.org ディスカッショングループにお送りください。ま"
"た、バグは cpan.org の Net::Telnet ページで閲覧および報告することができます。"

#. leap/perl-Net-Twitter/summary
msgid "Perl Interface to the Twitter Api"
msgstr "Twitter API に対する Perl インターフェイス"

#. leap/perl-Net-Twitter/description
msgid ""
"This module has been superseded by Twitter::API. Please update as soon as "
"you possibly can to use new features and the new API versions. This module "
"will no longer be supported.\n"
"\n"
"This module provides a perl interface to the Twitter APIs. See http://dev."
"twitter.com/docs for a full description of the Twitter APIs."
msgstr ""
"このモジュールは Twitter:API に取って代わられています。新機能や新しい API "
"バージョンを使用するには、できる限り速やかに更新してください。このモジュール"
"は、もはやサポートされていません。\n"
"\n"
"このモジュールは、 Twitter API に対する Perl インターフェイスを提供していま"
"す。 Twitter API について、詳しくは http://dev.twitter.com/docs をお読みくだ"
"さい。"

#. leap/perl-Net-Whois-RIPE/summary
msgid "Pure-Perl implementation of the RIPE Database client"
msgstr "RIPE データベースクライアントの純粋 Perl 実装"

#. leap/perl-Net-Whois-RIPE/description
msgid "a pure-Perl implementation of the RIPE Database client."
msgstr "RIPE データベースクライアントの純粋 Perl 実装です。"

#. leap/perl-Net-Whois-Raw/summary
msgid "Get Whois information of domains and IP addresses"
msgstr "ドメインや IP アドレスの whois 情報の取得"

#. leap/perl-Net-Whois-Raw/description
msgid ""
"Net::Whois::Raw queries WHOIS servers about domains. The module supports "
"recursive WHOIS queries. Also queries via HTTP is supported for some TLDs.\n"
"\n"
"Setting the variables $OMIT_MSG and $CHECK_FAIL will match the results "
"against a set of known patterns. The first flag will try to omit the "
"copyright message/disclaimer, the second will attempt to determine if the "
"search failed and return undef in such a case. \n"
"*IMPORTANT*: these checks merely use pattern matching; they will work on "
"several servers but certainly not on all of them."
msgstr ""
"Net::Whois::Raw はドメインに関する情報を WHOIS サーバに問い合わせます。このモ"
"ジュールは再帰的な WHOIS の問い合わせにも対応しています。このほか、 TLD に"
"よっては HTTP 経由の問い合わせにも対応します。\n"
"\n"
"$OMIT_MSG や $CHECK_FAIL の変数を設定することで、既知のパターンセットに対して"
"適合させる処理も行なうことができます。 $OMIT_MSG は著作権表示や免責事項などの"
"出力を省略させるために、 $CHECK_FAIL は検索が失敗したことを検出し、該当した場"
"合は undef を返すための仕組みとして利用することができるものです。\n"
"*重要*: これらのチェックは単純にパターンマッチングを使用しています。サーバに"
"よっては動作するものもありますが、すべてのサーバに対して動作するものではない"
"ことに注意してください。"

#. leap/perl-Net-XMPP/summary
msgid "XMPP Perl Library"
msgstr "XMPP Perl ライブラリ"

#. leap/perl-Net-XMPP/description
msgid ""
"Net::XMPP is a convenient tool to use for any perl script that would like to "
"utilize the XMPP Instant Messaging protocol. While not a client in and of "
"itself, it provides all of the necessary back-end functions to make a CGI "
"client or command-line perl client feasible and easy to use. Net::XMPP is a "
"wrapper around the rest of the official Net::XMPP::xxxxxx packages.\n"
"\n"
"There is are example scripts in the example directory that provide you with "
"examples of very simple XMPP programs.\n"
"\n"
"NOTE: The parser that the XML::Stream::Parser manpage provides, as are most "
"Perl parsers, is synchronous. If you are in the middle of parsing a packet "
"and call a user defined callback, the Parser is blocked until your callback "
"finishes. This means you cannot be operating on a packet, send out another "
"packet and wait for a response to that packet. It will never get to you. "
"Threading might solve this, but as of this writing threading in Perl is not "
"quite up to par yet. This issue will be revisted in the future."
msgstr ""
"Net::XMPP は、 XMPP インスタントメッセージングプロトコルを利用したい Perl ス"
"クリプトのための、便利なツール集です。それ自身はクライアント自身になることは"
"ありませんが、 CGI のクライアントやコマンドラインの Perl クライアントから、実"
"現可能で使いやすい必須バックエンド機能のすべてを提供します。 Net::XMPP は公式"
"の Net::SMPP::xxxxx パッケージの残りの部分のラッパーです。\n"
"\n"
"example ディレクトリ内には、非常にシンプルな XMPP プログラムの例として、いく"
"つかのスクリプトが用意されています。\n"
"\n"
"注意: 最も著名な Perl パーサである XML::Stream::Parser が提供する仕組みは同期"
"処理です。パケットの処理中にユーザ定義のコールバックを呼び出した場合、パーサ"
"はコールバックが終了するまで処理が止まります。つまり、他のパケットを送信して"
"いたり、そのパケットに対して応答を待っていたりした場合、パケットを処理するこ"
"とができないことを意味します。スレッド処理によってこれを解決することもできま"
"すが、 Perl でスレッド処理を作成するのは面倒です。この問題は将来のバージョン"
"で解消される予定です。"

#. leap/perl-NetAddr-IP/summary
msgid "Manages IPv4 and IPv6 addresses and subnets"
msgstr "IPv4 および IPv6 アドレスとサブネットの管理"

#. leap/perl-NetAddr-IP/description
msgid ""
"This module provides an object-oriented abstraction on top of IP addresses "
"or IP subnets that allows for easy manipulations. Version 4.xx of NetAddr::"
"IP will work with older versions of Perl and is compatible with Math::"
"BigInt.\n"
"\n"
"The internal representation of all IP objects is in 128 bit IPv6 notation. "
"IPv4 and IPv6 objects may be freely mixed."
msgstr ""
"このモジュールは、 IP アドレスやサブネットに対するオブジェクト指向の抽象化機"
"能を提供し、操作を簡単に行なうことができるようにします。バージョン 4.xx の"
"NetAddr::IP モジュールは古いバージョンの Perl で動作するもので、以前のバー"
"ジョンと比較すると、 Math::BigInt を使用しないようになっています。\n"
"\n"
"IP オブジェクトに対する内部表現は、全て 128 ビットの IPv6 方式になっていま"
"す。そのため、 IPv4/IPv6 の各オブジェクトは自由に混在させることができます。"

#. leap/perl-NetPacket/summary
msgid "Assemble/disassemble network packets at the protocol level"
msgstr ""
"ネットワークパケットをプロトコルレベルで組み立てまたは分解するモジュール"

#. leap/perl-NetPacket/description
msgid ""
"'NetPacket' provides a base class for a cluster of modules related to "
"decoding and encoding of network protocols. Each 'NetPacket' descendent "
"module knows how to encode and decode packets for the network protocol it "
"implements. Consult the documentation for the module in question for "
"protocol-specific implementation.\n"
"\n"
"Note that there is no inheritance in the 'NetPacket::' cluster of modules "
"other than each protocol module being a 'NetPacket'. This was seen to be too "
"restrictive as imposing inheritance relationships (for example between the "
"IP, UDP and TCP protocols) would make things like tunneling or other unusual "
"situations difficult."
msgstr ""
"'NetPacket' はネットワークプロトコルのデコードやエンコードに関連するモジュー"
"ル向けの基本クラスです。それぞれの 'NetPacket' の子孫モジュールは、ネットワー"
"クプロトコルのエンコードとデコードに関する情報を保持します。プロトコル固有の"
"実装方法について、詳しくはドキュメンテーションをご覧ください。\n"
"\n"
"なお、'NetPacket' に属する各プロトコルモジュールを除き、 'NetPacket::' で始ま"
"るクラスには相互の継承関係がないことに注意してください。これは継承の関係性 "
"(例えば IP, UDP, TCP など) を課すほど制限が厳しくなり、たとえばトンネリングや"
"その他の状況への対応が難しくなるためです。"

#. leap/perl-NetxAP/summary
msgid "Interface to the protocol family IMAP, IMSP, ACAP, and ICAP"
msgstr "IMAP, IMSP, ACAP, ICAP プロトコルファミリのインターフェイス"

#. leap/perl-NetxAP/description
msgid ""
"This module provides an interface to the protocol family represented by "
"IMAP, IMSP, ACAP, and ICAP.  A usable IMAP module is also provide."
msgstr ""
"このモジュールは、 IMAP, IMSP, ACAP, ICAP に代表されるプロトコルファミリへの "
"インターフェイスを提供しています。使用可能な IMAP モジュールも提供されていま"
"す。"

#. leap/perl-Number-Compare/summary
msgid "Numeric comparisons"
msgstr "数値の比較"

#. leap/perl-Number-Compare/description
msgid ""
"Number::Compare compiles a simple comparison to an anonymous subroutine, "
"which you can call with a value to be tested again.\n"
"\n"
"Now this would be very pointless, if Number::Compare didn't understand "
"magnitudes.\n"
"\n"
"The target value may use magnitudes of kilobytes ('k', 'ki'), megabytes "
"('m', 'mi'), or gigabytes ('g', 'gi'). Those suffixed with an 'i' use the "
"appropriate 2**n version in accordance with the IEC standard: http://physics."
"nist.gov/cuu/Units/binary.html"
msgstr ""
"Number::Compare は匿名サブルーチンに対するシンプルな比較機能を提供するもの"
"で、繰り返しテスト用に呼び出すことができる仕組みです。\n"
"\n"
"Number::Compare が指数を解釈できない場合は、ほとんど意味のないものになりま"
"す。\n"
"\n"
"ターゲットとなる値にはキロバイト ('k', 'ki') 、メガバイト ('m', 'mi') 、ギガ"
"バイト ('g', 'gi') などの指数表記を利用することもできます。また、 'i' で終わ"
"る指数表記は、 IEC 標準 (http://physics.nist.gov/cuu/Units/binary.html) に"
"従って 2**n の値を意味するものとして解釈します。"

#. leap/perl-Number-Format/summary
msgid "Perl extension for formatting numbers"
msgstr "数値の書式化を行なうための Perl 拡張"

#. leap/perl-Number-Format/description
msgid ""
"These functions provide an easy means of formatting numbers in a manner "
"suitable for displaying to the user.\n"
"\n"
"There are two ways to use this package. One is to declare an object of type "
"Number::Format, which you can think of as a formatting engine. The various "
"functions defined here are provided as object methods. The constructor "
"'new()' can be used to set the parameters of the formatting engine. Valid "
"parameters are:\n"
"\n"
"  THOUSANDS_SEP     - character inserted between groups of 3 digits   "
"DECIMAL_POINT     - character separating integer and fractional parts   "
"MON_THOUSANDS_SEP - like THOUSANDS_SEP, but used for format_price   "
"MON_DECIMAL_POINT - like DECIMAL_POINT, but used for format_price   "
"INT_CURR_SYMBOL   - character(s) denoting currency (see format_price())   "
"DECIMAL_DIGITS    - number of digits to the right of dec point (def 2)   "
"DECIMAL_FILL      - boolean; whether to add zeroes to fill out decimal   "
"NEG_FORMAT        - format to display negative numbers (def ``-x'')   "
"KILO_SUFFIX       - suffix to add when format_bytes formats kilobytes "
"(trad)   MEGA_SUFFIX       -    \"    \"  \"    \"        \"         \"    "
"megabytes (trad)   GIGA_SUFFIX       -    \"    \"  \"    \"        "
"\"         \"    gigabytes (trad)   KIBI_SUFFIX       - suffix to add when "
"format_bytes formats kibibytes (iec)   MEBI_SUFFIX       -    \"    \"  "
"\"    \"        \"         \"    mebibytes (iec)   GIBI_SUFFIX       -    "
"\"    \"  \"    \"        \"         \"    gibibytes (iec)\n"
"\n"
"They may be specified in upper or lower case, with or without a leading "
"hyphen ( - )."
msgstr ""
"これらの関数は、ユーザにとってわかりやすい形式で数値を書式化するための簡単な"
"方法を提供するものです。\n"
"\n"
"このパッケージを使用する方法には 2 種類のものがあります。 1 つは Number::"
"Format の型のオブジェクトを定義して、それをフォーマットエンジンとして使用する"
"方法があります。ここで示されている様々な関数は、オブジェクトメソッドとして提"
"供されます。コンストラクタ 'new()' は、フォーマットエンジンのパラメータを設定"
"するために使用することができます。指定可能な値は下記のとおりです:\n"
"\n"
"  THOUSANDS_SEP     - 3 桁ごとの区切り文字   DECIMAL_POINT     - 整数部と小数"
"部を分ける文字   MON_THOUSANDS_SEP - THOUSANDS_SEP と同じような仕組みですが、"
"こちらは format_price で使用されるものです   MON_DECIMAL_POINT - "
"DECIMAL_POINT と同じような仕組みですが、こちらは format_price で使用されるも"
"のです   INT_CURR_SYMBOL   - 価格を示す文字 (format_price() を参照)   "
"DECIMAL_DIGITS    - 数値の桁数を指定します (既定値は 2)   DECIMAL_FILL      "
"- ブール値で、数値のゼロ埋めするかどうかを指定します   NEG_FORMAT        - 負"
"の数を書式化する際の形式を指定します (既定値は ``-x'')   KILO_SUFFIX       - "
"キロバイトを表示するための接尾辞を指定します   MEGA_SUFFIX       -    \"    "
"\"  \"    \"        \"         \"    megabytes (trad)   GIGA_SUFFIX       "
"-    \"    \"  \"    \"        \"         \"    gigabytes (trad)   "
"KIBI_SUFFIX       - キロバイト (iec) を表示するための接尾辞を指定します   "
"MEBI_SUFFIX       -    \"    \"  \"    \"        \"         \"    mebibytes "
"(iec)   GIBI_SUFFIX       -    \"    \"  \"    \"        \"         \"    "
"gibibytes (iec)\n"
"\n"
"これらは大文字でも小文字でもかまいませんし、ハイフン (-) があってもなくてもか"
"まいません。"

#. leap/perl-Number-WithError/summary
msgid "Numbers with error propagation and scientific rounding"
msgstr "エラー伝搬機能付きの数値と科学的な丸め処理"

#. leap/perl-Number-WithError/description
msgid ""
"This class is a container class for numbers with a number of associated "
"symmetric and asymmetric errors. It overloads practically all common "
"arithmetic operations and trigonometric functions to propagate the errors. "
"It can do proper scientific rounding (as explained in more detail below in "
"the documentation of the 'significant_digit()' method).\n"
"\n"
"You can use Math::BigFloat objects as the internal representation of numbers "
"in order to support arbitrary precision calculations.\n"
"\n"
"Errors are propagated using Gaussian error propagation.\n"
"\n"
"With a notable exception, the test suite covers way over ninety percent of "
"the code. The remaining holes are mostly difficult-to-test corner cases and "
"sanity tests. The comparison routines are the exception for which there will "
"be more extensive tests in a future release."
msgstr ""
"このクラスは、数多くの関連する対称エラーや非対称エラーを含む数値を扱うコンテ"
"ナクラスです。エラーを伝搬するために全ての一般的な算術操作や三角関数をオー"
"バーロードしています。適切な科学的丸め処理にも対応しています (ドキュメンテー"
"ション内の 'significant_digit()' メソッドに関する説明に詳細が書かれていま"
"す) 。\n"
"\n"
"また、任意精度の計算を行なうため、数値の内部表現として Math::BigFloat オブ"
"ジェクトを使用することもできます。\n"
"\n"
"エラーは Gaussian エラー伝搬を利用して伝搬されます。\n"
"\n"
"顕著な例外事項としては、テストスイートがおおよそコードの 90% 程度しかカバーし"
"ていません。残りの部分はテストの難しい希少ケースに属するテストが必要となりま"
"す。また、比較ルーチンについても例外で、将来のリリースで広範囲なテストを追加"
"すべき部分です。"

#. leap/perl-OLE-Storage_Lite/summary
msgid "Simple Class for OLE document interface."
msgstr "OLE ドキュメントインターフェイス向けシンプルクラス"

#. leap/perl-OLE-Storage_Lite/description
msgid ""
"OLE::Storage_Lite allows you to read and write an OLE structured file.\n"
"\n"
"OLE::Storage_Lite::PPS is a class representing PPS. OLE::Storage_Lite::PPS::"
"Root, OLE::Storage_Lite::PPS::File and OLE::Storage_Lite::PPS::Dir are "
"subclasses of OLE::Storage_Lite::PPS."
msgstr ""
"OLE::Storage_Lite は OLE 構造化ファイルを読み書きするためのモジュールです。\n"
"\n"
"OLE::Storage_Lite::PPS は PPS を表すクラスです。 OLE::Storage_Lite::PPS::"
"Root, OLE::Storage_Lite::PPS::File, OLE::Storage_Lite::PPS::Dir はいずれも "
"OLE::Storage_Lite::PPS のサブクラスです。"

#. leap/perl-Object-Pluggable/summary
msgid "Base Class for Creating Plugin-Enabled Objects"
msgstr "プラグインが有効化されたオブジェクトを作成するためのベースクラス"

#. leap/perl-Object-Pluggable/description
msgid ""
"Object::Pluggable is a base class for creating plugin enabled objects. It is "
"a generic port of POE::Component::IRC's plugin system.\n"
"\n"
"If your object dispatches events to listeners, then Object::Pluggable may be "
"a good fit for you.\n"
"\n"
"Basic use would involve subclassing Object::Pluggable, then overriding "
"'_pluggable_event()' and inserting '_pluggable_process()' wherever you "
"dispatch events from.\n"
"\n"
"Users of your object can then load plugins using the plugin methods provided "
"to handle events generated by the object.\n"
"\n"
"You may also use plugin style handlers within your object as "
"'_pluggable_process()' will attempt to process any events with local method "
"calls first. The return value of these handlers has the same significance as "
"the return value of 'normal' plugin handlers."
msgstr ""
"Object::Pluggable はプラグインの必要なオブジェクトを作成するためのベースクラ"
"スです。 POE::Component::IRC のプラグインシステムを汎用化して移植したもので"
"す。\n"
"\n"
"お使いのオブジェクトがリスナに対してイベントを送信する場合は、 Object::"
"Pluggable が便利でしょう。\n"
"\n"
"基本的な使い方としては Object::Pluggable のサブクラスとなるようにし、 イベン"
"トを送信する際に '_pluggable_event()' をオーバーライドすると共に、 "
"'_pluggable_process()' を挿入します。\n"
"\n"
"オブジェクトの利用者は、これによってプラグインを読み込んで、オブジェクトが生"
"成したイベントを処理するためのプラグインメソッドを利用できるようになりま"
"す。\n"
"\n"
"_pluggable_process()' が最初に任意のイベントを処理する際、ローカルのメソッド"
"を最初に呼び出そうとしますが、お使いのオブジェクト内でプラグイン形式のハンド"
"ラを使用することもできます。これらのハンドラの返り値は、 '通常の' プラグイン"
"ハンドラの返り値と同じ意味をもちます。"

#. leap/perl-Object-Signature/summary
msgid "Generate cryptographic signatures for objects"
msgstr "オブジェクトに対する電子署名の生成"

#. leap/perl-Object-Signature/description
msgid ""
"Object::Signature is an abstract base class that you can inherit from in "
"order to allow your objects to generate unique cryptographic signatures.\n"
"\n"
"The method used to generate the signature is based on Storable and Digest::"
"MD5. The object is fed to 'Storable::nfreeze' to get a string, which is then "
"passed to Digest::MD5::md5_hex to get a unique 32 character hexadecimal "
"signature."
msgstr ""
"Object::Signature は抽象化されたオブジェクトクラスで、独自の電子署名を生成す"
"るオブジェクトを作成できるようにするために、このクラスを派生させることができ"
"るものです。\n"
"\n"
"署名を生成するために使用されるメソッドは Storable と Digest::MD5 をベースにし"
"ています。オブジェクトから文字列を得るために 'Storable::nfreeze' が使用され、"
"ユニークな 16 進数 32 文字を得るために、 Digest::MD5::md5_hex が呼び出されま"
"す。"

#. leap/perl-OpenGL/summary
#. leap/perl-OpenGL/description
msgid "Perl bindings to the OpenGL API, GLU, and GLUT/FreeGLUT"
msgstr "OpenGL API, GLU, GLUT/FreeGLUT に対する Perl バインディング"

#. leap/perl-PAR/summary
msgid "Perl Archive Toolkit"
msgstr "Perl アーカイブツールキット"

#. leap/perl-PAR/description
msgid ""
"This module lets you use special zip files, called *P*erl *Ar*chives, as "
"libraries from which Perl modules can be loaded.\n"
"\n"
"It supports loading XS modules by overriding *DynaLoader* bootstrapping "
"methods; it writes shared object file to a temporary file at the time it is "
"needed.\n"
"\n"
"A _.par_ file is mostly a zip of the _blib/_ directory after the build "
"process of a CPAN distribution. To generate a _.par_ file yourself, all you "
"have to do is compress the modules under _arch/_ and _lib/_, e.g.:\n"
"\n"
"    % perl Makefile.PL     % make     % cd blib     % zip -r mymodule.par "
"arch/ lib/\n"
"\n"
"Afterward, you can just use _mymodule.par_ anywhere in your '@INC', use\n"
"*PAR*, and it will Just Work. Support for generating _.par_ files is going "
"to be in the next (beyond 0.2805) release of Module::Build.\n"
"\n"
"For convenience, you can set the 'PERL5OPT' environment variable to '-MPAR' "
"to enable 'PAR' processing globally (the overhead is small if not used); "
"setting it to '-MPAR=/path/to/mylib.par' will load a specific PAR file. "
"Alternatively, consider using the _par.pl_ utility bundled with the PAR::"
"Packer distribution, or using the self-contained _parl_ utility which is "
"also distributed with PAR::Packer on machines without PAR.pm installed.\n"
"\n"
"Note that self-containing scripts and executables created with _par.pl_ and "
"_pp_ may also be used as _.par_ archives:\n"
"\n"
"    % pp -o packed.exe source.pl        # generate packed.exe (see PAR::"
"Packer)     % perl -MPAR=packed.exe other.pl    # this also works     % perl "
"-MPAR -Ipacked.exe other.pl  # ditto\n"
"\n"
"Please see SYNOPSIS for most typical use cases."
msgstr ""
"このモジュールは、 Perl のアーカイブ形式である *par* という特殊な形式の zip "
"ファイルを扱うためのモジュールです。このアーカイブには、 Perl モジュールを読"
"み込むことのできるライブラリが含まれています。\n"
"\n"
"このモジュールは、 *Dynaloader* と呼ばれるブートストラップメソッドをオーバー"
"ライドすることによって、 XS モジュールの読み込みにも対応しています。共有オブ"
"ジェクトファイルは必要になった際、一時ファイルに書き込んで使用します。\n"
"\n"
"_.par_ ファイルは CPAN 配布物から構築された後、 _blib/ ディレクトリ内を zip "
"ファイルにまとめたものです。 _.par_ ファイルを独自に作成したい場合は、 _arch/"
"_ と _lib/_ を下記のようにして圧縮するだけです:\n"
"\n"
"    % perl Makefile.PL     % make     % cd blib     % zip -r mymodule.par "
"arch/ lib/\n"
"\n"
"上記を実施後、 '@INC' 内のどこかに _mymodule.par_ を配置して *PAR* モジュール"
"を利用することで、必要なモジュールを読み込むことができるようになります。 _."
"par_ ファイルの生成機能への対応は、 Module::Build の次期リリース (0.2805 以"
"降) で提供される予定です。\n"
"\n"
"また、利便性を確保する目的で、 'PERL5OPT' 環境変数内に '-MPAR' を指定する"
"と、 'PAR' の処理をグローバルに行なうことができます (使用しなければオーバー"
"ヘッドは小さくなります) 。また、 '-MPAR=/path/to/mylib.par' のように指定する"
"と、特定の PAR ファイルを読み込むようにすることもできます。このほか、 PAR::"
"Packer 配布物に同梱されている _par.pl_ ユーティリティや必要なものがすべて含ま"
"れている _parl_ ユーティリティを使用することもできます。これらは PAR.pm がイ"
"ンストールされていなくても動作します。\n"
"\n"
"なお、 _par.pl_ や _pp_ で作成されたスクリプトや実行ファイルは、 _.par_ アー"
"カイブとしても使用することができます:\n"
"\n"
"    % pp -o packed.exe source.pl        # generate packed.exe (see PAR::"
"Packer)     % perl -MPAR=packed.exe other.pl    # this also works     % perl "
"-MPAR -Ipacked.exe other.pl  # ditto\n"
"\n"
"よくある使用例について、詳しくは SYNOPSIS をお読みください。"

#. leap/perl-PAR-Dist/summary
msgid "Create and manipulate PAR distributions"
msgstr "PAR 配布物の作成と操作"

#. leap/perl-PAR-Dist/description
msgid ""
"This module creates and manipulates _PAR distributions_. They are "
"architecture-specific *PAR* files, containing everything under _blib/_ of "
"CPAN distributions after their 'make' or 'Build' stage, a _META.yml_ "
"describing metadata of the original CPAN distribution, and a _MANIFEST_ "
"detailing all files within it. Digitally signed PAR distributions will also "
"contain a _SIGNATURE_ file.\n"
"\n"
"The naming convention for such distributions is:\n"
"\n"
"    $NAME-$VERSION-$ARCH-$PERL_VERSION.par\n"
"\n"
"For example, 'PAR-Dist-0.01-i386-freebsd-5.8.0.par' corresponds to the 0.01 "
"release of 'PAR-Dist' on CPAN, built for perl 5.8.0 running on 'i386-"
"freebsd'."
msgstr ""
"このモジュールは _PAR 配布物_ を作成したり操作したりするための仕組みです。こ"
"れらはアーキテクチャ固有の *PAR* ファイルであり、 CPAN 配布物内で 'make' や "
"'Build' ステージを実行した後に現れる _blib/_ 内や、元の CPAN 配布物に関するメ"
"タデータを含む _META.yml_ や、すべてのファイルに対する詳細情報を示す "
"_MANIFEST_ などが含まれます。このほか、 PAR 配布物に対する電子署名は、 "
"_SIGNATURE_ ファイル内に含まれます。\n"
"\n"
"このような配布物は、下記のような名前付け規約に従います:\n"
"\n"
"    $NAME-$VERSION-$ARCH-$PERL_VERSION.par\n"
"\n"
"たとえば 'PAR-Dist-0.01-i386-freebsd-5.8.0.par' は CPAN 内の配布物で 'PAR-"
"Dist' という名前の 0.01 リリースで、 'i386-freebsd' 上で動作する Perl 5.8.0 "
"用のものであることを表します。"

#. leap/perl-PAR-Packer/summary
msgid "PAR Packager"
msgstr "PAR パッケージャ"

#. leap/perl-PAR-Packer/description
msgid ""
"This module implements the *App::Packer::Backend* interface, for generating "
"stand-alone executables, perl scripts and PAR files.\n"
"\n"
"Currently, this module is used by the command line tool *pp* internally, as "
"well as by the contributed _contrib/gui_pp/gpp_ program.\n"
"\n"
"Since version 0.97 of PAR, this module and its related tools such as 'pp' "
"have been stripped from the PAR distribution and are now distributed as the "
"'PAR-Packer' distribution so that PAR users need not necessarily have a C "
"compiler."
msgstr ""
"このモジュールは *App::Packer::Backend* インターフェイスを実装するもので、単"
"独で動作する実行ファイルや Perl スクリプト、 PAR ファイルなどを生成するための"
"仕組みです。\n"
"\n"
"現時点では、このモジュールは内部的に *pp* が使用しているほか、 _contrib/"
"gui_pp\\gpp_program も使用しています。\n"
"\n"
"PAR バージョン 0.97 の時点で、このモジュールと 'pp' などの関連ツールは PAR 配"
"布物からは取り除かれ、 'PAR-Packer' の配布物として配布されるようになりまし"
"た。これは、 PAR だけを使用したいユーザに対して、 C コンパイラが無くても使用"
"できるようにするための措置です。"

#. leap/perl-PDF-API2/summary
#. leap/perl-PDF-API2/description
msgid "Create, modify, and examine PDF files"
msgstr "PDFファイルの作成、修正、確認"

#. leap/perl-PHP-Serialization/summary
msgid "De-/serialize() PHP output into Perl"
msgstr "Perl での PHP 出力のシリアライズとデシリアライズ"

#. leap/perl-PHP-Serialization/description
msgid ""
"Provides a simple, quick means of serializing perl memory structures "
"(including object data!) into a format that PHP can deserialize() and "
"access, and vice versa.\n"
"\n"
"NOTE: Converts PHP arrays into Perl Arrays when the PHP array used "
"exclusively numeric indexes, and into Perl Hashes then the PHP array did not."
msgstr ""
"シンプルで Perl のメモリ構造 (オブジェクトデータを含む) を素早くシリアライズ"
"して、 PHP が deserialize() してアクセスできるようにするための仕組みです。\n"
"\n"
"注意: PHP の配列は、その配列のインデックスに数値のみが含まれている場合にのみ "
"Perl の配列に変換されますが、それ以外の場合は Perl 側ではハッシュに変換されま"
"す。"

#. leap/perl-POE/summary
msgid "Portable multitasking and networking framework for any event loop"
msgstr ""
"任意のイベントループ向けに可搬性のあるマルチタスク処理およびネットワーク処理"
"フレームワーク"

#. leap/perl-POE/description
msgid ""
"POE is a framework for cooperative, event driven multitasking and networking "
"in Perl. Other languages have similar frameworks. Python has Twisted. TCL "
"has \"the event loop\".\n"
"\n"
"POE provides a unified interface for several other event loops, including "
"select(), IO::Poll, Glib, Gtk, Tk, Wx, and Gtk2. Many of these event loop "
"interfaces were written by others, with the help of POE::Test::Loops. They "
"may be found on the CPAN.\n"
"\n"
"POE achieves its high degree of portability to different operating systems "
"and Perl versions by being written entirely in Perl. CPAN hosts optional XS "
"modules for POE if speed is more desirable than portability.\n"
"\n"
"POE is designed in layers. Each layer builds atop the lower level ones. "
"Programs are free to use POE at any level of abstraction, and different "
"levels can be mixed and matched seamlessly within a single program. "
"Remember, though, that higher-level abstractions often require more "
"resources than lower-level ones. The conveniences they provide are not "
"free.\n"
"\n"
"POE's bundled abstraction layers are the tip of a growing iceberg. Sprocket, "
"POE::Stage, and other CPAN distributions build upon this work. You're "
"encouraged to look around.\n"
"\n"
"No matter how high you go, though, it all boils down to calls to POE::"
"Kernel. So your down-to-earth code can easily cooperate with stratospheric "
"systems."
msgstr ""
"POE は Perl 内でのイベント駆動型マルチタスク／ネットワーク処理フレームワーク"
"です。他の言語にも類似のフレームワークが存在しています。 Python では "
"Twisted 、 TCL では \"the event loop\" です。\n"
"\n"
"POE は select(), IO::Poll, Glib, Gtk, Tk, Wx, Gtk2 などのいくつかのイベント"
"ループ向けの統合インターフェイスです。これらのイベントループインターフェイス"
"の多くは、 POE::Test::Loops の支援のもと他のユーザが作成しています。これらは "
"CPAN 内で公開されています。\n"
"\n"
"POE は異なるオペレーティングシステムや Perl のバージョンに対して、 Perl 単体"
"で記述することによって高度な可搬性を提供します。 CPAN ではオプションの POE 向"
"け XS モジュールも公開されていますが、こちらは可搬性よりも速度を重視したつく"
"りになっています。\n"
"\n"
"POE は階層構造になっています。各階層はそれより低い階層のものをベースにして作"
"られています。プログラム側ではどの階層の抽象化を使用しても構いませんし、単一"
"のプログラム内で異なるレベルを混在させたり、それらをシームレスに適合させても"
"かまいません。ただし、高レベルの抽象化は、低レベルの抽象化より多くのリソース"
"を必要とします。つまり、利便性はタダでは手に入らない、ということです。\n"
"\n"
"POE に内蔵されている抽象化レイヤは成長する氷山の先端ともいえます。 Sprocket, "
"POE::Stage, その他の CPAN 配布物では、これらの成果を利用して構築されていま"
"す。まずは周囲をご覧になるとよいでしょう。\n"
"\n"
"どれだけ高い階層であっても、 煮詰めれば POE::Kernel への呼び出しになります。"
"そのため、地球上の表面にあるコードも、容易に成層圏のシステムと協調処理するこ"
"とができます。"

#. leap/perl-POE-Test-Loops/summary
msgid "Reusable tests for POE::Loop authors"
msgstr "POE::Loop 作者向けの再利用可能なテスト"

#. leap/perl-POE-Test-Loops/description
msgid ""
"POE::Test::Loops contains one function, generate(), which will generate all "
"the loop tests for one or more POE::Loop subclasses.\n"
"\n"
"The the /SYNOPSIS manpage example is a version of the poe-gen-tests manpage, "
"which is a stand-alone utility to generate the actual tests. the poe-gen-"
"tests manpage also documents the POE::Test::Loops system in more detail."
msgstr ""
"POE::Test::Loops には 1 つの関数 generate() が含まれています。この関数は、 1 "
"つまたはそれ以上の POE::Loop に対するループテストを生成します。\n"
"\n"
"/SYNOPSIS にある例には poe-gen-tests 版が用意されていますが、こちらは実際のテ"
"ストを生成するための単独ユーティリティです。 poe-gen-tests には、 POE::Test::"
"Loops システムをより詳しく説明するドキュメンテーションも含まれています。"

#. leap/perl-POSIX-strftime-Compiler/summary
msgid "GNU C library compatible strftime for loggers and servers"
msgstr "ログ記録およびサーバ向けの GNU C ライブラリ互換の strftime"

#. leap/perl-POSIX-strftime-Compiler/description
msgid ""
"POSIX::strftime::Compiler provides GNU C library compatible strftime(3). But "
"this module will not affected by the system locale. This feature is useful "
"when you want to write loggers, servers and portable applications.\n"
"\n"
"For generate same result strings on any locale, POSIX::strftime::Compiler "
"wraps POSIX::strftime and converts some format characters to perl code"
msgstr ""
"POSIX::strftime::Compiler は GNU C ライブラリ互換の strftime(3) を提供しま"
"す。ただし、このモジュールはシステムのロケールからの影響を受けません。また、"
"この機能はログを記録したり、サーバや可搬性のあるアプリケーションを作成する際"
"に便利な仕組みです。\n"
"\n"
"度のロケールでも同じ結果文字列を出力するため、 POSIX::strftime::Compiler は "
"POSIX::strftime をラッピングして、 Perl コードに対して書式文字列を変換させて"
"います。"

#. leap/perl-PPI/summary
#. leap/perl-PPI/description
msgid "Parse, Analyze and Manipulate Perl (without perl)"
msgstr "Perl の解釈と分析、および操作を Perl なしで行なうライブラリ"

#. leap/perl-PPIx-QuoteLike/summary
msgid "Parse Perl string literals and string-literal-like things"
msgstr "Perl の文字列リテラルやそれに類似したものを処理するモジュール"

#. leap/perl-PPIx-QuoteLike/description
msgid ""
"This Perl class parses Perl string literals and things that are reasonably "
"like string literals. Its real reason for being is to find interpolated "
"variables for Perl::Critic policies and similar code.\n"
"\n"
"The parse is fairly straightforward, and a little poking around with _eg/"
"pqldump_ should show how it normally goes.\n"
"\n"
"But there is at least one quote-like thing that probably needs some "
"explanation."
msgstr ""
"この Perl クラスは Perl の文字列リテラルと、文字列リテラルのように記述されて"
"いるものを処理します。 Perl::Critic ポリシーと同様のコードのための内挿された"
"変数を見つけることが実際の理由です。\n"
"\n"
"解析はかなり単純で、_eg/pqldump_ をちょっといじっただけで、通常はどうなるかわ"
"かるはずです。\n"
"\n"
"しかし、少なくとも1つの引用のようなものがあり、おそらく何らかの説明が必要で"
"す。"

#. leap/perl-PPIx-Regexp/summary
msgid "Represent a regular expression of some sort"
msgstr "正規表現モジュール"

#. leap/perl-PPIx-Regexp/description
msgid ""
"The purpose of the _PPIx-Regexp_ package is to parse regular expressions in "
"a manner similar to the way the PPI package parses Perl. This class forms "
"the root of the parse tree, playing a role similar to PPI::Document.\n"
"\n"
"This package shares with PPI the property of being round-trip safe. That "
"is,\n"
"\n"
" my $expr = 's/ ( \\d+ ) ( \\D+ ) /$2$1/smxg';  my $re = PPIx::Regexp-"
">new( $expr );  print $re->content() eq $expr ? \"yes\\n\" : \"no\\n\"\n"
"\n"
"should print 'yes' for any valid regular expression.\n"
"\n"
"Navigation is similar to that provided by PPI. That is to say, things like "
"'children', 'find_first', 'snext_sibling' and so on all work pretty much the "
"same way as in PPI.\n"
"\n"
"The class hierarchy is also similar to PPI. Except for some utility classes "
"(the dumper, the lexer, and the tokenizer) all classes are descended from "
"PPIx::Regexp::Element, which provides basic navigation. Tokens are descended "
"from PPIx::Regexp::Token, which provides content. All containers are "
"descended from PPIx::Regexp::Node, which provides for children, and all "
"structure elements are descended from PPIx::Regexp::Structure, which "
"provides beginning and ending delimiters, and a type.\n"
"\n"
"There are two features of PPI that this package does not provide - "
"mutability and operator overloading. There are no plans for serious "
"mutability, though something like PPI's 'prune' functionality might be "
"considered. Similarly there are no plans for operator overloading, which "
"appears to the author to represent a performance hit for little tangible "
"gain."
msgstr ""
"_PPIx-Regexp_ パッケージの目的は、 PPI パッケージが Perl を処理するのと似た方"
"法で、正規表現を処理する仕組みを提供することです。このクラスは処理ツリーの"
"ルートを構成し、 PPI::Document に似た役割を演じます。\n"
"\n"
"このパッケージは PPI と往復させても安全であるという特性を持っています。具体的"
"には、下記のようになります:\n"
"\n"
" my $expr = 's/ ( \\d+ ) ( \\D+ ) /$2$1/smxg';  my $re = PPIx::Regexp-"
">new( $expr );  print $re->content() eq $expr ? \"yes\\n\" : \"no\\n\"\n"
"\n"
"正しい正規表現に対しては常に 'yes' を返すはずです。\n"
"\n"
"ナビゲーションも PPI で提供されている仕組みに似ています。たとえば "
"'children', 'find_first', 'snext_sibling' なども、 PPI とほぼ同じように動作し"
"ます。\n"
"\n"
"クラスの階層構造も PPI に似た仕組みです。ただし、いくつかのユーティリティクラ"
"ス (dumper, lexer, tokenizer) を除いて、すべてのクラスは PPIx::Regexp::"
"Element の子孫で、これによって基本的なナビゲーション機能を提供しています。"
"トークンは PPIx::Regexp::Token の子孫で、内容を提供します。また、すべてのコン"
"テナは PPIx::Regexp::Node の子孫で子を提供するほか、すべての構造体要素は "
"PPIx::Regexp::Structure の子孫で、こちらは開始と終了の区切り文字、そして型を"
"提供します。\n"
"\n"
"このパッケージが提供していない PPI の機能は 2 つあります。 1 つは変更可能性、"
"もう 1 つは演算子のオーバーロードです。変更可能性の機能を提供する予定はありま"
"せんが、 PPI の 'prune' のような機能を提供するかもしれません。同様に、演算子"
"のオーバーロードについても提供の予定はありません。"

#. leap/perl-PPIx-Utilities/summary
msgid "Extensions to L<PPI|PPI>"
msgstr "L<PPI|PPI> 向け拡張"

#. leap/perl-PPIx-Utilities/description
msgid ""
"This is a collection of functions for dealing with PPI objects, many of "
"which originated in Perl::Critic. They are organized into modules by the "
"kind of PPI class they relate to, by replacing the \"PPI\" at the front of "
"the module name with \"PPIx::Utilities\", e.g. functionality related to PPI::"
"Nodes is in PPIx::Utilities::Node."
msgstr ""
"これは PPI オブジェクトを扱うための関数集で、これらの多くは Perl::Critic を発"
"祥とするものです。これらは PPI クラスの一種として組み込まれ、 \"PPI\" の名前"
"を \"PPIx::Utilities\" という名前で置き換えて提供されています。なお、 PPI::"
"Nodes に関連する機能は PPIx::Utilities::Node にあります。"

#. leap/perl-Package-DeprecationManager/summary
msgid "Manage deprecation warnings for your distribution"
msgstr "配布物内のファイルの Deprecation 警告の管理"

#. leap/perl-Package-DeprecationManager/description
msgid ""
"This module allows you to manage a set of deprecations for one or more "
"modules.\n"
"\n"
"When you import 'Package::DeprecationManager', you must provide a set of '-"
"deprecations' as a hash ref. The keys are \"feature\" names, and the values "
"are the version when that feature was deprecated.\n"
"\n"
"In many cases, you can simply use the fully qualified name of a subroutine "
"or method as the feature name. This works for cases where the whole "
"subroutine is deprecated. However, the feature names can be any string. This "
"is useful if you don't want to deprecate an entire subroutine, just a "
"certain usage.\n"
"\n"
"You can also provide an optional array reference in the '-ignore' "
"parameter.\n"
"\n"
"The values to be ignored can be package names or regular expressions (made "
"with 'qr//'). Use this to ignore packages in your distribution that can "
"appear on the call stack when a deprecated feature is used.\n"
"\n"
"As part of the import process, 'Package::DeprecationManager' will export two "
"subroutines into its caller. It provides an 'import()' sub for the caller "
"and a 'deprecated()' sub.\n"
"\n"
"The 'import()' sub allows callers of _your_ class to specify an '-"
"api_version' parameter. If this is supplied, then deprecation warnings are "
"only issued for deprecations with API versions earlier than the one "
"specified.\n"
"\n"
"You must call the 'deprecated()' sub in each deprecated subroutine. When "
"called, it will issue a warning using 'Carp::cluck()'.\n"
"\n"
"The 'deprecated()' sub can be called in several ways. If you do not pass any "
"arguments, it will generate an appropriate warning message. If you pass a "
"single argument, this is used as the warning message.\n"
"\n"
"Finally, you can call it with named arguments. Currently, the only allowed "
"names are 'message' and 'feature'. The 'feature' argument should correspond "
"to the feature name passed in the '-deprecations' hash.\n"
"\n"
"If you don't explicitly specify a feature, the 'deprecated()' sub uses "
"'caller()' to identify its caller, using its fully qualified subroutine "
"name.\n"
"\n"
"A given deprecation warning is only issued once for a given package. This "
"module tracks this based on both the feature name _and_ the error message "
"itself. This means that if you provide several different error messages for "
"the same feature, all of those errors will appear."
msgstr ""
"このモジュールは、 1 つまたは複数のモジュールに対する非推奨セットを管理するこ"
"とができます。\n"
"\n"
"'Package::DeprecationManager' をインポートする際、ハッシュ参照として '-"
"deprecations' のセットを提供しなければなりません。キーは \"機能\" の名前で、"
"値はその機能が非推奨となったバージョンを表します。\n"
"\n"
"多くの場合、サブルーチンやメソッドの完全修飾名を機能名として使用することがで"
"きます。これにより、サブルーチン全体を非推奨とすることができます。しかしなが"
"ら、機能名は任意の文字列でかまいません。これは、サブルーチン全体ではなく、特"
"定の用途のみを非推奨としたい場合に便利です。\n"
"\n"
"なお、オプションで '-ignore' パラメータを指定することもできます。\n"
"\n"
"値はパッケージ名または正規表現 ('qr//' で指定) で、無視すべきものを指定しま>"
"す。これを使用することで、非推奨の機能を利用してしまったような場合でも、それ"
"を無視することができるようになります。\n"
"\n"
"プロセスのインポートの一部として、 'Package::DeprecationManager' は呼び出し元"
"に 2 種類のサブルーチンを提供します。それぞれ 'import()', 'deprecated()' と呼"
"ばれます。\n"
"\n"
"'import()' サブはお使いのクラスの呼び出し元に対して、 '-api_version' のパラ>"
"メータを指定できるようにします。これを指定した場合、非推奨の警告は指定した "
"API バージョンよりも前のものであった場合にのみ発せられるようになります。\n"
"\n"
"また、非推奨のサブルーチンそれぞれから 'deprecated()' サブを呼び出すこともで"
"きます。これを呼び出すと、 'Carp::cluck()' を利用して警告を発生させます。\n"
"\n"
"'deprecated()' サブはいくつかの方法で呼び出すことができます。何もパラメータ>"
"を指定しない場合は、適切な警告メッセージが生成されます。 1 つのパラメータを指"
"定した場合は、それを警告メッセージとして使用します。\n"
"\n"
"最後に、名前付きのパラメータを指定することもできます。現時点では 'message', "
"'feature' の各名前を指定することができますが、 'feature' では '-"
"deprecations' ハッシュ内に渡す機能名を指定します。\n"
"\n"
"明示的に機能を指定しない場合、 'deprecated()' サブは 'caller()' を利用して完"
"全修飾のサブルーチン名を判断し、呼び出し元を識別します。\n"
"\n"
"指定した非推奨の警告は、パッケージごとに 1 回のみ発せられます。このモジュー>"
"ルは機能名とエラーメッセージの _両方_ を追跡する仕組みであるためです。これに"
"より、同じ機能に対して異なるエラーメッセージを指定した場合、これらすべてのエ"
"ラーメッセージが表示されることになります。"

#. leap/perl-Package-Generator/summary
msgid "generate new packages quickly and easily"
msgstr "新しいパッケージを素早く簡単に作成するモジュール"

#. leap/perl-Package-Generator/description
msgid ""
"This module lets you quickly and easily construct new packages. It gives "
"them unused names and sets up their package data, if provided."
msgstr ""
"このモジュールは、新しいパッケージを素早く簡単に構築するための仕組みです。未"
"使用の名前が指定され、パッケージのデータのセットアップまでが行なわれます。"

#. leap/perl-Package-Stash/summary
msgid "routines for manipulating stashes"
msgstr "Stash を扱うためのルーチン集"

#. leap/perl-Package-Stash/description
msgid ""
"Manipulating stashes (Perl's symbol tables) is occasionally necessary, but "
"incredibly messy, and easy to get wrong. This module hides all of that "
"behind a simple API.\n"
"\n"
"NOTE: Most methods in this class require a variable specification that "
"includes a sigil. If this sigil is absent, it is assumed to represent the IO "
"slot.\n"
"\n"
"Due to limitations in the typeglob API available to perl code, and to "
"typeglob manipulation in perl being quite slow, this module provides two "
"implementations - one in pure perl, and one using XS. The XS implementation "
"is to be preferred for most usages; the pure perl one is provided for cases "
"where XS modules are not a possibility. The current implementation in use "
"can be set by setting '$ENV{PACKAGE_STASH_IMPLEMENTATION}' or '$Package::"
"Stash::IMPLEMENTATION' before loading Package::Stash (with the environment "
"variable taking precedence), otherwise, it will use the XS implementation if "
"possible, falling back to the pure perl one."
msgstr ""
"stash (Perl のシンボルテーブル) の操作は時折必要となるものですが、乱雑であり"
"間違いやすいものでもあります。このモジュールは、そのような面倒をシンプルな "
"API で隠ぺいします。\n"
"\n"
"注意: このクラス内にある多くのメソッドは、 sigil を含む変数指定が必要となりま"
"す。 sigil が指定されていない場合、 IO スロットを表すものとして扱われます。\n"
"\n"
"Perl コードで利用できる typeglob API の制限と、 Perl における typeglob 操作が"
"非常に遅いという制限から、このモジュールは 2 つの実装を提供しています -  1 つ"
"はPerl, もう 1 つは XS を利用したものです。 XS 実装は多くの用途で推奨されるも"
"のであり、 Perl 実装は XS 実装では不十分な場合に利用します。実装の選択は、 "
"Package::Stash の読み込み前 (環境変数が優先権を持つ段階) に、 "
"'$ENV{PACKAGE_STASH_IMPLEMENTATION}' または '$Package::Stash::"
"IMPLEMENTATION' を指定することで設定することができます。何も指定しない場合"
"は、可能な限り XS 実装が選択され、それでもうまく動作しない場合にのみ Perl 実"
"装に移行します。"

#. leap/perl-Package-Stash-XS/summary
msgid "faster and more correct implementation of the Package::Stash API"
msgstr "Package::Stash API の高速でより正しい実装"

#. leap/perl-Package-Stash-XS/description
msgid ""
"This is a backend for the Package::Stash manpage, which provides the "
"functionality in a way that's less buggy and much faster. It will be used by "
"default if it's installed, and should be preferred in all environments with "
"a compiler."
msgstr ""
"これは Package::Stash のバックエンドで、バグも少なく高速に動作する機能を提供"
"します。インストールされていれば、このモジュールが既定で使用されるようになっ"
"ていて、コンパイラのある環境であれば全ての環境で推奨されます。"

#. leap/perl-Package-Variant/summary
msgid "Parameterizable packages"
msgstr "パラメータ化可能なパッケージ"

#. leap/perl-Package-Variant/description
msgid ""
"This module allows you to build a variable package that contains a package "
"template and can use it to build variant packages at runtime.\n"
"\n"
"Your variable package will export a subroutine which will build a variant "
"package, combining its arguments with the template, and return the name of "
"the new variant package.\n"
"\n"
"The implementation does not care about what kind of packages it builds, be "
"they simple function exporters, classes, singletons or something entirely "
"different."
msgstr ""
"このモジュールは、パッケージのひな型を含む可変性のあるパッケージを構築し、出"
"来上がったパッケージを実行時に構築する仕組みです。\n"
"\n"
"可変性のあるパッケージは自身を構築するサブルーチンを公開し、パラメータとして"
"ひな型を指定することで、新しく作成されたパッケージを返します。\n"
"\n"
"実装側ではどのような種類のパッケージを構築するのかについて注意を行なっていま"
"せんが、非常にシンプルなエクスポータやクラス、シングルトンなど、様々なものを"
"構築することができます。"

#. leap/perl-PadWalker/summary
msgid "Play with other peoples' lexical variables"
msgstr "他の人々のレキシカル変数の使用"

#. leap/perl-PadWalker/description
msgid ""
"PadWalker is a module which allows you to inspect (and even change!) lexical "
"variables in any subroutine which called you. It will only show those "
"variables which are in scope at the point of the call.\n"
"\n"
"PadWalker is particularly useful for debugging. It's even used by Perl's "
"built-in debugger. (It can also be used for evil, of course.)\n"
"\n"
"I wouldn't recommend using PadWalker directly in production code, but it's "
"your call. Some of the modules that use PadWalker internally are certainly "
"safe for and useful in production."
msgstr ""
"PadWalker は任意のサブルーチン内にある lexical 変数を検査 (および修正) するこ"
"とができるモジュールです。呼び出しの時点で、そのスコープ内にある変数のみを表"
"示することができます。\n"
"\n"
"PadWalker は特にデバッグ用に便利なモジュールです。 Perl の内蔵デバッガでも使"
"用されています (もちろん、悪用することもできてしまいます) 。\n"
"\n"
"PadWalker は本番用途の環境では使用しないことをお勧めしますが、お使いの呼び出"
"しで利用してもかまいません。 PadWalker 内で内部的に使用しているモジュールは、"
"内部的に安全なものであり、本番環境でも有用です。"

#. leap/perl-Pango/summary
msgid "Layout and render international text"
msgstr "国際化テキストの配置と描画"

#. leap/perl-Pango/description
msgid ""
"Pango is a library for laying out and rendering text, with an emphasis on "
"internationalization. Pango can be used anywhere that text layout is needed, "
"but using Pango in conjunction with L<Cairo> and/or L<Gtk2> provides a "
"complete solution with high quality text handling and graphics rendering.\n"
"\n"
"Dynamically loaded modules handle text layout for particular combinations of "
"script and font backend. Pango provides a wide selection of modules, "
"including modules for Hebrew, Arabic, Hangul, Thai, and a number of Indic "
"scripts. Virtually all of the world's major scripts are supported.\n"
"\n"
"In addition to the low level layout rendering routines, Pango includes "
"Pango::Layout, a high level driver for laying out entire blocks of text, and "
"routines to assist in editing internationalized text."
msgstr ""
"Pango はテキストの配置や描画を行なうライブラリで、主に国際化を主眼に置いて開"
"発されています。テキストの配置が必要な様々な場所で使用することができますが、"
"Pango と L<Cairo> 、および L<Gtk2> と共に使用することで、高品質なテキスト処理"
"およびグラフィック描画の完全ソリューションを提供します。\n"
"\n"
"動的に読み込まれたモジュールは、特定のスクリプトとフォントのバックエンドを組"
"み合わせて、テキストの処理を行ないます。 Pango は幅広いモジュールを提供してい"
"て、ヘブライ語やアラビア語、ハングルやタイ語、多数のインド文字に対応していま"
"す。設計上は世界中にある主な言語すべてに対応しています。\n"
"\n"
"低レベルの描画ルーチンに加え、 Pango では Pango::Layout と呼ばれる仕組みも提"
"供しています。これはテキストブロック全体を配置するための高レベルなドライバ"
"で、国際化されたテキストの編集を支援するルーチンです。"

#. leap/perl-Params-Classify/summary
msgid "Argument Type Classification"
msgstr "パラメータタイプの分類"

#. leap/perl-Params-Classify/description
msgid ""
"This module provides various type-testing functions. These are intended for "
"functions that, unlike most Perl code, care what type of data they are "
"operating on. For example, some functions wish to behave differently "
"depending on the type of their arguments (like overloaded functions in C+"
"+).\n"
"\n"
"There are two flavours of function in this module. Functions of the first "
"flavour only provide type classification, to allow code to discriminate "
"between argument types. Functions of the second flavour package up the most "
"common type of type discrimination: checking that an argument is of an "
"expected type. The functions come in matched pairs, of the two flavours, and "
"so the type enforcement functions handle only the simplest requirements for "
"arguments of the types handled by the classification functions. Enforcement "
"of more complex types may, of course, be built using the classification "
"functions, or it may be more convenient to use a module designed for the "
"more complex job, such as Params::Validate.\n"
"\n"
"This module is implemented in XS, with a pure Perl backup version for "
"systems that can't handle XS."
msgstr ""
"このモジュールは様々なタイプテスト機能を提供します。これらはほとんどの Perl "
"コードのやり方とは異なり、データの種類が何であるのかを判別するために用意され"
"ているものです。たとえば、パラメータとして与えられたデータの種類によって、そ"
"の動作を変えるような (例えれば C++ 言語におけるオーバーロード関数など) 用途が"
"考えられます。\n"
"\n"
"このモジュールで提供される関数には、 2 種類のものがあります。 1 つはデータタ"
"イプの分類のみを行なう機能で、パラメータのタイプを区別するための仕組みです。"
"もう 1 つは、よくあるタイプの区別をパッケージ化しているもので、指定したパラ"
"メータが期待通りであるかどうかを識別するものです。関数は 2 つの種類を組にして"
"提供されるため、複雑なタイプを強制するような仕組みも分類機能を利用すれば構築"
"できるほか、 Params::Validate のような複雑な処理を行なうモジュールを作成する"
"のも簡単に行なうことができます。\n"
"\n"
"このモジュールは XS で実装されていますが、 XS を処理できないシステム向けに "
"Perl のみで実装されている版もあります。"

#. leap/perl-Params-Coerce/summary
msgid "Allows your classes to do coercion of parameters"
msgstr "お使いのクラスでパラメータの強制を行なうモジュール"

#. leap/perl-Params-Coerce/description
msgid ""
"A big part of good API design is that we should be able to be flexible in "
"the ways that we take parameters.\n"
"\n"
"Params::Coerce attempts to encourage this, by making it easier to take a "
"variety of different arguments, while adding negligible additional "
"complexity to your code."
msgstr ""
"良い API 設計で重要な点は、パラメータを取る方法によって柔軟な仕組みになりうる"
"ものであることだ。\n"
"\n"
"Params::Coerce はこのような仕組みを支援するためのもので、様々な種類のパラメー"
"タを取ることで、コード内の複雑性をあまり増やさない仕組みを提供します。"

#. leap/perl-Params-Util/summary
msgid "Simple, compact and correct param-checking functions"
msgstr "シンプルでコンパクト、修正機能にも対応したパラメータチェック関数"

#. leap/perl-Params-Util/description
msgid ""
"'Params::Util' provides a basic set of importable functions that makes "
"checking parameters a hell of a lot easier\n"
"\n"
"While they can be (and are) used in other contexts, the main point behind "
"this module is that the functions *both* Do What You Mean, and Do The Right "
"Thing, so they are most useful when you are getting params passed into your "
"code from someone and/or somewhere else and you can't really trust the "
"quality.\n"
"\n"
"Thus, 'Params::Util' is of most use at the edges of your API, where params "
"and data are coming in from outside your code.\n"
"\n"
"The functions provided by 'Params::Util' check in the most strictly correct "
"manner known, are documented as thoroughly as possible so their exact "
"behaviour is clear, and heavily tested so make sure they are not fooled by "
"weird data and Really Bad Things.\n"
"\n"
"To use, simply load the module providing the functions you want to use as "
"arguments (as shown in the SYNOPSIS).\n"
"\n"
"To aid in maintainability, 'Params::Util' will *never* export by default.\n"
"\n"
"You must explicitly name the functions you want to export, or use the ':ALL' "
"param to just have it export everything (although this is not recommended if "
"you have any _FOO functions yourself with which future additions to 'Params::"
"Util' may clash)"
msgstr ""
"'Params::Util' は面倒なパラメータチェックを簡単に行なうための基本的な組み込み"
"のできる関数集を提供しています。\n"
"\n"
"他のコンテキスト内で使用することもできますが、このモジュールの主な利点として"
"は、関数の意味するものと正確性を両立できるということにあります。これはお使い"
"のコードでパラメータを受け取る場合、それらの品質を信頼できないような状況下で"
"便利な機能です。\n"
"\n"
"そのため、 'Params::Util' はパラメータとデータが外部から渡されるようなコード"
"の場合、API の冒頭で使用しておくことがほとんどです。\n"
"\n"
"'Params::Util' で提供される関数は、最も厳密な既知の修正マナーで実施され、それ"
"らのルールはできるかぎり大まかなドキュメント化が為され、動作ができるだけ明確"
"になるように作られています。また厳しいテストにより不自然なデータや明らかに不"
"正なデータで混乱を来たさないような作りになっています。\n"
"\n"
"使用する際は単純に、使用したい関数を提供するモジュールをパラメータとして指定"
"して読み込むだけです (SYNOPSIS をお読みください) 。\n"
"\n"
"なお、メンテナンス性を高める目的から、 'Params::Util' は既定では何もエクス"
"ポートしていません。\n"
"\n"
"エクスポートしたい関数は明示的に指定するか、もしくは ':ALL' を指定してすべて"
"のものをエクスポートすることもできます (特定の関数を利用するにあたっては、こ"
"れはお勧めの方法ではありません。今後の追加により 'Param::Util' がクラッシュす"
"る可能性があるためです) 。"

#. leap/perl-Params-Validate/summary
msgid "Validate method/function parameters"
msgstr "メソッド／関数のパラメータの確認"

#. leap/perl-Params-Validate/description
msgid ""
"*I would recommend you consider using Params::ValidationCompiler instead. "
"That module, despite being pure Perl, is _significantly_ faster than this "
"one, at the cost of having to adopt a type system such as Specio, Type::"
"Tiny, or the one shipped with Moose*.\n"
"\n"
"This module allows you to validate method or function call parameters to an "
"arbitrary level of specificity. At the simplest level, it is capable of "
"validating the required parameters were given and that no unspecified "
"additional parameters were passed in.\n"
"\n"
"It is also capable of determining that a parameter is of a specific type, "
"that it is an object of a certain class hierarchy, that it possesses certain "
"methods, or applying validation callbacks to arguments."
msgstr ""
"* このモジュールの代わりに Params::ValidationCompiler モジュールをお使いにな"
"ることをお勧めします。左記のモジュールは純粋 Perl 実装ですが、 Specio, Type::"
"Tiny のほか、 Moose* に同梱されているタイプシステムに合わせるコストがあるもの"
"の、このモジュールよりは _比較的_ 高速に動作します。\n"
"\n"
"このモジュールは、任意のレベルで特性を設定できる、メソッドおよび関数の呼び出"
"しパラメータ検証機能を提供します。もっともシンプルなレベルでは、必要なパラ"
"メータが与えられているかどうかを検証し、不正な追加パラメータが設定されていな"
"いかどうかを確認することができます。\n"
"\n"
"また、パラメータが正しい型であるかどうかを確認することもできます。たとえばそ"
"れは特定のクラス階層であるかどうかや、特定のメソッドを保有しているかどうかを"
"確認できるほか、検証コールバックをパラメータに対して適用することもできます。"

#. leap/perl-Params-ValidationCompiler/summary
msgid "Build an optimized subroutine parameter validator once, use it forever"
msgstr ""
"検証を一度だけ実施して、それを使い回すような最適なサブルーチンを構築するため"
"のモジュール"

#. leap/perl-Params-ValidationCompiler/description
msgid ""
"This module creates a customized, highly efficient parameter checking "
"subroutine. It can handle named or positional parameters, and can return the "
"parameters as key/value pairs or a list of values.\n"
"\n"
"In addition to type checks, it also supports parameter defaults, optional "
"parameters, and extra \"slurpy\" parameters."
msgstr ""
"このモジュールは、効率よくパラメータをチェックするような独自のサブルーチンを"
"作成します。名前付きおよび位置指定のパラメータを処理することができるほか、"
"キーと値の対や値のリストなどを受け付けることができます。\n"
"\n"
"また、データ型のチェックやパラメータ値の既定値、任意指定のパラメータなどの "
"\"便利な\" 仕組みを備えています。"

#. leap/perl-Parse-CPAN-Packages/summary
msgid "Parse 02packages.details.txt.gz"
msgstr "02packages.details.txt.gz の処理"

#. leap/perl-Parse-CPAN-Packages/description
msgid ""
"The Comprehensive Perl Archive Network (CPAN) is a very useful collection of "
"Perl code. It has several indices of the files that it hosts, including a "
"file named \"02packages.details.txt.gz\" in the \"modules\" directory. This "
"file contains lots of useful information and this module provides a simple "
"interface to the data contained within.\n"
"\n"
"In a future release the Parse::CPAN::Packages::Package manpage and the "
"Parse::CPAN::Packages::Distribution manpage might have more information."
msgstr ""
"Comprehensive Perl Archive Network (CPAN) は非常に便利な Perl コード集です。 "
"\"modules\" ディレクトリ内の \"02packages.details.txt.gz\" ファイルを含む、提"
"供するファイルに対する索引がいくつか提供されています。 \"02packages.details."
"txt.gz\" ファイルには便利な情報が数多く含まれており、このモジュールでは、この"
"ファイルに対するシンプルなインターフェイスを提供しています。\n"
"\n"
"Parse::CPAN::Packages::Package, Parse::CPAN::Packages::Distribution の将来の"
"バージョンでは、さらなる情報が提供されるようになる予定です。"

#. leap/perl-Parse-Method-Signatures/summary
msgid "Perl6 like method signature parser"
msgstr "Perl6 のようなメソッド署名パーサ"

#. leap/perl-Parse-Method-Signatures/description
msgid ""
"Inspired by Perl6::Signature but streamlined to just support the subset "
"deemed useful for TryCatch and MooseX::Method::Signatures."
msgstr ""
"Perl6::Signature にヒントを得て作られたものですが、 TryCatch や MooseX::"
"Method::Signatures で有用であると考えられる部分のみに対応した直感的なつくりに"
"なっています。"

#. leap/perl-Parse-PMFile/summary
msgid "Parses .pm file as PAUSE does"
msgstr "PAUSE と同じ方法での .pm ファイルの処理"

#. leap/perl-Parse-PMFile/description
msgid ""
"The most of the code of this module is taken from the PAUSE code as of April "
"2013 almost verbatim. Thus, the heart of this module should be quite stable. "
"However, I made it not to use pipe (\"-|\") as well as I stripped database-"
"related code. If you encounter any issue, that's most probably because of my "
"modification.\n"
"\n"
"This module doesn't provide features to extract a distribution or parse meta "
"files intentionally."
msgstr ""
"このモジュールのほとんどのコードは、 2013 年の時点での PAUSE コードをほぼその"
"まま取り込んでいます。そのため、このモジュールの心臓部は非常に安定していま"
"す。しかしながら、パイプ (\"-\") を使用しないようにしたり、データベース関連の"
"コードを取り除いたりする作業は行なっています。何らかの問題が見つかった場合、"
"それらの多くはこの修正によるものと考えられます。\n"
"\n"
"このモジュールは、配布物を抽出したりメタファイルを故意に処理させたりする機能"
"は、提供していません。"

#. leap/perl-Parse-RecDescent/summary
#. leap/perl-Parse-RecDescent/description
msgid "Generate Recursive-Descent Parsers"
msgstr "再帰降下型パーサーの生成"

#. leap/perl-Parse-Win32Registry/summary
msgid "Parse Windows Registry Files"
msgstr "Windows レジストリファイルの処理"

#. leap/perl-Parse-Win32Registry/description
msgid ""
"Parse::Win32Registry is a module for parsing Windows Registry files, "
"allowing you to read the keys and values of a registry file without going "
"through the Windows API.\n"
"\n"
"It provides an object-oriented interface to the keys and values in a "
"registry file. Registry files are structured as trees of keys, with each key "
"containing further subkeys or values.\n"
"\n"
"The module is intended to be cross-platform, and run on those platforms "
"where Perl will run.\n"
"\n"
"It supports both Windows NT registry files (Windows NT, 2000, XP, 2003, "
"Vista, 7) and Windows 95 registry files (Windows 95, 98, Millennium "
"Edition).\n"
"\n"
"It is intended to be used to parse offline registry files. If a registry "
"file is currently in use, you will not be able to open it. However, you can "
"save part or all of a currently loaded registry file using the Windows reg "
"command if you have the appropriate administrative access."
msgstr ""
"Parse::Win32Registry は Windows のレジストリファイルを処理するためのモジュー"
"ルです。このモジュールは、 Windows API を介することなく、レジストリファイル内"
"のキーと値を読み込むことができます。\n"
"\n"
"レジストリファイル内のキーと値に対しては、オブジェクト指向のインターフェイス"
"が提供されます。レジストリファイルはツリー構造のキーで構成され、各キーにはさ"
"らなるサブキーまたは値が設定されます。\n"
"\n"
"このモジュールはプラットフォームに依存しないつくりになっていて、 Perl が動作"
"するプラットフォームで動作します。\n"
"\n"
"また、 Windows NT のレジストリファイル (Windows NT, 2000, XP, 2003, Vista, "
"7) のほか、 Windows 95 のレジストリファイル (Windows 95, 98, Millennium "
"Edition) にも対応しています。\n"
"\n"
"レジストリファイルはオフライン状態で使用することを前提にしています。レジスト"
"リファイルが使用中の場合は、レジストリを開くことができません。しかしながら、"
"管理者の権限があれば、 Windows 側で reg コマンドを使用することで、現在読み込"
"まれているレジストリファイルを保存して読み込むことができます。"

#. leap/perl-Parse-Yapp/summary
msgid "Perl extension for generating and using LALR parsers"
msgstr "LALR パーサを生成して使用するための Perl 拡張"

#. leap/perl-Parse-Yapp/description
msgid ""
"Parse::Yapp (Yet Another Perl Parser compiler) is a collection of modules "
"that let you generate and use yacc like thread safe (reentrant) parsers with "
"perl object oriented interface.\n"
"\n"
"The script yapp is a front-end to the Parse::Yapp module and let you easily "
"create a Perl OO parser from an input grammar file."
msgstr ""
"Parse::Yapp (Yet Another Perl Parser compiler) は、 Perl のオブジェクト指向イ"
"ンターフェイスを 持つ yacc に似たスレッドセーフ (再入可能) なパーサを生成し使"
"用することができる、 モジュール集です。\n"
"\n"
"スクリプト yapp は Parse::Yapp モジュールに対するフロントエンドで、入力文法"
"ファイルから Perl の OO パーサを簡単に作成することができます。"

#. leap/perl-PatchReader/summary
msgid "Utilities to read and manipulate patches and CVS"
msgstr "パッチや CVS を読み込んだり操作したりするためのユーティリティ"

#. leap/perl-PatchReader/description
msgid ""
"This perl library allows you to manipulate patches programmatically by "
"chaining together a variety of objects that read, manipulate, and output "
"patch information."
msgstr ""
"この Perl ライブラリは、パッチ情報を読み込んだり、操作したり、出力したりする"
"様々なオブジェクトを連鎖させることで、機械的にパッチを操作できる機能を提供し"
"ます。"

#. leap/perl-Path-Class/summary
msgid "Cross-platform path specification manipulation"
msgstr "パス仕様を処理するためのクロスプロットフォームモジュール"

#. leap/perl-Path-Class/description
msgid ""
"'Path::Class' is a module for manipulation of file and directory "
"specifications (strings describing their locations, like ''/home/ken/foo."
"txt'' or ''C:\\Windows\\Foo.txt'') in a cross-platform manner. It supports "
"pretty much every platform Perl runs on, including Unix, Windows, Mac, VMS, "
"Epoc, Cygwin, OS/2, and NetWare.\n"
"\n"
"The well-known module File::Spec also provides this service, but it's sort "
"of awkward to use well, so people sometimes avoid it, or use it in a way "
"that won't actually work properly on platforms significantly different than "
"the ones they've tested their code on.\n"
"\n"
"In fact, 'Path::Class' uses 'File::Spec' internally, wrapping all the "
"unsightly details so you can concentrate on your application code. Whereas "
"'File::Spec' provides functions for some common path manipulations, 'Path::"
"Class' provides an object-oriented model of the world of path specifications "
"and their underlying semantics. 'File::Spec' doesn't create any objects, and "
"its classes represent the different ways in which paths must be manipulated "
"on various platforms (not a very intuitive concept). 'Path::Class' creates "
"objects representing files and directories, and provides methods that relate "
"them to each other. For instance, the following 'File::Spec' code:\n"
"\n"
" my $absolute = File::Spec->file_name_is_absolute(                   File::"
"Spec->catfile( @dirs, $file )                 );\n"
"\n"
"can be written using 'Path::Class' as\n"
"\n"
" my $absolute = Path::Class::File->new( @dirs, $file )->is_absolute;\n"
"\n"
"or even as\n"
"\n"
" my $absolute = file( @dirs, $file )->is_absolute;\n"
"\n"
"Similar readability improvements should happen all over the place when using "
"'Path::Class'.\n"
"\n"
"Using 'Path::Class' can help solve real problems in your code too - for "
"instance, how many people actually take the \"volume\" (like 'C:' on "
"Windows) into account when writing 'File::Spec'-using code? I thought not. "
"But if you use 'Path::Class', your file and directory objects will know what "
"volumes they refer to and do the right thing.\n"
"\n"
"The guts of the 'Path::Class' code live in the Path::Class::File and Path::"
"Class::Dir modules, so please see those modules' documentation for more "
"details about how to use them."
msgstr ""
"`Path::Class' は、ファイルやディレクトリの指定 (たとえば `'/home/ken/foo."
"txt''  や `'C:\\Windows\\Foo.txt'' のようなそれらを指し示す文字列) について、"
"プラットフォームに 依存しない仕様を提供するモジュールです。 Unix, Windows, "
"Mac, VMS, Epoc, Cygwin, OS/2, NetWare など、 Perl の動作する環境であればどこ"
"でも動作します。\n"
"\n"
"よく知られた `File::Spec' モジュールでもこのサービスを提供していますが、 使用"
"するには不便であるため、ユーザはこれらの使用を避けるか、もしくは作成した 環境"
"とは異なるプラットフォームでは動作しない方法を使ってしまいがちです。\n"
"\n"
" 事実、 `Path::Class' は `File::Spec' を内部的に使用していますが、全ての見苦"
"しい詳細は 隠蔽されるようになっていますので、アプリケーションコードの作成に集"
"中することができます。 また、 `File::Spec' はいくつかのパス操作のための関数を"
"提供していますが、 `Path::Class' は パス仕様とそれに伴う作業の分野についてオ"
"ブジェクト指向のモデルを提供しています。 `File::Spec' はいかなるオブジェクト"
"も作成しませんし、それらのクラスは 様々なプラットフォームで操作するにあたって"
"別々の方法をとらなければなりません (あまり直感的とは言えません) 。`Path::"
"Class' はファイルやディレクトリを示す オブジェクトを作成し、それらから相対的"
"に探るためのメソッドを提供しています。例えば下記の 'File::Spec' コードは:\n"
"\n"
" my $absolute = File::Spec->file_name_is_absolute(                   File::"
"Spec->catfile( @dirs, $file )                 );\n"
"\n"
"'Path::Class' を利用すると下記のようになります:\n"
"\n"
" my $absolute = Path::Class::File->new( @dirs, $file )->is_absolute;\n"
"\n"
"もしくは、下記のようになります:\n"
"\n"
" my $absolute = file( @dirs, $file )->is_absolute;\n"
"\n"
"'Path::Class' を利用すれば、どの場所からでも読みやすいコードを作成することが"
"できます。\n"
"\n"
"'Path::Class' を使用することにょって、コード内の問題を解決することにもつなが"
"ります。たとえば、どれだけ多くの人々が、 'File::Spec' を使用するにあたって "
"\"ボリューム\" (Windows でいうところの 'C:' など) を注意してきたことでしょ"
"う？おそらくは誰も気にしていないでしょう。しかし 'Path::Class' を使用すれば、"
"お使いのファイルやディレクトリのオブジェクトがどのボリュームに属しているのか"
"を知ることになりますので、このような環境での動作にも支障をきたすことがなくな"
"ります。\n"
"\n"
"'Path::Class' コードの考え方は、 Path::Class::File や Path::Class::Dir 内にも"
"生きています。これらの使用方法について、詳しくは各モジュールのドキュメンテー"
"ションをお読みください。"

#. leap/perl-Path-FindDev/summary
msgid "Find a development path somewhere in an upper hierarchy"
msgstr "上位の階層構造内のどこかにある開発用パスの検出"

#. leap/perl-Path-FindDev/description
msgid ""
"This package is mostly a glue layer around 'Path::IsDev' with a few "
"directory walking tricks.\n"
"\n"
"    use Path::FindDev qw( find_dev );\n"
"\n"
"    if ( my $root = find_dev('/some/path/to/something/somewhere')) "
"{         print \"development root = $root\";     } else {         print "
"\"No development root :(\";     }"
msgstr ""
"このパッケージは 'Path::IsDev' に対するグルーレイヤと呼ばれる仕組みで、いくつ"
"かのディレクトリに対するトリックを使用しています。\n"
"\n"
"    use Path::FindDev qw( find_dev );\n"
"\n"
"    if ( my $root = find_dev('/some/path/to/something/somewhere')) "
"{         print \"development root = $root\";     } else {         print "
"\"No development root :(\";     }"

#. leap/perl-Path-IsDev/summary
msgid "Determine if a given Path resembles a development source tree"
msgstr "指定したパスが開発用のソースツリーであるかどうかを判断するモジュール"

#. leap/perl-Path-IsDev/description
msgid ""
"This module is more or less a bunch of heuristics for determining if a given "
"path is a development tree root of some kind.\n"
"\n"
"This has many useful applications, notably ones that require behaviours for "
"\"installed\" modules to be different to those that are still \"in "
"development\""
msgstr ""
"このモジュールは、指定されたパスが何らかの手段による開発用のツリーかどうか"
"を、経験則を通じて判断するモジュールです。\n"
"\n"
"ここには多数の便利なアプリケーションがあります。特に、インストールされたモ"
"ジュールが開発中のものとは異なる動作を必要とするような仕組みに有用です。"

#. leap/perl-Path-Router/summary
msgid "Tool for Routing Paths"
msgstr "ルーティングパス向けツール"

#. leap/perl-Path-Router/description
msgid ""
"This module provides a way of deconstructing paths into parameters suitable "
"for dispatching on. It also provides the inverse in that it will take a list "
"of parameters, and construct an appropriate uri for it."
msgstr ""
"このモジュールはパスを分解して、それを発信するのに適したパラメータに分解しま"
"す。逆方向の処理、つまりパラメータのリストから適切な URI を構成する仕組みも用"
"意されています。"

#. leap/perl-Path-Tiny/summary
msgid "File path utility"
msgstr "ファイルパスユーティリティ"

#. leap/perl-Path-Tiny/description
msgid ""
"This module provides a small, fast utility for working with file paths. It "
"is friendlier to use than File::Spec and provides easy access to functions "
"from several other core file handling modules. It aims to be smaller and "
"faster than many alternatives on CPAN, while helping people do many common "
"things in consistent and less error-prone ways.\n"
"\n"
"Path::Tiny does not try to work for anything except Unix-like and Win32 "
"platforms. Even then, it might break if you try something particularly "
"obscure or tortuous. (Quick! What does this mean: '///../../..//./././a//"
"b/.././c/././'? And how does it differ on Win32?)\n"
"\n"
"All paths are forced to have Unix-style forward slashes. Stringifying the "
"object gives you back the path (after some clean up).\n"
"\n"
"File input/output methods 'flock' handles before reading or writing, as "
"appropriate (if supported by the platform).\n"
"\n"
"The '*_utf8' methods ('slurp_utf8', 'lines_utf8', etc.) operate in raw mode. "
"On Windows, that means they will not have CRLF translation from the ':crlf' "
"IO layer. Installing Unicode::UTF8 0.58 or later will speed up '*_utf8' "
"situations in many cases and is highly recommended. Alternatively, "
"installing PerlIO::utf8_strict 0.003 or later will be used in place of the "
"default ':encoding(UTF-8)'.\n"
"\n"
"This module depends heavily on PerlIO layers for correct operation and thus "
"requires Perl 5.008001 or later."
msgstr ""
"このモジュールは、ファイルパスを扱うための小さくて高速なユーティリティを提供"
"します。 File::Spec を利用するよりはフレンドリーな仕組みであり、他の中枢ファ"
"イルハンドルモジュールから簡単にアクセスするための関数も用意されています。ま"
"た、 CPAN 内で公開されている多数の同系モジュールよりも小さくて高速に動作する"
"ように作られているため、よくある様々な作業を一貫性のある、エラーを避けやすい"
"方法で行なうことができます。\n"
"\n"
"Path::Tiny は Unix と Win32 のプラットフォーム以外で動作するようには設計され"
"ていません。また、非常に分かりにくい表記や複雑な表記などは、うまく動作しない"
"場合もあります (例: '///../../..//./././a//b/.././c/././') 。\n"
"\n"
"すべてのパスは Unix スタイルで記述する必要があり、パスの区切りはスラッシュ "
"(/) で指定します。また、オブジェクトを文字列化すると、元のパスが返されます "
"(ただしいくつかのクリーンアップ処理が施されます) 。\n"
"\n"
"ファイルの入出力のメソッドを実行する際には、読み書きの処理の前に (プラット"
"フォーム側で対応していれば) 'flock' の処理が行なわれます。\n"
"\n"
"'*_utf8' メソッド ('slurp_utf8', 'lines_utf8' など) は RAW モードで動作するメ"
"ソッドです。 Windows の場合、 ':crlf' IO レイヤによる CRLF の処理が行なわれな"
"くなります。 Unicode::UTF8 0.58 もしくはそれ以降のバージョンをインストールし"
"ている場合、これらのメソッドの処理は多くの場合において高速化されます (そのた"
"め、インストールが推奨されます) 。このほか、 PerlIO::utf8_strict 0.003 もしく"
"はそれ以降のバージョンをインストールしている場合、デフォルトの ':"
"encoding(UTF-8)' の代わりに使用されるようにもなっています。\n"
"\n"
"このモジュールは正しい操作を PerlIO レイヤに多く依存しているため、 Perl "
"5.008001 もしくはそれ以降のバージョンが必要となります。"

#. leap/perl-PathTools/summary
#. leap/perl-PathTools/description
msgid "Tools for working with directory and file names"
msgstr "ディレクトリ名やファイル名を処理するツール"

#. leap/perl-Perl-Critic/summary
msgid "Critique Perl source code for best-practices"
msgstr "ベストプラクティスを達成するための Perl ソースコードチェック"

#. leap/perl-Perl-Critic/description
msgid ""
"Perl::Critic is an extensible framework for creating and applying coding "
"standards to Perl source code. Essentially, it is a static source code "
"analysis engine. Perl::Critic is distributed with a number of Perl::Critic::"
"Policy modules that attempt to enforce various coding guidelines. Most "
"Policy modules are based on Damian Conway's book *Perl Best Practices*. "
"However, Perl::Critic is *not* limited to PBP and will even support Policies "
"that contradict Conway. You can enable, disable, and customize those Polices "
"through the Perl::Critic interface. You can also create new Policy modules "
"that suit your own tastes.\n"
"\n"
"For a command-line interface to Perl::Critic, see the documentation for "
"perlcritic. If you want to integrate Perl::Critic with your build process, "
"Test::Perl::Critic provides an interface that is suitable for test programs. "
"Also, Test::Perl::Critic::Progressive is useful for gradually applying "
"coding standards to legacy code. For the ultimate convenience (at the "
"expense of some flexibility) see the criticism pragma.\n"
"\n"
"If you'd like to try Perl::Critic without installing anything, there is a "
"web-service available at http://perlcritic.com. The web-service does not yet "
"support all the configuration features that are available in the native "
"Perl::Critic API, but it should give you a good idea of what it does.\n"
"\n"
"Also, ActivePerl includes a very slick graphical interface to Perl-Critic "
"called 'perlcritic-gui'. You can get a free community edition of ActivePerl "
"from http://www.activestate.com."
msgstr ""
"Perl::Critic は拡張性のあるフレームワークで、 Perl のソースコードに対してコー"
"ド標準を作成し、それを適用することができるモジュールです。本質的には、ソース"
"コードの静的な分析エンジンです。 Perl::Critic には多数の Perl::Critic::"
"Policy モジュールが用意されていて、様々なコーディングガイドラインを強制できる"
"ようになっています。多くのポリシーモジュールは Damian Conway 氏の書籍 *Perl "
"Best Practices* をベースにしています。しかしながら、 Perl::Critic は左記の書"
"籍だけに限らず、この書籍に矛盾するポリシーにも対応しています。また、 Perl::"
"Critic インターフェイスを介することで、これらのポリシーの有効／無効を切り替え"
"たり、カスタマイズしたりすることもできます。このほか、必要に応じて独自のポリ"
"シーモジュールを作成することもできます。\n"
"\n"
"Perl::Critic のコマンドラインインターフェイスについては、 perlcritic のドキュ"
"メンテーションをお読みください。また、構築プロセス内に Perl::Critic を組み込"
"みたい場合は、 Test::Perl::Critic がプログラムをテストするためのインターフェ"
"イス機能を提供しています。このほか、 Test::Perl::Critic::Progressive では、古"
"いコードに対して少しずつコード標準を適用していくための仕組みもあります。最大"
"限の利便性をもたらしたい場合 (ただし柔軟性による負荷もあります) は、 "
"criticism プラグマをご覧ください。\n"
"\n"
"どのモジュールもインストールせずに Perl::Critic を試したい場合は、 http://"
"perlcritic.com にある Web サービスをご利用いただくこともできます。この Web "
"サービスは、 Perl::Critic の API に用意されている設定機能には対応していません"
"が、このモジュールがどのような動作をするのかを確かめるためのヒントにはなりま"
"す。\n"
"\n"
"このほか、 ActivePerl には 'perlcritic-gui' と呼ばれる非常にわかりやすいグラ"
"フィカルインターフェイスも用意されています。 ActivePerl のコミュニティ版をダ"
"ウンロードしたい場合は、 http://www.activestate.com をご覧ください。"

#. leap/perl-Perl-Critic-Freenode/summary
msgid "Perl::Critic policies inspired by #perl on"
msgstr "#perl on からヒントを得て作られた Perl::Critic ポリシー"

#. leap/perl-Perl-Critic-Freenode/description
msgid ""
"A set of Perl::Critic policies to enforce the practices generally "
"recommended by the denizens of #perl on at https://freenode.net/. Because "
"this policy \"theme\" is designed to be used with zero configuration on the "
"command line, some duplication will occur if it is used in combination with "
"core Perl::Critic policies."
msgstr ""
"https://freenode.net/ の #perl に常駐している利用者が推奨する、一般的なスタイ"
"ルを強制するための Perl::Critic ポリシーセットです。このポリシーは、コマンド"
"ラインで一切の設定を行なうことなく動作することを目指しているため、中枢となる "
"Perl::Critic ポリシーと組み合わせて使用すると、同じ指摘が複数回表示されてしま"
"うことがあります。"

#. leap/perl-Perl-Critic-Policy-Variables-ProhibitLoopOnHash/summary
msgid "Don't write loops on hashes, only on keys and values of hashes"
msgstr "ハッシュそのものではなくキーと値に対するループの作成"

#. leap/perl-Perl-Critic-Policy-Variables-ProhibitLoopOnHash/description
msgid ""
"When \"looping over hashes,\" we mean looping over hash keys or hash values. "
"If you forgot to call 'keys' or 'values' you will accidentally loop over "
"both.\n"
"\n"
"    foreach my $foo (%hash) {...}        # not ok     action() for "
"%hash;                  # not ok     foreach my $foo ( keys %hash ) {...} # "
"ok     action() for values %hash;           # ok\n"
"\n"
"An effort is made to detect expressions:\n"
"\n"
"    action() for %hash ? keys %hash : ();                             # "
"ok     action() for % ? keys % : (); # ok\n"
"\n"
"(Granted, the second example there doesn't make much sense, but I have found "
"a variation of it in real code.)"
msgstr ""
"\"ハッシュに対するループ\" とは一般に、ハッシュのキーや値に対するループを意味"
"します。もしも 'keys' や 'values' の呼び出しをせずにループを行なってしまう"
"と、その両方に対してループが動作してしまいます。\n"
"\n"
"    foreach my $foo (%hash) {...}        # not ok\n"
"    action() for %hash;                  # not ok\n"
"    foreach my $foo ( keys %hash ) {...} # ok\n"
"    action() for values %hash;           # ok\n"
"\n"
"そのため、下記のような表現で適切なループを行ないます:\n"
"\n"
"    action() for %hash ? keys %hash : ();                             # ok\n"
"    action() for % ? keys % : (); # ok\n"
"\n"
"(2 番目の例はあまり意味のあるものではありませんが、実際のコード内にも類似の"
"コードが存在しています)"

#. leap/perl-Perl-Critic-Pulp/summary
msgid "Some add-on perlcritic policies"
msgstr "いくつかのアドオン Perlcritic ポリシー"

#. leap/perl-Perl-Critic-Pulp/description
msgid ""
"This is a collection of add-on policies for 'Perl::Critic'. They're under a "
"\"pulp\" theme plus other themes according to their purpose (see Perl::"
"Critic/POLICY THEMES)."
msgstr ""
"これは 'Perl::Critic' 向けのアドオンポリシー集です。それぞれの目的に合わせ"
"て、 \"pulp\" テーマやその他のテーマ内に存在しています (詳しくは Perl::"
"Critic/POLICY THEMES をお読みください) 。"

#. leap/perl-Perl-PrereqScanner/summary
msgid "Tool to scan your Perl code for its prerequisites"
msgstr "Perlコードの前提条件をスキャンするツール"

#. leap/perl-Perl-PrereqScanner/description
msgid ""
"The scanner will extract loosely your distribution prerequisites from your "
"files.\n"
"\n"
"The extraction may not be perfect but tries to do its best. It will "
"currently find the following prereqs:\n"
"\n"
"  * plain lines beginning with 'use' or 'require' in your perl modules and "
"scripts, including minimum perl version\n"
"\n"
"  * regular inheritance declared with the 'base' and 'parent' pragmata\n"
"\n"
"  * Moose inheritance declared with the 'extends' keyword\n"
"\n"
"  * Moose roles included with the 'with' keyword\n"
"\n"
"  * OO namespace aliasing using the 'aliased' module"
msgstr ""
"このスキャナは、お使いのファイルから、配布物内の事前要件 (prerequisites) をゆ"
"るく抽出します。\n"
"\n"
"抽出機能は完全なものではありませんが、できる限りのことを行ないます。現時点で"
"は下記のような機能があります:\n"
"\n"
"* Perl バージョンの最低要件を含む、 Perl モジュールやスクリプト内の 'use' や "
"'require' で始まる行を抽出\n"
"\n"
"* 'base' や 'parent' のプラグマタで定義されている一般的な継承関係を抽出\n"
"\n"
"* 'extends' キーワードで定義された Moose の継承関係\n"
"\n"
"* 'with' キーワードで定義された Moose の役割\n"
"\n"
"* 'aliased' モジュールを利用した OO ネームスペースの別名にも対応"

#. leap/perl-Perl-Tidy/summary
msgid "Parses and beautifies perl source"
msgstr "Perl のソースコードを処理して美しくするモジュール"

#. leap/perl-Perl-Tidy/description
msgid ""
"This module makes the functionality of the perltidy utility available to "
"perl scripts. Any or all of the input parameters may be omitted, in which "
"case the @ARGV array will be used to provide input parameters as described "
"in the perltidy(1) man page.\n"
"\n"
"For example, the perltidy script is basically just this:\n"
"\n"
"    use Perl::Tidy;     Perl::Tidy::perltidy();\n"
"\n"
"The call to *perltidy* returns a scalar *$error_flag* which is TRUE if an "
"error caused premature termination, and FALSE if the process ran to normal "
"completion. Additional discuss of errors is contained below in the ERROR "
"HANDLING section."
msgstr ""
"このモジュールは、 Perl スクリプトに対して提供されている perltidy ユーティリ"
"ティの機能を実装したものです。入力パラメータは自由に省略することができます"
"が、この場合は @ARGV 配列が入力パラメータを指すものとみなされます (詳しくは "
"perltidy(1) のマニュアルページをお読みください。\n"
"\n"
"たとえば、 perltidy スクリプトは下記のようにして使用します:\n"
"\n"
"    use Perl::Tidy;     Perl::Tidy::perltidy();\n"
"\n"
"*perltidy* はスカラー値の *$error_flag* を返します。この値が TRUE の場合、何"
"らかの問題が発生してエラーになったことを表し、 FALSE の場合は問題がなかったこ"
"とを表します。エラーに対する処理について、詳しくはマニュアルページの ERROR "
"HANDLING セクションをお読みください。"

#. leap/perl-Perl-Version/summary
msgid "Parse and manipulate Perl version strings"
msgstr "Perl のバージョン文字列の処理と操作"

#. leap/perl-Perl-Version/description
msgid ""
"Perl::Version provides a simple interface for parsing, manipulating and "
"formatting Perl version strings.\n"
"\n"
"Unlike version.pm (which concentrates on parsing and comparing version "
"strings) Perl::Version is designed for cases where you'd like to parse a "
"version, modify it and get back the modified version formatted like the "
"original.\n"
"\n"
"For example:\n"
"\n"
"    my $version = Perl::Version->new( '1.2.3' );     $version-"
">inc_version;     print \"$version\\n\";\n"
"\n"
"prints\n"
"\n"
"    1.3.0\n"
"\n"
"whereas\n"
"\n"
"    my $version = Perl::Version->new( 'v1.02.03' );     $version-"
">inc_version;     print \"$version\\n\";\n"
"\n"
"prints\n"
"\n"
"    v1.03.00\n"
"\n"
"Both are representations of the same version and they'd compare equal but "
"their formatting is different.\n"
"\n"
"Perl::Version tries hard to guess and recreate the format of the original "
"version and in most cases it succeeds. In rare cases the formatting is "
"ambiguous. Consider\n"
"\n"
"    1.10.03\n"
"\n"
"Do you suppose that second component '10' is zero padded like the third "
"component? Perl::Version will assume that it is:\n"
"\n"
"    my $version = Perl::Version->new( '1.10.03' );     $version-"
">inc_revision;     print \"$version\\n\";\n"
"\n"
"will print\n"
"\n"
"    2.00.00\n"
"\n"
"If all of the components after the first are the same length (two characters "
"in this case) and any of them begins with a zero Perl::Version will assume "
"that they're all zero padded to the same length.\n"
"\n"
"The first component and any alpha suffix are handled separately. In each "
"case if either of them starts with a zero they will be zero padded to the "
"same length when stringifying the version."
msgstr ""
"Perl::Version は、 Perl におけるバージョン文字列を処理したり、操作したり整形"
"したりすることのできるインターフェイスを提供します。\n"
"\n"
"version.pm (バージョン文字列の処理と比較に特化したモジュール) とは異なり、 "
"Perl::Version はバージョン文字列を読み込んで変更し、変更結果を再度元の形式に"
"整形しなおすような用途に向けて設計されています。\n"
"\n"
"たとえば下記のようなコードがあったとします:\n"
"\n"
"    my $version = Perl::Version->new( '1.2.3' );     $version-"
">inc_version;     print \"$version\\n\";\n"
"\n"
"上記のコードは、下記のように出力されます:\n"
"\n"
"    1.3.0\n"
"\n"
"また、下記のようなコードがあったとします:\n"
"\n"
"    my $version = Perl::Version->new( 'v1.02.03' );     $version-"
">inc_version;     print \"$version\\n\";\n"
"\n"
"上記は、下記のように出力されます:\n"
"\n"
"    v1.03.00\n"
"\n"
"いずれも同じバージョンを表すものですが、書式が異なっています。\n"
"\n"
"Perl::Version では、バージョン文字列の推測と再作成に労力を注いでいます。その"
"ため、多くの場合において読み込みは成功するようになっています。ただし、場合に"
"よっては書式を判断できない場合もあります、例えば下記のような例があります:\n"
"\n"
"    1.10.03\n"
"\n"
"上記の例において、 2 つめのパート '10' は 3 つめのパートのようにゼロ埋めする"
"かどうかを判断できません。 Perl::Version では下記のように動作します:\n"
"\n"
"    my $version = Perl::Version->new( '1.10.03' );     $version-"
">inc_revision;     print \"$version\\n\";\n"
"\n"
"上記は、下記のように出力されます:\n"
"\n"
"    2.00.00\n"
"\n"
"2 つめのパート以降のすべてのパートが同じ長さ (上記の例では 2 桁) であり、いず"
"れかのパートが '0' で始まる場合、 Perl::Version はすべてのパートが同じ長さに"
"なるようゼロ埋めを行ないます。\n"
"\n"
"最初のパートや英字の接頭辞に対する処理は別途行なわれます。いずれかのパートが "
"'0' で始まる場合、文字列化すると同じ長さになるようゼロ埋めが行なわれます。"

#. leap/perl-Perl6-Junction/summary
msgid "Perl6 style Junction operators in Perl5."
msgstr "Perl6 形式のジャンクション演算子の Perl5 向け実装"

#. leap/perl-Perl6-Junction/description
#. leap/perl-Syntax-Keyword-Junction/description
msgid ""
"This is a lightweight module which provides 'Junction' operators, the most "
"commonly used being 'any' and 'all'.\n"
"\n"
"Inspired by the Perl6 design docs, the http://dev.perl.org/perl6/doc/design/"
"exe/E06.html manpage.\n"
"\n"
"Provides a limited subset of the functionality of the Quantum::"
"Superpositions manpage, see the /\"SEE ALSO\" manpage for comment.\n"
"\n"
"Notice in the the /SYNOPSIS manpage above, that if you want to match against "
"a regular expression, you must use '==' or '!='. *Not* '=~' or '!~'. You "
"must also use a regex object, such as 'qr/\\d/', not a plain regex such as '/"
"\\d/'."
msgstr ""
"このモジュールは 'Junction' 演算子 (よくあるものとしては 'any' や 'all' な"
"ど) を提供する軽量なモジュールです。\n"
"\n"
"Perl6 の設計ドキュメント (http://dev.perl.org/perl6/doc/design/exe/E06.html) "
"からヒントを得て作られたものです。 \n"
"\n"
"Quantum::Superpositions の機能のうちの一部分を提供しています。詳しくは /"
"\"SEE ALSO\" をお読みください。\n"
"\n"
"/SYNOPSIS にも書いてありますが、正規表現を利用してマッチング処理をさせたい場"
"合は、 '==' または '!=' を使用してください。 '=~' や '!~' ではありません。ま"
"た、正規表現は 'qr/\\d/' のように正規表現オブジェクトを使用しなければなりませ"
"ん。 '/\\d/' のような純粋な正規表現は利用できません。"

#. leap/perl-PerlIO-Layers/summary
msgid "Querying your filehandle's capabilities"
msgstr "ファイルハンドルの機能の問い合わせ"

#. leap/perl-PerlIO-Layers/description
msgid ""
"Perl's filehandles are implemented as a stack of layers, with the bottom-"
"most usually doing the actual IO and the higher ones doing buffering, "
"encoding/decoding or transformations. PerlIO::Layers allows you to query the "
"filehandle's properties concerning these layers."
msgstr ""
"Perl のファイルハンドルはレイヤスタックとして実装されていて、最下層にあるもの"
"が実際の IO を扱い、それより上野ものはバッファやエンコード／デコードや変形な"
"どの処理を行なっています。 PerlIO::Layers は、ファイルハンドルの階層構造でど"
"のような属性が存在しているのかを問い合わせることができます。"

#. leap/perl-PerlIO-gzip/summary
msgid "Perl extension to provide a PerlIO layer to gzip/gunzip"
msgstr "PerlIO レイヤから gzip/gunzip の機能を提供する Perl 拡張"

#. leap/perl-PerlIO-gzip/description
msgid ""
"PerlIO::gzip provides a PerlIO layer that manipulates files in the format "
"used by the 'gzip' program. Compression and Decompression are implemented, "
"but not together. If you attempt to open a file for reading and writing the "
"open will fail."
msgstr ""
"PerlIO::gzip は 'gzip' プログラムで使用される形式のファイルを扱う PerlIO レイ"
"ヤです。圧縮と展開のそれぞれが実装されていますが、両方を一括で指定することは"
"できません。読み込みと書き込みの両方を指定してファイルを開こうとすると、処理"
"が失敗します。"

#. leap/perl-PerlIO-locale/summary
msgid "PerlIO layer to use the encoding of the current locale"
msgstr "現在のロケールのエンコード方法を使用するための PerlIO レイヤ"

#. leap/perl-PerlIO-locale/description
msgid ""
"This is mostly a per-filehandle version of the 'open' pragma, when used "
"under the form\n"
"\n"
"    use open ':locale';\n"
"\n"
"The encoding for the opened file will be set to the encoding corresponding "
"to the locale currently in effect, if perl can guess it."
msgstr ""
"これは 'open' プラグマのファイルハンドル別のバージョンで、下記のような形式で"
"利用することができます:\n"
"\n"
"    use open ':locale';\n"
"\n"
"開いたファイルのエンコーディングは、 Perl 側で推測可能な場合、現在のロケール"
"に合わせて設定されます。"

#. leap/perl-PerlIO-utf8_strict/summary
msgid "Fast and correct UTF-8 IO"
msgstr "高速で正しい UTF-8 IO"

#. leap/perl-PerlIO-utf8_strict/description
msgid ""
"This module provides a fast and correct UTF-8 PerlIO layer. Unlike perl's "
"default ':utf8' layer it checks the input for correctness."
msgstr ""
"このモジュールは、高速で正しい UTF-8 の PerlIO レイヤを提供します。 Perl の既"
"定値である ':uf8' レイヤとは異なり、入力に対するチェックを実施します。"

#. leap/perl-PerlIO-via-Timeout/summary
msgid "PerlIO layer that adds read & write timeout to a handle"
msgstr "ハンドルに対して読み書きのタイムアウト機能を追加する PerlIO レイヤ"

#. leap/perl-PerlIO-via-Timeout/description
msgid ""
"This package implements a PerlIO layer, that adds read / write timeout. This "
"can be useful to avoid blocking while accessing a handle (file, "
"socket, ...), and fail after some time.\n"
"\n"
"The timeout is implemented by using '<select'> on the handle before reading/"
"writing. \n"
"*WARNING* the handle won't timeout if you use 'sysread' or 'syswrite' on it, "
"because these functions works at a lower level. However if you're trying to "
"implement a timeout for a socket, see the IO::Socket::Timeout manpage that "
"implements exactly that."
msgstr ""
"このパッケージは PerlIO レイヤを実装するもので、読み書きのタイムアウト時間の"
"機能を追加します。これはハンドル (ファイル、ソケットなど) へのアクセスに対し"
"て、一定時間が経過したのちに失敗として処理を中止する機能を提供します。\n"
"\n"
"タイムアウト機能は、読み書きの前にハンドルに対して '<select>' を実行すること"
"によって実装されています。\n"
"*警告* 'sysread' や 'syswrite' を使用している場合、これらは低レベルな範囲で動"
"作しているため、タイムアウトにはなりません。これらの処理に対してタイムアウト"
"を実装したい場合は、正確に実装している IO::Socket::Timeout をお使いください。"

#. leap/perl-PerlIO-via-dynamic/summary
msgid "Dynamic Perlio Layers"
msgstr "動的 PerlIO レイヤ"

#. leap/perl-PerlIO-via-dynamic/description
msgid ""
"'PerlIO::via::dynamic' is used for creating dynamic PerlIO layers. It is "
"useful when the behavior or the layer depends on variables. You should not "
"use this module as via layer directly (ie :via(dynamic)).\n"
"\n"
"Use the constructor to create new layers, with two arguments: translate and "
"untranslate. Then use '$p-'via ($fh)> to wrap the handle. Once <$fh> is "
"destroyed, the temporary namespace for the IO layer will be removed.\n"
"\n"
"Note that PerlIO::via::dynamic uses the scalar fields to reference to the "
"object representing the dynamic namespace."
msgstr ""
"'PerlIO::via::dynamic' は PerlIO の動的なレイヤを作成するための仕組みです。動"
"作やレイヤが変数によって変化するような場合に有用な仕組みです。なお、このモ"
"ジュールをレイヤとして直接使用すべきではありません (:via(dynamic)) 。\n"
"\n"
"新しいレイヤを作成するにはコンストラクタを利用し、 translate と untranslate "
"の 2 つのパラメータを指定してください。作成したあとは '$p-'via ($fh)> でハン"
"ドルをラッピングすることができます。 <$fh> を閉じた後は、 IO レイヤ用の一時的"
"なネームスペースが削除されます。\n"
"\n"
"ただし、 PerlIO::via::dynamic はスカラーフィールドを利用して動的なネームス"
"ペースを表すオブジェクトを参照していることに注意してください。"

#. leap/perl-Plack/summary
msgid "Perl Superglue for Web frameworks and Web Servers (PSGI toolkit)"
msgstr ""
"Web フレームワークおよび Web サーバ向け Perl スーパーグルー (PSGI ツールキッ"
"ト)"

#. leap/perl-Plack/description
msgid ""
"Plack is a set of tools for using the PSGI stack. It contains middleware "
"components, a reference server and utilities for Web application frameworks. "
"Plack is like Ruby's Rack or Python's Paste for WSGI.\n"
"\n"
"See PSGI for the PSGI specification and PSGI::FAQ to know what PSGI and "
"Plack are and why we need them."
msgstr ""
"Plack は PSGI スタックを使用するためのツール集です。ミドルウエアコンポーネン"
"トのほか、参照サーバや Web アプリケーションフレームワーク向けのユーティリティ"
"が含まれています。 Plack は Ruby における Rack や、 Python における WSGI 用"
"の Paste などのようなものです。\n"
"\n"
"PSGI の仕様については PSGI を、 PSGI と Plack が何物であるのかや、なぜ必要と"
"なるのかについては、 PSGI::FAQ をお読みください。"

#. leap/perl-Plack-Middleware-LogErrors/summary
msgid "Map psgi.errors to psgix.logger or other logger"
msgstr ""
"psgi.errors を psgix.logger または他の logger にマッピングするモジュール"

#. leap/perl-Plack-Middleware-LogErrors/description
msgid ""
"'psgi.errors' defaults to 'stderr' in most backends, which results in "
"content going somewhere unhelpful like the server console.\n"
"\n"
"This middleware simply remaps the 'psgi.errors' stream to the 'psgix.logger' "
"stream, or an explicit logger that you provide.\n"
"\n"
"This is especially handy when used in combination with other middlewares "
"such as the Plack::Middleware::LogWarn manpage (which diverts Perl warnings "
"to 'psgi.errors'); the Plack::Middleware::HTTPExceptions manpage (which "
"diverts uncaught exceptions to 'psgi.errors'); and the Plack::Middleware::"
"AccessLog manpage, which defaults to 'psgi.errors' when not passed a logger "
"-- which is also automatically applied via the plackup manpage (so if you "
"provided no '--access-log' option indicating a filename, 'psgi.errors' is "
"used)."
msgstr ""
"'psgi.errors' は多くのバックエンドでは既定で 'stderr' が指定されているため、"
"サーバのコンソールなどのあまり役に立たない場所にエラーが表示されてしまいま"
"す。\n"
"\n"
"このミドルウエアは 'psgi.errors' ストリームを 'psgix.logger' ストリームに再"
"マップするか、もしくは指定したロガーに明示的に転送します。\n"
"\n"
"これは特に、いずれもロガーが指定されない場合は 'psgi.errors' に出力される、 "
"Plack::Middleware::LogWarn  (Perl の警告を 'psgi.errors' に転送するモジュー"
"ル) や Plack::Middleware::HTTPExceptions (捕らえられていない例外を 'psgi."
"errors' に転送するモジュール) 、もしくは Plack::Middleware::AccessLog のよう"
"な他のミドルウエアと組み合わせて使用すると、特に便利な仕組みになります。ま"
"た、 plackup を介して自動的にも適用されます (そのため、 '--access-log' オプ"
"ションでファイル名を指定しない場合は、 'psgi.errors' が使用されます) 。"

#. leap/perl-Plack-Middleware-Session/summary
msgid "Middleware for session management"
msgstr "セッション管理用ミドルウエア"

#. leap/perl-Plack-Middleware-Session/description
msgid ""
"This is a Plack Middleware component for session management. By default it "
"will use cookies to keep session state and store data in memory. This "
"distribution also comes with other state and store solutions. See perldoc "
"for these backends how to use them.\n"
"\n"
"It should be noted that we store the current session as a hash reference in "
"the 'psgix.session' key inside the '$env' where you can access it as "
"needed. \n"
"*NOTE:* As of version 0.04 the session is stored in 'psgix.session' instead "
"of 'plack.session'."
msgstr ""
"このモジュールはセッション管理用の Plack ミドルウエアコンポーネントです。既定"
"では Cookie を利用してセッションの状態を維持し、メモリ内にデータを保存しま"
"す。この配布物にはその他の状態および保存ソリューションも用意されています。こ"
"れらのバックエンドの使用方法について、詳しくは perldoc をお読みください。\n"
"\n"
"なお、現在のセッションは '$env' 内の 'psgix.session' キー内にハッシュ参照とし"
"て保存される仕組みであるため、必要に応じてアクセスすることができるようになっ"
"ています。\n"
"*注意:* バージョン 0.04 以降では、 'plack.session' ではなく 'psgix.session' "
"にセッションが保存されるようになりました。"

#. leap/perl-Pod-Coverage/summary
msgid "Checks if the documentation of a module is comprehensive"
msgstr ""
"モジュール内のドキュメンテーションがきちんとカバーされているかどうかの確認"

#. leap/perl-Pod-Coverage/description
msgid ""
"Developers hate writing documentation. They'd hate it even more if their "
"computer tattled on them, but maybe they'll be even more thankful in the "
"long run. Even if not, _perlmodstyle_ tells you to, so you must obey.\n"
"\n"
"This module provides a mechanism for determining if the pod for a given "
"module is comprehensive.\n"
"\n"
"It expects to find either a '=head(n>1)' or an '=item' block documenting a "
"subroutine.\n"
"\n"
"Consider: # an imaginary Foo.pm package Foo;\n"
"\n"
" =item foo\n"
"\n"
" The foo sub\n"
"\n"
" = cut\n"
"\n"
" sub foo {}  sub bar {}\n"
"\n"
" 1;  __END__\n"
"\n"
"In this example 'Foo::foo' is covered, but 'Foo::bar' is not, so the 'Foo' "
"package is only 50% (0.5) covered"
msgstr ""
"開発者はドキュメンテーションの作成を嫌います。たとえ彼らの使っているコン"
"ピュータが 告げ口をしたとしても嫌いなままですが、長期間の稼働を行なっていくに"
"つれて ありがたく思うようになるものです。そうでない場合は、 perlmodstyle がそ"
"の旨を通知することで、それに従わなければなりません。\n"
"\n"
"このモジュールは、指定したモジュールの pod ファイル内にドキュメンテーションが"
"きちんと 書かれているかどうかを確認する仕組みを提供します。\n"
"\n"
"このモジュールは、 =head(n>1) または =item ブロックが各サブルーチン内に ある"
"ことを期待します。\n"
"例: # パッケージ Foo 内の Foo.pm;\n"
"\n"
" =item foo\n"
"\n"
" The foo sub\n"
"\n"
" = cut\n"
"\n"
" sub foo {}  sub bar {}\n"
"\n"
" 1;  __END__\n"
"\n"
"この例では 'Foo::foo' はドキュメンテーションがあるのの、 'Foo::bar' について"
"はありません。したがってパッケージ 'Foo' のカバー率は 50% (0.5) となります。"

#. leap/perl-Pod-Coverage-Moose/summary
msgid "Pod::Coverage extension for Moose"
msgstr "Moose 向け Pod::Coverage 拡張"

#. leap/perl-Pod-Coverage-Moose/description
msgid ""
"When using the Pod::Coverage manpage in combination with the Moose manpage, "
"it will report any method imported from a Role. This is especially bad when "
"used in combination with the Test::Pod::Coverage manpage, since it takes "
"away its ease of use.\n"
"\n"
"To use this module in combination with the Test::Pod::Coverage manpage, use "
"something like this:\n"
"\n"
"  use Test::Pod::Coverage;   all_pod_coverage_ok({ coverage_class => 'Pod::"
"Coverage::Moose'});"
msgstr ""
"Moose と Pod::Coverage を組み合わせて使用する場合と、役割からインポートされる"
"任意のメソッドがレポートされます。これは特に、 Test::Pod::Coverage と組み合わ"
"せて使用する場合には、使いにくいために悪い組み合わせとなってしまいます。\n"
"\n"
"このモジュールを Test::Pod::Coverage と組み合わせて使用するには、下記のように"
"します:\n"
"\n"
"  use Test::Pod::Coverage;   all_pod_coverage_ok({ coverage_class => 'Pod::"
"Coverage::Moose'});"

#. leap/perl-Pod-Coverage-TrustPod/summary
msgid "Allow a Module's Pod to Contain Pod::Coverage Hints"
msgstr ""
"モジュールの Pod に対して Pod::Coverage のヒントを含めるようにするモジュール"

#. leap/perl-Pod-Coverage-TrustPod/description
msgid ""
"This is a Pod::Coverage subclass (actually, a subclass of Pod::Coverage::"
"CountParents) that allows the POD itself to declare certain symbol names "
"trusted.\n"
"\n"
"Here is a sample Perl module:\n"
"\n"
"  package Foo::Bar;\n"
"\n"
"  =head1 NAME\n"
"\n"
"  Foo::Bar - a bar at which fooes like to drink\n"
"\n"
"  =head1 METHODS\n"
"\n"
"  =head2 fee\n"
"\n"
"  returns the bar tab\n"
"\n"
"  =cut\n"
"\n"
"  sub fee { ... }\n"
"\n"
"  =head2 fie\n"
"\n"
"  scoffs at bar tab\n"
"\n"
"  =cut\n"
"\n"
"  sub fie { ... }\n"
"\n"
"  sub foo { ... }\n"
"\n"
"  =begin Pod::Coverage\n"
"\n"
"    foo\n"
"\n"
"  =end Pod::Coverage\n"
"\n"
"  =cut\n"
"\n"
"This file would report full coverage, because any non-empty lines inside a "
"block of POD targeted to Pod::Coverage are treated as 'trustme' patterns. "
"Leading and trailing whitespace is stripped and the remainder is treated as "
"a regular expression anchored at both ends.\n"
"\n"
"Remember, anywhere you could use '=begin' and '=end' as above, you could "
"instead write:\n"
"\n"
"  =for Pod::Coverage foo\n"
"\n"
"In some cases, you may wish to make the entire file trusted. The special "
"pattern '*EVERYTHING*' may be provided to do just this.\n"
"\n"
"Keep in mind that Pod::Coverage::TrustPod sets up exceptions using the "
"\"trust\" mechanism rather than the \"privacy\" mechanism in Pod::Coverage. "
"This is unlikely ever to matter to you, but it's true."
msgstr ""
"これは Pod::Coverage のサブクラス (実際には Pod::Coverage::CountParents のサ"
"ブクラス) で、POD 自身に対して特定の信頼済みシンボル名を定義できるようにする"
"ためのものです。\n"
"\n"
"下記にシンプルな Perl モジュールの例を示します:\n"
"\n"
"  package Foo::Bar;\n"
"\n"
"  =head1 NAME\n"
"\n"
"  Foo::Bar - a bar at which fooes like to drink\n"
"\n"
"  =head1 METHODS\n"
"\n"
"  =head2 fee\n"
"\n"
"  returns the bar tab\n"
"\n"
"  =cut\n"
"\n"
"  sub fee { ... }\n"
"\n"
"  =head2 fie\n"
"\n"
"  scoffs at bar tab\n"
"\n"
"  =cut\n"
"\n"
"  sub fie { ... }\n"
"\n"
"  sub foo { ... }\n"
"\n"
"  =begin Pod::Coverage\n"
"\n"
"    foo\n"
"\n"
"  =end Pod::Coverage\n"
"\n"
"  =cut\n"
"\n"
"このファイルでは、 Pod::Coverage への対象となる POD ブロック内の空行は、すべ"
"て 'trustme' パターンとして扱われるため、カバレッジが完全に達成されているもの"
"として報告されます。また、行の前後の空白は削除され、残りは正規表現で処理され"
"ます。\n"
"\n"
"なお、上記のように '=begin' と '=end' を利用して書くのではなく、下記のように"
"記述することもできます:\n"
"\n"
"  =for Pod::Coverage foo\n"
"\n"
"場合によってはファイル全体を信頼済みとして設定したいこともあります。この場合"
"は、特殊なパターン '*EVERYTHING*' を指定してください。\n"
"\n"
"なお、 Pod::Coverage::TrustPod は Pod::Coverage 内のように \"privacy\" 機構で"
"はなく、 \"trust\" 機構を利用して例外を構築します。これは重要なことではないか"
"もしれませんが、それは本当です。"

#. leap/perl-Pod-Eventual/summary
msgid "Read a POD document as a series of trivial events"
msgstr "POD文書を一連の些細なイベントとして読む"

#. leap/perl-Pod-Eventual/description
msgid ""
"POD is a pretty simple format to write, but it can be a big pain to deal "
"with reading it and doing anything useful with it. Most existing POD parsers "
"care about semantics, like whether a '=item' occurred after an '=over' but "
"before a 'back', figuring out how to link a 'L<>', and other things like "
"that.\n"
"\n"
"Pod::Eventual is much less ambitious and much more stupid. Fortunately, "
"stupid is often better. (That's what I keep telling myself, anyway.)\n"
"\n"
"Pod::Eventual reads line-based input and produces events describing each POD "
"paragraph or directive it finds. Once complete events are immediately passed "
"to the 'handle_event' method. This method should be implemented by Pod::"
"Eventual subclasses. If it isn't, Pod::Eventual's own 'handle_event' will be "
"called, and will raise an exception."
msgstr ""
"POD は比較的シンプルな書式で作成することができますが、読んだりそこから何か役"
"に立つものを得るにあたっては面倒な仕組みです。多くの既存の POD パーサは、たと"
"えば '=item' が 'back' の前、および '=over' の後に書かれているかどうかや、  "
"'L<>' によるリンクの生成方法など、セマンティックを理解しています。\n"
"\n"
"Pod::Eventual は大掛かりな仕組みではありませんし、非常に単純な仕組みです。単"
"純な仕組みこそが良いのです (自分自身にもそう言い聞かせています) 。\n"
"\n"
"Pod::Eventual は行ベースの入力を読み込んで、検出したそれぞれの POD の段落や"
"ディレクティブを表すイベントを生成します。終了すると、即時に 'handle_event' "
"メソッドに渡されます。このメソッドは Pod::Eventual のサブクラスで実装されるべ"
"きもので、実装されていない場合は自身の 'hanle_event' を呼び出し、例外をスロー"
"します。"

#. leap/perl-Pod-HtmlPsPdf/summary
msgid "Perl module Pod::HtmlPsPdf"
msgstr "Perl モジュール Pod::HtmlPsPdf"

#. leap/perl-Pod-HtmlPsPdf/description
msgid ""
"Documentation projects builder in HTML, PS and PDF formats.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Stas Bekman <stas@stason.org>"
msgstr ""
"HTML, PS, PDF フォーマットに対応するドキュメンテーションプロジェクトビルダー"
"です。\n"
"\n"
"\n"
"\n"
"作者:\n"
"--------     Stas Bekman <stas@stason.org>"

#. leap/perl-Pod-Markdown/summary
msgid "Convert POD to Markdown"
msgstr "POD からマークダウンへの変換"

#. leap/perl-Pod-Markdown/description
msgid ""
"This module uses Pod::Simple to convert POD to Markdown.\n"
"\n"
"Literal characters in Pod that are special in Markdown (like *asterisks*) "
"are backslash-escaped when appropriate.\n"
"\n"
"By default 'markdown' and 'html' formatted regions are accepted. Regions of "
"'markdown' will be passed through unchanged. Regions of 'html' will be "
"placed inside a '<div>' tag so that markdown characters won't be processed. "
"Regions of ':markdown' or ':html' will be processed as POD and included. To "
"change which regions are accepted use the Pod::Simple API:\n"
"\n"
"  my $parser = Pod::Markdown->new;   $parser->unaccept_targets(qw( markdown "
"html ));"
msgstr ""
"このモジュールは、 Pod::Simple を利用して POD をマークダウンに変換します。\n"
"\n"
"Pod 内での文字のうち、マークダウン内で特別な文字 (例えばアスタリスク) につい"
"ては、必要であればバックスラッシュを利用してエスケープ処理されます。\n"
"\n"
"また、既定では 'markdown' (マークダウン) と 'html' 形式のみが受け付け可能で"
"す。'markdown' の範囲はそのまま変更れされずに渡されます。 'html' の範囲は "
"'<div>' タグ内に配置され、マークダウン文字を処理しないようになります。また、 "
"':markdown' や ':html' の範囲は、 POD として処理されて取り込まれます。 受付可"
"能な範囲を変更するには、下記のように Pod::Simple API を設定してください:\n"
"\n"
"  my $parser = Pod::Markdown->new;   $parser->unaccept_targets(qw( markdown "
"html ));"

#. leap/perl-Pod-MinimumVersion/summary
msgid "Perl version for POD directives used"
msgstr "POD ディレクティブからの Perl バージョン検出"

#. leap/perl-Pod-MinimumVersion/description
msgid ""
"'Pod::MinimumVersion' parses the POD in a Perl script, module, or document, "
"and reports what version of Perl is required to process the directives in it "
"with 'pod2man' etc."
msgstr ""
"'Pod::MinimumVersion' は Perl スクリプトやモジュール、ドキュメント内にある "
"POD を処理して、 'pod2man' 等で処理する際にどのバージョンの Perl が必要となる"
"かを報告します。"

#. leap/perl-Pod-POM/summary
msgid "POD Object Model"
msgstr "POD オブジェクトモデル"

#. leap/perl-Pod-POM/description
msgid ""
"This module implements a parser to convert Pod documents into a simple "
"object model form known hereafter as the Pod Object Model. The object model "
"is generated as a hierarchical tree of nodes, each of which represents a "
"different element of the original document. The tree can be walked manually "
"and the nodes examined, printed or otherwise manipulated. In addition, Pod::"
"POM supports and provides view objects which can automatically traverse the "
"tree, or section thereof, and generate an output representation in one form "
"or another."
msgstr ""
"このモジュールは Pod 文書をシンプルなオブジェクトモデルに変換するパーサーで、"
"今後は Pod オブジェクトモデルとして知られることになるものです。オブジェクトモ"
"デルはノードの階層構造で、それぞれのノードは元の文書に対する各要素を示す形に"
"なっています。ツリー構造は手動で探索することができるほか、調査や印刷、その他"
"の操作などを行なうこともできます。これに加えて、 Pod::POM はツリー構造を自動"
"的に探索するビューオブジェクトに対応し提供するほか、一方から他方に出力を生成"
"するようなことも行なうことができます。"

#. leap/perl-Pod-Readme/summary
msgid "Intelligently generate a README file from POD"
msgstr "POD から賢く README ファイルを生成するモジュール"

#. leap/perl-Pod-Readme/description
msgid ""
"This module filters POD to generate a _README_ file, by using POD commands "
"to specify which parts are included or excluded from the _README_ file."
msgstr ""
"このモジュールは、 _README_ ファイルを生成するために POD をフィルタする処理を"
"行ないます。このフィルタ処理は POD のコマンドを利用するもので、 _README_ ファ"
"イルに含めたり、除外したりするパートを指定します。"

#. leap/perl-Pod-Spell/summary
msgid "Formatter for spellchecking Pod"
msgstr "スペルチェック Pod 向けフォーマッタ"

#. leap/perl-Pod-Spell/description
msgid ""
"Pod::Spell is a Pod formatter whose output is good for spellchecking. Pod::"
"Spell rather like Pod::Text, except that it doesn't put much effort into "
"actual formatting, and it suppresses things that look like Perl symbols or "
"Perl jargon (so that your spellchecking program won't complain about mystery "
"words like \"'$thing'\" or \"'Foo::Bar'\" or \"hashref\").\n"
"\n"
"This class provides no new public methods. All methods of interest are "
"inherited from Pod::Parser (which see). The especially interesting ones are "
"'parse_from_filehandle' (which without arguments takes from STDIN and sends "
"to STDOUT) and 'parse_from_file'. But you can probably just make do with the "
"examples in the synopsis though.\n"
"\n"
"This class works by filtering out words that look like Perl or any form of "
"computerese (like \"'$thing'\" or \"'N>7'\" or \"'@{$foo}{'bar','baz'}'\", "
"anything in C<...> or F<...> codes, anything in verbatim paragraphs (code "
"blocks), and anything in the stopword list. The default stopword list for a "
"document starts out from the stopword list defined by Pod::Wordlist, and can "
"be supplemented (on a per-document basis) by having '\"=for stopwords\"' / "
"'\"=for :stopwords\"' region(s) in a document."
msgstr ""
"Pod::Spell は Pod の整形ソフトウエアで、出力をスペルチェック用に使用すること"
"ができる仕組みです。 Pod::Spell は Pod::Text のように動作しますが、実際の整形"
"にはあまり注力せず、 Perl のシンボルやジャーゴンを省略して出力する仕組みです "
"(そのため、\"'$thing', \"'Foo::Bar'\", \"hashref\" (ハッシュ参照の意味) な"
"ど、 Perl で使用される奇妙な個所をスペルチェックに渡さなくて済みます) 。\n"
"\n"
"このクラスは新しい公開メソッドを提供していません。すべての公開メソッドは "
"Pod::Parser から継承されているものです。特に注目すべきメソッドは "
"'parse_from_filehandle' (パラメータを指定しない場合は STDIN から入力し、 "
"STDOUT に送信するメソッド) と 'parse_from_file' です。ただし、概要の例に示さ"
"れている内容をそのまま使用してもかまいません。\n"
"\n"
"このクラスは Perl でのみ使用される単語や Perl のコードそのものを除外して動作"
"します。たとえば \"'$thing'\", \"'N>7'\", \"'@{$foo}{'bar','baz'}'\" のような"
"コードや、 C<...> や F<...> でくくられたコード、そしてコードブロックやストッ"
"プワードリストに該当するものなどがそれぞれ排除されます。文書に対する既定のス"
"トップワードリストは、 Pod::Wordlist で定義されているものと、補足 (ドキュメン"
"トごとの指定) で '\"=for stopwords\"' / '\"=for :stopwords\"' の範囲内にある"
"ものすべてが当てはまります。"

#. leap/perl-Pod-Usage/summary
msgid "Print a Usage Message From Embedded Pod Documentation"
msgstr "内蔵された Pod 文書から使用方法のメッセージを表示するモジュール"

#. leap/perl-Pod-Usage/description
msgid ""
"*pod2usage* will print a usage message for the invoking script (using its "
"embedded pod documentation) and then exit the script with the desired exit "
"status. The usage message printed may have any one of three levels of "
"\"verboseness\": If the verbose level is 0, then only a synopsis is printed. "
"If the verbose level is 1, then the synopsis is printed along with a "
"description (if present) of the command line options and arguments. If the "
"verbose level is 2, then the entire manual page is printed."
msgstr ""
"*pod2usage* はスクリプトを実行した際に使用方法に関するメッセージ (POD ドキュ"
"メンテーションに内蔵されているもの) を表示して、必要な終了ステータスで終了す"
"るスクリプトです。使用方法のメッセージは \"verboseness\" の 3 レベルのうち 1 "
"つを選択します。 \"verboseness\" レベルが 0 の場合、 synopsis のみを出力しま"
"す。 1 の場合は synopsis と description (もしあれば) を出力します。 2 を指定"
"すると、マニュアルページ全体を出力します。"

#. leap/perl-PostScript-Simple/summary
msgid "Produce PostScript files from Perl"
msgstr "Perl からの PostScript ファイルの作成"

#. leap/perl-PostScript-Simple/description
msgid ""
"PostScript::Simple allows you to have a simple method of writing PostScript "
"files from Perl. It has graphics primitives that allow lines, curves, "
"circles, polygons and boxes to be drawn. Text can be added to the page using "
"standard PostScript fonts.\n"
"\n"
"The images can be single page EPS files, or multipage PostScript files. The "
"image size can be set by using a recognised paper size (\"'A4'\", for "
"example) or by giving dimensions. The units used can be specified (\"'mm'\" "
"or \"'in'\", etc) and are the same as those used in TeX. The default unit is "
"a bp, or a PostScript point, unlike TeX."
msgstr ""
"PostScript::Simple は Perl から PostScript のファイルに書き込むシンプルなメ"
"ソッドを提供します。直線や曲線、円や多角形、四角形などを書き込むプリミティブ"
"が用意されています。テキストについても、標準の PostScript フォントを利用して"
"ページに追加することができます。\n"
"\n"
"画像は単一ページの EPS ファイルのほか、複数ページの PostScript ファイルにする"
"こともできます。画像のサイズは紙のサイズ (\"A4\" など) を指定することができる"
"ほか、指定したサイズを設定することもできます。単位は TeX で使用されるものと同"
"様に、 \"mm\" (ミリメートル), \"in\" (インチ) などを指定することができます。"
"既定の単位は TeX とは異なり、 \"bp\" (PostScript ポイントサイズ) です。"

#. leap/perl-Prima/summary
msgid "Perl graphic toolkit"
msgstr "Perl グラフィックツールキット"

#. leap/perl-Prima/description
msgid ""
"The toolkit is combined from two basic set of classes - core and external. "
"The core classes are coded in C and form a base line for every Prima object "
"written in perl. The usage of C is possible together with the toolkit; "
"however, its full power is revealed in the perl domain. The external classes "
"present easily expandable set of widgets, written completely in perl and "
"communicating with the system using Prima library calls."
msgstr ""
"このツールキットは、 core と external と呼ばれる 2 種類のクラスを組み合わせた"
"ものです。 core クラスは C 言語でコーディングされ、 Perl 内で記述される各 "
"Prima オブジェクトに対して、ベースラインを提供します。 C 言語の使用範囲はツー"
"ルキットに合わせられていますが、 Perl 領域からでもすべての力を生かすことがで"
"きるようになっています。 external クラスはウイジェットに対する拡張の容易さを"
"示すもので、 Perl のみで作られていて Prima ライブラリコールを経由して通信を行"
"ないます。"

#. leap/perl-Probe-Perl/summary
msgid "Information about the currently running perl"
msgstr "現在実行中の Perl に関する情報"

#. leap/perl-Probe-Perl/description
msgid ""
"This module provides methods for obtaining information about the currently "
"running perl interpreter. It originally began life as code in the 'Module::"
"Build' project, but has been externalized here for general use."
msgstr ""
"このモジュールは、現在実行中の Perl インタプリタに対して、その情報を取得する"
"機能を提供します。これはもともと 'Module::Build' プロジェクト内のコードとして"
"作られたものですが、一般的に利用できる仕組みであることから、分離されて提供さ"
"れるようになりました。"

#. leap/perl-Proc-Fork/summary
msgid "Simple, Intuitive Interface to the Fork() System Call"
msgstr "fork() システムコールに対するシンプルで直感的なインターフェイス"

#. leap/perl-Proc-Fork/description
msgid ""
"This module provides an intuitive, Perl-ish way to write forking programs by "
"letting you use blocks to illustrate which code section executes in which "
"fork. The code for the parent, child, retry handler and error handler are "
"grouped together in a \"fork block\". The clauses may appear in any order, "
"but they must be consecutive (without any other statements in between).\n"
"\n"
"All four clauses need not be specified. If the retry clause is omitted, only "
"one fork will be attempted. If the error clause is omitted the program will "
"die with a simple message if it can't retry. If the parent or child clause "
"is omitted, the respective (parent or child) process will start execution "
"after the final clause. So if one or the other only has to do some simple "
"action, you need only specify that one. For example:\n"
"\n"
"   run_fork { child {      exec '/bin/ls', '-l';      die \"Couldn't exec "
"ls: $!\\n\";  } };    \n"
"\n"
"If the code in any of the clauses does not die or exit, it will continue "
"execution after the fork block."
msgstr ""
"このモジュールは、直感的で Perl のやり方に沿った fork プログラムを作成するた"
"めの仕組みで、 fork されたプロセス内でどのような処理をするのかをブロックで指"
"定することができる仕組みです。親プロセスと子プロセスに対してそれぞれコードを"
"記述できるほか、再試行のハンドラやエラーハンドラなどを組み合わせて \"fork ブ"
"ロック\" を構成します。ブロック内のそれぞれのコードは任意の順序で表記できます"
"が、連続して記述しなければなりません (間に fork とは関係のないステートメント"
"を挟むことはできません) 。\n"
"\n"
"4 種類のコードをすべて指定する必要はありません。再試行のコードを省略した場合"
"は、 1 回だけ fork を試す動作になります。エラーのコードを省略した場合で、再試"
"行ができない場合は、シンプルなメッセージが die で出力されてプログラムは終了し"
"ます。また、親または子のコードを省略した場合は、それぞれのプロセスは final 句"
"以降の処理から始めるようになります。このほか、いずれか片方がシンプルな処理の"
"みを行なう場合は、いずれか片方だけを指定するだけでかまいません。例えば下記の"
"ようになります:\n"
"\n"
"   run_fork { child {      exec '/bin/ls', '-l';      die \"Couldn't exec "
"ls: $!\\n\";  } };    \n"
"\n"
"いずれかの句のコードが die で終了したり exit で終了したりしない場合は、 fork "
"ブロック以降の処理が続けて動作します。"

#. leap/perl-Proc-ProcessTable/summary
msgid "Perl extension to access the unix process table"
msgstr "Unix プロセステーブルにアクセスするための Perl 拡張"

#. leap/perl-Proc-ProcessTable/description
msgid "Perl interface to the unix process table."
msgstr "Unix プロセステーブルに対する Perl インターフェイスです。"

#. leap/perl-Proc-Simple/summary
msgid "Launch and Control Background Processes"
msgstr "バックグラウンドプロセスの起動と制御"

#. leap/perl-Proc-Simple/description
msgid ""
"The Proc::Simple package provides objects mimicing real-life processes from "
"a user's point of view. A new process object is created by\n"
"\n"
"   $myproc = Proc::Simple->new();\n"
"\n"
"Either external programs or perl subroutines can be launched and controlled "
"as processes in the background.\n"
"\n"
"A 10-second sleep process, for example, can be launched as an external "
"program as in\n"
"\n"
"   $myproc->start(\"/bin/sleep 10\");    # or    $myproc->start(\"/bin/sleep"
"\", \"10\");\n"
"\n"
"or as a perl subroutine, as in\n"
"\n"
"   sub mysleep { sleep(shift); }    # Define mysleep()    $myproc-"
">start(\\&mysleep, 10);   # Launch it.\n"
"\n"
"or even as\n"
"\n"
"   $myproc->start(sub { sleep(10); });\n"
"\n"
"The _start_ Method returns immediately after starting the specified process "
"in background, i.e. there's no blocking. It returns _1_ if the process has "
"been launched successfully and _0_ if not.\n"
"\n"
"The _poll_ method checks if the process is still running\n"
"\n"
"   $running = $myproc->poll();\n"
"\n"
"and returns _1_ if it is, _0_ if it's not. Finally,\n"
"\n"
"   $myproc->kill();\n"
"\n"
"terminates the process by sending it the SIGTERM signal. As an option, "
"another signal can be specified.\n"
"\n"
"   $myproc->kill(\"SIGUSR1\");\n"
"\n"
"sends the SIGUSR1 signal to the running process. _kill_ returns _1_ if it "
"succeeds in sending the signal, _0_ if it doesn't.\n"
"\n"
"The methods are discussed in more detail in the next section.\n"
"\n"
"A destructor is provided so that a signal can be sent to the forked "
"processes automatically should the process object be destroyed or if the "
"process exits. By default this behaviour is turned off (see the "
"kill_on_destroy and signal_on_destroy methods)."
msgstr ""
"Proc::Simple パッケージは、ユーザの観点から実際のプロセスを擬似するオブジェク"
"トを提供します。新しいプロセスオブジェクトは下記のようにして作成することがで"
"きます:\n"
"\n"
"   $myproc = Proc::Simple->new();\n"
"\n"
"ここから外部のプログラムや Perl のサブルーチンを起動し、裏で動作する処理をプ"
"ロセスとして制御することができます。\n"
"\n"
"たとえば 10 秒の待機処理を実行したい場合は、下記のようにします:\n"
"\n"
"   $myproc->start(\"/bin/sleep 10\");    # or    $myproc->start(\"/bin/sleep"
"\", \"10\");\n"
"\n"
"上記以外にも、下記のようにしてサブルーチンを実行することもできます:\n"
"\n"
"   sub mysleep { sleep(shift); }    # Define mysleep()    $myproc-"
">start(\\&mysleep, 10);   # Launch it.\n"
"\n"
"単純に下記のように記述することもできます:\n"
"\n"
"   $myproc->start(sub { sleep(10); });\n"
"\n"
"_start_ メソッドは、指定したプロセスを裏で起動するとすぐに返る (つまり、ブ"
"ロックされることはない) メソッドです。プロセスが正常に起動できた場合は _1_ "
"を、そうでない場合は _0_ を返します。\n"
"\n"
"_poll_ メソッドは該当するプロセスが実行中かどうかを調べて返します:\n"
"\n"
"   $running = $myproc->poll();\n"
"\n"
"実行中である場合は _1_ を、実行中でない場合は _0_ を返します。\n"
"\n"
"   $myproc->kill();\n"
"\n"
"上記を実行すると、 SIGTERM シグナルで該当するプロセスを終了します。オプション"
"でそれ以外のシグナルを送信することもできます:\n"
"\n"
"   $myproc->kill(\"SIGUSR1\");\n"
"\n"
"上記を実行すると、実行中のプロセスに対して SIGUSR1 を送信します。シグナルの送"
"信が正常に終了した場合は _1_ を、正常終了しなかった場合は _0_ をそれぞれ返し"
"ます。\n"
"\n"
"より詳しいメソッドの説明については、次のセクションをお読みください。\n"
"\n"
"オブジェクトに対するデストラクタも提供されています。そのため、 fork したプロ"
"セスに対して自動的にシグナルを送信して終了させることができるようになっていま"
"す。既定ではこの機能は無効化されています (kill_on_destroy, signal_on_destroy "
"の各メソッドをお読みください) 。"

#. leap/perl-Protocol-Redis/summary
msgid "Redis protocol parser/encoder with asynchronous capabilities"
msgstr "非同期機能を持つ Redis プロトコルのパーサー／エンコーダ"

#. leap/perl-Protocol-Redis/description
msgid ""
"Redis protocol parser/encoder with asynchronous capabilities and at http://"
"redis.io/topics/pipelining support."
msgstr ""
"http://redis.io/topics/pipelining で説明されている非同期機能を持つ Redis プロ"
"トコルのパーサー／エンコーダです。"

#. leap/perl-Protocol-Redis-Faster/summary
msgid "Optimized pure-perl Redis protocol parser/encoder"
msgstr "純粋 Perl による最適化された Redis プロトコルのパーサ／エンコーダ"

#. leap/perl-Protocol-Redis-Faster/description
msgid ""
"This module implements the Protocol::Redis API with more optimized pure-perl "
"internals. See Protocol::Redis for usage documentation.\n"
"\n"
"This is a low level parsing module, if you are looking to use Redis in Perl, "
"try Redis, Redis::hiredis, or Mojo::Redis."
msgstr ""
"このモジュールは Perl のみでさらに最適化された内部仕様を持つ Protocol::Redis "
"API を実装しています。使用方法については、 Protocol::Redis をお読みくださ"
"い。\n"
"\n"
"これは低レベルの処理モジュールです。 Redis を Perl 内で使用する方法をお探しの"
"場合は、  Redis::hiredis や Mojo::Redis をお試しください。"

#. leap/perl-Protocol-WebSocket/summary
msgid "WebSocket protocol"
msgstr "WebSocket プロトコル"

#. leap/perl-Protocol-WebSocket/description
msgid ""
"Client/server WebSocket message and frame parser/constructor. This module "
"does not provide a WebSocket server or client, but is made for using in http "
"servers or clients to provide WebSocket support.\n"
"\n"
"Protocol::WebSocket supports the following WebSocket protocol versions:\n"
"\n"
"    draft-ietf-hybi-17 (latest)     draft-ietf-hybi-10     draft-ietf-"
"hybi-00 (with HAProxy support)     draft-hixie-75\n"
"\n"
"By default the latest version is used. The WebSocket version is detected "
"automatically on the server side. On the client side you have set a "
"'version' attribute to an appropriate value.\n"
"\n"
"Protocol::WebSocket itself does not contain any code and cannot be used "
"directly. Instead the following modules should be used:"
msgstr ""
"クライアントとサーバの両方に対応した、 WebSocket メッセージ／フレームのパーサ"
"／コンストラクタです。このモジュールには WebSocket のサーバやクライアントの機"
"能そのものは含まれていませんが、 WebSocket に対応する http サーバやクライアン"
"ト内で利用することができます。\n"
"\n"
"Protocol::WebSocket では、下記の WebSocket プロトコルバージョンに対応していま"
"す:\n"
"\n"
"    draft-ietf-hybi-17 (latest)     draft-ietf-hybi-10     draft-ietf-"
"hybi-00 (with HAProxy support)     draft-hixie-75\n"
"\n"
"既定では最新版を使用します。 WebSocket バージョンは、サーバ側で自動検出されま"
"す。クライアント側では、 'version' 属性を設定して使用します。\n"
"\n"
"Protocol::WebSocket それ自身にはコードが含まれておらず、直接使用することもで"
"きません。下記のモジュールをお使いください:"

#. leap/perl-Quantum-Superpositions/summary
msgid "QM-like superpositions in Perl"
msgstr "Perl 向けの QM 風重ね合わせ"

#. leap/perl-Quantum-Superpositions/description
msgid ""
"The Quantum::Superpositions module adds two new operators to Perl: 'any' and "
"'all'.\n"
"\n"
"Each of these operators takes a list of values (states) and superimposes "
"them into a single scalar value (a superposition), which can then be stored "
"in a standard scalar variable.\n"
"\n"
"The 'any' and 'all' operators produce two distinct kinds of superposition. "
"The 'any' operator produces a disjunctive superposition, which may "
"(notionally) be in any one of its states at any time, according to the needs "
"of the algorithm that uses it.\n"
"\n"
"In contrast, the 'all' operator creates a conjunctive superposition, which "
"is always in every one of its states simultaneously.\n"
"\n"
"Superpositions are scalar values and hence can participate in arithmetic and "
"logical operations just like any other type of scalar. However, when an "
"operation is applied to a superposition, it is applied (notionally) in "
"parallel to each of the states in that superposition.\n"
"\n"
"For example, if a superposition of states 1, 2, and 3 is multiplied by 2:\n"
"\n"
"\t$result = any(1,2,3) * 2;\n"
"\n"
"the result is a superposition of states 2, 4, and 6. If that result is then "
"compared with the value 4:\n"
"\n"
"\tif ($result == 4) { print \"fore!\" }\n"
"\n"
"then the comparison also returns a superposition: one that is both true and "
"false (since the equality is true for one of the states of '$result' and "
"false for the other two).\n"
"\n"
"Of course, a value that is both true and false is of no use in an 'if' "
"statement, so some mechanism is needed to decide which superimposed boolean "
"state should take precedence.\n"
"\n"
"This mechanism is provided by the two types of superposition available. A "
"disjunctive superposition is true if any of its states is true, whereas a "
"conjunctive superposition is true only if all of its states are true.\n"
"\n"
"Thus the previous example does print \"fore!\", since the 'if' condition is "
"equivalent to:\n"
"\n"
"\tif (any(2,4,6) == 4)...\n"
"\n"
"It suffices that any one of 2, 4, or 6 is equal to 4, so the condition is "
"true and the 'if' block executes.\n"
"\n"
"On the other hand, had the control statement been:\n"
"\n"
"        if (all(2,4,6) == 4)...\n"
"\n"
"the condition would fail, since it is not true that all of 2, 4, and 6 are "
"equal to 4.\n"
"\n"
"Operations are also possible between two superpositions:\n"
"\n"
"        if (all(1,2,3)*any(5,6) < 21)                 { print \"no alcohol"
"\"; }\n"
"\n"
"        if (all(1,2,3)*any(5,6) < 18)                 { print \"no entry"
"\"; }\n"
"\n"
"        if (any(1,2,3)*all(5,6) < 18)                 { print \"under-age"
"\" }\n"
"\n"
"In this example, the string \"no alcohol\" is printed because the "
"superposition produced by the multiplication is the Cartesian product of the "
"respective states of the two operands: 'all(5,6,10,12,15,18)'. Since all of "
"these resultant states are less that 21, the condition is true. In contrast, "
"the string \"no entry\" is not printed, because not all the product's states "
"are less than 18.\n"
"\n"
"Note that the type of the first operand determines the type of the result of "
"an operation. Hence the third string -- \"underage\" -- is printed, because "
"multiplying a disjunctive superposition by a conjunctive superposition "
"produces a result that is disjunctive: 'any(5,6,10,12,15,18)'. The condition "
"of the 'if' statement asks whether any of these values is less than 18, "
"which is true."
msgstr ""
"Quantum::Superpositions モジュールは、 Perl に対して 'any' と 'all' という新"
"しい演算子を追加します。\n"
"\n"
"これらの演算子はいずれも値のリスト (状態) を取り、単一のスカラ値 (重ね合わ"
"せ) として重ねることができます。結果は標準的なスカラ値内に保存されます。\n"
"\n"
"'any' と 'all' の演算子はそれぞれ異なる重ね合わせを行ないます。 'any' 演算子"
"は離接的重ね合わせと呼ばれ、アルゴリズムの必要性に応じて、いつでもその状態の"
"いずれかに（概念的に）存在することを表わします。\n"
"\n"
"それに対して 'all' 演算子は結合的重ね合わせと呼ばれ、その状態のそれぞれが同時"
"に存在することを表わします。\n"
"\n"
"重ね合わせはスカラ値であり、他のスカラ値と同様に算術的および論理的演算子内で"
"利用することができます。しかしながら、何らかの演算を重ね合わせに対して実施す"
"ると、その重ね合わせの各状態に（概念上）平行して適用されます。\n"
"\n"
"たとえば 1, 2, 3 の重ね合わせに 2 を掛けるとします:\n"
"\n"
"\t$result = any(1,2,3) * 2;\n"
"\n"
"結果は 2, 4, 6 の重ね合わせになります。その結果を 4 と比較します:\n"
"\n"
"\tif ($result == 4) { print \"fore!\" }\n"
"\n"
"すると、比較結果も重ね合わせとして返されるようになります。この場合は 1 つが "
"true でそれ以外が false になりますので、 true と false の両方が評価結果となり"
"ます。\n"
"\n"
"もちろん true と false の両方を持つ値は 'if' ステートメントでは意味がありませ"
"ん。そのため、重ね合わせの結果を判断して boolean に変換するための仕組みが必要"
"となります。\n"
"\n"
"この仕組みは、利用可能な 2 種類の重ね合わせによって提供されています。離接的重"
"ね合わせの場合、いずれかの状態が true であれば true に、結合的重ね合わせの場"
"合は全ての状態が true であれば true になります。\n"
"\n"
"そのため、前述の例では \"fore!\" が出力されることになります。これは 'if' ス"
"テートメントが下記と等価であるためです:\n"
"\n"
"\tif (any(2,4,6) == 4)...\n"
"\n"
"2, 4, 6 のいずれかが 4 に一致していますので、結果としては true となり、 if ブ"
"ロック以下が実行されることになります。\n"
"\n"
"その一方、下記のような記述であった場合:\n"
"\n"
"        if (all(2,4,6) == 4)...\n"
"\n"
"2, 4, 6 の全てが 4 に一致していないため、条件判断は失敗となります。\n"
"\n"
"演算は 2 つの重ね合わせに対しても実施することができます:\n"
"\n"
"        if (all(1,2,3)*any(5,6) < 21)                 { print \"no alcohol"
"\"; }\n"
"\n"
"        if (all(1,2,3)*any(5,6) < 18)                 { print \"no entry"
"\"; }\n"
"\n"
"        if (any(1,2,3)*all(5,6) < 18)                 { print \"under-age"
"\" }\n"
"\n"
"この例では、乗算によって生成された重ね合わせが 2 つのオペランドのそれぞれの状"
"態のデカルト積 'all(5,6,10,12,15,18)' となるため、 \"no alcohol\" が出力され"
"ることになります。この場合、いずれの計算結果も 21 を下回っていますから、条件"
"判断としては true になります。逆に、乗算結果の全てが 18 を下回っているわけで"
"は無いので、 \"no entry\" は出力されません。\n"
"\n"
"なお、演算子の前にあるタイプが計算結果の型を決めることになることに注意してく"
"ださい。そのため、 3 つ目の計算式は結合的重ね合わせによる離接的重ね合わせを乗"
"算していることになりますので、結果は離接的重ね合わせとなり、 "
"'any(5,6,10,12,15,18)' となって \"under-age\" が出力されることになります。こ"
"の場合、 'if' ステートメントではこれらの値のいずれかが 18 未満であるかどうか"
"を判断していることになるからです。"

#. leap/perl-RDF-Trine/summary
msgid "An RDF Framework for Perl"
msgstr "Perl 向け RDF フレームワーク"

#. leap/perl-RDF-Trine/description
msgid ""
"RDF::Trine provides an Resource Descriptive Framework (RDF) with an emphasis "
"on extensibility, API stability, and the presence of a test suite. The "
"package consists of several components:"
msgstr ""
"RDF::Trine は Resource Descriptive Framework (RDF) のうち、特に拡張性と API "
"の安定性、そしてテストスイートの存在に特に注意を払って作られた仕組みです。こ"
"のパッケージには複数のコンポーネントが含まれています。"

#. leap/perl-RPC-XML/summary
msgid "Set of Classes for Core Data, Message and Xml Handling"
msgstr "コアデータ、メッセージ、 XML 処理向けのクラス集"

#. leap/perl-RPC-XML/description
msgid ""
"The *RPC::XML* package is an implementation of the *XML-RPC* standard. The "
"package as a whole provides classes for data, for clients, for servers and "
"for parsers (based on the XML::Parser and XML::LibXML packages from CPAN).\n"
"\n"
"This module provides a set of classes for creating values to pass to the "
"constructors for requests and responses. These are lightweight objects, most "
"of which are implemented as blessed scalar references so as to associate "
"specific type information with the value. Classes are also provided for "
"requests, responses and faults (errors).\n"
"\n"
"This module does not actually provide any transport implementation or server "
"basis. For these, see RPC::XML::Client and RPC::XML::Server, respectively."
msgstr ""
"*RPC::XML* パッケージは、 *XML-RPC* 標準の実装です。このパッケージは全体で"
"データ向け、クライアント向け、サーバ向け、パーサ向けのそれぞれのクラスを提供"
"しています (CPAN 提供の XML::Parser および XML::LibXML パッケージをベースにし"
"ています) 。\n"
"\n"
"このモジュールは、リクエストや応答に対するコンストラクタに渡すための値を作成"
"するクラス集です。これらは軽量なオブジェクトであるほか、これらのうちの多くは"
"スカラー参照の bless として実装されているため、特定のタイプ情報を値に結び付け"
"ることができます。クラスはリクエストと要求のほか、失敗 (エラー) に対しても提"
"供されています。\n"
"\n"
"このモジュールでは、実際の転送機能やサーバ機能の実装などは提供されていませ"
"ん。これらの用途に対しては RPC::XML::Client や RPC::XML::Server のパッケージ"
"をお使いください。"

#. leap/perl-RPM-Header-PurePerl/summary
msgid "A Perl only implementation of a RPM header reader"
msgstr "RPM ヘッダリーダの純粋 Perl 実装"

#. leap/perl-RPM-Header-PurePerl/description
msgid ""
"RPM::Header::PurePerl is a clone of RPM::Header written in only Perl, so it "
"provides a way to read an rpm package on systems where rpm is not installed. "
"RPM::Header::PurePerl can be used as a drop in replacement for RPM::Header, "
"if needed also the other way round."
msgstr ""
"RPM::Header::PurePerl は Perl のみで記述された RPM::Header のクローンで、 "
"rpm がインストールされていないようなシステムでも rpm ファイルを読み込むことが"
"できます。 RPM::Header::PurePerl は、代替手段として RPM::Header をその場で入"
"れ替えることができます。"

#. leap/perl-RPM2/summary
msgid "Perl bindings for the RPM Package Manager API"
msgstr "RPM パッケージマネージャ API 向け Perl バインディング"

#. leap/perl-RPM2/description
msgid ""
"The RPM2 module provides an object-oriented interface to querying both the "
"installed RPM database as well as files on the filesystem."
msgstr ""
"RPM2 モジュールは、インストールされている RPM データベースや、ファイルシステ"
"ム内のファイルを問い合わせることができる、オブジェクト指向のインターフェイス"
"を提供します。"

#. leap/perl-Readonly/summary
#. leap/perl-Readonly/description
msgid "Facility for creating read-only scalars, arrays, hashes"
msgstr "読み込みのみのスカラ値や配列、ハッシュなどを作成できる仕組み"

#. leap/perl-Readonly-XS/summary
msgid ""
"Companion module for Readonly.pm, to speed up read-only scalar variables"
msgstr ""
"読み込み専用のスカラー値を高速化するための、 Readonly.pm に対するコンパニオン"
"モジュール"

#. leap/perl-Readonly-XS/description
msgid ""
"This is a companion module to Readonly.pm.  You do not use Readonly::XS "
"directly.  Instead, once it is installed, Readonly.pm will detect this and "
"will use it for creating read-only scalars.  This results in a significant "
"speed improvement.  This does not speed up read-only arrays or hashes.\n"
"\n"
"Authors:\n"
"--------     Eric Roode, <roode@cpan.org>"
msgstr ""
"これは Readonly.pm に対するコンパニオンモジュールです。なお、 Readonly::XS は"
"直接使用しないでください。その代わり、このモジュールをインストールすると "
"Readonly.pm 側でそれを自動的に検出し、読み込み専用のスカラー値を作成する際"
"に、このモジュールを使用するようになります。これにより、大きく性能を改善する"
"ことができます。なお、読み込み専用の配列やハッシュに対しては動作しません。\n"
"\n"
"作者:\n"
"--------     Eric Roode, <roode@cpan.org>"

#. leap/perl-Redis/summary
msgid "Perl binding for Redis database"
msgstr "Redis データベース向け Perl バインディング"

#. leap/perl-Redis/description
msgid ""
"Pure perl bindings for http://redis.io/\n"
"\n"
"This version supports protocol 2.x (multi-bulk) or later of Redis available "
"at https://github.com/antirez/redis/.\n"
"\n"
"This documentation lists commands which are exercised in test suite, but "
"additional commands will work correctly since protocol specifies enough "
"information to support almost all commands with same piece of code with a "
"little help of 'AUTOLOAD'."
msgstr ""
"http://redis.io/ に対する純粋 Perl バインディングです。\n"
"\n"
"このバージョンは、プロトコル 2.x (multi-bulk) もしくはそれ以降に対応していま"
"す (https://github.com/antirez/redis/) 。\n"
"\n"
"子のドキュメンテーションにはテストスイートで使用されているコマンドの一覧が書"
"かれていますが、プロトコル側では 'AUTOLOAD' の仕組みによる支援で、ほぼすべて"
"のコマンドに対応するための十分な情報が提示されていることから、追加のコマンド"
"についても問題なく動作するものと見込まれています。"

#. leap/perl-Regexp-Assemble/summary
msgid "Assemble multiple Regular Expressions into a single RE"
msgstr "複数の正規表現を 1 つにまとめるモジュール"

#. leap/perl-Regexp-Assemble/description
msgid ""
"Regexp::Assemble takes an arbitrary number of regular expressions and "
"assembles them into a single regular expression (or RE) that matches all "
"that the individual REs match.\n"
"\n"
"As a result, instead of having a large list of expressions to loop over, a "
"target string only needs to be tested against one expression. This is "
"interesting when you have several thousand patterns to deal with. Serious "
"effort is made to produce the smallest pattern possible.\n"
"\n"
"It is also possible to track the original patterns, so that you can "
"determine which, among the source patterns that form the assembled pattern, "
"was the one that caused the match to occur.\n"
"\n"
"You should realise that large numbers of alternations are processed in "
"perl's regular expression engine in O(n) time, not O(1). If you are still "
"having performance problems, you should look at using a trie. Note that "
"Perl's own regular expression engine will implement trie optimisations in "
"perl 5.10 (they are already available in perl 5.9.3 if you want to try them "
"out). 'Regexp::Assemble' will do the right thing when it knows it's running "
"on a trie'd perl. (At least in some version after this one).\n"
"\n"
"Some more examples of usage appear in the accompanying README. If that file "
"is not easy to access locally, you can find it on a web repository such as "
"http://search.cpan.org/dist/Regexp-Assemble/README or http://cpan.uwinnipeg."
"ca/htdocs/Regexp-Assemble/README.html.\n"
"\n"
"See also LIMITATIONS."
msgstr ""
"Regexp::Assemble は任意の数の正規表現を受け入れ、各正規表現のすべてに該当する"
"ような 1 つの正規表現を生成します。\n"
"\n"
"結果として、ターゲットの文字列に対してそれぞれの正規表現を繰り返しテストする"
"かわりに、 1 つの正規表現だけをテストすればいいことになります。これは特に、数"
"千個の単位でパターンマッチングを行なうような用途で有用です。このモジュールで"
"は、最も小さなパターンを生成するため、様々な処理を行ないます。\n"
"\n"
"このモジュールではオリジナルのパターンに戻す処理も行なうことができます。これ"
"により、組み合わせたパターンを構成する元のパターンを決定して、該当の原因と"
"なったものを判断することができます。\n"
"\n"
"なお、 Perl の正規表現エンジンは、 O(1) ではなく O(n) の時間で巨大な置き換え"
"処理を行なっていることに注意してください。性能面で問題が発生した場合は、まず"
"トライ (trie) を使用することをお考え下さい。また、 Perl 自身の正規表現エンジ"
"ンでは Perl 5.10 以降でトライによる最適化を実装しています (Perl 5.9.3 でもす"
"でに利用可能な状態ではあります) 。 'Regexp::Assemble' ではトライ対応の Perl "
"かどうかを判断して正しい処理を行ないます。\n"
"\n"
"README 内には追加の使用例が示されています。ローカルからのアクセスが簡単でない"
"環境の場合は、 Web リポジトリをご覧いただいてもかまいません。 Web リポジトリ"
"は http://search.cpan.org/dist/Regexp-Assemble/README または http://cpan."
"uwinnipeg.ca/htdocs/Regexp-Assemble/README.html にあります。\n"
"\n"
"詳しくは LIMITAIONS もお読みください。"

#. leap/perl-Regexp-Common/summary
msgid "Provide commonly requested regular expressions"
msgstr "一般に必要とされる正規表現"

#. leap/perl-Regexp-Common/description
msgid ""
"By default, this module exports a single hash ('%RE') that stores or "
"generates commonly needed regular expressions (see \"List of available "
"patterns\").\n"
"\n"
"There is an alternative, subroutine-based syntax described in \"Subroutine-"
"based interface\"."
msgstr ""
"既定では、このモジュールは 1 つのハッシュ ('%RE') を公開しています。このハッ"
"シュは一般的に必要とされる正規表現を保存したり生成したりするための仕組みです "
"(詳しくは \"List of available patterns\" をご覧ください) 。\n"
"\n"
"このほか、サブルーチンベースの文法もご利用いただけます。詳しくは "
"\"Subroutine-based interface\" をお読みください。"

#. leap/perl-Regexp-IPv6/summary
msgid "Regular expression for IPv6 addresses"
msgstr "IPv6 アドレス向け正規表現"

#. leap/perl-Regexp-IPv6/description
msgid ""
"This module exports the $IPv6_re regular expression that matches any valid "
"IPv6 address as described in \"RFC 2373 - 2.2 Text Representation of "
"Addresses\" but '::'. Any string not compliant with such RFC will be "
"rejected.\n"
"\n"
"To match full strings use '/^$IPv6_re$/'."
msgstr ""
"このモジュールは $IPv6_re という正規表現を公開しています。この正規表現は "
"\"RFC 2373 - 2.2 Text Representation of Addresses\" で説明されている IPv6 ア"
"ドレスにマッチするパターンで、この RFC に準拠していない文字列は拒否されるよう"
"になっています。\n"
"\n"
"文字列全体に対して判断させたい場合は、  '/^$IPv6_re$/' のように指定してくださ"
"い。"

#. leap/perl-Regexp-Shellish/summary
msgid "Shell-like regular expressions"
msgstr "シェルのような正規表現"

#. leap/perl-Regexp-Shellish/description
msgid ""
"Provides shell-like regular expressions.  The wildcards provided are ?,\n"
"* and **, where ** is like * but matches /.  See compile_shellish for "
"details.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Barrie Slaymaker <barries at slaysys dot com>"
msgstr ""
"シェルで使用されるような正規表現の機能を提供します。ワイルドカードとして使用"
"できる文字としては、 ?, *, ** があります。なお、 ** は * と同じような動作をし"
"ますが、 / に対してもマッチします。詳しくは compile_shellish をお読みくださ"
"い。\n"
"\n"
"\n"
"\n"
"作者:\n"
"--------     Barrie Slaymaker <barries at slaysys dot com>"

#. leap/perl-Return-Value/summary
msgid "(deprecated) polymorphic return values"
msgstr "(廃止予定) 多型返り値"

#. leap/perl-Return-Value/description
msgid ""
"Polymorphic return values are a horrible idea, but this library was written "
"based on the notion that they were useful. Often, we just want to know if "
"something worked or not. Other times, we'd like to know what the error text "
"was. Still others, we may want to know what the error code was, and what the "
"error properties were. We don't want to handle objects or data structures "
"for every single return value, but we do want to check error conditions in "
"our code because that's what good programmers do.\n"
"\n"
"When functions are successful they may return true, or perhaps some useful "
"data. In the quest to provide consistent return values, this gets confusing "
"between complex, informational errors and successful return values.\n"
"\n"
"This module provides these features with a simplistic API that should get "
"you what you're looking for in each context a return value is used in."
msgstr ""
"多型 (複数のデータ型がありうる) 返り値は恐ろしい考え方ではありますが、このラ"
"イブラリでは便利であろうと考えのもと作られています。しばしばこの仕組みがうま"
"く動作するものかが知りたくなりますし、場合によってはエラーテキストは何だった"
"のかを知りたいことがあります。それ以外にも、エラーコードやプロパティが何で"
"あったのかを知りたいこともあります。それぞれの返り値にオブジェクトの処理や"
"データ構造を設定したくはありませんが、良いプログラマがやっているとおり、エ"
"ラー条件のチェックなどは行ないたいものです。\n"
"\n"
"関数の実行が成功すると、返り値や何らかの有用なデータが返るかもしれません。一"
"貫した返り値を提供するため、複雑で情報量の多いエラー情報と成功を示す情報を間"
"違えることもあります。\n"
"\n"
"このモジュールでは、シンプルな API で返り値に含まれる様々な情報を抽出するよう"
"な機能を提供します。"

#. leap/perl-Role-HasMessage/summary
msgid "a thing with a message method"
msgstr "message メソッドを持たせる役割"

#. leap/perl-Role-HasMessage/description
msgid ""
"This is another extremely simple role. A class that includes Role::"
"HasMessage is promising to provide a 'message' method that returns a string "
"summarizing the message or event represented by the object. It does _not_ "
"provide any actual behavior."
msgstr ""
"これはもう 1 つの非常にシンプルな役割です。Role::HasMessage を含むクラスは、"
"オブジェクトが表すメッセージやイベントに対して、その概要を表す文字列を返す "
"'message' メソッドを提供するようになります。実際の動作については、この役割は"
"なにも提供していません。"

#. leap/perl-Role-Identifiable/summary
msgid "Thing with a List of Tags"
msgstr "タグの一覧を持たせる役割"

#. leap/perl-Role-Identifiable/description
msgid "a thing with a list of tags"
msgstr "タグの一覧を持たせる役割です。"

#. leap/perl-Role-Tiny/summary
msgid "Roles. Like a nouvelle cuisine portion size slice of Moose"
msgstr ""
"Moose におけるヌーベルキュイジーヌのポーションサイズスライスのような役割"

#. leap/perl-Role-Tiny/description
msgid "'Role::Tiny' is a minimalist role composition tool."
msgstr "'Role::Tiny' は最小限の機能だけを持つ役割の組み合わせツールです。"

#. leap/perl-Rose-Object/summary
msgid "A simple object base class."
msgstr "シンプルなオブジェクトベースクラス"

#. leap/perl-Rose-Object/description
msgid ""
"the Rose::Object manpage is a generic object base class. It provides very "
"little functionality, but a healthy dose of convention."
msgstr ""
"Rose::Object は汎用的なオブジェクトのベースクラスです。非常に少ない機能だけが"
"提供されたスリムな仕組みです。"

#. leap/perl-Router-Simple/summary
msgid "simple HTTP router"
msgstr "シンプルな HTTP ルータ"

#. leap/perl-Router-Simple/description
msgid ""
"Router::Simple is a simple router class.\n"
"\n"
"Its main purpose is to serve as a dispatcher for web applications.\n"
"\n"
"Router::Simple can match against PSGI '$env' directly, which means it's easy "
"to use with PSGI supporting web frameworks."
msgstr ""
"Router::Simple はシンプルなルータクラスです。\n"
"\n"
"主な目的は、 Web アプリケーションに対するディスパッチャとして動作することで"
"す。\n"
"\n"
"Router::Simple は PSGI の '$env' に直接マッチし、 PSGI に対応する Web フレー"
"ムワークで簡単に使用することができます。"

#. leap/perl-SDL/summary
msgid "SDL bindings to Perl"
msgstr "Perl 向け SDL バインディング"

#. leap/perl-SDL/description
msgid ""
"SDL Perl are a set of bindings to the Simple DirectMedia Layer (SDL).\n"
"\n"
"Simple DirectMedia Layer is a cross-platform multimedia library designed to "
"provide low level access to audio, keyboard, mouse, joystick, 3D hardware "
"via OpenGL, and 2D video framebuffer. It is used by MPEG playback software, "
"emulators, and many popular games, including the award winning Linux port of "
"\"Civilization: Call To Power.\""
msgstr ""
"SDL Perl は Simple DirectMedia Layer (SDL) に対するバインディング集です。\n"
"\n"
"Simple DirectMedia Layer はプラットフォームに依存しないライブラリで、オーディ"
"オやキーボード、マウスやジョイスティック、 OpenGL を介した 3D ハードウエアや"
"2D ビデオのフレームバッファに低レベルなアクセスを行ないます。 MPEG 再生ソフト"
"ウエアやエミュレータ、多くの有名なゲーム (\"Civilization: Call To Power.\" な"
"ど、有名なゲームも含まれます) で使用されます。"

#. leap/perl-SGML-Parser-OpenSP/summary
msgid "Perl interface to the OpenSP SGML and XML parser"
msgstr "OpenSP SGML および XML パーサーに対する Perl インターフェイス"

#. leap/perl-SGML-Parser-OpenSP/description
msgid ""
"SGML::Parser::OpenSP provides a native Perl interface, written in C++ and "
"XS, to the OpenSP SGML and XML parser.\n"
"\n"
" Authors:\tBjoern Hoehrmann, <bjoern@hoehrmann.de>"
msgstr ""
"SGML::Parser::OpenSP は OpenSP SGML および XML パーサに対するネイティブ Perl "
"インターフェイスで、 C++ 言語と XS で作られています。\n"
"\n"
" 作者:\tBjoern Hoehrmann, <bjoern@hoehrmann.de>"

#. leap/perl-SGMLS/summary
msgid "SGML/XML Parsers"
msgstr "SGML/XML パーサー"

#. leap/perl-SGMLS/description
msgid ""
"SGMLSpm is a Perl script that reads ESIS output (from parsers like SP) and "
"offers an event-based interface to the parser. As long as the parser can "
"parse XML this also works for XML."
msgstr ""
"SGMLSpm は、 ESIS の出力 (SP のようなパーサから作成したもの) を読み取り、パー"
"サに対するイベントベースのインターフェイスを提供します。パーサが XML を処理で"
"きる限り、このモジュールは XML で動作します。"

#. leap/perl-SOAP-Lite/summary
msgid "Perl's Web Services Toolkit"
msgstr "Perl の Web サービスツールキット"

#. leap/perl-SOAP-Lite/description
msgid ""
"SOAP::Lite is a collection of Perl modules which provides a simple and "
"lightweight interface to the Simple Object Access Protocol (SOAP) both on "
"client and server side."
msgstr ""
"Perl 向け SOAP::Lite は、クライアントとしてもサーバとしても動作する、 Simple "
"Object Access Protocol (Service Oriented Access Protocol とも呼ばれる SOAP プ"
"ロトコル) のシンプルで軽量なインターフェイスを提供する Perl モジュール集で"
"す。"

#. leap/perl-SQL-Abstract/summary
msgid "Generate SQL from Perl data structures"
msgstr "Perl データ構造からの SQL の生成"

#. leap/perl-SQL-Abstract/description
msgid ""
"This module was inspired by the excellent DBIx::Abstract. However, in using "
"that module I found that what I really wanted to do was generate SQL, but "
"still retain complete control over my statement handles and use the DBI "
"interface. So, I set out to create an abstract SQL generation module.\n"
"\n"
"While based on the concepts used by DBIx::Abstract, there are several "
"important differences, especially when it comes to WHERE clauses. I have "
"modified the concepts used to make the SQL easier to generate from Perl data "
"structures and, IMO, more intuitive. The underlying idea is for this module "
"to do what you mean, based on the data structures you provide it. The big "
"advantage is that you don't have to modify your code every time your data "
"changes, as this module figures it out.\n"
"\n"
"To begin with, an SQL INSERT is as easy as just specifying a hash of "
"'key=value' pairs:\n"
"\n"
"    my %data = (         name => 'Jimbo Bobson',         phone => "
"'123-456-7890',         address => '42 Sister Lane',         city => 'St. "
"Louis',         state => 'Louisiana',     );\n"
"\n"
"The SQL can then be generated with this:\n"
"\n"
"    my($stmt, @bind) = $sql->insert('people', \\%data);\n"
"\n"
"Which would give you something like this:\n"
"\n"
"    $stmt = \"INSERT INTO people                     (address, city, name, "
"phone, state)                     VALUES (?, ?, ?, ?, ?)\";     @bind = ('42 "
"Sister Lane', 'St. Louis', 'Jimbo Bobson',              '123-456-7890', "
"'Louisiana');\n"
"\n"
"These are then used directly in your DBI code:\n"
"\n"
"    my $sth = $dbh->prepare($stmt);     $sth->execute(@bind);"
msgstr ""
"このモジュールは DBIx::Abstract という素晴らしいモジュールにヒントを得ていま"
"す。しかしながら、本当にやるべきことは SQL を生成することでありながら、ステー"
"トメントハンドルの完璧な制御や DBI インターフェイスの使用なども行なわなければ"
"ならない、ということに気が付いてしまいました。そのため、抽象的な SQL 生成モ"
"ジュールが必要であると考え、これを作成したものです。\n"
"\n"
"DBIx::Abstract で使用されている考え方をベースにしながら、特に WHERE 句を使用"
"する場合の重要な変更が加えられています。 Perl のデータ構造から SQL を簡単に "
"(かつ直感的に) 生成しやすくするため、考え方を変えて対応しています。このモ"
"ジュールにおけるベースとなる考え方は、提供したデータ構造をベースにして、意図"
"したとおりの動作を行なわせる、ということです。これの大きな利点としては、デー"
"タを変更してもコードを変更する必要がなく、このモジュールが検出したとおりに動"
"作させることができるという点にあります。\n"
"\n"
"このモジュールを始めるにあたっては、まず SQL INSERT がわかりやすいでしょう。 "
"'キー = 値' の対をハッシュにして指定するだけで実現できます:\n"
"\n"
"    my %data = (         name => 'Jimbo Bobson',         phone => "
"'123-456-7890',         address => '42 Sister Lane',         city => 'St. "
"Louis',         state => 'Louisiana',     );\n"
"\n"
"上記で作成したハッシュから、 SQL は下記のようにして生成することができます:\n"
"\n"
"    my($stmt, @bind) = $sql->insert('people', \\%data);\n"
"\n"
"生成される SQL は下記のようになります:\n"
"\n"
"    $stmt = \"INSERT INTO people                     (address, city, name, "
"phone, state)                     VALUES (?, ?, ?, ?, ?)\";     @bind = ('42 "
"Sister Lane', 'St. Louis', 'Jimbo Bobson',              '123-456-7890', "
"'Louisiana');\n"
"\n"
"生成された SQL は DBI コードに直接渡すことができます:\n"
"\n"
"    my $sth = $dbh->prepare($stmt);     $sth->execute(@bind);"

#. leap/perl-SQL-Abstract-Pg/summary
msgid "PostgreSQL features for SQL::Abstract"
msgstr "SQL::Abstract 用の PostgreSQL 機能"

#. leap/perl-SQL-Abstract-Pg/description
msgid ""
"SQL::Abstract::Pg extends SQL::Abstract with a few PostgreSQL features used "
"by Mojo::Pg."
msgstr ""
"SQL::Abstract::Pgは、Mojo::Pgによって使用されるいくつかのPostgreSQL機能によっ"
"てSQL::Abstractを拡張します。"

#. leap/perl-SQL-ReservedWords/summary
msgid "Reserved SQL words by ANSI/ISO"
msgstr "ANSI/ISO における SQL の予約語"

#. leap/perl-SQL-ReservedWords/description
msgid "Determine if words are reserved by ANSI/ISO SQL standard."
msgstr "ANSI/ISO SQL 標準で予約されている単語かどうかを判別します。"

#. leap/perl-SQL-SplitStatement/summary
msgid "Split any SQL code into atomic statements"
msgstr "SQL コードを複数のアトミック操作に分解するモジュール"

#. leap/perl-SQL-SplitStatement/description
msgid ""
"This is a simple module which tries to split any SQL code, even including "
"non-standard extensions (for the details see the the /SUPPORTED DBMSs "
"manpage section below), into the atomic statements it is composed of.\n"
"\n"
"The logic used to split the SQL code is more sophisticated than a raw "
"'split' on the ';' (semicolon) character: first, various different statement "
"terminator _tokens_ are recognized (see below for the list), then this "
"module is able to correctly handle the presence of said tokens inside "
"identifiers, values, comments, 'BEGIN ... END' blocks (even nested), _dollar-"
"quoted_ strings, MySQL custom 'DELIMITER's, procedural code etc., as "
"(partially) exemplified in the the /SYNOPSIS manpage above.\n"
"\n"
"Consider however that this is by no means a validating parser (technically "
"speaking, it's just a _context-sensitive tokenizer_). It should rather be "
"seen as an in-progress _heuristic_ approach, which will gradually improve as "
"test cases will be reported. This also means that, except for the the /"
"LIMITATIONS manpage detailed below, there is no known (to the author) SQL "
"code the most current release of this module can't correctly split.\n"
"\n"
"The test suite bundled with the distribution (which now includes the popular "
"_Sakila_ and _Pagila_ sample db schemata, as detailed in the the /SHOWCASE "
"manpage section below) should give you an idea of the capabilities of this "
"module\n"
"\n"
"If your atomic statements are to be fed to a DBMS, you are encouraged to use "
"the DBIx::MultiStatementDo manpage instead, which uses this module and also "
"(optionally) offers automatic transactions support, so that you'll have the "
"_all-or-nothing_ behavior you would probably want."
msgstr ""
"このモジュールは、非標準の拡張 (詳しくは /SUPPORTED DBMS をお読みください) を"
"含む任意の SQL コードを、複数のアトミック操作に分解することもできるモジュール"
"です。\n"
"\n"
"SQL コードを分解するロジックは、 'split' や ';' (セミコロン) 文字よりはより洗"
"練された仕組みです。まず、様々な異なるステートメント区切り文字を認識します "
"(一覧については下記をお読みください) 。このほか、識別子や値、コメントなどの中"
"にある前記トークンの存在を処理することもできますし、 'BEGIN ... END' ブロッ"
"ク (入れ子になったものを含む) や _ドルで括られた_ 文字列や MySQL の独自の "
"'DELIMITER' 、そしてプロシージャ系のコードなども処理することができます。詳し"
"い例は /SYNOPSIS をお読みください。\n"
"\n"
"ただし、このモジュールは検証型のパーサではないことに注意してください (技術的"
"に言うと、状況依存のトークナイザです) 。現在進行中の _経験則_ アプローチとし"
"て作成されている仕組みで、テストケースによって徐々に様々な仕組みを対応してい"
"ます。言い換えると、 /LIMITATIONS に示されているものを除いて、 (作者にとっ"
"て) このモジュールの現在のリリースでは、正しく分解できない既知の SQL コードは"
"存在していないことになります。\n"
"\n"
"配布物に同梱されているテストスイート (有名な _Sakila_ や _Pagila_ のようなサ"
"ンプル DB スキーマタを含みます。詳しくは /SHOWCASE をご覧ください) では、この"
"モジュールの機能に対する考え方が示されています。\n"
"\n"
"お使いのアトミックなステートメントを DBMS に与える場合は、 DBIx::"
"MultiStatementDo を代わりにお使いいただくことをお勧めします。こちらはこのモ"
"ジュールを利用して (必要であれば) 自動的にトランザクションにも対応し、 _all-"
"or-nothing_ (すべてが成功するか、もしくはすべてが失敗するか) の動作を行なうこ"
"とができます。"

#. leap/perl-SQL-Statement/summary
msgid "SQL parsing and processing engine"
msgstr "SQL の解釈と処理のエンジン"

#. leap/perl-SQL-Statement/description
msgid ""
"The SQL::Statement module implements a pure Perl SQL parsing and execution "
"engine. While it by no means implements full ANSI standard, it does support "
"many features including column and table aliases, built-in and user-defined "
"functions, implicit and explicit joins, complex nested search conditions, "
"and other features.\n"
"\n"
"SQL::Statement is a small embeddable Database Management System (DBMS). This "
"means that it provides all of the services of a simple DBMS except that "
"instead of a persistent storage mechanism, it has two things: 1) an in-"
"memory storage mechanism that allows you to prepare, execute, and fetch from "
"SQL statements using temporary tables and 2) a set of software sockets where "
"any author can plug in any storage mechanism.\n"
"\n"
"There are three main uses for SQL::Statement. One or another (hopefully not "
"all) may be irrelevant for your needs: 1) to access and manipulate data in "
"CSV, XML, and other formats 2) to build your own DBD for a new data source "
"3) to parse and examine the structure of SQL statements."
msgstr ""
"SQL::Statement モジュールは純粋な Perl SQL 解析と実行エンジンを実装していま"
"す。完全な ANSI 標準をすべて実装しているわけではありませんが、列やテーブルの"
"別名、内蔵およびユーザ定義での関数、間接的・直接的な join 、複雑なネスト検索"
"条件など、多数の機能を実装しています。\n"
"\n"
"SQL::Statement は小さな内蔵型データベース管理システム (DBMS) です。これは、固"
"定のストレージシステムの代替という例外を除いて、シンプルな DBMS の全サービス"
"を提供していることを意味しています。 1) 内蔵のメモリ内ストレージ機構により、"
"一時的なテーブルを利用した SQL ステートメントの準備や実行、結果のフェッチなど"
"を行なうことができます 2) また、必要であれば任意のストレージメカニズムを用意"
"するためのソフトウエアソケットを作成できます。\n"
"\n"
"SQL::Statement では 3 種類の用途を想定しています。 1 つ以上のもの (できればす"
"べてであることが望ましいです) が要件とは無関係であるものとは思いますが、 1) "
"CSV, XML などの形式で書かれたデータにアクセスしたり、操作したりする 2) 新しい"
"データソースを利用するための独自の DBD を構築する 3) SQL ステートメントの構造"
"を処理したり調査したりする"

#. leap/perl-SQL-Tokenizer/summary
msgid "A simple SQL tokenizer"
msgstr "シンプルな SQL トークン化"

#. leap/perl-SQL-Tokenizer/description
msgid ""
"SQL::Tokenizer is a simple tokenizer for SQL queries. It does not claim to "
"be a parser or query verifier. It just creates sane tokens from a valid SQL "
"query.\n"
"\n"
"It supports SQL with comments like:\n"
"\n"
" -- This query is used to insert a message into  -- logs table  INSERT INTO "
"log (application, message) VALUES (?, ?)\n"
"\n"
"Also supports '''', '\"\"' and '\\'' escaping methods, so tokenizing queries "
"like the one below should not be a problem:\n"
"\n"
" INSERT INTO log (application, message)  VALUES ('myapp', 'Hey, this is a "
"''single quoted string''!')"
msgstr ""
"SQL::Tokenizer は SQL のクエリに対するシンプルなトークナイザです。パーサでも"
"クエリの検証器でもないことに注意してください。正しい SQL のクエリから、正しい"
"トークンを作成するだけです。\n"
"\n"
"このモジュールは、下記のようなコメント付きの SQL にも対応しています:\n"
"\n"
" -- This query is used to insert a message into  -- logs table  INSERT INTO "
"log (application, message) VALUES (?, ?)\n"
"\n"
"このほか '''', '\"\"', '\\'' などのエスケープ処理にも対応していますので、下記"
"のようなクエリを処理しようとすると、問題が発生します:\n"
"\n"
" INSERT INTO log (application, message)  VALUES ('myapp', 'Hey, this is a "
"''single quoted string''!')"

#. leap/perl-SQL-Translator/summary
msgid "Manipulate structured data definitions (SQL and more)"
msgstr "構造化されたデータ定義の操作 (SQL 等)"

#. leap/perl-SQL-Translator/description
msgid ""
"This documentation covers the API for SQL::Translator. For a more general "
"discussion of how to use the modules and scripts, please see SQL::"
"Translator::Manual.\n"
"\n"
"SQL::Translator is a group of Perl modules that converts vendor-specific SQL "
"table definitions into other formats, such as other vendor-specific SQL, ER "
"diagrams, documentation (POD and HTML), XML, and Class::DBI classes. The "
"main focus of SQL::Translator is SQL, but parsers exist for other structured "
"data formats, including Excel spreadsheets and arbitrarily delimited text "
"files. Through the separation of the code into parsers and producers with an "
"object model in between, it's possible to combine any parser with any "
"producer, to plug in custom parsers or producers, or to manipulate the "
"parsed data via the built-in object model. Presently only the definition "
"parts of SQL are handled (CREATE, ALTER), not the manipulation of data "
"(INSERT, UPDATE, DELETE)."
msgstr ""
"このドキュメンテーションは SQL::Translator 向けの API を説明しているもので"
"す。このモジュールやスクリプトの使用方法に関する一般的な説明は、 SQL::"
"Translator::Manual をお読みください。\n"
"\n"
"SQL::Translator は Perl のモジュール集で、メーカー固有の SQL テーブルの定義を"
"他のメーカーのものや ER 図、ドキュメンテーション (POD および HTML) 、 XML や "
"Class::DBI クラスなどに変換することのできるモジュール集です。 SQL::"
"Translator の主なターゲットは SQL ですが、他の構造型データ形式、たとえば "
"Excel の表計算や任意の区切り文字で書かれたテキストなどに対応したパーサも存在"
"しています。コードからパーサ (処理器) とプロデューサ (生成器) をそれぞれオブ"
"ジェクトモデルに分解していることで、任意のパーサとプロデューサを組み合わせる"
"ことができるほか、独自のパーサやプロデューサを作成したり、処理されたデータを"
"内蔵のオブジェクトモデル経由で操作したりすることもできます。現時点では SQL の"
"定義部分 (CREATE, ALTER) のみを処理することができ、データの操作 (INSERT, "
"UPDATE, DELETE) には対応していません。"

#. leap/perl-SUPER/summary
msgid "Control Superclass Method Dispatch"
msgstr "スーパークラスのメソッド実行の制御"

#. leap/perl-SUPER/description
msgid ""
"When subclassing a class, you occasionally want to dispatch control to the "
"superclass -- at least conditionally and temporarily. The Perl syntax for "
"calling your superclass is ugly and unwieldy:\n"
"\n"
"    $self->SUPER::method(@_);\n"
"\n"
"especially when compared to its Ruby equivalent:\n"
"\n"
"    super;\n"
"\n"
"It's even worse in that the normal Perl redispatch mechanism only dispatches "
"to the parent of the class containing the method _at compile time_. That "
"doesn't work very well for mixins and roles.\n"
"\n"
"This module provides nicer equivalents, along with the universal method "
"'super' to determine a class' own superclass. This allows you to do things "
"such as:\n"
"\n"
"    goto &{$_[0]->super('my_method')};\n"
"\n"
"if you don't like wasting precious stack frames.\n"
"\n"
"If you are using roles or mixins or otherwise pulling in methods from other "
"packages that need to dispatch to their super methods, or if you want to "
"pass different arguments to the super method, use the 'SUPER()' method:\n"
"\n"
"    $self->SUPER( qw( other arguments here ) );"
msgstr ""
"クラスをサブクラス化した場合、時としてスーパークラスに対して制御を発信したい"
"と思うことがあります。もちろんこれは条件にもよりますし、一時的なものでもあり"
"ます。 Perl におけるスーパークラスの呼び出しは非常に醜く扱いにくいものです:\n"
"\n"
"    $self->SUPER::method(@_);\n"
"\n"
"Ruby では下記のように非常に分かりやすく記述します:\n"
"\n"
"    super;\n"
"\n"
"また、通常の Perl の再発信機構を利用すると、コンパイルした時点でのメソッドを"
"含むクラスの親にのみ発信されます。このような仕様では、 mixin や役割を使用する"
"環境ではうまく動作しません。\n"
"\n"
"このモジュールは、このような動作に対して非常に分かりやすい記述を提供します。"
"このモジュールは汎用メソッド 'super' を提供するもので、これによって自分自身の"
"親を呼び出します。これにより、スタックフレームを無駄使いしたくない場合は、下"
"記のように記述できるようになります:\n"
"\n"
"    goto &{$_[0]->super('my_method')};\n"
"\n"
"役割や mixin を利用している場合、もしくは他のパッケージからのメソッドの引き込"
"みを行ない、スーパークラスのメソッドを発信する必要がある場合、もしくはスー"
"パーメソッドで異なるパラメータを指定したい場合は、 'SUPER()' メソッドを使用し"
"ます:\n"
"\n"
"    $self->SUPER( qw( other arguments here ) );"

#. leap/perl-SVG/summary
msgid "Perl extension for generating Scalable Vector Graphics (SVG) documents"
msgstr "Scalable Vector Graphics (SVG) 文書を生成するための Perl 拡張"

#. leap/perl-SVG/description
msgid ""
"SVG is a 100% Perl module which generates a nested data structure containing "
"the DOM representation of an SVG (Scalable Vector Graphics) image. Using "
"SVG, you can generate SVG objects, embed other SVG instances into it, access "
"the DOM object, create and access javascript, and generate SMIL animation "
"content."
msgstr ""
"SVG モジュールは純粋に Perl だけで作られたモジュールで、 SVG (Scalable "
"Vector Graphics) 画像の DOM 表記を含む、入れ子になったデータ構造を作成するこ"
"とができます。 SVG を利用すると SVG のオブジェクトを生成できるほか、他の SVG "
"インスタンスを組み込んだり、 DOM のオブジェクトにアクセスしたり、 JavaScript "
"を作成またはアクセスしたり、 SMIL アニメーションコンテンツを生成したりするこ"
"ともできます。"

#. leap/perl-SVN-Simple/summary
msgid "A simple interface to subversion's editor interface"
msgstr ""
"subversion のエディタインターフェイスに対するシンプルなインターフェイス"

#. leap/perl-SVN-Simple/description
msgid ""
"SVN::Simple::Edit wraps the subversion delta editor with a perl friendly "
"interface and then you could easily drive it for describing changes to a "
"tree. A common usage is to wrap the commit editor, so you could make commits "
"to a subversion repository easily.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Chia-liang Kao <clkao at clkao dot org>"
msgstr ""
"SVN::Simple::Edit は subversion の差分エディタに対するラッパーで、 Perl を使"
"用したわかりやすいインターフェイスと、それに伴ってツリー上の変更点の説明を簡"
"単に扱うことができるようにするものです。一般的な使い方としてはコミットエディ"
"タに対するラッパーで、 subversion リポジトリに対するコミットを簡単に行なうこ"
"とができます。\n"
"\n"
"\n"
"\n"
"作者:\n"
"--------     Chia-liang Kao <clkao at clkao dot org>"

#. leap/perl-Safe-Isa/summary
msgid "Call isa, can, does and DOES safely on things that may not be objects"
msgstr ""
"オブジェクトではないかもしれないものに対して、 isa, can, does を安全に呼び出"
"すモジュール"

#. leap/perl-Safe-Isa/description
msgid ""
"How many times have you found yourself writing:\n"
"\n"
"  if ($obj->isa('Something')) {\n"
"\n"
"and then shortly afterwards cursing and changing it to:\n"
"\n"
"  if (Scalar::Util::blessed($obj) and $obj->isa('Something')) {\n"
"\n"
"Right. That's why this module exists.\n"
"\n"
"Since perl allows us to provide a subroutine reference or a method name to "
"the -> operator when used as a method call, and a subroutine doesn't require "
"the invocant to actually be an object, we can create safe versions of isa, "
"can and friends by using a subroutine reference that only tries to call the "
"method if it's used on an object. So:\n"
"\n"
"  my $isa_Foo = $maybe_an_object->$_call_if_object(isa => 'Foo');\n"
"\n"
"is equivalent to\n"
"\n"
"  my $isa_Foo = do {     if (Scalar::Util::blessed($maybe_an_object)) "
"{       $maybe_an_object->isa('Foo');     } else {       undef;     }   };\n"
"\n"
"Note that we don't handle trying class names, because many things are valid "
"class names that you might not want to treat as one (like say \"Matt\") - "
"the 'is_module_name' function from Module::Runtime is a good way to check "
"for something you might be able to call methods on if you want to do that.\n"
"\n"
"We are careful to make sure that scalar/list context is preserved for the "
"method that is eventually called."
msgstr ""
"今まで下記のような記述をどれだけ書いてきたでしょうか？:\n"
"\n"
"  if ($obj->isa('Something')) {\n"
"\n"
"上記のように記述しても、すぐに下記のようなわかりにくいコードに変える必要に迫"
"られることもあります:\n"
"\n"
"  if (Scalar::Util::blessed($obj) and $obj->isa('Something')) {\n"
"\n"
"上記のようなコードを改善するために、このモジュールが存在します。\n"
"\n"
"Perl ではメソッドの呼び出しとして利用する際、 -> の演算子でサブルーチンの参照"
"やメソッド名を指定することができます。また、さぶるーちんは実際にはオブジェク"
"トでなくても構わない仕組みになっています。そのため、 isa の安全な版を作成し"
"て、オブジェクトとして使用された場合にのみメソッドを呼び出そうとするようなサ"
"ブルーチン参照を使用することができるようになります:\n"
"\n"
"  my $isa_Foo = $maybe_an_object->$_call_if_object(isa => 'Foo');\n"
"\n"
"上記は下記と同じ意味になります:\n"
"\n"
"  my $isa_Foo = do {     if (Scalar::Util::blessed($maybe_an_object)) "
"{       $maybe_an_object->isa('Foo');     } else {       undef;     }   };\n"
"\n"
"ただし、クラス名に対しては様々なものが利用できてしまうことから、クラス名に関"
"しては処理しようとしないことに注意してください。 Module::Runtime には "
"'is_module_name' という関数がありますので、こちらを利用してクラスかどうかを判"
"断してください。\n"
"\n"
"我々は最終的に呼び出されるメソッドに対して、スカラーやリストのコンテキストが"
"保持されるように注意しています。"

#. leap/perl-Scalar-List-Utils/summary
#. leap/perl-Scalar-List-Utils/description
msgid "Common Scalar and List utility subroutines"
msgstr "汎用スカラー／リストユーティリティサブルーチン集"

#. leap/perl-Scalar-String/summary
msgid "String Aspects of Scalars"
msgstr "スカラー値の文字列化"

#. leap/perl-Scalar-String/description
msgid ""
"This module is about the string part of plain Perl scalars. A scalar has a "
"string value, which is notionally a sequence of Unicode codepoints, but may "
"be internally encoded in either ISO-8859-1 or UTF-8. In places, and more so "
"in older versions of Perl, the internal encoding shows through. To fully "
"understand Perl strings it is necessary to understand these implementation "
"details.\n"
"\n"
"This module provides functions to classify a string by encoding and to "
"encode a string in a desired way.\n"
"\n"
"This module is implemented in XS, with a pure Perl backup version for "
"systems that can't handle XS."
msgstr ""
"このモジュールは Perl のスカラー値の文字列部分に関するものです。スカラー値に"
"は文字列値が設定されていますが、これは概念上、 ISO-8859-1 もしくは UTF-8 で内"
"部的にエンコードされた Unicode コードポイントの並びとして解釈することができま"
"す。実際のところ、古いバージョンの Perl では、内部エンコーディングがそのよう"
"になっています。 Perl の文字列について詳しく知るには、これらの実装に関する詳"
"細を知る必要があります。\n"
"\n"
"このモジュールは、エンコーディングで文字列を分類したり、必要な方法で文字列を"
"エンコードするための関数を提供しています。\n"
"\n"
"なお、このモジュールは XS で実装されていますが、 XS を処理できないシステム向"
"けに純粋 Perl 版も用意されています。"

#. leap/perl-Scope-Guard/summary
msgid "Lexically-Scoped Resource Management"
msgstr "レキシカルスコープにおけるリソース管理"

#. leap/perl-Scope-Guard/description
msgid ""
"This module provides a convenient way to perform cleanup or other forms of "
"resource management at the end of a scope. It is particularly useful when "
"dealing with exceptions: the 'Scope::Guard' constructor takes a reference to "
"a subroutine that is guaranteed to be called even if the thread of execution "
"is aborted prematurely. This effectively allows lexically-scoped \"promises"
"\" to be made that are automatically honoured by perl's garbage collector.\n"
"\n"
"For more information, see: the http://www.drdobbs.com/cpp/184403758 manpage"
msgstr ""
"このモジュールは、スコープの終了時にクリーンアップやその他のリソース管理を実"
"施するための便利な方法です。特に例外を取り扱う際に便利な仕組みで、 Scope::"
"Guard のコンストラクタはサブルーチンの参照を受け取り、スレッドが異常終了した"
"場合にも必ず呼び出される仕組みを提供します。これにより、文法上の規約で正しい"
"表現のまま、 Perl のガーベージコレクタを自動的に呼び出す仕組みを提供しま"
"す。\n"
"\n"
"詳しくは http://www.drdobbs.com/cpp/184403758 をお読みください。"

#. leap/perl-Scope-Upper/summary
msgid "Act on upper scopes"
msgstr "上位スコープでの処理"

#. leap/perl-Scope-Upper/description
msgid ""
"This module lets you defer actions _at run-time_ that will take place when "
"the control flow returns into an upper scope. Currently, you can:\n"
"\n"
"  * hook an upper scope end with reap ;\n"
"\n"
"  * localize variables, array/hash values or deletions of elements in higher "
"contexts with respectively localize, localize_elem and localize_delete ;\n"
"\n"
"  * return values immediately to an upper level with unwind, yield and "
"leave ;\n"
"\n"
"  * gather information about an upper context with want_at and "
"context_info ;\n"
"\n"
"  * execute a subroutine in the setting of an upper subroutine stack frame "
"with uplevel ;\n"
"\n"
"  * uniquely identify contexts with uid and validate_uid."
msgstr ""
"このモジュールは、上位のスコープに制御が返る際に実行すべきコードを、実行時に"
"定義することのできるモジュールです。現時点では、下記のような機能が用意されて"
"います:\n"
"\n"
"  * reap による上位スコープに対するフック;\n"
"\n"
"  * localize_elem, localize_delete による変数、配列、ハッシュ値のローカル化、"
"より高いコンテキスト内で関連するローカル化による要素の削除;\n"
"\n"
"  * unwind, yield, leave による上位レベルへの即時返却;\n"
"\n"
"  * want_at and context_info による上位コンテキストに関する情報の収集;\n"
"\n"
"  * uplevel による上位サブルーチンのスタックフレームに設定するサブルーチンの"
"実行;\n"
"\n"
"  * uid, validate_uid による識別子の設定"

#. leap/perl-Selenium-Remote-Driver/summary
msgid "Perl Client for Selenium Remote Driver"
msgstr "Selenium Remote Driver 向け Perl クライアント"

#. leap/perl-Selenium-Remote-Driver/description
msgid ""
"Selenium is a test tool that allows you to write automated web application "
"UI tests in any programming language against any HTTP website using any "
"mainstream JavaScript-enabled browser. This module is an implementation of "
"the client for the Remote driver that Selenium provides. You can find "
"bindings for other languages at this location:\n"
"\n"
"https://www.seleniumhq.org/download/\n"
"\n"
"This module sends commands directly to the Server using HTTP. Using this "
"module together with the Selenium Server, you can automatically control any "
"supported browser. To use this module, you need to have already downloaded "
"and started the Selenium Server (Selenium Server is a Java application)."
msgstr ""
"Selenium は自動化された Web アプリケーションの UI テストを、任意のプログラミ"
"ング言語で作成し、任意の HTTP Web サイトに対して任意の主な JavaScript 対応の"
"ブラウザで実施することのできる、テストツールです。このモジュールは Selenium "
"が提供する Remote ドライバ向けのクライアント実装です。他の言語に対するバイン"
"ディングは、下記をご覧ください:\n"
"\n"
"https://www.seleniumhq.org/download/\n"
"\n"
"このモジュールは HTTP を利用してサーバにコマンドを送信します。このモジュール"
"を Selenium サーバとともに使用すると、任意の対応ブラウザを自動的に制御するこ"
"とができます。このモジュールを使用するには、 Selenium サーバをダウンロードお"
"よび開始しておく必要があります (Selenium サーバは Java アプリケーションで"
"す) 。"

#. leap/perl-Sereal-Decoder/summary
msgid "Binary serialization module for Perl (decoder part)"
msgstr "Perl 向けバイナリシリアライズモジュール (デコーダパート)"

#. leap/perl-Sereal-Decoder/description
msgid ""
"This library implements a deserializer for an efficient, compact-output, and "
"feature-rich binary protocol called _Sereal_. Its sister module Sereal::"
"Encoder implements an encoder for this format. The two are released "
"separately to allow for independent and safer upgrading.\n"
"\n"
"The Sereal protocol versions that are compatible with this decoder "
"implementation are currently protocol versions 1, 2, 3 and 4. As it stands, "
"it will refuse to attempt to decode future versions of the protocol, but if "
"necessary there is likely going to be an option to decode the parts of the "
"input that are compatible with version 4 of the protocol. The protocol was "
"designed to allow for this.\n"
"\n"
"The protocol specification and many other bits of documentation can be found "
"in the github repository. Right now, the specification is at https://github."
"com/Sereal/Sereal/blob/master/sereal_spec.pod, there is a discussion of the "
"design objectives in https://github.com/Sereal/Sereal/blob/master/README."
"pod, and the output of our benchmarks can be seen at https://github.com/"
"Sereal/Sereal/wiki/Sereal-Comparison-Graphs."
msgstr ""
"このライブラリは _Sereal_ と呼ばれる、効率的でコンパクトな出力を行なう、機能"
"豊富なバイナリプロトコルです。姉妹モジュールである Sereal::Encoder では、この"
"形式へのエンコード機能を提供します。個別にインストールしたり、安全にアップグ"
"レードしたりする目的で、それぞれのモジュールは個別に提供されています。\n"
"\n"
"このデコーダが扱うことのできる Sereal プロトコルのバージョンは 1, 2, 3, 4 の"
"いずれかです。それ以降のプロトコルバージョンのデコードは拒否する要になってい"
"ますので、必要であればプロトコルのバージョン 4 と互換性のある入力を行なってく"
"ださい。プロトコル側でもこのように設計されています。\n"
"\n"
"プロトコルの仕様とその他のドキュメンテーションについては、 github のリポジト"
"リをご覧ください。現時点では仕様は https://github.com/Sereal/Sereal/blob/"
"master/sereal_spec.pod で公開しています。また、設計面の議論については "
"https://github.com/Sereal/Sereal/blob/master/README.pod に、ベンチマークの出"
"力結果は https://github.com/Sereal/Sereal/wiki/Sereal-Comparison-Graphs にそ"
"れぞれ用意されています。"

#. leap/perl-Sereal-Encoder/summary
msgid "Binary serialization module for Perl (encoder part)"
msgstr "Perl 向けバイナリシリアライズモジュール (エンコーダパート)"

#. leap/perl-Sereal-Encoder/description
msgid ""
"This library implements an efficient, compact-output, and feature-rich "
"serializer using a binary protocol called _Sereal_. Its sister module "
"Sereal::Decoder implements a decoder for this format. The two are released "
"separately to allow for independent and safer upgrading. If you care greatly "
"about performance, consider reading the Sereal::Performance documentation "
"after finishing this document.\n"
"\n"
"The Sereal protocol version emitted by this encoder implementation is "
"currently protocol version 4 by default.\n"
"\n"
"The protocol specification and many other bits of documentation can be found "
"in the github repository. Right now, the specification is at https://github."
"com/Sereal/Sereal/blob/master/sereal_spec.pod, there is a discussion of the "
"design objectives in https://github.com/Sereal/Sereal/blob/master/README."
"pod, and the output of our benchmarks can be seen at https://github.com/"
"Sereal/Sereal/wiki/Sereal-Comparison-Graphs. For more information on getting "
"the best performance out of Sereal, have a look at the \"PERFORMANCE\" "
"section below."
msgstr ""
"このライブラリは _Sereal_ と呼ばれる、効率的でコンパクトな出力を行なう、機能"
"豊富なバイナリプロトコルです。姉妹モジュールである Sereal::Decoder では、この"
"形式からのデコード機能を提供します。これら 2 つは個別にインストールしたり、安"
"全にアップグレードしたりする目的で個別に提供されています。性能に関して知りた"
"い場合は、このパッケージをインストールした後 Sereal::Performance のドキュメン"
"テーションをお読みください。\n"
"\n"
"このエンコーダでは、既定ではプロトコルバージョン 4 のものを出力するようになっ"
"ています。\n"
"\n"
"プロトコルの仕様とその他のドキュメンテーションについては、 github のリポジト"
"リをご覧ください。現時点では仕様は https://github.com/Sereal/Sereal/blob/"
"master/sereal_spec.pod で公開しています。また、設計面の議論については "
"https://github.com/Sereal/Sereal/blob/master/README.pod に、ベンチマークの出"
"力結果は https://github.com/Sereal/Sereal/wiki/Sereal-Comparison-Graphs にそ"
"れぞれ用意されています。"

#. leap/perl-Set-Crontab/summary
msgid "Expand crontab(5)-style integer lists"
msgstr "crontab(5) 形式の整数リストの展開"

#. leap/perl-Set-Crontab/description
msgid ""
"Set::Crontab parses crontab-style lists of integers and defines some utility "
"functions to make it easier to deal with them.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Abhijit Menon-Sen <ams@wiw.org>"
msgstr ""
"Set::Crontab は整数の一覧を解釈し、それらを簡単に扱うことができる、いくつかの"
"ユーティリティ関数を定義しています。\n"
"\n"
"\n"
"\n"
"作者:\n"
"--------     Abhijit Menon-Sen <ams@wiw.org>"

#. leap/perl-Set-Object/summary
msgid "Set of objects and strings"
msgstr "オブジェクト／文字列集"

#. leap/perl-Set-Object/description
msgid ""
"This modules implements a set of objects, that is, an unordered collection "
"of objects without duplication.\n"
"\n"
"The term _objects_ is applied loosely - for the sake of Set::Object, "
"anything that is a reference is considered an object.\n"
"\n"
"Set::Object 1.09 and later includes support for inserting scalars (including "
"the empty string, but excluding 'undef') as well as objects. This can be "
"thought of as (and is currently implemented as) a degenerate hash that only "
"has keys and no values. Unlike objects placed into a Set::Object, scalars "
"that are inserted will be flattened into strings, so will lose any magic "
"(eg, tie) or other special bits that they went in with; only strings come "
"out."
msgstr ""
"このモジュールは、オブジェクトのセットを実装するモジュールです。登録されたオ"
"ブジェクトは順序を持たず、重複するオブジェクトは登録できません。\n"
"\n"
"ここで言うところの _オブジェクト_ とは、非常に幅広いものを指しています。Set::"
"Object のマニュアルページにもあるとおり、参照すべてがオブジェクトとしてみなさ"
"れます。\n"
"\n"
"Set::Object のバージョン 1.09 またはそれ以降の場合は、オブジェクトだけでなく"
"スカラー値の挿入にも対応しています (空文字列も挿入できますが、 'undef' は挿入"
"できません) 。これはつまり、キー値だけで値のないハッシュであるものとみなすこ"
"とができます (実際にもそういう実装になっています) 。 Set::Object 内ではオブ"
"ジェクトとは異なり、スカラー値は文字列に変換されて挿入されます。これにより、"
"タイなどのマジック機構を失うほか、特殊ビットの設定なども無視されることになり"
"ます。"

#. leap/perl-Set-Scalar/summary
msgid "Basic Set Operations"
msgstr "基本セットの操作"

#. leap/perl-Set-Scalar/description
msgid "basic set operations"
msgstr "基本的なセット操作"

#. leap/perl-Smart-Comments/summary
msgid "Comments that do more than just sit there"
msgstr "単なるコメント以上の機能を提供するモジュール"

#. leap/perl-Smart-Comments/description
msgid ""
"Smart comments provide an easy way to insert debugging and tracking code "
"into a program. They can report the value of a variable, track the progress "
"of a loop, and verify that particular assertions are true.\n"
"\n"
"Best of all, when you're finished debugging, you don't have to remove them. "
"Simply commenting out the 'use Smart::Comments' line turns them back into "
"regular comments. Leaving smart comments in your code is smart because if "
"you needed them once, you'll almost certainly need them again later."
msgstr ""
"Smart::Comment は、デバッグを容易にして、プログラム内のコードを追いかけるため"
"の適切な情報を提供するものです。変数の値や、ループの状況、特定のアサーション"
"が true であるかどうかなどを報告することができます。\n"
"\n"
"このモジュールの最大の利点は、デバッグが終わってもデバッグ用のコードを削除す"
"る必要が無いということです。単に 'use Smart::Comments' 行をコメントアウトする"
"だけで、通常のコメントと同様に扱われるようになります。 Smart::Comment 対応の"
"コードを残しておくことで、後からデバッグをやり直す必要が生じた場合でも、コー"
"ドを書き直す必要がなくなります。"

#. leap/perl-Snowball-Norwegian/summary
#. leap/perl-Snowball-Norwegian/description
msgid "Porters stemming algorithm for norwegian."
msgstr "ノルウェー語向け Porters stemming algorithm"

#. leap/perl-Snowball-Swedish/summary
#. leap/perl-Snowball-Swedish/description
msgid "Porters stemming algorithm for swedish."
msgstr "スウェーデン語向け Porters stemming algorithm"

#. leap/perl-Socket-MsgHdr/summary
msgid "Sendmsg, Recvmsg and Ancillary Data Operations"
msgstr "sendmsg, recvmsg および補助データ操作"

#. leap/perl-Socket-MsgHdr/description
msgid ""
"Socket::MsgHdr provides advanced socket messaging operations via sendmsg and "
"recvmsg. Like their C counterparts, these functions accept few parameters, "
"instead stuffing a lot of information into a complex structure.\n"
"\n"
"This structure describes the message sent or received (buf), the peer on the "
"other end of the socket (name), and ancillary or so-called control "
"information (cmsghdr). This ancillary data may be used for file descriptor "
"passing, IPv6 operations, and a host of implemenation-specific extensions."
msgstr ""
"Socket::MsgHdr は sendmsg や recvmsg を介して高度なソケットのメッセージ操作を"
"提供します。 C 言語の同名関数と同様に、これらの関数のパラメータは少なく、複雑"
"な構造体に多数の情報を埋め込んで使用します。\n"
"\n"
"この構造体は送受信されるメッセージに関する情報 (buf) のほか、ソケットの対向側"
"に関する情報 (name) 、および補助的な制御情報 (cmsghdr) から構成されます。この"
"補助データはファイルディスクリプタの処理や IPv6 の操作、実装固有の拡張を持つ"
"ホストなどで使用します。"

#. leap/perl-Socket6/summary
msgid "IPv6 Sockets (Perl Module)"
msgstr "IPv6 ソケット (Perl モジュール)"

#. leap/perl-Socket6/description
msgid ""
"The IPv6 related part of the C socket.h defines and structure manipulators."
msgstr ""
"C 言語の socket.h で提供される定義と構造操作のうち、 IPv6 関連の部分を提供し"
"ます。"

#. leap/perl-Software-License/summary
msgid "Packages That Provide Templated Software Licenses"
msgstr "ソフトウエアライセンスのひな型を提供するパッケージ"

#. leap/perl-Software-License/description
msgid "packages that provide templated software licenses"
msgstr "ソフトウエアライセンスのひな型を提供するパッケージ"

#. leap/perl-Sort-Key/summary
msgid "the fastest way to sort anything in Perl"
msgstr "Perl 内でもっとも高速な並べ替え処理"

#. leap/perl-Sort-Key/description
msgid ""
"Sort::Key provides a set of functions to sort lists of values by some "
"calculated key value.\n"
"\n"
"It is faster (usually *much faster*) and uses less memory than other "
"alternatives implemented around perl sort function (ST, GRT, etc.).\n"
"\n"
"Multi-key sorting functionality is also provided via the companion modules "
"the Sort::Key::Multi manpage, the Sort::Key::Maker manpage and the Sort::"
"Key::Register manpage."
msgstr ""
"Sort::Key はいくつかの計算されたキー値によってリストを並べ替えるための関数集"
"です。\n"
"\n"
"このモジュールは高速な (通常は *非常に高速な*) 仕組みで、他の perl sort 関数"
"関連の代替モジュール (ST, GRT など) と比較してもメモリの消費量が少なくて済む"
"ようにもなっています。\n"
"\n"
"マルチキーソートの機能は、 Sort::Key::Multi, Sort::Key::Make, Sort::Key::"
"Register というコンパニオンモジュールを介しても提供されています。"

#. leap/perl-Sort-Naturally/summary
msgid "sort lexically, but sort numeral parts numerically"
msgstr "字句順に並べ替えるが、数値部分は数値順に並べ替えるモジュール"

#. leap/perl-Sort-Naturally/description
msgid ""
"This module exports two functions, 'nsort' and 'ncmp'; they are used in "
"implementing my idea of a \"natural sorting\" algorithm. Under natural "
"sorting, numeric substrings are compared numerically, and other word-"
"characters are compared lexically.\n"
"\n"
"This is the way I define natural sorting: \n"
"* *\n"
"\n"
"  Non-numeric word-character substrings are sorted lexically,   case-"
"insensitively: \"Foo\" comes between \"fish\" and \"fowl\". \n"
"* *\n"
"\n"
"  Numeric substrings are sorted numerically: \"100\" comes after \"20\", "
"not   before. \n"
"* *\n"
"\n"
"  \\W substrings (neither words-characters nor digits) are _ignored_. \n"
"* *\n"
"\n"
"  Our use of \\w, \\d, \\D, and \\W is locale-sensitive: Sort::Naturally "
"uses a   'use locale' statement. \n"
"* *\n"
"\n"
"  When comparing two strings, where a numeric substring in one place is   "
"_not_ up against a numeric substring in another, the non-numeric always   "
"comes first. This is fudged by reading pretending that the lack of a   "
"number substring has the value -1, like so:\n"
"\n"
"    foo       =>  \"foo\",  -1     foobar    =>  \"foo\",  -1,  \"bar\"     "
"foo13     =>  \"foo\",  13,     foo13xyz  =>  \"foo\",  13,  \"xyz\"\n"
"\n"
"  That's so that \"foo\" will come before \"foo13\", which will come "
"before   \"foobar\". \n"
"* *\n"
"\n"
"  The start of a string is exceptional: leading non-\\W (non-word,   non-"
"digit) components are are ignored, and numbers come _before_ letters. \n"
"* *\n"
"\n"
"  I define \"numeric substring\" just as sequences matching m/\\d+/ --   "
"scientific notation, commas, decimals, etc., are not seen. If your data   "
"has thousands separators in numbers (\"20,000 Leagues Under The Sea\" or   "
"\"20.000 lieues sous les mers\"), consider stripping them before feeding   "
"them to 'nsort' or 'ncmp'."
msgstr ""
"このモジュールは 'nsort', 'ncmp' という 2 つの関数を公開します。これらは \"自"
"然順ソート\" アルゴリズムの考え方を実装する際に使用されているものです。自然順"
"ソートでは、数値は数値順に比較されますが、他の文字は字句順で比較されます。\n"
"\n"
"このモジュールでは、自然順を下記の方式で並べるものであると定義しています:\n"
"* *\n"
"\n"
"  非数値の文字は大文字と小文字を区別せずに字句順に並べます: たとえば \"Foo\" "
"は \"fish\" と \"fowl\" の間に来るものとします。\n"
"* *\n"
"\n"
"  数値は数値順に並べます: たとえば \"100\" は \"20\" の後に来るものとしま"
"す。\n"
"* *\n"
"\n"
"  \\W の副文字列 (文字でも数字でもないもの) は無視されます。\n"
"* *\n"
"\n"
"  \\w, \\d, \\D, \\W はいずれもロケールに依存するものとします: Sort::"
"Naturally では 'use locale' ステートメントを使用しています。\n"
"* *\n"
"\n"
"  2 つの文字列を比較する際、一方の場所内にある数値が他方の場所にある数値より"
"も小さい場合、非数値のものが常に先に来るようになります。これは数値があるべき"
"はずの場所に、 -1 の数値があるものとしてみなすことで処理しています。例えば下"
"記のようになります:\n"
"\n"
"    foo       =>  \"foo\",  -1     foobar    =>  \"foo\",  -1,  \"bar\"     "
"foo13     =>  \"foo\",  13,     foo13xyz  =>  \"foo\",  13,  \"xyz\"\n"
"\n"
"  このようなルールから、 \"foo\" は \"foo13\" よりも前に来ますし、 \"foobar"
"\" よりも前に来ることになります。\n"
"* *\n"
"\n"
"  文字列の開始位置は例外的に扱います: \\W (文字、数字) 以外の文字が最初に来て"
"も、それらは無視されます。\n"
"* *\n"
"\n"
"  また、 \"数値\" は m/\\d+/ の正規表現に該当するものをターゲットにします。そ"
"のため、各種の科学記法やカンマ、少数などは無視されます。ただし、 1000 単位の"
"区切り (例: \"20,000 Leagues Under The Sea\" や \"20.000 lieues sous les mers"
"\") については、 'nsort' や 'nmap' に渡される前に削除が行なわれます。"

#. leap/perl-Sort-Versions/summary
msgid "Perl 5 Module for Sorting of Revision-Like Numbers"
msgstr "リビジョンなどの番号を並べ替えるための Perl 5 モジュール"

#. leap/perl-Sort-Versions/description
msgid ""
"Sort::Versions allows easy sorting of mixed non-numeric and numeric strings, "
"like the 'version numbers' that many shared library systems and revision "
"control packages use. This is quite useful if you are trying to deal with "
"shared libraries. It can also be applied to applications that intersperse "
"variable-width numeric fields within text. Other applications can "
"undoubtedly be found.\n"
"\n"
"For an explanation of the algorithm, it's simplest to look at these "
"examples:\n"
"\n"
"  1.1   <  1.2   1.1a  <  1.2   1.1   <  1.1.1   1.1   <  1.1a   1.1.a <  "
"1.1a   1     <  a   a     <  b   1     <  2   1.1-3 <  1.1-4   1.1-5 <  "
"1.1.6\n"
"\n"
"More precisely (but less comprehensibly), the two strings are treated as "
"subunits delimited by periods or hyphens. Each subunit can contain any "
"number of groups of digits or non-digits. If digit groups are being compared "
"on both sides, a numeric comparison is used, otherwise a ASCII ordering is "
"used. A group or subgroup with more units will win if all comparisons are "
"equal. A period binds digit groups together more tightly than a hyphen.\n"
"\n"
"Some packages use a different style of version numbering: a simple real "
"number written as a decimal. Sort::Versions has limited support for this "
"style: when comparing two subunits which are both digit groups, if either "
"subunit has a leading zero, then both are treated like digits after a "
"decimal point. So for example:\n"
"\n"
"  0002  <  1   1.06  <  1.5\n"
"\n"
"This won39t always work, because there won39t always be a leading zero in "
"real-number style version numbers. There is no way for Sort::Versions to "
"know which style was intended. But a lot of the time it will do the right "
"thing. If you are making up version numbers, the style with (possibly) more "
"than one dot is the style to use."
msgstr ""
"Sort::Versions は数値と文字が混在する 'バージョン番号' のような文字列を簡単に"
"並べ替えることのできるモジュールです。バージョン番号は数多くの共有ライブラリ"
"やリビジョンコントロールシステムで使われているもので、特に共有ライブラリを扱"
"う際には便利なモジュールになっています。このほか、様々な幅の数値フィールドが"
"散在するテキストなどに対しても、利用することができます。このような仕組みを備"
"えたアプリケーションはほかにはありません。\n"
"\n"
"まずは下記の例をご覧ください。アルゴリズムの動作が簡単にわかるようになってい"
"ます:\n"
"\n"
"  1.1   <  1.2   1.1a  <  1.2   1.1   <  1.1.1   1.1   <  1.1a   1.1.a <  "
"1.1a   1     <  a   a     <  b   1     <  2   1.1-3 <  1.1-4   1.1-5 <  "
"1.1.6\n"
"\n"
"より正確に (包括的ではありませんが) 言うと、文字列はまずピリオドやハイフンで"
"区切られた、複数のサブユニットから構成されているものとして扱います。各サブユ"
"ニットには任意の桁数の数値や文字が含まれます。比較に際して、双方が数値であれ"
"ば数値としての比較が行なわれ、それ以外の場合は ASCII 順序で比較します。すべて"
"の比較が等しい結果だった場合は、サブユニット数が多いほうが大きいものとみなさ"
"れます。また、ハイフンよりもピリオドのほうが、より緊密に数値を区切っているも"
"のとして扱います。\n"
"\n"
"パッケージによっては異なるスタイルのバージョン番号体系、具体的には単なる小数"
"点でバージョンを表すものがあります。 Sort::Versions ではこの方式には限定的な"
"対応しかしていません: 両方のサブユニットを数値として比較する際、いずれか片方"
"のサブユニットが 0 で始まる場合、比較は小数点の後の数値として扱います。たとえ"
"ば下記のようになります:\n"
"\n"
"  0002  <  1   1.06  <  1.5\n"
"\n"
"これは常に動作するものではありません。なぜなら、実数スタイルのバージョン番号"
"は、常に 0 で始まるとは限らないためです。 Sort::Versions では、どちらのスタイ"
"ルを使用しているのかを指定する方法はありません。ただし、多くの場合において正"
"しく動作します。なお、バージョン番号を作成する際には、 1 つ以上のドットが含ま"
"れるスタイルを使用します。"

#. leap/perl-Specio/summary
msgid "Type constraints and coercions for Perl"
msgstr "Perl 向けの型の制約と強制のためのモジュール"

#. leap/perl-Specio/description
msgid ""
"The 'Specio' distribution provides classes for representing type constraints "
"and coercion, along with syntax sugar for declaring them.\n"
"\n"
"Note that this is not a proper type system for Perl. Nothing in this "
"distribution will magically make the Perl interpreter start checking a "
"value's type on assignment to a variable. In fact, there's no built-in way "
"to apply a type to a variable at all.\n"
"\n"
"Instead, you can explicitly check a value against a type, and optionally "
"coerce values to that type.\n"
"\n"
"My long-term goal is to replace Moose's built-in types and MooseX::Types "
"with this module."
msgstr ""
"'Specio' 配布物は、型の制約や強制を表現するためのクラスを提供し、それらを定義"
"する際の便利な文法拡張を提供します。\n"
"\n"
"ただし、このモジュールは Perl での正当な型システムではないことに注意してくだ"
"さい。この配布物内にあるコードは、いずれも Perl のインタプリタを拡張するもの"
"ではありませんし、変数に代入する際の型チェックを行なうものでもありません。事"
"実、内蔵されている方式ではそのようなことを行なう術がありません。\n"
"\n"
"その代わり、ここでは型に対する値を明示的にチェックしたり、必要であればそのよ"
"うな型に強制するような仕組みを提供します。\n"
"\n"
"長期的なゴールとしては、 Moose の内蔵型と MooseX::Types をこのモジュールで置"
"き換えることを目指しています。"

#. leap/perl-Specio-Library-Path-Tiny/summary
msgid "Path::Tiny types and coercions for Specio"
msgstr "Specio 向け Path::Tiny 型および強制"

#. leap/perl-Specio-Library-Path-Tiny/description
msgid ""
"This library provides a set of Path::Tiny types and coercions for Specio. "
"These types can be used with Moose, Moo, Params::ValidationCompiler, and "
"other modules."
msgstr ""
"このライブラリは Path::Tiny 型のセットや Specio に対する強制機能を提供するも"
"のです。これらの型は Moose, Moo, Params::ValidationCompiler などのモジュール"
"で使用されています。"

#. leap/perl-Spiffy/summary
msgid "Spiffy Perl Interface Framework For You"
msgstr "Spiffy Perl インターフェイスフレームワーク"

#. leap/perl-Spiffy/description
msgid ""
"\"Spiffy\" is a framework and methodology for doing object oriented (OO) "
"programming in Perl. Spiffy combines the best parts of Exporter.pm, base.pm, "
"mixin.pm and SUPER.pm into one magic foundation class. It attempts to fix "
"all the nits and warts of traditional Perl OO, in a clean, straightforward "
"and (perhaps someday) standard way.\n"
"\n"
"Spiffy borrows ideas from other OO languages like Python, Ruby, Java and "
"Perl 6. It also adds a few tricks of its own.\n"
"\n"
"If you take a look on CPAN, there are a ton of OO related modules. When "
"starting a new project, you need to pick the set of modules that makes most "
"sense, and then you need to use those modules in each of your classes. "
"Spiffy, on the other hand, has everything you'll probably need in one "
"module, and you only need to use it once in one of your classes. If you make "
"Spiffy.pm the base class of the basest class in your project, Spiffy will "
"automatically pass all of its magic to all of your subclasses. You may "
"eventually forget that you're even using it!\n"
"\n"
"The most striking difference between Spiffy and other Perl object oriented "
"base classes, is that it has the ability to export things. If you create a "
"subclass of Spiffy, all the things that Spiffy exports will automatically be "
"exported by your subclass, in addition to any more things that you want to "
"export. And if someone creates a subclass of your subclass, all of those "
"things will be exported automatically, and so on. Think of it as \"Inherited "
"Exportation\", and it uses the familiar Exporter.pm specification syntax.\n"
"\n"
"To use Spiffy or any subclass of Spiffy as a base class of your class, you "
"specify the '-base' argument to the 'use' command.\n"
"\n"
"    use MySpiffyBaseModule -base;\n"
"\n"
"You can also use the traditional 'use base 'MySpiffyBaseModule';' syntax and "
"everything will work exactly the same. The only caveat is that Spiffy.pm "
"must already be loaded. That's because Spiffy rewires base.pm on the fly to "
"do all the Spiffy magics.\n"
"\n"
"Spiffy has support for Ruby-like mixins with Perl6-like roles. Just like "
"'base' you can use either of the following invocations:\n"
"\n"
"    use mixin 'MySpiffyBaseModule';     use MySpiffyBaseModule -mixin;\n"
"\n"
"The second version will only work if the class being mixed in is a subclass "
"of Spiffy. The first version will work in all cases, as long as Spiffy has "
"already been loaded.\n"
"\n"
"To limit the methods that get mixed in, use roles. (Hint: they work just "
"like an Exporter list):\n"
"\n"
"    use MySpiffyBaseModule -mixin => qw(:basics x y !foo);\n"
"\n"
"In object oriented Perl almost every subroutine is a method. Each method "
"gets the object passed to it as its first argument. That means practically "
"every subroutine starts with the line:\n"
"\n"
"    my $self = shift;\n"
"\n"
"Spiffy provides a simple, optional filter mechanism to insert that line for "
"you, resulting in cleaner code. If you figure an average method has 10 lines "
"of code, that's 10% of your code! To turn this option on, you just use the "
"'- Base' option instead of the '-base' option, or add the '-selfless' "
"option. If source filtering makes you queazy, don't use the feature. I "
"personally find it addictive in my quest for writing squeaky clean, "
"maintainable code.\n"
"\n"
"A useful feature of Spiffy is that it exports two functions: 'field' and "
"'const' that can be used to declare the attributes of your class, and "
"automatically generate accessor methods for them. The only difference "
"between the two functions is that 'const' attributes can not be modified; "
"thus the accessor is much faster.\n"
"\n"
"One interesting aspect of OO programming is when a method calls the same "
"method from a parent class. This is generally known as calling a super "
"method. Perl's facility for doing this is butt ugly:\n"
"\n"
"    sub cleanup {         my $self = shift;         $self->scrub;         "
"$self->SUPER::cleanup(@_);     }\n"
"\n"
"Spiffy makes it, er, super easy to call super methods. You just use the "
"'super' function. You don't need to pass it any arguments because it "
"automatically passes them on for you. Here's the same function with Spiffy:\n"
"\n"
"    sub cleanup {         $self->scrub;         super;     }\n"
"\n"
"Spiffy has a special method for parsing arguments called 'parse_arguments', "
"that it also uses for parsing its own arguments. You declare which arguments "
"are boolean (singletons) and which ones are paired, with two special methods "
"called 'boolean_arguments' and 'paired_arguments'. Parse arguments pulls out "
"the booleans and pairs and returns them in an anonymous hash, followed by a "
"list of the unmatched arguments.\n"
"\n"
"Finally, Spiffy can export a few debugging functions 'WWW', 'XXX', 'YYY' and "
"'ZZZ'. Each of them produces a YAML dump of its arguments. WWW warns the "
"output, XXX dies with the output, YYY prints the output, and ZZZ confesses "
"the output. If YAML doesn't suit your needs, you can switch all the dumps to "
"Data::Dumper format with the '-dumper' option.\n"
"\n"
"That's Spiffy!"
msgstr ""
"\"Class::Spiffy\" は、 Perl でオブジェクト指向 (OO) のプログラミングを行なう"
"ためのフレームワークと方法です。 Class::Spiffy は Exporter.pm, base.pm, "
"mixin.pm, SUPER.pm の各部品を組み合わせて、 1 つの魔法のような基礎クラスとし"
"て組み立てています。既存の Perl オブジェクト指向に存在するバグの卵や不便なと"
"ころをきれいに直し、素直で (いつかは) 標準的な方法になるよう目指していま"
"す。\n"
"\n"
"Spiffy では Python や Ruby, Java, Perl 6 などのオブジェクト指向言語からのアイ"
"ディアを借りているほか、いくつかのトリックも追加しています。\n"
"\n"
"CPAN をご覧いただくと、多数の OO 関連のモジュールが存在しています。新しいプロ"
"ジェクトを始めるにあたっては、最も適切だと思われるモジュールを集め、それらの"
"モジュールを利用して独自のクラスを作成します。 Spiffy はこれらとは異なり、 1 "
"つのモジュールで必要なモジュールのほぼすべてをまかなう仕組みで、作成するクラ"
"スでもこれらのモジュールを利用すれば必要な作業ができるようになっています。プ"
"ロジェクト内のベースクラスで Spiffy.pm を基本クラスに設定すると、 Spiffy はサ"
"ブクラスに対しても必要な処理すべてを行なうようになっています。それはまるで、 "
"Spiffy を使っているのを忘れてしまうほどです。\n"
"\n"
"Spiffy と他の Perl オブジェクト指向のベースクラスとの違いで顕著なものとして"
"は、拡張性があげられます。 Spiffy のサブクラスを作成すると、ご自身で公開する"
"ように指定したものに加えて、 Spiffy が公開するすべてのものがサブクラスに対し"
"ても公開されるようになります。このサブクラスからさらなるサブクラスを作成した"
"場合にもこれは動作します。この考え方は \"エクスポートの継承\" と称していま"
"す。また、このモジュールでは Exporter.pm の仕様文法を使用しています。\n"
"\n"
"Spiffy や Spiffy のサブクラスをお使いのクラスのベースとしたい場合は、 'use' "
"コマンドで '-base' パラメータを指定します:\n"
"\n"
"    use MySpiffyBaseModule -base;\n"
"\n"
"なお、従来のバージョンにおける使用方法 'use base 'MySpiffyBaseModule';' にも"
"対応しています。これは上記とまったく同じ動作になりますが、唯一違いがあるとす"
"れば Spiffy.pm をあらかじめ読み込んでおかなければならない、という点です。これ"
"が Spiffy が base.pm をその場で再結線する魔法のような仕組みです。\n"
"\n"
"Spiffy には Perl6 のような役割機能のほか、 Ruby のような mixin 機能もありま"
"す。これは 'base' のように使用するものです:\n"
"\n"
"    use mixin 'MySpiffyBaseModule';     use MySpiffyBaseModule -mixin;\n"
"\n"
"後者の指定は Spiffy のサブクラス内でのみ利用できる仕組みです。前者の指定は、 "
"Spiffy が読み込まれている限り、すべての場合において動作します。\n"
"\n"
"mixin させるメソッドを限定したい場合は、役割を使用します (ヒント: Explorer リ"
"ストのように動作する仕組みです):\n"
"\n"
"    use MySpiffyBaseModule -mixin => qw(:basics x y !foo);\n"
"\n"
"オブジェクト指向の Perl では、ほぼすべてのサブルーチンはメソッドとなります。"
"各メソッドでは、最初のパラメータとしてオブジェクトを指定します。具体的には、"
"各サブルーチンが下記のような行で始まることと同じ意味になります:\n"
"\n"
"    my $self = shift;\n"
"\n"
"Spiffy ではシンプルな任意指定のフィルタ機構が用意され、必要に応じて行を挿入す"
"ることができるようになっています。これによってよりクリーンなコードを作成する"
"ことができます。たとえば 1 メソッド当たり平均で 10 行のコードがあるとすると、"
"おおよそ 10% 程度にもあります。このオプションを有効にするには、 '-base' オプ"
"ションの代わりに '- Base' オプションを指定するか、もしくは '-selfless' オプ"
"ションを追加します。ソースフィルタリングによって手間がかかってしまうような場"
"合は、この機能は使わないことをお勧めします。個人的には非常にクリーンでメンテ"
"ナンス性の高いコードを作成できるものと考えております。\n"
"\n"
"Spiffy の便利な機能には、ほかにも 'field' や 'const' の関数があります。これら"
"はクラスの属性を定義するための仕組みで、これらから自動的にアクセサを作成する"
"ことができます。 2 つの関数の違いはシンプルで、 'const' のほうが属性を変更で"
"きないものに対して使用するものです。\n"
"\n"
"OO プログラミングにおいて興味深い点の 1 つに、親クラスの同メソッドを呼び出す"
"ことのできる機能があります。これはスーパーメソッドとも呼ばれる仕組みで、 "
"Perl では下記のような非常に醜いコードになってしまいます:\n"
"\n"
"    sub cleanup {         my $self = shift;         $self->scrub;         "
"$self->SUPER::cleanup(@_);     }\n"
"\n"
"Spiffy では非常に簡単にスーパーメソッドを呼び出すことができるようになっていま"
"す。これは 'super' 関数と呼ばれるもので、パラメータは自動的に処理されるため、"
"パラメータを指定する必要もありません。下記は上記を Spiffy で書き換えた場合の"
"例です:\n"
"\n"
"    sub cleanup {         $self->scrub;         super;     }\n"
"\n"
"Spiffy には 'parse_arguments' と呼ばれるパラメータ処理用の特殊メソッドも用意"
"されています。これは自分自身のパラメータ処理にも使用されているもので、どのパ"
"ラメータが boolean (シングルトン) で、どれが対になっているものなのかを "
"'boolean_arguments', 'paired_arguments' という 2 つの特殊なメソッドで指定でき"
"るものです。パラメータを処理すると、匿名ハッシュとして boolean と対が返され、"
"そのあとにマッチしなかったパラメータのリストが続きます。\n"
"\n"
"最後に、 Spiffy では 'WWW', 'XXX', 'YYY', 'ZZZ' というデバッグ用の関数も用意"
"されています。それぞれはパラメータの YAML ダンプを生成するもので、 WWW では警"
"告、 XXX では die で終了、 'YYY' はメッセージだけを出力、 ZZZ は confess で出"
"力するようになっています。 YAML がお使いの環境に適合しない場合は、 '-dumper' "
"オプションを指定することで、すべてのダンプを Data::Dumper 形式にすることもで"
"きます。\n"
"\n"
"これが Spiffy です。"

#. leap/perl-Spooky-Patterns-XS/summary
#. leap/perl-Spooky-Patterns-XS/description
msgid "Spooky::Patterns::XS Perl module"
msgstr "Spooky::Patterns::XS Perl モジュール"

#. leap/perl-Spreadsheet-ParseExcel/summary
msgid "Read information from an Excel file."
msgstr "Excel ファイルからの情報の読み込み"

#. leap/perl-Spreadsheet-ParseExcel/description
msgid ""
"The Spreadsheet::ParseExcel module can be used to read information from "
"Excel 95-2003 binary files.\n"
"\n"
"The module cannot read files in the Excel 2007 Open XML XLSX format. See the "
"the Spreadsheet::XLSX manpage module instead."
msgstr ""
"Spreadsheet::ParseExcel モジュールは、 Excel 95-2003 のバイナリファイルから情"
"報を取得するために使用するモジュールです。\n"
"\n"
"このモジュールは Excel 2007 の Open XML XLSX 形式のファイルを読み込むことはで"
"きません。このようなファイルについては、 Spreadsheet::XLSX モジュールをお使い"
"ください。"

#. leap/perl-Spreadsheet-Read/summary
msgid "Read the data from a spreadsheet"
msgstr "表計算からのデータの読み込み"

#. leap/perl-Spreadsheet-Read/description
msgid ""
"Spreadsheet::Read tries to transparently read *any* spreadsheet and return "
"its content in a universal manner independent of the parsing module that "
"does the actual spreadsheet scanning.\n"
"\n"
"For OpenOffice this module uses Spreadsheet::ReadSXC\n"
"\n"
"For Microsoft Excel this module uses Spreadsheet::ParseExcel or Spreadsheet::"
"XLSX\n"
"\n"
"For CSV this module uses Text::CSV_XS (0.29 or up required, 0.73 or up "
"preferred) or Text::CSV_PP (1.05 or up required).\n"
"\n"
"For SquirrelCalc there is a very simplistic built-in parser"
msgstr ""
"Spreadsheet::Read は *任意の* 表計算データを透過的に読み込み、実際に処理した"
"表計算モジュールに関わらず普遍的な書式で値を返します。\n"
"\n"
"OpenOffice ファイルの場合、このモジュールは Spreadsheet::ReadSXC を使用しま"
"す。\n"
"\n"
"Microsoft Excel ファイルの場合、このモジュールは Spreadsheet::ParseExcel また"
"は Spreadsheet::XLSX を使用します。\n"
"\n"
"CSV ファイルの場合、このモジュールは Text::CSV_XS (0.29 もしくはそれ以降が必"
"要、 0.73 もしくはそれ以降を推奨) または Text::CSV_PP (1.05 もしくはそれ以降"
"が必要) を使用します。\n"
"\n"
"SquirrelCalc ファイルの場合、非常にシンプルな内蔵パーサを使用します。"

#. leap/perl-Spreadsheet-ReadSXC/summary
msgid "Extract OpenOffice 1.x spreadsheet data"
msgstr "OpenOffice 1.x の表計算データからの抽出"

#. leap/perl-Spreadsheet-ReadSXC/description
msgid ""
"Spreadsheet::ReadSXC extracts data from OpenOffice 1.x spreadsheet files (."
"sxc). It exports the function read_sxc() which takes a filename and an "
"optional reference to a hash of options as arguments and returns a reference "
"to a hash of references to two-dimensional arrays. The hash keys correspond "
"to the names of worksheets in the OpenOffice workbook. The two-dimensional "
"arrays correspond to rows and cells in the respective spreadsheets. If you "
"don't like this because the order of sheets is not preserved in a hash, read "
"on. The 'OrderBySheet' option provides an array of hashes instead.\n"
"\n"
"If you prefer to unpack the .sxc file yourself, you can use the function "
"read_xml_file() instead and pass the path to content.xml as an argument. Or "
"you can extract the XML string from content.xml and pass the string to the "
"function read_xml_string(). Both functions also take a reference to a hash "
"of options as an optional second argument."
msgstr ""
"Spreadsheet::ReadSXC は OpenOffice 1.x の表計算ファイル (.sxc) からデータを取"
"り出すことができるモジュールです。 read_sxc() という公開関数では、ファイル名"
"とオプションの指定をパラメータとして取り、 2 次元の配列に対する参照のハッシュ"
"参照を返します。ハッシュのキーは OpenOffice ワークブックにおけるワークシート"
"の名前になります。 2 次元の配列は各ワークシート内の行と列を表します。ワーク"
"シートの順序についてはハッシュ内で保持されません。この場合は 'OrderBySheet' "
"オプションを指定してください。\n"
"\n"
".sxc ファイルをご自身で展開したい場合は、 read_xml_file() 関数をお使いくださ"
"い。パラメータには content.xml のパスを指定します。 content.xml から XML の文"
"字列を抽出している場合は、 read_xml_string() に対して渡すことで処理することも"
"できます。いずれの関数も、 2 つめにはオプションを指定するためのハッシュ参照を"
"指定することができます。"

#. leap/perl-Spreadsheet-XLSX/summary
msgid "Perl extension for reading MS Excel 2007 files;"
msgstr "MS Excel 2007 ファイルを読み込むための Perl 拡張"

#. leap/perl-Spreadsheet-XLSX/description
msgid ""
"This module is a (quick and dirty) emulation of Spreadsheet::ParseExcel for "
"Excel 2007 (.xlsx) file format. It supports styles and many of Excel's "
"quirks, but not all. It populates the classes from Spreadsheet::ParseExcel "
"for interoperability; including Workbook, Worksheet, and Cell."
msgstr ""
"このモジュールは Excel 2007 (.xlsx) ファイル形式に対応した (素早くて汚い) "
"Spreadsheet::ParseExcel の擬似版です。 Excel が持つ様々なスタイルなどの機能に"
"対応していますが、すべての機能に対応しているというわけではありません。また、 "
"Spreadsheet::ParseExcel からクラスを生成しているため、ワークブックやワーク"
"シート、セルなどの構造は Spreadsheet::ParseExcel と同じです。"

#. leap/perl-Starman/summary
msgid "High-performance preforking PSGI/Plack web server"
msgstr "高性能な prefork 型 PSGI/Plack Web サーバ"

#. leap/perl-Starman/description
msgid ""
"Starman is a PSGI perl web server that has unique features such as: \n"
"* High Performance\n"
"\n"
"  Uses the fast XS/C HTTP header parser \n"
"* Preforking\n"
"\n"
"  Spawns workers preforked like most high performance UNIX servers do.   "
"Starman also reaps dead children and automatically restarts the worker   "
"pool. \n"
"* Signals\n"
"\n"
"  Supports 'HUP' for graceful worker restarts, and 'TTIN'/'TTOU' to   "
"dynamically increase or decrease the number of worker processes, as well   "
"as 'QUIT' to gracefully shutdown the worker processes. \n"
"* Superdaemon aware\n"
"\n"
"  Supports the Server::Starter manpage for hot deploy and graceful   "
"restarts. \n"
"* Multiple interfaces and UNIX Domain Socket support\n"
"\n"
"  Able to listen on multiple interfaces including UNIX sockets. \n"
"* Small memory footprint\n"
"\n"
"  Preloading the applications with '--preload-app' command line option   "
"enables copy-on-write friendly memory management. Also, the minimum   memory "
"usage Starman requires for the master process is 7MB and children   "
"(workers) is less than 3.0MB. \n"
"* PSGI compatible\n"
"\n"
"  Can run any PSGI applications and frameworks \n"
"* HTTP/1.1 support\n"
"\n"
"  Supports chunked requests and responses, keep-alive and pipeline   "
"requests. \n"
"* UNIX only\n"
"\n"
"  This server does not support Win32."
msgstr ""
"Starman は PSGI perl web サーバで、下記のようなユニークな機能が提供されていま"
"す:\n"
"* 高性能\n"
"\n"
"  高速な XS/C HTTP ヘッダパーサを使用しています\n"
"* prefork 型\n"
"\n"
"  高性能な UNIX サーバが行なっているのと同じ、ワーカスレッドを事前に fork す"
"る仕組みを備えています。 Starman では子プロセスが死んでしまった場合、それらの"
"プロセスを自動的に終了させて再起動し、自動的にワーカプールに再投入する機能も"
"備えています。\n"
"* シグナル対応\n"
"\n"
"  'HUP' ではワーカに影響を与えずに再起動することができるほか、 'TTIN'/'TTOU' "
"ではワーカプロセスの拡大と縮小、 'QUIT' ではワーカプロセスの処理終了を待って"
"終了することができます。\n"
"* スーパーデーモン対応\n"
"\n"
"  Server::Starter に対応し、ホットデプロイや再起動などを行なうことができま"
"す。\n"
"* 複数インスタンスおよび UNIX ドメインソケット対応\n"
"\n"
"  UNIX ソケットを含む複数のインターフェイスに対してサービスを提供することがで"
"きます。\n"
"* 小さなメモリフットプリント\n"
"\n"
"  '--preload-app' コマンドラインオプションを指定してアプリケーションを事前読"
"み込みさせると、コピーオンライト型に適したメモリ管理を行なうようになります。"
"また、 Starman が必要とする最小メモリは 7MB で、子プロセス (ワーカ) は 3.0MB "
"未満で動作します。\n"
"* PSGI 互換\n"
"\n"
"  任意の PSGI アプリケーションおよびフレームワークを動作させることができま"
"す。\n"
"* HTTP/1.1 対応\n"
"\n"
"  チャンクリクエストおよびチャンクレスポンスに対応しているほか、キープアライ"
"ブやパイプライン要求にも対応しています。\n"
"* UNIX のみ対応\n"
"\n"
"  Win32 には対応していません。"

#. leap/perl-Statistics-CaseResampling/summary
msgid ""
"Efficient resampling and calculation of medians with confidence intervals"
msgstr "信頼区間のある中央値の効果的な再サンプリングと計算"

#. leap/perl-Statistics-CaseResampling/description
msgid ""
"The purpose of this (XS) module is to calculate the median (or in principle "
"also other statistics) with confidence intervals on a sample. To do that, it "
"uses a technique called bootstrapping. In a nutshell, it resamples the "
"sample a lot of times and for each resample, it calculates the median. From "
"the distribution of medians, it then calculates the confidence limits.\n"
"\n"
"In order to implement the confidence limit calculation, various other "
"functions had to be implemented efficiently (both algorithmically efficient "
"and done in C). These functions may be useful in their own right and are "
"thus exposed to Perl. Most notably, this exposes a median (and general "
"selection) algorithm that works in linear time as opposed to the trivial "
"implementation that requires 'O(n*log(n))'."
msgstr ""
"この (XS) モジュールの目的は、中央値 (もしくは他の統計情報) を計算し、サンプ"
"ル内での信頼区間を出力することにあります。これを行なうために、ブートストラッ"
"ピングと呼ばれる技術を使用しています。これは簡単に言うと、サンプルを何度も再"
"サンプリングし、それぞれの結果に対して中央値を計算します。中央値の分散から信"
"頼区間を計算します。\n"
"\n"
"信頼区間の計算を実装するため、様々な他の関数を効率的に実装しなければなりませ"
"んでした (アルゴリズム面だけでなく、 C 言語での実装も必要でした) 。これらの関"
"数はそれ単体でも有用な仕組みであるため、 Perl 側にも公開しています。最も顕著"
"なところでは中央値アルゴリズムで、  'O(n*log(n))' の時間が必要な一般的な実装"
"を、線形時間で対応できるようになっています。"

#. leap/perl-Statistics-Descriptive/summary
msgid "Module of basic descriptive statistical functions"
msgstr "基本的な記述統計関数のモジュール"

#. leap/perl-Statistics-Descriptive/description
msgid ""
"This module provides basic functions used in descriptive statistics. It has "
"an object oriented design and supports two different types of data storage "
"and calculation objects: sparse and full. With the sparse method, none of "
"the data is stored and only a few statistical measures are available. Using "
"the full method, the entire data set is retained and additional functions "
"are available.\n"
"\n"
"Whenever a division by zero may occur, the denominator is checked to be "
"greater than the value '$Statistics::Descriptive::Tolerance', which defaults "
"to 0.0. You may want to change this value to some small positive value such "
"as 1e-24 in order to obtain error messages in case of very small "
"denominators.\n"
"\n"
"Many of the methods (both Sparse and Full) cache values so that subsequent "
"calls with the same arguments are faster."
msgstr ""
"このモジュールは記述統計で使用される基本的な関数を提供するものです。このモ"
"ジュールはオブジェクト指向の設計になっていて、 2 種類のデータストレージと計算"
"オブジェクト (sparse, full) に対応しています。 sparse のメソッドでは、データ"
"は全く保存されず、いくつかの統計値のみが利用できます。 full のメソッドでは、"
"データセット全体を保持することができるほか、追加の関数も提供されます。\n"
"\n"
"ゼロ除算エラーが発生するたびに、分母が '$Statistics::Descriptive::Tolerance' "
"の値 (デフォルト: 0.0) より大きいかどうかをチェックします。この値を 1e-24 の"
"ように小さな正の値にすることで、非常に小さな分母の場合にエラーメッセージを表"
"示させることもできます。\n"
"\n"
"多くのメソッド (sparse, full の両方) において、値はキャッシュされる仕組みに"
"なっています。そのため、同じパラメータを利用して呼び出しても、高速に動作しま"
"す。"

#. leap/perl-Stream-Buffered/summary
msgid "temporary buffer to save bytes"
msgstr "バイト列を保存するための一時バッファ"

#. leap/perl-Stream-Buffered/description
msgid ""
"Stream::Buffered is a buffer class to store arbitrary length of byte strings "
"and then get a seekable filehandle once everything is buffered. It uses "
"PerlIO and/or temporary file to save the buffer depending on the length of "
"the size."
msgstr ""
"Stream::Buffered は任意の長さのバイト列を保存するためのバッファクラスで、その"
"後シーク可能なファイルハンドルとしてバッファされた内容を読み込むことができま"
"す。 PerlIO と一時ファイルの一方または両方を利用してバッファを保存していま"
"す。どちらを利用するのかについては、バッファのサイズに依存して決まります。"

#. leap/perl-String-Approx/summary
msgid "Perl extension for approximate matching (fuzzy matching)"
msgstr "近似 (曖昧) マッチング向け Perl 拡張"

#. leap/perl-String-Approx/description
msgid ""
"String::Approx lets you match and substitute strings approximately. With "
"this you can emulate errors: typing errorrs, speling errors, closely related "
"vocabularies (colour color), genetic mutations (GAG ACT), abbreviations "
"(McScot, MacScot).\n"
"\n"
"NOTE: String::Approx suits the task of *string matching*, not *string "
"comparison*, and it works for *strings*, not for *text*.\n"
"\n"
"If you want to compare strings for similarity, you probably just want the "
"Levenshtein edit distance (explained below), the Text::Levenshtein and Text::"
"LevenshteinXS modules in CPAN. See also Text::WagnerFischer and Text::"
"PhraseDistance. (There are functions for this in String::Approx, e.g. "
"adist(), but their results sometimes differ from the bare Levenshtein et "
"al.)\n"
"\n"
"If you want to compare things like text or source code, consisting of\n"
"*words* or *tokens* and *phrases* and *sentences*, or *expressions* and\n"
"*statements*, you should probably use some other tool than String::Approx, "
"like for example the standard UNIX diff(1) tool, or the Algorithm::Diff "
"module from CPAN.\n"
"\n"
"The measure of *approximateness* is the _Levenshtein edit distance_. It is "
"the total number of \"edits\": insertions,\n"
"\n"
"\tword world\n"
"\n"
"deletions,\n"
"\n"
"\tmonkey money\n"
"\n"
"and substitutions\n"
"\n"
"\tsun fun\n"
"\n"
"required to transform a string to another string. For example, to transform _"
"\"lead\"_ into _\"gold\"_, you need three edits:\n"
"\n"
"\tlead gead goad gold\n"
"\n"
"The edit distance of \"lead\" and \"gold\" is therefore three, or 75%. \n"
"*String::Approx* uses the Levenshtein edit distance as its measure, but "
"String::Approx is not well-suited for comparing strings of different length, "
"in other words, if you want a \"fuzzy eq\", see above. String::Approx is "
"more like regular expressions or index(), it finds substrings that are close "
"matches.>"
msgstr ""
"String::Approx は文字列の合致判断と置換を曖昧に行なうことができます。このモ"
"ジュールを利用することで、入力ミス (errorrs) やスペルミス (speling) 、密接に"
"関連する語彙 (colour/color) や遺伝的な差異 (GAG/ACT) 、略称表記 (McScot/"
"MacScot) などを疑似することができます。\n"
"\n"
"注意: String::Approx は *文字列マッチング* の分野にのみ適切な仕組みであり、 *"
"文字列比較* には適切ではないことに注意してください。また、 *文章* ではなく *"
"文字列* に対してのみ動作します。\n"
"\n"
"文字列の類似性を比較したい場合は、レーベンシュタイン距離 (下記でも説明してい"
"ます) のモジュールをお使いください。 CPAN では Text::Levenshtein および "
"Text::LevenshteinXS というモジュールがあります。このほか、  Text::"
"WagnerFischer や Text::PhraseDistance というモジュールもあります (adist() な"
"ど、 String::Approx 内にはこの分野向けの機能も用意されていますが、純粋なレー"
"ベンシュタイン系モジュールなどとは結果が異なる場合がありますのでご注意くださ"
"い) 。\n"
"\n"
"*単語* や *トークン* 、 *語句* や *文章* 、 *表現* や *陳述* からなるテキスト"
"や、ソースコードなどの比較を行ないたい場合は、 String::Approx ではなく、 "
"UNIX の diff(1) ツールや CPAN 提供の Algorithm::Diff モジュールなど、より適切"
"な仕組みが存在することにも留意してください。\n"
"\n"
"*曖昧* の判断は、 _レーベンシュタイン編集距離_ の仕組みが基本になっています。"
"これは \"編集\" の合計回数を数えるもので、挿入:\n"
"\n"
"\tword -> world\n"
"\n"
"削除:\n"
"\n"
"\tmonkey -> money\n"
"\n"
"置換:\n"
"\n"
"\tsun -> fun\n"
"\n"
"をそれぞれ行なって、目的の文字列になるまでの回数を数えます。たとえば _\"lead_"
"\" という単語を _\"gold\"_ に変換するには、下記の通り 3 回の編集が必要になり"
"ます:\n"
"\n"
"\tlead gead goad gold\n"
"\n"
"このことから、 \"lead\" と \"gold\" の編集距離は 3 、もしくは 75% であると言"
"えます。\n"
"*String::Approx* ではレーベンシュタイン編集距離を基準にしていますが、 このモ"
"ジュールは異なる長さの文字列を比較するには不適切な仕組みであることに注意して"
"ください。 \"fuzzy eq\" の機能をご要望の場合は、上述のモジュールをお使いくだ"
"さい。 String::Approx は正規表現や index() に似た仕組みで、曖昧な判断を行ない"
"ます。>"

#. leap/perl-String-CRC32/summary
msgid "Perl interface for cyclic redundancy check generation"
msgstr ""
"巡回冗長検査 (cyclic redundancy check) データ生成用 Perl インターフェイス"

#. leap/perl-String-CRC32/description
msgid ""
"The *CRC32* module calculates CRC sums of 32 bit lengths. It generates the "
"same CRC values as ZMODEM, PKZIP, PICCHECK and many others.\n"
"\n"
"Despite its name, this module is able to compute the checksum of files as "
"well as strings."
msgstr ""
"*CRC32* モジュールは、 32 ビットの長さを持つ CRC チェックサムを生成します。 "
"CRC の仕組みは、 ZMODEM, PKZIP, PICCHECK など、数多くのモジュールで採用されて"
"います。\n"
"\n"
"なお、この名前とは裏腹に、文字列だけでなくファイルのチェックサムも計算するこ"
"とができます。"

#. leap/perl-String-CamelCase/summary
msgid "Camelcase, de-Camelcase"
msgstr "キャメルケース化とその解除"

#. leap/perl-String-CamelCase/description
msgid "camelcase, de-camelcase"
msgstr "キャメルケース化とその解除"

#. leap/perl-String-Errf/summary
msgid "Simple Sprintf-Like Dialect"
msgstr "sprintf のような書式整形"

#. leap/perl-String-Errf/description
msgid ""
"String::Errf provides 'errf', a simple string formatter that works something "
"like 'sprintf'. It is implemented using String::Formatter and Sub::Exporter. "
"Their documentation may be useful in understanding or extending String::"
"Errf. The 'errf' subroutine is only available when imported. Calling String::"
"Errf::errf will not do what you want."
msgstr ""
"String::Errf は 'errf' と呼ばれるシンプルな文字列整形関数を提供します。これ"
"は 'sprintf' に似た仕組みで、 String::Formatter および Sub::Exporter を利用し"
"て実装されています。これらのドキュメンテーションを利用することで、 String::"
"Errf を理解したり拡張したりすることができるようになります。 'errf' サブルーチ"
"ンはインポートしたときにのみ利用できます。 String::Errf::errf を呼び出しても"
"期待通りの動作にはなりません。"

#. leap/perl-String-Escape/summary
msgid "Backslash escapes, quoted phrase, word elision, etc."
msgstr "バックスラッシュのエスケープ／節のクォート／単語の削除など"

#. leap/perl-String-Escape/description
msgid "sorry, no description found"
msgstr "(説明なし)"

#. leap/perl-String-Flogger/summary
#. leap/perl-String-Flogger/description
msgid "string munging for loggers"
msgstr "ロガー向け文字列整形"

#. leap/perl-String-Format/summary
msgid "Sprintf-Like String Formatting Capabilities With"
msgstr "sprintf のような文字列整形機能"

#. leap/perl-String-Format/description
msgid ""
"String::Format lets you define arbitrary printf-like format sequences to be "
"expanded. This module would be most useful in configuration files and "
"reporting tools, where the results of a query need to be formatted in a "
"particular way. It was inspired by mutt's index_format and related "
"directives (see <URL:http://www.mutt.org/doc/manual/manual-6."
"html#index_format>)."
msgstr ""
"String::Format は printf のような任意のフォーマットシーケンスを作成することが"
"できる仕組みです。このモジュールは、問い合わせの結果などを特定の方式で書式化"
"する必要があるもの、例えば設定ファイルやレポートツールなどで最も便利な仕組み"
"です。 mutt の index_format と関連するディレクティブにヒントを得て作られたも"
"のです (詳しくは <URL:http://www.mutt.org/doc/manual/manual-6."
"html#index_format> をお読みください) 。"

#. leap/perl-String-Formatter/summary
msgid "Build sprintf-like functions of your own"
msgstr "sprintfのような関数を独自に作成"

#. leap/perl-String-Formatter/description
msgid ""
"String::Formatter is a tool for building sprintf-like formatting routines. "
"It supports named or positional formatting, custom conversions, fixed string "
"interpolation, and simple width-matching out of the box. It is easy to alter "
"its behavior to write new kinds of format string expanders. For most cases, "
"it should be easy to build all sorts of formatters out of the options built "
"into String::Formatter.\n"
"\n"
"Normally, String::Formatter will be used to import a sprintf-like routine "
"referred to as \"'stringf'\", but which can be given any name you like. This "
"routine acts like sprintf in that it takes a string and some inputs and "
"returns a new string:\n"
"\n"
"  my $output = stringf \"Some %a format %s for you to %u.\\n\", { ... };\n"
"\n"
"This routine is actually a wrapper around a String::Formatter object created "
"by importing stringf. In the following code, the entire hashref after "
"\"stringf\" is passed to String::Formatter's constructor (the 'new' method), "
"save for the '-as' key and any other keys that start with a dash.\n"
"\n"
"  use String::Formatter     stringf => {       -as => 'fmt_time',       "
"codes           => { ... },       format_hunker   => ...,       "
"input_processor => ...,     },     stringf => {       -as => "
"'fmt_date',       codes           => { ... },       string_replacer "
"=> ...,       hunk_formatter  => ...,     },   ;\n"
"\n"
"As you can see, this will generate two stringf routines, with different "
"behaviors, which are installed with different names. Since the behavior of "
"these routines is based on the 'format' method of a String::Formatter "
"object, the rest of the documentation will describe the way the object "
"behaves.\n"
"\n"
"There's also a 'named_stringf' export, which behaves just like the 'stringf' "
"export, but defaults to the 'named_replace' and 'require_named_input' "
"arguments. There's a 'method_stringf' export, which defaults "
"'method_replace' and 'require_single_input'. Finally, a 'indexed_stringf', "
"which defaults to 'indexed_replaced' and 'require_arrayref_input'. For more "
"on these, keep reading, and check out the cookbook.\n"
"\n"
"String::Formatter::Cookbook provides a number of recipes for ways to put "
"String::Formatter to use."
msgstr ""
"String::Formatterはsprintfのようなフォーマット・ルーチンを作成するためのツールです。名前付きフォーマットまたは位置フォーマット、カ"
"スタム変換、固定文字列補間、単純な幅のマッチングなどをサポートしています。新しい種類のフォーマット文字列エクスパンダを作成するために、その動作を変更するの"
"は簡単です。ほとんどの場合、String::Formatterに組み込まれたオプションから、あらゆる種類のフォーマッタを簡単に構築できるはずです。\n"
"\n"
"通常、String::Formatterは\"'stringf'\"と呼ばれるsprintfに似たルーチンをインポートするために使用されますが"
"、任意の名前を付けることができます。このルーチンはsprintfと同じように、文字列といくつかの入力を受け取り、新しい文字列を返します。\n"
"\n"
"  my$output=stringf\" 一部の%aフォーマット%s を %uに変換します。\\n"
"\",{.};\n"
"\n"
"このルーチンは、実際にはstringfをインポートして作成されたString::Formatterオブジェクトのラッパーです。次のコードでは、「strin"
"gf」の後のhashref全体がString::Formatterのコンストラクタ('new'メソッド)に渡されます。ただし、「-as」キーとダッシュで始"
"まるその他のキーは除きます。\n"
"\n"
"  use String::Formatter stringf=>{-as=>'fmt_time',codes=>{.},format_hunker=>."
",input_processor=>.,},stringf=>{-as=>'fmt_date',codes=>{.},string_replacer=>."
",hunk_formatter=>.,},,;\n"
"ご覧のように、これにより、動作が異なる2つのstringfルーチンが生成され、それぞれ異なる名前でインストールされます。\n"
"use String::Formatter stringf=>{-as=>'fmt_time',codes=>{.},format_hunker=>.,i"
"nput_processor=>.,},stringf=>{-as=>'fmt_date',codes=>{.},string_replacer=>.,h"
"unk_formatter=>.,},,;これらのルーチンの動作は、String::Formatterオブジェクトの「format」メソッドに基づいている"
"ため、以降のドキュメントでは、オブジェクトの動作について説明します。\n"
"\n"
"'named_stringf'エクスポートもあります。これは'stringf'エクスポートと同じように動作しますが、デフォルトでは'named_repla"
"ce'と'require_named_input'引数が使用されます。'method_stringf'エクスポートがあり、デフォルトは'method_re"
"place'と'require_single_input'です。最後に、「indexed_stringf」(デフォルトは「indexed_replaced"
"」と「require_arrayref_input」)。さらに詳しくは、このクックブックを参照してください。\n"
"\n"
"String::Formatter::Cookbookには、String::Formatterを使うためのレシピが多数用意されています。"

#. leap/perl-String-RewritePrefix/summary
msgid "Rewrite strings based on a set of known prefixes"
msgstr "既知の接頭辞群をベースにした文字列の書き換え"

#. leap/perl-String-RewritePrefix/description
msgid "rewrite strings based on a set of known prefixes"
msgstr "既知の接頭辞群をベースにした文字列の書き換え"

#. leap/perl-String-ShellQuote/summary
msgid "Quote strings for passing through the shell"
msgstr "シェルを通して渡すための文字列変換"

#. leap/perl-String-ShellQuote/description
msgid ""
"This module contains some functions which are useful for quoting strings "
"which are going to pass through the shell or a shell-like object."
msgstr ""
"このモジュールには、シェルやシェル系のオブジェクトを通して文字列を渡すにあた"
"り、文字列をクォートするのに便利な関数を提供しています。"

#. leap/perl-String-ToIdentifier-EN/summary
msgid "Convert Strings to English Program Identifiers"
msgstr "文字列を英語のプログラム識別子に変換するモジュール"

#. leap/perl-String-ToIdentifier-EN/description
msgid ""
"This module provides a utility method, to_identifier for converting an "
"arbitrary string into a readable representation using the ASCII subset of "
"'\\w' for use as an identifier in a computer program. The intent is to make "
"unique identifier names from which the content of the original string can be "
"easily inferred by a human just by reading the identifier.\n"
"\n"
"If you need the full set of '\\w' including Unicode, see the subclass "
"String::ToIdentifier::EN::Unicode.\n"
"\n"
"Currently, this process is one way only, and will likely remain this way.\n"
"\n"
"The default is to create camelCase identifiers, or you may pass in a "
"separator char of your choice such as '_'.\n"
"\n"
"Binary char groups will be separated by '_' even in camelCase identifiers to "
"make them easier to read, e.g.: 'foo_2_0xFF_Bar'."
msgstr ""
"このモジュールは、任意の文字列を '\\w' の ASCII サブセットを利用して読み取り"
"可能な表記に変換し、コンピュータプログラム内で識別子として利用できるようにす"
"るためのユーティリティメソッド /to_identifier を提供しています。このモジュー"
"ルは、元の文字列の内容からユニークな識別子を作成し、名前を読むだけで内容がす"
"ぐに分かるような仕組みを作成しようとしたものです。\n"
"\n"
"Unicode を含む '\\w' のフルセットをお使いになりたい場合は、 String::"
"ToIdentifier::EN::Unicode のサブクラスをご覧ください。\n"
"\n"
"現時点では処理は一方向のみに実施可能で、今後も逆方向の機能の提供は予定されて"
"いません。\n"
"\n"
"また、既定ではキャメルケースで識別子を作成しますが、 '_' のような区切り文字を"
"指定することもできます。\n"
"\n"
"なお、キャメルケースを利用していても、バイナリ文字グループは '_' で区切られ、"
"読みやすくなるようになっています\n"
" (例: 'foo_2_0xFF_Bar') 。"

#. leap/perl-String-Truncate/summary
#. leap/perl-String-Truncate/description
msgid "a module for when strings are too long to be displayed in..."
msgstr "文字列が長すぎた場合に短く切って表示するモジュール"

#. leap/perl-Struct-Dumb/summary
msgid "Make simple lightweight record-like structures"
msgstr "シンプルな軽量型レコード構造を作成するモジュール"

#. leap/perl-Struct-Dumb/description
msgid ""
"'Struct::Dumb' creates record-like structure types, similar to the 'struct' "
"keyword in C, C++ or C#, or 'Record' in Pascal. An invocation of this module "
"will create a construction function which returns new object references with "
"the given field values. These references all respond to lvalue methods that "
"access or modify the values stored.\n"
"\n"
"It's specifically and intentionally not meant to be an object class. You "
"cannot subclass it. You cannot provide additional methods. You cannot apply "
"roles or mixins or metaclasses or traits or antlers or whatever else is in "
"fashion this week.\n"
"\n"
"On the other hand, it is tiny, creates cheap lightweight array-backed "
"structures, uses nothing outside of core. It's intended simply to be a "
"slightly nicer way to store data structures, where otherwise you might be "
"tempted to abuse a hash, complete with the risk of typoing key names. The "
"constructor will 'croak' if passed the wrong number of arguments, as will "
"attempts to refer to fields that don't exist. Accessor-mutators will 'croak' "
"if invoked with arguments. (This helps detect likely bugs such as "
"accidentally passing in the new value as an argument, or attempting to "
"invoke a stored 'CODE' reference by passing argument values directly to the "
"accessor.)\n"
"\n"
" $ perl -E 'use Struct::Dumb; struct Point => [qw( x y )]; Point(30)'  "
"usage: main::Point($x, $y) at -e line 1\n"
"\n"
" $ perl -E 'use Struct::Dumb; struct Point => [qw( x y )]; Point(10,20)->z'  "
"main::Point does not have a 'z' field at -e line 1\n"
"\n"
" $ perl -E 'use Struct::Dumb; struct Point => [qw( x y )]; Point(1,2)-"
">x(3)'  main::Point->x invoked with arguments at -e line 1.\n"
"\n"
"Objects in this class are (currently) backed by an ARRAY reference store, "
"though this is an internal implementation detail and should not be relied on "
"by using code. Attempting to dereference the object as an ARRAY will throw "
"an exception."
msgstr ""
"'Struct::Dumb' はレコードのような構造体を作成するモジュールで、 C/C++/C# 言語"
"における 'struct' キーワードや、 Pascal 言語における 'Record' に似た仕組みで"
"す。このモジュールを実行すると、指定したフィールド値で新しいオブジェクトの参"
"照を返す構築関数を作成します。これらの参照は lvalue メソッドに応答する仕組み"
"で、保存された値にアクセスしたり、修正したりすることができます。\n"
"\n"
"このモジュールは特にオブジェクトクラスとして使用されることを目指しているもの"
"ではありません。ここからサブクラスを作成することはできませんし、追加のメソッ"
"ドも提供できません。役割や mixin 、メタクラスや trait 、アントラなど、今日よ"
"く使われる仕組みにも対応していません。\n"
"\n"
"一方でこのモジュールは非常に簡易なつくりです。簡易で軽量な配列ベースの構造を"
"持ち、 Perl の中枢以外には依存関係を持ちません。また、データ構造を保存するの"
"に比較的わかりやすいシンプルな方法を利用しているため、ハッシュを乱用するよう"
"に惑わされることもありませんし、キーの名前を間違えるようなリスクも負うことが"
"ありません。また。コンストラクタは誤った数のパラメータを指定すると 'croak' す"
"るほか、存在しないフィールドを参照した場合も同様です。また、アクセサ-ミュー"
"テータにパラメータを指定しても 'croak' します (これにより、新しい値をパラメー"
"タとして指定してしまったような場合や、アクセサに直接パラメータを渡して保存さ"
"れた 'CODE' 参照を実行しようとしたときなどのバグを検出することができま"
"す) 。\n"
"\n"
" $ perl -E 'use Struct::Dumb; struct Point => [qw( x y )]; Point(30)'  "
"usage: main::Point($x, $y) at -e line 1\n"
"\n"
" $ perl -E 'use Struct::Dumb; struct Point => [qw( x y )]; Point(10,20)->z'  "
"main::Point does not have a 'z' field at -e line 1\n"
"\n"
" $ perl -E 'use Struct::Dumb; struct Point => [qw( x y )]; Point(1,2)-"
">x(3)'  main::Point->x invoked with arguments at -e line 1.\n"
"\n"
"クラス内のオブジェクトは (現時点では) ARRAY 参照で保存されていますが、これは"
"内部仕様であって、コードを使用するにあたってこれに依存したつくりであるべきで"
"はありません。また、オブジェクトを ARRAY として参照を外そうとすると、例外をス"
"ローします。"

#. leap/perl-Sub-Delete/summary
msgid "Perl module enabling one to delete subroutines"
msgstr "サブルーチンの削除機能を追加する Perl 拡張"

#. leap/perl-Sub-Delete/description
msgid ""
"This module provides one function, 'delete_sub', that deletes the subroutine "
"whose name is passed to it. (To load the module without importing the "
"function, write 'use Sub::Delete();'.)\n"
"\n"
"This does more than simply undefine the subroutine in the manner of 'undef "
"&foo', which leaves a stub that can trigger AUTOLOAD (and, consequently, "
"won't work for deleting methods). The subroutine is completely obliterated "
"from the symbol table (though there may be references to it elsewhere, "
"including in compiled code)."
msgstr ""
"このモジュールは 'delete_sub' とい う 1 つの関数を提供します。これは指定した"
"名前のサブルーチンを削除するためのものです (関数を取り込まずにモジュールを読"
"み込みたい場合は、 'use Sub::Delete();' のように記述してください)  。\n"
"\n"
"このモジュールは 'undef &foo' のように単純にサブルーチンを未定義の状態に戻す"
"だけでなく、自動読み込みをもたらすスタブをも削除するようになっています (そし"
"てそれゆえにメソッドの削除としては動作しません) 。サブルーチンはシンボルテー"
"ブルから完全に削除されます (コンパイル済みのコードなど、どこかの箇所で参照を"
"持っている場合であっても削除されます) 。"

#. leap/perl-Sub-Exporter/summary
msgid "a sophisticated exporter for custom-built routines"
msgstr "独自に構築したルーチン向けに洗練されたエクスポータ"

#. leap/perl-Sub-Exporter/description
msgid ""
"*ACHTUNG!* If you're not familiar with Exporter or exporting, read the Sub::"
"Exporter::Tutorial manpage first!"
msgstr ""
"*注意!* Exporter や関数のエクスポートについて詳しくない場合は、まずSub::"
"Exporter::Tutorial のマニュアルページをお読みください。"

#. leap/perl-Sub-Exporter-ForMethods/summary
msgid "Helper routines for using Sub::Exporter to build methods"
msgstr "メソッドを構築するために Sub::Exporter を利用するためのヘルパルーチン"

#. leap/perl-Sub-Exporter-ForMethods/description
msgid ""
"The synopsis section, above, looks almost indistinguishable from any other "
"use of Sub::Exporter, apart from the use of 'method_installer'. It is nearly "
"indistinguishable in behavior, too. The only change is that subroutines "
"exported from Method::Builder into named slots in Vehicle::Autobot will be "
"wrapped in a subroutine called 'Vehicle::Autobot::transform'. This will "
"insert a named frame into stack traces to aid in debugging.\n"
"\n"
"More importantly (for the author, anyway), they will not be removed by "
"namespace::autoclean. This makes the following code work:\n"
"\n"
"  package MyLibrary;\n"
"\n"
"  use Math::Trig qw(tan);         # uses Exporter.pm   use String::Truncate "
"qw(trunc); # uses Sub::Exporter's defaults\n"
"\n"
"  use Sub::Exporter::ForMethods qw(method_installer);   use Mixin::Linewise "
"{ installer => method_installer }, qw(read_file);\n"
"\n"
"  use namespace::autoclean;\n"
"\n"
"  ...\n"
"\n"
"  1;\n"
"\n"
"After MyLibrary is compiled, 'namespace::autoclean' will remove 'tan' and "
"'trunc' as foreign contaminants, but will leave 'read_file' in place. It "
"will also remove 'method_installer', an added win."
msgstr ""
"'method_installer' を使用することを別にすると、上記の synopsis セクションで"
"は Sub::Exporter を使用する場合との違いを実感できません。動作に対しても違いは"
"実感できません。唯一の違いは、サブルーチンが Method::Builder から Vehicle::"
"Autobot 内の名前付きのスロットに 公開され、 'Vehicle::Autobot::transform' と"
"いう名前のサブルーチンにラッピングされるという点です。これによりスタックト"
"レース内に名前付きのフレームを挿入することになり、デバッグがよりやりやすくな"
"ります。\n"
"\n"
"また、より重要な点 (作者によって、ですが) としては、これらは namespace::"
"autoclean で削除されないという点があります。これにより、下記のようなコードが"
"動作することになります:\n"
"\n"
" package MyLibrary;\n"
"\n"
"  use Math::Trig qw(tan);         # uses Exporter.pm   use String::Truncate "
"qw(trunc); # uses Sub::Exporter's defaults\n"
"\n"
"  use Sub::Exporter::ForMethods qw(method_installer);   use Mixin::Linewise "
"{ installer => method_installer }, qw(read_file);\n"
"\n"
"  use namespace::autoclean;\n"
"\n"
"  ...\n"
"\n"
"  1;\n"
"\n"
"MyLibrary がコンパイルされると、 'namespace::autoclean' は汚染された関数とし"
"て 'tan' と 'trunc' を削除しますが、 'read_file' は削除されません。なお、 "
"'method_installer' については削除されます。"

#. leap/perl-Sub-Exporter-GlobExporter/summary
msgid "Export Shared Globs with Sub::Exporter Collectors"
msgstr "Sub::Exporter コレクタ付きで共有グロブを公開するモジュール"

#. leap/perl-Sub-Exporter-GlobExporter/description
msgid ""
"Sub::Exporter::GlobExporter provides only one routine, 'glob_exporter', "
"which may be called either by its full name or may be imported on request.\n"
"\n"
"  my $exporter = glob_exporter( $default_name, $globref_locator );\n"
"\n"
"The routine returns a collection validator|Sub::Exporter/Collector "
"Configuration that will export a glob into the importing package. It will "
"export it under the name '$default_name', unless an alternate name is given "
"(as shown above). The glob that is installed is specified by the "
"'$globref_locator', which can be either the globref itself, or a reference "
"to a string which will be called on the exporter\n"
"\n"
"For an example, see the /SYNOPSIS, in which a method is defined to produce "
"the globref to share. This allows the glob-exporting package to be "
"subclassed, so the subclass may choose to either re-use the same glob when "
"exporting or to export a new one.\n"
"\n"
"If there are entries in the arguments to the globref-exporting collector "
"_other_ than those beginning with a dash, a hashref of them will be passed "
"to the globref locator. In other words, if we were to write this:\n"
"\n"
"  use Shared::Symbol '$Symbol' => { arg => 1, -as => 2 };\n"
"\n"
"It would result in a call like the following:\n"
"\n"
"  my $globref = Shared::Symbol->_shared_globref({ arg => 1 });"
msgstr ""
"Sub::Exporter::GlobExporter はたった 1 つのルーチン 'glob_exporter' を提供し"
"ます。これはフルネームで呼び出すことができるほか、要求に応じてインポートする"
"こともできます。\n"
"\n"
"  my $exporter = glob_exporter( $default_name, $globref_locator );\n"
"\n"
"このルーチンはコレクションバリデータを返すもので、インポートしているパッケー"
"ジに対してグロブを公開します。公開は、 (上記のように) 異なる名前を指定しない"
"限り、 '$default_name' の名前の配下になります。インストールするグロブは "
"'$fglobref_locator' で指定します。これはグロブ参照それ自身でもかまいません"
"し、エクスポータ上で呼び出させる文字列の参照でもかまいません。\n"
"\n"
"使用例については /SYNOPSIS をお読みください。こちらではグロブ参照を生成して共"
"有するために定義されたメソッドがあります。これにより、グロブでエクスポートし"
"ているパッケージをサブクラス化できるため、サブクラス側では公開時に同じグロブ"
"を使用するか、もしくは新しく公開するかを選択することができます。\n"
"\n"
"パラメータ内にダッシュ以外の文字で始まるグロブ参照の公開コレクタが存在する"
"と、これらのハッシュ参照がグロブ参照のロケータに渡されます。言い換えると、下"
"記のように書いていたものがあるとすると:\n"
"\n"
"  use Shared::Symbol '$Symbol' => { arg => 1, -as => 2 };\n"
"\n"
"下記のようになることになります:\n"
"\n"
"  my $globref = Shared::Symbol->_shared_globref({ arg => 1 });"

#. leap/perl-Sub-Exporter-Progressive/summary
msgid "Only use Sub::Exporter if you need it"
msgstr "必要な時にだけ Sub::Exporter を使用する方法"

#. leap/perl-Sub-Exporter-Progressive/description
msgid ""
"Sub::Exporter is an incredibly powerful module, but with that power comes "
"great responsibility, er- as well as some runtime penalties. This module is "
"a 'Sub::Exporter' wrapper that will let your users just use Exporter if all "
"they are doing is picking exports, but use 'Sub::Exporter' if your users try "
"to use 'Sub::Exporter''s more advanced features, like renaming exports, if "
"they try to use them.\n"
"\n"
"Note that this module will export '@EXPORT', '@EXPORT_OK' and '%EXPORT_TAGS' "
"package variables for 'Exporter' to work. Additionally, if your package uses "
"advanced 'Sub::Exporter' features like currying, this module will only ever "
"use 'Sub::Exporter', so you might as well use it directly."
msgstr ""
"Sub::Exporter は非常にパワフルなモジュールですが、このパワーには実行時の不利"
"など、大きな代償が伴います。このモジュールはたとえば、単に関数の公開のみを行"
"ないたいような場合で、 'Sub::Exporter' に用意された高度な機能 (たとえば公開関"
"数の名前変更など) を行ないたいような場合に役立つ、 'Sub::Exporter' に対する"
"ラッパーです。\n"
"\n"
"なお、このモジュールは '@EXPORT', '@EXPORT_OK', '%EXPORT_TAGS' の各パッケージ"
"を、 'Exporter' に対して公開して動作することに注意してください。また、お使い"
"のパッケージで 'Sub::Exporter' でカリーイングなど高度な機能を利用している場合"
"は、'Sub::Exporter' を直接利用したほうが適切です。"

#. leap/perl-Sub-Identify/summary
msgid "Retrieve names of code references"
msgstr "コード参照の名前取得"

#. leap/perl-Sub-Identify/description
msgid ""
"'Sub::Identify' allows you to retrieve the real name of code references.\n"
"\n"
"It provides six functions, all of them taking a code reference.\n"
"\n"
"'sub_name' returns the name of the code reference passed as an argument (or "
"'__ANON__' if it's an anonymous code reference), 'stash_name' returns its "
"package, and 'sub_fullname' returns the concatenation of the two.\n"
"\n"
"'get_code_info' returns a list of two elements, the package and the "
"subroutine name (in case of you want both and are worried by the speed.)\n"
"\n"
"In case of subroutine aliasing, those functions always return the original "
"name.\n"
"\n"
"'get_code_location' returns a two-element list containing the file name and "
"the line number where the subroutine has been defined.\n"
"\n"
"'is_sub_constant' returns a boolean value indicating whether the subroutine "
"is a constant or not."
msgstr ""
"'Sub::Identify' はコード参照の実名を取得することができる仕組みです。\n"
"\n"
"6 種類の関数が用意されていますが、いずれもコード参照を指定します。\n"
"\n"
"'sub_name' はパラメータとして与えたコード参照の名前を返します (匿名のコード参"
"照であった場合は '__ANON__' を返します) 。 'stash_name' はパッケージ名を、 "
"'sub_fullname' はパッケージ名と名前の両方を結合して返します。\n"
"\n"
"'get_code_info' は 2 つの要素のリスト (パッケージとサブルーチンの名前) を返し"
"ます (両方が必要で、速度面での心配をしている場合に使用します) 。\n"
"\n"
"サブルーチンの別名を使用している場合、これらの関数は常に元の名前を返しま"
"す。\n"
"\n"
"'get_code_location' は 2 つの要素のリスト (サブルーチンが定義されているファイ"
"ル名と行番号) を返します。\n"
"\n"
"'is_sub_constant' はサブルーチンが定数であるかどうかを真偽値で返します。"

#. leap/perl-Sub-Info/summary
msgid "Tool for inspecting subroutines"
msgstr "サブルーチン内部調査ツール"

#. leap/perl-Sub-Info/description
msgid "Tool to inspect subroutines."
msgstr "サブルーチンの内部を調査するためのツールです。"

#. leap/perl-Sub-Install/summary
msgid "Install subroutines into packages easily"
msgstr "簡易的なパッケージ内へのサブルーチンのインストール"

#. leap/perl-Sub-Install/description
msgid ""
"This module makes it easy to install subroutines into packages without the "
"unsightly mess of 'no strict' or typeglobs lying about where just anyone can "
"see them."
msgstr ""
"このモジュールは、 'no strict' や typeglob のような比較的厄介な仕組みを使用せ"
"ずに、サブルーチンをインストールしやすくすることができるモジュールです。"

#. leap/perl-Sub-Name/summary
msgid "(Re)name a sub"
msgstr "サブルーチンの名前 (変更)"

#. leap/perl-Sub-Name/description
msgid "This module has only one function, which is also exported by default:"
msgstr ""
"このモジュールにはたった 1 つの関数のみが含まれていて、既定で公開されていま"
"す:"

#. leap/perl-Sub-Override/summary
#. leap/perl-Sub-Override/description
msgid "Perl extension for easily overriding subroutines"
msgstr "サブルーチンを簡単にオーバーライドできる Perl 拡張"

#. leap/perl-Sub-Quote/summary
msgid "Efficient generation of subroutines via string eval"
msgstr "文字列 eval を利用したサブルーチンの効果的な生成"

#. leap/perl-Sub-Quote/description
msgid ""
"This package provides performant ways to generate subroutines from strings."
msgstr ""
"このパッケージは、文字列からサブルーチンを生成するための効率的な方法を提供し"
"ます。"

#. leap/perl-Sub-Retry/summary
msgid "Retry $N Times"
msgstr "$N 回の再試行"

#. leap/perl-Sub-Retry/description
msgid "Sub::Retry provides the function named 'retry'."
msgstr "Sub::Retry は 'retry' という関数を提供します。"

#. leap/perl-Sub-Spec/summary
#. leap/perl-Sub-Spec/description
msgid "Subroutine metadata specification"
msgstr "サブルーチンのメタデータ仕様"

#. leap/perl-Sub-Uplevel/summary
msgid "Apparently run a function in a higher stack frame"
msgstr "高レベルなスタックフレーム内での関数実行"

#. leap/perl-Sub-Uplevel/description
msgid ""
"Like Tcl's uplevel() function, but not quite so dangerous. The idea is just "
"to fool caller(). All the really naughty bits of Tcl's uplevel() are avoided."
msgstr ""
"Tcl の uplevel() 関数に似た仕組みですが、それほど危険なものではありません。"

#. leap/perl-Switch/summary
msgid "A switch statement for Perl, do not use if you can use given/when"
msgstr ""
"Perl 向け switch ステートメント (given/when が利用できる場合は使用してはなり"
"ません)"

#. leap/perl-Switch/description
msgid ""
"The Switch.pm module implements a generalized case mechanism that covers "
"most (but not all) of the numerous possible combinations of switch and case "
"values described above.\n"
"\n"
"The module augments the standard Perl syntax with two new control "
"statements: 'switch' and 'case'. The 'switch' statement takes a single "
"scalar argument of any type, specified in parentheses. 'switch' stores this "
"value as the current switch value in a (localized) control variable. The "
"value is followed by a block which may contain one or more Perl statements "
"(including the 'case' statement described below). The block is "
"unconditionally executed once the switch value has been cached.\n"
"\n"
"A 'case' statement takes a single scalar argument (in mandatory parentheses "
"if it's a variable; otherwise the parens are optional) and selects the "
"appropriate type of matching between that argument and the current switch "
"value. The type of matching used is determined by the respective types of "
"the switch value and the 'case' argument, as specified in Table 1. If the "
"match is successful, the mandatory block associated with the 'case' "
"statement is executed.\n"
"\n"
"In most other respects, the 'case' statement is semantically identical to an "
"'if' statement. For example, it can be followed by an 'else' clause, and can "
"be used as a postfix statement qualifier.\n"
"\n"
"However, when a 'case' block has been executed control is automatically "
"transferred to the statement after the immediately enclosing 'switch' block, "
"rather than to the next statement within the block. In other words, the "
"success of any 'case' statement prevents other cases in the same scope from "
"executing. But see the \"Allowing fall-through\" manpage below.\n"
"\n"
"Together these two new statements provide a fully generalized case "
"mechanism:\n"
"\n"
"        use Switch;\n"
"\n"
"        \n"
"\n"
"        %special = ( woohoo => 1,  d'oh => 1 );\n"
"\n"
"        while (<>) { \t    chomp;             switch ($_) "
"{                 case (%special) { print \"homer\\n\"; }      # if "
"$special{$_}                 case /[a-z]/i   { print \"alpha\\n\"; }      # "
"if $_ =~ /a-z/i                 case [1..9]     { print \"small num\\n\"; }  "
"# if $_ in [1..9]                 case { $_[0] >= 10 } { print \"big num\\n"
"\"; } # if $_ >= 10                 print \"must be punctuation\\n\" case /"
"\\W/;  # if $_ ~= /\\W/ \t    }         }\n"
"\n"
"Note that 'switch'es can be nested within 'case' (or any other) blocks, and "
"a series of 'case' statements can try different types of matches -- hash "
"membership, pattern match, array intersection, simple equality, etc. -- "
"against the same switch value.\n"
"\n"
"The use of intersection tests against an array reference is particularly "
"useful for aggregating integral cases:\n"
"\n"
"        sub classify_digit         {                 switch ($_[0]) { case "
"0            { return 'zero' }                                  case "
"[2,4,6,8]    { return 'even' }                                  case "
"[1,3,5,7,9]  { return 'odd' }                                  case /[A-F]/"
"i     { return 'hex' }                                }         }"
msgstr ""
"Switch.pm モジュールは一般化された case 機構を実装するもので、上述のとおり "
"switch と case の考えうる組み合わせのほとんど (ただしすべてではありません) に"
"対応しています。\n"
"\n"
"このモジュールは標準の Perl の文法に対して、 2 種類の制御ステートメント "
"('switch', 'case') を追加します。 'switch' ステートメントは 1 つのカッコで"
"括ったスカラー値を受け入れます。 'switch' は (ローカライズされた) 制御変数内"
"に現在の switch の値を保存します。また、値の後には 1 つまたは複数の Perl ス"
"テートメント (下記の 'case' ステートメントを含みます) を含むブロックを指定し"
"ます。ブロック内では switch の値がキャッシュされるため、無条件にいずれか 1 つ"
"が実行されることになります。\n"
"\n"
"'case' ステートメントでは 1 つのスカラー値を受け入れ (変数を指定する場合は"
"カッコが必須ですが、それ以外は任意です) 、パラメータと現在の switch の値との"
"間で適切な型を選択します。使用する型は switch の値の型と 'case' のパラメータ"
"との間で判断されます (表 1) 。比較が成功 (一致) すると、 'case' ステートメン"
"トに結び付けられたコードブロックが実行されます。\n"
"\n"
"他のほとんどの点において、 'case' ステートメントは 'if' ステートメントと意味"
"論上は同じ動作になります。たとえば 'else' 句を利用できたり、後置ステートメン"
"ト修飾子などを使用することができます。\n"
"\n"
"ただし、 'case' ブロックが実行された後は、制御はブロック内の次のステートメン"
"トではなく、 'switch' ブロックの直後に自動的に移動します。言い換えると、いず"
"れかの 'case' ステートメントが成功すると、同じスコープ内の他の 'case' は実行"
"されなくなります。詳しくは下記の \"Allowing fall-through\" をお読みくださ"
"い。\n"
"\n"
"これら 2 つの新しいステートメントは、完全に一般化された case の仕組みを提供し"
"ます:\n"
"\n"
"        use Switch;\n"
"\n"
"        \n"
"\n"
"        %special = ( woohoo => 1,  d'oh => 1 );\n"
"\n"
"        while (<>) { \t    chomp;             switch ($_) "
"{                 case (%special) { print \"homer\\n\"; }      # if "
"$special{$_}                 case /[a-z]/i   { print \"alpha\\n\"; }      # "
"if $_ =~ /a-z/i                 case [1..9]     { print \"small num\\n\"; }  "
"# if $_ in [1..9]                 case { $_[0] >= 10 } { print \"big num\\n"
"\"; } # if $_ >= 10                 print \"must be punctuation\\n\" case /"
"\\W/;  # if $_ ~= /\\W/ \t    }         }\n"
"\n"
"ただし、 'switch' は 'case' のコードブロック内に入れ子になることもできるほ"
"か、 'case' ステートメント間で異なる方の比較処理を実施することもできます。具"
"体的にはハッシュのメンバーシップ確認、パターンマッチ、配列の交差、シンプルな"
"値の比較などを、同じ switch の値に対して適用することができます。\n"
"\n"
"配列の参照に対する交差テストの使用は、特に集合積分の case で特に有用です:\n"
"\n"
"        sub classify_digit         {                 switch ($_[0]) { case "
"0            { return 'zero' }                                  case "
"[2,4,6,8]    { return 'even' }                                  case "
"[1,3,5,7,9]  { return 'odd' }                                  case /[A-F]/"
"i     { return 'hex' }                                }         }"

#. leap/perl-Symbol-Table/summary
msgid "An easy interface to symbol tables"
msgstr "シンボルテーブルに対する簡易なインターフェイス"

#. leap/perl-Symbol-Table/description
msgid ""
"Symbol::Table allows the user to manipulate Perl's symbol table\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Greg London"
msgstr ""
"Symbol::Table は、 Perl のシンボルテーブルを簡単に扱うことができます。\n"
"\n"
"\n"
"\n"
"作者:\n"
"--------     Greg London"

#. leap/perl-Symbol-Util/summary
msgid "Additional utils for Perl symbols manipulation"
msgstr "Perl シンボル操作のための追加ユーティリティ"

#. leap/perl-Symbol-Util/description
msgid ""
"This module provides a set of additional functions useful for Perl symbols "
"manipulation.\n"
"\n"
"All Perl symbols from the same package are organized as a stash. Each symbol "
"(glob) contains one or more of following slots: 'SCALAR', 'ARRAY', 'HASH', "
"'CODE', 'IO', 'FORMAT'. These slots are also accessible as standard "
"variables or bare words.\n"
"\n"
"The Perl symbols table is directly accessible with typeglob prefix but it "
"can be difficult to read and problematic if strict mode is used. Also the "
"access to stash, glob and one of its slot have different syntax notation.\n"
"\n"
"'stash' and 'fetch_glob' functions gets stash or glob without need to use "
"'no strict 'refs''.\n"
"\n"
"'delete_glob' function allows to delete specific slot of symbol name without "
"deleting others.\n"
"\n"
"'delete_sub' removes the symbol from class API. This symbol won't be "
"available as an object method.\n"
"\n"
"'export_glob' function exports a glob to the target package.\n"
"\n"
"'export_package' works like the Exporter manpage module and allows to export "
"symbols from one package to other.\n"
"\n"
"'unexport_package' allows to delete previously exported symbols."
msgstr ""
"'unexport_package' は以前に公開を受けたシンボルを削除することができます。"

#. leap/perl-Syntax-Keyword-Junction/summary
msgid "Perl6 style Junction operators in Perl5"
msgstr "Perl5 で Perl6 のようなジャンクション演算子を使用するモジュール"

#. leap/perl-Syntax-Keyword-Try/summary
msgid "C<try/catch/finally> syntax for perl"
msgstr "Perl 向け C<try/catch/finally> 文法"

#. leap/perl-Syntax-Keyword-Try/description
msgid ""
"This module provides a syntax plugin that implements exception-handling "
"semantics in a form familiar to users of other languages, being built on a "
"block labeled with the 'try' keyword, followed by at least one of a 'catch' "
"or 'finally' block.\n"
"\n"
"As well as providing a handy syntax for this useful behaviour, this module "
"also serves to contain a number of code examples for how to implement parser "
"plugins and manipulate optrees to provide new syntax and behaviours for perl "
"code."
msgstr ""
"このモジュールは、他の言語内に存在するような例外処理機構を実装する文法プラグ"
"インで、 'try' キーワードのラベルが設定されたブロックに対して、 'catch' や "
"'finally' などのブロックを構築することができます。\n"
"\n"
"このような使いやすい振る舞いを提供する文法だけでなく、このモジュールはパー"
"サープラグインを実装する方法を示す多数のコード例を含めたり、 optree を操作し"
"て新しい文法や動作を Perl コード内に追加したりすることができます。"

#. leap/perl-Sys-CPU/summary
msgid ""
"Perl extension for getting CPU information. Currently only number of CPU[cut]"
msgstr "CPU 情報 (現時点では CPU 数) を取得する Perl 拡張"

#. leap/perl-Sys-CPU/description
msgid ""
"In responce to a post on perlmonks.org, a module for counting the number of "
"CPU's on a system. Support has now also been added for type of CPU and clock "
"speed. While much of the code is from UNIX::Processors, win32 support has "
"been added (but not tested)."
msgstr ""
"perlmonks.org への回答として作成された、システムの CPU 数を数えるモジュールで"
"す。現在は CPU の種類とクロックスピードも取得することができます。コードのうち"
"の多くは UNIX::Processors からのものですが、 win32 サポートも追加されていま"
"す (ただしテストは行なわれていません) 。"

#. leap/perl-Sys-Hostname-Long/summary
msgid "Try every conceivable way to get full hostname"
msgstr "完全なホスト名を取得するために各種の手段を試すモジュール"

#. leap/perl-Sys-Hostname-Long/description
msgid ""
"How to get the host full name in perl on multiple operating systems (mac, "
"windows, unix* etc)"
msgstr ""
"複数のオペレーティングシステム (Mac, Windows, Unix* など) の Perl 内で、完全"
"なホスト名を取得するためのモジュールです。"

#. leap/perl-Sys-LoadAvg/summary
msgid "Perl extension for accessing system CPU load averages"
msgstr "CPU のロードアベレージにアクセスするための Perl 拡張"

#. leap/perl-Sys-LoadAvg/description
msgid "Module for accessing System load averages."
msgstr "システムロードアベレージにアクセスするための モジュール。"

#. leap/perl-Sys-SigAction/summary
msgid "Perl extension for Consistent Signal Handling"
msgstr "一貫性のあるシグナル処理のための Perl 拡張"

#. leap/perl-Sys-SigAction/description
msgid ""
"Prior to version 5.8.0 perl implemented 'unsafe' signal handling. The reason "
"it is consider unsafe, is that there is a risk that a signal will arrive, "
"and be handled while perl is changing internal data structures. This can "
"result in all kinds of subtle and not so subtle problems. For this reason it "
"has always been recommended that one do as little as possible in a signal "
"handler, and only variables that already exist be manipulated.\n"
"\n"
"Perl 5.8.0 and later versions implements 'safe' signal handling on platforms "
"which support the POSIX sigaction() function. This is accomplished by having "
"perl note that a signal has arrived, but deferring the execution of the "
"signal handler until such time as it is safe to do so. Unfortunately these "
"changes can break some existing scripts, if they depended on a system "
"routine being interrupted by the signal's arrival. The perl 5.8.0 "
"implementation was modified further in version 5.8.2.\n"
"\n"
"From the perl 5.8.2 *perlvar* man page:\n"
"\n"
"   The default delivery policy of signals changed in Perl 5.8.0    from "
"immediate (also known as \"unsafe\") to deferred, also    known as \"safe "
"signals\".\n"
"\n"
"The implementation of this changed the 'sa_flags' with which the signal "
"handler is installed by perl, and it causes some system routines (like "
"connect()) to return EINTR, instead of another error when the signal "
"arrives. The problem comes when the code that made the system call sees the "
"EINTR code and decides it's going to call it again before returning. Perl "
"doesn't do this but some libraries do, including for instance, the Oracle "
"OCI library.\n"
"\n"
"Thus the 'deferred signal' approach (as implemented by default in perl 5.8 "
"and later) results in some system calls being retried prior to the signal "
"handler being called by perl. This breaks timeout logic for DBD-Oracle which "
"works with earlier versions of perl. This can be particularly vexing, when, "
"for instance, the host on which a database resides is not available: 'DBI-"
">connect()' hangs for minutes before returning an error (and cannot even be "
"interrupted with control-C, even when the intended timeout is only seconds). "
"This is because SIGINT appears to be deferred as well. The result is that it "
"is impossible to implement open timeouts with code that looks like this in "
"perl 5.8.0 and later:\n"
"\n"
"   eval {       eval {          local $SIG{ALRM} = sub { die \"timeout"
"\" };          alarm 2;          $sth = DBI->connect(...);          alarm "
"0;       };       alarm 0;       die if $@;    };\n"
"\n"
"Or as the author of bug #50628 pointed out, might probably better be written "
"as:\n"
"\n"
"   eval {       local $SIG{ALRM} = sub { die \"timeout\" };       eval "
"{          alarm 2;          $sth = DBI->connect(...);          alarm "
"0;       };       alarm 0;       die if $@;    };\n"
"\n"
"The solution, if your system has the POSIX sigaction() function, is to use "
"perl's 'POSIX::sigaction()' to install the signal handler. With "
"'sigaction()', one gets control over both the signal mask, and the "
"'sa_flags' that are used to install the handler. Further, with perl 5.8.2 "
"and later, a 'safe' switch is provided which can be used to ask for safe(r) "
"signal handling.\n"
"\n"
"Using sigaction() ensures that the system call won't be resumed after it's "
"interrupted, so long as die is called within the signal handler. This is no "
"longer the case when one uses '$SIG{name}' to set signal handlers in perls "
">= 5.8.0.\n"
"\n"
"The usage of sigaction() is not well documented however, and in perl "
"versions less than 5.8.0, it does not work at all. (But that's OK, because "
"just setting '$SIG' does work in that case.) Using sigaction() requires "
"approximately 4 or 5 lines of code where previously one only had to set a "
"code reference into the %SIG hash.\n"
"\n"
"Unfortunately, at least with perl 5.8.0, the result is that doing this "
"effectively reverts to the 'unsafe' signals behavior. It is not clear "
"whether this would be the case in perl 5.8.2, since the safe flag can be "
"used to ask for safe signal handling. I suspect this separates the logic "
"which uses the 'sa_flags' to install the handler, and whether deferred "
"signal handling is used.\n"
"\n"
"The reader should also note, that the behavior of the 'safe' attribute is "
"not consistent with what this author expected. Specifically, it appears to "
"disable signal masking. This can be examined further in the t/safe.t and the "
"t/mask.t regression tests. Never-the-less, Sys::SigAction provides an easy "
"mechanism for the user to recover the pre-5.8.0 behavior for signal "
"handling, and the mask attribute clearly works. (see t/mask.t) If one is "
"looking for specific safe signal handling behavior that is considered "
"broken, and the breakage can be demonstrated, then a patch to t/safe.t would "
"be most welcome.\n"
"\n"
"This module wraps up the POSIX:: routines and objects necessary to call "
"sigaction() in a way that is as efficient from a coding perspective as just "
"setting a localized '$SIG{SIGNAL}' with a code reference. Further, the user "
"has control over the 'sa_flags' passed to sigaction(). By default, if no "
"additional args are passed to sigaction(), then the signal handler will be "
"called when a signal (such as SIGALRM) is delivered.\n"
"\n"
"Since sigaction() is not fully functional in perl versions less than 5.8, "
"this module implements equivalent behavior using the standard '%SIG' array. "
"The version checking and implementation of the 'right' code is handled by "
"this module, so the user does not have to write perl version dependent code. "
"The attrs hashref argument to set_sig_handler() is silently ignored, in perl "
"versions less than 5.8. When this module was developed it was tested on perl "
"5.005 on solaris. That was in 2004. Now only perl versions >= 5.6 are "
"supported. If you want this to work on perl 5.5 you will have comment out "
"\"use warnings\" everywhere.\n"
"\n"
"It is hoped that with the use of this module, your signal handling behavior "
"can be coded in a way that does not change from one perl version to the "
"next, and that sigaction() will be easier for you to use."
msgstr ""
"バージョン 5.8.0 以前の Perl では、 '安全ではない' シグナル処理を実装していま"
"した。安全ではないと判断される理由は、シグナルが届いたとき、 Perl がその内部"
"データ構造を変更しようとしているときに処理が行なわれるため、それによってリス"
"クがありうることによるものです。これによって些細な問題が発生しうる可能性があ"
"ります。このような理由により、シグナルハンドラ内はできる限り少ないコードで実"
"装しておき、かつ既に存在する変数のみを操作することが推奨されています。\n"
"\n"
"Perl 5.8.0 およびそれ以降のバージョンでは、 POSIX の sigaction() 関数に対応す"
"るプラットフォームにおいて、 '安全な' シグナル実装が実装されるようになりまし"
"た。これは Perl 側でシグナルが届いたときに、安全な状態になるまでシグナルハン"
"ドラの実行を遅らせることによって成り立っています。残念ながらこの変更は、シグ"
"ナルの到着によって割り込まれるシステムルーチンに依存している場合、既存のスク"
"リプトに影響があるものです。 Perl 5.8.0 の実装は、再度 5.8.2 でも変更されてい"
"ます。\n"
"\n"
"Perl 5.8.2 の *perlvar* マニュアルページでは、下記のように説明されています:\n"
"\n"
"Perl 5.8.0 では既定のシグナル配送ポリシーが変更され、即時 (\"安全ではない\" "
"とされてきたもの) から遅延型に変更され、 \"安全なシグナル配送\" となるように"
"なりました。\n"
"\n"
"この実装は、 Perl によってどのシグナルハンドラがインストールされたのかを示す "
"'sa_flags' も変更され、これによってシグナルが到着した際、いくつかのシステム"
"ルーチン (connect() など) がエラーではなく EINTR を返すようになっています。こ"
"の問題は、システムコールを行なったコードが EINTR コードを見て、それが返される"
"前に再び呼び出されると判断した際に発生します。 Perl 側ではこのようなことは行"
"なっていませんが、たとえば Oracle OCI ライブラリなど、いくつかのライブラリで"
"は実施しています。\n"
"\n"
"このような仕組みから、 '遅延型シグナル' のアプローチ (Perl 5.8 もしくはそれ以"
"降で既定で実装されているもの) によって、 Perl 側でシグナルハンドラが呼び出さ"
"れるよりも前に、システムコールが再試行されることになります。これは古いバー"
"ジョンの Perl で DBD-Oracle を利用する際、タイムアウトの仕組みの動作がうまく"
"いかなくなってしまいます。これは、例えばデータベースが存在するホストが利用不"
"可能な状況になった場合、特に厄介なことになりえます: 'DBI->connect()' はエラー"
"を返す前にしばらくハングアップするようになります (希望するタイムアウトが数秒"
"の指定であったとしても、 CTRL-C で中断させることができません) 。これは "
"SIGINT も同様に遅延処理されることによります。この結果、 Perl 5.8.0 およびそれ"
"以降でできるような、オープンなタイムアウトを実装することが不可能になっていま"
"す:\n"
"\n"
"   eval {       eval {          local $SIG{ALRM} = sub { die \"timeout"
"\" };          alarm 2;          $sth = DBI->connect(...);          alarm "
"0;       };       alarm 0;       die if $@;    };\n"
"\n"
"バグ #50628 の著者が指摘しているとおり、下記のように記述できることが望ましい"
"と思われます:\n"
"\n"
"   eval {       local $SIG{ALRM} = sub { die \"timeout\" };       eval "
"{          alarm 2;          $sth = DBI->connect(...);          alarm "
"0;       };       alarm 0;       die if $@;    };\n"
"\n"
"お使いのシステムに POSIX sigaction() 関数が用意されている場合、シグナルハンド"
"ラをインストールするために Perl の 'POSIX::sigaction()' を使用することが解決"
"となります。 'sigaction()' を利用することで、ハンドラをインストールする際に使"
"用するシグナルマスクと 'sa_flags' の両方を制御できることになります。またこれ"
"に加えて、 Perl 5.8.2 およびそれ以降のバージョンでは、より安全なシグナル処理"
"を行なうための 'safe' スイッチも追加されています。\n"
"\n"
"sigaction() を使用すると、シグナルハンドラ内で die が呼び出される限り、割り込"
"み発生後にシステムコールが復元しないようになります。これは、 Perl >= 5.8.0 で"
"は '$SIG(name)' を利用してシグナルハンドラを設定すべきではないことも示してい"
"ます。\n"
"\n"
"sigaction() の使用方法はあまり説明されていない Perl 5.8.0 以前のバージョンで"
"もそうですが、これはうまく動作しません (このような場合は '$SIG' を設定するの"
"が適切です) 。 sigaction() を利用する場合は、 %SIG ハッシュを利用する場合と比"
"べて 4 〜 5 行程度の追加コードが必要となります。\n"
"\n"
"残念なことに、少なくとも Perl 5.8.0 では、これを動作させると '安全ではない' "
"シグナルの動作を引き起こしてしまいます。この振る舞いは、安全にシグナルを処理"
"するために safe フラグを使用することができることから、 Perl 5.8.2 でも同様か"
"どうかは不明です。ハンドラをインストールする際に 'sa_flags' のどれを使用すべ"
"きかや、遅延シグナル処理を使用しているかどうかはについては、ロジックとは別の"
"問題と思われます。\n"
"\n"
"また、この利用者が注意すべきこととして、 'safe' 属性の動作は著者が期待するよ"
"うな安定性は持たないことがあります。特にシグナルマスクを無効化するような場合"
"に顕著になります。これは t/safe.t と t/mask.t 回帰テストで確認することができ"
"ます。それにも関わらず、 Sys::SigAction ではユーザに対して簡易な仕組みを提供"
"して、 5.8.0 またはそれ以前のシグナル処理動作を提供し、マスク属性が正しく動作"
"するようになっています (t/mask.t をご覧ください) 。うまく動作しないはずの安全"
"なシグナル処理を見つけた場合で、それを再現させることができる場合は、 t/safe."
"t に対してパッチをご提供ください。\n"
"\n"
"このモジュールは POSIX:: ルーチンやオブジェクトをラップするものであり、これに"
"よって必要な sigaction() をコーディングの観点から効率的に呼び出して、ローカラ"
"イズされた '$SIG(SIGNAL)' にコード参照を与えた場合と同じ処理を提供します。こ"
"れに加えて、ユーザは sigaction() に渡す 'sa_flags' についても制御を行なうこと"
"ができます。既定では sigaction() に追加のパラメータが設定されない場合、ハグな"
"るハンドラはシグナル (例: SIGALRM) が配送された時点で呼び出します。\n"
"\n"
"sigaction() は Perl バージョン 5.8 以前では完全には動作しないため、このモ"
"ジュールは標準的な '%SIG' 配列を利用して等価な処理を行なっています。バージョ"
"ンのチェックと '正しい' コードの実装は本モジュール内で行なわれているため、"
"ユーザ側ではバージョンに依存したコードを作成する必要がありません。 "
"set_sig_handler() に対する属性のハッシュ参照パラメータは、特に警告メッセージ"
"もなく無視されます。なお、このモジュールの開発時点では、 Solaris 上の Perl "
"5.005 でテストされています。これは 2004 年時点の話で、現在は Perl バージョン "
">= 5.6 に対応しています。 Perl 5.5 で動作させたい場合は、様々な箇所にある "
"\"use warnings\" をコメントアウトしてください。\n"
"\n"
"このモジュールが便利であり、バージョンに依存せずシグナル処理を実装し、 "
"sigaction() をより簡単に利用できることを期待しております。"

#. leap/perl-Sys-Virt/summary
msgid "Represent and manage a libvirt hypervisor connection"
msgstr "libvirt ハイパーバイザ接続を管理するモジュール"

#. leap/perl-Sys-Virt/description
msgid ""
"The Sys::Virt module provides a Perl XS binding to the libvirt virtual "
"machine management APIs. This allows machines running within arbitrary "
"virtualization containers to be managed with a consistent API."
msgstr ""
"Sys::Virt モジュールは libvirt 仮想マシン管理 API にバインディングするための "
"Perl XS モジュールです。安定した API を通して、任意の仮想コンテナ内で動作する"
"マシンにアクセスすることができます。"

#. leap/perl-Sysadm-Install/summary
msgid "Typical installation tasks for system administrators"
msgstr "システム管理者向けの典型的なインストールタスク"

#. leap/perl-Sysadm-Install/description
msgid ""
"Have you ever wished for your installation shell scripts to run "
"reproducibly, without much programming fuzz, and even with optional logging "
"enabled? Then give up shell programming, use Perl.\n"
"\n"
"'Sysadm::Install' executes shell-like commands performing typical "
"installation tasks: Copying files, extracting tarballs, calling 'make'. It "
"has a 'fail once and die' policy, meticulously checking the result of every "
"operation and calling 'die()' immediately if anything fails.\n"
"\n"
"'Sysadm::Install' also supports a _dry_run_ mode, in which it logs "
"everything, but suppresses any write actions. Dry run mode is enabled by "
"calling 'Sysadm::Install::dry_run(1)'. To switch back to normal, call "
"'Sysadm::Install::dry_run(0)'.\n"
"\n"
"As of version 0.17, 'Sysadm::Install' supports a _confirm_ mode, in which it "
"interactively asks the user before running any of its functions (just like "
"'rm -i'). _confirm_ mode is enabled by calling 'Sysadm::Install::"
"confirm(1)'. To switch back to normal, call 'Sysadm::Install::confirm(0)'.\n"
"\n"
"'Sysadm::Install' is fully Log4perl-enabled. To start logging, just "
"initialize 'Log::Log4perl'. 'Sysadm::Install' acts as a wrapper class, "
"meaning that file names and line numbers are reported from the calling "
"program's point of view."
msgstr ""
"インストール用のシェルスクリプトに対して、プログラミングの手間をかけることな"
"く、かつ必要であればログを有効化させて、再現性を期待したことがありますか？こ"
"のような場合は、シェルプログラミングではなく Perl をお使いください。\n"
"\n"
"'Sysadm::Install' はシェルのようなコマンドを実行して、典型的なインストール作"
"業を実施します: ファイルのコピーや tar ボールの抽出、 'make' の呼び出しな"
"ど。 'fail once and die' (一回でも失敗したら die する) ポリシーで構築されてい"
"ますので、各操作の結果は細心の注意を払ってチェックされていて、何らかの失敗が"
"あると即時に 'die()' するようになっています。\n"
"\n"
"'Sysadm::Install' では _ドライ_ 実行 (dry run) モードにも対応しています。この"
"モードは、すべてのログを記録する一方で、書き込み処理は何も実施しないモードで"
"す。ドライ実行モードは、 'Sysadm::Install::dry_run(1)' を実行することで有効に"
"することができます。通常のモードに戻すには、 'Sysadm::Install::dry_run(0)' を"
"実行します。\n"
"\n"
"バージョン 0.17 では、 'Sysadm::Install' は _確認 (confirm)_ モードにも対応し"
"ています。こちらは各処理の実行前に対話的な確認メッセージを表示する ('rm -i' "
"のような) 仕組みです。確認モードは 'Sysadm::Install::confirm(1)' を実行するこ"
"とで有効にすることができます。通常のモードに戻すには、 'Sysadm::Install::"
"confirm(0)' を実行します。\n"
"\n"
"'Sysadm::Install' は Log4perl を完全に対応しています。ログを開始するには "
"'Log::Log4perl' を実行して初期化するだけです。 'Sysadm::Install' はラッパーク"
"ラスとして動作しますが、これはファイル名と行番号が呼び出したプログラム側の観"
"点でレポートされる、ということです。"

#. leap/perl-SystemPerl/summary
msgid "SystemPerl Language Extension to SystemC"
msgstr "SystemC に対する SystemPerl 言語拡張"

#. leap/perl-SystemPerl/description
msgid ""
"SystemPerl is a version of the SystemC language. It is designed to expand "
"text so that needless repetition in the language is minimized. By using the "
"sp_preproc manpage, SystemPerl files can be expanded into C++ files at "
"compile time, or expanded in place to make them valid stand-alone SystemC "
"files.\n"
"\n"
"The concept of SystemPerl is based upon the AUTOS in the the verilog-mode "
"manpage package for Emacs, by the same author."
msgstr ""
"SystemPerl は SystemC 言語の特定バージョンです。テキストを拡張するように設計"
"されていて、言語ごとに作成するような手間を省いています。 sp_preproc を使用す"
"ることで、 SystemPerl はコンパイル時に C++ 言語を利用して拡張することができる"
"ほか、単独の SystemC ファイルとして展開することもできます。\n"
"\n"
"SystemPerl の考え方は、 Emacs 向けの verilog モードパッケージにおける AUTOS "
"(同一の作者) をベースにしています。"

#. leap/perl-SystemPerl/perl-SystemPerl-devel/summary
msgid "Development files for perl-SystemPerl"
msgstr "perl-SystemPerl 向け開発用ファイル"

#. leap/perl-SystemPerl/perl-SystemPerl-devel/description
msgid ""
"The perl-SystemPerl-devel package contains libraries and header files for "
"developing applications that use perl-SystemPerl."
msgstr ""
"perl-SystemPerl-devel パッケージには、 perl-SystemPerl を使用するアプリケー"
"ションをコンパイルおよび開発するのに必要な、ヘッダファイルとライブラリが含ま"
"れています。"

#. leap/perl-TAP-Harness-JUnit/summary
msgid "Generate JUnit compatible output from TAP results"
msgstr "TAP 結果からの JUnit 互換出力生成"

#. leap/perl-TAP-Harness-JUnit/description
msgid ""
"The only difference between this module and _TAP::Harness_ is that this "
"module adds the optional arguments 'xmlfile', 'package', and 'namemangle' "
"that cause the output to be formatted into XML in a format similar to the "
"one that is produced by the JUnit testing framework."
msgstr ""
"このモジュールと _TAP::Harness_ の唯一の違いは、このモジュールは 'xmlfile', "
"'package', 'namemangle' というオプションパラメータが提供されている点にありま"
"す。これらは出力形式を XML 形式にするためのもので、 JUnit テストフレームワー"
"クで生成される出力に似たものを生成することができます。"

#. leap/perl-Task-Kensho-Async/summary
msgid "Glimpse at an Enlightened Perl: Async Programming"
msgstr "Glimpse at an Enlightened Perl: 非同期プログラミング"

#. leap/perl-Task-Kensho-Async/description
#. leap/perl-Task-Kensho-CLI/description
#. leap/perl-Task-Kensho-Config/description
#. leap/perl-Task-Kensho-Dates/description
#. leap/perl-Task-Kensho-Exceptions/description
#. leap/perl-Task-Kensho-ModuleDev/description
#. leap/perl-Task-Kensho-OOP/description
#. leap/perl-Task-Kensho-Scalability/description
#. leap/perl-Task-Kensho-Testing/description
#. leap/perl-Task-Kensho-XML/description
msgid ""
"From http://en.wikipedia.org/wiki/Kensho:\n"
"\n"
"    Kenshō (見性) (C. Wu) is a Japanese term for enlightenment experiences "
"-     most commonly used within the confines of Zen Buddhism - literally     "
"meaning \"seeing one's nature\"[1] or \"true self.\"[2] It generally     "
"\"refers to the realization of nonduality of subject and object.\"[3]\n"
"\n"
"Task::Kensho is a list of recommended modules for Enlightened Perl "
"development. CPAN is wonderful, but there are too many wheels and you have "
"to pick and choose amongst the various competing technologies.\n"
"\n"
"The plan is for Task::Kensho to be a rough testing ground for ideas that go "
"into among other things the Enlightened Perl Organisation Extended Core (EPO-"
"EC).\n"
"\n"
"The modules that are bundled by Task::Kensho are broken down into several "
"categories and are still being considered. They are all taken from various "
"top 100 most used perl modules lists and from discussions with various "
"subject matter experts in the Perl Community. That said, this bundle does "
"_not_ follow the guidelines established for the EPO-EC for peer review via "
"industry advisers.\n"
"\n"
"Starting in 2011, Task::Kensho split its sub-groups of modules into "
"individually-installable tasks. Each Task::Kensho sub-task is listed at the "
"beginning of its section in this documentation.\n"
"\n"
"When installing Task::Kensho itself, you will be asked to install each sub-"
"task in turn, or you can install individual tasks separately. These "
"individual tasks will always install all their modules by default. This "
"facilitates the ease and simplicity the distribution aims to achieve."
msgstr ""
"https://ja.wikipedia.org/wiki/見性より:\n"
"\n"
"    見性（けんしょう）とは、仏教の禅において用いられる仏教用語。人間に本来そ"
"なわる、本性を徹見すること。禅の悟りの１つとされる。次の修行過程は修道。仏典"
"には見性の語は多く現れるが、見（dṛṣti）と性（svabhāva）という字義通りの熟語"
"（複合語）で、禅宗の用法と関係した記述はほとんど見られず（#見性成仏を参照）、"
"これが禅の用語とされる理由となっている。\n"
"\n"
"Task::Kensho は Enlightened Perl の開発で使用する推奨モジュール集です。CPAN "
"は素晴らしい仕組みですが、多数のモジュールが存在することから、様々な競合技術"
"の間でどれを選択すべきかがわかりにくくなっています。\n"
"\n"
"Task::Kensho は、アイディアに対して大まかなテストグラウンドとなることを目指"
"し、これによって Enlightened Perl Organisation Extended Core (EPO-EC) を構成"
"しています。\n"
"\n"
"Task::Kensho に同梱されているモジュールは複数のカテゴリに分類されます。これら"
"は 100 種類のもっともよく使用される Perl モジュールの一覧から取られたものであ"
"るほか、 Perl のコミュニティ内で熟練者同士が議論を行なって決めたものでもあり"
"ます。つまり、この同梱物は技術的なアドバイザを介してピアレビューを行ない、 "
"EPO-EC 用に建てられたガイドラインには従って _いない_ ということになります。\n"
"\n"
"2011 年以降、 Task::Kensho はモジュールのサブグループを個別に分割し、それぞれ"
"インストール可能なタスクとしました。各 Task::Kensho のサブタスクは、このド"
"キュメンテーション内のセクションの冒頭に一覧で示されています。\n"
"\n"
"Task::Kensho 自身をインストールする場合、インストールするサブタスクを選択する"
"ように求められるほか、個別にタスクをインストールすることもできます。これらの"
"個別のタスクは、既定では常にすべてのモジュールをインストールします。これによ"
"り、配布物を実現するのに簡単でシンプルな方法となっています。"

#. leap/perl-Task-Kensho-CLI/summary
msgid "Glimpse at an Enlightened Perl: Useful Command-line Tools"
msgstr "Glimpse at an Enlightened Perl: 便利なコマンドラインツール"

#. leap/perl-Task-Kensho-Config/summary
msgid "Glimpse at an Enlightened Perl: Config Modules"
msgstr "Glimpse at an Enlightened Perl: 設定モジュール"

#. leap/perl-Task-Kensho-Dates/summary
msgid "Glimpse at an Enlightened Perl: Date Modules"
msgstr "Glimpse at an Enlightened Perl: 日付モジュール"

#. leap/perl-Task-Kensho-Exceptions/summary
msgid "Glimpse at an Enlightened Perl: Exception Handling"
msgstr "Glimpse at an Enlightened Perl: 例外処理"

#. leap/perl-Task-Kensho-ModuleDev/summary
msgid "Glimpse at an Enlightened Perl: Module Development"
msgstr "Glimpse at an Enlightened Perl: モジュール開発"

#. leap/perl-Task-Kensho-OOP/summary
msgid "Glimpse at an Enlightened Perl: Object Oriented Programming"
msgstr "Glimpse at an Enlightened Perl: オブジェクト指向プログラミング"

#. leap/perl-Task-Kensho-Scalability/summary
msgid "Glimpse at an Enlightened Perl: Scalability"
msgstr "Glimpse at an Enlightened Perl: スケーラビリティ"

#. leap/perl-Task-Kensho-Testing/summary
msgid "Glimpse at an Enlightened Perl: Testing"
msgstr "Glimpse at an Enlightened Perl: テスト"

#. leap/perl-Task-Kensho-XML/summary
msgid "Glimpse at an Enlightened Perl: XML Development"
msgstr "Glimpse at an Enlightened Perl: XML 開発"

#. leap/perl-Task-Moose/summary
msgid "Moose in a box"
msgstr "Moose in a box"

#. leap/perl-Task-Moose/description
msgid ""
"This Task installs Moose and then optionally installs a number of Moose "
"extensions listed below. This list is meant to be comprehensive, so if I "
"missed something please let me know."
msgstr ""
"このタスクは Moose をインストールし、オプションで以下の複数の Moose 拡張もイ"
"ンストールします。この一覧は包括的なものであり、何か書き漏れているものがあれ"
"ばお知らせください。"

#. leap/perl-Task-Weaken/summary
msgid "Ensure that a platform has weaken support"
msgstr "プラットフォームが weaken 対応であることを確かめる仕組み"

#. leap/perl-Task-Weaken/description
msgid ""
"One recurring problem in modules that use Scalar::Util's 'weaken' function "
"is that it is not present in the pure-perl variant.\n"
"\n"
"While this isn't necessarily always a problem in a straight CPAN-based Perl "
"environment, some operating system distributions only include the pure-Perl "
"versions, don't include the XS version, and so weaken is then \"missing\" "
"from the platform, *despite* passing a dependency on Scalar::Util "
"successfully.\n"
"\n"
"Most notably this is RedHat Linux at time of writing, but other come and go "
"and do the same thing, hence \"recurring problem\".\n"
"\n"
"The normal solution is to manually write tests in each distribution to "
"ensure that 'weaken' is available.\n"
"\n"
"This restores the functionality testing to a dependency you do once in your "
"_Makefile.PL_, rather than something you have to write extra tests for each "
"time you write a module.\n"
"\n"
"It should also help make the package auto-generators for the various "
"operating systems play more nicely, because it introduces a dependency that "
"they *have* to have a proper weaken in order to work."
msgstr ""
"Scalar::Util の 'weaken' 関数を使用する場合、よくある問題としては純粋 Perl の"
"実装がないことです。\n"
"\n"
"CPAN ベースの Perl 環境内ではあまり問題にはなりませんが、オペレーティングシス"
"テムによっては純粋 Perl 版のみが同梱され、 XS 版が提供されていないことがあり"
"ます。これにより、 Scalar::Util に正しく依存関係を渡しているにもかかわらず、 "
"weaken も利用できないことになります。\n"
"\n"
"本文書記述時点での RedHat Linux がそれに該当しますが、ほかの環境でもよくある"
"話です。\n"
"\n"
"通常は、 'weaken' が利用可能であるかどうかを各配布物内で確認するような、手動"
"テストを追加して解決します。\n"
"\n"
"このモジュールは、モジュールを作成するごとに追加のテストを実行させることな"
"く、お使いの _Makefile.PL_ 内で実施した依存関係に戻すことができます。\n"
"\n"
"これは、様々なオペレーティングシステムでうまく動作させることのできる自動生成"
"器としても機能します。これは、うまく動作させるために適切な weaken が、依存関"
"係にあることを示せるからです。"

#. leap/perl-Template-GD/summary
#. leap/perl-Template-GD/description
msgid "Template::GD Perl module"
msgstr "Template::GD Perl モジュール"

#. leap/perl-Template-Toolkit/summary
#. leap/perl-Template-Toolkit/description
msgid "Template Processing System"
msgstr "テンプレート処理システム"

#. leap/perl-Term-Encoding/summary
msgid "Detect encoding of the current terminal"
msgstr "現在の端末におけるエンコーディングの検出"

#. leap/perl-Term-Encoding/description
msgid ""
"Term::Encoding is a simple module to detect an encoding the current terminal "
"expects, in various ways."
msgstr ""
"Term::Encoding は、様々な方法で現在の端末が期待するエンコーディングを検出する"
"ことのできるシンプルなモジュールです。"

#. leap/perl-Term-ProgressBar/summary
msgid "Provide a Progress Meter On a Standard Terminal"
msgstr "標準の端末に対する進捗表示メーター"

#. leap/perl-Term-ProgressBar/description
msgid ""
"Term::ProgressBar provides a simple progress bar on the terminal, to let the "
"user know that something is happening, roughly how much stuff has been done, "
"and maybe an estimate at how long remains.\n"
"\n"
"A typical use sets up the progress bar with a number of items to do, and "
"then calls update to update the bar whenever an item is processed.\n"
"\n"
"Often, this would involve updating the progress bar many times with no user-"
"visible change. To avoid unnecessary work, the update method returns a "
"value, being the update value at which the user will next see a change. By "
"only calling update when the current value exceeds the next update value, "
"the call overhead is reduced.\n"
"\n"
"Remember to call the '$progress->update($max_value)' when the job is done to "
"get a nice 100% done bar.\n"
"\n"
"A progress bar by default is simple; it just goes from left-to-right, "
"filling the bar with '=' characters. These are called *major* characters. "
"For long-running jobs, this may be too slow, so two additional features are "
"available: a linear completion time estimator, and/or a *minor* character: "
"this is a character that _moves_ from left-to-right on the progress bar (it "
"does not fill it as the major character does), traversing once for each "
"major-character added. This exponentially increases the granularity of the "
"bar for the same width."
msgstr ""
"Term::ProgressBar は端末に対してシンプルなプログレスバー (進捗表示バー) を提"
"供するもので、ユーザに対してどのような処理を行なっているのかや、おおよそどれ"
"だけの処理が完了していて、どれだけの時間で完了するのかの見積もりを知らせるこ"
"とができます。\n"
"\n"
"一般的にはまずプログレスバーは作業項目数を指定してセットアップし、その後 "
"update を実行してどれだけの項目が完了したのかを更新します。\n"
"\n"
"ただし、場合によってはユーザに対して目に見える変化がないまま、何度も更新され"
"てしまうような動きになることもあります。このような不要な描画を避けるため、 "
"\"update\" メソッドは値を返す仕組みになっています。返される値は、ユーザ側に目"
"に見える変化を与えるための次の値で、この値を超えない限り \"update\" メソッド"
"を呼び出さなければ、オーバーヘッドを軽減できるようになっています。\n"
"\n"
"なお、 100% の完了を示すため、すべての処理が完了した際には '$progress-"
">update($max_value)' を呼び出しておくことを忘れないでください。\n"
"\n"
"既定のプログレスバーはシンプルなもので、左から右に '=' の文字で示されるバーが"
"進んでいく仕組みです。これらは *メジャー* 文字と呼ばれるものです。長時間かか"
"るような処理の場合は、進捗が進まずわかりにくいので、下記の 2 つの追加機能も提"
"供されています: 線形で完了時間を予測する機能や、 *マイナー* 文字への対応で"
"す。マイナー文字とはメジャー文字と同様に左から右に移動していく文字ですが、各"
"メジャー文字の進捗のたびにリセットされる仕組みです。これはバーの粒度を指数関"
"数的に増加させる効果があります。"

#. leap/perl-Term-ReadKey/summary
msgid "Module for Simple Terminal Control"
msgstr "シンプルな端末コントロールモジュール"

#. leap/perl-Term-ReadKey/description
msgid ""
"This module, ReadKey, provides ioctl control for terminals and Win32 "
"consoles so the input modes can be changed (thus allowing reads of a single "
"character at a time), and also provides non-blocking reads of stdin, as well "
"as several other terminal related features, including retrieval/modification "
"of the screen size, and retrieval/modification of the control characters."
msgstr ""
"ReadKey は端末や Win32 コンソール向けの ioctl コントロールを提供し、 入力モー"
"ドを変更することができる (そのため、 1 回で 1 個の文字を読み取ることができま"
"す) ほか、 標準入力に対する非ブロックモードの読み取りやその他の端末関連の機能"
"を提供します。 たとえば画面サイズの取得や変更、 コントロール文字の取得や変更"
"などがあります。"

#. leap/perl-Term-ReadPassword/summary
msgid "Term::ReadPassword - Asking the user for a password"
msgstr "Term::ReadPassword - ユーザに対してパスワードを尋ねるモジュール"

#. leap/perl-Term-ReadPassword/description
msgid ""
"This module lets you ask the user for a password in the traditional way, "
"from the keyboard, without echoing.\n"
"\n"
"This is not intended for use over the web; user authentication over the web "
"is another matter entirely. Also, this module should generally be used in "
"conjunction with Perl's crypt() function, sold separately.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Tom Phoenix <rootbeer@redcat.com>"
msgstr ""
"このモジュールは、ユーザに対して伝統的な方法、つまりキーボードからの入力を受"
"け付けてその結果を表示しない方式で、パスワードを尋ねることを行ないます。\n"
"\n"
"これは Web 上で使用することは想定していません; Web でのユーザ認証には全く異な"
"る別の問題があります。また、このモジュールは一般に、別途提供されている Perl "
"の crypt() 関数と共に使用するべきものです。\n"
"\n"
"\n"
"\n"
"作者:\n"
"--------     Tom Phoenix <rootbeer@redcat.com>"

#. leap/perl-Term-Table/summary
msgid "Format a header and rows into a table"
msgstr "ヘッダと行を表に整形するモジュール"

#. leap/perl-Term-Table/description
msgid ""
"This is used by some failing tests to provide diagnostics about what has "
"gone wrong. This module is able to generic format rows of data into tables."
msgstr ""
"このモジュールは、テスト失敗時にどこに問題があったのかを表示する際に使用され"
"ているものです。このモジュールは、行を整形して表にまとめる機能を提供します。"

#. leap/perl-Term-UI/summary
msgid "Term::ReadLine UI made easy"
msgstr "Term::ReadLine 作りやすい UI"

#. leap/perl-Term-UI/description
msgid ""
"'Term::UI' is a transparent way of eliminating the overhead of having to "
"format a question and then validate the reply, informing the user if the "
"answer was not proper and re-issuing the question.\n"
"\n"
"Simply give it the question you want to ask, optionally with choices the "
"user can pick from and a default and 'Term::UI' will DWYM.\n"
"\n"
"For asking a yes or no question, there's even a shortcut."
msgstr ""
"'Term::UI' は、質問を提示して回答を検証する際のオーバーロードを削減するための"
"モジュールで、回答が適切でなかった場合には質問を再提示する機能も備わっていま"
"す。\n"
"\n"
"質問したい内容を単純に指定するほか、必要であれば選択肢の中から選択させたり、"
"既定値を指定したりなど、 'Term::UI' は様々なことを行なうことができます。\n"
"\n"
"yes (はい)/no (いいえ) のような質問に対しては、ショートカットも用意されていま"
"す。"

#. leap/perl-TermReadLine-Gnu/summary
msgid "Perl extension for the GNU Readline/History Library"
msgstr "GNU Readline/History ライブラリ向け Perl 拡張"

#. leap/perl-TermReadLine-Gnu/description
msgid ""
"This is an implementation of Term::ReadLine using the GNU Readline/History "
"Library. This package also has the interface with the almost all functions "
"and variables which are documented in the GNU Readline/History Library "
"Manual.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Hiroo Hayashi <hiroo.hayashi@computer.org>"
msgstr ""
"これは GNU Readline/History ライブラリを使用する Term::ReadLine の実装です。 "
"また、このパッケージには GNU Readline/History のマニュアルに書かれている ほぼ"
"全ての関数や変数に対するインターフェイスが備わっています。\n"
"\n"
"\n"
"\n"
"作者:\n"
"--------     Hiroo Hayashi <hiroo.hayashi@computer.org>"

#. leap/perl-Test-Assert/summary
msgid "Assertion methods for those who like JUnit."
msgstr "JUnit を好きな方のためのアサーションメソッド"

#. leap/perl-Test-Assert/description
msgid ""
"This class provides a set of assertion methods useful for writing tests. The "
"API is based on JUnit4 and the Test::Unit::Lite manpage and the methods die "
"on failure.\n"
"\n"
"These assertion methods might be not useful for common the Test::Builder "
"manpage-based (the Test::Simple manpage, the Test::More manpage, etc.) test "
"units.\n"
"\n"
"The assertion methods can be used in class which is derived from 'Test::"
"Assert' or used as standard Perl functions after importing them into user's "
"namespace.\n"
"\n"
"'Test::Assert' can also wrap standard the Test::Simple manpage, the Test::"
"More manpage or other the Test::Builder manpage-based tests.\n"
"\n"
"The assertions can be also used for run-time checking."
msgstr ""
"このクラスはテストを作成するために便利なメソッド集を提供します。 API は "
"JUnit4 と Test::Unit::Lite をベースにしていて、テスト失敗時には die で終了し"
"ます。\n"
"\n"
"これらのアサーションメソッドは、 Test::Simple や Test::More など、 Test::"
"Builder ベースのテストユニットを使用している場合には、あまり便利なものではな"
"いかもしれません。\n"
"\n"
"アサーションメソッドは 'Test::Assert' から派生しているクラス内で使用すること"
"ができるほか、ユーザのネームスペース内に取り込んだ後の標準 Perl 関数としても"
"使用することもできます。\n"
"\n"
"'Test::Assert' は標準の Test::Simple, Test::More, Test::Builder をベースにし"
"たテストに対するラップも行なっています。\n"
"\n"
"アサーションは実行時のチェックにも利用することができます。"

#. leap/perl-Test-Base/summary
msgid "A Data Driven Testing Framework"
msgstr "データ駆動型のテストフレームワーク"

#. leap/perl-Test-Base/description
msgid ""
"Testing is usually the ugly part of Perl module authoring. Perl gives you a "
"standard way to run tests with Test::Harness, and basic testing primitives "
"with Test::More. After that you are pretty much on your own to develop a "
"testing framework and philosophy. Test::More encourages you to make your own "
"framework by subclassing Test::Builder, but that is not trivial.\n"
"\n"
"Test::Base gives you a way to write your own test framework base class that "
"_is_ trivial. In fact it is as simple as two lines:\n"
"\n"
"    package MyTestFramework;     use Test::Base -Base;\n"
"\n"
"A module called 'MyTestFramework.pm' containing those two lines, will give "
"all the power of Test::More and all the power of Test::Base to every test "
"file that uses it. As you build up the capabilities of 'MyTestFramework', "
"your tests will have all of that power as well.\n"
"\n"
"'MyTestFramework' becomes a place for you to put all of your reusable "
"testing bits. As you write tests, you will see patterns and duplication, and "
"you can \"upstream\" them into 'MyTestFramework'. Of course, you don't have "
"to subclass Test::Base at all. You can use it directly in many applications, "
"including everywhere you would use Test::More.\n"
"\n"
"Test::Base concentrates on offering reusable data driven patterns, so that "
"you can write tests with a minimum of code. At the heart of all testing you "
"have inputs, processes and expected outputs. Test::Base provides some clean "
"ways for you to express your input and expected output data, so you can "
"spend your\n"
"\n"
"      time focusing on that rather than your code scaffolding."
msgstr ""
"通常、テストは Perl のモジュールを著作するにあたっては醜い部分でもあります。 "
"Perl では Test::Harness でテストを実行するための標準的な方法のほか、 Test::"
"More で基本的なテスト機構も用意されています。その後テスト用のフレームワークや"
"哲学を作成しようとしたこともあったものと思います。 Test::More では、 Test::"
"Builder をサブクラス化することで、独自のフレームワークを作成することも支援さ"
"れていますが、一般的な仕組みではありません。\n"
"\n"
"Test::Base は、ありふれた方法で独自のテストフレームワークを作成する方法を提供"
"します。事実、下記の 2 行を書くだけです:\n"
"\n"
"    package MyTestFramework;     use Test::Base -Base;\n"
"\n"
"'MyTestFramework.pm' と呼ばれるモジュールには上記の 2 行が含まれますが、これ"
"によって Test::More が提供するすべての力を提供し、 Test::Base のすべての力が"
"これを使用する各テストファイルにもたらされます。 'MyTestFramework' を利用して"
"テストを構築することで、実際のテストにもこれらすべての力をもたらすことになり"
"ます。\n"
"\n"
"'MyTestFramework' はお使いの環境でのテストに対して、再利用できる仕組みを提供"
"します。いったんテストを作成すると、その中にはパターンや重複などが見えてきま"
"すので、これらをアップストリーム、つまり 'MyTestFramework' にまとめることがで"
"きます。もちろん Test::Base からサブクラス化する必要もありません。多くのアプ"
"リケーション内から直接利用できるほか、 Test::More を使用する任意の場所から利"
"用することができます。\n"
"\n"
"Test::Base には再利用可能なデータ駆動型パターンがまとめられているため、テスト"
"側で記述すべきコードは最小限で済みます。すべてのテストの中心には入力やプロセ"
"ス、期待する出力が含まれています。 Test::Base には入力や期待する出力データを"
"記述するためのクリーンな方法が用意されていますので、あとはそれらに注力するだ"
"けでテストが完成します。"

#. leap/perl-Test-CChecker/summary
msgid ""
"Test-time utilities for checking C headers, libraries, or OS features (D[cut]"
msgstr ""
"C 言語のヘッダやライブラリ、 OS の機能などをチェックするためのテスト時ユー"
"ティリティ"

#. leap/perl-Test-CChecker/description
msgid ""
"*DEPRECATED*: The intention of this module was always to test Alien modules "
"(both Alien::Base based and non-Alien::Base based modules). It has a number "
"of shortcomings that I believe to be better addressed by Test::Alien, so "
"please consider using that for new projects, or even migrating existing "
"code.\n"
"\n"
"This module is a very thin convenience wrapper around ExtUtils::CChecker to "
"make it useful for use in a test context. It is intended for use with Alien "
"modules which need to verify that libraries work as intended with the "
"Compiler and flags used by Perl to build XS modules.\n"
"\n"
"By default this module is very quiet, hiding all output using Capture::Tiny "
"unless there is a failure, in which case you will see the commands, flags "
"and output used."
msgstr ""
"*廃止予定*: このモジュールは Alien モジュール (Alien::Base をベースにしたもの"
"と、 Alien::Base をベースにしていないものの両方) をテストする目的で常に作られ"
"てきたものです。 Test::Alien でよりよく解決可能な欠点も多数ありますので、新し"
"いプロジェクトに対してはこのモジュールをお使いください。既存のプロジェクトに"
"対しても移行をお勧めします。\n"
"\n"
"このモジュールは ExtUtils::CChecker に対する非常に薄い便利なラッパーで、テス"
"ト用に使用する際に便利な仕組みを提供しています。ライブラリがコンパイラととも"
"に使用された場合に正しく動作するかどうかや、 XS モジュールを構築する際の "
"Perl 側のフラグの設定など、 Alien モジュールで使用する前提で作られているもの"
"です。\n"
"\n"
"既定ではこのモジュールは非常に物静かで、テストが失敗しない限り Capture::Tiny "
"を利用してすべての出力を隠蔽します。テストが失敗した場合は、コマンドやフラ"
"グ、出力などがそれぞれ表示されます。"

#. leap/perl-Test-CPAN-Meta/summary
msgid "Validate your CPAN META.yml files"
msgstr "CPAN META.yml ファイルの検証"

#. leap/perl-Test-CPAN-Meta/description
msgid ""
"This distribution was written to ensure that a META.yml file, provided with "
"a standard distribution uploaded to CPAN, meets the specifications that are "
"slowly being introduced to module uploads, via the use of package makers and "
"installers such as the ExtUtils::MakeMaker manpage, the Module::Build "
"manpage and the Module::Install manpage.\n"
"\n"
"See the CPAN::Meta manpage for further details of the CPAN Meta "
"Specification."
msgstr ""
"この配布物は、 CPAN にアップロードする際の標準的な配布物で提供され、モジュー"
"ルのアップロードに対してゆっくりと導入されている仕様に適合した、 ExtUtils::"
"MakeMaker, Module::Build, Module::Install のようなメーカーやインストーラの"
"パッケージを介して META.yml ファイルを支援するために作られたものです。\n"
"\n"
"CPAN メタ仕様について、詳しくは CPAN::Meta をご覧ください。"

#. leap/perl-Test-CheckChanges/summary
msgid "Check that the Changes file matches the distribution."
msgstr "Changes ファイルが配布物とマッチしているかの確認"

#. leap/perl-Test-CheckChanges/description
msgid ""
"This module checks that you _Changes_ file has an entry for the current "
"version of the *Module* being tested.\n"
"\n"
"The version information for the distribution being tested is taken out of "
"the Build data, or if that is not found, out of the Makefile.\n"
"\n"
"It then attempts to open, in order, a file with the name _Changes_ or "
"_CHANGES_.\n"
"\n"
"The _Changes_ file is then parsed for version numbers. If one and only one "
"of the version numbers matches the test passes. Otherwise the test fails.\n"
"\n"
"A message with the current version is printed if the test passes, otherwise "
"dialog messages are printed to help explain the failure.\n"
"\n"
"The _examples_ directory contains examples of the different formats of "
"_Changes_ files that are recognized."
msgstr ""
"このモジュールは、テスト中の *モジュール* に対して、現在のバージョンの項目が "
"_Changes_ ファイル内に存在するかどうかをチェックします。\n"
"\n"
"テストの際、配布物に対するバージョンの情報はビルドデータから取得するか、ビル"
"ドデータ内に見つからない場合は Makefile の情報を参照します。\n"
"\n"
"バージョン情報が判断できたら、次に _Changes_ または _CHANGES_ の名前のファイ"
"ルを開きます。\n"
"\n"
"ファイルを開いたら内容を読み取って、バージョン番号を判断します。バージョン番"
"号の表記の中に現在のバージョンが存在すれば、テストはパスします。存在していな"
"かった場合は、テストが失敗します。\n"
"\n"
"テストがパスした際には現在のバージョンが表示され、失敗時にはダイアログメッ"
"セージが表示されます。\n"
"\n"
"_examples_ ディレクトリ内には、  _Changes_ ファイル内で認識可能なバージョン書"
"式に関する例が示されています。"

#. leap/perl-Test-CheckDeps/summary
msgid "Check for presence of dependencies"
msgstr "依存関係の存在の確認"

#. leap/perl-Test-CheckDeps/description
msgid ""
"This module adds a test that assures all dependencies have been installed "
"properly. If requested, it can bail out all testing on error."
msgstr ""
"このモジュールには、すべての依存関係が正しくインストールされているかどうかを"
"チェックするテストが含まれています。必要であれば、エラーを無視することもでき"
"ます。"

#. leap/perl-Test-CheckManifest/summary
#. leap/perl-Test-CheckManifest/description
msgid "Check if your Manifest matches your distro"
msgstr "Manifest と配布物が合致しているかどうかのチェック"

#. leap/perl-Test-Class/summary
msgid "Easily create test classes in an xUnit/JUnit style"
msgstr "xUnit/JUnit スタイルのテストクラスを簡単に作成するモジュール"

#. leap/perl-Test-Class/description
msgid ""
"Test::Class provides a simple way of creating classes and objects to test "
"your code in an xUnit style.\n"
"\n"
"Built using the Test::Builder manpage, it was designed to work with other "
"Test::Builder based modules (the Test::More manpage, the Test::Differences "
"manpage, the Test::Exception manpage, etc.).\n"
"\n"
"_Note:_ This module will make more sense, if you are already familiar with "
"the \"standard\" mechanisms for testing perl code. Those unfamiliar with the "
"Test::Harness manpage, the Test::Simple manpage, the Test::More manpage and "
"friends should go take a look at them now. the Test::Tutorial manpage is a "
"good starting point."
msgstr ""
"Test::Class は、 xUnit スタイルでのコードテスト用にクラスやオブジェクトを作成"
"するシンプルな方法を提供します。\n"
"\n"
"Test::Builder を利用して構築したことで、 Test::Builder ベースのモジュール "
"(Test::More, Test::Differences, Test::Exception など) とともに動作するように"
"設計されています。\n"
"\n"
"_注意:_ このモジュールは、すでに Perl のコードをテストする \"標準的な\" 仕組"
"みを知っている方に向けて作られています。 Test::Harness や Test::Simple, "
"Test::More などに詳しくない方は、まず Test::Tutorial をお読みください。"

#. leap/perl-Test-Class-Most/summary
msgid "Test Classes the easy way"
msgstr "簡単テストクラス"

#. leap/perl-Test-Class-Most/description
msgid ""
"When people write test classes with the excellent 'Test::Class', you often "
"see the following at the top of the code:\n"
"\n"
"  package Some::Test::Class;\n"
"\n"
"  use strict;   use warnings;   use base 'My::Test::Class';   use Test::"
"More;   use Test::Exception;\n"
"\n"
"  \n"
"\n"
"That's a lot of boilerplate and I don't like boilerplate. So now you can do "
"this:\n"
"\n"
"  use Test::Class::Most parent => 'My::Test::Class';\n"
"\n"
"That automatically imports the strict manpage and the warnings manpage for "
"you. It also gives you all of the testing goodness from the Test::Most "
"manpage."
msgstr ""
"優れた 'Test::Class' を利用してテストクラスを作成する際、コードの冒頭には下記"
"のような記述があります:\n"
"\n"
"  package Some::Test::Class;\n"
"\n"
"  use strict;   use warnings;   use base 'My::Test::Class';   use Test::"
"More;   use Test::Exception;\n"
"\n"
"  \n"
"\n"
"このような面倒な記述は避けたいものです。このモジュールを利用すると、下記のよ"
"うに略すことができます:\n"
"\n"
"  use Test::Class::Most parent => 'My::Test::Class';\n"
"\n"
"これにより strict と warnings がそれぞれインポートされるようになるほか、 "
"Test::Most が提供するテスト用の機能もインポートされます。"

#. leap/perl-Test-ClassAPI/summary
msgid "Provides basic first-pass API testing for large class trees"
msgstr "巨大なクラスツリー向けの基本的なファーストパス API テスト"

#. leap/perl-Test-ClassAPI/description
msgid ""
"For many APIs with large numbers of classes, it can be very useful to be "
"able to do a quick once-over to make sure that classes, methods, and "
"inheritance is correct, before doing more comprehensive testing. This module "
"aims to provide such a capability."
msgstr ""
"多数のクラスがある多数の API では、クラスやメソッド、継承関係が正しいかどうか"
"を、広範囲のテストを実施する前に一度に確認できたら便利でしょう。このモジュー"
"ルは、そのような機能を提供するものです。"

#. leap/perl-Test-CleanNamespaces/summary
msgid "Check for uncleaned imports"
msgstr "クリーンでないインポートに対するチェック"

#. leap/perl-Test-CleanNamespaces/description
msgid ""
"This module lets you check your module's namespaces for imported functions "
"you might have forgotten to remove with namespace::autoclean or namespace::"
"clean and are therefore available to be called as methods, which usually "
"isn't want you want."
msgstr ""
"このモジュールは、インポートした関数に対してモジュールのネームスペースを確認"
"し、 namespace::autoclean や namespace::clean で削除し忘れたと思われるものを"
"チェックするほか、メソッドとして呼び出せるようにします (こちらは通常不要で"
"しょう) 。"

#. leap/perl-Test-Command/summary
msgid "Test routines for external commands"
msgstr "外部コマンド向けテストルーチン"

#. leap/perl-Test-Command/description
msgid ""
"'Test::Command' intends to bridge the gap between the well tested functions "
"and objects you choose and their usage in your programs. By examining the "
"exit status, terminating signal, STDOUT and STDERR of your program you can "
"determine if it is behaving as expected.\n"
"\n"
"This includes testing the various combinations and permutations of options "
"and arguments as well as the interactions between the various functions and "
"objects that make up your program.\n"
"\n"
"The various test functions below can accept either a command string or an "
"array reference for the first argument. If the command is expressed as a "
"string it is passed to 'system' as is. If the command is expressed as an "
"array reference it is dereferenced and passed to 'system' as a list. See "
"''perldoc -f system'' for how these may differ.\n"
"\n"
"The final argument for the test functions, '$name', is optional. By default "
"the '$name' is a concatenation of the test function name, the command string "
"and the expected value. This construction is generally sufficient for "
"identifying a failing test, but you may always specify your own '$name' if "
"desired.\n"
"\n"
"Any of the test functions can be used as instance methods on a 'Test::"
"Command' object. This is done by dropping the initial '$cmd' argument and "
"instead using arrow notation.\n"
"\n"
"All of the following 'exit_is_num' calls are equivalent.\n"
"\n"
"   exit_is_num('true', 0);    exit_is_num('true', 0, 'exit_is_num: true, "
"0');    exit_is_num(['true'], 0);    exit_is_num(['true'], 0, 'exit_is_num: "
"true, 0');\n"
"\n"
"   my $cmd = Test::Command->new( cmd => 'true' );\n"
"\n"
"   exit_is_num($cmd, 0);    exit_is_num($cmd, 0, 'exit_is_num: true, 0');    "
"$cmd->exit_is_num(0);    $cmd->exit_is_num(0, 'exit_is_num: true, 0');\n"
"\n"
"   $cmd = Test::Command->new( cmd => ['true'] );\n"
"\n"
"   exit_is_num($cmd, 0);    exit_is_num($cmd, 0, 'exit_is_num: true, 0');    "
"$cmd->exit_is_num(0);    $cmd->exit_is_num(0, 'exit_is_num: true, 0');"
msgstr ""
"'Test::Command' はよくテストされた関数と選択したオブジェクト、そしてその使用"
"方法とのギャップを橋渡しすべく作られたモジュールです。終了ステータスを確認し"
"たり、シグナルで終了させたり、お使いのプログラムの STDOUT/STDERR を確認したり"
"することで、動作が期待通りかどうかを判断することができます。\n"
"\n"
"このモジュールには様々な組み合わせのテストやオプション／パラメータ順序などが"
"あるほか、お使いのプログラムを構成する様々な関数やオブジェクトの間での相互作"
"用もテストすることができます。\n"
"\n"
"下記の様々なテスト関数では、最初のパラメータとしてコマンド文字列か配列の参照"
"を受けつけることができます。コマンドが文字列で表されている場合は、文字列がそ"
"のまま 'system' に渡されます。配列の参照としてあらわされている場合は、参照外"
"しを行なった 'system' にリストを渡します。これらの違いについて、詳しくは "
"''perldoc -f system'' をご覧ください。\n"
"\n"
"テスト関数の最後のパラメータ '$name' はオプションで、既定ではテスト関数名とコ"
"マンド文字列、そして期待される値をつなげたものになります。このような仕組みは"
"テストの失敗を識別するのに十分ではありますが、必要であれば '$name' で独自の名"
"前を付与することもできます。\n"
"\n"
"いずれのテスト関数とも、 'Test::Command' オブジェクトのインスタンスメソッドと"
"して利用することができます。これは最初のパラメータ '$cmd' を削除して矢印 (-"
">) 表記を利用しているのと同じです。\n"
"\n"
"また、下記の 'exit_is_num' のすべての呼び出しは同じ意味です:\n"
"\n"
"   exit_is_num('true', 0);    exit_is_num('true', 0, 'exit_is_num: true, "
"0');    exit_is_num(['true'], 0);    exit_is_num(['true'], 0, 'exit_is_num: "
"true, 0');\n"
"\n"
"   my $cmd = Test::Command->new( cmd => 'true' );\n"
"\n"
"   exit_is_num($cmd, 0);    exit_is_num($cmd, 0, 'exit_is_num: true, 0');    "
"$cmd->exit_is_num(0);    $cmd->exit_is_num(0, 'exit_is_num: true, 0');\n"
"\n"
"   $cmd = Test::Command->new( cmd => ['true'] );\n"
"\n"
"   exit_is_num($cmd, 0);    exit_is_num($cmd, 0, 'exit_is_num: true, 0');    "
"$cmd->exit_is_num(0);    $cmd->exit_is_num(0, 'exit_is_num: true, 0');"

#. leap/perl-Test-Compile/summary
msgid "Assert that your Perl files compile OK"
msgstr "PerlファイルのコンパイルがOKであることをアサート"

#. leap/perl-Test-Compile/description
msgid ""
"'Test::Compile' lets you check the whether your perl modules and scripts "
"compile properly, results are reported in standard 'Test::Simple' fashion.\n"
"\n"
"The basic usage - as shown above, will locate your perl files and test that "
"they all compile.\n"
"\n"
"Module authors can (and probably should) include the following in a _t/00-"
"compile.t_ file and have 'Test::Compile' automatically find and check all "
"Perl files in a module distribution:\n"
"\n"
"         use strict;     use warnings;     use Test::Compile;     my $test = "
"Test::Compile->new();     $test->all_files_ok();     $test->done_testing();"
msgstr ""
"'Test::Compile' はお使いの Perl モジュールやスクリプトが正しくコンパイルでき"
"るかどうかをチェックし、結果を標準の 'Test::Simple' の方式で報告します。\n"
"\n"
"基本的な使い方は上述のとおりで、お使いの Perl ファイルを検索してすべてのコン"
"パイルをテストします。\n"
"\n"
"モジュールの作者は下記のような _t/00-comple.t_ ファイルを含めることができま"
"す (含めておくべきです) 。これにより、 'Test::Compile' が自動的に検出され、モ"
"ジュールの配布物の中ですべての Perl ファイルをチェックします:\n"
"\n"
"         use strict;     use warnings;     use Test::Compile;     my $test = "
"Test::Compile->new();     $test->all_files_ok();     $test->done_testing();"

#. leap/perl-Test-Deep/summary
msgid "Extremely flexible deep comparison"
msgstr "非常に柔軟で深い比較"

#. leap/perl-Test-Deep/description
msgid ""
"If you don't know anything about automated testing in Perl then you should "
"probably read about Test::Simple and Test::More before preceding. Test::Deep "
"uses the Test::Builder framework.\n"
"\n"
"Test::Deep gives you very flexible ways to check that the result you got is "
"the result you were expecting. At it's simplest it compares two structures "
"by going through each level, ensuring that the values match, that arrays and "
"hashes have the same elements and that references are blessed into the "
"correct class. It also handles circular data structures without getting "
"caught in an infinite loop.\n"
"\n"
"Where it becomes more interesting is in allowing you to do something besides "
"simple exact comparisons. With strings, the 'eq' operator checks that 2 "
"strings are exactly equal but sometimes that's not what you want. When you "
"don't know exactly what the string should be but you do know some things "
"about how it should look, 'eq' is no good and you must use pattern matching "
"instead. Test::Deep provides pattern matching for complex data structures\n"
"\n"
"Test::Deep has *_a lot_* of exports. See EXPORTS below."
msgstr ""
"Perl で自動化されたテストについてご存じない場合は、まず Test::Simple と "
"Test::More をお読みになることをお勧めします。 Test::Deep は Test::Builder フ"
"レームワークを使用しています。\n"
"\n"
"Test::Deep は、取得した結果が期待通りのものであるかどうかをチェックするため"
"の、非常に柔軟な方法を提供しています。 2 つの構造体はそれぞれのレベルに対して"
"行なわれるシンプルな仕組みであることから、値が等しいことや配列やハッシュが同"
"じ要素を持っているか、およびその参照が正しいクラスにブレスしているかどうかを"
"調べることができます。また、無限ループを回避する仕組みを備えているため、循環"
"構造でも問題なく動作します。\n"
"\n"
"より興味深い点としては、シンプルで正確な比較を行なうことができるという点があ"
"ります。文字列の場合、 'eq' 演算子を利用して 2 つの文字列が等しいことを確認し"
"ますが、場合によってはこれが期待するものではないことがあります。文字列が正確"
"にどのような値であるべきかがわからない場合は、パターンマッチングを代わりに使"
"用することができます。 Test::Deep では、複雑なデータ構造を比較する際にパター"
"ンマッチングを使用することができます。\n"
"\n"
"Test::Deep には *_多数の_* 公開関数があります。詳しくは /EXPORTS をお読みくだ"
"さい。"

#. leap/perl-Test-Deep-Type/summary
msgid "Test::Deep plugin for validating type constraints"
msgstr "型の制約を検証するための Test::Deep プラグイン"

#. leap/perl-Test-Deep-Type/description
msgid ""
"This is a Test::Deep plugin that provides the sub 'is_type' to indicate that "
"the data being tested must validate against the passed type. This is an "
"actual type _object_, not a string name -- for example something provided "
"via MooseX::Types, or a plain old coderef that returns a bool (such as what "
"might be used in a Moo type constraint)."
msgstr ""
"これは、テスト時に渡されたデータが、指定された型に適合するかどうかを判別す"
"る、 'is_type' サブルーチンを提供する Test::Depp プラグインです。これは実際の"
"型 _オブジェクト_ であり、文字列名ではありません -- たとえば MooseX::Types を"
"介して何らかのものを提供したり、 bool 値を返すような古いコード参照を提供する"
"ものです (たとえば Moo 型制約内で使用されるべきものなど) 。"

#. leap/perl-Test-Differences/summary
msgid "Test strings and data structures and show differences if not ok"
msgstr ""
"文字列やデータ構造をテストし、期待通りでなければ差分を表示するモジュール"

#. leap/perl-Test-Differences/description
msgid ""
"When the code you're testing returns multiple lines, records or data "
"structures and they're just plain wrong, an equivalent to the Unix 'diff' "
"utility may be just what's needed. Here's output from an example test script "
"that checks two text documents and then two (trivial) data structures:\n"
"\n"
" t/99example....1..3  not ok 1 - differences in text                  not ok "
"2 - differences in whitespace                  not ok 3                  \n"
"\n"
"eq_or_diff_...() compares two strings or (limited) data structures and "
"either emits an ok indication or a side-by-side diff. Test::Differences is "
"designed to be used with Test.pm and with Test::Simple, Test::More, and "
"other Test::Builder based testing modules. As the SYNOPSIS shows, another "
"testing module must be used as the basis for your test suite."
msgstr ""
"テスト対象のコードが複数行の出力やレコード、データ構造などを返すような場合、"
"その出力が誤っていたいた場合は、 Unix の 'diff' ユーティリティを利用して違い"
"を確認したいと思うことがあると思います。このモジュールはそのような目的で作ら"
"れたものです。下記はサンプルのテストスクリプトの出力結果で、 2 つのテキスト文"
"書と 2 つの (ごくありふれた) データ構造をチェックしています:\n"
"\n"
" t/99example....1..3  not ok 1 - differences in text                  not ok "
"2 - differences in whitespace                  not ok 3                  \n"
"\n"
"eq_or_diff_...() は 2 つの文字列または (限定された範囲の) データ構造を比較"
"し、両方が一致した場合は ok を、そうでない場合は差分を並べて表示します。 "
"Test::Differences は、 Test.pm, Test::Simple, Test::More など、 Test::"
"Builder ベースのテストモジュールとともに使用するよう設計されています。 "
"SYNOPSIS にも書いてある通り、お使いのテストスイートの基礎として他のテストモ"
"ジュールを利用しなければなりません。"

#. leap/perl-Test-Directory/summary
msgid "Perl extension for maintaining test directories"
msgstr "テストディレクトリをメンテナンスするための Perl 拡張"

#. leap/perl-Test-Directory/description
msgid ""
"Testing code can involve making sure that files are created and deleted as "
"expected. Doing this manually can be error prone, as it's easy to forget a "
"file, or miss that some unexpected file was added. This module simplifies "
"maintaining test directories by tracking their status as they are modified "
"or tested with this API, making it simple to test both individual files, as "
"well as to verify that there are no missing or unknown files.\n"
"\n"
"The idea is to use this API to create a temporary directory and populate an "
"initial set of files. Then, whenever something in the directory is changes, "
"use the test methods to verify that the change happened as expected. At any "
"time, it is simple to verify that the contents of the directory are exactly "
"as expected.\n"
"\n"
"Test::Directory implements an object-oriented interface for managing test "
"directories. It tracks which files it knows about (by creating or testing "
"them via its API), and can report if any files were missing or unexpectedly "
"added.\n"
"\n"
"There are two flavors of methods for interacting with the directory. "
"_Utility_ methods simply return a value (i.e. the number of files/errors) "
"with no output, while the _Test_ functions use Test::Builder to produce the "
"approriate test results and diagnostics for the test harness.\n"
"\n"
"The directory will be automatically cleaned up when the object goes out of "
"scope; see the _clean_ method below for details."
msgstr ""
"テスト用のコードでは特定のファイルが作成されたり削除されたりすることを確認す"
"るものがあります。これを手作業で行なってしまうと、ファ類を忘れてしまったり不"
"用意なファイルを追加してしまったりして、エラーを引き起こしやすくなってしまい"
"ます。このモジュールは、テストディレクトリの状態を、この API で変更またはテス"
"トされたときに追跡することによって、テストディレクトリの管理を簡素化します。"
"また、ファイルが失われてしまったり、未知のファイルが現われた場合の検証を行な"
"うこともできます。\n"
"\n"
"この API は、テンポラリディレクトリを作成してその中に初期状態のファイルを配置"
"する考え方を使用しています。その後、ディレクトリ内に何らかの変更を加えてテス"
"トメソッドを使用することで、期待通りに変化していることを確かめることができま"
"す。任意の時点においてディレクトリの内容が期待通りであることを正確に確認する"
"ことができます。\n"
"\n"
"Test::Directory では、オブジェクト指向のインターフェイスを実装して、テスト"
"ディレクトリの管理を行なっています。どのファイルが (APIを使用して作成またはテ"
"ストして) 既知のものであるかを追跡し、見つからなかったファイルや予期せず追加"
"されたファイルがあるかどうかを報告することができます。\n"
"\n"
"ディレクトリを扱うメソッドとしては 2 種類のものがあります。 _Utility_ メソッ"
"ドでは単純に値 (ファイルやエラーの数) を返すだけで、何も出力を行ないません。 "
"_Test_ メソッドでは Test::Builder を使用して、適切なテスト結果を生成したり、"
"テストハーネスの分析を行なうことができます。\n"
"\n"
"また、オブジェクトがスコープ外に外れると、ディレクトリが自動的にクリーンアッ"
"プされます。詳しくは _clean_ メソッドをお読みください。"

#. leap/perl-Test-EOL/summary
msgid "Check the correct line endings in your project"
msgstr "プロジェクト内の行末の確認"

#. leap/perl-Test-EOL/description
msgid ""
"This module scans your project/distribution for any perl files (scripts, "
"modules, etc) for the presence of windows line endings."
msgstr ""
"このモジュールはプロジェクトや配布物内の Perl ファイル (スクリプト、モジュー"
"ルなど) を検索し、 Windows での正しい行末が設定されているかどうかを確認しま"
"す。"

#. leap/perl-Test-Exception/summary
msgid "Test exception-based code"
msgstr "例外ベースのコードのテスト"

#. leap/perl-Test-Exception/description
msgid ""
"This module provides a few convenience methods for testing exception based "
"code. It is built with Test::Builder and plays happily with Test::More and "
"friends.\n"
"\n"
"If you are not already familiar with Test::More now would be the time to go "
"take a look.\n"
"\n"
"You can specify the test plan when you 'use Test::Exception' in the same way "
"as 'use Test::More'. See Test::More for details.\n"
"\n"
"NOTE: Test::Exception only checks for exceptions. It will ignore other "
"methods of stopping program execution - including exit(). If you have an "
"exit() in evalled code Test::Exception will not catch this with any of its "
"testing functions.\n"
"\n"
"NOTE: This module uses Sub::Uplevel and relies on overriding 'CORE::GLOBAL::"
"caller' to hide your test blocks from the call stack. If this use of global "
"overrides concerns you, the Test::Fatal module offers a more minimalist "
"alternative. \n"
"* *throws_ok*\n"
"\n"
"Tests to see that a specific exception is thrown. throws_ok() has two "
"forms:\n"
"\n"
"  throws_ok BLOCK REGEX, TEST_DESCRIPTION   throws_ok BLOCK CLASS, "
"TEST_DESCRIPTION\n"
"\n"
"In the first form the test passes if the stringified exception matches the "
"give regular expression. For example:\n"
"\n"
"    throws_ok { read_file( 'unreadable' ) } qr/No file/, 'no file';\n"
"\n"
"If your perl does not support 'qr//' you can also pass a regex-like string, "
"for example:\n"
"\n"
"    throws_ok { read_file( 'unreadable' ) } '/No file/', 'no file';\n"
"\n"
"The second form of throws_ok() test passes if the exception is of the same "
"class as the one supplied, or a subclass of that class. For example:\n"
"\n"
"    throws_ok { $foo->bar } \"Error::Simple\", 'simple error';\n"
"\n"
"Will only pass if the 'bar' method throws an Error::Simple exception, or a "
"subclass of an Error::Simple exception.\n"
"\n"
"You can get the same effect by passing an instance of the exception you want "
"to look for. The following is equivalent to the previous example:\n"
"\n"
"    my $SIMPLE = Error::Simple->new;     throws_ok { $foo->bar } $SIMPLE, "
"'simple error';\n"
"\n"
"Should a throws_ok() test fail it produces appropriate diagnostic messages. "
"For example:\n"
"\n"
"    not ok 3 - simple error               \n"
"\n"
"Like all other Test::Exception functions you can avoid prototypes by passing "
"a subroutine explicitly:\n"
"\n"
"    throws_ok( sub {$foo->bar}, \"Error::Simple\", 'simple error' );\n"
"\n"
"A true value is returned if the test succeeds, false otherwise. On exit $@ "
"is guaranteed to be the cause of death (if any).\n"
"\n"
"A description of the exception being checked is used if no optional test "
"description is passed.\n"
"\n"
"NOTE: Remember when you 'die $string_without_a_trailing_newline' perl will "
"automatically add the current script line number, input line number and a "
"newline. This will form part of the string that throws_ok regular "
"expressions match against. \n"
"* *dies_ok*\n"
"\n"
"Checks that a piece of code dies, rather than returning normally. For "
"example:\n"
"\n"
"    sub div {         my ( $a, $b ) = @_;         return $a / $b;     };\n"
"\n"
"    dies_ok { div( 1, 0 ) } 'divide by zero detected';\n"
"\n"
"         dies_ok( sub { div( 1, 0 ) }, 'divide by zero detected' );\n"
"\n"
"A true value is returned if the test succeeds, false otherwise. On exit $@ "
"is guaranteed to be the cause of death (if any).\n"
"\n"
"Remember: This test will pass if the code dies for any reason. If you care "
"about the reason it might be more sensible to write a more specific test "
"using throws_ok().\n"
"\n"
"The test description is optional, but recommended. \n"
"* *lives_ok*\n"
"\n"
"Checks that a piece of code doesn't die. This allows your test script to "
"continue, rather than aborting if you get an unexpected exception. For "
"example:\n"
"\n"
"    sub read_file {         my $file = shift;         local $/;         open "
"my $fh, '<', $file or die \"open failed ($!)\\n\";         $file = "
"<FILE>;         return $file;     };\n"
"\n"
"    my $file;     lives_ok { $file = read_file('test.txt') } 'file read';\n"
"\n"
"         lives_ok( sub { $file = read_file('test.txt') }, 'file read' );\n"
"\n"
"Should a lives_ok() test fail it produces appropriate diagnostic messages. "
"For example:\n"
"\n"
"    not ok 1 - file read          \n"
"\n"
"A true value is returned if the test succeeds, false otherwise. On exit $@ "
"is guaranteed to be the cause of death (if any).\n"
"\n"
"The test description is optional, but recommended. \n"
"* *lives_and*\n"
"\n"
"Run a test that may throw an exception. For example, instead of doing:\n"
"\n"
"  my $file;   lives_ok { $file = read_file('answer.txt') } 'read_file "
"worked';   is $file, \"42\", 'answer was 42';\n"
"\n"
"You can use lives_and() like this:\n"
"\n"
"  lives_and { is read_file('answer.txt'), \"42\" } 'answer is 42';      "
"lives_and(sub {is read_file('answer.txt'), \"42\"}, 'answer is 42');\n"
"\n"
"Which is the same as doing\n"
"\n"
"  is read_file('answer.txt'), \"42\\n\", 'answer is 42';\n"
"\n"
"unless 'read_file('answer.txt')' dies, in which case you get the same kind "
"of error as lives_ok()\n"
"\n"
"  not ok 1 - answer is 42      \n"
"\n"
"A true value is returned if the test succeeds, false otherwise. On exit $@ "
"is guaranteed to be the cause of death (if any).\n"
"\n"
"The test description is optional, but recommended."
msgstr ""
"このモジュールは例外ベースのコードをテストするための、いくつか便利なメソッド"
"を提供しています。 Test::Builder を利用して構築されていて、 Test::More などの"
"モジュールを併用することで、便利な使い方ができるようになっています。\n"
"\n"
"Test::More を詳しく知らない方は、まずそちらをご覧いただくことをお勧めしま"
"す。\n"
"\n"
"'use Test::Exception' を 'use Test::More' と同じような方法で使用する場合は、"
"テストプランを指定することもできます。詳しくは Test::More をご覧ください。\n"
"\n"
"注意: Test::Exception は例外のみをチェックし、他の方法のプログラム実行の停止"
"手順 (たとえば exit()) については、無視されることに注意してください。もしもテ"
"スト対象のコード内に exit() が存在する場合、 Test::Exception ではどの関数でも"
"これをキャッチできません。\n"
"\n"
"注意: このモジュールは Sub::Uplevel を使用していて、 'CORE::GLOBAL::caller' "
"をオーバーライドすることで、コールスタックからテストブロックを隠蔽していま"
"す。このようなグローバルなオーバーライドを行なうことで何らかの問題がある場合"
"は、 Test::Fatal をお使いください。こちらはより小規模な影響で済むようになって"
"いるものがあります。\n"
"* *throws_ok*\n"
"\n"
"特定の例外がスローされているかどうかをテストします。 throws_ok には 2 つの形"
"式があります:\n"
"\n"
"  throws_ok BLOCK REGEX, TEST_DESCRIPTION   throws_ok BLOCK CLASS, "
"TEST_DESCRIPTION\n"
"\n"
"前者の形式の場合、例外を文字列化した値が、指定した正規表現と合致すればテスト"
"は合格となります。例えば下記のようになります:\n"
"\n"
"    throws_ok { read_file( 'unreadable' ) } qr/No file/, 'no file';\n"
"\n"
"お使いの Perl が 'qr//' に対応していない場合は、正規表現をそのまま指定するこ"
"ともできます:\n"
"\n"
"    throws_ok { read_file( 'unreadable' ) } '/No file/', 'no file';\n"
"\n"
"後者の形式では、発生した例外が指定したクラス、もしくは指定したクラスのサブク"
"ラ\n"
"スであった場合に合格します。例えば下記のようになります:\n"
"\n"
"    throws_ok { $foo->bar } \\\"Error::Simple\\\", 'simple error';\n"
"\n"
"上記の例では、 'bar' メソッドが Error::Simple もしくはそのサブクラスの例外を"
"スローした場合に合格します。\n"
"\n"
"クラスを指定する場合は、そのクラスのインスタンスを指定してもかまいません。下"
"記は上記と同じ意味になります:\n"
"\n"
"    my $SIMPLE = Error::Simple->new;     throws_ok { $foo->bar } $SIMPLE, "
"'simple error';\n"
"\n"
"テストが失敗したときには、下記のようにして説明を表示することができます:\n"
"\n"
"    not ok 3 - simple error               \n"
"\n"
"他の Test::Exception 関数と同様に、サブルーチンを明示的に渡すことで、プロトタ"
"イプを避けることができます:\n"
"\n"
"    throws_ok( sub {$foo->bar}, \\\"Error::Simple\\\", 'simple error' );\n"
"\n"
"テストが成功したときには true を、そうでない場合は false になります。また、終"
"了時には $@ に失敗した理由が含まれます (理由が提供されていれば)。\n"
"\n"
"チェック対象の例外に関する説明は、追加のテスト説明が無い場合にのみ使用されま"
"す。\n"
"\n"
"注意: Perl が 'die $string' で die する際、文字列 ($string) に改行が含まれて"
"いない場合は、現在のスクリプトの行番号と改行が自動的に追加されます。この場合"
"も、スクリプトの行番号と改行が throws_ok の正規表現マッチの対象となりますの"
"で、注意してください。\n"
"* *dies_ok*\n"
"\n"
"正常終了ではなく、コードが die するかどうかをテストします。例えば下記のように"
"なります:\n"
"\n"
"    sub div {         my ( $a, $b ) = @_;         return $a / $b;     };\n"
"\n"
"    dies_ok { div( 1, 0 ) } 'divide by zero detected';\n"
"\n"
"         dies_ok( sub { div( 1, 0 ) }, 'divide by zero detected' );\n"
"\n"
"テストが成功したときには true を、そうでない場合は false になります。また、"
"終\n"
"了時には $@ に失敗した理由が含まれます (理由が提供されていれば)。\n"
"\n"
"注意: このテストは何らかの理由で die するだけでテストは合格してしまいます。よ"
"り厳密なテストを行ないたい場合は、 throws_ok() を利用してより厳しくチェックし"
"てください。\n"
"\n"
"テストの説明は任意指定ですが、できれば設定しておくことをお勧めします。\n"
"\n"
"* *lives_ok*\n"
"\n"
"コードが die せずに、正常終了するかどうかをチェックします。これを利用すること"
"で、テストスクリプトが予期せぬ例外で中断されず、続行できることを確認できま"
"す。例えば下記のようになります:\n"
"\n"
"    sub read_file {         my $file = shift;         local $/;         open "
"my $fh, '<', $file or die \\\"open failed ($!)\\\\n\\\";         $file = "
"<FILE>;         return $file;     };\n"
"\n"
"    my $file;     lives_ok { $file = read_file('test.txt') } 'file read';\n"
"\n"
"         lives_ok( sub { $file = read_file('test.txt') }, 'file read' );\n"
"\n"
"なお、テストが失敗したときには、下記のようにして説明を表示することができま"
"す:\n"
"\n"
"    not ok 1 - file read          \n"
"\n"
"テストが成功したときには true を、そうでない場合は false になります。また、終"
"了時には $@ に失敗した理由が含まれます (理由が提供されていれば)。\n"
"\n"
"テストの説明は任意指定ですが、できれば設定しておくことをお勧めします。\n"
"\n"
"* *lives_and*\n"
"\n"
"例外を発生させる可能性のあるテストを実行します。例えば下記のようになります:\n"
"\n"
"  my $file;   lives_ok { $file = read_file('answer.txt') } 'read_file "
"worked';   is $file, \\\"42\\\", 'answer was 42';\n"
"\n"
"lives_and() は下記のように実行することもできます:\n"
"\n"
"  lives_and { is read_file('answer.txt'), \\\"42\\\" } 'answer is 42';      "
"lives_and(sub {is read_file('answer.txt'), \\\"42\\\"}, 'answer is 42');\n"
"\n"
"これは 'read_file('answer.txt')' が die しない限り、下記と同じ処理になりま"
"す:\n"
"\n"
"  is read_file('answer.txt'), \\\"42\\\\n\\\", 'answer is 42';\n"
"\n"
"die した場合は、 lives_ok() と同じ種類のエラーが表示されます:\n"
"\n"
"  not ok 1 - answer is 42      \n"
"\n"
"テストが成功したときには true を、そうでない場合は false になります。また、終"
"了時には $@ に失敗した理由が含まれます (理由が提供されていれば)。\n"
"\n"
"テストの説明は任意指定ですが、できれば設定しておくことをお勧めします。"

#. leap/perl-Test-Exception-LessClever/summary
#. leap/perl-Test-Exception-LessClever/description
msgid "(DEPRECATED) Test::Exception simplified"
msgstr "(廃止予定) 単純化した Test::Exception"

#. leap/perl-Test-FailWarnings/summary
msgid "Add test failures if warnings are caught"
msgstr "警告がキャッチされている場合にテストを失敗にするモジュール"

#. leap/perl-Test-FailWarnings/description
msgid ""
"This module hooks '$SIG{__WARN__}' and converts warnings to the Test::More "
"manpage 'fail()' calls. It is designed to be used with 'done_testing', when "
"you don't need to know the test count in advance.\n"
"\n"
"Just as with the Test::NoWarnings manpage, this does not catch warnings if "
"other things localize '$SIG{__WARN__}', as this is designed to catch "
"_unhandled_ warnings."
msgstr ""
"このモジュールは '$SIG{__WARN__}' をフックして、警告を Test::More の "
"'fail()' コールに変換します。これは 'done_testing' とともに使用されることを前"
"提にした設計になっているため、あらかじめテストカウントを知っておく必要もあり"
"ません。\n"
"\n"
"Test::NoWarnings と同じように、 '$SIG{__WARN__}' をローカライズしている場合は"
"警告をキャッチしません。これは _未対応の_ 警告をキャッチしない設計によるもの"
"です。"

#. leap/perl-Test-Fatal/summary
msgid "incredibly simple helpers for testing code with exceptions"
msgstr "例外付きのコードをテストするための非常にシンプルなヘルパー"

#. leap/perl-Test-Fatal/description
msgid ""
"Test::Fatal is an alternative to the popular the Test::Exception manpage. It "
"does much less, but should allow greater flexibility in testing exception-"
"throwing code with about the same amount of typing.\n"
"\n"
"It exports one routine by default: 'exception'."
msgstr ""
"Test::Fatal は有名な Text::Exception に対する代替モジュールです。Test::"
"Exception よりはとても少ない処理しか行ないませんが、例外をスローするコードを"
"テストする際には、コードの入力と同程度の手間で、非常に柔軟な仕組みを提供しま"
"す。\n"
"\n"
"既定では 1 つのルーチンのみが公開されています: 'exception'"

#. leap/perl-Test-File/summary
msgid "Test file attributes"
msgstr "ファイル属性のテスト"

#. leap/perl-Test-File/description
msgid ""
"This modules provides a collection of test utilities for file attributes.\n"
"\n"
"Some file attributes depend on the owner of the process testing the file in "
"the same way the file test operators do. For instance, root (or super-user "
"or Administrator) may always be able to read files no matter the "
"permissions.\n"
"\n"
"Some attributes don't make sense outside of Unix, either, so some tests "
"automatically skip if they think they won't work on the platform. If you "
"have a way to make these functions work on Windows, for instance, please "
"send me a patch. :) IF you want to pretend to be Windows on a non-Windows "
"machine (for instance, to test 'skip()'), you can set the "
"'PRETEND_TO_BE_WINDOWS' environment variable.\n"
"\n"
"The optional NAME parameter for every function allows you to specify a name "
"for the test. If not supplied, a reasonable default will be generated."
msgstr ""
"このモジュールは、ファイル属性に対するテストユーティリティ集を提供します。\n"
"\n"
"ファイル属性によっては、ファイルをテストするためのプロセスの所有者が、ファイ"
"ルテストの演算子が行なうのと同じでなければならないものがあったりします。たと"
"えばroot (もしくはスーパーユーザや Administrator) は、ファイルのアクセス権に"
"関係なくファイルを読み込むことができてしまいます。\n"
"\n"
"属性によっては Unix 以外のオペレーティングシステムで意味をなさないものがあり"
"ますので、その場合はプラットフォームを判断して自動的にテストを飛ばす機能を提"
"供しています。たとえば Windows でもこれらの機能を動作させたい場合は、是非とも"
"パッチをお送りください :) 。また、非 Windows マシンを Windows マシンとして動"
"作させたい場合 (たとえば 'skip()' のテストなど) は、 'PRETEND_TO_BE_WINDOWS' "
"環境変数を設定してください。\n"
"\n"
"なお、各関数にオプションで用意されている NAME パラメータは、テストに対する名"
"前を設定するためのものです。何も指定しない場合は既定値を生成します。"

#. leap/perl-Test-File-Contents/summary
#. leap/perl-Test-File-Contents/description
msgid "Test routines for examining the contents of files"
msgstr "ファイルの内容調査向けテストルーチン"

#. leap/perl-Test-File-ShareDir/summary
msgid "Create a Fake ShareDir for your modules for testing"
msgstr "モジュールをテストするための偽装 ShareDir の作成"

#. leap/perl-Test-File-ShareDir/description
msgid ""
"'Test::File::ShareDir' is some low level plumbing to enable a distribution "
"to perform tests while consuming its own 'share' directories in a manner "
"similar to how they will be once installed.\n"
"\n"
"This allows 'File::ShareDir' to see the _latest_ version of content instead "
"of simply whatever is installed on whichever target system you happen to be "
"testing on. \n"
"*Note:* This module only has support for creating 'new' style share dirs and "
"are NOT compatible with old File::ShareDirs.\n"
"\n"
"For this reason, unless you have File::ShareDir 1.00 or later installed, "
"this module will not be usable by you."
msgstr ""
"'Test::File::ShareDir' はいくつかの低レベルな配線変更を行なうことで、配布物を"
"いったんインストールするのと同じやり方で、独自の 'share' ディレクトリを消費す"
"るテストを実施することができます。\n"
"\n"
"このモジュールは 'File::ShareDir' に対して、テスト対象のインストール先やター"
"ゲットシステムに関わらず、最新バージョンのコンテンツを参照できるようにしま"
"す。\n"
"*注意:* このモジュールは 'new' スタイルの共有ディレクトリを作成する機能のみが"
"用意されているほか、古い File::ShareDirs との互換性はありません。\n"
"\n"
"このような理由から、 File::ShareDir 1.00 もしくはそれ以降のバージョンがインス"
"トールされていない限り、このモジュールを利用することはできません。"

#. leap/perl-Test-Harness/summary
msgid "Run Perl standard test scripts with statistics"
msgstr "統計情報付きで Perl の標準テストスクリプトを実行するモジュール"

#. leap/perl-Test-Harness/description
msgid ""
"Although, for historical reasons, the Test::Harness distribution takes its "
"name from this module it now exists only to provide TAP::Harness with an "
"interface that is somewhat backwards compatible with Test::Harness 2.xx. If "
"you're writing new code consider using TAP::Harness directly instead.\n"
"\n"
"Emulation is provided for 'runtests' and 'execute_tests' but the pluggable "
"'Straps' interface that previous versions of Test::Harness supported is not "
"reproduced here. Straps is now available as a stand alone module: Test::"
"Harness::Straps.\n"
"\n"
"See TAP::Parser, TAP::Harness for the main documentation for this "
"distribution."
msgstr ""
"歴史的な経緯により、 Test::Harness の配布物にはこのモジュールからくる名前が付"
"けられていますが、現在は Test::Harbess バージョン 2.xx と比較的互換性のあるイ"
"ンターフェイスを提供する TAP::Harness のみが提供されています。新しくコードを"
"作成する場合は、 TAP::Harness を直接お使いください。\n"
"\n"
"'runtests', 'execute_tests' に対してはエミュレーションが提供されますが、以前"
"のバージョンの Test::Harness でサポートしていたプラグイン可能な 'Straps' イン"
"ターフェイスについては、現在は提供されておらず、個別のモジュールとして提供さ"
"れています。詳しくは Test::Harness::Straps をご覧ください。\n"
"\n"
"この配布物に関する主なドキュメンテーションについては、 TAP::Parser および "
"TAP::Harness をご覧ください。"

#. leap/perl-Test-HasVersion/summary
msgid "Check Perl modules have version numbers"
msgstr "Perl モジュールにバージョン番号があるかどうかのチェック"

#. leap/perl-Test-HasVersion/description
msgid ""
"Do you wanna check that every one of your Perl modules in a distribution has "
"a version number? You wanna make sure you don't forget the brand new modules "
"you just added? Well, that's the module you have been looking for. Use it!\n"
"\n"
"Do you wanna check someone else's distribution to make sure the author have "
"not committed the sin of leaving Perl modules without a version that can be "
"used to tell if you have this or that feature? 'Test::HasVersion' is also "
"for you, nasty little fellow.\n"
"\n"
"There's a script _test_version_ which is installed with this distribution. "
"You may invoke it from within the root directory of a distribution you just "
"unpacked, and it will check every _.pm_ file in the directory and under _lib/"
"_ (if any).\n"
"\n"
"  $ test_version\n"
"\n"
"You may also provide directories and files as arguments.\n"
"\n"
"  $ test_version *.pm lib/ inc/   $ test_version .\n"
"\n"
"(Be warned that many Perl modules in a _t/_ directory do not receive "
"versions because they are not used outside the distribution.)\n"
"\n"
"Ok. That's not a very useful module by now. But it will be. Wait for the "
"upcoming releases."
msgstr ""
"開発中の Perl モジュールにバージョン番号が付いているかどうかを確認したい、と"
"思ったことはありませんか？まったく新しく作成したばかりのモジュールでも、これ"
"を忘れずに実施したいと思いませんか？もしもそうであれば、このモジュールこそが"
"お求めのモジュールです。ぜひお使いください！\n"
"\n"
"また、誰かの配布物のモジュールや機能を使用する際、バージョン番号のない Perl "
"モジュールを残したままのものがあるかどうかを確認したい、と思ったことはありま"
"せんか？ 'Test::HasVersion' ではこのような厄介な仕組みにも対応することができ"
"ます。\n"
"\n"
"このモジュールの配布物の中には、 _test_version_ というスクリプトがあります。"
"これは配布物を展開したディレクトリのルート内から実行することができ、各 _.pm_ "
"ファイルと _lib/_ ディレクトリ内 (もしあれば) をチェックします。\n"
"\n"
"  $ test_version\n"
"\n"
"パラメータとしてディレクトリやファイルを指定することもできます。\n"
"\n"
"  $ test_version *.pm lib/ inc/   $ test_version .\n"
"\n"
"(_t/_ ディレクトリ内には多数の Perl モジュールがありますが、これらは配布物外"
"では使用されないものであるため、バージョンが設定されていません)\n"
"\n"
"ご存じのとおり、現時点ではあまり便利なモジュールではありません。将来のリリー"
"スにご期待ください。"

#. leap/perl-Test-Identity/summary
msgid "Assert the Referential Identity of a Reference"
msgstr "参照の参照識別子のアサーション"

#. leap/perl-Test-Identity/description
msgid ""
"This module provides a single testing function, 'identical'. It asserts that "
"a given reference is as expected; that is, it either refers to the same "
"object or is 'undef'. It is similar to 'Test::More::is' except that it uses "
"'refaddr', ensuring that it behaves correctly even if the references under "
"test are objects that overload stringification or numification.\n"
"\n"
"It also provides better diagnostics if the test fails:\n"
"\n"
" $ perl -MTest::More=tests,1 -MTest::Identity -e'identical [], {}'  1..1  "
"not ok 1      \n"
"\n"
" $ perl -MTest::More=tests,1 -MTest::Identity -e'identical [], []'  1..1  "
"not ok 1"
msgstr ""
"このモジュールは単一のテスト関数 'identical' を提供します。これは、指定した参"
"照が期待通りのものであることを確認するもので、同じオブジェクトへの参照か、 "
"'undef' であるかを確認します。 'test::More::is' に似た仕組みですが、このモ"
"ジュールは 'refaddr' を使用する点が異なります。また、テスト対象の参照が文字列"
"化や数値化をオーバーロードするようなオブジェクトであっても動作します。\n"
"\n"
"また、テストが失敗した際にはよりよい分析メッセージを表示します:\n"
"\n"
" $ perl -MTest::More=tests,1 -MTest::Identity -e'identical [], {}'  1..1  "
"not ok 1      \n"
"\n"
" $ perl -MTest::More=tests,1 -MTest::Identity -e'identical [], []'  1..1  "
"not ok 1"

#. leap/perl-Test-InDistDir/summary
msgid "test environment setup for development with IDE"
msgstr "IDE で開発する際のテスト環境のセットアップ"

#. leap/perl-Test-InDistDir/description
msgid ""
"This module helps run test scripts in IDEs like Komodo.\n"
"\n"
"When running test scripts in an IDE i have to set up a project file defining "
"the dist dir to run tests in and a lib dir to load additional modules from. "
"Often I didn't feel like doing that, especially when i only wanted to do a "
"small patch to a dist. In those cases i added a BEGIN block to mangle the "
"environment for me.\n"
"\n"
"This module basically is that BEGIN block. It automatically moves up one "
"directory when it cannot see the test script in \"t/$scriptname\" and "
"includes 'lib' in @INC when there's no blib present. That way the test ends "
"up with almost the same environment it'd get from EUMM/prove/etc., even when "
"it's actually run inside the t/ directory.\n"
"\n"
"At the same time it will still function correctly when called by EUMM/prove/"
"etc., since it does not change the environment in those cases."
msgstr ""
"このモジュールは Komodo のような IDE 内でテストスクリプトを動作させるためのモ"
"ジュールです。\n"
"\n"
"IDE 内でテストスクリプトを実行する際、テストを実行する際の dist ディレクトリ"
"や追加のモジュールを読み込む lib ディレクトリなどを定義するプロジェクトファイ"
"ルを設定しなければなりません。このような作業は、配布物にちょっとしたパッチを"
"適用したいだけのような場合、面倒なものです。この場合、私は BEGIN ブロックを追"
"加して私専用の環境を作っています。\n"
"\n"
"このモジュールは基本的には BEGIN ブロックそのものです。 \"t/$scriptname\" 内"
"にテストスクリプトが見つからない場合、自動的に 1 階層だけ上位のディレクトリに"
"移動するほか、 blib が存在しない場合は @INC 内に 'lib' を含めるようになりま"
"す。このような方法で、実際には t/ ディレクトリ内で実行しているにも関わらず、 "
"EUMM/prove などから取得するのとほぼ同じ環境を構築することができます。\n"
"\n"
"もちろん EUMM/prove などから呼び出した場合も、環境はなにも変更されていないた"
"め、問題なく動作します。"

#. leap/perl-Test-Inter/summary
msgid "Framework for More Readable Interactive Test Scripts"
msgstr "よりわかりやすい対話テストスクリプトのためのフレームワーク"

#. leap/perl-Test-Inter/description
msgid ""
"This is another framework for writing test scripts. Much of the syntax is "
"loosely inspired by Test::More, and Test::Inter has most of it's "
"functionality, but it is not a drop-in replacement.\n"
"\n"
"Test::More (and other existing test frameworks) suffer from two weaknesses, "
"both of which have prevented me from ever using them:\n"
"\n"
"   None offer the ability to access specific tests in    a reasonably "
"interactive fashion, primarily for    debugging purposes\n"
"\n"
"   None offer the ability to write the tests in    whatever format would "
"make the tests the most    readable\n"
"\n"
"The way I write and use test scripts, existing Test::* modules are not "
"nearly as useful as they could be."
msgstr ""
"これはテストスクリプトを記述するためのもう 1 つのフレームワークです。多くの文"
"法は Test::More を参考にしていて、機能面のほとんどを実装していますが、そのま"
"ま置き換えで使用できるほどではありません。\n"
"\n"
"Test::More (およびその他の既存のテストフレームワーク) には下記の 2 つの弱点が"
"あり、私自身が今まで使ってこなかった理由でもあります:\n"
"\n"
"    主にデバッグ目的で使用する合理的な対話処理で、特定のテストにアクセスする"
"機能が提供されていない\n"
"\n"
"    テストを最も読みやすくなるような形式で作成する機能が提供されていない\n"
"\n"
"このような理由から、私がテストを作成して利用する際、既存の Test::* モジュール"
"が使い物にならないと判断しています。"

#. leap/perl-Test-JSON/summary
msgid "Test JSON data"
msgstr "JSON データのテスト"

#. leap/perl-Test-JSON/description
msgid ""
"JavaScript Object Notation (JSON) is a lightweight data interchange format. "
"the Test::JSON manpage makes it easy to verify that you have built valid "
"JSON and that it matches your expected output.\n"
"\n"
"See the http://www.json.org/ manpage for more information."
msgstr ""
"JavaScript Object Notation (JSON) は軽量なデータ交換形式です。 Test::JSON "
"は、お使いのスクリプトが正しい JSON 形式を出力しているかや、その JSON が期待"
"通りの出力になっているのかを検証することができるモジュールです。\n"
"\n"
"詳しくは http://www.json.org/ をお読みください。"

#. leap/perl-Test-LWP-UserAgent/summary
msgid "LWP::UserAgent suitable for simulating and testing network calls"
msgstr "ネットワークコールを擬似してテストするための LWP::UserAgent"

#. leap/perl-Test-LWP-UserAgent/description
msgid ""
"This module is a subclass of LWP::UserAgent which overrides a few key low-"
"level methods that are concerned with actually sending your request over the "
"network, allowing an interception of that request and simulating a "
"particular response. This greatly facilitates testing of networking client "
"code where the server follows a known protocol.\n"
"\n"
"The synopsis describes a typical case where you want to test how your "
"application reacts to various responses from the server. This module will "
"let you send back various responses depending on the request, without having "
"to set up a real server to test against. This can be invaluable when you "
"need to test edge cases or error conditions that are not normally returned "
"from the server.\n"
"\n"
"There are a lot of different ways you can set up the response mappings, and "
"hook into this module; see the documentation for the individual interface "
"methods.\n"
"\n"
"You can use a PSGI app to handle the requests - see _examples/call_psgi.t_ "
"in this distribution, and also register_psgi below.\n"
"\n"
"OR, you can route some or all requests through the network as normal, but "
"still gain the hooks provided by this class to test what was sent and "
"received:\n"
"\n"
"    my $useragent = Test::LWP::UserAgent->new(network_fallback => 1);\n"
"\n"
"or:\n"
"\n"
"    $useragent->map_network_response(qr/real.network.host/);\n"
"\n"
"    \n"
"\n"
"         is(         $useragent->last_useragent->timeout,         "
"180,         'timeout was overridden properly',     );     "
"is(         $useragent->last_http_request_sent->uri,         'uri my code "
"should have constructed',     );     is(         $useragent-"
">last_http_response_received->code,         '200',         'I should have "
"gotten an OK response',     );"
msgstr ""
"このモジュールは LWP::UserAgent のサブクラスで、実際にネットワークを介してリ"
"クエストを送信するような主要な低レベルのメソッドに対してオーバーライドを行な"
"うことで、リクエストの送信を傍受し、特定の応答を擬似します。これにより、サー"
"バ側が既知のプロトコルを使用している場合、クライアント側のネットワークコード"
"のテストを非常にやりやすくすることができます。\n"
"\n"
"synopsis には、アプリケーションがサーバからの様々な応答に反応する際の典型的な"
"テストケースが示されています。このモジュールは、テスト先となる実際のサーバを"
"用意することなく、要求に応じて様々な応答を返すことができます。このモジュール"
"は、非常にまれなケースをテストしたり、通常はサーバから返されないようなエラー"
"をテストしたりしたい場合には、非常に価値のあるものになります。\n"
"\n"
"応答は様々な方法で設定することができますし、モジュール内のフックを設定するこ"
"ともできます。個別のインターフェイスメソッドについて、詳しくはドキュメンテー"
"ションをお読みください。\n"
"\n"
"要求を処理する際、 PSGI アプリケーションを使用することもできます。詳しくは配"
"布物内の _examples/call_psgi.t_ および /register_psgi をご覧ください。\n"
"\n"
"また、要求のうちのいくつか、もしくはそのすべてを通常通りネットワーク経由で送"
"信することもできます。この場合、このクラスが提供するフックを利用して、送受信"
"されるデータをテストすることもできます:\n"
"\n"
"    my $useragent = Test::LWP::UserAgent->new(network_fallback => 1);\n"
"\n"
"もしくは、下記のようにすることもできます:\n"
"\n"
"    $useragent->map_network_response(qr/real.network.host/);\n"
"\n"
"    \n"
"\n"
"         is(         $useragent->last_useragent->timeout,         "
"180,         'timeout was overridden properly',     );     "
"is(         $useragent->last_http_request_sent->uri,         'uri my code "
"should have constructed',     );     is(         $useragent-"
">last_http_response_received->code,         '200',         'I should have "
"gotten an OK response',     );"

#. leap/perl-Test-LeakTrace/summary
msgid "Traces memory leaks"
msgstr "メモリリークの追跡"

#. leap/perl-Test-LeakTrace/description
msgid ""
"'Test::LeakTrace' provides several functions that trace memory leaks. This "
"module scans arenas, the memory allocation system, so it can detect any "
"leaked SVs in given blocks. \n"
"*Leaked SVs* are SVs which are not released after the end of the scope they "
"have been created. These SVs include global variables and internal caches. "
"For example, if you call a method in a tracing block, perl might prepare a "
"cache for the method. Thus, to trace true leaks, 'no_leaks_ok()' and "
"'leaks_cmp_ok()' executes a block more than once."
msgstr ""
"'Test::LeakTrace' はメモリリークを追跡するためのいくつかの関数を提供します。"
"このモジュールは、メモリ割り当てシステムが割り当てた領域をチェックし、指定さ"
"れたブロックに対してリークが発生しているかどうかを確認します。\n"
"*Leaked SV* は、そのメモリ領域が作成されたスコープが終了した時点で、それが解"
"放されていないことを示しています。これらの SV には、グローバル変数や内部"
"キャッシュなども含まれます。たとえばトレーシングブロック内でメソッドを呼び出"
"すことで、 Perl はメソッドに対するキャッシュを作成します。そのため、本当に"
"リークしているかどうかを確かめるため、 'no_leaks_ok()' と 'leaks_cmp_ok()' は"
"ブロックを 1 回以上実行します。"

#. leap/perl-Test-LectroTest/summary
msgid "Easy, automatic, specification-based tests"
msgstr "簡単で自動化された仕様ベースのテスト"

#. leap/perl-Test-LectroTest/description
msgid ""
"This module provides a simple (yet full featured) interface to LectroTest, "
"an automated, specification-based testing system for Perl. To use it, "
"declare properties that specify the expected behavior of your software. "
"LectroTest then checks your software to see whether those properties hold.\n"
"\n"
"Declare properties using the 'Property' function, which takes a block of "
"code and promotes it to a Test::LectroTest::Property:\n"
"\n"
"    Property {                  MyModule::my_function( $x, $y ) >= 0;     }, "
"name => \"my_function output is non-negative\" ;\n"
"\n"
"The first part of the block must contain a generator-binding declaration. "
"For example:\n"
"\n"
"        \n"
"\n"
"(Note the special bracketing, which is required.) This particular binding "
"says, \"For all integers _x_ and _y_.\" (By the way, you aren't limited to "
"integers. LectroTest also gives you booleans, strings, lists, hashes, and "
"more, and it lets you define your own generator types. See Test::LectroTest::"
"Generator for more.)\n"
"\n"
"The second part of the block is simply a snippet of code that makes use of "
"the variables we bound earlier to test whether a property holds for the "
"piece of software we are testing:\n"
"\n"
"        MyModule::my_function( $x, $y ) >= 0;\n"
"\n"
"In this case, it asserts that 'MyModule::my_function($x,$y)' returns a non-"
"negative result. (Yes, '$x' and '$y' refer to the same _x_ and _y_ that we "
"bound to the generators earlier. LectroTest automagically loads these "
"lexically bound Perl variables with values behind the scenes.) \n"
"*Note:* If you want to use testing assertions like 'ok' from Test::Simple or "
"'is', 'like', or 'cmp_ok' from Test::More (and the related family of Test::"
"Builder-based testing modules), see Test::LectroTest::Compat, which lets you "
"mix and match LectroTest with these modules.\n"
"\n"
"Finally, we give the whole Property a name, in this case \"my_function "
"output is non-negative.\" It's a good idea to use a meaningful name because "
"LectroTest refers to properties by name in its output.\n"
"\n"
"Let's take a look at the finished property specification:\n"
"\n"
"    Property {                  MyModule::my_function( $x, $y ) >= 0;     }, "
"name => \"my_function output is non-negative\" ;\n"
"\n"
"It says, \"For all integers _x_ and _y_, we assert that my_function's output "
"is non-negative.\"\n"
"\n"
"To check whether this property holds, simply put it in a Perl program that "
"uses the Test::LectroTest module. (See the SYNOPSIS for an example.) When "
"you run the program, LectroTest will load the property (and any others in "
"the file) and check it by running random trials against the software you're "
"testing. \n"
"*Note:* If you want to place LectroTest property checks into a test plan "
"managed by Test::Builder-based modules such as Test::Simple or Test::More, "
"see Test::LectroTest::Compat.\n"
"\n"
"If LectroTest is able to \"break\" your software during the property check, "
"it will emit a counterexample to your property's assertions and stop. You "
"can plug the counterexample back into your software to debug the problem. "
"(You might also want to add the counterexample to a list of regression "
"tests.)\n"
"\n"
"A successful LectroTest looks like this:\n"
"\n"
"  1..1   ok 1 - 'my_function output is non-negative' (1000 attempts)\n"
"\n"
"On the other hand, if you're not so lucky:\n"
"\n"
"  1..1   not ok 1 - 'my_function output is non-negative' falsified \\       "
"in 324 attempts"
msgstr ""
"このモジュールは、自動化された仕様ベースのテストシステムを Perl に提供する、 "
"LectroTest に対するシンプルな (かつ完全機能の) インターフェイスです。このモ"
"ジュールを使用するには、まずソフトウエアの動作を規定するプロパティを設定する"
"必要があります。 LectroTest ではその内容をチェックして、ソフトウエアがそれら"
"のプロパティと合致するかどうかを確認します。\n"
"\n"
"プロパティ情報は 'Property' 関数を使用して定義します。このパラメータはコード"
"のブロックを指定するもので、これを Test::LectroTest::Property にプロモートし"
"ます:\n"
"\n"
"    Property {                  MyModule::my_function( $x, $y ) >= 0;     }, "
"name => \"my_function output is non-negative\" ;\n"
"\n"
"ブロックの最初のパートには、ジェネレータバインディングの定義を設定しなければ"
"なりません。たとえば下記のようになります:\n"
"\n"
"        \n"
"\n"
"(特殊なブラケット処理 (必須です) に着目してください) 。この特殊なバインディン"
"グは \"全ての整数 _x_ および _y_\" を意味するものです。なお整数に限ったもので"
"はありません。 LectroTest では boolean, string, リスト, ハッシュのほか、独自"
"のジェネレータタイプに対応しています。詳しくは Test::LectroTest::Generator を"
"お読みください。\n"
"\n"
"ブロックの 2 番目のパートは、前述のバインドした変数を利用して、テスト対象のソ"
"フトウエアに対しプロパティが保持されているかどうかをテストするコードスニペッ"
"トを指定します:\n"
"\n"
"        MyModule::my_function( $x, $y ) >= 0;\n"
"\n"
"この場合、 'MyModule::my_function($x,$y)' が非負の結果を返すことをテストして"
"います (なお、 '$x' と '$y' は前述のジェ値ルータの _x_ および _y_ を表わしま"
"す。 LectroTest では言語としてバインドされた Perl 変数を自動的に読み込みま"
"す) 。\n"
"*注意:* Test::Simple の 'ok' や Test::More の 'is', 'like', 'cmp_ok' (および "
"Test::Builder ベースのテストモジュール) を使用したテストケースを作成する場合"
"は、 Test::LectroTest::Compat をお読みください。ここには LectroTest とこれら"
"のモジュールを併用および混在させる際の説明が書かれています。\n"
"\n"
"最後に、プロパティ全体に対して名前を設定しています。この例では \"my_function "
"output is non-negative.\" という名前になっています。 LectroTest では出力時に"
"プロパティを名前で参照するため、わかりやすい名前を付けておくことをお勧めしま"
"す。\n"
"\n"
"ここまでの説明で作成できたプロパティ仕様をご覧ください:\n"
"\n"
"    Property {                  MyModule::my_function( $x, $y ) >= 0;     }, "
"name => \"my_function output is non-negative\" ;\n"
"\n"
"このテストでは、 \"全ての整数 _x_ および _y_ に対して、 my_function の出力が"
"非負でなければならないものとする\" ことを表わしています。\n"
"\n"
"このプロパティが保持されているかどうかを確認するには、単純に Test::"
"LectroTest モジュールを使用する Perl のプログラムを配置してください (使用例に"
"ついては SYNOPSIS をご覧ください) 。プログラムを実行すると、 LectroTest \n"
"プロパティ (およびファイル内のその他のパーツ) を読み込んで、テスト対象のソフ"
"トウエアに対してランダムな試行を行ないます。\n"
"*注意:* LectroTest プロパティチェックを、 Test::Simple や Test::More などの "
"Test::Builder ベースのモジュールで管理されるテストプラン内に配置する場合は、 "
"Test::LectroTest::Compat をご覧ください。\n"
"\n"
"LectroTest がプロパティチェックの際にお使いのソフトウエアを \"破壊\" できる場"
"合は、プロパティのテスト内容に対する反例を発信して停止します。これにより、反"
"例の内容を用いてソフトウエアの問題をデバッグすることができます (回帰テストの"
"ために反例を追加してもかまいません) 。\n"
"\n"
"LectroTest が成功すると、下記のように出力されます:\n"
"\n"
"  1..1   ok 1 - 'my_function output is non-negative' (1000 attempts)\n"
"\n"
"失敗した場合は下記のようになります:\n"
"\n"
"  1..1   not ok 1 - 'my_function output is non-negative' falsified \\       "
"in 324 attempts"

#. leap/perl-Test-LongString/summary
msgid "tests strings for equality, with more helpful failures"
msgstr "文字列の一致のテストおよび追加の支援機能"

#. leap/perl-Test-LongString/description
msgid ""
"This module provides some drop-in replacements for the string comparison "
"functions of the Test::More manpage, but which are more suitable when you "
"test against long strings. If you've ever had to search for text in a multi-"
"line string like an HTML document, or find specific items in binary data, "
"this is the module for you."
msgstr ""
"このモジュールは Test::More の文字列比較関数に対する直接的な置き換えをいくつ"
"か提供するものですが、特に長い文字列を比較するのに適した仕組みです。 HTML の"
"文書やバイナリデータ内の特定データなど、複数行にわたるテキスト内で検索を行な"
"わなければならなかった場合には、このモジュールが便利でしょう。"

#. leap/perl-Test-Manifest/summary
msgid "Interact with a t/test_manifest file"
msgstr "t/test_manifest ファイルの処理"

#. leap/perl-Test-Manifest/description
msgid ""
"'Test::Harness' assumes that you want to run all of the _.t_ files in the _t/"
"_ directory in ASCII-betical order during 'make test' or './Build test' "
"unless you say otherwise. This leads to some interesting naming schemes for "
"test files to get them in the desired order. These interesting names ossify "
"when they get into source control, and get even more interesting as more "
"tests show up.\n"
"\n"
"'Test::Manifest' overrides the default test file order. Instead of running "
"all of the _t/*.t_ files in ASCII-betical order, it looks in the _t/"
"test_manifest_ file to find out which tests you want to run and the order in "
"which you want to run them. It constructs the right value for the build "
"system to do the right thing.\n"
"\n"
"In _t/test_manifest_, simply list the tests that you want to run. Their "
"order in the file is the order in which they run. You can comment lines with "
"a '#', just like in Perl, and 'Test::Manifest' will strip leading and "
"trailing whitespace from each line. It also checks that the specified file "
"is actually in the _t/_ directory. If the file does not exist, it does not "
"put its name in the list of test files to run and it will issue a warning.\n"
"\n"
"Optionally, you can add a number after the test name in test_manifest to "
"define sets of tests. See 'get_t_files' for more information."
msgstr ""
"Test::Harness は、特に指定しなければ、 make test 時に t/ ディレクトリ内にある"
"すべての .t ファイルをアルファベット順に実行することを前提にしています。これ"
"により、テストファイルに対する名前付け方法を調整することで、テスト順序を制御"
"できることになります。このような方式により、ソースコードが制御下にあっても名"
"前を固定することができ、テスト順序も固定できることになります。\n"
"\n"
"Test::Manifest は Makefile 内の test_via_harness を置き換えることで、既定の順"
"序を上書きすることができます。 t/*.t ファイルをアルファベット順に実行する代わ"
"りに t/test_manifest ファイルを参照し、テストの実行可否と順序を指定することが"
"できるようになります。 MakeMaker に対しては正しい値を指定することになり、すべ"
"てがうまく動作するようになります。\n"
"\n"
"_t/test_manifest_ には、実行したいテストの一覧を記述します。ファイル内の順序"
"は実行の順序そのものです。 Perl と同様に、行頭を '#' で始めればコメントを記述"
"することができるほか、 'Test::Manifest' では各行の行頭および行末の空白を削除"
"します。このほか、指定したファイルが実際に _t/_ ディレクトリ内に存在するかど"
"うかもチェックします。ファイルが存在しない場合、テストファイル内の名前として"
"は出力されず、警告メッセージが表示されます。\n"
"\n"
"このほか、 test_manifest 内でテスト名の後に番号を追加することもできます。詳し"
"くは 'get_t_files' をお読みください。"

#. leap/perl-Test-Memory-Cycle/summary
#. leap/perl-Test-Memory-Cycle/description
msgid "Check for memory leaks and circular memory references"
msgstr "メモリリークと循環参照のチェック"

#. leap/perl-Test-Mock-Guard/summary
msgid "Simple mock test library using RAII."
msgstr "RAII を使用するシンプルなモックテストライブラリ"

#. leap/perl-Test-Mock-Guard/description
msgid ""
"Test::Mock::Guard is mock test library using RAII. This module is able to "
"change method behavior by each scope. See SYNOPSIS's sample code."
msgstr ""
"Test::Mock::Guard はRAII を使用するシンプルなモックテストライブラリです。この"
"モジュールはメソッドの動作をスコープごとに変更することができます。使用例につ"
"いては SYNOPSYS をお読みください。"

#. leap/perl-Test-Mock-LWP/summary
msgid "Easy mocking of LWP packages"
msgstr "LWP パッケージの簡易モッキング"

#. leap/perl-Test-Mock-LWP/description
msgid ""
"This package arises from duplicating the same code to mock LWP et al in "
"several different modules I've written. This version is very minimalist, but "
"works for my needs so far. I'm very open to new suggestions and improvements."
msgstr ""
"このパッケージは、今まで私が作成してきた LWP 等を擬似するための様々なコードか"
"ら作られたパッケージです。このバージョンは非常に限られたものですが、私自身の"
"要件には十分なものです。提案や改善要求などがあれば歓迎します。"

#. leap/perl-Test-Mock-Time/summary
msgid "Deterministic time & timers for event loop tests"
msgstr "イベントループテスト用疑似時刻設定およびタイマー"

#. leap/perl-Test-Mock-Time/description
msgid ""
"This module replaces actual time with simulated time everywhere (core "
"time(), Time::HiRes, EV, AnyEvent with EV, Mojolicious, …) and provide a way "
"to write deterministic tests for event loop based applications with "
"timers. \n"
"*IMPORTANT!* This module *must* be loaded by your script/app/test before "
"other related modules (Time::HiRes, Mojolicious, EV, etc.)."
msgstr ""
"このモジュールは、様々な状況下で実際の時刻を疑似の時刻に置き換えることができ"
"る仕組みです。これには例えば、 Perl 標準の time() のほか、 Time::HiRes, EV, "
"EV 付き AnyEvent, Mojolicious などが含まれます。これにより、タイマーを利用す"
"るイベントループベースのアプリケーションで、状況に左右されない安定したテスト"
"を実現します。\n"
"*注意* このモジュールは、関連するモジュール (Time::HiRes, Mojolicious, EV な"
"ど) が読み込まれる前に、スクリプトやアプリ、テストなどで読み込んでおかなけれ"
"ばなりません。"

#. leap/perl-Test-MockModule/summary
msgid "Override subroutines in a module for unit testing"
msgstr ""
"単体テスト向けにモジュール内でサブルーチンをオーバーライドするモジュール"

#. leap/perl-Test-MockModule/description
msgid ""
"'Test::MockModule' lets you temporarily redefine subroutines in other "
"packages for the purposes of unit testing.\n"
"\n"
"A 'Test::MockModule' object is set up to mock subroutines for a given "
"module. The object remembers the original subroutine so it can be easily "
"restored. This happens automatically when all MockModule objects for the "
"given module go out of scope, or when you 'unmock()' the subroutine."
msgstr ""
"'Test::MockModule' は単体テストを実施する目的で、他のパッケージ内のサブルーチ"
"ンを一時的に再定義する機能を提供します。\n"
"\n"
"'Test::MockModule' のオブジェクトは、指定したモジュールに対して擬似サブルーチ"
"ンを設定します。オブジェクト側では元のサブルーチンを記憶しているため、元に戻"
"すのも簡単です。これは指定したモジュールに対するすべての MockModule オブジェ"
"クトがスコープ外に外れた時や、サブルーチンを 'unmock()' したりした場合に自動"
"的に行なわれます。"

#. leap/perl-Test-MockObject/summary
msgid "Perl extension for emulating troublesome interfaces"
msgstr "問題のあるインターフェイスを擬似するための Perl 拡張"

#. leap/perl-Test-MockObject/description
msgid ""
"It's a simple program that doesn't use any other modules, and those are easy "
"to test. More often, testing a program completely means faking up input to "
"another module, trying to coax the right output from something you're not "
"supposed to be testing anyway.\n"
"\n"
"Testing is a lot easier when you can control the entire environment. With "
"Test::MockObject, you can get a lot closer.\n"
"\n"
"Test::MockObject allows you to create objects that conform to particular "
"interfaces with very little code. You don't have to reimplement the "
"behavior, just the input and the output."
msgstr ""
"これは全く他のモジュールを利用しないサンプルプログラムで、テストを行ないやす"
"い仕組みです。また、プログラムのテストは入力を他のモジュールに対して完全に偽"
"造することを意味するため、とにかくテストされていないと思われるものから、正し"
"い出力を丸め込もうとすることでもあります。\n"
"\n"
"テストは環境全体を制御したい場合には非常に簡単です。 Test::MockObject を利用"
"すると、より簡単になります。\n"
"\n"
"Test::MockObject を利用することで、非常に少ないコードで特定のインターフェイス"
"に準拠するオブジェクトを作成することができるようになります。動作を再実装する"
"必要はなく、入力と出力だけを設定するだけです。"

#. leap/perl-Test-MockRandom/summary
msgid "Replaces random number generation with non-random number generation"
msgstr "乱数生成を非乱数生成で置き換えるモジュール"

#. leap/perl-Test-MockRandom/description
msgid ""
"This perhaps ridiculous-seeming module was created to test routines that "
"manipulate random numbers by providing a known output from 'rand'. Given a "
"list of seeds with 'srand', it will return each in turn. After seeded random "
"numbers are exhausted, it will always return 0. Seed numbers must be of a "
"form that meets the expected output from 'rand' as called with no arguments "
"-- i.e. they must be between 0 (inclusive) and 1 (exclusive). In order to "
"facilitate generating and testing a nearly-one number, this module exports "
"the function 'oneish', which returns a number just fractionally less than "
"one.\n"
"\n"
"Depending on how this module is called with 'use', it will export 'rand' to "
"a specified package (e.g. a class being tested) effectively overriding and "
"intercepting calls in that package to the built-in 'rand'. It can also "
"override 'rand' in the current package or even globally. In all of these "
"cases, it also exports 'srand' and 'oneish' to the current package in order "
"to control the output of 'rand'. See USAGE for details.\n"
"\n"
"Alternatively, this module can be used to generate objects, with each object "
"maintaining its own distinct seed array."
msgstr ""
"これはおそらく馬鹿げて見えるモジュールと思われがちですが、 'rand' が返す値を"
"既知のものにすることで、サブルーチンのテストを行なうモジュールです。 'srand' "
"に対して乱数の種のリストを与えると、それらが順番に返されます。種がなくなる"
"と、常に 0 が返されるようになります。種となる数値は、 'rans' をパラメータ無し"
"で呼び出した場合の範囲に入っていなければなりません。具体的には、 0 (含む) か"
"ら 1 (含まない) の範囲で指定します。ほぼ 1 の値を生成したりテストしたりしたい"
"場合に備えて、このモジュールでは 'oneish' という関数も公開しています。こちら"
"は小数点以下で 1 より小さい値を返します。\n"
"\n"
"このモジュールを 'use' で呼び出すと、指定したパッケージ (つまりテスト対象の"
"パッケージ) 内に 'rand' を公開するようになります。これにより、内蔵の 'rand' "
"を効率的に上書きし、割り込む仕組みを提供しています。また、現在のパッケージだ"
"けでなく、グローバルに 'rand' を上書きすることもできます。いずれの場合であっ"
"ても、 'srand' と 'oneish' は現在のパッケージ内に公開され、 'rand' の出力を制"
"御するようになります。詳しくはUSAGE をお読みください。\n"
"\n"
"このほか、このモジュールはオブジェクトを生成する際に使用することもできます。"
"各オブジェクトには独自の乱数種を持つことになります。"

#. leap/perl-Test-MockTime/summary
msgid "Replaces actual time with simulated time"
msgstr "実際の時間を擬似的な時間に置き換えるモジュール"

#. leap/perl-Test-MockTime/description
msgid ""
"This module was created to enable test suites to test code at specific "
"points in time. Specifically it overrides localtime, gmtime and time at "
"compile time and then relies on the user supplying a mock time via "
"set_relative_time, set_absolute_time or set_fixed_time to alter future calls "
"to gmtime,time or localtime."
msgstr ""
"このモジュールはテストスイートに対して、特定の時間を指定できるようにするもの"
"です。特に localtime, gmtime, time をコンパイル時にオーバーライドし、ユーザが"
"指定した擬似時間を set_relative_time, set_absolute_time, set_fixed_time を介"
"して設定し、それ以降の localtime, gmtime, time での返り値とします。"

#. leap/perl-Test-Mojo-Pg/summary
msgid "Helper for Dealing with Pg During Tests"
msgstr "テスト中に Pg を扱うためのヘルパー"

#. leap/perl-Test-Mojo-Pg/description
msgid ""
"Test::Mojo::Pg makes the creation and removal of a transitory database "
"during testing when using Mojo::Pg. This is useful when every test should "
"work from a 'clean' database."
msgstr ""
"Test::Mojo::Pg は Mojo::Pg を使用する際に、一過性のデータベースを作成して削除"
"する機能を提供します。これは 'クリーンな' データベースで動作させるべきテスト"
"で便利です。"

#. leap/perl-Test-More-UTF8/summary
#. leap/perl-Test-More-UTF8/description
msgid "Enhancing Test::More for UTF8-based projects"
msgstr "UTF-8 ベースのプロジェクトに対する Test::More の拡張"

#. leap/perl-Test-Most/summary
msgid "Most commonly needed test functions and features"
msgstr "最も必要とされるテスト関数と機能"

#. leap/perl-Test-Most/description
msgid ""
"Test::Most exists to reduce boilerplate and to make your testing life "
"easier. We provide \"one stop shopping\" for most commonly used testing "
"modules. In fact, we often require the latest versions so that you get bug "
"fixes through Test::Most and don't have to keep upgrading these modules "
"separately.\n"
"\n"
"This module provides you with the most commonly used testing functions, "
"along with automatically turning on strict and warning and gives you a bit "
"more fine-grained control over your test suite.\n"
"\n"
"    use Test::Most tests => 4, 'die';\n"
"\n"
"    ok 1, 'Normal calls to ok() should succeed';     is 2, 2, '... as should "
"all passing tests';     eq_or_diff [3], [4], '... but failing tests should "
"die';     ok 4, '... will never get to here';\n"
"\n"
"As you can see, the 'eq_or_diff' test will fail. Because 'die' is in the "
"import list, the test program will halt at that point.\n"
"\n"
"If you do not want strict and warnings enabled, you must explicitly disable "
"them. Thus, you must be explicit about what you want and no longer need to "
"worry about accidentally forgetting them.\n"
"\n"
"    use Test::Most tests => 4;     no strict;     no warnings;"
msgstr ""
"Test::Most は、よくあるお決まりのスクリプトの作成を避け、テストをよりやりやす"
"くするための仕組みです。このモジュールは、最もよく使われるテストモジュールに"
"対して \"ワンストップショッピング\" の仕組みを提供しています。事実、このモ"
"ジュール自身もしばしば Test::Most の最新のバージョンを利用してバグ修正を行"
"なっているため、これらのモジュールを個別にアップグレードし続ける必要もなく"
"なっています。\n"
"\n"
"このモジュールは最もよく使われるテスト関数を提供するほか、 strict や warning "
"を自動的に有効化して、テストスイートに対する制御をよりうまく調整できるように"
"なっています。\n"
"\n"
"    use Test::Most tests => 4, 'die';\n"
"\n"
"    ok 1, 'Normal calls to ok() should succeed';     is 2, 2, '... as should "
"all passing tests';     eq_or_diff [3], [4], '... but failing tests should "
"die';     ok 4, '... will never get to here';\n"
"\n"
"ご覧のとおり、 'eq_or_diff' テストが失敗しています。それはインポートリスト内"
"で 'die' しているためで、テストプログラムはその時点で停止しています。\n"
"\n"
"strict や warnings を有効化したくない場合は、それらは明示的に無効化することが"
"できます。そのため、有効化することを忘れてしまうようなこともありません。\n"
"\n"
"    use Test::Most tests => 4;     no strict;     no warnings;"

#. leap/perl-Test-Needs/summary
msgid "Skip tests when modules not available"
msgstr "モジュールが利用できない場合にテストを飛ばすモジュール"

#. leap/perl-Test-Needs/description
msgid ""
"Skip test scripts if modules are not available. The requested modules will "
"be loaded, and optionally have their versions checked. If the module is "
"missing, the test script will be skipped. Modules that are found but fail to "
"compile will exit with an error rather than skip.\n"
"\n"
"If used in a subtest, the remainder of the subtest will be skipped.\n"
"\n"
"Skipping will work even if some tests have already been run, or if a plan "
"has been declared.\n"
"\n"
"Versions are checked via a '$module->VERSION($wanted_version)' call. "
"Versions must be provided in a format that will be accepted. No extra "
"processing is done on them.\n"
"\n"
"If 'perl' is used as a module, the version is checked against the running "
"perl version ($]). The version can be specified as a number, dotted-decimal "
"string, v-string, or version object.\n"
"\n"
"If the 'RELEASE_TESTING' environment variable is set, the tests will fail "
"rather than skip. Subtests will be aborted, but the test script will "
"continue running after that point."
msgstr ""
"モジュールが利用できない場合はテストスクリプトを飛ばす機能を提供します。要求"
"されたモジュールは読み込もうとしますし、必要であればバージョンのチェックも行"
"ないます。モジュールが見つからない場合、テストスクリプトは実行されず飛ばされ"
"ます。モジュールは見つかるものの、コンパイルに失敗した場合は、飛ばされずエ"
"ラーとして終了します。\n"
"\n"
"サブテスト内でこれを使用した場合、残りのサブテストは実行されず飛ばされま"
"す。\n"
"\n"
"テストを飛ばす処理は、すでにいくつかのテストが実行されている場合にも動作しま"
"すし、プランが設定されていても動作します。\n"
"\n"
"バージョンは '$module->VERSION($wanted_version)' の呼び出しでチェックします。"
"バージョンは受け入れ可能な形式で提示されなければなりません。それ以外の処理は"
"行ないません。\n"
"\n"
"'perl' をモジュールとして使用した場合、バージョンチェックは実行されている "
"Perl のバージョンに対して行なわれます。バージョンは番号で指定できるほか、ドッ"
"トで区切った文字列や v-string, バージョンオブジェクトを利用することができま"
"す。\n"
"\n"
"また、 'RELEASE_TESTING' 環境変数が設定されている場合、テストは飛ばされず失敗"
"します。サブテストも中断されますが、テストスクリプトが実行中であった場合はそ"
"のままテストが続きます。"

#. leap/perl-Test-NoTabs/summary
msgid "Check the presence of tabs in your project"
msgstr "プロジェクト内にタブが存在しているかどうかのテスト"

#. leap/perl-Test-NoTabs/description
msgid ""
"This module scans your project/distribution for any perl files (scripts, "
"modules, etc) for the presence of tabs."
msgstr ""
"このモジュールは、タブの存在を確認するために、プロジェクトや配布物内の任意の "
"Perl ファイル (スクリプト、モジュールなど) を調査します。"

#. leap/perl-Test-NoWarnings/summary
msgid "Make sure you didn't emit any warnings while testing"
msgstr "テスト中にいかなる警告も表示していないことを確認するモジュール"

#. leap/perl-Test-NoWarnings/description
msgid ""
"In general, your tests shouldn't produce warnings. This modules causes any "
"warnings to be captured and stored. It automatically adds an extra test that "
"will run when your script ends to check that there were no warnings. If "
"there were any warings, the test will give a \"not ok\" and diagnostics of "
"where, when and what the warning was, including a stack trace of what was "
"going on when the it occurred.\n"
"\n"
"If some of your tests *are supposed to* produce warnings then you should be "
"capturing and checking them with the Test::Warn manpage, that way the Test::"
"NoWarnings manpage will not see them and so not complain.\n"
"\n"
"The test is run by an 'END' block in Test::NoWarnings. It will not be run "
"when any forked children exit."
msgstr ""
"一般的に、テスト内では警告を表示すべきではありません。このモジュールはすべて"
"の警告を取り込んで保存します。また、お使いのスクリプトが警告なしで終了したこ"
"とが確認されると、追加のテストを自動的に実行します。何らかの警告が表示された"
"場合、このテストは \"not ok\" を出力して警告の場所と時刻、および発生時のス"
"タックトレースをそれぞれ出力します。\n"
"\n"
"お使いのテストが警告を発する *可能性がある* 場合、 Test::Warn を利用してそれ"
"らを取り込んで保存しておくべきです。 Test::NoWarnings では、それらは表示され"
"ず、文句を言われることもありません。\n"
"\n"
"テストは Test::NoWarnings 内の 'END' ブロックで実行されます。何らかの fork さ"
"れた子プロセスが終了してしまった場合、これは実行されません。"

#. leap/perl-Test-Number-Delta/summary
msgid "Compare the difference between numbers against a given tolerance"
msgstr "指定した公差で数値の違いを比較するモジュール"

#. leap/perl-Test-Number-Delta/description
msgid ""
"At some point or another, most programmers find they need to compare "
"floating-point numbers for equality. The typical idiom is to test if the "
"absolute value of the difference of the numbers is within a desired "
"tolerance, usually called epsilon. This module provides such a function for "
"use with the Test::More manpage. Usage is similar to other test functions "
"described in the Test::More manpage. Semantically, the 'delta_within' "
"function replaces this kind of construct:\n"
"\n"
" ok ( abs($p - $q) < $epsilon, '$p is equal to $q' ) or      diag \"$p is "
"not equal to $q to within $epsilon\";\n"
"\n"
"While there's nothing wrong with that construct, it's painful to type it "
"repeatedly in a test script. This module does the same thing with a single "
"function call. The 'delta_ok' function is similar, but either uses a global "
"default value for epsilon or else calculates a 'relative' epsilon on the fly "
"so that epsilon is scaled automatically to the size of the arguments to "
"'delta_ok'. Both functions are exported automatically.\n"
"\n"
"Because checking floating-point equality is not always reliable, it is not "
"possible to check the 'equal to' boundary of 'less than or equal to "
"epsilon'. Therefore, Test::Number::Delta only compares if the absolute value "
"of the difference is *less than* epsilon (for equality tests) or\n"
"*greater than* epsilon (for inequality tests)."
msgstr ""
"何らかの時点で、多くのプログラマは小数点の数値を比較する必要にかられることが"
"あります。よくあるテストでは、差の絶対値が特定の範囲内にあるかどうか (ε) を"
"チェックしたりします。このモジュールはそのような機能を Test::More で利用する"
"ことができるようになるモジュールです。使用方法は Test::More にある他のテスト"
"機能と同様です。意味論的には、 \"delta_within' 関数は下記のような機能を提供し"
"ます:\n"
"\n"
" ok ( abs($p - $q) < $epsilon, '$p is equal to $q' ) or      diag \"$p is "
"not equal to $q to within $epsilon\";\n"
"\n"
"上記の例では、構造は何も悪くないものの、テストスクリプト内で繰り返し入力する"
"のは苦痛です。このモジュールは、上記のような仕組みを 1 つの関数呼び出しで実現"
"します。 'delta_ok' 関数も同様ですが、公差に対するグローバルな既定値を設定し"
"て使用するか、もしくはその場で '相対' 誤差を計算し、 'delta_ok' のパラメータ"
"サイズに自動的にスケールします。いずれの関数とも自動的に公開されます。\n"
"\n"
"浮動小数点のチェックは常に信頼できるものとは呼べないことから、 '公差が指定の"
"範囲内' ではなく '等しい' チェックは行なうことができません。そのため、 Test::"
"Number::Delta は、値の差が *指定よりも小さいかどうか* か、もしくは *指定より"
"も大きいかどうか* のみをテストすることができます。"

#. leap/perl-Test-Object/summary
msgid "Thoroughly testing objects via registered handlers"
msgstr "登録済みハンドラを介した大まかなテスト"

#. leap/perl-Test-Object/description
msgid ""
"In situations where you have deep trees of classes, there is a common "
"situation in which you test a module 4 or 5 subclasses down, which should "
"follow the correct behaviour of not just the subclass, but of all the parent "
"classes.\n"
"\n"
"This should be done to ensure that the implementation of a subclass has not "
"somehow \"broken\" the object's behaviour in a more general sense.\n"
"\n"
"'Test::Object' is a testing package designed to allow you to easily test "
"what you believe is a valid object against the expected behaviour of *all* "
"of the classes in its inheritance tree in one single call.\n"
"\n"
"To do this, you \"register\" tests (in the form of CODE or function "
"references) with 'Test::Object', with each test associated with a particular "
"class.\n"
"\n"
"When you call 'object_ok' in your test script, 'Test::Object' will check the "
"object against all registered tests. For each class that your object "
"responds to '$object->isa($class)' for, the appropriate testing function "
"will be called.\n"
"\n"
"Doing it this way allows adapter objects and other things that respond to "
"'isa' differently that the default to still be tested against the classes "
"that it is advertising itself as correctly.\n"
"\n"
"This also means that more than one test might be \"counted\" for each call "
"to 'object_ok'. You should account for this correctly in your expected test "
"count."
msgstr ""
"クラスが深いツリー構造になっている場合、 4 段階や 5 段階程度のサブクラスをテ"
"ストする場合、サブクラスだけではなくすべての親クラスに対する正しい動作に従う"
"必要があります。\n"
"\n"
"これはサブクラスの実装が、オブジェクトの動作という点で \"壊れて\" いないこと"
"を確認すべき個所です。\n"
"\n"
"'Test::Object' は単一の呼び出しで、継承ツリー内のすべてのクラスに対して、その"
"動作が期待通りのものであることを簡単にテストできるように設計されています。\n"
"\n"
"これを実行するには、 'Test::Object' でテスト (CODE 形式または関数の参照) を "
"\"登録\" する必要があります。このテストでは、特定のクラスに関連付ける必要があ"
"ります。\n"
"\n"
"テストスクリプト内で 'object_ok' を呼び出すと、 'Test::Object' はすべての登録"
"済みテストに対してオブジェクトをテストします。各クラスに対してオブジェクトは "
"'$object->isa($class)' に応答し、適切なテスト関数を呼び出します。\n"
"\n"
"このようにすることで、 'sa' に対して異なる応答をするアダプタオブジェクトなど"
"に対して、それ自体が正しく宣言されているクラスに対して、既定値をテストするよ"
"うになります。\n"
"\n"
"これにより、各コールに対して 1 つ以上のテストが \"カウント\" されることがあり"
"ます。テスト回数を確認しているような場合は、これを正しく扱う必要があります。"

#. leap/perl-Test-Output/summary
msgid "Utilities to test STDOUT and STDERR messages"
msgstr "STDOUT, STDERR のメッセージをテストするユーティリティ"

#. leap/perl-Test-Output/description
msgid ""
"Test::Output provides a simple interface for testing output sent to 'STDOUT' "
"or 'STDERR'. A number of different utilities are included to try and be as "
"flexible as possible to the tester.\n"
"\n"
"Likewise, Capture::Tiny provides a much more robust capture mechanism "
"without than the original Test::Output::Tie."
msgstr ""
"Test::Output は 'STDOUT' や 'STDERR' に対するテスト出力のためのシンプルなイン"
"ターフェイスを提供します。様々なユーティリティがテスターにとって、できる限り"
"柔軟になるよう努力してきました。\n"
"\n"
"同様に、 Capture::Tiny はもともとの Test::Output::TIe 以上の高性能なキャプ"
"チャ機構を提供します。"

#. leap/perl-Test-Perl-Critic/summary
msgid "Use Perl::Critic in test programs"
msgstr "テストプログラム内での Perl::Critic の使用"

#. leap/perl-Test-Perl-Critic/description
msgid ""
"Test::Perl::Critic wraps the Perl::Critic engine in a convenient subroutine "
"suitable for test programs written using the Test::More framework. This "
"makes it easy to integrate coding-standards enforcement into the build "
"process. For ultimate convenience (at the expense of some flexibility), see "
"the criticism pragma.\n"
"\n"
"If you have an large existing code base, you might prefer to use Test::Perl::"
"Critic::Progressive, which allows you to clean your code incrementally "
"instead of all at once..\n"
"\n"
"If you'd like to try Perl::Critic without installing anything, there is a "
"web-service available at http://perlcritic.com. The web-service does not "
"support all the configuration features that are available in the native "
"Perl::Critic API, but it should give you a good idea of what Perl::Critic "
"can do."
msgstr ""
"Test::Perl::Critic は Perl::Critic をラッピングするもので、 Test::More フレー"
"ムワークを利用してテストプログラムを作成するのに便利なサブルーチンを提供する"
"ものです。これにより、構築処理内でコーディング標準の強制機構を簡単に組み込む"
"ことができるようになります。究極に利便性を追求したい場合 (いくぶんか柔軟性を"
"犠牲にすることになります) は、 criticism プラグマをご覧ください。\n"
"\n"
"既に巨大なコードベースをお持ちの場合は Test::Perl::Critic::Progressive を利用"
"して、一括ではなく順次にコードを改善していく方式を採用することをお勧めしま"
"す。\n"
"\n"
"また、何もインストールすることなく Perl::Critic を試したい場合は、 http://"
"perlcritic.com にある Web サービスを使用することもできます。この Web サービス"
"には、 Perl::Critic API にあるような設定機能が提供されていませんが、 Perl::"
"Critic の機能を確認するのに便利な仕組みです。"

#. leap/perl-Test-PerlTidy/summary
msgid "Check that all your files are tidy"
msgstr "ファイルがきれいであるかどうかをチェックするモジュール"

#. leap/perl-Test-PerlTidy/description
msgid ""
"This test submodule runs perltidy on files and reports errors if any of the "
"files differ after having been tidied. It does not permanently modify the "
"files being tested.\n"
"\n"
"By default, perltidy will be run on files under the current directory and "
"its subdirectories with extensions matching: .pm .pl .PL .t."
msgstr ""
"このテストサブモジュールは、ファイルに対して perltidy を動作させて、 tidy 後"
"のファイルと差異があった場合にそれを報告するモジュールです。テスト対象のファ"
"イルを恒久的に書き換えてしまうようなことはありません。\n"
"\n"
"既定では perltidy は現在のディレクトリ内と、サブディレクトリ内の .pm, .pl, ."
"PL, .t の拡張子があるファイルに対して動作します。"

#. leap/perl-Test-Pod/summary
msgid "Check for Pod Errors in Files"
msgstr "ファイル内の POD エラーの確認"

#. leap/perl-Test-Pod/description
msgid ""
"Check POD files for errors or warnings in a test file, using 'Pod::Simple' "
"to do the heavy lifting."
msgstr ""
"POD ファイルを読み込んで、テストファイル内のエラーや警告を確認します。この"
"際、 'Pod::Simple' を利用して重い処理を行ないます。"

#. leap/perl-Test-Pod-Coverage/summary
msgid "Check for pod coverage in your distribution."
msgstr "お使いの配布物での POD ファイルの網羅率確認"

#. leap/perl-Test-Pod-Coverage/description
msgid ""
"Test::Pod::Coverage is used to create a test for your distribution, to "
"ensure that all relevant files in your distribution are appropriately "
"documented in pod.\n"
"\n"
"Can also be called with the Pod::Coverage manpage parms.\n"
"\n"
"    use Test::Pod::Coverage tests=>1;     pod_coverage_ok(         \"Foo::Bar"
"\",         { also_private => [ qr/^[A-Z_]+$/ ], },         \"Foo::Bar, with "
"all-caps functions as privates\",     );\n"
"\n"
"The the Pod::Coverage manpage parms are also useful for subclasses that "
"don't re-document the parent class's methods. Here's an example from the "
"Mail::SRS manpage.\n"
"\n"
"    pod_coverage_ok( \"Mail::SRS\" ); # No exceptions\n"
"\n"
"         my $trustme = { trustme => [qr/^(new|parse|compile)$/] };     "
"pod_coverage_ok( \"Mail::SRS::DB\", $trustme );     pod_coverage_ok( \"Mail::"
"SRS::Guarded\", $trustme );     pod_coverage_ok( \"Mail::SRS::Reversable\", "
"$trustme );     pod_coverage_ok( \"Mail::SRS::Shortcut\", $trustme );\n"
"\n"
"Alternately, you could use the Pod::Coverage::CountParents manpage, which "
"always allows a subclass to reimplement its parents' methods without "
"redocumenting them. For example:\n"
"\n"
"    my $trustparents = { coverage_class => 'Pod::Coverage::"
"CountParents' };     pod_coverage_ok( \"IO::Handle::Frayed\", "
"$trustparents );\n"
"\n"
"(The 'coverage_class' parameter is not passed to the coverage class with "
"other parameters.)\n"
"\n"
"If you want POD coverage for your module, but don't want to make Test::Pod::"
"Coverage a prerequisite for installing, create the following as your _t/pod-"
"coverage.t_ file:\n"
"\n"
"    use Test::More;     eval \"use Test::Pod::Coverage\";     plan skip_all "
"=> \"Test::Pod::Coverage required for testing pod coverage\" if $@;\n"
"\n"
"    plan tests => 1;     pod_coverage_ok( \"Pod::Master::Html\");\n"
"\n"
"Finally, Module authors can include the following in a _t/pod-coverage.t_ "
"file and have 'Test::Pod::Coverage' automatically find and check all modules "
"in the module distribution:\n"
"\n"
"    use Test::More;     eval \"use Test::Pod::Coverage 1.00\";     plan "
"skip_all => \"Test::Pod::Coverage 1.00 required for testing POD coverage\" "
"if $@;     all_pod_coverage_ok();"
msgstr ""
"Test::Pod::Coverage は開発物に対して、 POD 内に適切にドキュメントが記述されて"
"いるかどうかのテストを作成する際に使用するモジュールです。\n"
"\n"
"Pod::Coverage のパラメータとともに呼び出すこともできます。\n"
"\n"
"    use Test::Pod::Coverage tests=>1;     pod_coverage_ok(         \"Foo::Bar"
"\",         { also_private => [ qr/^[A-Z_]+$/ ], },         \"Foo::Bar, with "
"all-caps functions as privates\",     );\n"
"\n"
"Pod::Coverage のパラメータはサブクラスの場合に便利な仕組みで、親クラスのメ"
"ソッドに対してドキュメントを作り直す必要がないようにすることができます。たと"
"えば下記は Mail::SRS における例です:\n"
"\n"
"    pod_coverage_ok( \"Mail::SRS\" ); # No exceptions\n"
"\n"
"         my $trustme = { trustme => [qr/^(new|parse|compile)$/] };     "
"pod_coverage_ok( \"Mail::SRS::DB\", $trustme );     pod_coverage_ok( \"Mail::"
"SRS::Guarded\", $trustme );     pod_coverage_ok( \"Mail::SRS::Reversable\", "
"$trustme );     pod_coverage_ok( \"Mail::SRS::Shortcut\", $trustme );\n"
"\n"
"なお、 Pod::Coverage::CountParents を利用することで、再度ドキュメントを作成す"
"ることなくサブクラス側で親のメソッドを再実装することもできます。たとえば下記"
"のようになります:\n"
"\n"
"    my $trustparents = { coverage_class => 'Pod::Coverage::"
"CountParents' };     pod_coverage_ok( \"IO::Handle::Frayed\", "
"$trustparents );\n"
"\n"
"('coverage_class' パラメータは、他のパラメータとは違い、 coverage クラスには"
"渡されません)\n"
"\n"
"お使いのモジュールに対して POD のカバレッジを知りたい場合で、インストール時"
"に Test::Pod::Coverage を必要とさせたくない場合は、下記のように your _t/pod-"
"coverage.t_ ファイルを作成してください:\n"
"\n"
"    use Test::More;     eval \"use Test::Pod::Coverage\";     plan skip_all "
"=> \"Test::Pod::Coverage required for testing pod coverage\" if $@;\n"
"\n"
"    plan tests => 1;     pod_coverage_ok( \"Pod::Master::Html\");\n"
"\n"
"最後に、モジュールの作者は _t/pod-coverage.t_ ファイルと 'Test::Pod::"
"Coverage' を含めることで、モジュールの配布物内ですべてのモジュールを検出およ"
"びチェックすることができます\n"
"\n"
"    use Test::More;     eval \"use Test::Pod::Coverage 1.00\";     plan "
"skip_all => \"Test::Pod::Coverage 1.00 required for testing POD coverage\" "
"if $@;     all_pod_coverage_ok();"

#. leap/perl-Test-Refcount/summary
msgid "Assert reference counts on objects"
msgstr "オブジェクトに対するアサート参照カウント"

#. leap/perl-Test-Refcount/description
msgid ""
"The Perl garbage collector uses simple reference counting during the normal "
"execution of a program. This means that cycles or unweakened references in "
"other parts of code can keep an object around for longer than intended. To "
"help avoid this problem, the reference count of a new object from its class "
"constructor ought to be 1. This way, the caller can know the object will be "
"properly DESTROYed when it drops all of its references to it.\n"
"\n"
"This module provides two test functions to help ensure this property holds "
"for an object class, so as to be polite to its callers.\n"
"\n"
"If the assertion fails; that is, if the actual reference count is different "
"to what was expected, either of the following two modules may be used to "
"assist the developer in finding where the references are."
msgstr ""
"Perl のガーベージコレクタは、プログラムを通常に実行している間はシンプルな参照"
"カウントを利用しています。これにより、他のパーツ内に循環参照や弱い参照がある"
"と、オブジェクトが期待よりも長く保持されることになります。この問題を回避する"
"には、クラスコンストラクタで新しいオブジェクトを作成した際には、参照カウント"
"が 1 であるべきです。この方法により、呼び出し元はすべての参照から外れた際、適"
"切な DESTROY を実行することができるようになります。\n"
"\n"
"このモジュールは、呼び出し元に対して適切な動作をするよう、オブジェクトクラス"
"に対する属性保持を支援する 2 種類の関数を用意しています。\n"
"\n"
"アサーションが失敗した場合、それは実際の参照カウントが期待したものとは異なる"
"ことを意味します。下記の 2 種類のモジュールを利用して、どこに参照があるのかを"
"調べることもできます。"

#. leap/perl-Test-Requires/summary
msgid "Checks to see if the module can be loaded"
msgstr "モジュールを読み込むことができるかどうかをテストするモジュール"

#. leap/perl-Test-Requires/description
msgid ""
"Test::Requires checks to see if the module can be loaded.\n"
"\n"
"If this fails rather than failing tests this *skips all tests*.\n"
"\n"
"Test::Requires can also be used to require a minimum version of Perl:\n"
"\n"
"    use Test::Requires \"5.010\";  # quoting is necessary!!\n"
"\n"
"         use Test::Requires \"v5.10\";"
msgstr ""
"Test::Requires はモジュールを読み込むことができるかどうかをチェックします。\n"
"\n"
"このチェックが失敗した場合は、テスト自体を失敗とはせず、 *すべてのテストを飛"
"ばします* 。\n"
"\n"
"Test::Requires は Perl の最小バージョンのテストにも利用することができます:\n"
"\n"
"    use Test::Requires \"5.010\";  # 引用符が必要です!!\n"
"\n"
"         use Test::Requires \"v5.10\";"

#. leap/perl-Test-Requires-Git/summary
msgid "Check your test requirements against the available version of Git"
msgstr "利用可能な git バージョンに対するテスト要件のチェック"

#. leap/perl-Test-Requires-Git/description
msgid ""
"Test::Requires::Git checks if the version of Git available for testing meets "
"the given requirements. If the checks fail, then all tests will be "
"_skipped_.\n"
"\n"
"'use Test::Requires::Git' always calls 'test_requires_git' with the given "
"arguments. If you don't want 'test_requires_git' to be called at import "
"time, write this instead:\n"
"\n"
"    use Test::Requires::Git -nocheck;\n"
"\n"
"Passing the 'git' parameter (see test_requires_git below) to 'use Test::"
"Requires::Git' will override it for the rest of the program run."
msgstr ""
"Test::Requires::Git は利用可能な git のバージョンがテストの要件に合致するかど"
"うかを確認します。チェックが失敗すると、全てのテストが _飛ばされ_ ます。\n"
"\n"
"'use Test::Requires::Git' は常に指定したパラメータで 'test_requires_git' を呼"
"び出します。取り込みの時点で  'test_requires_git' を呼び出したくない場合は、"
"下記のように記述してください:\n"
"\n"
"    use Test::Requires::Git -nocheck;\n"
"\n"
"'git' パラメータを 'use Test::Requires::Git' に指定することで、プログラムの残"
"りの動作を上書きすることができます。"

#. leap/perl-Test-RequiresInternet/summary
msgid "Easily test network connectivity"
msgstr "簡易ネットワーク接続テスト"

#. leap/perl-Test-RequiresInternet/description
msgid ""
"This module is intended to easily test network connectivity before "
"functional tests begin to non-local Internet resources. It does not require "
"any modules beyond those supplied in core Perl.\n"
"\n"
"If you do not specify a host/port pair, then the module defaults to using "
"'www.google.com' on port '80'.\n"
"\n"
"You may optionally specify the port by its name, as in 'http' or 'ldap'. If "
"you do this, the test module will attempt to look up the port number using "
"'getservbyname'.\n"
"\n"
"If you do specify a host and port, they must be specified in *pairs*. It is "
"a fatal error to omit one or the other.\n"
"\n"
"If the environment variable 'NO_NETWORK_TESTING' is set, then the tests will "
"be skipped without attempting any socket connections.\n"
"\n"
"If the sockets cannot connect to the specified hosts and ports, the "
"exception is caught, reported and the tests skipped."
msgstr ""
"このモジュールは、ローカル環境では動作しないインターネットリソースのテストを"
"行なうよりも前に、ネットワークの接続を簡単にテストするために作られたもので"
"す。 Perl の中枢部を除いて、他のモジュールは一切必要としません。\n"
"\n"
"ホスト／ポートの対を指定しない場合、このモジュールはホストを 'www.google."
"com' ポートを '80' に設定します。\n"
"\n"
"必要であればポートを名前で (例: 'http', 'ftp') 指定することもできます。名前で"
"指定した場合、このモジュールは 'getservbyname' を利用してポート番号を参照しま"
"す。\n"
"\n"
"ホストとポートを指定する場合は、それらは *ペア* で指定しなければなりません。"
"いずれか片方だけを省略した場合は、致命的なエラーとなります。\n"
"\n"
"また、環境変数 'NO_NETWORK_TESTING' が設定されていた場合、テストではソケット"
"接続をまったく行なわず、テスト自体を飛ばします。\n"
"\n"
"ソケットが指定したホスト及びポートに接続できない場合、例外をキャッチして報告"
"したあと、テスト自体を飛ばします。"

#. leap/perl-Test-Script/summary
msgid "Basic cross-platform tests for scripts"
msgstr "スクリプト向けのプラットフォームに依存しない基礎テスト"

#. leap/perl-Test-Script/description
msgid ""
"The intent of this module is to provide a series of basic tests for 80% of "
"the testing you will need to do for scripts in the _script_ (or _bin_ as is "
"also commonly used) paths of your Perl distribution.\n"
"\n"
"It also provides similar functions for testing programs that are not Perl "
"scripts.\n"
"\n"
"Further, it aims to provide this functionality with perfect platform-"
"compatibility, and in a way that is as unobtrusive as possible.\n"
"\n"
"That is, if the program works on a platform, then *Test::Script* should "
"always work on that platform as well. Anything less than 100% is considered "
"unacceptable.\n"
"\n"
"In doing so, it is hoped that *Test::Script* can become a module that you "
"can safely make a dependency of all your modules, without risking that your "
"module won't on some platform because of the dependency.\n"
"\n"
"Where a clash exists between wanting more functionality and maintaining "
"platform safety, this module will err on the side of platform safety."
msgstr ""
"このモジュールは、お使いの Perl 配布物内の _script_ パス (もしくは一般に使用"
"される _bin_ パス) にあるスクリプトに対して、必要なテスト量の 80% を占める基"
"本テストを提供することを目的にしています。\n"
"\n"
"なお、このモジュールは非 Perl スクリプトのプログラムをテストするための類似関"
"数も提供しています。\n"
"\n"
"これに加えて、完全なプラットフォーム互換性を持つ機能の提供と、できる限り控え"
"めな機能の提供を目的としています。\n"
"\n"
"言い換えれば、そのプログラムを特定のプラットフォーム上で動作させる場合、 "
"*Test::Scriot* もまた同じプラットフォームで動作すべきです。 100% を下回る状況"
"は受け入れられるものではありません。\n"
"\n"
"これを実現する際、 *Test::Script* がお使いのすべてのモジュールに対して安全に"
"依存関係を作成できるモジュールであることが望ましく、依存関係の理由で特定のプ"
"ラットフォームで問題を発生させるようなリスクもないことが望まれます。\n"
"\n"
"さらなる機能への欲求とプラットフォームの安全性維持との間で衝突が発生した場"
"合、このモジュールはプラットフォームの安全性を優先してエラーを発生させます。"

#. leap/perl-Test-SharedFork/summary
msgid "Fork Test"
msgstr "fork テスト"

#. leap/perl-Test-SharedFork/description
msgid ""
"Test::SharedFork is utility module for Test::Builder.\n"
"\n"
"This module makes fork(2) safety in your test case.\n"
"\n"
"This module merges test count with parent process & child process."
msgstr ""
"Test::SharedFork は Test::Builder に対するユーティリティモジュールです。\n"
"\n"
"このモジュールは、お使いのテストケース内で fork(2) に対する安全性を提供しま"
"す。\n"
"\n"
"このモジュールは、親プロセスと子プロセスとの間でテストカウントをマージしま"
"す。"

#. leap/perl-Test-Simple/summary
msgid "Basic utilities for writing tests"
msgstr "テストを作成するための基本ユーティリティ"

#. leap/perl-Test-Simple/description
msgid ""
"** If you are unfamiliar with testing *read Test::Tutorial first!* **\n"
"\n"
"This is an extremely simple, extremely basic module for writing tests "
"suitable for CPAN modules and other pursuits. If you wish to do more "
"complicated testing, use the Test::More module (a drop-in replacement for "
"this one)."
msgstr ""
"** テストについて詳しくない場合は、まず *Test::Tutorial* をお読みください! "
"**\n"
"\n"
"これは、 CPAN モジュールやその他のモジュール対する、非常にシンプルで非常に基"
"本的なテスト作成モジュールです。複雑なテストを実施したい場合は、 Test::More "
"モジュールをお使いください (このモジュールからそのまま置き換えて利用すること"
"ができます) 。"

#. leap/perl-Test-Spec/summary
msgid "Write tests in a declarative specification style"
msgstr "宣言的な仕様スタイルでテストを作成するモジュール"

#. leap/perl-Test-Spec/description
msgid ""
"This is a declarative specification-style testing system for behavior-driven "
"development (BDD) in Perl. The tests (a.k.a. examples) are named with "
"strings instead of subroutine names, so your fingers will suffer less "
"fatigue from underscore-itis, with the side benefit that the test reports "
"are more legible.\n"
"\n"
"This module is inspired by and borrows heavily from at http://rspec.info/"
"documentation, a BDD tool for the Ruby programming language."
msgstr ""
"これは振る舞い駆動型の開発 (BDD) を Perl で行なうための宣言的な仕様スタイルで"
"す。テスト (もしくは例) はサブルーチン名ではなく文字列で命名されるため、繰り"
"返しアンダースコアを入力するような疲れを軽減することができるばかりか、テスト"
"レポートからより読みやすくなるという利点もあります。\n"
"\n"
"このモジュールは http://rspec.info/documentation/ と呼ばれる Ruby プログラミ"
"ング言語向け BDD ツールをヒントにし、大幅に考え方を拝借しています。"

#. leap/perl-Test-Spelling/summary
msgid "Check for spelling errors in POD files"
msgstr "POD ファイル内のスペルミスのチェック"

#. leap/perl-Test-Spelling/description
msgid ""
"Test::Spelling lets you check the spelling of a 'POD' file, and report its "
"results in standard Test::More fashion. This module requires a spellcheck "
"program such as at http://hunspell.github.io/, _aspell_, _spell_, or, "
"_ispell_. We suggest using Hunspell.\n"
"\n"
"    use Test::Spelling;     pod_file_spelling_ok('lib/Foo/Bar.pm', 'POD file "
"spelling OK');\n"
"\n"
"Note that it is a bad idea to run spelling tests during an ordinary CPAN "
"distribution install, or in a package that will run in an uncontrolled "
"environment. There is no way of predicting whether the word list or "
"spellcheck program used will give the same results. You *can* include the "
"test in your distribution, but be sure to run it only for authors of the "
"module by guarding it in a 'skip_all unless $ENV{AUTHOR_TESTING}' clause, or "
"by putting the test in your distribution's _xt/author_ directory. Anyway, "
"people installing your module really do not need to run such tests, as it is "
"unlikely that the documentation will acquire typos while in transit.\n"
"\n"
"You can add your own stop words, which are words that should be ignored by "
"the spell check, like so:\n"
"\n"
"    add_stopwords(qw(asdf thiswordiscorrect));\n"
"\n"
"Adding stop words in this fashion affects all files checked for the "
"remainder of the test script. See Pod::Spell (which this module is built "
"upon) for a variety of ways to add per-file stop words to each .pm file.\n"
"\n"
"If you have a lot of stop words, it's useful to put them in your test file's "
"'DATA' section like so:\n"
"\n"
"    use strict;     use warnings;     use Test::More;\n"
"\n"
"    use Test::Spelling;     use Pod::Wordlist;\n"
"\n"
"    add_stopwords(<DATA>);     all_pod_files_spelling_ok();\n"
"\n"
"    __DATA__     folksonomy     Jifty     Zakirov\n"
"\n"
"To maintain backwards compatibility, comment markers and some whitespace are "
"ignored. In the near future, the preprocessing we do on the arguments to "
"Test::Spelling/\"add_stopwords\" will be changed and documented properly."
msgstr ""
"Test::Spelling は 'POD' ファイルのスペルチェックを行ない、その結果を Test::"
"More のやり方で報告します。このモジュールを利用するには、 http://hunspell."
"github.io/, _aspell_, _spell_, _ispell_ のようなスペルチェックプログラムが必"
"要です。ただし、 Hunspell の使用をお勧めします。\n"
"\n"
"    use Test::Spelling;     pod_file_spelling_ok('lib/Foo/Bar.pm', 'POD file "
"spelling OK');\n"
"\n"
"ただし、 CPAN 配布物をインストールする際にスペルチェックを実施するのはよくあ"
"りませんし、制御下にない環境のパッケージに対して実施するのもよくありません。"
"どの単語リストやスペルチェックプログラムを利用しているのかによって、同じ結果"
"を予測することはできないためです。また、配布物内にテストとして含めることも *"
"できます* が、モジュールの作者が実行した場合にのみテストが行なわれるよう、 "
"'skip_all unless $ENV{AUTHOR_TESTING}'' で保護することを忘れずに実施するか、"
"もしくはそれらを配布物内の _xt/author_ ディレクトリ内に配置してください。とも"
"かく、このモジュールをインストールしようとしている人々にとっては、配布物を転"
"送している際に記述ミスが発生したりすることはありませんから、このようなテスト"
"は実際には不要でしょう。\n"
"\n"
"また、独自のストップワードを追加することもできます。ストップワードとはスペル"
"チェックで無視すべき単語のことで、下記のようにして使用します:\n"
"\n"
"    add_stopwords(qw(asdf thiswordiscorrect));\n"
"\n"
"この方法でストップワードを追加すると、テストスクリプト内の残りの個所に対する"
"すべてのファイルに影響します。ファイルごとにストップワードを各 .pm ファイルに"
"追加するための様々な方法について、詳しくは Pod::Spell (このモジュールのベー"
"ス) をご覧ください。\n"
"\n"
"多数のストップワードを設定している場合は、それらをファイル内の 'DATA' セク"
"ションに配置するとよいでしょう:\n"
"\n"
"    use strict;     use warnings;     use Test::More;\n"
"\n"
"    use Test::Spelling;     use Pod::Wordlist;\n"
"\n"
"    add_stopwords(<DATA>);     all_pod_files_spelling_ok();\n"
"\n"
"    __DATA__     folksonomy     Jifty     Zakirov\n"
"\n"
"後方互換性を維持するため、コメントマーカーといくつかのホワイトスペースは無視"
"されます。近い将来には Test::Spelling/\"add_stopwords\" に対するパラメータの"
"事前処理方法が変更され、適切に文書化される予定です。"

#. leap/perl-Test-Strict/summary
msgid "Check syntax, presence of use strict; and test coverage"
msgstr "文法のチェック／use strict の存在チェック／テストカバレッジ"

#. leap/perl-Test-Strict/description
msgid ""
"The most basic test one can write is \"does it compile ?\". This module "
"tests if the code compiles and play nice with Test::Simple modules.\n"
"\n"
"Another good practice this module can test is to \"use strict;\" in all perl "
"files.\n"
"\n"
"By setting a minimum test coverage through 'all_cover_ok()', a code author "
"can ensure his code is tested above a preset level of _kwality_ throughout "
"the development cycle.\n"
"\n"
"Along with Test::Pod, this module can provide the first tests to setup for a "
"module author.\n"
"\n"
"This module should be able to run under the -T flag for perl >= 5.6. All "
"paths are untainted with the following pattern: 'qr|^([-+@\\w./:\\\\]+)$|' "
"controlled by '$Test::Strict::UNTAINT_PATTERN'."
msgstr ""
"テストを作成するにあたって、最も基本的なテストは \"コンパイルできるかどうか？"
"\" です。このモジュールは、コードがコンパイルできて Test::Simple モジュールを"
"実行できるかどうかをテストします。\n"
"\n"
"このモジュールがテストできるもう 1 つの要素としては、すべての Perl ファイルに"
"対して \"use strict;\" を使用するテストがあります。\n"
"\n"
"'all_cover_ok()' で最小限のテストカバレッジを設定することで、コードの作者は開"
"発サイクルを通してそのコードの _品質_ レベルを維持することができるようになり"
"ます。\n"
"\n"
"また、 Test::Pod と併用することで、このモジュールはモジュールの作者向けに初め"
"てのテストを提供することもできます。\n"
"\n"
"このモジュールは Perl >= 5.6 では -T フラグのもとで実行できるはずです。また、"
"すべてのパスは下記のパターンで汚染を回避します: 'qr|^([-+@\\w./:\\"
"\\]+)$|' (こちらは '$Test::Strict::UNTAINT_PATTERN' で制御されています) 。"

#. leap/perl-Test-SubCalls/summary
msgid "Track the number of times subs are called"
msgstr "サブルーチンを呼び出した回数を数えるモジュール"

#. leap/perl-Test-SubCalls/description
msgid ""
"There are a number of different situations (like testing caching code) where "
"you want to want to do a number of tests, and then verify that some "
"underlying subroutine deep within the code was called a specific number of "
"times.\n"
"\n"
"This module provides a number of functions for doing testing in this way in "
"association with your normal Test::More (or similar) test scripts."
msgstr ""
"様々な状況 (キャッシュ機能のコードのテストなど) で繰り返しのテストを実行し、"
"指定した回数だけサブルーチン内の特定の個所を実行したりしたいことがありま"
"す。\n"
"\n"
"このモジュールは、通常の Test::More テストスクリプトを利用して、特定の回数だ"
"け関数を実行する機能を提供します。"

#. leap/perl-Test-Synopsis/summary
msgid "Test your SYNOPSIS code"
msgstr "SYNOPSIS コードのテスト"

#. leap/perl-Test-Synopsis/description
msgid ""
"Test::Synopsis is an (author) test module to find .pm or .pod files under "
"your _lib_ directory and then make sure the example snippet code in your "
"_SYNOPSIS_ section passes the perl compile check.\n"
"\n"
"Note that this module only checks the perl syntax (by wrapping the code with "
"'sub') and doesn't actually run the code, *UNLESS* that code is a 'BEGIN {}' "
"block or a 'use' statement.\n"
"\n"
"Suppose you have the following POD in your module.\n"
"\n"
"  =head1 NAME\n"
"\n"
"  Awesome::Template - My awesome template\n"
"\n"
"  =head1 SYNOPSIS\n"
"\n"
"    use Awesome::Template;\n"
"\n"
"    my $template = Awesome::Template->new;     $tempalte->render(\"template."
"at\");\n"
"\n"
"  =head1 DESCRIPTION\n"
"\n"
"An user of your module would try copy-paste this synopsis code and find that "
"this code doesn't compile because there's a typo in your variable name _"
"$tempalte_. Test::Synopsis will catch that error before you ship it."
msgstr ""
"Test::Synopsis は、お使いの _lib_ ディレクトリ内にある .pm および .pod ファイ"
"ルを検索し、それらのファイル内の _SYNOPSIS_ セクション内のコードが Perl のコ"
"ンパイルチェックに合格するかどうかをテストします。\n"
"\n"
"なお、このモジュールは、 * コード内に 'BEGIN {}' ブロックや 'use' ステートメ"
"ントが存在しない限り * 、 Perl の文法のみを ('sub' でコードをくくることで) "
"チェックするだけで、実際にコードを実行することはありません。\n"
"\n"
"例えばお使いのモジュール内に、下記の POD があるとします:\n"
"\n"
"  =head1 NAME\n"
"\n"
"  Awesome::Template - My awesome template\n"
"\n"
"  =head1 SYNOPSIS\n"
"\n"
"    use Awesome::Template;\n"
"\n"
"    my $template = Awesome::Template->new;     $tempalte->render(\"template."
"at\");\n"
"\n"
"  =head1 DESCRIPTION\n"
"\n"
"このモジュールの利用者は、 synopsos 内にあるコードをコピー＆ペーストして実行"
"しようとしますが、上記の例では変数名が _$tempalte_ のように間違っているため、"
"コンパイルできないことがわかります。 Test::Synopsis では、このようなエラーを"
"出荷前にチェックすることができます。"

#. leap/perl-Test-TCP/summary
msgid "Testing Tcp Program"
msgstr "テスト用 TCP プログラム"

#. leap/perl-Test-TCP/description
msgid "Test::TCP is a test utility to test TCP/IP-based server programs."
msgstr ""
"Test::TCP は TCP/IP ベースのサーバプログラムをテストするためのユーティリティ"
"です。"

#. leap/perl-Test-Taint/summary
msgid "Tools to test taintedness"
msgstr "汚染 (tainted) 状況をテストするツール"

#. leap/perl-Test-Taint/description
msgid ""
"Tainted data is data that comes from an unsafe source, such as the command "
"line, or, in the case of web apps, any GET or POST transactions. Read the "
"perlsec man page for details on why tainted data is bad, and how to untaint "
"the data.\n"
"\n"
"When you're writing unit tests for code that deals with tainted data, you'll "
"want to have a way to provide tainted data for your routines to handle, and "
"easy ways to check and report on the taintedness of your data, in standard "
"Test::More style."
msgstr ""
"汚染された (tainted) データとは信頼のできない発信源からのデータを意味する用語"
"で、たとえばコマンドラインや Web アプリにおける GET または POST のデータを指"
"します。なぜ汚染されたデータが問題になるのか、およびデータの汚染除去方法につ"
"いて、詳しくは perlsec マニュアルページをお読みください。\n"
"\n"
"このような汚染されたデータを扱うコードを作成している場合、単体テストではその"
"動作を確認するため、汚染されたデータを用意する必要がありますが、このモジュー"
"ルではそのような汚染データを Test::More のような標準の形式で提供してチェック"
"し、レポートを生成する機能を提供しています。"

#. leap/perl-Test-TempDir-Tiny/summary
msgid "Temporary directories that stick around when tests fail"
msgstr "失敗時に維持される一時ディレクトリの機能"

#. leap/perl-Test-TempDir-Tiny/description
msgid ""
"This module works with Test::More to create temporary directories that stick "
"around if tests fail.\n"
"\n"
"It is loosely based on Test::TempDir, but with less complexity, greater "
"portability and zero non-core dependencies. (Capture::Tiny is recommended "
"for testing.)\n"
"\n"
"The tempdir and in_tempdir functions are exported by default.\n"
"\n"
"If the current directory is writable, the root for directories will be _./"
"tmp_. Otherwise, a File::Temp directory will be created wherever temporary "
"directories are stored for your system.\n"
"\n"
"Every _*.t_ file gets its own subdirectory under the root based on the test "
"filename, but with slashes and periods replaced with underscores. For "
"example, _t/foo.t_ would get a test-file-specific subdirectory _./tmp/"
"t_foo_t/_. Directories created by tempdir get put in that directory. This "
"makes it very easy to find files later if tests fail.\n"
"\n"
"The test-file-specific name is consistent from run-to-run. If an old "
"directory already exists, it will be removed.\n"
"\n"
"When the test file exits, if all tests passed, then the test-file-specific "
"directory is recursively removed.\n"
"\n"
"If a test failed and the root directory is _./tmp_, the test-file-specific "
"directory sticks around for inspection. (But if the root is a File::Temp "
"directory, it is always discarded).\n"
"\n"
"If nothing is left in _./tmp_ (i.e. no other test file failed), then _./tmp_ "
"is cleaned up as well (unless it's a symlink).\n"
"\n"
"This module attempts to avoid race conditions due to parallel testing. In "
"extreme cases, the test-file-specific subdirectory might be created as a "
"regular File::Temp directory rather than in _./tmp_. In such a case, a "
"warning will be issued."
msgstr ""
"このモジュールは Test::More とともに動作させるもので、テストが失敗した際に保"
"持されるような一時 (テンポラリ) ディレクトリを作成する機能を提供します。\n"
"\n"
"これは Test::TempDir をゆるくベースにしたものですが、複雑性がなく可搬性に優"
"れ、かつ中枢以外の依存関係がありません\n"
"(テストを実施する際には Capture::Tiny をインストールしておくことをお勧めしま"
"す) 。\n"
"\n"
"現在のディレクトリが書き込み可能である場合、ディレクトリのルートは _./tmp_ に"
"なります。それ以外の場合、お使いのシステムで一時ディレクトリが設定されている"
"と、 File::Temp でディレクトリが作成されます。\n"
"\n"
"それぞれの _*.t_ ファイルには、テストのファイル名をベースにした (スラッシュと"
"ピリオドをそれぞれアンダースコアに変換して) ルート以下の独自サブディレクトリ"
"が設定されます。例えば _t/foot.t_ の場合、テストファイル固有のサブディレクト"
"リは _./tmp/t_foo_t/_ のようになります。 temidir で作成されたディレクトリはそ"
"のディレクトリ内に配置されます。これにより、テストが失敗してもファイルを簡単"
"に見つけられるようになっています。\n"
"\n"
"テストファイル固有の名前は実行している間だけ維持されます。古いディレクトリが"
"存在していた場合は削除されます。\n"
"\n"
"テストファイルが終了すると、テストが合格していれば、テストファイル固有のディ"
"レクトリは再帰的に削除されます。\n"
"\n"
"テストが失敗していて、かつルートディレクトリが _./tmp_ であった場合、テスト"
"ファイル固有のディレクトリは、今後の調査のために削除されず維持されます (ルー"
"トが File::Temp のディレクトリであった場合は常に削除されてしまいます) 。\n"
"\n"
"最後に、何も _./tmp_ 内に残されていない (つまり他のテストが全く失敗していな"
"い) 場合、 _./tmp_ も削除されます (シンボリックリンクでない場合のみ) 。\n"
"\n"
"このモジュールは、同時並行でテストをするような競合条件を回避しようと試みま"
"す。極端な場合、テストファイル固有のサブディレクトリは _./tmp_ ではなく、通常"
"の File::Temp ディレクトリとして作為させれる場合もあります。この場合は警告"
"メッセージが表示されます。"

#. leap/perl-Test-Time/summary
msgid "Overrides the time() and sleep() core functions for testing"
msgstr "テスト用に time() と sleep() の中枢関数をオーバーライドするモジュール"

#. leap/perl-Test-Time/description
msgid ""
"Test::Time can be used to test modules that deal with time. Once you 'use' "
"this module, all references to 'time' and 'sleep' will be internalized. You "
"can set custom time by passing time => number after the 'use' statement:\n"
"\n"
"    use Test::Time time => 1;\n"
"\n"
"    my $now = time;    # $now is equal to 1     sleep 300;         # returns "
"immediately, displaying a note     my $then = time;   # $then equals to 301"
msgstr ""
"Test::Time は時刻を扱うモジュールをテストする際に使用します。 'use' でこのモ"
"ジュールを指定すると、 'time' および 'sleep' に対する参照が内部化されます。な"
"お、 'use' ステートメントに続いて time => (数値) のように指定することで、独自"
"の時刻を設定することもできます:\n"
"\n"
"    use Test::Time time => 1;\n"
"\n"
"    my $now = time;    # $now は 1 になる\n"
"    sleep 300;         # 即時に処理が返る (ただし注記が表示される)\n"
"    my $then = time;   # $then は 301 になる"

#. leap/perl-Test-Trap/summary
msgid "Trap exit codes, exceptions, output, etc"
msgstr "終了コード、例外、出力などのトラップ"

#. leap/perl-Test-Trap/description
msgid ""
"Primarily (but not exclusively) for use in test scripts: A block eval on "
"steroids, configurable and extensible, but by default trapping (Perl) "
"STDOUT, STDERR, warnings, exceptions, would-be exit codes, and return values "
"from boxed blocks of test code.\n"
"\n"
"The values collected by the latest trap can then be queried or tested "
"through a special trap object."
msgstr ""
"主に (とは言っても限定されているわけではありませんが) テストスクリプト内で使"
"用するものです: 設定可能で拡張性の高いブロック型 eval ですが、既定では (Perl "
"の) STDOUT, STDERR, 警告, 例外, 終了するはずのコード、そのブロックコード内の"
"返り値などを捕捉します。\n"
"\n"
"最新のトラップで収集された値は、特殊な trap オブジェクトを介して問い合わせま"
"たはテストすることができます。"

#. leap/perl-Test-Unit/summary
msgid "The PerlUnit testing framework"
msgstr "PerlUnit テストフレームワーク"

#. leap/perl-Test-Unit/description
msgid ""
"This framework is intended to support unit testing in an object-oriented "
"development paradigm (with support for inheritance of tests etc.) and is "
"derived from the JUnit testing framework for Java by Kent Beck and Erich "
"Gamma. To start learning how to use this framework, see the Test::Unit::"
"TestCase manpage and the Test::Unit::TestSuite manpage. (There will also "
"eventually be a tutorial in the Test::Unit::Tutorial manpage.\n"
"\n"
"However 'Test::Unit::Procedural' is the procedural style interface to a "
"sophisticated unit testing framework for Perl that . Test::Unit is intended "
"to provide a simpler interface to the framework that is more suitable for "
"use in a scripting style environment. Therefore, Test::Unit does not provide "
"much support for an object-oriented approach to unit testing."
msgstr ""
"このフレームワークは、オブジェクト指向の開発パラダイム内で単体テストに使用さ"
"れる (例えばテストの継承など) ことを目的としていて、 Kent Beck 氏と Erich "
"Gamma 氏が開発した Java 向け JUnit テストフレームワークから派生して作られてい"
"るものです。このフレームワークの使用方法について学び始めるには、まず Test::"
"Unit::TestCase と Test::Unit::TestSuite をご覧ください (Test::Unit::Tutorial "
"としてチュートリアルも用意されています) 。\n"
"\n"
"'Test::Unit::Procedural' は手続き型のインターフェイスで Perl 向けの単体テスト"
"フレームワークを利用する仕組みです。 Test::JUnit はよりシンプルなインターフェ"
"イスでフレームワークを提供していて、よりスクリプトスタイルの環境にあった仕組"
"みになっています。そのため、 Test::Unit は単体テストにあたって、オブジェクト"
"指向のアプローチをあまり多くサポートしていません。"

#. leap/perl-Test-Unit-Lite/summary
msgid "Unit testing without external dependencies"
msgstr "外部依存関係のない単体テスト"

#. leap/perl-Test-Unit-Lite/description
msgid ""
"This framework provides lighter version of the Test::Unit manpage framework. "
"It implements some of the the Test::Unit manpage classes and methods needed "
"to run test units. The the Test::Unit::Lite manpage tries to be compatible "
"with public API of the Test::Unit manpage. It doesn't implement all classes "
"and methods at 100% and only those necessary to run tests are available.\n"
"\n"
"The the Test::Unit::Lite manpage can be distributed as a part of package "
"distribution, so the package can be distributed without dependency on "
"modules outside standard Perl distribution. The the Test::Unit::Lite manpage "
"is provided as a single file."
msgstr ""
"このフレームワークは Test::Unit フレームワークの軽量版です。 Test::Unit クラ"
"スやそのメソッドのうち、単体テストを実施するのに必要なもののうちのいくつかを"
"実装しています。 Test::Unit::Lite は Test::Unit の公開 API と互換性があるよう"
"に作られていますが、すべてのクラスやメソッドを 100% 実装しているわけではな"
"く、テストを実行するのに必要なもののみを提供しています。\n"
"\n"
"Test::Unit::Lite をパッケージの配布物の一部として配布することもできますので、"
"標準の Perl モジュール以外には依存関係を持たずにパッケージを配布することもで"
"きます。また、 Test::Unit::Lite は単一のファイルから構成されています。"

#. leap/perl-Test-UseAllModules/summary
msgid "do use_ok() for all the MANIFESTed modules"
msgstr "MANIFEST に記載されたすべてのモジュールに対する use_ok() の実行"

#. leap/perl-Test-UseAllModules/description
msgid ""
"I'm sick of writing 00_load.t (or something like that) that'll do use_ok() "
"for every module I write. I'm sicker of updating 00_load.t when I add "
"another file to the distro. This module reads MANIFEST to find modules to be "
"tested and does use_ok() for each of them. Now all you have to do is update "
"MANIFEST. You don't have to modify the test any more (hopefully)."
msgstr ""
"作成するモジュールそれぞれに対して use_ok() を使用するような 00_load.t (もし"
"くはそれに類するもの) を書くのに疲れました。また、配布物に追加するたびに "
"00_load_t を追加するのも面倒です。このモジュールは MANIFEST を読み込んでテス"
"ト対象のモジュールを検索し、それぞれに対して use_ok() を実行します。つまり、"
"あなたが更新すべきものは MANIFEST だけということになります。これによって (で"
"きれば) テストコードを修正する必要もなくなります。"

#. leap/perl-Test-WWW-Mechanize/summary
#. leap/perl-Test-WWW-Mechanize/description
msgid "Testing-specific WWW::Mechanize subclass"
msgstr "テスト固有の WWW::Mechanize のサブクラス"

#. leap/perl-Test-WWW-Selenium/summary
msgid "Test applications using Selenium Remote Control"
msgstr "Selenium Remote Control を使用するテストアプリケーション"

#. leap/perl-Test-WWW-Selenium/description
msgid ""
"This module is a the WWW::Selenium manpage subclass providing some methods "
"useful for writing tests. For each Selenium command (open, click, type, ...) "
"there is a corresponding '<command>_ok' method that checks the return value "
"(open_ok, click_ok, type_ok).\n"
"\n"
"For each Selenium getter (get_title, ...) there are four autogenerated "
"methods ('<getter>_is', '<getter>_isnt', '<getter>_like', '<getter>_unlike') "
"to check the value of the attribute.\n"
"\n"
"By calling the constructor with 'default_names' set to a true value your "
"tests will be given a reasonable name should you choose not to provide one "
"of your own. The test name should always be the third argument."
msgstr ""
"このモジュールは WWW::Selenium のサブクラスで、テストを記述するためのいくつか"
"のメソッドを提供するものです。各 Selenium のコマンド (開く、クリック、入力な"
"ど) に対して、対応する '<コマンド>_ok' メソッドが存在し、こちらで返り値を確"
"認 (open_ok, click_ok, type_ok) します。\n"
"\n"
"それぞれの Selenium の getter (get_title, ...) に対しては、 4 種類の自動生成"
"されたメソッド ('<getter>_is', '<getter>_isnt', '<getter>_like', "
"'<getter>_unlike') が存在していて、こちらで属性の値をチェックします。\n"
"\n"
"コンストラクタを呼び出す際、 'default_names' に true の値を設定すると、テスト"
"に対して適切な名前が設定され、独自に名前を付ける必要がなくなります。なお、テ"
"ストの名前は常に 3 つめのパラメータであるべきです。"

#. leap/perl-Test-Warn/summary
msgid "Perl extension to test methods for warnings"
msgstr "警告のためのメソッドを確認するための Perl 拡張"

#. leap/perl-Test-Warn/description
msgid ""
"A good style of Perl programming calls for a lot of diverse regression "
"tests.\n"
"\n"
"This module provides a few convenience methods for testing warning based "
"code.\n"
"\n"
"If you are not already familiar with the Test::More manpage now would be the "
"time to go take a look."
msgstr ""
"Perl のプログラミングにおいて、良いスタイルとは多様な回帰 (リグレッション) テ"
"ストを実施することです。\n"
"\n"
"このモジュールは、警告ベースのコードに対していくつかの便利なメソッドを提供し"
"ます。\n"
"\n"
"Test::More について詳しく知らない場合は、まずそちらをお読みください。"

#. leap/perl-Test-Warnings/summary
msgid "Test for warnings and the lack of them"
msgstr "警告の有無に関するテスト"

#. leap/perl-Test-Warnings/description
msgid ""
"If you've ever tried to use Test::NoWarnings to confirm there are no "
"warnings generated by your tests, combined with the convenience of "
"'done_testing' to not have to declare a test count, you'll have discovered "
"that these two features do not play well together, as the test count will be "
"calculated _before_ the warnings test is run, resulting in a TAP error. (See "
"'examples/test_nowarnings.pl' in this distribution for a demonstration.)\n"
"\n"
"This module is intended to be used as a drop-in replacement for Test::"
"NoWarnings: it also adds an extra test, but runs this test _before_ "
"'done_testing' calculates the test count, rather than after. It does this by "
"hooking into 'done_testing' as well as via an 'END' block. You can declare a "
"plan, or not, and things will still Just Work.\n"
"\n"
"It is actually equivalent to:\n"
"\n"
"    use Test::NoWarnings 1.04 ':early';\n"
"\n"
"as warnings are still printed normally as they occur. You are safe, and "
"enthusiastically encouraged, to perform a global search-replace of the above "
"with 'use Test::Warnings;' whether or not your tests have a plan.\n"
"\n"
"It can also be used as a replacement for Test::Warn, if you wish to test the "
"content of expected warnings; read on to find out how."
msgstr ""
"Test::NoWarnings を利用して、テスト内で警告が発生していないことを確認し、 "
"'done_testing' の利便性を生かしてテストカウントの宣言を不要にしていた際、これ"
"ら 2 つの機能を共存させると、うまく動作しないことに気が付いたことはありません"
"か？この場合、テストカウントは警告を発するテストが実行される _前_ に数えられ"
"てしまうため、 TAP エラーになってしまいます (配布物の内の 'examples/"
"test_nowarnings.pl' をご覧ください) 。\n"
"\n"
"このモジュールは、 Test::NoWarnings に対してその場での入れ替えを想定したモ"
"ジュールです。追加のテストも提供されますが、このテストは 'done_testing' でテ"
"ストカウントを数える _前_ に動作します。これは 'done_testing' と 'END' ブロッ"
"クに対するフックとして実行されているもので、これによってプランを定義してもし"
"なくても、うまく動作するようになります。\n"
"\n"
"これは実際には下記と同じ意味になります:\n"
"\n"
"    use Test::NoWarnings 1.04 ':early';\n"
"\n"
"この場合、警告メッセージは通常通り表示されます。そのため、開発中のコードにそ"
"のようなプランがあるかどうかにもよりますが、上記を 'use Test::Warnings;' で置"
"き換えても問題はありませんし、可能な限りお勧めします。\n"
"\n"
"また、このモジュールは、期待する通りの警告が発生しているかどうかを確認したい"
"場合、 Test::Warn に対する置き換えにもなっています。詳しくは添付の文書をお読"
"みください。"

#. leap/perl-Test-Without-Module/summary
msgid "Test fallback behaviour in absence of modules"
msgstr "モジュールが存在しない場合のフォールバック動作のテスト"

#. leap/perl-Test-Without-Module/description
msgid ""
"This module allows you to deliberately hide modules from a program even "
"though they are installed. This is mostly useful for testing modules that "
"have a fallback when a certain dependency module is not installed."
msgstr ""
"このモジュールは、実際にはインストールされているモジュールを、プログラムに対"
"して隠ぺいする機能を提供します。これは特に、依存している特定のモジュールがイ"
"ンストールされていない場合、フォールバック機能が働くかどうかをテストする際に"
"役立ちます。"

#. leap/perl-Test-WriteVariants/summary
msgid "Dynamic generation of tests in nested combinations of contexts"
msgstr "コンテキストの入れ子の組み合わせによる動的なテスト生成"

#. leap/perl-Test-WriteVariants/description
msgid ""
"Test::WriteVariants is a utility to create variants of a common test.\n"
"\n"
"Given the situation - like in DBI where some tests are the same for DBI::"
"SQL::Nano and it's drop-in replacement SQL::Statement. Or a distribution duo "
"having a Pure-Perl and an XS variant - and the same test shall be used to "
"ensure XS and PP version are really drop-in replacements for each other."
msgstr ""
"Test::WriteVariants は一般的なテストに対する派生形を作成するユーティリティで"
"す。\n"
"\n"
"たとえば下記のような使い方があります。たとえば DBI 内で DBI::SQL::Nano と同じ"
"ようなテストがいくつかあり、これが SQL::Statement の入れ替えとして使用できる"
"ようなものであった場合や、純粋 Perl と XS でそれぞれ同じモジュールを作成して"
"いたような場合、 XS と PP がそれぞれその場で知れ変えて使用できるようなもので"
"あった場合、このモジュールが役に立ちます。"

#. leap/perl-Test-YAML/summary
msgid "Testing Module for YAML Implementations"
msgstr "YAML 実装のテストモジュール"

#. leap/perl-Test-YAML/description
msgid ""
"the Test::YAML manpage is a subclass of the Test::Base manpage with YAML "
"specific support."
msgstr ""
"Test::YAML は Test::Base のサブクラスで、 YAML 固有のサポートが追加されていま"
"す。"

#. leap/perl-Test-YAML-Valid/summary
#. leap/perl-Test-YAML-Valid/description
msgid "Test for valid YAML"
msgstr "YAML の正当性のテスト"

#. leap/perl-Test-utf8/summary
msgid "Handy utf8 tests"
msgstr "使いやすい utf8 テスト"

#. leap/perl-Test-utf8/description
msgid ""
"This module is a collection of tests useful for dealing with utf8 strings in "
"Perl.\n"
"\n"
"This module has two types of tests: The validity tests check if a string is "
"valid and not corrupt, whereas the characteristics tests will check that "
"string has a given set of characteristics."
msgstr ""
"このモジュールは、 Perl 内で utf8 文字列を扱う際に有用なテスト集です。\n"
"\n"
"このモジュールには 2 種類のテストが用意されています。 1 つは文字列が正しく、"
"かつ壊れていないかどうかの検証テスト、もう 1 つはその文字列が特定の特性を持っ"
"ているかどうかの特性テストです。"

#. leap/perl-Test2-Plugin-NoWarnings/summary
msgid "Fail if tests warn"
msgstr "テストが警告を発した場合に失敗させるモジュール"

#. leap/perl-Test2-Plugin-NoWarnings/description
msgid ""
"Loading this plugin causes your tests to fail if there any warnings while "
"they run. Each warning generates a new failing test and the warning content "
"is outputted via 'diag'.\n"
"\n"
"This module uses '$SIG{__WARN__}', so if the code you're testing sets this, "
"then this module will stop working."
msgstr ""
"このプラグインを読み込むと、テスト実行中に何らかの警告 (warning) が発生した場"
"合に、テストが失敗するようになります。警告ごとに新しいテストの失敗が生成さ"
"れ、 'diag' を介して内容が出力されます。\n"
"\n"
"このモジュールは '$SIG{__WARN__}' を利用しているため、お使いのコードでこれを"
"使用していると正しく動作しません。"

#. leap/perl-Test2-Suite/summary
msgid "Distribution with a rich set of tools built upon the Test2"
msgstr "Test2 上に構築したリッチなツール集"

#. leap/perl-Test2-Suite/description
msgid ""
"Rich set of tools, plugins, bundles, etc built upon the Test2 testing "
"library. If you are interested in writing tests, this is the distribution "
"for you."
msgstr ""
"Test2 テストライブラリ上に構築したツールやプラグイン、バンドルなどのリッチな"
"集合です。テストの作成に興味がある場合は、こちらがお勧めです。"

#. leap/perl-Text-Aligner/summary
msgid "Module to Align Text"
msgstr "テキストを調整するモジュール"

#. leap/perl-Text-Aligner/description
msgid ""
"Text::Aligner exports a single function, align(), which is used to justify "
"strings to various alignment styles. The alignment specification is the "
"first argument, followed by any number of scalars which are subject to "
"alignment.\n"
"\n"
"The operation depends on context. In list context, a list of the justified "
"scalars is returned. In scalar context, the justified arguments are joined "
"into a single string with newlines appended. The original arguments remain "
"unchanged. In void context, in-place justification is attempted. In this "
"case, all arguments must be lvalues.\n"
"\n"
"Align() also does one level of scalar dereferencing. That is, whenever one "
"of the arguments is a scalar reference, the scalar pointed to is aligned "
"instead. Other references are simply stringified. An undefined argument is "
"interpreted as an empty string without complaint.\n"
"\n"
"Alignment respects colorizing escape sequences a la Term::ANSIColor which "
"means it knows that these sequences don't take up space on the screen."
msgstr ""
"Text::Aligner は align() と呼ばれる 1 つの関数を公開するモジュールで、様々な"
"配置スタイルで文字列を調整 (左右寄せ、中央寄せなど) する機能を提供します。最"
"初のパラメータとして配置の仕様を指定し、続いて配置する内容を任意の数のスカ"
"ラー値で指定します。\n"
"\n"
"処理はコンテキストに依存して決まります。リストコンテキストでは、調整済みのス"
"カラー値が返されます。スカラーコンテキストでは、調整済みの文字列を 1 つの文字"
"列として結合し、行末に改行を追加して返します。元のパラメータは変更されませ"
"ん。 void コンテキストでは、その場での調整が行なわれます。この場合、すべての"
"パラメータは lvalue でなければなりません。\n"
"\n"
"align() では 1 段階のスカラー逆参照も行ないます。これは、いずれかのパラメータ"
"がスカラー参照であった場合、参照先のスカラー値を代わりに調整します。その他の"
"参照は単純に文字列化して対応します。未定義のパラメータの場合は、特に何もメッ"
"セージを表示せず空文字列として扱われます。\n"
"\n"
"調整処理は Term::ANSIColor のエスケープシーケンスによる色付けにも対応していま"
"す。そのため、文字列内にエスケープシーケンスが存在していても、調整には影響を"
"与えません。"

#. leap/perl-Text-Autoformat/summary
#. leap/perl-Text-Autoformat/description
msgid "Automatic text wrapping and reformatting"
msgstr "自動的なテキスト折り返しと整形"

#. leap/perl-Text-BibTeX/summary
msgid "Interface to Read and Parse BibTeX Files"
msgstr "BibTeX ファイルの読み込みと処理のインターフェイス"

#. leap/perl-Text-BibTeX/description
msgid ""
"The 'Text::BibTeX' module serves mainly as a high-level introduction to the "
"'Text::BibTeX' library, for both code and documentation purposes. The code "
"loads the two fundamental modules for processing BibTeX files ('Text::"
"BibTeX::File' and 'Text::BibTeX::Entry'), and this documentation gives a "
"broad overview of the whole library that isn't available in the "
"documentation for the individual modules that comprise it.\n"
"\n"
"In addition, the 'Text::BibTeX' module provides a number of miscellaneous "
"functions that are useful in processing BibTeX data (especially the kind "
"that comes from bibliographies as defined by BibTeX 0.99, rather than "
"generic database files). These functions don't generally fit in the object-"
"oriented class hierarchy centred around the 'Text::BibTeX::Entry' class, "
"mainly because they are specific to bibliographic data and operate on "
"generic strings (rather than being tied to a particular BibTeX entry). These "
"are also documented here, in \"MISCELLANEOUS FUNCTIONS\".\n"
"\n"
"Note that every module described here begins with the 'Text::BibTeX' prefix. "
"For brevity, I have dropped this prefix from most class and module names in "
"the rest of this manual page (and in most of the other manual pages in the "
"library)."
msgstr ""
"'Text::BibTeX' モジュールは主に、コード向けおよびドキュメンテーション向けのラ"
"イブラリである 'Text::BigTeX' ライブラリに対して、高レベルな導入部として動作"
"するものです。コードは BibTeX ファイルを処理するために 2 種類の基本モジュー"
"ル ('Text::BibTeX::File' および 'Text::BibTeX::Entry') を読み込む仕組みで、こ"
"のドキュメンテーションでは、含まれる個別のモジュールに対するドキュメンテー"
"ションには掲載されていないような、広範囲の概要を説明しています。\n"
"\n"
"これに加えて、 'Text::BibTeX' モジュールは、 BibTeX データを処理する際に便利"
"な多数の様々な関数 (汎用データベースファイルではなく、特に BibTeX 0.99 で定義"
"されている文献情報からのもの)  も提供しています。これらの関数は、主に文献デー"
"タ固有のものであったり、 (特定の BibTeX 項目に結びつくものではなく) 汎用の文"
"字列に対して動作するものであることから、  'Text::BigTeX::Entry' クラスに代表"
"されるようなオブジェクト指向のクラス構造にはうまく当てはまりません。これらも"
"本ドキュメンテーションで記述しています。詳しくは \"MISCELLANEOUS FUNCTIONS\" "
"をお読みください。\n"
"\n"
"なお、ここで説明している各モジュールは 'Text::BibTeX' の接頭辞で始まります。"
"モジュール名を簡潔にする理由から、多くのクラスやモジュール名の説明 (およびラ"
"イブラリ内のマニュアルページ) ではこの接頭辞は省略してありますので、ご注意く"
"ださい。"

#. leap/perl-Text-BibTeX/perl-Text-BibTeX-devel/summary
msgid "C library for parsing and processing BibTeX files"
msgstr "BibTeX ファイルの解釈と処理のための C ライブラリ"

#. leap/perl-Text-BibTeX/perl-Text-BibTeX-devel/description
msgid ""
"The libbtparse is a C library for parsing and processing BibTeX files. Note "
"that the interface provided by libbtparse, while complete, is fairly low-"
"level.  If you have more sophisticated needs, you might be interested the "
"\"Text::BibTeX\" module for Perl."
msgstr ""
"libbtparse は BibTeX ファイルを解釈し、処理するための C ライブラリです。ただ"
"し、 libbtparse が提供するインターフェイスは、完成時点で比較的低レベルなもの"
"になります。より洗練された使い方をご希望の場合は、 Perl 向けの \"Text::BibTeX"
"\" モジュールをお使いください。"

#. leap/perl-Text-Brew/summary
msgid "An implementation of the Brew edit distance"
msgstr "Brew edit distance の実装"

#. leap/perl-Text-Brew/description
msgid ""
"This module implements the Brew edit distance that is very close to the "
"dynamic programming technique used for the Wagner-Fischer (and so for the "
"Levenshtein) edit distance. Please look at the module references below. For "
"more information about the Brew edit distance see: <http://ling.ohio-state."
"edu/~cbrew/795M/string-distance.html>\n"
"\n"
"The difference here is that you have separated costs for the DELetion and "
"INSertion operations (but with the default to 1 for both, you obtain the "
"Levenshtein edit distance). But the most interesting feature is that you can "
"obtain the description of the edits needed to transform the first string "
"into the second one (not vice versa: here DELetions are separated from "
"INSertions). The difference from the original algorithm by Chris Brew is "
"that I have added the SUBST operation, making it different from MATCH "
"operation.\n"
"\n"
"The symbols used here are:\n"
"\n"
" INITIAL that is the INITIAL operation (i.e. NO operation)  MATCH\t that is "
"the MATCH operation (0 is the default cost)  SUBST\t that is the "
"SUBSTitution operation (1 is the default cost)  DEL\t that is the DELetion "
"operation (1 is the default cost)  INS\t that is the INSertion operation (1 "
"is the default cost)\n"
"\n"
"and you can change the default costs (see below).\n"
"\n"
"You can make INS and DEL the same operation in a simple way:\n"
"\n"
" 1) give both the same cost  2) change the output string DEL to INS/DEL (o "
"whatever)  3) change the output string INS to INS/DEL (o whatever)"
msgstr ""
"このモジュールは Brew edit distance と呼ばれる、 Wagner-Fischer (および "
"Levenshtein) 編集距離で使用される動的なプログラミングテクニックに非常に似た仕"
"組みを実装するものです。まずはモジュールのリファレンスをご覧ください。また、 "
"Brew edit distance に関する詳細は、 <http://ling.ohio-state.edu/~cbrew/795M/"
"string-distance.html> (英語) をお読みください。\n"
"\n"
"このモジュールでの違いは、削除または挿入の動作に対して別々のコストがあるとい"
"う点です (ただし既定値はいずれも 1 であり、この場合は Levenshtein 編集距離に"
"なります) 。ですが、最も興味深い機能は、最初の文字列を 2 つめの文字列に変形す"
"るのに必要な、編集に関する詳細を得られるという機能です (削除と挿入は別々に扱"
"われるため、逆の情報はまた異なることになります) 。 Chris Brew 氏によるオリジ"
"ナルの改変版アルゴリズムでは、 MATCH 操作とは異なる SUBST 操作が加えられてい"
"ます。\n"
"\n"
"ここで使用されるシンボルは下記のとおりです:\n"
"\n"
" INITIAL 初期操作 (なにも操作していない状態)  MATCH\t MATCH 操作 (既定ではコ"
"スト 0)  SUBST\t 置き換え (SUBSTitution) 操作 (既定ではコスト 1)  DEL\t 削除 "
"(DELetion) 操作 (既定ではコスト 1)  INS\t 挿入 (INSertion) 操作 (既定ではコス"
"ト 1)\n"
"\n"
"なお、コスト値を変更することもできます (下記参照) 。\n"
"\n"
"また、 INS と DEL を同じ操作にするには、下記のようにします:\n"
"\n"
" 1) 同じコスト値を設定する  2) 出力文字列の DEL を INS/DEL にする  3) 出力文"
"字列の INS を INS/DEL にする"

#. leap/perl-Text-CSV/summary
msgid "Comma-Separated Values Manipulator (Using Xs or Pureperl)"
msgstr "カンマ区切りの値を操作するルーチン (XS および PurePerl)"

#. leap/perl-Text-CSV/description
msgid ""
"Text::CSV is a thin wrapper for Text::CSV_XS-compatible modules now. All the "
"backend modules provide facilities for the composition and decomposition of "
"comma-separated values. Text::CSV uses Text::CSV_XS by default, and when "
"Text::CSV_XS is not available, falls back on Text::CSV_PP, which is bundled "
"in the same distribution as this module."
msgstr ""
"Text::CSV は Text::CSV_XS 互換のモジュールに対する薄いラッパーです。カンマ区"
"切りの値に対して、読み込みと書き込みの両方をバックエンド側に渡します。 Text::"
"CSV では Text::CSV_XS を既定で使用しますが、 Text::CSV_XS が利用できない場"
"合、このモジュール内に同梱されている Text::CSV_PP をフォールバックとして使用"
"します。"

#. leap/perl-Text-CSV_XS/summary
msgid "Comma-Separated Values Manipulation Routines"
msgstr "カンマ区切りの値 (CSV) を操作するルーチン"

#. leap/perl-Text-CSV_XS/description
msgid ""
"Text::CSV_XS provides facilities for the composition and decomposition of "
"comma-separated values. An instance of the Text::CSV_XS class will combine "
"fields into a 'CSV' string and parse a 'CSV' string into fields.\n"
"\n"
"The module accepts either strings or files as input and support the use of "
"user-specified characters for delimiters, separators, and escapes."
msgstr ""
"Text::CSV_XS は、カンマ区切りの値を組み立てたり分解したりすることができま"
"す。 Text:CSV_XS のインスタンスは、値を組み合わせて CSV 文字列を作成したり、 "
"CSV 文字列を値に変換したりすることができます。\n"
"\n"
"このモジュールは文字列またはファイルを入力として受け付けるほか、ユーザ指定の"
"区切り文字やセパレータ、エスケープなどを使用することができます。"

#. leap/perl-Text-Capitalize/summary
msgid ""
"Capitalize strings (\"to WORK AS titles\" becomes \"To Work as Titles\")"
msgstr ""
"大文字と小文字の調整 (\"to WORK AS titles\" を \"To Work as Titles\" に)"

#. leap/perl-Text-Capitalize/description
msgid ""
"Text::Capitalize provides some routines for *title-like* formatting of "
"strings.\n"
"\n"
"The simple *capitalize* function just makes the inital character of each "
"word uppercase, and forces the rest to lowercase.\n"
"\n"
"The *capitalize_title* function applies English title case rules (discussed "
"below) where only the \"important\" words are supposed to be capitalized. "
"There are also some customization features provided to allow the user to "
"choose variant rules.\n"
"\n"
"Comparing *capitalize* and *captialize_title*:\n"
"\n"
"  Input:             \"lost watches of splitsville\"   capitalize:        "
"\"Lost Watches Of Splitsville\"   capitalize_title:  \"Lost Watches of "
"Splitsville\"\n"
"\n"
"Some examples of formatting with *capitalize_title*:\n"
"\n"
"  Input:             \"KiLLiNG TiMe\"   capitalize_title:  \"Killing Time\"\n"
"\n"
"  Input:             \"we have come to wound the autumnal city\"   "
"capitalize_title:  \"We Have Come to Wound the Autumnal City\"\n"
"\n"
"  Input:             \"ask for whom they ask for\"   captialize_title:  "
"\"Ask for Whom They Ask For\"\n"
"\n"
"Text::Capitalize also provides some functions for special effects such as\n"
"*scramble_case*, which typically would be used for this sort of "
"transformation:\n"
"\n"
"  Input:            \"get whacky\"   scramble_case:    \"gET wHaCkY\"  (or "
"something similar)"
msgstr ""
"Text::Capitalize は文字列を *タイトルのように* 整形するためのいくつかのルーチ"
"ンを提供します。\n"
"\n"
"シンプルな *capitalize* 関数では、各単語の最初の文字を大文字に、それ以外を小"
"文字に強制します。\n"
"\n"
"*capitalize_title* 関数では、 *重要な* 単語の最初の文字のみを大文字にする、英"
"語のタイトルルール (下記参照) を適用します。様々なルールを選択できるよう、カ"
"スタマイズ機能も用意されています。\n"
"\n"
"*capitalize* と *captialize_title* の違いは下記のとおりです:\n"
"\n"
"  入力値:             \"lost watches of splitsville\"   capitalize:        "
"\"Lost Watches Of Splitsville\"   capitalize_title:  \"Lost Watches of "
"Splitsville\"\n"
"\n"
"*capitalize_title* での整形例は下記のとおりです:\n"
"\n"
"  入力:             \"KiLLiNG TiMe\"   capitalize_title:  \"Killing Time\"\n"
"\n"
"  入力:             \"we have come to wound the autumnal city\"   "
"capitalize_title:  \"We Have Come to Wound the Autumnal City\"\n"
"\n"
"  入力:             \"ask for whom they ask for\"   captialize_title:  \"Ask "
"for Whom They Ask For\"\n"
"\n"
"Text::Capitalize では *scramble_case* のような特殊効果用の関数もいくつか用意"
"されています。 *scramble_case* は、大文字と小文字をランダムに入れ替えるための"
"関数です:\n"
"\n"
"  入力:            \"get whacky\"   scramble_case:    \"gET wHaCkY\"  (実行の"
"たびに変化します)"

#. leap/perl-Text-CharWidth/summary
msgid "Get number of occupied columns of a string on terminal"
msgstr "端末上の文字列幅の取り出し"

#. leap/perl-Text-CharWidth/description
msgid ""
"Get number of occupied columns of a string on terminal\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     &#20037;&#20445;&#30000; &#26234;&#24195; (Tomohiro KUBOTA) "
"<kubota@debian.org>"
msgstr ""
"端末上で文字列が占有する列の長さを取得します。\n"
"\n"
"\n"
"\n"
"作者:\n"
"--------     &#20037;&#20445;&#30000; &#26234;&#24195; (Tomohiro KUBOTA) "
"<kubota@debian.org>"

#. leap/perl-Text-DelimMatch/summary
msgid "DelimMatch for Locating Delimited Substrings with Proper Nesting"
msgstr ""
"適切な入れ子処理を行なう、区切り文字付きの文字列群を作成する DelimMatch"

#. leap/perl-Text-DelimMatch/description
msgid ""
"DelimMatch is a Perl 5 module that provides functions for locating delimited "
"substrings with proper nesting."
msgstr ""
"DelimMatch は、区切り文字で区切られた文字列群を作成する関数のある Perl 5 モ"
"ジュールです。"

#. leap/perl-Text-Diff/summary
msgid "Perform diffs on files and record sets"
msgstr "ファイルやレコードセットに対する差分検出"

#. leap/perl-Text-Diff/description
msgid ""
"'diff()' provides a basic set of services akin to the GNU 'diff' utility. It "
"is not anywhere near as feature complete as GNU 'diff', but it is better "
"integrated with Perl and available on all platforms. It is often faster than "
"shelling out to a system's 'diff' executable for small files, and generally "
"slower on larger files.\n"
"\n"
"Relies on Algorithm::Diff for, well, the algorithm. This may not produce the "
"same exact diff as a system's local 'diff' executable, but it will be a "
"valid diff and comprehensible by 'patch'. We haven't seen any differences "
"between Algorithm::Diff's logic and GNU 'diff''s, but we have not examined "
"them to make sure they are indeed identical. \n"
"*Note*: If you don't want to import the 'diff' function, do one of the "
"following:\n"
"\n"
"   use Text::Diff ();\n"
"\n"
"   require Text::Diff;\n"
"\n"
"That's a pretty rare occurrence, so 'diff()' is exported by default.\n"
"\n"
"If you pass a filename, but the file can't be read, then 'diff()' will "
"'croak'."
msgstr ""
"\"diff()\" は GNU \"diff\" ユーティリティに似た仕組みを提供する基本サービス集"
"です。 GNU \"diff\" との完全な機能互換はありませんが、 Perl との統合をより便"
"利な仕組みで提供していて、全てのプラットフォームで動作します。また、システム"
"の \"diff\" プログラムを実行する場合に比べて、小さなファイルの場合はより高速"
"に、大きなファイルの場合は一般に遅く動作します。\n"
"\n"
"差分抽出の仕組みは Algorithm::Diff のものに依存しています。そのため、システム"
"内に存在するローカルの \"diff\" プログラムとは、出力が完全に一致するとは限り"
"ませんが、 diff の形式としては正しく、 \"patch\" プログラムからも利用できる形"
"式が出力できます。 Algorithm::Diff と GNU diff との違いを確認しているわけでは"
"ありませんが、確実に等価なものであるかどうかは確認されていないことに注意して"
"ください。\n"
"*注意*: 'diff' 関数をインポートしたくない場合は、下記のいずれかを実施してくだ"
"さい:\n"
"\n"
"   use Text::Diff ();\n"
"\n"
"   require Text::Diff;\n"
"\n"
"これはあまり使われることはありません。 'diff()' は既定で公開されるためで"
"す。\n"
"\n"
"ファイル名を指定した場合で、そのファイルを読み込むことができない場合、 "
"'diff()' は 'croak' します。"

#. leap/perl-Text-German/summary
#. leap/perl-Text-German/description
msgid "Text::German Perl module"
msgstr "Text::German Perl モジュール"

#. leap/perl-Text-Glob/summary
msgid "Match Globbing Patterns Against Text"
msgstr "テキストに対するグロブパータンマッチ"

#. leap/perl-Text-Glob/description
msgid ""
"Text::Glob implements glob(3) style matching that can be used to match "
"against text, rather than fetching names from a filesystem. If you want to "
"do full file globbing use the File::Glob module instead."
msgstr ""
"Text::Glob は、 glob(3) スタイルのマッチング処理を、ファイルシステム内のファ"
"イル名に対してではなく、テキストに対して実装するモジュールです。ファイルに対"
"する完全なグロブ機能を必要とする場合は、 File::Glob モジュールをお使いくださ"
"い。"

#. leap/perl-Text-Hunspell/summary
msgid "Perl interface to the Hunspell library"
msgstr "Hunspell ライブラリに対する Perl インターフェイス"

#. leap/perl-Text-Hunspell/description
msgid ""
"This module provides a Perl interface to the *Hunspell* library. This module "
"is to meet the need of looking up many words, one at a time, in a single "
"session, such as spell-checking a document in memory.\n"
"\n"
"The example code describes the interface on http://hunspell.sf.net"
msgstr ""
"このモジュールは *Hunspell* ライブラリに対する Perl のインターフェイスを提供"
"します。このモジュールは、メモリ内での文書のスペルチェックなど、単一のセッ"
"ション内で多数の単語を 1 つずつ検索するような要件に適合しています。\n"
"\n"
"インターフェイスに関するサンプルコードは、 http://hunspell.sf.net をご覧くだ"
"さい。"

#. leap/perl-Text-Iconv/summary
msgid "Perl interface to iconv() codeset conversion function"
msgstr "iconv() コードセット変換関数に対する Perl インターフェイス"

#. leap/perl-Text-Iconv/description
msgid ""
"The Text::Iconv module provides a Perl interface to the iconv() function as "
"defined by the Single UNIX Specification.\n"
"\n"
"The convert() method converts the encoding of characters in the input string "
"from the fromcode codeset to the tocode codeset, and returns the result.\n"
"\n"
"Settings of fromcode and tocode and their permitted combinations are "
"implementation-dependent. Valid values are specified in the system "
"documentation; the iconv(1) utility should also provide a -l option that "
"lists all supported codesets."
msgstr ""
"Text::Iconv モジュールは、 Single UNIX Specification で規定された iconv() 関"
"数に対して、この Perl インターフェイスを提供します。\n"
"\n"
"convert() メソッドは入力文字列の文字エンコーディングを、 fromcode のコード"
"セットから tocode のコードセットに変換し、結果を返します。\n"
"\n"
"fromcode と tocode の設定と、設定可能な組み合わせについては、実装に依存した作"
"りになっています。正しい値はシステムのドキュメンテーションをお読みください; "
"iconv(1) ユーティリティでは、 -l オプションで対応するコードセットの一覧を表示"
"することができます。"

#. leap/perl-Text-Kakasi/summary
msgid "Perl binding for KAKASI, the kanji kana simple inverter"
msgstr "漢字かな変換 KAKASI 向け Perl バインディング"

#. leap/perl-Text-Kakasi/description
msgid ""
"This module provides libkakasi interface for perl. libkakasi is a part of "
"KAKASI.  KAKASI is the language processing filter to convert Kanji "
"characters to Hiragana, Katakana or Romaji and may be helpful to read "
"Japanese documents.  More information about KAKASI is available at <http://"
"kakasi.namazu.org/>."
msgstr ""
"このモジュールは、 Perl 向けの libkakasi インターフェイスを提供します。 "
"libkakasi は KAKASI の一部です。 KAKASI は漢字をひらがなやカタカナ、ローマ字"
"に 変換し、日本語の文書を読みやすくするためのものです。 KAKASI に対する詳細情"
"報は、 <http://kakasi.namazu.org/> をご覧ください。"

#. leap/perl-Text-Markdown/summary
msgid "Convert Markdown syntax to (X)HTML"
msgstr "Markdown 文法を (X)HTML に変換するモジュール"

#. leap/perl-Text-Markdown/description
msgid ""
"Markdown is a text-to-HTML filter; it translates an easy-to-read / easy-to-"
"write structured text format into HTML. Markdown's text format is most "
"similar to that of plain text email, and supports features such as headers, "
"*emphasis*, code blocks, blockquotes, and links.\n"
"\n"
"Markdown's syntax is designed not as a generic markup language, but "
"specifically to serve as a front-end to (X)HTML. You can use span-level HTML "
"tags anywhere in a Markdown document, and you can use block level HTML tags "
"(like <div> and <table> as well)."
msgstr ""
"Markdown はテキストから HTML へのフィルタです。このモジュールは、読みやすく書"
"きやすい構造化テキスト形式を、 HTML に変換します。 Markdown のテキスト形式は"
"純粋テキストで書かれた電子メールに似た構造で、ヘッダや *強調表示* のほか、"
"コードブロックやブロック引用、リンクなどにも対応しています。\n"
"\n"
"Markdown の文法は一般的なマークアップ言語として設計されているものではなく、特"
"に (X)HTML に対するフロントエンドとして動作するよう設計されています。 "
"Markdown 文書内の任意の場所で、 span レベルの HTML タグを利用することもできる"
"ほか、 (<div> や <table> などのように) ブロックレベルの HTML タグも利用するこ"
"とができます。"

#. leap/perl-Text-Patch/summary
msgid "Patches text with given patch"
msgstr "指定した修正 (パッチ) をテキストに適用するモジュール"

#. leap/perl-Text-Patch/description
msgid ""
"Text::Patch combines source text with given diff (difference) data. Diff "
"data is produced by Text::Diff module or by the standard diff utility (man "
"diff, see -u option). \n"
"* patch( $source, $diff, options... )\n"
"\n"
"  First argument is source (original) text. Second is the diff data. Third   "
"argument can be either hash reference with options or all the rest   "
"arguments will be considered patch options:\n"
"\n"
"      $output = patch( $source, $diff, STYLE => \"Unified\", ... );\n"
"\n"
"      $output = patch( $source, $diff, { STYLE => \"Unified\", ... } );\n"
"\n"
"  Options are:\n"
"\n"
"    STYLE => 'Unified'\n"
"\n"
"  STYLE can be \"Unified\", \"Context\" or \"OldStyle\".\n"
"\n"
"  The 'Unified' diff format looks like this:\n"
"\n"
"    @@ -1,7 +1,6 @@     -The Way that can be told of is not the eternal "
"Way;     -The name that can be named is not the eternal name.      The "
"Nameless is the origin of Heaven and Earth;     -The Named is the mother of "
"all things.     +The named is the mother of all things.     +      Therefore "
"let there always be non-being,        so we may see their subtlety,      And "
"let there always be being,     @@ -9,3 +8,6 @@      The two are the "
"same,      But after they are produced,        they have different "
"names.     +They both may be called deep and profound.     +Deeper and more "
"profound,     +The door of all subtleties!"
msgstr ""
"Text::Patch は指定した diff (差分) データをテキストに適用するモジュールで"
"す。 diff データは Text::Diff で作成したものか、もしくは標準の diff ユーティ"
"リティ (詳しくは man diff で -u オプションをご覧ください) で作成したものを利"
"用することができます。\n"
"* patch( $source, $diff, options... )\n"
"\n"
"  最初のパラメータでは元の (オリジナル) テキストを指定します。 2 つめには "
"diff のデータを指定します。 3 つめのパラメータはオプションを含むハッシュ参照"
"か、もしくはオプションをそのまま指定します:\n"
"\n"
"      $output = patch( $source, $diff, STYLE => \"Unified\", ... );\n"
"\n"
"      $output = patch( $source, $diff, { STYLE => \"Unified\", ... } );\n"
"\n"
"  オプションは下記のとおりです:\n"
"\n"
"    STYLE => 'Unified'\n"
"\n"
"  STYLE には \"Unified\", \"Context\", \"OldStyle\" のいずれかを停止しま"
"す。\n"
"\n"
"  'Unified' 形式の diff は下記のような形式です:\n"
"\n"
"    @@ -1,7 +1,6 @@\n"
"-The Way that can be told of is not the eternal Way;\n"
"-The name that can be named is not the eternal name.\n"
" The Nameless is the origin of Heaven and Earth;\n"
"-The Named is the mother of all things.\n"
"+The named is the mother of all things.\n"
"+      Therefore let there always be non-being,\n"
"        so we may see their subtlety,\n"
"      And let there always be being,\n"
"@@ -9,3 +8,6 @@\n"
" The two are the same,\n"
" But after they are produced,\n"
" they have different names.\n"
"+They both may be called deep and profound.\n"
"+Deeper and more profound,\n"
"+The door of all subtleties!"

#. leap/perl-Text-RecordParser/summary
msgid "Read Record-Oriented Files"
msgstr "読み込み志向ファイルの読み込み"

#. leap/perl-Text-RecordParser/description
msgid ""
"This module is for reading record-oriented data in a delimited text file. "
"The most common example have records separated by newlines and fields "
"separated by commas or tabs, but this module aims to provide a consistent "
"interface for handling sequential records in a file however they may be "
"delimited. Typically this data lists the fields in the first line of the "
"file, in which case you should call 'bind_header' to bind the field name (or "
"not, and it will be called implicitly). If the first line contains data, you "
"can still bind your own field names via 'bind_fields'. Either way, you can "
"then use many methods to get at the data as arrays or hashes."
msgstr ""
"このモジュールは、項目ごとに区切られたテキストファイルから、レコード志向の"
"データを読み込むことができるモジュールです。よくある例としては、カンマやタブ"
"でフィールドを区切り、改行でレコードを区切るタイプのファイルがありますが、こ"
"のモジュールは、どのような形式で区切られていたとしても、ファイル内の個別のレ"
"コードを処理することができる一貫したインターフェイスを提供します。ファイルの"
"冒頭の行に各フィールドの名前が含まれていることもありますが、この場合は "
"'bind_header' を利用してフィールド名に結び付けることができます (暗黙のうちに"
"呼び出されることもあります) 。最初の行にデータが含まれている場合も、 "
"'bind_fields' で独自の名前を付与することができます。いずれにしても、データを"
"配列やハッシュで取得するための多数の方法が用意されています。"

#. leap/perl-Text-Reform/summary
msgid "Manual text wrapping and reformatting"
msgstr "手動テキスト折り返し／再書式化"

#. leap/perl-Text-Reform/description
msgid ""
"The module supplies a re-entrant, highly configurable replacement for the "
"built-in Perl format() mechanism.\n"
"\n"
"Author:\n"
"-------         Damian Conway <damian@conway.org>"
msgstr ""
"このモジュールは、リエントラントで高度に設定可能な、 Perl 内蔵の format() 関"
"数に対する置き換え関数を提供します。\n"
"\n"
"作者:\n"
"-------         Damian Conway <damian@conway.org>"

#. leap/perl-Text-Roman/summary
msgid "Allows conversion between Roman and Arabic algarisms."
msgstr "ローマ数字とアラビア数字の変換を行なうモジュール"

#. leap/perl-Text-Roman/description
msgid ""
"This package supports both conventional Roman algarisms (which range from "
"_1_ to _3999_) and Milhar Romans, a variation which uses a bar across the "
"algarism to indicate multiplication by _1_000_. For the purposes of this "
"module, acceptable syntax consists of an underscore suffixed to the algarism "
"e.g. IV_V = _4_005_. The term Milhar apparently derives from the Portuguese "
"word for \"thousands\" and the range of this notation extends the range of "
"Roman numbers to _3999 * 1000 + 3999 = 4_002_999_.\n"
"\n"
"Note: the functions in this package treat Roman algarisms in a case-"
"insensitive manner such that \"VI\" == \"vI\" == \"Vi\" == \"vi\".\n"
"\n"
"The following functions may be imported into the caller package by name:"
msgstr ""
"このパッケージは、一般的なローマ数字 (_1_ から _3999_ まで) と Milhar ローマ"
"数字に対応するほか、 _1_000_ で乗算されていることを示す棒を使用するタイプのも"
"のにも対応しています。このモジュールの目的のため、受け入れ可能な文法は、アラ"
"ビア数字の記法の後にアンダースコアを含めています (例: IV_V = 4_005_) 。 "
"Milhar はポルトガル語の \"千\" を意味する用語で、この表記法によってローマ数字"
"の範囲が _3999 * 1000 + 3999 = 4_002_999_ まで拡張されています。\n"
"\n"
"注意: このパッケージ内の関数では、ローマ数字の大文字と小文字は区別しません。"
"たとえば \"VI\" == \"vI\" == \"Vi\" == \"vi\" になります。\n"
"\n"
"呼び出し側のパッケージで名前を指定することで、関数をインポートすることができ"
"ます。"

#. leap/perl-Text-Soundex/summary
msgid "Implementation of the soundex algorithm"
msgstr "soundex アルゴリズムの実装"

#. leap/perl-Text-Soundex/description
msgid ""
"Soundex is a phonetic algorithm for indexing names by sound, as pronounced "
"in English. The goal is for names with the same pronunciation to be encoded "
"to the same representation so that they can be matched despite minor "
"differences in spelling. Soundex is the most widely known of all phonetic "
"algorithms and is often used (incorrectly) as a synonym for \"phonetic "
"algorithm\". Improvements to Soundex are the basis for many modern phonetic "
"algorithms. (Wikipedia, 2007)\n"
"\n"
"This module implements the original soundex algorithm developed by Robert "
"Russell and Margaret Odell, patented in 1918 and 1922, as well as a "
"variation called \"American Soundex\" used for US census data, and current "
"maintained by the National Archives and Records Administration (NARA).\n"
"\n"
"The soundex algorithm may be recognized from Donald Knuth's *The Art of "
"Computer Programming*. The algorithm described by Knuth is the NARA "
"algorithm.\n"
"\n"
"The value returned for strings which have no soundex encoding is defined "
"using '$Text::Soundex::nocode'. The default value is 'undef', however values "
"such as ''Z000'' are commonly used alternatives.\n"
"\n"
"For backward compatibility with older versions of this module the '$Text::"
"Soundex::nocode' is exported into the caller's namespace as "
"'$soundex_nocode'.\n"
"\n"
"In scalar context, 'soundex()' returns the soundex code of its first "
"argument. In list context, a list is returned in which each element is the "
"soundex code for the corresponding argument passed to 'soundex()'. For "
"example, the following code assigns @codes the value '('M200', 'S320')':\n"
"\n"
"   @codes = soundex qw(Mike Stok);\n"
"\n"
"To use 'Text::Soundex' to generate codes that can be used to search one of "
"the publically available US Censuses, a variant of the soundex algorithm "
"must be used:\n"
"\n"
"    use Text::Soundex;     $code = soundex_nara($name);\n"
"\n"
"An example of where these algorithm differ follows:\n"
"\n"
"    use Text::Soundex;     print soundex(\"Ashcraft\"), \"\\n\";       # "
"prints: A226     print soundex_nara(\"Ashcraft\"), \"\\n\";  # prints: A261"
msgstr ""
"Soundex は英語での発音順に名前を並べ替えるアルゴリズムです。このプロジェクト"
"は、同じ発音の単語を同じ表現にエンコードすることで、細かいスペルミスに関わら"
"ず検索できるようにすることを目的としています。 Soundex は既知のすべてのアルゴ"
"リズムの中でもっともよく知られていて、かつしばしば (誤って) 用いられるアルゴ"
"リズム \"phonetic algorithm\" を使用しています。 Soundex に対する改善は、多数"
"のモダンなアルゴリズムに対するベースともなっています (Wikipedia, 2007) 。\n"
"\n"
"このモジュールは、 1918 年および 1922 年に特許となり、 Robert Russell 氏と "
"Margaret Odell 氏が開発したオリジナルの soundex アルゴリズムのほか、 US "
"census data で使用され、現在し National Archives and Records Administration "
"(NARA) がメンテナンスしている \"American Soundex\" と呼ばれる派生物を実装して"
"います。\n"
"\n"
"soundex アルゴリズムは Donald Knuth 氏の *The Art of Computer Programming* で"
"も言及されていて、 Knuth 氏は NARA アルゴリズムと表現しています。\n"
"\n"
"soundex エンコーディングを使用していない文字列を指定した場合、それに対する返"
"り値は '$Text::Soundex::nocode' を利用して設定されます。既定値は 'undef' です"
"が、 ''Z000'' のような値を代替的に用いる場合もあります。\n"
"\n"
"また、このモジュールの旧バージョンと互換性を維持するため、 '$Text::Soundex::"
"nocode' は呼び出し元のネームスペース内に '$soundex_nocode' として公開されま"
"す。\n"
"\n"
"スカラーコンテキストでは、 'soundex()' は最初のパラメータの soundex コードを"
"返します。リストコンテキストでは、各要素の soundex コードを 'soundex()' に渡"
"した場合と同様に、リストを返します。たとえば、下記のコードは @codes に "
"'('M200', 'S320')' が設定されます:\n"
"\n"
"   @codes = soundex qw(Mike Stok);\n"
"\n"
"'Text::Soundex' を利用して US Censuses が使用する派生アルゴリズムのコードを生"
"成したい場合は、下記のようにします:\n"
"\n"
"    use Text::Soundex;     $code = soundex_nara($name);\n"
"\n"
"アルゴリズムの違いにより、それぞれ下記のように表示されます:\n"
"\n"
"    use Text::Soundex;     print soundex(\"Ashcraft\"), \"\\n\";       # "
"prints: A226     print soundex_nara(\"Ashcraft\"), \"\\n\";  # prints: A261"

#. leap/perl-Text-SpellChecker/summary
msgid "OO interface for spell-checking a block of text"
msgstr "テキストのブロックをスペルチェックするための OO インターフェイス"

#. leap/perl-Text-SpellChecker/description
msgid ""
"This module is a thin layer above either Text::Aspell or Text::Hunspell "
"(preferring the latter if available), and allows one to spellcheck a body of "
"text.\n"
"\n"
"Whereas Text::(Hu|A)spell deals with words, Text::Spellchecker deals with "
"blocks of text. For instance, we provide methods for iterating through the "
"text, serializing the object (thus remembering where we left off), and "
"highlighting the current misspelled word within the text."
msgstr ""
"このモジュールは Text::Aspell または Text::Hunspell (後者のほうが望ましいで"
"す) に対する薄いレイヤで、テキストの本文に対してスペルチェックを行なうことが"
"できるモジュールです。\n"
"\n"
"Text::(Hu|A)spell が単語を扱うのに対して、 Text::Spellchecker はテキストのブ"
"ロックを扱います。たとえばテキスト内の単語の列挙を行なうメソッドや、オブジェ"
"クトのシリアライズ (どこで中断したのかを覚えておくため) を行なうメソッド、テ"
"キスト内で現在スペルの誤っている個所のハイライト表示などの機能を提供していま"
"す。"

#. leap/perl-Text-Sprintf-Named/summary
msgid "Sprintf-like function with named conversions"
msgstr "連想配列を利用した sprintf のような機能"

#. leap/perl-Text-Sprintf-Named/description
msgid ""
"Text::Sprintf::Named provides a sprintf equivalent with named conversions. "
"Named conversions are sprintf field specifiers (like '\"%s\"' or '\"%4d'\") "
"only they are associated with the key of an associative array of parameters. "
"So for example '\"s\"' will emit the ''name'' parameter as a string, and "
"'\"4d\"' will emit the ''num'' parameter as a variable with a width of 4."
msgstr ""
"Text::Sprintf::Named は、 sprintf に似た仕組みを連想配列で使用できる仕組みで"
"す。連想配列は sprintf のフィールド指定 (例: '\"%s\"' や '\"%4d\"') で使用さ"
"れ、連想配列のキーで名前を指定します。たとえば '\"s\"' では、 \"name\" パラ"
"メータを文字列として出力し、 '\"4d\"' では \"num\" パラメータを幅 4 の数値で"
"出力します。"

#. leap/perl-Text-Table/summary
msgid "Organize Data in Tables"
msgstr "表形式でのデータの表示"

#. leap/perl-Text-Table/description
msgid ""
"Organization of data in table form is a time-honored and useful method of "
"data representation. While columns of data are trivially generated by "
"computer through formatted output, even simple tasks like keeping titles "
"aligned with the data columns are not trivial, and the one-shot solutions "
"one comes up with tend to be particularly hard to maintain. Text::Table "
"allows you to create and maintain tables that adapt to alignment "
"requirements as you use them."
msgstr ""
"データを表形式で表示するのは由緒正しいやり方であり、データを見やすく表示する"
"には適切な方法です。データ列は一般に、コンピュータが整形して出力したものを利"
"用しますが、データに対してタイトルを合わせるのは少し面倒であるうえ、一時的に"
"それを回避したとしても、その後の維持が面倒です。 Text::Table では、要件に合わ"
"せて割り当てを調整することのできる表を、作成および維持することができます。"

#. leap/perl-Text-TabularDisplay/summary
msgid "Display text in formatted table output"
msgstr "整形された表形式でのテキスト表示"

#. leap/perl-Text-TabularDisplay/description
msgid ""
"Text::TabularDisplay simplifies displaying textual data in a table. The "
"output is identical to the columnar display of query results in the mysql "
"text monitor. For example, this data:\n"
"\n"
"    1, \"Tom Jones\", \"(666) 555-1212\"     2, \"Barnaby Jones\", \"(666) "
"555-1213\"     3, \"Bridget Jones\", \"(666) 555-1214\"\n"
"\n"
"Used like so:\n"
"\n"
"    my $t = Text::TabularDisplay->new(qw(id name phone));     $t->add(1, "
"\"Tom Jones\", \"(666) 555-1212\");     $t->add(2, \"Barnaby Jones\", "
"\"(666) 555-1213\");     $t->add(3, \"Bridget Jones\", \"(666) "
"555-1214\");     print $t->render;\n"
"\n"
"Produces:\n"
"\n"
"    +----+---------------+----------------+     | id | name          | "
"phone          |     +----+---------------+----------------+     | 1  | Tom "
"Jones     | (666) 555-1212 |     | 2  | Barnaby Jones | (666) 555-1213 |     "
"| 3  | Bridget Jones | (666) 555-1214 |     +----+---------------"
"+----------------+"
msgstr ""
"Text::TabularDisplay は表形式でテキストデータを表示する作業をシンプルにしま"
"す。出力は mysql のテキストモニタで、問い合わせの結果を表示する際の表形式と同"
"じです。例えば下記のようなデータがあったとします:\n"
"\n"
"    1, \"Tom Jones\", \"(666) 555-1212\"     2, \"Barnaby Jones\", \"(666) "
"555-1213\"     3, \"Bridget Jones\", \"(666) 555-1214\"\n"
"\n"
"このようなデータを下記のように実行したとします:\n"
"\n"
"    my $t = Text::TabularDisplay->new(qw(id name phone));     $t->add(1, "
"\"Tom Jones\", \"(666) 555-1212\");     $t->add(2, \"Barnaby Jones\", "
"\"(666) 555-1213\");     $t->add(3, \"Bridget Jones\", \"(666) "
"555-1214\");     print $t->render;\n"
"\n"
"すると、下記のような出力になります:\n"
"\n"
"    +----+---------------+----------------+\n"
"     | id | name          | phone          |\n"
"     +----+---------------+----------------+\n"
"     | 1  | Tom Jones     | (666) 555-1212 |\n"
"     | 2  | Barnaby Jones | (666) 555-1213 |\n"
"     | 3  | Bridget Jones | (666) 555-1214 |\n"
"     +----+---------------+----------------+"

#. leap/perl-Text-Template/summary
msgid "Expand template text with embedded Perl"
msgstr "Perl コードの埋め込まれたテンプレートテキストへの記入"

#. leap/perl-Text-Template/description
msgid ""
"This is a library for generating form letters, building HTML pages, or "
"filling in templates generally. A `template' is a piece of text that has "
"little Perl programs embedded in it here and there. When you `fill in' a "
"template, you evaluate the little programs and replace them with their "
"values.\n"
"\n"
"You can store a template in a file outside your program. People can modify "
"the template without modifying the program. You can separate the formatting "
"details from the main code, and put the formatting parts of the program into "
"the template. That prevents code bloat and encourages functional separation."
msgstr ""
"これは定型文書の生成や HTML ページの構築、もしくはテンプレートへの一般的な記"
"入処理を行なうためのライブラリです。このライブラリにおける `テンプレート' と"
"は、小さな Perl プログラムが埋め込まれているテキストを意味します。テンプレー"
"トに対して `記入' すると、それらのプログラムを実際に実行して、その結果をその"
"場所に埋め込みます。\n"
"\n"
"テンプレートはプログラム外のファイルに保存することもできます。そのため、プロ"
"グラムを修正せずにテンプレートを修正することができます。また、メインのコード"
"とは別に整形の詳細設定を行なうこともできるほか、プログラム側のフォーマットの"
"部分をテンプレートに埋め込むこともできます。このような仕組みにより、コードの"
"肥大化を防ぎ、意味のある分割ができるようになっています。"

#. leap/perl-Text-Unidecode/summary
msgid "Plain Ascii Transliterations of Unicode Text"
msgstr "Unicode テキストの純粋 ASCII 変換"

#. leap/perl-Text-Unidecode/description
msgid ""
"It often happens that you have non-Roman text data in Unicode, but you can't "
"display it-- usually because you're trying to show it to a user via an "
"application that doesn't support Unicode, or because the fonts you need "
"aren't accessible. You could represent the Unicode characters as \"???????\" "
"or \"\\15BA\\15A0\\1610...\", but that's nearly useless to the user who "
"actually wants to read what the text says.\n"
"\n"
"What Text::Unidecode provides is a function, 'unidecode(...)' that takes "
"Unicode data and tries to represent it in US-ASCII characters (i.e., the "
"universally displayable characters between 0x00 and 0x7F). The "
"representation is almost always an attempt at _transliteration_-- i.e., "
"conveying, in Roman letters, the pronunciation expressed by the text in some "
"other writing system. (See the example in the synopsis.)\n"
"\n"
"NOTE:\n"
"\n"
"To make sure your perldoc/Pod viewing setup for viewing this page is "
"working: The six-letter word \"résumé\" should look like \"resume\" with an "
"\"/\" accent on each \"e\".\n"
"\n"
"For further tests, and help if that doesn't work, see below, A POD ENCODING "
"TEST."
msgstr ""
"非ローマ文字のテキストデータが Unicode で記述されている場合、 Unicode に対応"
"していないアプリケーションを利用していたり、対応するフォントをインストールし"
"ていないような場合には、それらを表示することができません。表示できない "
"Unicode 文字は \"???????\" や \"\\15BA\\15A0\\1610...\" のように表示されます"
"が、テキストを読みたいユーザにとって、そのような表示は意味がありません。\n"
"\n"
"Text::Unidecode は関数 'unidecode(...)' を提供しています。これは Unicode の"
"データを受け取って US-ASCII 文字 (0x00 から 0x7F までの一般的に表示可能な文"
"字) で表そうとしてくれる関数です。表記は常にほとんど音訳の形で表され、そのテ"
"キストの発音に最も近いローマ文字になります (添付の例をお読みください) 。\n"
"\n"
"注意:\n"
"\n"
"このページが正しく動作するかどうかお使いの perldoc/Pod の表示設定を確認したい"
"場合、 6 文字の単語 \"résumé\" が \"resume\" に似た表示になっているかどうかを"
"ご確認ください。 2, 6 文字目は \"e\" のアクセント表記です。\n"
"\n"
"さらに詳しいテストをしたい場合は、ヘルプではなく /A POD ENCODING TEST のマ"
"ニュアルページをお読みください。"

#. leap/perl-Text-WrapI18N/summary
msgid "Line Wrapping Module"
msgstr "行折り返しモジュール"

#. leap/perl-Text-WrapI18N/description
msgid ""
"Line wrapping module with support for multibyte, fullwidth, and combining "
"characters and languages without whitespaces between words."
msgstr ""
"マルチバイト文字列や全角文字、結合文字のほか、単語間に空白を挟まない言語にも"
"対応した、行折り返しモジュールです。"

#. leap/perl-Text-Wrapper/summary
msgid "Word wrap text by breaking long lines"
msgstr "長い行を改行するワードラップ機能"

#. leap/perl-Text-Wrapper/description
msgid ""
"Text::Wrapper provides simple word wrapping. It breaks long lines, but does "
"not alter spacing or remove existing line breaks. If you're looking for more "
"sophisticated text formatting, try the the Text::Format manpage module.\n"
"\n"
"Reasons to use Text::Wrapper instead of Text::Format: \n"
"* *\n"
"\n"
"  Text::Wrapper is significantly smaller. \n"
"* *\n"
"\n"
"  It does not alter existing whitespace or combine short lines. It only   "
"breaks long lines.\n"
"\n"
"Again, if Text::Wrapper doesn't meet your needs, try Text::Format."
msgstr ""
"Text::Wrapper はシンプルなワードラップ機能を提供します。 1 行が長い場合は分割"
"するものの、スペースを置き換えたり既存の改行を削除したりはしません。より洗練"
"されたテキスト整形機能をご希望の場合は、 Text::Format モジュールをお使いくだ"
"さい。\n"
"\n"
"Text::Format の代替として Text::Wrapper を使うべき理由:\n"
"* *\n"
"\n"
"  Text::Wrapper は著しく小さいです。\n"
"* *\n"
"\n"
"  既存のホワイトスペースを削除したり、短い行を組み合わせたりすることがありま"
"せん。長い行を分割するだけです。\n"
"\n"
"これでも Text::Wrapper が要件に合わない場合は、 Text::Format をご利用くださ"
"い。"

#. leap/perl-TheSchwartz/summary
msgid "Reliable job queue"
msgstr "信頼性のあるジョブキュー"

#. leap/perl-TheSchwartz/description
msgid ""
"TheSchwartz is a reliable job queue system. Your application can put jobs "
"into the system, and your worker processes can pull jobs from the queue "
"atomically to perform. Failed jobs can be left in the queue to retry later.\n"
"\n"
"_Abilities_ specify what jobs a worker process can perform. Abilities are "
"the names of 'TheSchwartz::Worker' sub-classes, as in the synopsis: the "
"'MyWorker' class name is used to specify that the worker script can perform "
"the job. When using the 'TheSchwartz' client's 'work' functions, the class-"
"ability duality is used to automatically dispatch to the proper class to do "
"the actual work.\n"
"\n"
"TheSchwartz clients will also prefer to do jobs for unused abilities before "
"reusing a particular ability, to avoid exhausting the supply of one kind of "
"job while jobs of other types stack up.\n"
"\n"
"Some jobs with high setup times can be performed more efficiently if a group "
"of related jobs are performed together. TheSchwartz offers a facility to "
"_coalesce_ jobs into groups, which a properly constructed worker can find "
"and perform at once. For example, if your worker were delivering email, you "
"might store the domain name from the recipient's address as the coalescing "
"value. The worker that grabs that job could then batch deliver all the mail "
"for that domain once it connects to that domain's mail server."
msgstr ""
"TheSchwartz は信頼性のあるジョブキューシステムです。お使いのアプリケーション"
"はシステム内にジョブを配置するだけで、ワーカープロセスがそれらをキューから拾"
"い上げて実行します。失敗したジョブは、再試行のためにキュー内に残されます。\n"
"\n"
"_Abilities_ では、ワーカープロセスが実行可能なジョブを指定します。 "
"_Abilities_ は 'TheSchwartz::Worker' サブクラスの名前で、 下記のような概要に"
"なっています: 'MyWorker' クラス名は、ワーカースクリプトがジョブを実行すること"
"ができることを示す際に使用します。  'TheSchwartz' クライアントの 'work' 関数"
"を使用すると、クラスの機能である二重化が自動的に動作して、実際の処理を適切な"
"クラスに発信します。\n"
"\n"
"TheSchwartz クライアントは、特定の機能を再利用する前に、未使用の機能に対して"
"ジョブを実行しようとします。これにより、他のジョブが止まってしまったような場"
"合でも、ジョブで埋め尽くされないようにしています。\n"
"\n"
"セットアップ回数の高いジョブによっては、関連するジョブをまとめて実行した方が"
"構成校になる場合もあります。 TheSchwartz では _coalesce_ (合体) という仕組み"
"でジョブをグループにまとめて、ワーカーから一括で実行できる仕組みがあります。"
"たとえば電子メールを配送するようなジョブの場合、受信者のアドレスからドメイン"
"情報を拾い集めて、まとめて送信した方がよいでしょう。これによりワーカーは、特"
"定のドメインのメールサーバに対して、そのドメイン宛のメールを一括で送信できる"
"ようになります。"

#. leap/perl-Throwable/summary
msgid "Role for classes that can be thrown"
msgstr "スロー可能なクラスのロール"

#. leap/perl-Throwable/description
msgid ""
"Throwable is a role for classes that are meant to be thrown as exceptions to "
"standard program flow. It is very simple and does only two things: saves any "
"previous value for '$@' and calls 'die $self'.\n"
"\n"
"Throwable is implemented with Moo, so you can stick to Moo or use Moose, as "
"you prefer."
msgstr ""
"throwableは、標準プログラムフローの例外としてスローされることを意図したクラスの役割です。これは非常に単純で、2つのことしかできません: '$@"
"' の前の値を保存し、'die$self' を呼び出します。\n"
"\n"
"ThrowableはMooで実装されているので、Mooに固執したり、Mooseを好きなように使うことができます。"

#. leap/perl-Tie-Cache/summary
msgid "LRU Cache in Memory"
msgstr "メモリ内 LRU キャッシュ"

#. leap/perl-Tie-Cache/description
msgid ""
"This module implements a least recently used (LRU) cache in memory through a "
"tie interface. Any time data is stored in the tied hash, that key/value pair "
"has an entry time associated with it, and as the cache fills up, those "
"members of the cache that are the oldest are removed to make room for new "
"entries.\n"
"\n"
"So, the cache only \"remembers\" the last written entries, up to the size of "
"the cache. This can be especially useful if you access great amounts of "
"data, but only access a minority of the data a majority of the time.\n"
"\n"
"The implementation is a hash, for quick lookups, overlaying a doubly linked "
"list for quick insertion and deletion. On a WinNT PII 300, writes to the "
"hash were done at a rate 3100 per second, and reads from the hash at 6300 "
"per second. Work has been done to optimize refreshing cache entries that are "
"frequently read from, code like $cache{entry}, which moves the entry to the "
"end of the linked list internally."
msgstr ""
"このモジュールは、メモリ内に Least Recently Used (LRU) 型のキャッシュを実装す"
"る仕組みです。時刻のデータはタイハッシュ内に保存されていて、キーと値の対でそ"
"れぞれの項目を保存しています。キャッシュが満杯になると、最も古いキャッシュが"
"廃棄され、新しい項目に置き換えられます。\n"
"\n"
"また、キャッシュはそのサイズの上限まで、最後に書き込んだ項目のみを \"記憶\" "
"します。これは特に、大量のデータにアクセスするような場合で、僅かなデータのア"
"クセスに長い時間を要する場合に便利な仕組みです。\n"
"\n"
"実装は参照を素早く行なうためにハッシュを使用しているほか、挿入や削除を素早く"
"行なうため、 2 重リンクのリストを使用しています。 WinNT PII 300 の環境では、"
"ハッシュへの書き込みは毎秒 3100 個程度、読み出しは毎秒 6300 個程度の性能に"
"なっています。処理はよく読み込まれる項目の更新 (たとえば $cache{entry} のよう"
"なコード) を最適化するため、内部的に対象の項目を末尾に移動させています。"

#. leap/perl-Tie-Cycle/summary
msgid "Cycle through a list of values via a scalar"
msgstr "スカラー値で値の一覧を繰り返し参照するモジュール"

#. leap/perl-Tie-Cycle/description
msgid ""
"You use 'Tie::Cycle' to go through a list over and over again. Once you get "
"to the end of the list, you go back to the beginning. You don't have to "
"worry about any of this since the magic of tie does that for you.\n"
"\n"
"The tie takes an array reference as its third argument. The tie should "
"succeed unless the argument is not an array reference. Previous versions "
"required you to use an array that had more than one element (what's the "
"pointing of looping otherwise?), but I've removed that restriction since the "
"number of elements you want to use may change depending on the situation.\n"
"\n"
"During the tie, this module makes a shallow copy of the array reference. If "
"the array reference contains references, and those references are changed "
"after the tie, the elements of the cycle will change as well. See the "
"included _test.pl_ script for an example of this effect."
msgstr ""
"一覧を何度も読み出したい場合は、 'Tie::Cycle'  をお使いください。一覧の最後ま"
"で読み出しが終わると、一覧の最初に戻ります。この tie の仕組みがすべてを行ない"
"ますので、何も心配する必要はありません。\n"
"\n"
"tie は 3 つめのパラメータとして配列の参照を受けつけます。 tie はパラメータが"
"配列の参照でない場合を除いて、必ず成功します。以前のバージョンでは、 2 つ以上"
"の要素を含む配列を指定する必要がありました (そうでないとループしてしまうか"
"ら？) が、状況に応じて要素の数が変わることがあるため、この制限は削除されてい"
"ます。\n"
"\n"
"tie については、このモジュールは配列の参照に対する浅いコピーを作成します。配"
"列の参照に参照が含まれていて、それらの参照が tie を実行した後に変更されると、"
"要素の順序もまた変更されます。この効果の詳細について、詳しくは _test.pl_ スク"
"リプトをお読みください。"

#. leap/perl-Tie-Hash-DBD/summary
msgid "Tie a plain hash to a database table"
msgstr "データベーステーブルに対するプレーンハッシュの tie"

#. leap/perl-Tie-Hash-DBD/description
msgid ""
"This module has been created to act as a drop-in replacement for modules "
"that tie straight perl hashes to disk, like 'DB_File'. When the running "
"system does not have enough memory to hold large hashes, and disk-tieing "
"won't work because there is not enough space, it works quite well to tie the "
"hash to a database, which preferable runs on a different server.\n"
"\n"
"This module ties a hash to a database table using *only* a 'key' and a "
"'value' field. If no tables specification is passed, this will create a "
"temporary table with 'h_key' for the key field and a 'h_value' for the value "
"field.\n"
"\n"
"I think it would make sense to merge the functionality that this module "
"provides into 'Tie::DBI'."
msgstr ""
"このモジュールは 'DB_File' のように、ディスクへの直接的な Perl ハッシュを提供"
"するモジュールに対して、すぐに置き換えられるモジュールとして作成されていま"
"す。システム内に巨大なハッシュを保持できるほど十分なメモリが存在しない場合"
"で、ディスクの容量も少なくてディスクへの結び付けもできないような場合、別の"
"サーバで動作しているようなデータベースに対してハッシュを結び付ける解決方法が"
"あります。\n"
"\n"
"このモジュールはデータベースに対するハッシュを 'キー' と '値' のフィールド *"
"のみ* を利用して構成しています。テーブルの仕様が渡されない場合は、一時的な"
"テーブルを作成して処理します。この場合、 'h_key' をキーフィールドの保存先"
"に、 'h_value' を値のフィールドの保存先にそれぞれ指定します。\n"
"\n"
"このモジュールは、将来的に 'Tie::DBI' と機能を合併したいと考えております。"

#. leap/perl-Tie-Hash-Method/summary
msgid "Tied hash with specific methods overriden by callbacks"
msgstr "コールバックで特定のメソッドをオーバーライドするタイハッシュ"

#. leap/perl-Tie-Hash-Method/description
msgid ""
"Tie::Hash::Method provides a way to create a tied hash with specific "
"overriden behaviour without having to create a new class to do it. A tied "
"hash with no methods overriden is functionally equivalent to a normal hash.\n"
"\n"
"Each method in a standard tie can be overriden by providing a callback to "
"the tie call. So for instance if you wanted a tied hash that changed 'foo' "
"into 'bar' on store you could say:\n"
"\n"
"    tie my %hash, 'Tie::Hash::Method',         STORE => sub "
"{             (my $v=pop)=~s/foo/bar/g if defined $_[2];             return "
"$_[0]->base_hash->{$_[1]}=$v;         };\n"
"\n"
"The callback is called with exactly the same arguments as the tie itself, in "
"particular the tied object is always passed as the first argument.\n"
"\n"
"The tied object is itself an array, which contains a second hash in the HASH "
"slot (index 0) which is used to perform the default operations.\n"
"\n"
"The callbacks available are in a hash keyed by name in the METHOD slot of "
"the array (index 1).\n"
"\n"
"If your code needs to store extra data in the object it should be stored in "
"the PRIVATE slot of the object (index 2). No future release of this module "
"will ever use or alter anything in that slot.\n"
"\n"
"The arguments passed to the tie constructor will be seperated by the case of "
"their keys. The ones with all capitals will be stored in the METHOD hash, "
"and the rest will be stored in the PRIVATE hash."
msgstr ""
"Tie::Hash::Method は新しいクラスを作成することなく、動作をオーバーライドして"
"タイハッシュを作成する機能を提供します。何もメソッドをオーバーライドしない場"
"合、そのタイハッシュは通常のハッシュと全く同じ機能になります。\n"
"\n"
"標準のタイハッシュの場合、タイコールに対してコールバックを設定することで、"
"オーバーライドを設定することができます。たとえば 'foo' と 'bar' に対してオー"
"バーライドを実施したい場合、下記のようになります:\n"
"\n"
"    tie my %hash, 'Tie::Hash::Method',         STORE => sub "
"{             (my $v=pop)=~s/foo/bar/g if defined $_[2];             return "
"$_[0]->base_hash->{$_[1]}=$v;         };\n"
"\n"
"コールバックはタイそのものと全く同じパラメータで呼び出されます。特にタイオブ"
"ジェクトは、常に最初のパラメータとなります。\n"
"\n"
"タイオブジェクトそれ自身は配列で、 HASH スロット (index 0) 内の 2 番目のハッ"
"シュを含んでいます。これは既定の操作を行なう際に使用するものです。\n"
"\n"
"コールバックは、配列の METHOD スロット (index 1) 内の名前付きハッシュ内に存在"
"します。\n"
"\n"
"お使いのコード側でオブジェクト内に追加のデータを保存したい場合は、オブジェク"
"トの PRIVATE スロット (index 2) に保存してください。将来のリリースでも、この"
"スロットは使用されることはありません。\n"
"\n"
"タイコンストラクタに渡されるパラメータは、キーで分割される必要があります。全"
"てが大文字のものは METHOD ハッシュ内に、それ以外は PRIVATE ハシュ内に保存され"
"ます。"

#. leap/perl-Tie-IxHash/summary
msgid "ordered associative arrays for Perl"
msgstr "Perl 向け順序維持型連想配列"

#. leap/perl-Tie-IxHash/description
msgid ""
"This Perl module implements Perl hashes that preserve the order in which the "
"hash elements were added. The order is not affected when values "
"corresponding to existing keys in the IxHash are changed. The elements can "
"also be set to any arbitrary supplied order. The familiar perl array "
"operations can also be performed on the IxHash."
msgstr ""
"この Perl モジュールは、要素の追加順序を保持する Perl ハッシュ機能を実装して"
"います。なお、 IxHash 内の既存のキーに対する値を変更した場合も、順序は影響を"
"受けません。要素は任意の提供順序で設定することができます。 Perl 配列操作に慣"
"れていれば、 IxHash を利用するのも容易です。"

#. leap/perl-Tie-RefHash-Weak/summary
msgid "A Tie::RefHash subclass with weakened references in the keys."
msgstr "キーに対する弱い参照を実装する Tie::RefHash のサブクラス"

#. leap/perl-Tie-RefHash-Weak/description
msgid ""
"The the Tie::RefHash manpage module can be used to access hashes by "
"reference. This is useful when you index by object, for example.\n"
"\n"
"The problem with the Tie::RefHash manpage, and cross indexing, is that "
"sometimes the index should not contain strong references to the objecs. the "
"Tie::RefHash manpage's internal structures contain strong references to the "
"key, and provide no convenient means to make those references weak.\n"
"\n"
"This subclass of the Tie::RefHash manpage has weak keys, instead of strong "
"ones. The values are left unaltered, and you'll have to make sure there are "
"no strong references there yourself."
msgstr ""
"Tie::RefHash モジュールは、参照によるハッシュにアクセスするために使用すること"
"ができるモジュールです。これは例えば、オブジェクトで索引を作成するような場合"
"に便利な仕組みです。\n"
"\n"
"Tie::RefHash を利用してクロスインデックスを作成する際の問題は、オブジェクトに"
"対して強い参照を含むべきではない場合がある、ということです。 Tie::RefHash の"
"内部構造には、キーに対する強い参照が含まれていて、これらの参照を弱くするため"
"の便利な方法が提供されていません。\n"
"\n"
"この Tie::RefHash のサブクラスは、強い参照ではなく弱い参照が含まれています。"
"値は変更されませんし、ご自身で強い参照が存在しないことを確認することもできま"
"す。"

#. leap/perl-Tie-Simple/summary
msgid "Variable ties made easier: much, much, much easier.."
msgstr "変数の tie をずっとずっと簡単にするモジュール"

#. leap/perl-Tie-Simple/description
msgid ""
"This module adds the ability to quickly create new types of tie objects "
"without creating a complete class. It does so in such a way as to try and "
"make the programmers life easier when it comes to single-use ties that I "
"find myself wanting to use from time-to-time.\n"
"\n"
"The 'Tie::Simple' package is actually a front-end to other classes which "
"really do all the work once tied, but this package does the dwimming to "
"automatically figure out what you're trying to do.\n"
"\n"
"I've tried to make this as intuitive as possible and dependent on other bits "
"of Perl where I can to minimize the need for documentation and to make this "
"extra, extra spiffy."
msgstr ""
"このモジュールは、まったく新しくクラスを作成することなく、 tie オブジェクトの"
"新しい型を素早く作成することができるモジュールです。日々の作業で一回限りの "
"tie を利用したいと思ったとき、このような方法が提供されていることでプログラマ"
"への負担を減らすことができます。\n"
"\n"
"'Tie::Simple' パッケージは実際の処理を行なう他のクラスに対するフロントエンド"
"ですが、このパッケージはやろうとしていることを自動的に把握して実行します。\n"
"\n"
"また、このモジュールはできる限り直感的になるように作られているほか、 Perl の"
"他のモジュールへの依存性をできる限り少なくなるように作られています。"

#. leap/perl-Tie-ToObject/summary
msgid "Tie to an existing object."
msgstr "既存のオブジェクトに対する tie"

#. leap/perl-Tie-ToObject/description
msgid ""
"While the perldoc/tie manpage allows tying to an arbitrary object, the class "
"in question must support this in it's implementation of 'TIEHASH', "
"'TIEARRAY' or whatever.\n"
"\n"
"This class provides a very tie constructor that simply returns the object it "
"was given as it's first argument.\n"
"\n"
"This way side effects of calling '$object->TIEHASH' are avoided.\n"
"\n"
"This is used in the Data::Visitor manpage in order to tie a variable to an "
"already existing object. This is also useful for cloning, when you want to "
"clone the internal state object instead of going through the tie interface "
"for that variable."
msgstr ""
"perldoc/tie では任意のオブジェクトに対して tie を許可していますが、対象となる"
"クラスは実装で 'TIEHASH' と 'TIEARRAY' 等を実装しなければなりません。\n"
"\n"
"このクラスは、最初のパラメータとして与えられたオブジェクトをシンプルに返すだ"
"けの、単純な tie コンストラクタを提供します。\n"
"\n"
"この方法により、 '$object->TIEHASH' の呼び出しもまた避けることができます。\n"
"\n"
"これは Data::Visitor 内で、既に存在するオブジェクトへの変数に tie する際に利"
"用されています。内部状態のオブジェクトを複製するような、クローン作成時にも便"
"利な仕組みです。"

#. leap/perl-Time-Clock/summary
msgid "Twenty-four hour clock object with nanosecond precision."
msgstr "ナノ秒単位の精度のある 24 時間時計オブジェクト"

#. leap/perl-Time-Clock/description
msgid ""
"A the Time::Clock manpage object is a twenty-four hour clock with nanosecond "
"precision and wrap-around. It is a clock only; it has absolutely no concept "
"of dates. Vagaries of date/time such as leap seconds and daylight savings "
"time are unsupported.\n"
"\n"
"When a the Time::Clock manpage object hits 23:59:59.999999999 and at least "
"one more nanosecond is added, it will wrap around to 00:00:00.000000000. "
"This works in reverse when time is subtracted.\n"
"\n"
"the Time::Clock manpage objects automatically stringify to a user-definable "
"format."
msgstr ""
"Time::Clock オブジェクトは 24 時制の時計を表すもので、ナノ秒までの精度と回り"
"込みの機能に対応しています。なお、このオブジェクトは時刻のみを扱うものであ"
"り、日付に関しては一切考慮していません。また、うるう秒や夏時間 (サマータイ"
"ム) に関しても、日付を持たないことからサポートの対象外です。\n"
"\n"
"Time::Clock オブジェクトが現在 23:59:59.999999999 であるとすると、このオブ"
"ジェクトに 1 ナノ秒を足すと、 00:00:00.000000000 に戻り (回り込み) ます。逆も"
"同様で、減算時に逆方向の回り込みが起こります。\n"
"\n"
"Time::Clock オブジェクトでは、ユーザ定義の形式で文字列化することもできます。"

#. leap/perl-Time-Duration/summary
msgid "Rounded or exact English expression of durations"
msgstr "曖昧な／正確な英語での範囲表記"

#. leap/perl-Time-Duration/description
msgid ""
"This module provides functions for expressing durations in rounded or exact "
"terms.\n"
"\n"
"In the first example in the Synopsis, using duration($interval_seconds):\n"
"\n"
"If the 'time() - $start_time' is 3 seconds, this prints \"Runtime: *3 "
"seconds*.\". If it's 0 seconds, it's \"Runtime: *0 seconds*.\". If it's 1 "
"second, it's \"Runtime: *1 second*.\". If it's 125 seconds, you get "
"\"Runtime:\n"
"*2 minutes and 5 seconds*.\". If it's 3820 seconds (which is exactly 1h, 3m, "
"40s), you get it rounded to fit within two expressed units: \"Runtime: *1 "
"hour and 4 minutes*.\". Using duration_exact instead would return "
"\"Runtime:\n"
"*1 hour, 3 minutes, and 40 seconds*\".\n"
"\n"
"In the second example in the Synopsis, using ago($interval_seconds):\n"
"\n"
"If the $age is 3 seconds, this prints \"_file_ was modified *3 seconds ago*"
"\". If it's 0 seconds, it's \"_file_ was modified *just now*\", as a special "
"case. If it's 1 second, it's \"from *1 second ago*\". If it's 125 seconds, "
"you get \"_file_ was modified *2 minutes and 5 seconds ago*\". If it's 3820 "
"seconds (which is exactly 1h, 3m, 40s), you get it rounded to fit within two "
"expressed units: \"_file_ was modified *1 hour and 4 minutes ago*\". Using "
"ago_exact instead would return \"_file_ was modified *1 hour, 3 minutes, and "
"40 seconds ago*\". And if the file's modtime is, surprisingly, three seconds "
"into the future, $age is -3, and you'll get the equally and appropriately "
"surprising \"_file_ was modified *3 seconds from now*.\""
msgstr ""
"このモジュールは、おおよそあるいは正確な表現で、時間間隔を表現するための関数"
"集を提供します。\n"
"\n"
"概要内にある最初の例では、 duration($interval_seconds) を使用しています:\n"
"\n"
"もしも 'time() - $start_time' が 3 秒であった場合、このスクリプトは "
"\"Runtime: *3 seconds*.\" と表示します。 0 秒の場合は \"Runtime: *0 seconds*."
"\" と、 1 秒の場合は \"Runtime: *1 second*.\" となります。また、たとえば 125 "
"秒であった場合は、 \"Runtime: *2 minutes and 5 seconds*.\" となり、 3820 秒で"
"あった場合 (正確には 1 時間 3 分 40 秒) は、 \"Runtime: *1 hour and 4 "
"minutes*.\" として、丸めた形で表示されます。 \"Runtime:\" を正確に表示させた"
"い場合は、 duration_exact をお使いください。この場合は、 \"Runtime: *1 hour, "
"3 minutes, and 40 seconds*\" となります。\n"
"\n"
"概要内にある 2 つめの例では、 ago($interval_seconds) を使用しています:\n"
"\n"
"$age が 3 秒であった場合は \"_file_ was modified *3 seconds ago*\" と表示さ"
"れ、 0 秒であった場合は特別に \"_file_ was modified *just now*\" と表示されま"
"す。また、 1 秒であった場合は \"from *1 second ago*\" と、 125 秒であった場合"
"は \"_file_ was modified *2 minutes and 5 seconds ago*\" と表示されます。 "
"3820 秒であった場合 (正確には 1 時間 3 分 40 秒) は、 2 つの表記単位を使用し"
"て \"_file_ was modified *1 hour and 4 minutes ago*\" と丸めた表示を行ないま"
"す。この場合、 ago_exact を使用すると \"_file_ was modified *1 hour, 3 "
"minutes, and 40 seconds ago*\" と表示させることができます。また、通常ではあり"
"得ませんが、ファイルの更新日時が 3 秒だけ未来であった場合、 $age は -3 となり"
"ますが、\"_file_ was modified *3 seconds from now*.\" のように表示されます。"

#. leap/perl-Time-Duration-Parse/summary
msgid "Parse string that represents time duration"
msgstr "時間の期間を表す文字列の処理"

#. leap/perl-Time-Duration-Parse/description
msgid ""
"Time::Duration::Parse is a module to parse human readable duration strings "
"like _2 minutes and 3 seconds_ to seconds.\n"
"\n"
"It does the opposite of Time::Duration/duration_exact function in Time::"
"Duration and is roundtrip safe. So, the following is always true.\n"
"\n"
"  use Time::Duration::Parse;   use Time::Duration;\n"
"\n"
"  my $seconds = int rand 100000;   "
"is( parse_duration(duration_exact($seconds)), $seconds );"
msgstr ""
"Time::Duration::Parse は、 _2 minutes_ (2 分) や _3 seconds_ (3 秒) のよう"
"に、人間にとってわかりやすい期間表記を秒単位の値に変換するモジュールです。\n"
"\n"
"Time::Duration 内の Time::Duration/duration_exact 関数の反対を実施することも"
"できますし、それらとの間で値をやり取りすることもできます。そのため、下記は常"
"に true となります:\n"
"\n"
"  use Time::Duration::Parse;   use Time::Duration;\n"
"\n"
"  my $seconds = int rand 100000;   "
"is( parse_duration(duration_exact($seconds)), $seconds );"

#. leap/perl-Time-Local/summary
msgid "Efficiently compute time from local and GMT time"
msgstr "ローカル時刻と GMT 時刻の効率的な計算"

#. leap/perl-Time-Local/description
msgid ""
"This module provides functions that are the inverse of built-in perl "
"functions 'localtime()' and 'gmtime()'. They accept a date as a six-element "
"array, and return the corresponding 'time(2)' value in seconds since the "
"system epoch (Midnight, January 1, 1970 GMT on Unix, for example). This "
"value can be positive or negative, though POSIX only requires support for "
"positive values, so dates before the system's epoch may not work on all "
"operating systems.\n"
"\n"
"It is worth drawing particular attention to the expected ranges for the "
"values provided. The value for the day of the month is the actual day (i.e. "
"1..31), while the month is the number of months since January (0..11). This "
"is consistent with the values returned from 'localtime()' and 'gmtime()'."
msgstr ""
"このモジュールは内蔵 Perl 関数である 'localtime()', 'gmtime()' の逆を行なう関"
"数を提供します。これらは 6 つの要素を持つ配列を受け付け、エポック時刻 "
"(1970/01/01 0:0:0 GMT) からの経過秒数を返します。この値は正の数にも負の数にも"
"なりますが、 POSIX では正の数のみに対応することが求められているため、エポック"
"時刻以前の日時についてはオペレーティングシステムによっては動作しないことがあ"
"ります。\n"
"\n"
"なお、期待する値の範囲については特別な注意を行なう必要があります。たとえば月"
"内日の値は実際の日 (つまり 1 から 31 まで) を指定しますが、月そのものは 1 月"
"からの月数 (つまり 0 から 11 まで) を指定します。これにより、 'localtime()' "
"や 'gmtime()' で返される値との一貫性を提供しています。"

#. leap/perl-Time-Mock/summary
#. leap/perl-Time-Mock/description
msgid "shift and scale time"
msgstr "時刻の偽装"

#. leap/perl-Time-Moment/summary
msgid "Represents a date and time of day with an offset from UTC"
msgstr "UTC からの時刻差設定のある日時モジュール"

#. leap/perl-Time-Moment/description
msgid ""
"'Time::Moment' is an immutable object representing a date and time of day "
"with an offset from UTC in the ISO 8601 calendar system.\n"
"\n"
"Time is measured in nanoseconds since '0001-01-01T00Z'. In 'Time:Moment' "
"leap seconds are ignored. It is assumed that there are exactly "
"'86,400,000,000,000' nanoseconds per day. 'Time::Moment' can represent all "
"epoch integers from '-62,135,596,800' to '253,402,300,799'; this range "
"suffices to measure times to nanosecond precision for any instant that is "
"within '0001-01-01T00:00:00Z' to '9999-12-31T23:59:59Z'."
msgstr ""
"'Time::Moment' は ISO 8601 カレンダーシステムで規定された、 UTC からの時刻差"
"設定を持つ日時データを表わす不変オブジェクトです。\n"
"\n"
"時刻は '0001-01-01T00Z' からのナノ秒で記録されます。 'Time:Moment' では閏秒は"
"無視されます。また、 1 日は正確に '86,400,000,000,000' ナノ秒であるものとされ"
"ます。 'Time::Moment' ではエポック時刻の整数のうち '-62,135,596,800' から "
"'253,402,300,799' までを扱うことができます。これは '0001-01-01T00:00:00Z' か"
"ら '9999-12-31T23:59:59Z' までの意味となります。"

#. leap/perl-Time-Out/summary
msgid "Easily timeout long running operations"
msgstr "長時間かかる処理に対する簡単なタイムアウト機構"

#. leap/perl-Time-Out/description
msgid ""
"'Time::Out' provides an easy interface to _alarm(2)_ based timeouts. Nested "
"timeouts are supported."
msgstr ""
"'Time::Out' は _alarm(2)_ ベースのタイムアウトに対して簡易なインターフェイス"
"を提供します。入れ子型のタイムアウトにも対応しています。"

#. leap/perl-Time-Period/summary
msgid "A Perl module to deal with time periods."
msgstr "時間範囲を扱うための Perl モジュール"

#. leap/perl-Time-Period/description
msgid ""
"The *inPeriod* function determines if a given time falls within a given "
"period. *inPeriod* returns *1* if the time does fall within the given "
"period, *0* if not, and *-1* if *inPeriod* detects a malformed time or "
"period."
msgstr ""
"*inPeriod* 関数は、指定した時間が指定した範囲内に存在するかどうかを判断しま"
"す。 *inPeriod* は指定した時間が範囲内にある場合は *1* を返し、そうでない場合"
"は *0* を返します。また、時間や範囲の指定が正しくない場合には、 *-1* を返しま"
"す。"

#. leap/perl-Time-Tiny/summary
msgid "Time Object, with As Little Code As Possible"
msgstr "できる限り少ないコードでの Time オブジェクト"

#. leap/perl-Time-Tiny/description
msgid ""
"*Time::Tiny* is a member of the DateTime::Tiny suite of time modules.\n"
"\n"
"It implements an extremely lightweight object that represents a time, "
"without any time data."
msgstr ""
"*Time::Tiny* は時刻モジュールのスイートである DateTime::Tiny のメンバーで"
"す。\n"
"\n"
"タイムゾーン無しの時刻を表す非常に軽量なオブジェクトを実装します。"

#. leap/perl-Time-modules/summary
msgid "Various Perl time modules"
msgstr "様々な Perl 時間モジュール"

#. leap/perl-Time-modules/description
msgid "Perl modules providing various time functions."
msgstr "様々な時間関数を提供する Perl モジュールです。"

#. leap/perl-TimeDate/summary
msgid "TimeDate Perl module"
msgstr "TimeDate Perl モジュール"

#. leap/perl-TimeDate/description
msgid ""
"Date::Parse provides two routines for parsing date strings into time "
"values.\n"
"\n"
"str2time(DATE [, ZONE])\n"
"\n"
"   str2time parses DATE and returns a unix time value, or undef upon "
"failure.     ZONE, if given, specifies the timezone to assume when parsing "
"if the date     string does not specify a timezome.\n"
"\n"
"strptime(DATE [, ZONE])\n"
"\n"
"   strptime takes the same arguments as str2time but returns an array of "
"values     ($ss,$mm,$hh,$day,$month,$year,$zone). Elements are only defined "
"if they     could be extracted from the date string. The $zone element is "
"the timezone     offset in seconds from GMT. An empty array is returned upon "
"failure."
msgstr ""
"Date::Parse は日付の文字列を解釈して値として取り込む機能のある、 2 種類のルー"
"チンを提供しています。\n"
"\n"
" str2time(DATE [, ZONE])\n"
"\n"
"    str2time は DATE に書かれた日付を解釈し、 Unix 時刻の値に変換します。変換"
"に失敗した場合は undef が返却されます。    ZONE を指定すると、 文字列にタイム"
"ゾーン情報が含まれていない場合、タイムゾーンとして解釈する値を指定します。\n"
"\n"
" strptime(DATE [, ZONE])\n"
"\n"
"    strptime は str2time と同じパラメータを指定することができますが、返り値"
"が ($ss,$mm,$hh,$day,$month,$year,$zone)    のように配列であるところが異なり"
"ます。それぞれの要素は日付の文字列から取り出すことができた場合にのみ設定され"
"ます。    $zone はタイムゾーン部分を示すもので、 GMT からの差を秒単位で表わし"
"た値が書き込まれます。失敗時には空の配列が    返却されます。"

#. leap/perl-Tk/summary
#. leap/perl-Tk/perl-Tk-devel/summary
msgid "Perl Tk"
msgstr "Perl Tk"

#. leap/perl-Tk/description
#. leap/perl-Tk/perl-Tk-devel/description
msgid ""
"Perl Tk is an enhancement for Perl. It combines the well structured "
"graphical library Tk with the powerful scripting language Perl."
msgstr ""
"Perl Tk は Perl 向けの拡張です。 パワフルなスクリプト言語である Perl に、 き"
"れいに構造化されたグラフィカルライブラリ Tk を組み込みます。"

#. leap/perl-Tk-Clock/summary
msgid "Clock widget with analog and digital display"
msgstr "アナログ／デジタル表示に対応したクロックウイジェット"

#. leap/perl-Tk-Clock/description
msgid ""
"This module implements a Canvas-based clock widget for perl-Tk with lots of "
"options to change the appearance.\n"
"\n"
"Both analog and digital clocks are implemented."
msgstr ""
"このモジュールは Perl-Tk 向けに Canvas ベースのクロックウイジェットを提供する"
"もので、外観を変更するための多数のオプションが用意されています。\n"
"\n"
"また、アナログ時計とデジタル時計の両方を実装しています。"

#. leap/perl-Tree-DAG_Node/summary
msgid "An N-ary tree"
msgstr "多進木"

#. leap/perl-Tree-DAG_Node/description
msgid ""
"This class encapsulates/makes/manipulates objects that represent nodes in a "
"tree structure. The tree structure is not an object itself, but is emergent "
"from the linkages you create between nodes. This class provides the methods "
"for making linkages that can be used to build up a tree, while preventing "
"you from ever making any kinds of linkages which are not allowed in a tree "
"(such as having a node be its own mother or ancestor, or having a node have "
"two mothers)."
msgstr ""
"このクラスは、ツリー構造でノードを表わすオブジェクトをカプセル化したり、作成"
"したり操作したりすることができます。ツリー構造はオブジェクトそのもではありま"
"せんが、ノード間に作成するリンクとして表現されます。このクラスはツリーを構成"
"するためのリンクを作成する各種メソッドが用意され、ツリー内には現われてはなら"
"ない構造 (循環構造などの矛盾) を作らないようになっています。"

#. leap/perl-Try-Tiny/summary
msgid "Minimal try/catch with proper preservation of $@"
msgstr "$@ に対して適切な保持機能を追加した最小限の try/catch 実装"

#. leap/perl-Try-Tiny/description
msgid ""
"This module provides bare bones 'try'/'catch'/'finally' statements that are "
"designed to minimize common mistakes with eval blocks, and NOTHING else.\n"
"\n"
"This is unlike TryCatch which provides a nice syntax and avoids adding "
"another call stack layer, and supports calling 'return' from the 'try' block "
"to return from the parent subroutine. These extra features come at a cost of "
"a few dependencies, namely Devel::Declare and Scope::Upper which are "
"occasionally problematic, and the additional catch filtering uses Moose type "
"constraints which may not be desirable either.\n"
"\n"
"The main focus of this module is to provide simple and reliable error "
"handling for those having a hard time installing TryCatch, but who still "
"want to write correct 'eval' blocks without 5 lines of boilerplate each "
"time.\n"
"\n"
"It's designed to work as correctly as possible in light of the various "
"pathological edge cases (see BACKGROUND) and to be compatible with any style "
"of error values (simple strings, references, objects, overloaded objects, "
"etc).\n"
"\n"
"If the 'try' block dies, it returns the value of the last statement executed "
"in the 'catch' block, if there is one. Otherwise, it returns 'undef' in "
"scalar context or the empty list in list context. The following examples all "
"assign '\"bar\"' to '$x':\n"
"\n"
"  my $x = try { die \"foo\" } catch { \"bar\" };   my $x = try { die \"foo"
"\" } || \"bar\";   my $x = (try { die \"foo\" }) // \"bar\";\n"
"\n"
"  my $x = eval { die \"foo\" } || \"bar\";\n"
"\n"
"You can add 'finally' blocks, yielding the following:\n"
"\n"
"  my $x;   try { die 'foo' } finally { $x = 'bar' };   try { die 'foo' } "
"catch { warn \"Got a die: $_\" } finally { $x = 'bar' };\n"
"\n"
"'finally' blocks are always executed making them suitable for cleanup code "
"which cannot be handled using local. You can add as many 'finally' blocks to "
"a given 'try' block as you like.\n"
"\n"
"Note that adding a 'finally' block without a preceding 'catch' block "
"suppresses any errors. This behaviour is consistent with using a standalone "
"'eval', but it is not consistent with 'try'/'finally' patterns found in "
"other programming languages, such as Java, Python, Javascript or C#. If you "
"learnt the 'try'/'finally' pattern from one of these languages, watch out "
"for this."
msgstr ""
"このモジュールは 'try'/'catch'/'finally' のステートメントのベアボーン版を提供"
"するもので、 eval ブロックによるよくある間違いだけを最小化するように設計され"
"ています。\n"
"\n"
"このモジュールは、わかりやすい文法で異なるコールスタックレイヤの追加を避け、 "
"'try' ブロックから 'return' を呼ぶことで親サブルーチンからの復帰を行なうこと"
"ができる TryCatch とは異なります。これらの追加機能は、 Devel::Declare と "
"Scope::Upper という依存関係の追加というコストによって成し遂げられたもので、こ"
"れらは時として問題を発生させ、追加のキャッチフィルタリングによって望ましくな"
"い Moose 型制約を使用します。\n"
"\n"
"このモジュールの主な目的は、本来は TryCatch のように重い処理のはずのシンプル"
"で信頼性のあるエラー処理を提供しながら、毎回 5 行に及ぶ定型コードを使用せず"
"に、正しい 'eval' ブロックを作成することにあります。\n"
"\n"
"様々な病理学的な症例をできる限り正しく処理するよう設計されている (BACKGROUND "
"をお読みください) ほか、任意の形式のエラー値 (シンプルな文字列、参照、オブ"
"ジェクト、オーバーロードされたオブジェクトなど) と互換性を維持するように作ら"
"れています。\n"
"\n"
"'try' ブロック内で die した場合、 'catch' ブロック内で最後に実行された値が返"
"ります (ただし 'catch' ブロックが 1 つであった場合) 。それ以外の場合は、スカ"
"ラーコンテキストに対しては 'undef' が、リストコンテキストに対しては空のリスト"
"が返ります。下記の例は、いずれも '$x' 内に '\"bar\"' を代入します:\n"
"\n"
"  my $x = try { die \"foo\" } catch { \"bar\" };   my $x = try { die \"foo"
"\" } || \"bar\";   my $x = (try { die \"foo\" }) // \"bar\";\n"
"\n"
"  my $x = eval { die \"foo\" } || \"bar\";\n"
"\n"
"'finally' ブロックを追加した場合は、下記のようになります:\n"
"\n"
"  my $x;   try { die 'foo' } finally { $x = 'bar' };   try { die 'foo' } "
"catch { warn \"Got a die: $_\" } finally { $x = 'bar' };\n"
"\n"
"'finally' ブロックは常に実行されるため、 local を利用して処理できないような、"
"コードのクリーンアップ処理などには適切な場所です。なお、 'try' ブロック 1 つ"
"に対して、任意の個数の 'finally' ブロックを記述することができます。\n"
"\n"
"なお、 'catch' ブロックなしで 'finally' ブロックを追加してしまうと、どのエ"
"ラーも省略されるようになってしまいます。この動作は単独の 'eval' を利用してい"
"る場合は問題ありませんが、他のプログラミング言語 (Java, Python, JavaScript, "
"C# など) 内にあるような 'try'/'finally' とは異なる動作であることに注意してく"
"ださい。これらの言語で 'try'/'finally' を学んでいた方は、この個所に注意してく"
"ださい。"

#. leap/perl-TryCatch/summary
msgid "first class try catch semantics for Perl, without source filters."
msgstr "ソースフィルタを使用しない Perl 向け try-catch 機構"

#. leap/perl-TryCatch/description
msgid ""
"This module aims to provide a nicer syntax and method to catch errors in "
"Perl, similar to what is found in other languages (such as Java, Python or C+"
"+). The standard method of using 'eval {}; if ($@) {}' is often prone to "
"subtle bugs, primarily that its far too easy to stomp on the error in error "
"handlers. And also eval/if isn't the nicest idiom."
msgstr ""
"このモジュールは、他の言語 (Java, Python, C++) にも存在するような、 Perl 内で"
"エラーキャッチのためのよりわかりやすい文法を提供するものです。標準で提供され"
"る方式は 'eval {}; if ($@) {}' を使用するものでバグを引き起こしやすいものであ"
"るため、このモジュールはそのようなエラー処理をわかりやすくするものです。"

#. leap/perl-Type-Tiny/summary
msgid "Tiny, yet Moo(Se)-Compatible Type Constraint"
msgstr "簡易だが Moo(se) との互換性のある型制約"

#. leap/perl-Type-Tiny/description
msgid ""
"Type::Tiny is a tiny class for creating Moose-like type constraint objects "
"which are compatible with Moo, Moose and Mouse.\n"
"\n"
"Maybe now we won't need to have separate MooseX, MouseX and MooX versions of "
"everything? We can but hope...\n"
"\n"
"This documents the internals of Type::Tiny. Type::Tiny::Manual is a better "
"starting place if you're new."
msgstr ""
"Type::Tiny は Moo, Moose, Mouse と互換性のある Moose のような型制約オブジェク"
"トを作成することのできる、簡易クラスです。\n"
"\n"
"これにより、 MooseX, MouseX, MooX 版の様々なものが不要になるはずです。たぶ"
"ん・・\n"
"\n"
"この文書には Type::Tiny の内部説明が書かれています。はじめてお使いになる方の"
"場合は、 Type::Tiny::Manual をお読みください。"

#. leap/perl-Types-Serialiser/summary
msgid "Simple data types for common serialisation formats"
msgstr "一般的なシリアライズ形式向けのシンプルなデータ型"

#. leap/perl-Types-Serialiser/description
msgid ""
"This module provides some extra datatypes that are used by common "
"serialisation formats such as JSON or CBOR. The idea is to have a repository "
"of simple/small constants and containers that can be shared by different "
"implementations so they become interoperable between each other."
msgstr ""
"このモジュールは、 JSON や CBOR などの一般的なシリアライズ形式で使用される、"
"いくつかのデータ型を提供します。シンプルで小さな定数とコンテナのリポジトリを"
"持ち、異なる実装との間で共有されるコンテナを含むため、相互運用性が高まるよう"
"になっています。"

#. leap/perl-UNIVERSAL-can/summary
msgid "work around buggy code calling UNIVERSAL::can() as a function"
msgstr "UNIVERSAL::can() を関数として呼び出す際のバグコードの回避"

#. leap/perl-UNIVERSAL-can/description
msgid ""
"The UNIVERSAL class provides a few default methods so that all objects can "
"use them. Object orientation allows programmers to override these methods in "
"subclasses to provide more specific and appropriate behavior.\n"
"\n"
"Some authors call methods in the UNIVERSAL class on potential invocants as "
"functions, bypassing any possible overriding. This is wrong and you should "
"not do it. Unfortunately, not everyone heeds this warning and their bad code "
"can break your good code.\n"
"\n"
"This module replaces 'UNIVERSAL::can()' with a method that checks to see if "
"the first argument is a valid invocant has its own 'can()' method. If so, it "
"gives a warning and calls the overridden method, working around buggy code. "
"Otherwise, everything works as you might expect.\n"
"\n"
"Some people argue that you must call 'UNIVERSAL::can()' as a function "
"because you don't know if your proposed invocant is a valid invocant. That's "
"silly. Use 'blessed()' from the Scalar::Util manpage if you want to check "
"that the potential invocant is an object or call the method anyway in an "
"'eval' block and check for failure (though check the exception _returned_, "
"as a poorly-written 'can()' method could break Liskov and throw an exception "
"other than \"You can't call a method on this type of invocant\").\n"
"\n"
"Just don't break working code."
msgstr ""
"UNIVERSAL クラスにはいくつかの既定のメソッドが用意されているため、すべてのオ"
"ブジェクトからそれらを利用することができます。オブジェクト指向の仕組みによ"
"り、プログラマはサブクラス内でそれらをオーバーライドして、より固有の、より適"
"切な動作を提供することができます。\n"
"\n"
"作者によっては、 UNIVERSAL クラス内のメソッドを呼び出すことで、発生しうるオー"
"バーライドを回避しながら、裏側に隠れた関数の実行を行なうものもあります。これ"
"は誤った使い方であり、使用すべきではないものです。ただ、残念ながらそのような"
"警告に耳を傾けない方々がいらっしゃるのも事実で、それによって悪いコードが良い"
"コードを壊す結果になってしまいます。\n"
"\n"
"このモジュールは 'UNIVERSAL::can()' メソッドを入れ替えることで、最初に指定さ"
"れたパラメータが独自の 'can()' メソッドのある呼び出しであるかどうかを確認しま"
"す。もしもそうである場合、警告を表示してオーバーライドされているメソッドを呼"
"び出します。これによりバグのような挙動を回避することができます。それ以外の場"
"合は、通常通りに動作します。\n"
"\n"
"ただし、呼び出しが妥当なものであるかどうかがわからないことから、 'UNIVERSAL::"
"can()' を関数として呼び出さなければならない場合があることを主張する人もいま"
"す。これは愚かな発想です。裏に隠れた呼び出しがオブジェクトであるかどうかや "
"'eval' ブロック内でのメソッド呼び出しなのかを判断したい場合は、 Scalar::Util "
"が提供する 'blessed()' を利用すべきです (誤った実装である 'can()' メソッドが "
"Liskov に違反しているため、 \"You can't call a method on this type of "
"invocant\" 以外の例外をスローすることから、 _返された_ 例外をチェックする必要"
"はあります) 。\n"
"\n"
"うまく動作するコードをわざわざ壊す必要はありません。"

#. leap/perl-UNIVERSAL-isa/summary
msgid "Attempt to recover from people calling UNIVERSAL::isa as a function"
msgstr "UNIVERSAL::isa を関数として呼び出す人々からの回復"

#. leap/perl-UNIVERSAL-isa/description
msgid ""
"Whenever you use UNIVERSAL/isa as a function, a kitten using Test::"
"MockObject dies. Normally, the kittens would be helpless, but if they use "
"UNIVERSAL::isa (the module whose docs you are reading), the kittens can live "
"long and prosper.\n"
"\n"
"This module replaces 'UNIVERSAL::isa' with a version that makes sure that, "
"when called as a function on objects which override 'isa', 'isa' will call "
"the appropriate method on those objects\n"
"\n"
"In all other cases, the real 'UNIVERSAL::isa' gets called directly. \n"
"*NOTE:* You should use this module only for debugging purposes. It does not "
"belong as a dependency in running code."
msgstr ""
"UNIVERSAL/isa を関数として使用してしまうと、 Test::MockObject が die してしま"
"います。通常はこのようなやり方を救うことはできないのですが、 UNIVERSAL::isa "
"(本モジュール) を使用していれば、長生きで繁栄する仕組みを作ることができま"
"す。\n"
"\n"
"このモジュールは 'UNIVERSAL::isa' を入れ替え、 'isa' をオーバーライドしたオブ"
"ジェクトで関数を呼び出すようにします。これにより、 'isa' はオブジェクト内の適"
"切なメソッドを呼び出すようになります。\n"
"\n"
"それ以外の場合は、実際の 'UNIVERSAL::isa' が直接呼び出されます。\n"
"*注意:* このモジュールはデバッグ用にのみ使用すべきです。本番環境のコード内に"
"依存関係として存在すべきではありません。"

#. leap/perl-UNIVERSAL-moniker/summary
msgid "UNIVERAL::moniker"
msgstr "UNIVERAL::moniker"

#. leap/perl-UNIVERSAL-moniker/description
msgid ""
"Class names in Perl often don't sound great when spoken, or look good when "
"written in prose. For this reason, we tend to say things like \"customer\" "
"or \"basket\" when we are referring to 'My::Site::User::Customer' or 'My::"
"Site::Shop::Basket'. We thought it would be nice if our classes knew what we "
"would prefer to call them.\n"
"\n"
"This module will add a 'moniker' (and 'plural_moniker') method to "
"'UNIVERSAL', and so to every class or module."
msgstr ""
"Perl 内でのクラス名は、しばしばしゃべりにくいものであったり書きにくいもので"
"あったりします。このような理由から、たとえば 'My::Site::User::Customer' や "
"'My::Site::Shop::Basket' を \"customer\", \"basket\" のように呼んでしまったり"
"します。我々は、このようなクラスの作り方を変える方法はないものかと考えてきま"
"した。\n"
"\n"
"このモジュールは、 'moniker' (および 'plural_moniker') メソッドを "
"'UNIVERSAL' 内に作成しました。これにより、すべてのクラスやモジュールにも提供"
"されることになります。"

#. leap/perl-UNIVERSAL-require/summary
msgid "Require() modules from a variable [deprecated]"
msgstr "変数からの require() モジュール「非推奨」"

#. leap/perl-UNIVERSAL-require/description
msgid ""
"Before using this module, you should look at the alternatives, some of which "
"are listed in SEE ALSO below.\n"
"\n"
"This module provides a safe mechanism for loading a module at runtime, when "
"you have the name of the module in a variable.\n"
"\n"
"If you've ever had to do this...\n"
"\n"
"    eval \"require $module\";\n"
"\n"
"to get around the bareword caveats on require(), this module is for you. It "
"creates a universal require() class method that will work with every Perl "
"module and its secure. So instead of doing some arcane eval() work, you can "
"do this:\n"
"\n"
"    $module->require;\n"
"\n"
"It doesn't save you much typing, but it'll make a lot more sense to someone "
"who's not a ninth level Perl acolyte."
msgstr ""
"このモジュールを使用する前に、以下の SEE ALSO にリストされている選択肢を確認"
"してください。\n"
"\n"
"このモジュールは、変数内にモジュール名がある場合に、実行時にモジュールをロー"
"ドするための安全なメカニズムを提供します。\n"
"\n"
"下記のようなコードを見たことがありませんか？\n"
"\n"
"    eval \"require $module\";\n"
"\n"
"これは require() における裸文字の警告に対する回避策ですが、このような問題を解"
"決することができるのがこのモジュールです。このモジュールは汎用的な require() "
"クラスメソッドを作成し、すべての Perl モジュールで利用できる安全な仕組みを提"
"供します。そのため、 eval() のような裏技を使用しなくても、下記のように記述す"
"ることができるようになります:\n"
"\n"
"    $module->require;\n"
"\n"
"これにより入力量を大きく減らすことができるようになります。"

#. leap/perl-URI/summary
msgid "Uniform Resource Identifiers (absolute and relative)"
msgstr "Uniform Resource Identifiers (統一資源識別子; 絶対または相対)"

#. leap/perl-URI/description
msgid ""
"This module implements the 'URI' class. Objects of this class represent "
"\"Uniform Resource Identifier references\" as specified in RFC 2396 (and "
"updated by RFC 2732).\n"
"\n"
"A Uniform Resource Identifier is a compact string of characters that "
"identifies an abstract or physical resource. A Uniform Resource Identifier "
"can be further classified as either a Uniform Resource Locator (URL) or a "
"Uniform Resource Name (URN). The distinction between URL and URN does not "
"matter to the 'URI' class interface. A \"URI-reference\" is a URI that may "
"have additional information attached in the form of a fragment identifier.\n"
"\n"
"An absolute URI reference consists of three parts: a _scheme_, a _scheme-"
"specific part_ and a _fragment_ identifier. A subset of URI references share "
"a common syntax for hierarchical namespaces. For these, the scheme-specific "
"part is further broken down into _authority_, _path_ and _query_ components. "
"These URIs can also take the form of relative URI references, where the "
"scheme (and usually also the authority) component is missing, but implied by "
"the context of the URI reference. The three forms of URI reference syntax "
"are summarized as follows:\n"
"\n"
"  <scheme>:<scheme-specific-part>#<fragment>   <scheme>://<authority><path>?"
"<query>#<fragment>   <path>?<query>#<fragment>\n"
"\n"
"The components into which a URI reference can be divided depend on the "
"_scheme_. The 'URI' class provides methods to get and set the individual "
"components. The methods available for a specific 'URI' object depend on the "
"scheme."
msgstr ""
"このモジュールは 'URI' クラスを実装しています。このクラスのオブジェクトは "
"RFC 2396 (および更新版である RFC 2732) で規定されている \"Uniform Resource "
"Identifier references\" を表します。\n"
"\n"
"Uniform Resource Identifier は抽象的もしくは物理的な資源を識別するためのコン"
"パクトな文字列です。 Uniform Resource Identifier には Uniform Resource "
"Locator (URL) と Uniform Resource Name (URN) の 2 種類がありますが、 'URI' ク"
"ラスのインターフェイスでは URL も URN も同じになります。また、 \"URI-"
"reference\" とは追加の識別子情報が添付されている URI のことを指します。\n"
"\n"
"絶対 URI reference は 3 種類のパーツから構成されています。それぞれ _スキーム"
"_, _スキーム固有パーツ_, _追加情報_ です。 URI reference のサブセットでは階層"
"構造型のネームスペースのため、汎用的な文法を利用します。具体的には、 _スキー"
"ム固有パーツ_ は _オーソリティ情報_, _パス_, _クエリ_ の各パーツに分解するこ"
"とができます。 URI では相対表記にも対応していますが、この場合はスキーム (およ"
"びオーソリティ情報) を省略して表記します。このような仕組みから、 URI の書式に"
"は下記の 3 種類があることになります:\n"
"\n"
"  <スキーム>:<スキーム固有パーツ>#<追加情報>   <スキーム>://<オーソリティ情報"
"><パス>?<クエリ>#<追加情報>   <パス>?<クエリ>#<追加情報>\n"
"\n"
"URI reference が分解できるコンポーネントは、スキームによって異なります。 "
"'URI' クラスでは個別のコンポーネントに対して、設定と取得を行なうためのメソッ"
"ドを提供しています。メソッドはスキームに依存して固有の 'URI' オブジェクトで利"
"用できます。"

#. leap/perl-URI-Fetch/summary
msgid "Smart URI fetching/caching"
msgstr "スマート URI フェッチ／キャッシュ"

#. leap/perl-URI-Fetch/description
msgid ""
"_URI::Fetch_ is a smart client for fetching HTTP pages, notably syndication "
"feeds (RSS, Atom, and others), in an intelligent, bandwidth- and time-saving "
"way. That means: \n"
"* * GZIP support\n"
"\n"
"If you have _Compress::Zlib_ installed, _URI::Fetch_ will automatically try "
"to download a compressed version of the content, saving bandwidth (and "
"time). \n"
"* * _Last-Modified_ and _ETag_ support\n"
"\n"
"If you use a local cache (see the _Cache_ parameter to _fetch_), _URI::"
"Fetch_ will keep track of the _Last-Modified_ and _ETag_ headers from the "
"server, allowing you to only download pages that have been modified since "
"the last time you checked. \n"
"* * Proper understanding of HTTP error codes\n"
"\n"
"Certain HTTP error codes are special, particularly when fetching syndication "
"feeds, and well-written clients should pay special attention to them. _URI::"
"Fetch_ can only do so much for you in this regard, but it gives you the "
"tools to be a well-written client.\n"
"\n"
"The response from _fetch_ gives you the raw HTTP response code, along with "
"special handling of 4 codes:\n"
"\n"
"  * * 200 (OK)\n"
"\n"
"Signals that the content of a page/feed was retrieved successfully.\n"
"\n"
"  * * 301 (Moved Permanently)\n"
"\n"
"Signals that a page/feed has moved permanently, and that your database of "
"feeds should be updated to reflect the new URI.\n"
"\n"
"  * * 304 (Not Modified)\n"
"\n"
"Signals that a page/feed has not changed since it was last fetched.\n"
"\n"
"  * * 410 (Gone)\n"
"\n"
"Signals that a page/feed is gone and will never be coming back, so you "
"should stop trying to fetch it."
msgstr ""
"_URI::Fetch_ は HTTP ページにアクセスするためのスマートなクライアントです。シ"
"ンジケーションフィード (RSS, Atom など) にも対応し、賢く帯域や時間の削減にも"
"効果を発揮します。主な機能は下記のとおりです: \n"
"* * GZIP サポート\n"
"\n"
"_Compress::Zlib_ がインストールされていれば、 _URI::Fetch_ は圧縮されたコンテ"
"ンツを自動的に取得し、帯域 (および時間) の削減を行なうことができます。 \n"
"* * _Last-Modified_ および _ETag_ サポート\n"
"\n"
"ローカルキャッシュを使用している場合 (詳しくは _fetch_ の _Cache_ パラメータ"
"をご覧ください) 、 _URI::Fetch_ はサーバからの _Last-Modified_ と _ETag_ の"
"ヘッダを追跡して、直近に確認した時刻よりも新しい場合にのみダウンロードを行な"
"うようになります。\n"
"* * HTTP エラーコードの適切な解釈\n"
"\n"
"特にシンジケーションフィードを使用する場合、 HTTP エラーコードは特別なもので"
"す。クライアント側を正しく動作させるには特別な注意を払う必要があります。 "
"_URI::Fetch_ はそのような処理を自動的に行ないますので、普通に使用するだけで正"
"しく動作するようになります。\n"
"\n"
"_fetch_ からの応答は HTTP のレスポンスコードそのものを表わしますが、下記に特"
"別な処理を行なう 4 種類を示します:\n"
"\n"
"  * * 200 (OK)\n"
"\n"
"ページやフィードの内容を正しく取得できたことを表わします。\n"
"\n"
"  * * 301 (Moved Permanently)\n"
"\n"
"ページやフィードが恒久的に移動したことを表わします。そのため、示された新しい "
"URI を参照するよう、データベースを書き換える必要があることを表わします。\n"
"\n"
"  * * 304 (Not Modified)\n"
"\n"
"ページやフィードが直近のアクセス以降に変更されていないことを表わします。\n"
"\n"
"  * * 410 (Gone)\n"
"\n"
"ページやフィードが廃止され、削除されたことを表わします。このようなページへの"
"アクセスは停止すべきです。"

#. leap/perl-URI-Find/summary
msgid "Find URIs in arbitrary text"
msgstr "任意のテキスト内における URI の検出"

#. leap/perl-URI-Find/description
msgid ""
"This module does one thing: Finds URIs and URLs in plain text. It finds them "
"quickly and it finds them *all* (or what URI.pm considers a URI to be.) It "
"only finds URIs which include a scheme (http:// or the like), for something "
"a bit less strict have a look at URI::Find::Schemeless.\n"
"\n"
"For a command-line interface, urifind is provided."
msgstr ""
"このモジュールは、テキスト内で URI や URL を検出するだけの機能を提供します。"
"検索は素早く、かつ *すべて* のもの (URI.pm が URI であると認識できるもの) を"
"取り出すことができます。ただし、本モジュールではスキーム (例: http://) を含"
"む URI のみを検出します。スキームを含まないものなど、より緩い検索を行ないたい"
"場合は、 URI::Find::Schemeless をご覧ください。\n"
"\n"
"コマンドラインインターフェイスとしては、 urifind が提供されています。"

#. leap/perl-URI-Nested/summary
#. leap/perl-URI-Nested/description
msgid "Nested URIs"
msgstr "入れ子 URI"

#. leap/perl-URI-Template/summary
msgid "Object for handling URI templates (RFC 6570)"
msgstr "URI テンプレート (RFC 6570) 処理オブジェクト"

#. leap/perl-URI-Template/description
msgid ""
"This module provides a wrapper around URI templates as described in RFC "
"6570: http://tools.ietf.org/html/rfc6570."
msgstr ""
"このモジュールは RFC 6570: http://tools.ietf.org/html/rfc6570 で規定されてい"
"る URI テンプレートに対するラッパーです。"

#. leap/perl-URI-db/summary
#. leap/perl-URI-db/description
msgid "Database URIs"
msgstr "データベース URI"

#. leap/perl-Unicode-Collate/summary
msgid "Unicode Collation Algorithm"
msgstr "Unicode 照合アルゴリズム"

#. leap/perl-Unicode-Collate/description
msgid ""
"This module is an implementation of Unicode Technical Standard #10 (a.k.a. "
"UTS #10) - Unicode Collation Algorithm (a.k.a. UCA)."
msgstr ""
"このモジュールは、 Unicode Technical Standard #10 (別名 UTS #10, Unicode照合"
"アルゴリズム (UCA)) の実装です。"

#. leap/perl-Unicode-LineBreak/summary
msgid "UAX #14 Unicode Line Breaking Algorithm"
msgstr "UAX #14 Unicode 改行アルゴリズム"

#. leap/perl-Unicode-LineBreak/description
msgid ""
"Unicode::LineBreak performs Line Breaking Algorithm described in Unicode "
"Standard Annex #14 [UAX #14]. East_Asian_Width informative property defined "
"by Annex #11 [UAX #11] will be concerned to determine breaking positions."
msgstr ""
"Unicode::LineBreak は Unicode Standard Annex #14 [UAX #14] で規定されている改"
"行アルゴリズムを実施します。改行を実施する際、 Annex #11 [UAX #11] で定義され"
"ている East_Asian_Width 情報プロパティも考慮されます。"

#. leap/perl-Unicode-Map/summary
msgid "maps charsets from and to utf16 unicode"
msgstr "utf16 (Unicode) 文字コードセットマッピング処理"

#. leap/perl-Unicode-Map/description
msgid ""
"This module converts strings from and to 2-byte Unicode UCS2 format. All "
"mappings happen via 2 byte UTF16 encodings, not via 1 byte UTF8 encoding. To "
"transform these use Unicode::String.\n"
"\n"
"For historical reasons this module coexists with Unicode::Map8. Please use "
"Unicode::Map8 unless you need to care for two byte character sets, e.g. "
"chinese GB2312. Anyway, if you stick to the basic functionality (see "
"documentation) you can use both modules equivalently.\n"
"\n"
"Practically this module will disappear from earth sooner or later as Unicode "
"mapping support needs somehow to get into perl's core. If you like to work "
"on this field please don't hesitate contacting Gisle Aas!\n"
"\n"
"This module can't deal directly with utf8. Use Unicode::String to convert "
"utf8 to utf16 and vice versa.\n"
"\n"
"Character mapping is according to the data of binary mapfiles in Unicode::"
"Map hierarchy. Binary mapfiles can also be created with this module, "
"enabling you to install own specific character sets. Refer to mkmapfile or "
"file REGISTRY in the Unicode::Map hierarchy."
msgstr ""
"このモジュールは Unicode UCS2 形式の文字列変換を扱うモジュールです。マッピン"
"グにあたっては、 UTF8 の 1 バイトエンコードではなく、 UTF16 エンコードを利用"
"した 2 バイトのエンコードを行ないます。\n"
"\n"
"歴史上の経緯から、このモジュールは Unicode::Map8 と共存しています。中国語の "
"GB2312 など、 2 バイトの文字セットを扱う必要がある場合を除いて、 Unicode::"
"Map8 をお使いください。もちろん基本的な機能 (詳しくはドキュメンテーションをお"
"読みください) は、いずれのモジュールでも同じように動作します。\n"
"\n"
"実際のところ、このモジュールは Perl の中枢機能に Unicode マッピングのサポート"
"が加えられることから、早かれ遅かれ消える運命にあります。この領域で何らかの作"
"業を行ないたい場合は、臆することなく Gisle Aas 氏にご連絡ください。\n"
"\n"
"また、このモジュールは utf8 を直接扱うことができません。 utf8 から utf16 に変"
"換を行ないたい場合は、 Unicode::String をお使いください。\n"
"\n"
"文字コードのマッピングは Unicode::Map の階層構造内にあるバイナリマップファイ"
"ルを基礎にしています。バイナリのマップファイルもこのモジュールで作成すること"
"ができますが、これによって独自の文字コードセットを作成することができます。 "
"Unicode::Map の階層構造について、詳しくは mkmapfile もしくは REGISTRY ファイ"
"ルをお読みください。"

#. leap/perl-Unicode-Map8/summary
msgid "Mapping table between 8-bit chars and Unicode"
msgstr "8 ビット文字と Unicode のマッピングテーブル"

#. leap/perl-Unicode-Map8/description
msgid ""
"The Unicode::Map8 class implements efficient mapping tables between 8-bit "
"character sets and 16-bit character sets like Unicode. The tables are "
"efficient both in terms of space allocated and translation speed. The 16-bit "
"strings are assumed to use network byte order."
msgstr ""
"Unicode::Map8 クラスは、 8 ビットキャラクタセットと Unicode のような 16 ビッ"
"トキャラクタセット の間を効果的にマッピングする機能を実装しています。 この"
"テーブルは割り当てる領域や変換速度の面で便利な形になっています。 なお、 16 "
"ビット文字列はネットワークバイトオーダーであることを前提にしています。"

#. leap/perl-Unicode-Normalize/summary
msgid "Unicode Normalization Forms"
msgstr "Unicode 正規化フォーム"

#. leap/perl-Unicode-Normalize/description
msgid ""
"Parameters:\n"
"\n"
"'$string' is used as a string under character semantics (see "
"_perlunicode_).\n"
"\n"
"'$code_point' should be an unsigned integer representing a Unicode code "
"point.\n"
"\n"
"Note: Between XSUB and pure Perl, there is an incompatibility about the "
"interpretation of '$code_point' as a decimal number. XSUB converts "
"'$code_point' to an unsigned integer, but pure Perl does not. Do not use a "
"floating point nor a negative sign in '$code_point'."
msgstr ""
"バラメータ:\n"
"\n"
"'$string' は文字セマンティクスで扱われる文字列です (詳しくは _perlunicode_ を"
"お読みください) 。\n"
"\n"
"'$code_point' は Unicode コードポイントを表わす符号無し整数です。\n"
"\n"
"注意: XSUB と純粋 Perl の間では、 '$code_point' を 10 進数の数値として解釈す"
"る際の非互換性が存在しています。 XSUB では '$code_point' を符号無し整数に変換"
"しますが、純粋 Perl ではそれを行ないません。 '$code_point' には小数点、もしく"
"は負の数値を入れてはなりません。"

#. leap/perl-Unicode-String/summary
msgid "String of Unicode characters (UTF-16BE)"
msgstr "Unicode 文字による文字列 (UTF-16BE)"

#. leap/perl-Unicode-String/description
msgid ""
"A 'Unicode::String' object represents a sequence of Unicode characters. "
"Methods are provided to convert between various external formats (encodings) "
"and 'Unicode::String' objects, and methods are provided for common string "
"manipulations.\n"
"\n"
"The functions utf32be(), utf32le(), utf16be(), utf16le(), utf8(), utf7(), "
"latin1(), uhex(), uchr() can be imported from the 'Unicode::String' module "
"and will work as constructors initializing strings of the corresponding "
"encoding.\n"
"\n"
"The 'Unicode::String' objects overload various operators, which means that "
"they in most cases can be treated like plain strings.\n"
"\n"
"Internally a 'Unicode::String' object is represented by a string of 2 byte "
"numbers in network byte order (big-endian). This representation is not "
"visible by the API provided, but it might be useful to know in order to "
"predict the efficiency of the provided methods."
msgstr ""
"'Unicode::String' オブジェクトは Unicode による文字の並びを保持するための仕組"
"みです。メソッドとして、様々な外部形式 (エンコーディング) と 'Unicode::"
"String' との相互変換機能が用意されているほか、一般的な文字列操作機能も提供さ"
"れています。\n"
"\n"
"'Unicode::String' では utf32be(), utf32le(), utf16be(), utf16le(), utf8(), "
"utf7(), latin1(), uhex(), uchr() の各関数をインポートしているほか、これらは対"
"応するエンコーディングで文字列を初期化するコンストラクタとしても動作しま"
"す。\n"
"\n"
"'Unicode::String' オブジェクトでは様々な演算子もオーバーロードしていて、これ"
"により多くの場合、純粋な文字列操作のように扱うこともできます。\n"
"\n"
"なお、内部的には 'Unicode::String' はネットワークバイトオーダー (big endian) "
"で 2 バイトの数値を表現しています。 API からはこのような表記を確認することは"
"できませんが、メソッドの利用効率を考慮する際には便利な情報となるでしょう。"

#. leap/perl-Unicode-Stringprep/summary
msgid "Preparation of Internationalized Strings (S<RFC 3454>)"
msgstr "国際化文字列 (S<RFC 3454>) の準備"

#. leap/perl-Unicode-Stringprep/description
msgid ""
"This module implements the _stringprep_ framework for preparing Unicode text "
"strings in order to increase the likelihood that string input and string "
"comparison work in ways that make sense for typical users throughout the "
"world. The _stringprep_ protocol is useful for protocol identifier values, "
"company and personal names, internationalized domain names, and other text "
"strings.\n"
"\n"
"The _stringprep_ framework does not specify how protocols should prepare "
"text strings. Protocols must create profiles of stringprep in order to fully "
"specify the processing options."
msgstr ""
"このモジュールは、世界中の一般的なユーザにとって意義のある、文字列入力や文字"
"列比較などの機能を Unicode テキスト文字列に対して実施する機能を準備するため"
"の、 _stringprep_ フレームワークを提供します。 _stringprep_ プロトコルはプロ"
"トコルの識別子や企業名、個人名、国際化ドメイン名などのテキスト文字列に対し"
"て、便利な仕組みを提供します。\n"
"\n"
"_stringprep_ フレームワークでは、具体的にテキスト文字列を処理する方法について"
"は規定していません。処理オプションを完全に指定するには、 stringprep のプロ"
"ファイルを作成しなければなりません。"

#. leap/perl-Unix-Syslog/summary
msgid "Perl interface to the UNIX syslog(3) calls"
msgstr "UNIX syslog(3) コールに対する Perl インターフェイス"

#. leap/perl-Unix-Syslog/description
msgid ""
"This module provides an interface to the system logger syslogd(8) via Perl's "
"XSUBs. The implementation attempts to resemble the native libc- functions of "
"your system, so that anyone being familiar with syslog.h should be able to "
"use this module right away.\n"
"\n"
"Authors:\n"
"--------     Marcus Harnisch <marcus.harnisch@gmx.net>"
msgstr ""
"このモジュールは、システムロガーである syslogd(8) を Perl の XSUB 経由で呼び"
"出すことのできるインターフェイスです。実装はお使いのシステムにおけるネイティ"
"ブな libc 関数に似るように作られているため、 syslog.h に慣れたユーザであれ"
"ば、このモジュールをすぐに使いこなすことができるようになっています。\n"
"\n"
"作者:\n"
"--------     Marcus Harnisch <marcus.harnisch@gmx.net>"

#. leap/perl-Variable-Magic/summary
msgid "Associate user-defined magic to variables from Perl"
msgstr "ユーザ定義のマジックを Perl の変数に割り当てる機能"

#. leap/perl-Variable-Magic/description
msgid ""
"Magic is Perl's way of enhancing variables. This mechanism lets the user add "
"extra data to any variable and hook syntactical operations (such as access, "
"assignment or destruction) that can be applied to it. With this module, you "
"can add your own magic to any variable without having to write a single line "
"of XS.\n"
"\n"
"You'll realize that these magic variables look a lot like tied variables. It "
"is not surprising, as tied variables are implemented as a special kind of "
"magic, just like any 'irregular' Perl variable : scalars like '$!', '$(' or "
"'$^W', the '%ENV' and '%SIG' hashes, the '@ISA' array, 'vec()' and "
"'substr()' lvalues, threads::shared variables... They all share the same "
"underlying C API, and this module gives you direct access to it."
msgstr ""
"Magic とは変数を拡張するための Perl の仕組みです。これはユーザに対して、任意"
"の変数内に追加データを設定し、スクリプト内での操作 (たとえばアクセスや代入、"
"破壊など) をフックできるようになります。このモジュールを利用することで、XS の"
"単一行を記述したりすることなく、独自の Magic を任意の変数に設定することができ"
"ます。\n"
"\n"
"これらの Magic 変数はタイ変数によく似た仕組みであることがわかるはずです。これ"
"は驚くようなことではありません。タイ変数も Magic の特殊系として実装されている"
"からです。たとえば下記のような 'イレギュラー' な Perl 変数があります: '$!', "
"'$(', '$^W' のようなスカラー変数や '%ENV' と '%SIG' のようなハッシュ、 "
"'@ISA' のような配列や 'vec()' と 'substr()' のような lvalue 、 threads::"
"shared の変数など。これらはすべて同じ C 言語 API をベースにしていて、このモ"
"ジュールからそれらに直接アクセスできるようになります。"

#. leap/perl-Verilog-Perl/summary
#. leap/perl-Verilog-Perl/description
msgid "Verilog language utilities and parsing"
msgstr "Verilog 言語ユーティリティと処理"

#. leap/perl-WWW-Form-UrlEncoded/summary
msgid "Parser and builder for application/x-www-form-urlencoded"
msgstr "application/x-www-form-urlencoded 向けの処理と構築"

#. leap/perl-WWW-Form-UrlEncoded/description
msgid ""
"WWW::Form::UrlEncoded provides application/x-www-form-urlencoded parser and "
"builder. This module aims to have compatibility with other CPAN modules like "
"HTTP::Body's urlencoded parser.\n"
"\n"
"This module try to use WWW::Form::UrlEncoded::XS by default and fail to it, "
"use WWW::Form::UrlEncoded::PP instead"
msgstr ""
"WWW::Form::UrlEncoded は、 application/x-www-form-urlencoded 形式の処理と構築"
"を行ないます。このモジュールは、 HTTP::Body の urlencoded パーサのような他の "
"CPAN モジュールとの互換性を維持するように作られています。\n"
"\n"
"このモジュールは既定では WWW::Form::UrlEncoded::XS を使用しますが、このモ"
"ジュールの読み込みに失敗した場合は WWW::Form::UrlEncoded::PP を代わりに使用し"
"ます。"

#. leap/perl-WWW-Mechanize/summary
msgid "Handy web browsing in a Perl object"
msgstr "Perl オブジェクトから扱いやすい Web ブラウジング機能"

#. leap/perl-WWW-Mechanize/description
msgid ""
"Perl module for stateful programmatic web browsing, used for automating "
"interaction with websites."
msgstr ""
"機械的な Web ブラウジング向けの状態管理型の Perl モジュールです。 Web サイト"
"でのやり取りを自動化するために使用します。"

#. leap/perl-WWW-PAUSE-CleanUpHomeDir/summary
msgid "the module to clean up old dists from your PAUSE home directory"
msgstr ""
"お使いの PAUSE ホームディレクトリから配布物をクリーンアップするためのモジュー"
"ル"

#. leap/perl-WWW-PAUSE-CleanUpHomeDir/description
msgid ""
"The module provides means to clean up your PAUSE home directory from old "
"distributions with ability to undelete files if you so prefer."
msgstr ""
"このモジュールは、お使いの PAUSE ホームディレクトリから古い配布物を清掃し、必"
"要であれば清掃したものを復元する機能を提供します。"

#. leap/perl-WWW-Pastebin-PastebinCom-Create/summary
msgid "Paste On Www.Pastebin.Com Without Api Keys"
msgstr "API キー無しの Www.Pastebin.Com へのペースト"

#. leap/perl-WWW-Pastebin-PastebinCom-Create/description
msgid ""
"This module provides the means to paste on the www.pastebin.com manpage "
"pastebin, without the need for http://pastebin.com/api. See the WARNING!!! "
"section above."
msgstr ""
"このモジュールは www.pastebin.com に対して、 http://pastebin.com/api (API) を"
"利用せずに貼り付ける機能を提供します。詳しくは WARNING!!! セクションをお読み"
"ください。"

#. leap/perl-WWW-RobotRules/summary
msgid "database of robots.txt-derived permissions"
msgstr "robots.txt によるアクセス許可データベース"

#. leap/perl-WWW-RobotRules/description
msgid ""
"This module parses _/robots.txt_ files as specified in \"A Standard for "
"Robot Exclusion\", at <http://www.robotstxt.org/wc/norobots.html> Webmasters "
"can use the _/robots.txt_ file to forbid conforming robots from accessing "
"parts of their web site.\n"
"\n"
"The parsed files are kept in a WWW::RobotRules object, and this object "
"provides methods to check if access to a given URL is prohibited. The same "
"WWW::RobotRules object can be used for one or more parsed _/robots.txt_ "
"files on any number of hosts.\n"
"\n"
"The following methods are provided: \n"
"* $rules = WWW::RobotRules->new($robot_name)\n"
"\n"
"  This is the constructor for WWW::RobotRules objects. The first argument   "
"given to new() is the name of the robot. \n"
"* $rules->parse($robot_txt_url, $content, $fresh_until)\n"
"\n"
"  The parse() method takes as arguments the URL that was used to retrieve   "
"the _/robots.txt_ file, and the contents of the file. \n"
"* $rules->allowed($uri)\n"
"\n"
"  Returns TRUE if this robot is allowed to retrieve this URL. \n"
"* $rules->agent([$name])\n"
"\n"
"  Get/set the agent name. NOTE: Changing the agent name will clear the   "
"robots.txt rules and expire times out of the cache."
msgstr ""
"このモジュールは <http://www.robotstxt.org/wc/norobots.html> で公開されている"
"\"A Standard for Robot Exclusion\" で規定された _/robots.txt_ ファイルを処理"
"するモジュールです。 Webmaster は _/robots.txt_ ファイルを利用して、 Web サイ"
"ト内の特定箇所に対するロボットからのアクセスを、禁止することができます。\n"
"\n"
"処理されたファイルは WWW::RobotRules オブジェクトとして保管され、このオブジェ"
"クトが提供するメソッドを利用することで、特定の URL が禁止されているかどうかを"
"調べることができます。 WWW::RobotRules オブジェクトは、 1 つまたは複数のホス"
"トに対するルールを調べることもできます。\n"
"\n"
"下記のようなメソッドが用意されています:\n"
"* $rules = WWW::RobotRules->new($robot_name)\n"
"\n"
"  これは WWW::RobotRules のコンストラクタです。最初のパラメータとして、ロボッ"
"トの名称を指定します。\n"
"* $rules->parse($robot_txt_url, $content, $fresh_until)\n"
"\n"
"  parse() メソッドは、 _/robots.txt_ ファイルの取得元 (および実際のファイルが"
"存在する) URL を指定します。\n"
"* $rules->allowed($uri)\n"
"\n"
"  指定した URL に対して、このロボットからのアクセスが許可されていれば TRUE を"
"返します。\n"
"* $rules->agent([$name])\n"
"\n"
"  エージェント名を設定または取得します。注意: エージェント名を変更すると、 "
"robots.txt のルールが消去され、キャッシュも無効となります。"

#. leap/perl-WWW-Shorten/summary
msgid "Interface to URL shortening sites"
msgstr "URL 短縮サイトに対するインターフェイス"

#. leap/perl-WWW-Shorten/description
msgid ""
"A Perl interface to various services that shorten URLs. These sites maintain "
"databases of long URLs, each of which has a unique identifier."
msgstr ""
"URLを短縮するさまざまなサービスへのPerlインタフェース。これらのサイトは、それ"
"ぞれ一意の識別子を持つ長いURLのデータベースを保持しています。"

#. leap/perl-Want/summary
msgid "Generalisation of C<Wantarray>"
msgstr "C<Wantarray> の生成"

#. leap/perl-Want/description
msgid ""
"This module generalises the mechanism of the *wantarray* function, allowing "
"a function to determine in some detail how its return value is going to be "
"immediately used."
msgstr ""
"このモジュールは *wantarray* 関数の仕組みを一般化するもので、関数に対して返す"
"値の詳細を判断させるための仕組みです。"

#. leap/perl-WeakRef/summary
msgid "API for weak references to be created in Perl"
msgstr "Perl 内で作られる弱参照のための API"

#. leap/perl-WeakRef/description
msgid ""
"A patch to Perl 5.005_55 by the author implements a core API for weak "
"references. This module is a Perl-level interface to that API, allowing weak "
"references to be created in Perl.\n"
"\n"
"A weak reference is just like an ordinary Perl reference except that it "
"isn't included in the reference count of the thing referred to. This means "
"that once all references to a particular piece of data are weak, the piece "
"of data is freed and all the weak references are set to undef. This is "
"particularly useful for implementing circular data structures without memory "
"leaks or caches of objects.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Tuomas J. Lukka      <lukka@iki.fi>"
msgstr ""
"作者による Perl 5.005_55 に対するパッチを適用することで、弱参照のための 中枢 "
"API が実装されるようになりました。このモジュールは、 Perl 内で作成される 弱参"
"照を使用するための Perl レベルインターフェイスです。\n"
"\n"
"弱参照とは通常の Perl 参照とほぼ同じものですが、唯一の例外は このオブジェクト"
"が参照するものは参照カウントには含まれないことにあります。 これによりデータ内"
"の特定の箇所に対する全ての参照が弱くなるため、 これらのデータを解放されること"
"になり、弱参照は undef の状態になります。 これはメモリリークを発生させずに循"
"環型のデータ構造を作成したり、オブジェクトに 対するキャッシュを作成したりする"
"ことができます。\n"
"\n"
"\n"
"\n"
"作者:\n"
"--------     Tuomas J. Lukka      <lukka@iki.fi>"

#. leap/perl-Web-MREST/summary
msgid "Minimalistic REST server"
msgstr "最小構成の REST サーバ"

#. leap/perl-Web-MREST/description
msgid ""
"MREST stands for \"minimalistic\" or \"mechanical\" REST server. (Mechanical "
"because it relies on Web::Machine.)\n"
"\n"
"Web::MREST provides a fully functional REST server that can be started with "
"a simple command. Without modification, the server provides a set of "
"generalized resources that can be used to demonstrate how the REST server "
"works, or for testing.\n"
"\n"
"Developers can use Web::MREST as a platform for implementing their own REST "
"servers, as described below. App::Dochazka::REST is a \"real-world\" example "
"of such a server.\n"
"\n"
"For an introduction to REST and Web Services, see Web::MREST::"
"WebServicesIntro."
msgstr ""
"MREST とは \"minimalistic\" (最小構成の) または \"mechanical\" (機械的な) "
"REST サーバを意味します (\"mechanical\" とは Web::Machine に依存していること"
"によるものです) 。\n"
"\n"
"Web::MREST はシンプルなコマンドから始めることのできる、完全機能の REST サーバ"
"を提供します。モジュールを修正することなく、サーバ側で一般的に使用されるリ"
"ソースを提供することができます。これは REST サーバのデモンストレーションのほ"
"か、テスト用にも使用することができます。\n"
"\n"
"下記に示しているとおり、開発者は、 Web::MREST を独自の REST サーバを実装する"
"際のプラットフォームとして使用することができます。\n"
"App::Dochazka::REST は、そのようなサーバの \"実際の\" 例です。\n"
"\n"
"REST および Web サービスに関する導入説明については、 Web::MREST::"
"WebServicesIntro をお読みください。"

#. leap/perl-Web-MREST-CLI/summary
msgid "CLI components for Web::MEST-based applications"
msgstr "Web::MEST ベースのアプリケーションに対する CLI コンポーネント"

#. leap/perl-Web-MREST-CLI/description
msgid ""
"Top-level module of the the Web::MREST::CLI manpage distribution. Exports "
"some \"generalized\" functions that are used internally and might also be "
"useful for writing CLI clients in general."
msgstr ""
"Web::MREST::CLI 配布物のトップレベルモジュールです。内部的に使用されているい"
"くつかの \"一般化\" された関数を公開し、一般的な CLI クライアントを作成する際"
"の利便性を提供しています。"

#. leap/perl-Web-Machine/summary
msgid "Perl port of Webmachine"
msgstr "Webmachine の Perl 版"

#. leap/perl-Web-Machine/description
msgid ""
"'Web::Machine' provides a RESTful web framework modeled as a state machine. "
"You define one or more resource classes. Each resource represents a single "
"RESTful URI end point, such as a user, an email, etc. The resource class can "
"also be the target for 'POST' requests to create a new user, email, etc.\n"
"\n"
"Each resource is a state machine, and each request for a resource is handled "
"by running the request through that state machine.\n"
"\n"
"'Web::Machine' is built on top of Plack, but it handles the full request and "
"response cycle.\n"
"\n"
"See Web::Machine::Manual for more details on using 'Web::Machine' in "
"general, and how 'Web::Machine' and Plack interact.\n"
"\n"
"This is a port of at https://github.com/basho/webmachine, actually it is "
"much closer to the Ruby version|https://github.com/seancribbs/webmachine-"
"ruby, with a little bit of at https://github.com/tautologistics/nodemachine "
"and even some of at https://github.com/benoitc/pywebmachine thrown in for "
"good measure.\n"
"\n"
"You can learn a bit about Web::Machine's history from the slides for my 2012 "
"YAPC::NA talk|https://speakerdeck.com/stevan_little/rest-from-the-trenches.\n"
"\n"
"To learn more about Webmachine, take a look at the links in the SEE ALSO "
"section."
msgstr ""
"'Web::Machine' はステートマシンをモデルとした RESTful Web フレームワークを提"
"供します。 1 つまたは複数のリソースクラスを定義することができ、各リソースは単"
"一の RESTful URI エンドポイント (ユーザ、電子メールなど) を表します。また、リ"
"ソースクラスは新しいユーザや電子メールを作成するための 'POST' リクエストの"
"ターゲットとなります。\n"
"\n"
"各リソースはステートマシンであり、リソースに対する各リクエストは、ステートマ"
"シンを介してリクエストを実行することによって処理します。\n"
"\n"
"'Web::Machine' は Plack 上に構築されたものですが、完全なリクエストとレスポン"
"スのサイクルを処理することができます。\n"
"\n"
"'Web::Machine' の一般的な使い方、および 'Web::Machine' の仕組みや Plack の動"
"作について、詳しくは Web::Machine::Manual をご覧ください。\n"
"\n"
"これは https://github.com/basho/webmachine の移植版であり、実際には Ruby 版の"
"仕組み (https://github.com/seancribbs/webmachine-ruby) に非常に似ています。ま"
"た、 https://github.com/tautologistics/nodemachine や https://github.com/"
"benoitc/pywebmachine の仕組みからも一部ヒントを得ています。\n"
"\n"
"Web::Machine の歴史については、 2012 年の YAPC::NA のトーク (https://"
"speakerdeck.com/stevan_little/rest-from-the-trenches) をご覧ください。\n"
"\n"
"Webmachine について詳しく学ぶには、 SEE ALSO セクション内のリンクをご覧くださ"
"い。"

#. leap/perl-WebService-MusicBrainz/summary
msgid "Web service API to MusicBrainz database"
msgstr "MusicBrainz データベースに対する Web サービス API"

#. leap/perl-WebService-MusicBrainz/description
msgid "API to search the musicbrainz.org database"
msgstr "musicbrainz.org のデータベースを検索するための API"

#. leap/perl-Wx/summary
msgid "Interface to the Wxwidgets Cross-Platform Gui Toolkit"
msgstr ""
"Wxwidgets クロスプラットフォーム GUI ツールキットに対するインターフェイス"

#. leap/perl-Wx/description
msgid ""
"The Wx module is a wrapper for the wxWidgets (formerly known as wxWindows) "
"GUI toolkit.\n"
"\n"
"This module comes with extensive documentation in HTML format; you can "
"download it from http://wxperl.sourceforge.net/"
msgstr ""
"Wx モジュールは wxWidgets (以前は wxWindows という名称でした) GUI ツールキッ"
"トのラッパーです。\n"
"\n"
"このモジュールでは、 HTML 形式で広範囲のドキュメンテーションが提供されていま"
"す。ダウンロードは http://wxperl.sourceforge.net/ から行なってください。"

#. leap/perl-X11-Protocol/summary
msgid "Perl module for the X Window System Protocol, version 11"
msgstr "X Window System プロトコルバージョン 11 向けの Perl モジュール"

#. leap/perl-X11-Protocol/description
msgid ""
"X11::Protocol is a client-side interface to the X11 Protocol (see X(1) for "
"information about X11), allowing perl programs to display windows and "
"graphics on X11 servers.\n"
"\n"
"A full description of the protocol is beyond the scope of this "
"documentation; for complete information, see the _X Window System Protocol, "
"X Version 11_, available as Postscript or *roff source from 'ftp://ftp.x."
"org', or _Volume 0: X Protocol Reference Manual_ of O'Reilly & Associates's "
"series of books about X (ISBN 1-56592-083-X, 'http://www.oreilly.com'), "
"which contains most of the same information."
msgstr ""
"X11::Protocol は X11 プロトコル (X11 について、詳しくは X(1) のマニュアルペー"
"ジをお読みください) に対するクライアント側のインターフェイスです。これによ"
"り、Perl プログラムから X11 サーバ上にウインドウやグラフィックを描画したりす"
"ることができます。\n"
"\n"
"このプロトコルの完全な説明は、このドキュメンテーションには書いてありません。"
"完全な説明をご希望の場合は、 'ftp://ftp.x.org' で Postscript 形式および "
"*roff 形式で提供されている _X Window System Protocol, X Version 11_ や、X に"
"関する書籍であるオライリー社発行 _Volume 0: X Protocol Reference Manual_ "
"(ISBN 1-56592-083-X, 'http://www.oreilly.com') をお読みください。いずれも同じ"
"情報を提供しています。"

#. leap/perl-X11-Protocol-Other/summary
msgid "Miscellaneous X11::Protocol helpers"
msgstr "その他の X11:Protocl ヘルパー"

#. leap/perl-X11-Protocol-Other/description
msgid "This is some helper functions for 'X11::Protocol'."
msgstr "'X11::Protocol' に対するその他のヘルパーです。"

#. leap/perl-X500-DN/summary
msgid "Provides an interface for RFC 2253 style DN strings"
msgstr "RFC 2253 形式の DN 文字列に対するインターフェイス"

#. leap/perl-X500-DN/description
msgid ""
"X500::DN Provides a pure perl parser and formatter for RFC 2253 style DN "
"strings.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Robert Joop <yaph-020416@timesink.de>"
msgstr ""
"X500::DN は、 RFC 2253 形式の DN 文字列を処理したり書式を整えたりする 純粋 "
"Perl モジュールです。\n"
"\n"
"\n"
"\n"
"作者:\n"
"--------     Robert Joop <yaph-020416@timesink.de>"

#. leap/perl-XML-Atom/summary
msgid "Atom feed and API implementation"
msgstr "ATOM フィードと API 実装"

#. leap/perl-XML-Atom/description
msgid ""
"Atom is a syndication, API, and archiving format for weblogs and other data. "
"_XML::Atom_ implements the feed format as well as a client for the API."
msgstr ""
"ATOM はブログやその他のデータに対するコンテンツ配信規格であり、 API や書式を"
"規定しています。 _XML::Atom_ はフィード形式の実装のほか、 API 向けのクライア"
"ントも提供しています。"

#. leap/perl-XML-Atom-SimpleFeed/summary
msgid "No-fuss generation of Atom syndication feeds"
msgstr "Atom シンジケーションフィードの安定版"

#. leap/perl-XML-Atom-SimpleFeed/description
msgid ""
"This is a minimal API for generating Atom syndication feeds quickly and "
"easily. It supports all aspects of the Atom format itself but has no "
"mechanism for the inclusion of extension elements.\n"
"\n"
"You can supply strings for most things, and the module will provide useful "
"defaults. When you want more control, you can provide data structures, as "
"documented, to specify more particulars."
msgstr ""
"これは Atom シンジケーションフィードを素早く簡易に生成するための最小 API で"
"す。 Atom 形式自身の全てには対応していますが、拡張要素の取り込みの仕組みはあ"
"りません。\n"
"\n"
"ほとんどのものに対して文字列を設定することができるほか、モジュール側には有用"
"な既定値が設定されています。より詳しく制御を行ないたい場合は、文書化されてい"
"るとおりデータ構造を提供することで、複雑な処理を行なうことができます。"

#. leap/perl-XML-Bare/summary
msgid "Minimal XML parser implemented via a C state engine"
msgstr "C ステートエンジンで実装されている最小 XML パーサー"

#. leap/perl-XML-Bare/description
msgid ""
"This module is a 'Bare' XML parser. It is implemented in C. The parser "
"itself is a simple state engine that is less than 500 lines of C. The parser "
"builds a C struct tree from input text. That C struct tree is converted to a "
"Perl hash by a Perl function that makes basic calls back to the C to go "
"through the nodes sequentially.\n"
"\n"
"The parser itself will only cease parsing if it encounters tags that are not "
"closed properly. All other inputs will parse, even invalid inputs. To "
"allowing checking for validity, a schema checker is included in the module "
"as well.\n"
"\n"
"The schema format is custom and is meant to be as simple as possible. It is "
"based loosely around the way multiplicity is handled in Perl regular "
"expressions."
msgstr ""
"このモジュールは、 C 言語で実装された '複雑な機能のない' XML パーサーです。"
"パーサー自身はシンプルなステートエンジンで動作し、 500 行未満の C コードでで"
"きています。このパーサーは入力テキストから C 言語の構造体ツリーを構築し、  C "
"言語に対する基本的なコールバック関数を順次呼び出す Perl の関数を利用して "
"Perl のハッシュに変換されます。\n"
"\n"
"パーサー自身は正しく閉じられていないタグを検出すると、解釈を中止します。その"
"他の入力については検証されず、そのまま解釈されます。正当性をチェックしたい場"
"合は、本モジュール内のテキーマチェッカーをお使いください。\n"
"\n"
"スキーマの形式は独自のもので、できるかぎりシンプルになるように作られていま"
"す。多重度は Per の正規表現を利用して緩くチェックされます。"

#. leap/perl-XML-CommonNS/summary
#. leap/perl-XML-CommonNS/description
msgid "A list of commonly used namespaces"
msgstr "一般的に使用されるネームスペースのリスト"

#. leap/perl-XML-DOM/summary
msgid "Perl Module for Building Dom Level 1 Compliant Document Structures"
msgstr "DOM レベル 1 準拠の文書構造を構築するための Perl モジュール"

#. leap/perl-XML-DOM/description
msgid ""
"This module extends the XML::Parser module by Clark Cooper. The XML::Parser "
"module is built on top of XML::Parser::Expat, which is a lower level "
"interface to James Clark's expat library.\n"
"\n"
"XML::DOM::Parser is derived from XML::Parser. It parses XML strings or files "
"and builds a data structure that conforms to the API of the Document Object "
"Model as described at http://www.w3.org/TR/REC-DOM-Level-1. See the XML::"
"Parser manpage for other available features of the XML::DOM::Parser class. "
"Note that the 'Style' property should not be used (it is set internally.)\n"
"\n"
"The XML::Parser _NoExpand_ option is more or less supported, in that it will "
"generate EntityReference objects whenever an entity reference is encountered "
"in character data. I'm not sure how useful this is. Any comments are "
"welcome.\n"
"\n"
"As described in the synopsis, when you create an XML::DOM::Parser object, "
"the parse and parsefile methods create an _XML::DOM::Document_ object from "
"the specified input. This Document object can then be examined, modified and "
"written back out to a file or converted to a string.\n"
"\n"
"When using XML::DOM with XML::Parser version 2.19 and up, setting the XML::"
"DOM::Parser option _KeepCDATA_ to 1 will store CDATASections in CDATASection "
"nodes, instead of converting them to Text nodes. Subsequent CDATASection "
"nodes will be merged into one. Let me know if this is a problem.\n"
"\n"
"When using XML::Parser 2.27 and above, you can suppress expansion of "
"parameter entity references (e.g. %pent;) in the DTD, by setting "
"_ParseParamEnt_ to 1 and _ExpandParamEnt_ to 0. See /_Hidden_Nodes_ for "
"details.\n"
"\n"
"A Document has a tree structure consisting of _Node_ objects. A Node may "
"contain other nodes, depending on its type. A Document may have Element, "
"Text, Comment, and CDATASection nodes. Element nodes may have Attr, Element, "
"Text, Comment, and CDATASection nodes. The other nodes may not have any "
"child nodes.\n"
"\n"
"This module adds several node types that are not part of the DOM spec (yet.) "
"These are: ElementDecl (for <!ELEMENT ...> declarations), AttlistDecl (for <!"
"ATTLIST ...> declarations), XMLDecl (for <?xml ...?> declarations) and "
"AttDef (for attribute definitions in an AttlistDecl.)"
msgstr ""
"このモジュールは Clark Cooper 氏による XML::Parser モジュールの拡張です。 "
"XML::Parser モジュールは XML::Parser::Expat 上に構築されていますが、こちらは "
"James Clark 氏の expat ライブラリに対する低レベルインターフェイスになっていま"
"す。\n"
"\n"
"XML::DOM::Parser は XML::Parser の派生クラスです。 XML の文字列やファイルを>"
"処理して、 http://www.w3.org/TR/REC-DOM-Level-1 で定義されている Document "
"Object Model の API に準拠したデータ構造を構築します。 XML::DOM::Parser クラ"
"スでほかに利用することのできる機能は、 XML::Parser のマニュアルページをお読み"
"ください。なお、 'Style' プロパティは使用すべきではありません (内部で設定され"
"ます) 。\n"
"\n"
"XML::Parser の _NoExpand_ オプションは少なくともサポートされている状況にあり"
"ますが、文字データ内にエンティティ参照が見つかると、常に EntityReference オブ"
"ジ>ェクトを生成します。これがどのように有用なのかはわかりません。コメントを歓"
"迎します。\n"
"\n"
"概要にも示している通り、 XML::DOM::Parser オブジェクトを作成すると、 parse, "
"parsefile メソッドは指定した入力から _XML::DOM::Document_ オブジェクトを作成"
"します。この Document オブジェクトは参照や修正を行なうことができるほか、ファ"
"イルに保存したり文字列に変換したりすることもできます。\n"
"\n"
"XML::Parser バージョン 2.19 もしくはそれ以降で XML::DOM を使用すると、 XML::"
"DOM::Parser のオプションである _KeepCDATA_ が 1 に設定され、 CDATASections を"
"テキストノードに変換せずに CDATASection に保存するようになります。その後の "
"CDATASection ノードは、 1 つにまとめられます。何か問題があれば教えてくださ"
"い。\n"
"\n"
"また、 XML::Parser 2.27 もしくはそれ以降を使用し、 _ParseParamEnt_ を 1 に、 "
"_ExpandParamEnt_ を 0 に設定すると、 DTD 内にあるエンティティ参照 (例: "
"%pent;) のパラメータ展開を省略することができるようになります。詳しくは /"
"_Hidden_Nodes_ をお読みください。\n"
"\n"
"Document には _Node_ オブジェクトを含むツリー構造が含まれています。 Node はそ"
"の種類によって他の Node を含むことができます。 Document には Element, Text, "
"Comment, CDATASection の各ノードを含みます。また、 Element は Attr, Element, "
"Text, Comment, CDATASection の各ノードを含みます。他のノードの場合は、子ノー"
"ドを含むことができない場合があります。\n"
"\n"
"このモジュールは DOM の仕様にはまだ含まれていない、いくつかのノードタイプに>"
"も対応しています。たとえば ElementDecl (<!ELEMENT ...> 宣言) や AttlistDecl "
"(<!ATTLIST ...> 宣言) 、そして XMLDecl (<?xml ...?> 宣言) や AttDef "
"(AttlistDecl 内での属性定義) などがあります。"

#. leap/perl-XML-DOM-XPath/summary
msgid ""
"Perl extension to add XPath support to XML::DOM, using XML::XPath engine"
msgstr ""
"XML::XPath エンジンを利用して XPath サポートを XML::DOM に追加するための "
"Perl 拡張"

#. leap/perl-XML-DOM-XPath/description
msgid ""
"XML::DOM::XPath allows you to use XML::XPath methods to query a DOM. This is "
"often much easier than relying only on getElementsByTagName."
msgstr ""
"XML::DOM::XPath は XML::XPath メソッドを利用して、 DOM の問い合わせを実行しま"
"す。 getElementsByTagName だけに依存したつくりよりも、しばしばずっと簡単に利"
"用することができます。"

#. leap/perl-XML-Dumper/summary
msgid "Perl module for dumping Perl objects from/to XML"
msgstr "Perl のオブジェクトと XML との間を相互に変換するための Perl モジュール"

#. leap/perl-XML-Dumper/description
msgid ""
"XML::Dumper dumps Perl data to XML format. XML::Dumper can also read XML "
"data that was previously dumped by the module and convert it back to Perl. "
"You can use the module read the XML from a file and write the XML to a file. "
"Perl objects are blessed back to their original packaging; if the modules "
"are installed on the system where the perl objects are reconstituted from "
"xml, they will behave as expected. Intuitively, if the perl objects are "
"converted and reconstituted in the same environment, all should be well. And "
"it is.\n"
"\n"
"  Authors: \t\tMike Wong <mike_w3@pacbell.net> \t\tJonathan Eisenzopf "
"<eisen@pobox.com>"
msgstr ""
"XML::Dumper は Perl のデータを XML 形式に出力することができます。また、以前に"
"このモジュールで作成した出力データの XML を読み込むこともできます。このほ"
"か、 XML をファイルに書き出したり、ファイルから読み込んだりすることもできま"
"す。 Perl のオブジェクトは元々のパッケージ方法に従って構築されるため、 XML か"
"ら Perl のオブジェクトに再構築したシステムと同じシステムにモジュールをインス"
"トールすれば、動作は同じになります。同様に Perl オブジェクトを同じシステムで"
"扱えば、動作も同じになります。\n"
"\n"
"  著者: \t\tMike Wong <mike_w3@pacbell.net> \t\tJonathan Eisenzopf "
"<eisen@pobox.com>"

#. leap/perl-XML-Entities/summary
msgid "Perl Module to decode Strings with XML Entities"
msgstr "XML エンティティの文字列をデコードするための Perl モジュール"

#. leap/perl-XML-Entities/description
msgid "This module deals with decoding of strings with XML character entities."
msgstr ""
"このモジュールは、 XML の文字エンティティの文字列をデコードする処理を行ないま"
"す。"

#. leap/perl-XML-Filter-BufferText/summary
msgid "Filter to put all characters() in one event"
msgstr "すべての character() を 1 つのイベントにまとめるフィルタ"

#. leap/perl-XML-Filter-BufferText/description
msgid ""
"This is a very simple filter. One common cause of grief (and programmer "
"error) is that XML parsers aren't required to provide character events in "
"one chunk. They can, but are not forced to, and most don't. This filter does "
"the trivial but oft-repeated task of putting all characters into a single "
"event.\n"
"\n"
"Note that this won't help you cases such as:\n"
"\n"
"  <foo> blah <!-- comment --> phubar </foo>\n"
"\n"
"In the above case, given the interleaving comment, there will be two "
"'character()' events. This may be worked around in the future if there is "
"demand for it.\n"
"\n"
"An interesting way to use this filter, instead of telling users to use it, "
"is to return it from your handler's constructor, already configured and all. "
"That'll make the buffering totally transparent to them ('XML::SAX::Writer' "
"does that)."
msgstr ""
"これは非常にシンプルなフィルタです。よくある悲しみ (もしくはプログラマのエ"
"ラー) の原因としては、 XML パーサが文字イベントを 1 つのチャンク (塊) として"
"提供する必要がない、ということです。パーサ側では実行できても強制はされていな"
"いためです。このフィルタは、すべての文字を 1 つのイベントにまとめるような、頻"
"繁に繰り返される処理を提供しています。\n"
"\n"
"ただし、下記のような場合には対応できません:\n"
"\n"
"  <foo> blah <!-- comment --> phubar </foo>\n"
"\n"
"上記の例ではコメントが間に挟まっているため、 2 つの 'character()' イベントが"
"生成されます。こちらについては、将来的に必要とされれば対応する予定です。\n"
"\n"
"また、このフィルタの興味深い使い方としては、ユーザに対して使用を伝えるのでは"
"なく、お使いのハンドラのコンストラクタですべてを設定して、それを返すことで"
"す。これにより、バッファリング処理が完全に透過的になります ('XML::SAX::"
"Writer' がそうしています) 。"

#. leap/perl-XML-Generator-PerlData/summary
msgid ""
"Perl extension for generating SAX2 events from nested Perl data structures"
msgstr "入れ子になったデータ構造から SAX2 イベントを生成するための Perl 拡張"

#. leap/perl-XML-Generator-PerlData/description
msgid ""
"XML::Generator::PerlData provides a simple way to generate SAX2 events from "
"nested Perl data structures, while providing finer-grained control over the "
"resulting document streams.\n"
"\n"
"Processing comes in two flavors: *Simple Style* and *Stream Style*:\n"
"\n"
"In a nutshell, 'simple style' is best used for those cases where you have a "
"a single Perl data structure that you want to convert to XML as quickly and "
"painlessly as possible. 'Stream style' is more useful for cases where you "
"are receiving chunks of data (like from a DBI handle) and you want to "
"process those chunks as they appear. See *PROCESSING METHODS* for more info "
"about how each style works."
msgstr ""
"XML::Generator::PerlData は入れ子になった Perl のデータ構造から、 SAX2 イベン"
"トを生成することのできるシンプルな方法を提供します。出力されるドキュメントス"
"トリームに対して、細かい調整を加える機能も用意されています。\n"
"\n"
"処理は 2 つの方法で行なうことができます: *シンプルスタイル* と *ストリームス"
"タイル* です:\n"
"\n"
"わかりやすく言うと、 'シンプルスタイル' とは単一の Perl データ構造を利用し"
"て、 XML にできる限り素早くかつ手間なくイベントを生成したい場合にベストな方法"
"です。もう一方の 'ストリームスタイル' は、 (DBI ハンドルなどを経由して) デー"
"タのチャンクを受け取っている場合で、チャンクが現れるごとに処理を行ないたいよ"
"うな場合に便利な仕組みです。各スタイルの動作について、詳しくは *PROCESSING "
"METHODS* をお読みください。"

#. leap/perl-XML-Handler-YAWriter/summary
msgid "Yet another Perl SAX XML Writer"
msgstr "もう 1 つの Perl SAX XML ライター"

#. leap/perl-XML-Handler-YAWriter/description
msgid ""
"YAWriter implements Yet Another XML::Handler::Writer. The reasons for this "
"one are that I needed a flexible escaping technique, and want some kind of "
"pretty printing. If an instance of YAWriter is created without any options, "
"the default behavior is to produce an array of strings containing the XML "
"in :\n"
"\n"
"  @{$ya->{Strings}}"
msgstr ""
"YAWriter は Yet Another XML::Handler::Writer の略で、もう 1 つのライター機能"
"を提供します。このモジュールは、柔軟なエスケープ処理テクニックを実装し、見や"
"すい出力を行なうことができるものです。 YAWriter のインスタンスをオプション無"
"しで作成した場合、既定の動作は XML を含む文字列の配列を生成します:\n"
"\n"
"  @{$ya->{Strings}}"

#. leap/perl-XML-LibXML/summary
msgid "Perl Binding for libxml2"
msgstr "libxml2 に対する Perl バインディング"

#. leap/perl-XML-LibXML/description
msgid ""
"This module is an interface to libxml2, providing XML and HTML parsers with "
"DOM, SAX and XMLReader interfaces, a large subset of DOM Layer 3 interface "
"and a XML::XPath-like interface to XPath API of libxml2. The module is split "
"into several packages which are not described in this section; unless stated "
"otherwise, you only need to 'use XML::LibXML;' in your programs."
msgstr ""
"このモジュールは、 DOM, SAX, XMLReader の各インターフェイスで XML や HTML "
"パーサの機能を提供する、 libxml2 向けインターフェイスです。 DOM Layer 3 イン"
"ターフェイスや libxml2 の XPath API インターフェイスである XML::XPath の機能"
"も提供しています。このモジュールはいくつかのパッケージに分解することができま"
"すが、ここでは説明していません。通常はプログラムから 'use XML::LibXML;' のよ"
"うに宣言してお使いください。"

#. leap/perl-XML-LibXML-PrettyPrint/summary
msgid "Add pleasant whitespace to a DOM tree"
msgstr "DOM ツリー内への適切なスペースの追加"

#. leap/perl-XML-LibXML-PrettyPrint/description
msgid ""
"Long XML files can be daunting for humans to read. Of course, XML is really "
"designed for computers to read - not people - but there are times when mere "
"mortals do need to read and edit XML by hand. For example, if your "
"application stores its configuration in XML, or you need to dump some XML to "
"STDOUT for debugging purposes.\n"
"\n"
"Syntax highlighting helps, but to really make sense of some XML, proper "
"indentation can be vital. Hence 'XML::LibXML::PrettyPrint' - it can be "
"applied to an the XML::LibXML manpage DOM tree to reformat it into a more "
"readable result.\n"
"\n"
"Pretty-printing XML is not as CPU-efficient as dumping it out sloppily, so "
"unless you're pretty sure that a human is going to need to make sense of "
"your XML, you should probably not use this module."
msgstr ""
"長い XML ファイルは人間にとって読みづらいものです。 そもそも XML はコンピュー"
"タによって読みやすい仕組みであり、人間にとって読みやすい形式ではないのです"
"が、場合によっては人間が手作業で読み取ったり編集したりする必要があることもあ"
"ります。たとえばお使いのアプリケーションが設定ファイルを XML 形式で保存してい"
"るような場合や、デバッグ目的で XML 形式を STDOUT に出力したりするような場合が"
"それに当たります。\n"
"\n"
"文法ハイライト機能でもある程度は読みにくさを改善してくれますが、適切なインデ"
"ント処理のほうがより効果的です。そのために 'XML::LibXML::PrettyPrint' が提供"
"されています。これは XML::LibXML の DOM ツリーを人間にとって読みやすい形式に"
"整形します。\n"
"\n"
"読みやすくなった XML ファイルはコンピュータ側では非効率なものですが、人間に"
"とっての読みやすさを必要とする場合には有用です。そうでない場合、このモジュー"
"ルは使用しないことをお勧めします。"

#. leap/perl-XML-LibXML-Simple/summary
msgid "XML::LibXML clone of XML::Simple::XMLin()"
msgstr "XML::Simple::XMLin() の XML::LibXML クローン"

#. leap/perl-XML-LibXML-Simple/description
msgid ""
"This module is a blunt rewrite of XML::Simple (by Grant McLean) to use the "
"XML::LibXML parser for XML structures, where the original uses plain Perl or "
"SAX parsers. \n"
"*Be warned:* this module thinks to be smart. You may very well shoot "
"yourself in the foot with this DWIMmery. Read the whole manual page at least "
"once before you start using it. If your XML is described in a schema or "
"WSDL, then use XML::Compile for maintainable code."
msgstr ""
"このモジュールは XML::Simple (Grant McLean 氏) の素っ気ない書き換えで、オリジ"
"ナル版では Perl や SAX パーサーを利用していたのに対して、このモジュールは "
"XML 構造用に XML::LibXML パーサーを利用するようになっています。\n"
"*警告:* このモジュールは賢く振る舞うはずです。期待通りに動作するはずですが、"
"まずは使い始める前にマニュアルページをお読みください。 XML にスキーマや WSDL "
"が設定されている場合は、メンテナンス性を向上させるため XML::Compile をお使い"
"ください。"

#. leap/perl-XML-LibXSLT/summary
msgid "Interface to the GNOME libxslt library"
msgstr "GNOME libxslt ライブラリに対するインターフェイス"

#. leap/perl-XML-LibXSLT/description
msgid ""
"This module is an interface to the GNOME project's libxslt. This is an "
"extremely good XSLT engine, highly compliant and also very fast. I have "
"tests showing this to be more than twice as fast as Sablotron."
msgstr ""
"このモジュールは GNOME プロジェクトの libxslt に対するインターフェイスです。"
"非常に良質な XSLT エンジンであり、標準への準拠と速度の面で有利な仕組みです。 "
"Sablotron と比較すると 2 倍もの速度が出るとの調査結果もあります。"

#. leap/perl-XML-Namespace/summary
msgid "Simple support for XML Namespaces"
msgstr "XML ネームスペース向けのシンプルな拡張"

#. leap/perl-XML-Namespace/description
msgid ""
"This module implements a simple object for representing XML Namespaces in "
"Perl. It provides little more than some syntactic sugar for your Perl "
"programs, saving you the bother of typing lots of long-winded URIs. It was "
"inspired by the Class::RDF::NS module distributed as part of Class::RDF."
msgstr ""
"このモジュールは、 Perl 内で XML ネームスペースを表すためのシンプルなオブジェ"
"クトを実装しています。 Perl に対するいくつかの文法拡張だけでなく、長い URI を"
"入力する手間なども削減しています。このモジュールは、 Class::RDF の一部として"
"配布されている Class::RDF::NS モジュールをヒントにして作られています。"

#. leap/perl-XML-NamespaceFactory/summary
msgid "Simple factory objects for SAX namespaced names."
msgstr ""
"SAX でのネームスペース付きの名前に対するシンプルな factory オブジェクト"

#. leap/perl-XML-NamespaceFactory/description
msgid ""
"Simply create a new XML::NamespaceFactory object with the namespace you wish "
"to use as its single parameter. If you wish to use the empty namespace, "
"simply pass in an empty string (but undef will not do).\n"
"\n"
"Then, when you want to get a JClark name, call a method on that object the "
"name of which is the local name you wish to have. It'll return the JClark "
"notation for that local name in your namespace.\n"
"\n"
"Unfortunately, some local names legal in XML are not legal in Perl. To "
"circumvent this, you can use the hash notation in which you access a key on "
"the object the name of which is the local name you wish to have. This will "
"work just as the method call name but will accept more characters. Note that "
"it does not check that the name you ask for is a valid XML name. This form "
"is more general but slower.\n"
"\n"
"If this is not clear, hopefully the SYNOPSIS should help :)"
msgstr ""
"使用したいネームスペースを 1 つのパラメータとして設定して、単純に XML::"
"NamespaceFactory を作成するだけです。空のネームスペースを使用したい場合は、単"
"に空文字列を指定してください (ただし undef であってはなりません) 。\n"
"\n"
"その後、 JClark の名前を取得したい場合は、オブジェクトに対してメソッドをロー"
"カル名で呼び出すだけです。これにより、お使いのネームスペース内でのローカル名"
"の JClark 表記が返されます。\n"
"\n"
"残念ながら、 XML 内での名前によっては Perl 側で正当なものではない場合がありま"
"す。この問題を回避するには、ハッシュ表記を利用し、ローカル名としてのオブジェ"
"クト名をキーとして指定してください。これはメソッドの呼び出し名として動作しま"
"すが、 Perl で利用できない文字も利用できるようになります。また、 XML 名に対す"
"る正当性はチェックしていませんので、ご注意ください。この形式はより一般的なも"
"のですが、動作が遅くなることに注意してください。\n"
"\n"
"よくわからない場合は、 SYNOPSIS をお読みください :)"

#. leap/perl-XML-NamespaceSupport/summary
msgid "Simple Generic Namespace Processor"
msgstr "シンプルな汎用ネームスペースプロセッサ"

#. leap/perl-XML-NamespaceSupport/description
msgid ""
"This module offers a simple to process namespaced XML names (unames) from "
"within any application that may need them. It also helps maintain a prefix "
"to namespace URI map, and provides a number of basic checks.\n"
"\n"
"The model for this module is SAX2's NamespaceSupport class, readable at "
"http://www.saxproject.org/namespaces.html It adds a few perlisations where "
"we thought it appropriate."
msgstr ""
"このモジュールは、ネームスペースを必要とするアプリケーションから、 ネームス"
"ペース付きの XML (unames) を処理するための シンプルな方法を提供します。プレ"
"フィクスからネームスペース URI への 変換を管理する機能や、いくつかの基本的な"
"チェック機能も提供されています。\n"
"\n"
"このモジュール向けのモデルとなっているものは SAX2 の NamespaceSupport クラス "
"(http://www.saxproject.org/namespaces.html) で、これに Perl 向けの仕組みがい"
"くつか追加されています。"

#. leap/perl-XML-NodeFilter/summary
msgid "XML::NodeFilter"
msgstr "XML::NodeFilter"

#. leap/perl-XML-NodeFilter/description
msgid ""
"XML::NodeFilter is a generic node filter class for DOM traversal as "
"specified in the DOM Level 2 Traversal and Range specification. It extends "
"that specification, so this class is easier to use for Perl programmers."
msgstr ""
"XML::NodeFilter は、 DOM Level 2 Traversal and Range specification に規定され"
"た DOM トラバーサルのための汎用ノードフィルタクラスです。 これらの仕様を拡張"
"して実装しているため、 Perl プログラマには使いやすいクラスになっています。"

#. leap/perl-XML-Parser/summary
msgid "A perl module for parsing XML documents"
msgstr "XML ドキュメントを解釈するための Perl モジュール"

#. leap/perl-XML-Parser/description
msgid ""
"This module provides ways to parse XML documents. It is built on top of the "
"XML::Parser::Expat manpage, which is a lower level interface to James "
"Clark's expat library. Each call to one of the parsing methods creates a new "
"instance of XML::Parser::Expat which is then used to parse the document. "
"Expat options may be provided when the XML::Parser object is created. These "
"options are then passed on to the Expat object on each parse call. They can "
"also be given as extra arguments to the parse methods, in which case they "
"override options given at XML::Parser creation time.\n"
"\n"
"The behavior of the parser is controlled either by 'the /STYLES manpage' and/"
"or 'the /HANDLERS manpage' options, or by the /setHandlers manpage method. "
"These all provide mechanisms for XML::Parser to set the handlers needed by "
"XML::Parser::Expat. If neither 'Style' nor 'Handlers' are specified, then "
"parsing just checks the document for being well-formed.\n"
"\n"
"When underlying handlers get called, they receive as their first parameter "
"the _Expat_ object, not the Parser object."
msgstr ""
"このモジュールは XML ドキュメントを処理する手段を提供しています。 XML::"
"Parser::Expat と呼ばれる James Clark 氏が開発したexpat ライブラリをベースに作"
"成されています。 XML の解析メソッドのうちのいずれかを呼び出すと XML::Parser::"
"Expat に対する新しいインスタンスが作成され、そこからドキュメントの解析が始ま"
"ります。 expat オプションは XML::Parser オブジェクトが作成された際に設定でき"
"るようになります。これらのオプションは各解析処理の呼び出しの際に、 expat オブ"
"ジェクトに渡されます。オプションは解析メソッドのパラメータとして渡すこともで"
"き、この際に渡したパラメータは XML::Parser のインスタンスを作成した際に指定し"
"たオプションを上書きします。\n"
"\n"
"解析処理の振る舞いは、それぞれ \"スタイル\" や \"ハンドラ\" と呼ばれるオプ"
"ションで制御することができるほか、 \"setHandlers\"メソッドでも制御することが"
"できます。これらすべては XML::Parser に対してメカニズムを提供するもので、 "
"XML::Parser::Expat が必要とするハンドラを設定するためのものです。スタイルやハ"
"ンドラを何も指定しない場合は、ドキュメントが正しい形式になっているかどうかを"
"単純にチェックするだけの動作をします。\n"
"\n"
"設定したハンドラが呼び出されると、ハンドラ側では最初のパラメータとして "
"Parser のオブジェクトではなく、expat のオブジェクトを受け取ります。"

#. leap/perl-XML-Parser-Lite/summary
msgid "Lightweight pure-perl XML Parser (based on regexps)"
msgstr "軽量な純粋 Perl 製の XML パーサ (正規表現ベース)"

#. leap/perl-XML-Parser-Lite/description
msgid ""
"This module implements an XML parser with a interface similar to XML::"
"Parser. Though not all callbacks are supported, you should be able to use it "
"in the same way you use XML::Parser. Due to using experimental regexp "
"features it'll work only on Perl 5.6 and above and may behave differently on "
"different platforms.\n"
"\n"
"Note that you cannot use regular expressions or split in callbacks. This is "
"due to a limitation of perl's regular expression implementation (which is "
"not re-entrant)."
msgstr ""
"このモジュールは XML::Parser に似たインターフェイスを持つ XML パーサを実装し"
"ています。すべてのコールバックには対応していませんが、 XML::Parser と同じよう"
"に利用できるようになっています。実験的な正規表現機能を利用しているため、 "
"Perl 5.6 もしくはそれ以降のバージョンでのみ動作するほか、プラットフォームに"
"よっては異なる動作をする場合があります。\n"
"\n"
"なお、コールバック内では正規表現やスプリットを利用することができません。これ"
"は Perl の正規表現の実装による制限 (リエントラントではないため) です。"

#. leap/perl-XML-RegExp/summary
msgid "Regular expressions for XML tokens"
msgstr "XML トークン向けの正規表現"

#. leap/perl-XML-RegExp/description
msgid ""
"This package contains regular expressions for the following XML tokens: "
"BaseChar, Ideographic, Letter, Digit, Extender, CombiningChar, NameChar, "
"EntityRef, CharRef, Reference, Name, NmToken, and AttValue.\n"
"\n"
"The definitions of these tokens were taken from the XML spec (Extensible "
"Markup Language 1.0) at the http://www.w3.org/TR/REC-xml manpage.\n"
"\n"
"Also contains the regular expressions for the following tokens from the XML "
"Namespaces spec at the http://www.w3.org/TR/REC-xml-names manpage: "
"NCNameChar, NCName, QName, Prefix and LocalPart."
msgstr ""
"このパッケージには、 XML トークンを追跡するための正規表現が含まれています: "
"BaseChar, Ideographic, Letter, Digit, Extender, CombiningChar, NameChar, "
"EntityRef, CharRef, Reference, Name, NmToken, AttValue\n"
"\n"
"これらのトークンの定義は、 http://www.w3.org/TR/REC-xml で公開されているXML "
"仕様 (Extensible Markup Language 1.0) からとられたものです。\n"
"\n"
"また、 http://www.w3.org/TR/REC-xml-names で規定されている、 XML ネームスペー"
"ス仕様が提供するトークンに対する正規表現も含まれています: NCNameChar, "
"NCName, QName, Prefix, LocalPart"

#. leap/perl-XML-SAX/summary
msgid "XML::SAX Perl Module"
msgstr "XML::SAX Perl モジュール"

#. leap/perl-XML-SAX/description
msgid ""
"XML::SAX consists of several framework classes for using and building Perl "
"SAX2 XML parsers, filters, and drivers. It is designed around the need to be "
"able to \"plug in\" different SAX parsers to an application without "
"requiring programmer intervention. Those of you familiar with the DBI will "
"be right at home. Some of the designs come from the Java JAXP specification "
"(SAX part), only without the javaness."
msgstr ""
"XML::SAX は、 Perl SAX2 XML パーサーやフィルタ、ドライバを使用したり構築した"
"りするための いくつかのフレームワーククラスからなっています。このモジュール"
"は、 異なる SAX パーサーに \"切り替える\" にあたってプログラマの介在無しで 実"
"現できるように設計されています。 DBI をよくご存じの方であれば、 便利に使うこ"
"とができるでしょう。いくつかの設計は、 Java JAXP 仕様 (SAX パート) から Java "
"の部分を取り除いた形で導入されています。"

#. leap/perl-XML-SAX-Base/summary
msgid "Base class SAX Drivers and Filters"
msgstr "SAX ドライバやフィルタ向けのベースクラス"

#. leap/perl-XML-SAX-Base/description
msgid ""
"This module has a very simple task - to be a base class for PerlSAX drivers "
"and filters. It's default behaviour is to pass the input directly to the "
"output unchanged. It can be useful to use this module as a base class so you "
"don't have to, for example, implement the characters() callback.\n"
"\n"
"The main advantages that it provides are easy dispatching of events the "
"right way (ie it takes care for you of checking that the handler has "
"implemented that method, or has defined an AUTOLOAD), and the guarantee that "
"filters will pass along events that they aren't implementing to handlers "
"downstream that might nevertheless be interested in them."
msgstr ""
"このモジュールでは非常にシンプルな作業を行ないます。それは、 PerlSAX ドライバ"
"やフィルタに対するベースクラスとして機能することです。既定の動作では、入力さ"
"れたものを何も操作せず出力に流すだけですが、このモジュールをベースクラスとし"
"て使用することで、たとえば文字入力のコールバックなどの機能を追加することがで"
"きるようになります。\n"
"\n"
"このクラスの主な利点としては、イベントを正しい方法で (ハンドラがそのようなメ"
"ソッドを実装しているか、もしくは AUTOLOAD を定義しているかなどのチェックを実"
"施して)簡単に発信できるという点があります。またフィルタ側で、必要であるにも関"
"わらずハンドラが実装されていないような場合にも、イベントを渡す保証を行ないま"
"す。"

#. leap/perl-XML-SAX-Expat/summary
msgid "SAX2 Driver for Expat (XML::Parser)"
msgstr "Expat (XML::Parser) 向け SAX2 ドライバ"

#. leap/perl-XML-SAX-Expat/description
msgid ""
"This is an implementation of a SAX2 driver sitting on top of Expat (XML::"
"Parser) which Ken MacLeod posted to perl-xml and which I have updated.\n"
"\n"
"It is still incomplete, though most of the basic SAX2 events should be "
"available. The SAX2 spec is currently available from the http://perl-xml."
"sourceforge.net/perl-sax/ manpage.\n"
"\n"
"A more friendly URL as well as a PODification of the spec are in the works."
msgstr ""
"このモジュールは Expat (XML::Parser) 上で動作する SAX2 ドライバの実装で、 "
"Ken MacLeod が perl-xml に投稿し、その後更新されたモジュールです。\n"
"\n"
"このモジュールは今もなお不完全なものでありますが、 SAX2 の基本イベントについ"
"ては利用可能な状態にあります。 SAX2 の仕様は現在、 http://perl-xml."
"sourceforge.net/perl-sax/ のマニュアルページにあります。\n"
"\n"
"よりわかりやすい URL と仕様の POD 文書は、現在準備中です。"

#. leap/perl-XML-SAX-ExpatXS/summary
msgid "Perl SAX 2 XS extension to Expat parser"
msgstr "Expat パーサに対する Perl SAX2 XS 拡張"

#. leap/perl-XML-SAX-ExpatXS/description
msgid ""
"XML::SAX::ExpatXS is a direct XS extension to Expat XML parser. It "
"implements  Perl SAX 2.1 interface. See http://perl-xml.sourceforge.net/perl-"
"sax/ for  Perl SAX API description. Any deviations from the Perl SAX 2.1 "
"specification  are considered as bugs."
msgstr ""
"XML::SAX::ExpatXS は Expat XML パーサに対する直接的な XS 拡張です。 Perl SAX "
"2.1 インターフェイスを実装するものです。 Perl SAX API の説明について、詳しく"
"は http://perl-xml.sourceforge.net/perl-sax/ をお読みください。 Perl SAX 2.1 "
"仕様と異なる点があれば、それらはバグとして扱います。"

#. leap/perl-XML-SAX-Writer/summary
#. leap/perl-XML-SAX-Writer/description
msgid "SAX2 XML Writer"
msgstr "SAX2 XML ライター"

#. leap/perl-XML-SemanticDiff/summary
msgid "Perl extension for comparing XML documents"
msgstr "XML ドキュメントを比較するための Perl 拡張"

#. leap/perl-XML-SemanticDiff/description
msgid ""
"XML::SematicDiff provides a way to compare the contents and structure of two "
"XML documents. By default, it returns a list of hashrefs where each hashref "
"describes a single difference between the two docs."
msgstr ""
"XML::SematicDiff は 2 つの XML 文書の内容と構造を比較する方法を提供します。既"
"定では、 1 つのハッシュ参照ごとに 2 つの文書の差異が書かれた、ハッシュ参照の"
"リストを返します。"

#. leap/perl-XML-Simple/summary
msgid "An API for simple XML files"
msgstr "シンプルな XML ファイル向けの API"

#. leap/perl-XML-Simple/description
msgid ""
"The XML::Simple module provides a simple API layer on top of an underlying "
"XML parsing module (either XML::Parser or one of the SAX2 parser modules). "
"Two functions are exported: 'XMLin()' and 'XMLout()'. Note: you can "
"explicitly request the lower case versions of the function names: 'xml_in()' "
"and 'xml_out()'.\n"
"\n"
"The simplest approach is to call these two functions directly, but an "
"optional object oriented interface (see \"OPTIONAL OO INTERFACE\" below) "
"allows them to be called as methods of an *XML::Simple* object. The object "
"interface can also be used at either end of a SAX pipeline."
msgstr ""
"XML::Simple モジュールは XML 処理モジュール (XML::Parse または SAX2 パーサモ"
"ジュールのいずれか) 上に構築された、シンプルな API レイヤを提供します。 2 つ"
"の関数 'XMLin()' および 'XMLout()' が公開されます。注意: 明示的に指定すること"
"で、小文字版の関数を公開させることもできます: 'xml_in()' および 'xml_out()'\n"
"\n"
"もっともシンプルな使い方としては、 2 つの関数を直接呼び出す方法がありますが、"
"必要であれば *XML::Simple* オブジェクトのメソッドを呼び出す、オブジェクト指向"
"のインターフェイスを利用することもできます (下記 \"OPTIONAL OO INTERFACE\" を"
"お読みください) 。オブジェクト指向のインターフェイスは SAX パイプラインのいず"
"れの側でも利用することができます。"

#. leap/perl-XML-SimpleObject-LibXML/summary
msgid ""
"Perl extension allowing a simple(r) object representation of an XML::Lib[cut]"
msgstr ""
"XML::LibXML DOM オブジェクトをシンプルなオブジェクト表現で表わす Perl 拡張"

#. leap/perl-XML-SimpleObject-LibXML/description
msgid ""
"This is a short and simple class allowing simple object access to a parsed "
"XML::LibXML tree, with methods for fetching children and attributes in as "
"clean a manner as possible. My apologies for further polluting the XML:: "
"space; this is a small and quick module, with easy and compact usage. Some "
"will rightfully question placing another interface over the DOM methods "
"provided by XML::LibXML, but my experience is that people appreciate the "
"total simplicity provided by this module, despite its limitations. These "
"limitations include a minor loss of speed compared to the DOM, loss of "
"control over node types, and protection (aka lack of knowledge) about the "
"DOM. I encourage those who want more control and understanding over the DOM "
"to study XML::LibXML; this module's source can be instructive, too."
msgstr ""
"これは処理済みの XML::LibXML ツリーに対して、シンプルなオブジェクトアクセスの"
"機能を提供する短いクラスです。子の要素や属性にアクセスするためのメソッドを、"
"できる限りクリーンな方法で実装しています。 XML:: ネームスペースを汚してしまう"
"結果になっていますが、これは小さくて素早いモジュールであり、かつ簡易でコンパ"
"クトなモジュールであるためです。 XML::LibXML で提供される DOM メソッドを介し"
"て他のインターフェイスを提供する方法も考えられていましたが、私の経験では制限"
"を回避するよりも全体的にシンプルな仕組みのほうが好まれると判断できるためで"
"す。これらの制限には、 DOM との比較でわずかに速度が遅くなっていたりすることも"
"あるほか、 DOM に関するノードタイプやプロテクション (知識不足による) の制御を"
"喪失している点もあります。より細かい制御や DOM を介して XML::LibXML を学習し"
"たいとお考えの方は、このモジュールのソースをお読みいただくことをお勧めしま"
"す。"

#. leap/perl-XML-Stream/summary
msgid "Creates an XML Stream connection and parses return data"
msgstr ""
"XML ストリーム接続を作成して送信し、返却されたデータを処理するモジュール"

#. leap/perl-XML-Stream/description
msgid ""
"This module provides the user with methods to connect to a remote server, "
"send a stream of XML to the server, and receive/parse an XML stream from the "
"server. It is primarily based work for the Etherx XML router developed by "
"the Jabber Development Team. For more information about this project visit "
"http://xmpp.org/protocols/streams/.\n"
"\n"
"XML::Stream gives the user the ability to define a central callback that "
"will be used to handle the tags received from the server. These tags are "
"passed in the format defined at instantiation time. the closing tag of an "
"object is seen, the tree is finished and passed to the call back function. "
"What the user does with it from there is up to them.\n"
"\n"
"For a detailed description of how this module works, and about the data "
"structure that it returns, please view the source of Stream.pm and look at "
"the detailed description at the end of the file.\n"
"\n"
"NOTE: The parser that XML::Stream::Parser provides, as are most Perl "
"parsers, is synchronous. If you are in the middle of parsing a packet and "
"call a user defined callback, the Parser is blocked until your callback "
"finishes. This means you cannot be operating on a packet, send out another "
"packet and wait for a response to that packet. It will never get to you. "
"Threading might solve this, but as we all know threading in Perl is not "
"quite up to par yet. This issue will be revisted in the future."
msgstr ""
"このモジュールはユーザに対して、リモートのサーバに接続して XML を送信し、サー"
"バから返却された XML のデータを受信および解釈するためのメソッドを提供します。"
"主に Jabber 開発チームが開発している Etherx XML ルータ向けに作られた仕組みで"
"す。このプロジェクトについて、詳しくはhttp://xmpp.org/protocols/streams/ をお"
"読みください。\n"
"\n"
"XML::Stream はユーザに対して、サーバから返却され受信されたタグを、処理するた"
"めの中央コールバックを定義する機能を提供します。これらのタグは、インスタンス"
"化の時点で定義した書式で受け渡されます。オブジェクトの閉じタグが見つかると、"
"ツリーは終了したものと見なされ、コールバック関数に渡されます。その後の処理は"
"自由に設定することができます。\n"
"\n"
"このモジュールの動作に関する詳しい説明や、返却されるデータの構造について、詳"
"しくは Stream.pm のソースコード、もしくはそのファイルの末尾にある詳細な説明文"
"をお読みください。\n"
"\n"
"注意: XML::Stream::Parser で提供するパーサはほぼ Perl で作成された仕組みで、"
"同期処理として実行されます。パケットの処理に介入する場合や、ユーザ定義のコー"
"ルバックなどを使用した場合は、それらのコールバックが終わるまで処理が止まって"
"しまいます。言い換えると、パケットを非同期に処理することはできず、他のパケッ"
"トの送信が終わったあとは、その応答を待つことになりますので、ご注意ください。"
"スレッド処理によって解決することもできますが、 Perl のスレッド処理は OS のも"
"のと同等ではないことに注意してください。この問題は、将来的に変更される可能性"
"もあります。"

#. leap/perl-XML-Structured/summary
msgid "Simple conversion API from XML to perl structures and back"
msgstr "XML から Perl の構造体に変換するシンプルな変換 API"

#. leap/perl-XML-Structured/description
msgid ""
"Provides a way to convert XML data into a predefined perl data structure and "
"back to XML. Unlike with modules like XML::Simple, it is an error if the XML "
"data does not match the provided skeleton (the \"DTD\"). Another advantage "
"is that the order of the attributes and elements is taken from the DTD when "
"converting back to xml."
msgstr ""
"XML データと事前定義した Perl のデータ構造との間で、相互に変換するモジュール"
"です。 XML::Simple 等とは異なり、 XML データが提示されたスケルトン (\"DTD\") "
"と異なる場合は、エラーとして扱われます。このモジュールを利用するもう 1 つの利"
"点としては、 XML に書き戻す際、属性や要素の順序が DTD から取られる点にありま"
"す。"

#. leap/perl-XML-Twig/summary
msgid "Perl Module for Processing Huge Xml Documents in Tree Mode"
msgstr "巨大な XML ドキュメントをツリーモードで解析するための Perl モジュール"

#. leap/perl-XML-Twig/description
msgid ""
"This module provides a way to process XML documents. It is build on top of "
"'XML::Parser'.\n"
"\n"
"The module offers a tree interface to the document, while allowing you to "
"output the parts of it that have been completely processed.\n"
"\n"
"It allows minimal resource (CPU and memory) usage by building the tree only "
"for the parts of the documents that need actual processing, through the use "
"of the 'twig_roots ' and 'twig_print_outside_roots ' options. The 'finish ' "
"and 'finish_print ' methods also help to increase performances.\n"
"\n"
"XML::Twig tries to make simple things easy so it tries its best to takes "
"care of a lot of the (usually) annoying (but sometimes necessary) features "
"that come with XML and XML::Parser."
msgstr ""
"このモジュールは、 XML ドキュメントを処理する機能を提供します。このモジュール"
"は'XML::Parser' 上で構築されています。\n"
"\n"
"このモジュールは、ドキュメントに対するツリー構造のインターフェイスを提供しま"
"す。これにより、処理済みの形式で各パーツにアクセスすることができます。\n"
"\n"
"このモジュールは、実際の処理作業に必要なドキュメントのパーツに対してのみツ"
"リー構造を構築するため、最小限のリソース (CPU およびメモリ) で処理できるよう"
"になっています。それぞれ 'twig_roots' や 'twig_print_outside_roots' のオプ"
"ションをお読みください。また、 'finish' や 'finish_print' メソッドを利用する"
"ことで、性能を高めることもできます。\n"
"\n"
"XML::Twig はできるかぎりシンプルな処理を行ない、 XML や XML::Parser が提供す"
"る各種の厄介な (だが時によっては必要な) 機能をうまく処理するようにしていま"
"す。"

#. leap/perl-XML-Writer/summary
msgid "Perl extension for writing XML documents"
msgstr "XML ドキュメントを書き込むための Perl 拡張"

#. leap/perl-XML-Writer/description
msgid ""
"XML::Writer is a helper module for Perl programs that write an XML document. "
"The module handles all escaping for attribute values and character data and "
"constructs different types of markup, such as tags, comments, and processing "
"instructions.\n"
"\n"
"By default, the module performs several well-formedness checks to catch "
"errors during output. This behaviour can be extremely useful during "
"development and debugging, but it can be turned off for production-grade "
"code.\n"
"\n"
"The module can operate either in regular mode in or Namespace processing "
"mode. In Namespace mode, the module will generate Namespace Declarations "
"itself, and will perform additional checks on the output.\n"
"\n"
"Additional support is available for a simplified data mode with no mixed "
"content: newlines are automatically inserted around elements and elements "
"can optionally be indented based as their nesting level."
msgstr ""
"XML::Writer は Perl プログラムに対するヘルパーモジュールで、 XML 文書を書き込"
"む際に使用します。このモジュールは属性値内や文字データ内にあるすべてのエス"
"ケープ文字を処理することができ、タグやコメント、処理命令などの異なるマーク"
"アップを扱うことができます。\n"
"\n"
"既定では、このモジュールはいくつかの形式チェックを行ない、出力時にエラーをと"
"らえることができるようになっています。この動作は開発やデバッグの際には便利で"
"すが、本番用途のコードでは無効化することもできます。\n"
"\n"
"このモジュールは通常モードでの処理のほか、ネームスペース処理モードで動作させ"
"ることもできます。ネームスペースモードの場合、モジュールはネームスペース自身"
"の定義を生成したあと、出力に対する追加チェックを行ないます。\n"
"\n"
"また、単純化データモードとして、混在コンテンツのないモードにも対応しています:"
"必要であれば要素の間には自動的に改行を入れ、入れ子レベルに応じて自動的に字下"
"げを行なったりすることもできます。"

#. leap/perl-XML-Writer-String/summary
msgid "Capture output from XML::Writer"
msgstr "XML::Writer の出力に対するキャプチャ"

#. leap/perl-XML-Writer-String/description
msgid ""
"This module implements a bare-bones class specifically for the purpose of "
"capturing data from the XML::Writer module. XML::Writer expects an IO::"
"Handle object and writes XML data to the specified object (or STDOUT) via "
"it's print() method. This module simulates such an object for the specific "
"purpose of providing the required print() method.\n"
"\n"
"It is recommended that $writer->end() is called prior to calling $s->value() "
"to check for well-formedness.\n"
"\n"
"Author:\n"
"-------     Simon Oliver <simon.oliver@umist.ac.uk>"
msgstr ""
"このモジュールは、 XML::Writer モジュールからのデータを捕捉する目的に特化した"
"ベアボーンクラスです。 XML::Writer は IO::Handle オブジェクトを入力として受け"
"付け、 print() メソッドで指定したオブジェクト (または標準出力) に XML データ"
"を書き込みます。このモジュールは、必要な print() メソッドを提供する特定用途向"
"けに、オブジェクトを疑似することも行ないます。\n"
"\n"
"なお、 $s->value() を整形のチェックに用いる場合、事前に $writer->end() を呼び"
"出しておくことをお勧めします。\n"
"\n"
"著者:\n"
"-------     Simon Oliver <simon.oliver@umist.ac.uk>"

#. leap/perl-XML-XPath/summary
msgid "Parse and evaluate XPath statements"
msgstr "XPath ステートメントの解釈と実行"

#. leap/perl-XML-XPath/description
msgid ""
"This module aims to comply exactly to the XPath specification at http://www."
"w3.org/TR/xpath and yet allow extensions to be added in the form of "
"functions.Modules such as XSLT and XPointer may need to do this as they "
"support functionality beyond XPath."
msgstr ""
"このモジュールは、 http://www.w3.org/TR/xpath で規定されている XPath 仕様に性"
"格に準拠していながら、関数としてこの鵜を拡張することのできるモジュールを目指"
"しています。これを行なうには、 XSLT や XPointer など、 XPath 以上の機能を持つ"
"ものが必要です。"

#. leap/perl-XML-XPathEngine/summary
msgid "Re-usable XPath engine for DOM-like trees"
msgstr "DOM のようなツリー構造向けの再利用可能な XPath エンジン"

#. leap/perl-XML-XPathEngine/description
msgid ""
"This module provides an XPath engine, that can be re-used by other module/"
"classes that implement trees.\n"
"\n"
"In order to use the XPath engine, nodes in the user module need to mimick "
"DOM nodes. The degree of similitude between the user tree and a DOM dictates "
"how much of the XPath features can be used. A module implementing all of the "
"DOM should be able to use this module very easily (you might need to add the "
"cmp method on nodes in order to get ordered result sets).\n"
"\n"
"This code is a more or less direct copy of the the XML::XPath manpage module "
"by Matt Sergeant. I only removed the XML processing part to remove the "
"dependency on XML::Parser, applied a couple of patches, renamed a whole lot "
"of methods to make Pod::Coverage happy, and changed the docs.\n"
"\n"
"The article eXtending XML XPath, http://www.xmltwig.com/article/"
"extending_xml_xpath/ should give authors who want to use this module enough "
"background to do so.\n"
"\n"
"Otherwise, my email is below ;--) \n"
"*WARNING*: while the underlying code is rather solid, this module mostly "
"lacks docs. As they say, \"patches welcome\"..."
msgstr ""
"このモジュールは XPath エンジンを提供しています。ツリー構造を実装する他のモ"
"ジュールやクラスで再利用することもできます。\n"
"\n"
"XPath エンジンを利用するには、ユーザモジュール内のノードが DOM ノードを擬似す"
"る必要があります。ユーザツリーと DOM の間での疑似度合いによって、利用可能な "
"XPath 機能の多さが決まります。すべての DOM 機能を実装するモジュールであれば、"
"このモジュールはとても簡単に扱うことができます(結果セットの順序を制御するた"
"め、 cmp メソッドを追加する必要があるはずです) 。\n"
"\n"
"このコードは多かれ少なかれ、 Matt Sergeant 氏が作成する XML::Path モジュール"
"の直接コピーになっています。 XML::Parser との依存関係を削除する目的で、XML 処"
"理パートの部分のみ削除し、複数のパッチを適用して Pod::Coverage をうまく動作さ"
"せるために多数のメソッドの名称を変更し、ドキュメントを変更しています。\n"
"\n"
"XML XPath の拡張に関する記事 (http://www.xmltwig.com/article/"
"extending_xml_xpath/) では、このモジュールを利用するプログラムの作者向けに十"
"分な背景情報を提供しています。\n"
"\n"
"上記でも不十分な場合は、メールで知らせてください ;--)\n"
"*警告*: 裏側のコードは比較的完全なものではありますが、このモジュールは多くの"
"部分でドキュメンテーションを欠いています。つまりは \"パッチ歓迎\"ということで"
"す..."

#. leap/perl-XML-XSLT/summary
msgid "Perl module for processing XSLT"
msgstr "XSLT を処理するための Perl モジュール"

#. leap/perl-XML-XSLT/description
msgid ""
"This module implements the W3C's XSLT specification. The goal is full "
"implementation of this spec, but we have not yet achieved that. However, it "
"already works well. See XML::XSLT Commands for the current status of each "
"command.\n"
"\n"
"XML::XSLT makes use of XML::DOM and LWP::Simple, while XML::DOM uses XML::"
"Parser. Therefore XML::Parser, XML::DOM and LWP::Simple have to be installed "
"properly for XML::XSLT to run."
msgstr ""
"このモジュールは W3C の XSLT 仕様を実装しているモジュールです。この仕様に記さ"
"れている全ての仕様を実装することを目的としていますが、現時点ではまだ実現でき"
"ていません。しかしながら、既に動作するレベルまで到達できています。各コマンド"
"の状態について、詳しくは XML::XSLT コマンドをお読みください。\n"
"\n"
"XML::XSLT は XML::DOM と LWP::Simple を使用しています。 XML::DOM は XML::"
"Parser を使用しています。そのため、 XML::XSLT を実行するには、 XML::Parser, "
"XML::DOM, LWP::Simple の各モジュールが必要となります。"

#. leap/perl-XMLRPC-Lite/summary
msgid "client and server implementation of XML-RPC protocol"
msgstr "XML-RPC プロトコルのクライアント・サーバ実装"

#. leap/perl-XMLRPC-Lite/description
msgid ""
"XMLRPC::Lite is a Perl modules which provides a simple nterface to the XML-"
"RPC protocol both on client and server side. Based on SOAP::Lite module, it "
"gives you access to all features and transports available in that module.\n"
"\n"
"See _t/26-xmlrpc.t_ for client examples and _examples/XMLRPC/*_ for server "
"implementations."
msgstr ""
"XMLRPC::Lite は、 XML-RPC プロトコルのサーバ／クライアントの両方を実装するシ"
"ンプルなインターフェイスを持つ Perl モジュールです。 SOAP::Lite モジュールを"
"ベースにしていて、このモジュール内にある全ての機能およびトランスポートにアク"
"セスできるようになっています。\n"
"\n"
"クライアント用途については _t/26-xmlrpc.t_ にある例を、サーバ用途については "
"_examples/XMLRPC/*_ にある例をご覧ください。"

#. leap/perl-XSLoader/summary
msgid "Dynamically load C libraries into Perl code"
msgstr "Perl コード内に C ライブラリを動的に読み込むモジュール"

#. leap/perl-XSLoader/description
msgid ""
"This module defines a standard _simplified_ interface to the dynamic linking "
"mechanisms available on many platforms. Its primary purpose is to implement "
"cheap automatic dynamic loading of Perl modules.\n"
"\n"
"For a more complicated interface, see DynaLoader. Many (most) features of "
"'DynaLoader' are not implemented in 'XSLoader', like for example the "
"'dl_load_flags', not honored by 'XSLoader'."
msgstr ""
"このモジュールは、多数のプラットフォーム内に用意されている動的なリンク機構に"
"対して、標準的で _単純化した_ インターフェイスを定義するものです。主に Perl "
"モジュールを自動的かつ動的に読み込むための仕組みを実装することを目指していま"
"す。\n"
"\n"
"より複雑なインターフェイスをご希望の場合は、 DynaLoader モジュールをご覧くだ"
"さい。 'XSLoader' では無視される 'dl_load_flags' など、多くの (ほとんどの) "
"'DynaLoader' の機能は 'XSLoader' では実装されていません。"

#. leap/perl-YAML/summary
msgid "YAML Ain't Markup Language™"
msgstr "YAML - マークアップ言語以外のもの (tm)"

#. leap/perl-YAML/description
msgid ""
"The YAML.pm module implements a YAML Loader and Dumper based on the YAML 1.0 "
"specification. http://www.yaml.org/spec/\n"
"\n"
"YAML is a generic data serialization language that is optimized for human "
"readability. It can be used to express the data structures of most modern "
"programming languages. (Including Perl!!!)\n"
"\n"
"For information on the YAML syntax, please refer to the YAML specification."
msgstr ""
"YAML.pm は YAML 1.0 仕様をベースにした YML ローダ／ダンパーです。詳しくは"
"http://www.yaml.org/spec/ をお読みください。\n"
"\n"
"YAML は人間の可読性に最適化されているデータ直列化言語です。 Perl を含む多くの"
"近代的プログラミング言語のデータ構造を表現するのに使用することができます。\n"
"\n"
"YAML の文法について、詳しくは YAML 仕様をお読みください。"

#. leap/perl-YAML-LibYAML/summary
#. leap/perl-YAML-LibYAML/description
msgid "Perl YAML Serialization using XS and libyaml"
msgstr "XS と libyaml を使用する Perl YAML シリアライズ"

#. leap/perl-YAML-PP/summary
msgid "YAML 1.2 processor"
msgstr "YAML 1.2 プロセッサ"

#. leap/perl-YAML-PP/description
msgid ""
"YAML::PP is a modular YAML processor.\n"
"\n"
"It aims to support 'YAML 1.2' and 'YAML 1.1'. See https://yaml.org/. Some "
"(rare) syntax elements are not yet supported and documented below.\n"
"\n"
"YAML is a serialization language. The YAML input is called \"YAML Stream\". "
"A stream consists of one or more \"Documents\", separated by a line with a "
"document start marker '---'. A document optionally ends with the document "
"end marker '...'.\n"
"\n"
"This allows one to process continuous streams additionally to a fixed input "
"file or string.\n"
"\n"
"The YAML::PP frontend will currently load all documents, and return only the "
"first if called with scalar context.\n"
"\n"
"The YAML backend is implemented in a modular way that allows one to add "
"custom handling of YAML tags, perl objects and data types. The inner API is "
"not yet stable. Suggestions welcome.\n"
"\n"
"You can check out all current parse and load results from the yaml-test-"
"suite here: https://perlpunk.github.io/YAML-PP-p5/test-suite.html"
msgstr ""
"YAML::PP はモジュール型の YAML プロセッサです。\n"
"\n"
"'YAML 1.2' と 'YAML 1.1' をサポートするように作られています。詳しくは http://"
"yaml.org/ をお読みください。いくつかの (稀な) 書式には対応しておりませんの"
"で、下記をお読みください。\n"
"\n"
"YAML はシリアライズ化のための言語です。 YAML の入力は \"YAML ストリーム\" と"
"呼ばれます。ストリームには 1 つもしくはそれ以上の \"ドキュメント\" が含まれ、"
"ドキュメントの区切りマーカーである '---' で行を区切って出力します。ドキュメン"
"トは終了マーカーである '...' で終わることもあります。\n"
"\n"
"このモジュールは連続したストリームを処理して、固定の入力ファイルや文字列に変"
"換します。\n"
"\n"
"YAML:PP フロントエンドは現時点では全てのドキュメントを読み込みますが、スカ"
"ラーコンテキストでは最初に処理したもののみを返します。\n"
"\n"
"YAML のバックエンドはモジュール型の構造で、 YAML の独自タグや Perl オブジェク"
"ト、データタイプなどを追加できるようになっています。ただし内部 API は不安定で"
"あることに注意してください。また、提案があれば歓迎します。\n"
"\n"
"このほか、 yaml-test-suite で処理と読み込みの結果を確認することもできます。詳"
"しくは https://perlpunk.github.io/YAML-PP-p5/test-suite.html をお読みください"

#. leap/perl-YAML-Syck/summary
msgid "Fast, lightweight YAML loader and dumper"
msgstr "高速・軽量 YAML ローダ／ダンパ"

#. leap/perl-YAML-Syck/description
msgid ""
"This module provides a Perl interface to the *libsyck* data serialization "
"library. It exports the 'Dump' and 'Load' functions for converting Perl data "
"structures to YAML strings, and the other way around. \n"
"*NOTE*: If you are working with other language's YAML/Syck bindings (such as "
"Ruby), please set '$YAML::Syck::ImplicitTyping' to '1' before calling the "
"'Load'/'Dump' functions. The default setting is for preserving backward-"
"compatibility with 'YAML.pm'."
msgstr ""
"このモジュールは *libsyck* データシリアライズ化ライブラリに対する Perl のイン"
"ターフェイスを提供します。 Perl のデータ構造を、 YAML 形式の文字列やその他の"
"方式で 'Dump' (ダンプ) したり 'Load' (ロード) したりすることができます。\n"
"*注意*: 他の言語 (たとえば Ruby) で YAML/Syck バインディングを使用している場"
"合、'Load'/'Dump' 関数を使用する前に '$YAML::Syck::ImplicitTyping' を '1' に"
"設定してください。既定の設定は、 'YAML.pm' の後方互換性を維持するための設定に"
"なっています。"

#. leap/perl-YAML-Tiny/summary
msgid "Read/Write YAML files with as little code as possible"
msgstr "YAML ファイルをできる限り少ないコード量で読み書きするモジュール"

#. leap/perl-YAML-Tiny/description
msgid ""
"*YAML::Tiny* is a perl class for reading and writing YAML-style files, "
"written with as little code as possible, reducing load time and memory "
"overhead.\n"
"\n"
"Most of the time it is accepted that Perl applications use a lot of memory "
"and modules. The *::Tiny* family of modules is specifically intended to "
"provide an ultralight and zero-dependency alternative to many more-thorough "
"standard modules.\n"
"\n"
"This module is primarily for reading human-written files (like simple config "
"files) and generating very simple human-readable files. Note that I said "
"*human-readable* and not *geek-readable*. The sort of files that your "
"average manager or secretary should be able to look at and make sense of.\n"
"\n"
"YAML::Tiny does not generate comments, it won't necessarily preserve the "
"order of your hashes, and it will normalise if reading in and writing out "
"again.\n"
"\n"
"It only supports a very basic subset of the full YAML specification.\n"
"\n"
"Usage is targeted at files like Perl's META.yml, for which a small and "
"easily-embeddable module is extremely attractive.\n"
"\n"
"Features will only be added if they are human readable, and can be written "
"in a few lines of code. Please don't be offended if your request is refused. "
"Someone has to draw the line, and for YAML::Tiny that someone is me.\n"
"\n"
"If you need something with more power move up to YAML (7 megabytes of memory "
"overhead) or YAML::XS (6 megabytes memory overhead and requires a C "
"compiler).\n"
"\n"
"To restate, YAML::Tiny does *not* preserve your comments, whitespace, or the "
"order of your YAML data. But it should round-trip from Perl structure to "
"file and back again just fine."
msgstr ""
"*YAML::Tiny* は、できる限り少ないコード量で、負荷とメモリのオーバヘッドが少な"
"くなるように開発された、 YAML ファイルを読み書きするための Perl のクラスで"
"す。\n"
"\n"
"以前は Perl のアプリケーションは多くのメモリとモジュールを使用するのが当たり"
"前でした。 *::Tiny* ファミリのモジュールは、特に軽量性と依存関係の少なさを追"
"求し、多数の標準的なモジュールの対抗となるように作られています。\n"
"\n"
"\n"
"このモジュールは、主に人間が作成したファイル (シンプルな設定ファイル) を読み"
"込み、非常にシンプルな人間にとって読みやすいファイルを生成する際に使用するこ"
"とを目的としています。ただし *人間にとって読みやすい* は、 *マニアにとって読"
"みやすい* ではないことに注意してください。一般的には、管理職や事務官のような"
"人々にとって、読みやすいものを目指しています。\n"
"\n"
"YAML::Tiny ではコメントを生成しませんし、ハッシュの順序についても維持する必要"
"はないものと考えております。そのため、読み込んで書き込む際には、正規化が行な"
"われることになります。\n"
"\n"
"また、 YAML の完全仕様のうち、非常に基本的なサブセットのみに対応していま"
"す。\n"
"\n"
"Perl の META.yml のようなファイルを扱うことを想定したつくりになっていて、小さ"
"さと使いやすさを持ちながら、非常に直感的に使えるようになっています。\n"
"\n"
"機能は人間にとって読みやすいものである場合にのみ追加され、数行程度のコードで"
"記述できるものが必要です。リクエストが拒否されたからと言って怒らないでくださ"
"い。度のモジュールであっても誰かが線引きをする必要があるのですが、 YAML::"
"Tiny についてはそれが私であっただけの話です。\n"
"\n"
"より強力な機能をご希望の場合は、 YAML モジュール (7 MB ほどのメモリのオーバー"
"ヘッドがあります) または YAML::XS (6 MB ほどのメモリのオーバーヘッドがあり、 "
"C コンパイラが必要です) をお使いください。\n"
"\n"
"再作成という意味では、 YAML::Tiny はコメントやホワイトスペース、データの順序"
"などを保持しません。ただし Perl の構造体にいったん変換して、それを書き戻して"
"も、問題なく動作します。"

#. leap/perl-aliased/summary
msgid "Use shorter versions of class names"
msgstr "クラス名の短いバージョンを使用するモジュール"

#. leap/perl-aliased/description
msgid ""
"'aliased' is simple in concept but is a rather handy module. It loads the "
"class you specify and exports into your namespace a subroutine that returns "
"the class name. You can explicitly alias the class to another name or, if "
"you prefer, you can do so implicitly. In the latter case, the name of the "
"subroutine is the last part of the class name. Thus, it does something "
"similar to the following:\n"
"\n"
"  \n"
"\n"
"  use Some::Annoyingly::Long::Module::Name::Customer;   sub Customer "
"{     return 'Some::Annoyingly::Long::Module::Name::Customer';   }   my "
"$cust = Customer->new;\n"
"\n"
"This module is useful if you prefer a shorter name for a class. It's also "
"handy if a class has been renamed.\n"
"\n"
"(Some may object to the term \"aliasing\" because we're not aliasing one "
"namespace to another, but it's a handy term. Just keep in mind that this is "
"done with a subroutine and not with typeglobs and weird namespace munging.)\n"
"\n"
"Note that this is *only* for 'use'ing OO modules. You cannot use this to "
"load procedural modules. See the the Why OO Only? manpage section. Also, "
"don't let the version number fool you. This code is ridiculously simple and "
"is just fine for most use."
msgstr ""
"'aliased' は考え方がシンプルでありながら扱いやすいモジュールです。指定したク"
"ラスを読み込んでから、お使いのネームスペースにクラス名を返すサブルーチンを公"
"開します。特定のクラスに対する別名は明示的に指定することができるほか、必要で"
"あれば暗黙のうちに実施することもできます。暗黙のうちに実施した場合は、サブ"
"ルーチンの名前はクラス名の最後のパートになります。そのため、下記のような仕組"
"みに似ています:\n"
"\n"
"  \n"
"\n"
"  use Some::Annoyingly::Long::Module::Name::Customer;   sub Customer "
"{     return 'Some::Annoyingly::Long::Module::Name::Customer';   }   my "
"$cust = Customer->new;\n"
"\n"
"このモジュールは、クラスに対してより短い名前を使用したい場合に便利です。クラ"
"スの名前を変更しても扱いやすいことは変わりません。\n"
"\n"
"(なお、一方のネームスペースからもう一方のネームスペースに別名を作成しているわ"
"けではありませんので、 \"別名\" では誤解を生みやすくなってしまっているかもし"
"れませんが、簡潔で分かりやすいことから今も \"別名\" と称しています。なお、こ"
"の仕組みはサブルーチンで実行されているもので、タイプグロブやおかしなネームス"
"ペースの操作などはしていません) 。\n"
"\n"
"なお、これはオブジェクト指向のモジュールを使用する用途 *だけ* で作られていま"
"す。手続き型のモジュールを読み込む際には使用できません。なぜ OO インターフェ"
"イスのみなのでしょうか？ 詳しくはマニュアルページをお読みください。また、バー"
"ジョン番号を偽装してはなりません。このコードは非常にシンプルな仕組みで、多く"
"の用途には十分であるからです。"

#. leap/perl-asa/summary
msgid "Lets your class/object say it works like something else"
msgstr "クラスやオブジェクトをありのまま動作させるモジュール"

#. leap/perl-asa/description
msgid ""
"Perl 5 doesn't natively support Java-style interfaces, and it doesn't "
"support Perl 6 style roles either.\n"
"\n"
"You can get both of these things in half a dozen different ways via various "
"CPAN modules, but they usually require that you buy into \"their way\" of "
"implementing your code.\n"
"\n"
"Other have turned to \"duck typing\".\n"
"\n"
"This is, for the most part, a fairly naive check that says \"can you do this "
"method\", under the \"if it looks like a duck, and quacks like a duck, then "
"it must be a duck\".\n"
"\n"
"It assumes that if you have a '->quack' method, then they will treat you as "
"a duck, because doing things like adding 'Duck' to your '@ISA' array means "
"you are also forced to take their implementation.\n"
"\n"
"There is, of course, a better way.\n"
"\n"
"For better or worse, Perl's '->isa' functionality to determine if something "
"is or is not a particular class/object is defined as a *method*, not a "
"function, and so that means that as well as adding something to you '@ISA' "
"array, so that Perl's 'UNIVERSAL::isa' method can work with it, you are also "
"allowed to simply overload your own 'isa' method and answer directly whether "
"or not you are something.\n"
"\n"
"The simplest form of the idiom looks like this.\n"
"\n"
"  sub isa {       return 1 if $_[1] eq 'Duck';       shift->SUPER::"
"isa(@_);   }\n"
"\n"
"This reads \"Check my type as normal, but if anyone wants to know if I'm a "
"duck, then tell them yes\".\n"
"\n"
"Now, there are a few people that have argued that this is \"lying\" about "
"your class, but this argument is based on the idea that '@ISA' is somehow "
"more \"real\" than using the method directly.\n"
"\n"
"It also assumes that what you advertise you implement needs to be in sync "
"with the method resolution for any given function. But in the best and "
"cleanest implementation of code, the API is orthogonal (although most often "
"related) to the implementation.\n"
"\n"
"And although '@ISA' is about implementation *and* API, overloading 'isa' to "
"let you change your API is not at all bad when seen in this light."
msgstr ""
"Perl 5 では Java 形式のインターフェイスにはネイティブ対応していませんし、 "
"Perl 6 形式の役割にも対応していません。\n"
"\n"
"Perl 5 でそのような機能を利用するには、様々な CPAN モジュールを介する多数の方"
"法がありますが、これらはいずれもコードの実装に際して \"モジュール固有の方法"
"\" を必要としてしまいます。\n"
"\n"
"それ以外のモジュールでは \"ダック・タイピング\" になってしまいます。\n"
"\n"
"これは多くの個所に対して、 \"それがアヒルのように歩き、アヒルのように鳴くのな"
"ら、それはアヒルである\" というルールに従って、 \"このメソッドを実行できるか"
"\" というかなりナイーブなチェックを行なうことにもなります。\n"
"\n"
"たとえば '->quack' (=アヒルの鳴き声) というメソッドがあったとすると、それはア"
"ヒルとして扱われることになります。それはなぜなら、 '@ISA' 配列に対して "
"'Duck' を追加するようなことは、その実装を強制されたことを意味するからです。\n"
"\n"
"もちろん、よりよい方法があります。\n"
"\n"
"良くも悪くも、 Perl の '->isa' 機能を利用することで、クラスやオブジェクトの *"
"メソッド* (関数ではなく) として定義されているかどうかを判断することができま"
"す。これは、 '@IA' 配列に何らかのものを追加するだけではない意味になります。そ"
"のため、 'UNIVERSAL::isa' メソッドはこれに対しても動作することになりますの"
"で、独自の 'isa' メソッドでオーバーロードして直接応答することができます。\n"
"\n"
"一般的には下記のようにして利用します:\n"
"\n"
"  sub isa {       return 1 if $_[1] eq 'Duck';       shift->SUPER::"
"isa(@_);   }\n"
"\n"
"これは \"自分の型を通常通りチェックしますが、誰かが私のことをアヒルかどうか知"
"りたい場合は、彼らに yes と回答します\" という意味になります。\n"
"\n"
"ここだけを見ると、人によってはクラスが \"嘘をついている\" ように見えるかもし"
"れませんが、この議論は、メソッドを直接実行するよりも、 '@ISA' のほうがより "
"\"現実\" を表している、という考えに基づいています。\n"
"\n"
"また、広告している内容と実装している内容は、メソッドの解決に際して同期をとる"
"必要がある、という家庭にも基づいています。ただし、コードを最適にかつ最もク"
"リーンに実装すると、 API は実装と直交 (最も頻繁に関連しているにも関わらず) し"
"てしまいます。\n"
"\n"
"また、 '@ISA' は実装 *と* API の両方に関するもので、 'isa' をオーバーライドす"
"ることで、この点から見てもお使いの API がすべて悪いというわけはないものになり"
"ます。"

#. leap/perl-autobox/summary
msgid "Call Methods On Native Types"
msgstr "ネイティブタイプでのメソッド呼び出し"

#. leap/perl-autobox/description
msgid ""
"The autobox pragma allows methods to be called on integers, floats, strings, "
"arrays, hashes, and code references in exactly the same manner as blessed "
"references.\n"
"\n"
"Autoboxing is transparent: values are not blessed into their (user-defined) "
"implementation class (unless the method elects to bestow such a blessing) - "
"they simply use its methods as though they are.\n"
"\n"
"The classes (packages) into which the native types are boxed are fully "
"configurable. By default, a method invoked on a non-object value is assumed "
"to be defined in a class whose name corresponds to the 'ref()' type of that "
"value - or SCALAR if the value is a non-reference."
msgstr ""
"autobox pragma は整数や浮動小数、文字列や配列、ハッシュやコード参照などをブレ"
"スと全く同じやり方で呼び出すことができます。\n"
"\n"
"autobox は透過的に動作します: 値はそれらの (ユーザ定義の) 実装クラス内にブレ"
"スされることはなく (メソッドがそのようなブレス処理を意図的に選択しない限"
"り) 、単にメソッドを呼び出すだけの処理にすることができます。\n"
"\n"
"ネイティブな型がボックス化されているクラス (パッケージ) は、全てを設定するこ"
"とができます。既定では非オブジェクト値で実行されたメソッドは、その値の "
"'ref()' 型の関係づけられた名前のクラスで定義されているものと判断します。それ"
"以外の場合は、値は非参照のスカラとして呼び出されます。"

#. leap/perl-autovivification/summary
msgid "Lexically disable autovivification"
msgstr "autovivification の文法的な無効化"

#. leap/perl-autovivification/description
msgid ""
"When an undefined variable is dereferenced, it gets silently upgraded to an "
"array or hash reference (depending of the type of the dereferencing). This "
"behaviour is called _autovivification_ and usually does what you mean (e.g. "
"when you store a value) but it may be unnatural or surprising because your "
"variables gets populated behind your back. This is especially true when "
"several levels of dereferencing are involved, in which case all levels are "
"vivified up to the last, or when it happens in intuitively read-only "
"constructs like 'exists'.\n"
"\n"
"This pragma lets you disable autovivification for some constructs and "
"optionally throws a warning or an error when it would have happened."
msgstr ""
"未定義の変数に対して参照外しを行なうと、それらは暗黙のうちに (参照する側が期"
"待するタイプに従って) 配列もしくはハッシュ参照として扱われるようになります。"
"このような動作を _autovivification_ と呼び、通常は期待通りの動作となります "
"(たとえば値を代入する場合) が、自動的に変数の構造が変わってしまうことから、場"
"合によっては不自然に感じてしまったりして、期待通りの結果にならない場合があり"
"ます。特に複数段階の参照を扱っているような場合は、最後の要素レベルまで "
"autovivification されてしまいますし、 'exists' のような読み込み専用の関数など"
"では予期しない結果になってしまいます。\n"
"\n"
"このプラグマを使用すると、 autovivification の仕組みをいくつかの構造に対して"
"無効化し、必要であれば発生時に警告やエラーをスローすることができるようになり"
"ます。"

#. leap/perl-bareword-filehandles/summary
msgid "Disables bareword filehandles"
msgstr "単純なファイルハンドルの無効化"

#. leap/perl-bareword-filehandles/description
msgid ""
"This module lexically disables the use of bareword filehandles with builtin "
"functions, except for the special builtin filehandles 'STDIN', 'STDOUT', "
"'STDERR', 'ARGV', 'ARGVOUT' and 'DATA'."
msgstr ""
"このモジュールは、特別な内蔵ファイルハンドル ('STDIN', 'STDOUT', 'STDERR', "
"'ARGV', 'ARGVOUT', 'DATA') を除き、内蔵関数を利用した単純なファイルハンドルを"
"文法的に無効化します。"

#. leap/perl/perl-base-32bit/description
#. leap/perl/perl-base/description
msgid ""
"perl - Practical Extraction and Report Language\n"
"\n"
"Perl is optimized for scanning arbitrary text files, extracting information "
"from those text files, and printing reports based on that information.  It "
"is also good for many system management tasks.\n"
"\n"
"Perl is intended to be practical (easy to use, efficient, and complete) "
"rather than beautiful (tiny, elegant, and minimal).\n"
"\n"
"This package contains only some basic modules and the perl binary itself."
msgstr ""
"perl - Practical Extraction and Report Language\n"
"\n"
"Perl は任意のテキストファイルを読み出してこれらのテキストから 必要な情報を取"
"り出し、これらの情報に基づく何らかのレポートを表示することに 長けています。ま"
"た、多くのシステム管理作業にも便利に使用することができます。\n"
"\n"
"Perl は美しさ (簡易性、美観、コンパクト性) よりも現実 (使いやすさ、便利さ、完"
"全性) を追求しています。\n"
"\n"
" このパッケージには、いくつかの基本モジュールと Perl バイナリ自身が含まれてい"
"ます。"

#. leap/perl-boolean/summary
msgid "Boolean support for Perl"
msgstr "Perl 向け boolean サポート"

#. leap/perl-boolean/description
msgid ""
"Most programming languages have a native 'Boolean' data type. Perl does "
"not.\n"
"\n"
"Perl has a simple and well known Truth System. The following scalar values "
"are false:\n"
"\n"
"    $false1 = undef;     $false2 = 0;     $false3 = 0.0;     $false4 = "
"'';     $false5 = '0';\n"
"\n"
"Every other scalar value is true.\n"
"\n"
"This module provides basic Boolean support, by defining two special objects: "
"'true' and 'false'."
msgstr ""
"多くのプログラミング言語にはネイティブの 'Boolean' 型が存在していますが、 "
"Perl にはありません。\n"
"\n"
"Perl ではシンプルでよく知られた Truth システムがあります。下記のスカラー値は"
"いずれも false を意味します:\n"
"\n"
"    $false1 = undef;     $false2 = 0;     $false3 = 0.0;     $false4 = "
"'';     $false5 = '0';\n"
"\n"
"このモジュールは、 'true', 'false' という 2 種類の特殊なオブジェクトを定義す"
"ることで、 Boolean 機能に対応しています。"

#. leap/perl-checkbot/summary
msgid "WWW Link Verifier"
msgstr "WWW リンク検証ツール"

#. leap/perl-checkbot/description
msgid ""
"Checkbot is a perl5 script which can verify links within a region of the "
"World Wide Web. It checks all pages within an identified region, and all "
"links within that region. After checking all links within the region, it "
"will also check all links which point outside of the region, and then stop.\n"
"\n"
"Checkbot regularly writes reports on its findings, including all servers "
"found in the region, and all links with problems on those servers.\n"
"\n"
"Checkbot was written originally to check a number of servers at once. This "
"has implied some design decisions, so you might want to keep that in mind "
"when making suggestions. Speaking of which, be sure to check the to do file "
"on the website for things which have been suggested for Checkbot.\n"
"\n"
"Authors:\n"
"--------     Hans de Graaff <hans@degraaff.org>, 1994-2005.     Based on "
"Dimitri Tischenko, Delft University of Technology, 1994"
msgstr ""
"Checkbot は Perl5 のスクリプトで、特定の範囲の World Wide Web のリンクを検証"
"することができる仕組みです。認識した範囲内ですべてのページをチェックすること"
"ができるほか、指定した範囲の全リンクを検証することができます。指定した範囲に"
"あるすべてのリンク検証が完了すると、範囲外の全リンクに対しても検証を行ない、"
"それが完了すると停止します。\n"
"\n"
"Checkbot は検出した内容を定期的に報告する機能を備えています。たとえば範囲内に"
"あるすべてのサーバのほか、これらのサーバ内でのリンク問題なども報告します。\n"
"\n"
"Checkbot はもともと、複数のサーバのコンテンツを同時にチェックするのに作られた"
"仕組みです。これはいくつかの設計上の意図を意味するもので、これを念頭に置いて"
"使用する必要があります。 Web サイト上のファイルに対してチェックを行なう場合"
"は、 Checkbot でのチェックが有効でしょう。\n"
"\n"
"作者:\n"
"--------     Hans de Graaff <hans@degraaff.org>, 1994-2005.     Based on "
"Dimitri Tischenko, Delft University of Technology, 1994"

#. leap/perl-common-sense/summary
msgid "Save a Tree and a Kitten, Use Common::Sense!"
msgstr "木と子猫を救うためのツール Common::Sense"

#. leap/perl-common-sense/description
msgid ""
"   “Nothing is more fairly distributed than common sense: no one thinks    "
"he needs more of it than he already has.”\n"
"\n"
"   – René Descartes\n"
"\n"
"This module implements some sane defaults for Perl programs, as defined by "
"two typical (or not so typical - use your common sense) specimens of Perl "
"coders. In fact, after working out details on which warnings and strict "
"modes to enable and make fatal, we found that we (and our code written so "
"far, and others) fully agree on every option, even though we never used "
"warnings before, so it seems this module indeed reflects a \"common\" sense "
"among some long-time Perl coders.\n"
"\n"
"The basic philosophy behind the choices made in common::sense can be "
"summarised as: \"enforcing strict policies to catch as many bugs as "
"possible, while at the same time, not limiting the expressive power "
"available to the programmer\".\n"
"\n"
"Two typical examples of how this philosophy is applied in practise is the "
"handling of uninitialised and malloc warnings: \n"
"* _uninitialised_\n"
"\n"
"  'undef' is a well-defined feature of perl, and enabling warnings for   "
"using it rarely catches any bugs, but considerably limits you in what you   "
"can do, so uninitialised warnings are disabled. \n"
"* _malloc_\n"
"\n"
"  Freeing something twice on the C level is a serious bug, usually causing   "
"memory corruption. It often leads to side effects much later in the   "
"program and there are no advantages to not reporting this, so malloc   "
"warnings are fatal by default.\n"
"\n"
"Unfortunately, there is no fine-grained warning control in perl, so often "
"whole groups of useful warnings had to be excluded because of a single "
"useless warning (for example, perl puts an arbitrary limit on the length of "
"text you can match with some regexes before emitting a warning, making the "
"whole 'regexp' category useless).\n"
"\n"
"What follows is a more thorough discussion of what this module does, and why "
"it does it, and what the advantages (and disadvantages) of this approach are."
msgstr ""
"   \"分別ほど人々の間に平等に分け与えられているものはない。というのも、誰でも"
"みんな、自分には分別が十分に備わっていると思っているからだ。\" \n"
"\n"
"   - ルネ・デカルト\n"
"\n"
"このモジュールは、 2 つの典型的 (かどうかはあなたの判断です) な Perl プログラ"
"ムの見本として、真っ当な既定値を実装しています。事実、生成された警告や制約"
"モードを致命的エラーとして扱うことで、我々 (と作成するコード) は各メッセージ"
"による対応を促される結果となります。これは今まで警告として扱ってこなかったも"
"のであっても、それは長期間にわたる Perl のコーダによる \"分別\" に照らしあわ"
"せることで、悪い箇所を指摘することになるためです。\n"
"\n"
"common::sense モジュールで選定された基本的な哲学は、 \"できるかぎり多数のバグ"
"を捕まえるための制約ポリシーを強制しながら、同時にプログラマに備わった表現力"
"を邪魔しないこと\" にあります。\n"
"\n"
"下記の 2 つの例で、実際に uninitialised と malloc に対する警告哲学を示しま"
"す:\n"
"* _uninitialised_\n"
"\n"
"  'undef' は Perl でよく使用される機能で、これを使用することで滅多に発生しな"
"いバグに対して警告を生成することができます。ですが、これを利用することでコー"
"ディングを制限してしまうことになるため、初期化されていない旨の警告を無効化し"
"ます。\n"
"* _malloc_\n"
"\n"
"  C 言語レベルでは、確保されたメモリを 2 度解放することは深刻なバグになり、一"
"般的にはメモリ破壊を引き起こします。プログラム内で副次的な悪影響を起こすこと"
"もあるため、これを警告しないことに何の利点もありません。そのため、 malloc の"
"警告は既定で致命的エラーに設定されています。\n"
"\n"
"残念ながら Perl の警告をうまく制御する方法はなく、 1 つの無意味な警告のため"
"に、残り全ての有用な警告を排除してしまいがちです (たとえば Perl では、正規表"
"現に該当させる目的で任意の長さにテキストを制限できますが、これにより無意味な"
"警告を生成してしまう場合があります。これにより 'regexp' の警告分類は意味のな"
"いものになってしまいます) 。\n"
"\n"
"下記はこのモジュールが何を行なうのか、およびなぜこれを行なうのか、そしてこの"
"方法がどのような利点をもたらすのかについて、詳しく述べたものです。"

#. leap/perl-constant-boolean/summary
msgid "Define TRUE and FALSE constants."
msgstr "TRUE/FALSE の定数の定義"

#. leap/perl-constant-boolean/description
msgid ""
"Defines 'TRUE' and 'FALSE' constants in caller's namespace. You could use "
"simple values like empty string or zero for false, or any non-empty and non-"
"zero string value as true, but the 'TRUE' and 'FALSE' constants are more "
"descriptive.\n"
"\n"
"It is virtually the same as:\n"
"\n"
"     use constant TRUE => !! 1;   use constant FALSE => !! '';\n"
"\n"
"The constants exported by 'constant::boolean' are not reported by the Test::"
"Pod::Coverage manpage, so it is more convenient to use this module than to "
"define 'TRUE' and 'FALSE' constants by yourself.\n"
"\n"
"The constants can be removed from class API with 'no constant::boolean' "
"pragma or some universal tool like the namespace::clean manpage."
msgstr ""
"呼び出し元のネームスペース内に 'TRUE', 'FALSE' の定数を定義します。空文字列や"
"ゼロなどを false として扱うことができますし、空でない文字列や非ゼロの文字列"
"を true として扱うこともできますが、'TRUE' や 'FALSE' のていすうを利用したほ"
"うが、よりわかりやすいコードになります。\n"
"\n"
"このモジュールは、仮想的に下記と同じです:\n"
"\n"
"     use constant TRUE => !! 1;   use constant FALSE => !! '';\n"
"\n"
"'constant::boolean' で公開される定数は、 Test::Pod::Coverage で報告されません"
"ので、ご自身で 'TRUE' や 'FALSE' を定義するよりは便利に使用することができま"
"す。\n"
"\n"
"また、定数は 'no constant::boolean' プラグマを利用することでクラス API から削"
"除することができるほか、 namespace::clean などの汎用的なツールで削除すること"
"もできます。"

#. leap/perl-constant-defer/summary
msgid "Constant Subs with Deferred Value Calculation"
msgstr "遅延型定数を計算するためのモジュール"

#. leap/perl-constant-defer/description
msgid ""
"'constant::defer' creates a subroutine which on the first call runs given "
"code to calculate its value, and on any subsequent calls just returns that "
"value, like a constant. The value code is discarded once run, allowing it to "
"be garbage collected.\n"
"\n"
"Deferring a calculation is good if it might take a lot of work or produce a "
"big result but is only needed sometimes or only well into a program run. If "
"it's never needed then the value code never runs.\n"
"\n"
"A deferred constant is generally not inlined or folded (see the perlop/"
"Constant Folding manpage) since it's not a single scalar value. In the "
"current implementation a deferred constant becomes a plain constant after "
"the first use, so may inline etc in code compiled after that (see the /"
"IMPLEMENTATION manpage below).\n"
"\n"
"See _examples/simple.pl_ in the constant-defer source code for a complete "
"sample program."
msgstr ""
"'constant::defer' は、最初の呼び出しではその値を計算するためにコードを実行"
"し、それ以降の呼び出しでは単純にその値を定数のように返すだけのサブルーチンを"
"作成します。値のコードは実行されると廃棄されるため、ガーベージコレクタでメモ"
"リを回収することができます。\n"
"\n"
"計算結果の記憶は、その値を算出するのに多数の手間がかかるものでありながら、"
"いったん計算できてしまえば値が変わらないものに対して有用です。なお、値が不要"
"になれば値を算出する際のコードも実行されません。\n"
"\n"
"このモジュールは \"遅延型定数\" と呼ばれますが、これは単一のスカラー値である"
"ことから、一般にインライン化や折り畳みは実施しません (perlop/Constant "
"Folding をお読みください) 。現在の実装では、遅延型定数は初回の利用で純粋な定"
"数となり、インライン化などのコードコンパイルはその後に行ないます (詳しくは /"
"IMPLEMENTATION をお読みください) 。\n"
"\n"
"完全なサンプルプログラムをご希望の場合は、 constant-defer ソースコード内の "
"_examples/simple.pl_ をお読みください。"

#. leap/perl/perl-core-DB_File-32bit/summary
#. leap/perl/perl-core-DB_File/summary
msgid "Perl 5 interface to Berkeley DB"
msgstr "Berkeley DB に対する Perl 5 インターフェイス"

#. leap/perl/perl-core-DB_File-32bit/description
#. leap/perl/perl-core-DB_File/description
msgid ""
"perl-core-DB_File - Perl 5 interface to Berkeley DB\n"
"\n"
"Perl is optimized for scanning arbitrary text files, extracting information "
"from those text files, and printing reports based on that information.  It "
"is also good for many system management tasks.\n"
"\n"
"Perl is intended to be practical (easy to use, efficient, and complete) "
"rather than beautiful (tiny, elegant, and minimal).\n"
"\n"
"This package contains perl's DB_File module."
msgstr ""
"perl-core-DB_File - Berkeley DBへの Perl5 インターフェイス\n"
"\n"
"Perl は任意のテキストファイルを読み出してこれらのテキストから 必要な情報を取"
"り出し、これらの情報に基づく何らかのレポートを表示することに 長けています。ま"
"た、多くのシステム管理作業にも便利に使用することができます。\n"
"\n"
"Perl は美しさ (簡易性、美観、コンパクト性) よりも現実 (使いやすさ、便利さ、完"
"全性) を追求しています。\n"
"\n"
" このパッケージには、Perl DB_File モジュールが含まれています。"

#. leap/perl-curry/summary
#. leap/perl-curry/description
msgid "Create automatic curried method call closures for any class or object"
msgstr ""
"任意のクラスやオブジェクトに対する自動カリー化メソッドコールクロージャの作成"

#. leap/perl/perl-doc/summary
msgid "Perl Documentation"
msgstr "Perl ドキュメンテーション"

#. leap/perl/perl-doc/description
msgid "Perl man pages and pod files."
msgstr "Perl のマニュアルページと pod ファイルです。"

#. leap/perl-experimental/summary
msgid "Experimental features made easy"
msgstr "実験的な機能を使いやすくするモジュール"

#. leap/perl-experimental/description
msgid ""
"This pragma provides an easy and convenient way to enable or disable "
"experimental features.\n"
"\n"
"Every version of perl has some number of features present but considered "
"\"experimental.\" For much of the life of Perl 5, this was only a "
"designation found in the documentation. Starting in Perl v5.10.0, and more "
"aggressively in v5.18.0, experimental features were placed behind pragmata "
"used to enable the feature and disable associated warnings.\n"
"\n"
"The 'experimental' pragma exists to combine the required incantations into a "
"single interface stable across releases of perl. For every experimental "
"feature, this should enable the feature and silence warnings for the "
"enclosing lexical scope:\n"
"\n"
"  use experimental 'feature-name';\n"
"\n"
"To disable the feature and, if applicable, re-enable any warnings, use:\n"
"\n"
"  no experimental 'feature-name';\n"
"\n"
"The supported features, documented further below, are: \n"
"* * 'array_base' - allow the use of '$[' to change the starting index of   "
"'@array'.\n"
"\n"
"This is supported on all versions of perl. \n"
"* * 'autoderef' - allow push, each, keys, and other built-ins on   "
"references.\n"
"\n"
"This was added in perl 5.14.0 and removed in perl 5.23.1. \n"
"* * 'bitwise' - allow the new stringwise bit operators\n"
"\n"
"This was added in perl 5.22.0. \n"
"* * 'const_attr' - allow the :const attribute on subs\n"
"\n"
"This was added in perl 5.22.0. \n"
"* * 'declared_refs' - enables aliasing via assignment to references\n"
"\n"
"This was added in perl 5.26.0. \n"
"* * 'isa' - allow the use of the 'isa' infix operator\n"
"\n"
"This was added in perl 5.32.0. \n"
"* * 'lexical_topic' - allow the use of lexical '$_' via 'my $_'.\n"
"\n"
"This was added in perl 5.10.0 and removed in perl 5.23.4. \n"
"* * 'lexical_subs' - allow the use of lexical subroutines.\n"
"\n"
"This was added in 5.18.0. \n"
"* * 'postderef' - allow the use of postfix dereferencing expressions\n"
"\n"
"This was added in perl 5.20.0, and became non-experimental (and always "
"enabled) in 5.24.0. \n"
"* * 'postderef_qq' - allow the use of postfix dereferencing expressions   "
"inside interpolating strings\n"
"\n"
"This was added in perl 5.20.0, and became non-experimental (and always "
"enabled) in 5.24.0. \n"
"* * 're_strict' - enables strict mode in regular expressions\n"
"\n"
"This was added in perl 5.22.0. \n"
"* * 'refaliasing' - allow aliasing via '\\$x = \\$y'\n"
"\n"
"This was added in perl 5.22.0. \n"
"* * 'regex_sets' - allow extended bracketed character classes in regexps\n"
"\n"
"This was added in perl 5.18.0. \n"
"* * 'signatures' - allow subroutine signatures (for named arguments)\n"
"\n"
"This was added in perl 5.20.0. \n"
"* * 'smartmatch' - allow the use of '~~'\n"
"\n"
"This was added in perl 5.10.0, but it should be noted there are significant "
"incompatibilities between 5.10.0 and 5.10.1. \n"
"* * 'switch' - allow the use of '~~', given, and when\n"
"\n"
"This was added in perl 5.10.0. \n"
"* * 'try' - allow the use of 'try' and 'catch'\n"
"\n"
"This was added in perl 5.34.0 \n"
"* * 'win32_perlio' - allows the use of the :win32 IO layer.\n"
"\n"
"This was added on perl 5.22.0."
msgstr ""
"このプラグマは、試験的な機能を有効または無効にするための簡単で便利な方法を提供します。\n"
"\n"
"Perlのすべてのバージョンにはいくつかの機能がありますが、「実験的」と考えられています。Perl "
"5のほとんどの期間、これはドキュメントに記載されている名称でしかありませんでした。Perl v5.10.0以降、さらに積極的にv5.18."
"0では、機能を有効にし、関連する警告を無効にするために使用されるpragmataの後ろに実験的な機能が配置されました。\n"
"\n"
"「実験的な」プラグマは、必要な呪文を組み合わせて、perlのリリース間で安定した単一のインターフェースにするために存在します。すべての実験的な機能に対して"
"、これは機能を有効にし、包含する語彙スコープの警告を無音にする必要があります。\n"
"\n"
"  experimental'feature-name'を使用します。\n"
"\n"
"この機能を無効にし、該当する場合は警告を再度有効にするには、次のコマンドを使用します。\n"
"\n"
"  no experimental 'feature-name';\n"
"\n"
"サポートされている機能、文書化されている機能は次のとおりです:\n"
"* * 'array_base '- '$['を使用して '@array' の開始インデックスを変更できます。\n"
"\n"
"これは、perl のすべてのバージョンでサポートされています。\n"
"* * 'autoderef' - push、each、keys、その他の組み込みの参照を許可します。\n"
"\n"
"これはperl 5.14.0で追加され、perl 5.23.1で削除されました。\n"
"* * 'bitwise' - 新しいstringwiseビット演算子を許可します\n"
"\n"
"これはperl 5.22.0で追加されました。\n"
"* * 'const_attr' - サブプログラムの:const属性を許可します。\n"
"\n"
"これはperl 5.22.0で追加されました。\n"
"* * 'declared_refs' - 参照への割り当てによるエイリアスを有効にします。\n"
"\n"
"これはperl 5.26.0で追加されました。\n"
"* * 'isa' - infix演算子 'isa' の使用を許可します\n"
"\n"
"これはperl 5.32.0で追加されました。\n"
"* * 'lexical_topic' - 'my$_'経由で字句 '$_' の使用を許可します。\n"
"\n"
"これはperl 5.10.0で追加され、perl 5.23.4で削除されました。\n"
"* * 'lexical_subs' - 字句サブルーチンの使用を許可します。\n"
"\n"
"5.18.0 で追加されました。\n"
"* * 'postderef' - 接尾辞の逆参照式の使用を許可します\n"
"\n"
"これはperl 5.20.0で追加され、5.24.0で非実験的になりました(常に有効になりました)。\n"
"* * 'postderef_qq' - 補間文字列内で後置逆参照式を使用できるようにする\n"
"\n"
"これはperl 5.20.0で追加され、5.24.0で非実験的になりました(常に有効になりました)。\n"
"* * are_strict' - 正規表現でstrictモードを有効にします。\n"
"\n"
"これはperl 5.22.0で追加されました。\n"
"* * 'refaliasing' - '\\$x=\\$y' を使用したエイリアスを許可\n"
"\n"
"これはperl 5.22.0で追加されました。\n"
"* * 'regex_sets' - regexps 内で括弧で括られた拡張文字クラスを許可します。\n"
"\n"
"これはperl 5.18.0で追加されました。\n"
"* * 'signatures' - サブルーチンシグニチャを許可します(名前付き引数用)\n"
"\n"
"これはperl 5.20.0で追加されました。\n"
"* * 'smartmatch' - '~~' を使用できます。\n"
"\n"
"これはperl 5.10.0で追加されましたが、5.10.0と5.10.1の間には重大な非互換性があることに注意してください。\n"
"* * 'switch' - '~~' の使用を許可します。\n"
"\n"
"これはperl 5.10.0で追加されました。\n"
"* * 'try' - 'try' と 'catch' の使用を許可します。\n"
"\n"
"これはperl 5.34.0で追加されました。\n"
"* * 'win32_perlio '- :win32 IO レイヤの使用を許可します。\n"
"\n"
"これはperl 5.22.0で追加されました。"

#. leap/perl-forks/summary
msgid "Drop-in replacement for Perl threads using fork()"
msgstr "fork() を使用する Perl スレッド向けの代替モジュール"

#. leap/perl-forks/description
msgid ""
"The \"forks\" pragma allows a developer to use threads without having to "
"have a threaded perl, or to even run 5.8.0 or higher.\n"
"\n"
"Refer to the the threads manpage module for ithreads API documentation. "
"Also, use\n"
"\n"
"    perl -Mforks -e 'print $threads::VERSION'\n"
"\n"
"to see what version of the threads manpage you should refer to regarding "
"supported API features.\n"
"\n"
"There were a number of goals that I am trying to reach with this "
"implementation.\n"
"\n"
"    Using this module *only* makes sense if you run on a system that has "
"an     implementation of the 'fork' function by the Operating System. "
"Windows     is currently the only known system on which Perl runs which does "
"*not*     have an implementation of 'fork'. Therefore, it *doesn't* make "
"any     sense to use this module on a Windows system. And therefore, a check "
"is     made during installation barring you from installing on a Windows     "
"system."
msgstr ""
"\"forks\" プラグマは開発者に対して、スレッド型の Perl を使用せずにスレッド機"
"能を利用できる機能を提供します。もちろん 5.8.0 やそれ以降にも対応していま"
"す。\n"
"\n"
"ithreads API ドキュメンテーションについては、 threads のモジュールをご覧くだ"
"さい。下記のようにして実行すると、対応する API 機能を表わすバージョン情報を表"
"示することができます:\n"
"\n"
"    perl -Mforks -e 'print $threads::VERSION'\n"
"\n"
"この実装で目指しているゴールは多数ありました。\n"
"\n"
"    このモジュールは、オペレーティングシステム側で 'fork' 関数を実装している"
"環境のみで動作するものであることに注意してください。 Windows には 'fork' の実"
"装が無いことが知られていますが、 Windows システムではこのモジュールは動作しま"
"せん。そのため、 Windows システムではインストールを禁止するように作られていま"
"す。"

#. leap/perl-gettext/summary
msgid "Message Handling Functions"
msgstr "メッセージ処理関数"

#. leap/perl-gettext/description
msgid ""
"The gettext module permits access from perl to the gettext() family of "
"functions for retrieving message strings from databases constructed to "
"internationalize software. \n"
"* $d = Locale::gettext->domain(DOMAIN) \n"
"* $d = Locale::gettext->domain_raw(DOMAIN)\n"
"\n"
"  Creates a new object for retrieving strings in the domain *DOMAIN* and   "
"returns it. 'domain' requests that strings be returned as Perl strings   "
"(possibly with wide characters) if possible while 'domain_raw' requests   "
"that octet strings directly from functions like 'dgettext()'. \n"
"* $d->get(MSGID)\n"
"\n"
"  Calls 'dgettext()' to return the translated string for the given "
"*MSGID*. \n"
"* $d->cget(MSGID, CATEGORY)\n"
"\n"
"  Calls 'dcgettext()' to return the translated string for the given "
"*MSGID*   in the given *CATEGORY*. \n"
"* $d->nget(MSGID, MSGID_PLURAL, N)\n"
"\n"
"  Calls 'dngettext()' to return the translated string for the given "
"*MSGID*   or *MSGID_PLURAL* depending on *N*. \n"
"* $d->ncget(MSGID, MSGID_PLURAL, N, CATEGORY)\n"
"\n"
"  Calls 'dngettext()' to return the translated string for the given "
"*MSGID*   or *MSGID_PLURAL* depending on *N* in the given *CATEGORY*. \n"
"* $d->dir([NEWDIR])\n"
"\n"
"  If *NEWDIR* is given, calls 'bindtextdomain' to set the name of the   "
"directory where messages for the domain represented by '$d' are found.   "
"Returns the (possibly changed) current directory name. \n"
"* $d->codeset([NEWCODE])\n"
"\n"
"  For instances created with 'Locale::gettext->domain_raw', manuiplates "
"the   character set of the returned strings. If *NEWCODE* is given, calls   "
"'bind_textdomain_codeset' to set the character encoding in which messages   "
"for the domain represented by '$d' are returned. Returns the (possibly   "
"changed) current encoding name.\n"
"\n"
"gettext(), dgettext(), and dcgettext() attempt to retrieve a string matching "
"their 'msgid' parameter within the context of the current locale. "
"dcgettext() takes the message's category and the text domain as parameters "
"while dgettext() defaults to the LC_MESSAGES category and gettext() defaults "
"to LC_MESSAGES and uses the current text domain. If the string is not found "
"in the database, then 'msgid' is returned.\n"
"\n"
"ngettext(), dngettext(), and dcngettext() function similarily but implement "
"differentiation of messages between singular and plural. See the "
"documentation for the corresponding C functions for details.\n"
"\n"
"textdomain() sets the current text domain and returns the previously active "
"domain.\n"
"\n"
"_bindtextdomain(domain, dirname)_ instructs the retrieval functions to look "
"for the databases belonging to domain 'domain' in the directory 'dirname'\n"
"\n"
"_bind_textdomain_codeset(domain, codeset)_ instructs the retrieval functions "
"to translate the returned messages to the character encoding given by "
"*codeset* if the encoding of the message catalog is known."
msgstr ""
"gettext モジュールは Perl に対して gettext() ファミリへのアクセス機能を提供す"
"るモジュールで、国際化ソフトウエアで構築されたデータベースから、文字列を取得"
"する機能を提供します。\n"
"* $d = Locale::gettext->domain(DOMAIN)\n"
"* $d = Locale::gettext->domain_raw(DOMAIN)\n"
"\n"
"  上記のメソッドは *DOMAIN* で指定された領域 (ドメイン) に対して、文字列を取"
"得するための新しいオブジェクトを作成し、作成したオブジェクトを返します。 "
"'domain' メソッドは Perl の文字列 (おそらくはワイドキャラクタを含む文字列) と"
"して文字列を返すようにしますが、 'domain_raw' メソッドでは 'dgettext()' のよ"
"うにオクテット文字列を直接返すようにします。\n"
"* $d->get(MSGID)\n"
"\n"
"  'dgettext()' を呼び出して、指定した *MSGID* メッセージの翻訳済み文字列を返"
"します。\n"
"* $d->cget(MSGID, CATEGORY)\n"
"\n"
"  'dcgettext()' を呼び出して、指定した *CATEGORY* (分類) 内の *MSGID* メッ"
"セージの翻訳済み文字列を返します。\n"
"* $d->nget(MSGID, MSGID_PLURAL, N)\n"
"\n"
"  'dngettext()' を呼び出して、指定した *N* の値に従って *MSGID* (単数の場合) "
"または *MSGID_PLURAL* メッセージの翻訳済み文字列を返します。\n"
"* $d->ncget(MSGID, MSGID_PLURAL, N, CATEGORY)\n"
"\n"
"  'dngettext()' を呼び出して、 *CATEGORY* (分類) 内であり、かつ 指定した *N* "
"の値に従って *MSGID* (単数の場合) または *MSGID_PLURAL* メッセージの翻訳済み"
"文字列を返します。\n"
"* $d->dir([NEWDIR])\n"
"\n"
"  *NEWDIR* を指定すると、 'bindtextdomain' を呼び出して、 '$d' で表わされる領"
"域向けのメッセージがあるディレクトリの名前を設定します。返される値は、 (おそ"
"らく変更済みの) 現在のディレクトリになります。\n"
"* $d->codeset([NEWCODE])\n"
"\n"
"  たとえば 'Locale::gettext->domain_raw' で作成した場合、返される文字列の文字"
"セットを変更します。 *NEWCODE* が指定された場合は、 "
"'bind_textdomain_codeset' を呼び出して、 '$d' で表わされるドメインに対しして"
"メッセージの文字エンコーディングを設定します。返される値は、 (おそらく変更済"
"みの) 現在のエンコーディング名になります。\n"
"\n"
"gettext(), dgettext(), dcgettext() は、現在のロケールのコンテキスト内で、 "
"'msgid' パラメータに該当する文字列を取得します。 dcgettext() はメッセージの分"
"類とドメインの両方をパラメータとして取りますが、 dgettext() は分類が "
"LC_MESSAGES であるものとして取得し、 gettext() は現在の分類が LC_MESSAGES "
"で、かつ現在のテキストドメインであるものとして取得します。文字列が見つからな"
"い場合は、 'msgid' を返します。\n"
"\n"
"ngettext(), dngettext(), dcngettext() 関数はそれぞれ似たような実装になってい"
"ますが、単一形と複数形で異なるメッセージを設定することができます。詳しくは C "
"言語の関数に関するドキュメンテーションをお読みください。\n"
"\n"
"textdomain() は現在のテキストドメインを設定し、以前のテキストドメインを返しま"
"す。\n"
"\n"
"_bindtextdomain(domain, dirname)_ は、ディレクトリ 'dirname' 内のドメイン "
"'domain' に属するデータベースを検索するための取得関数です。\n"
"\n"
"_bind_textdomain_codeset(domain, codeset)_ は、メッセージカタログのエンコー"
"ディングが既知のものであった場合、 *codeset* で返却されたメッセージを変換する"
"関数です。"

#. leap/perl-local-lib/perl-homedir/summary
msgid "Per-user Perl local::lib setup"
msgstr "ユーザごとの Perl local::lib 設定"

#. leap/perl-local-lib/perl-homedir/description
msgid ""
"perl-homedir configures the system to automatically create a ~/perl5 "
"directory in each user's $HOME on user login.  This allows each user to "
"install and CPAN packages via the CPAN to their $HOME, with no additional "
"configuration or privliges, and without installing them system-wide.\n"
"\n"
"If you want your users to be able to install and use their own Perl modules, "
"install this package."
msgstr ""
"perl-homedir は、ユーザのログイン時、自動的にユーザの $HOME (ホームディレクト"
"リ) 内に ~/perl5 ディレクトリを作成してシステムを設定する機能を提供します。こ"
"れにより、各ユーザが独自の CPAN パッケージを構築して、 $HOME ディレクトリ内に"
"保存できるようになります。追加の設定や特権などは不要ですし、システム全体に"
"パッケージをインストールする必要もありません。\n"
"\n"
"ユーザに対して独自の Perl モジュールのインストールを許可したい場合は、この"
"パッケージをインストールしてください。"

#. leap/perl-indirect/summary
msgid "Lexically warn about using the indirect method call syntax"
msgstr ""
"間接的なメソッド呼び出し文法を使用した際に文法上の警告を生成するモジュール"

#. leap/perl-indirect/description
msgid ""
"When enabled, this pragma warns about indirect method calls that are present "
"in your code.\n"
"\n"
"The indirect syntax is now considered harmful, since its parsing has many "
"quirks and its use is error prone : when the subroutine 'foo' has not been "
"declared in the current package, 'foo $x' actually compiles to '$x->foo', "
"and 'foo { key => 1 }' to ''key'->foo(1)'. Please refer to the REFERENCES "
"section for a more complete list of reasons for avoiding this construct.\n"
"\n"
"This pragma currently does not warn for core functions ('print', 'say', "
"'exec' or 'system'). This may change in the future, or may be added as "
"optional features that would be enabled by passing options to 'unimport'.\n"
"\n"
"This module is *not* a source filter."
msgstr ""
"有効化すると、お使いのコード内に間接的なメソッド呼び出しが存在すると、このプ"
"ラグマが警告を発するようになります。\n"
"\n"
"間接文法は現在、解釈が曖昧であったり、エラーを引き起こす元凶となってしまって"
"いることから、有害なものとして扱われています: たとえばサブルーチン 'foo' が現"
"在のパッケージ内で定義されていない場合、 'foo $x' は '$x->foo' にコンパイルさ"
"れますし、 'foo { key => 1}' は ''key'->foo(1)' にコンパイルされてしまいま"
"す。このような構造を避けるべき理由について、詳しくは REFERENCES をご覧くださ"
"い。\n"
"\n"
"このプラグマでは、現在中枢関数 ('print', 'say', 'exec', 'system') に対しては"
"警告を発さないように作られていますが、将来のバージョンで変更される可能性があ"
"るほか、 'unimport' にオプションを渡すことで有効化できるような、オプションの"
"機能が追加される可能性があります。\n"
"\n"
"このモジュールはソースフィルタ *ではありません* 。"

#. leap/perl-ldap/summary
msgid "Client Interface for LDAP Servers"
msgstr "LDAP サーバに対するクライアントインターフェイス"

#. leap/perl-ldap/description
msgid "A Client interface for LDAP servers."
msgstr "LDAP サーバに対するクライアントインターフェイスです。"

#. leap/perl-lib-relative/summary
msgid "Add paths relative to the current file to @INC"
msgstr "現在のファイルからの相対パスの @INC への追加"

#. leap/perl-lib-relative/description
msgid ""
"Adding a path to @INC to load modules from a local directory may seem "
"simple, but has a few common pitfalls to be aware of. Directly adding a "
"relative path to '@INC' means that any later code that changes the current "
"working directory will change where modules are loaded from. This applies to "
"the '.' path that used to be in '@INC' by default until perl 5.26.0, or a "
"relative path added in code like 'use lib 'path/to/lib'', and may be a "
"vulnerability if such a location is not supposed to be writable. "
"Additionally, the commonly used FindBin module relies on interpreter state "
"and the path to the original script invoked by the perl interpreter, "
"sometimes requiring workarounds in uncommon cases like generated or embedded "
"code. This module proposes a more straightforward method: take a path "
"relative to the current file, absolutize it, and add it to '@INC'.\n"
"\n"
"If this module is already available to be loaded, it can be used as with lib."
"pm, passing relative paths, which will be absolutized relative to the "
"current file then passed on to lib. Multiple arguments will be separately "
"absolutized, and absolute paths will be passed on unchanged.\n"
"\n"
"For cases where this module cannot be loaded beforehand, the last section of "
"the \"SYNOPSIS\" can be copy-pasted into a file to perform the same task."
msgstr ""
"ローカルディレクトリからモジュールを読み込む際、 @INC にパスを追加するのは簡"
"単に思われますが、いくつか注意すべき点があります。 '@INC' に相対パスをそのま"
"ま追加してしまうと、後ほどカレントディレクトリを変更してしまうと、モジュール"
"の読み込み元も変更されてしまいます。これは　Perl 5.26.0 までデフォルトで "
"'@INC' に設定されていた '.' も同様ですし、 'use lib 'path/to/lib'' のような相"
"対パス指定でも同じことになります。これらのディレクトリは書き込み可能である可"
"能性があるため、場合によっては脆弱性にもなり得ます。それに加えて、一般的に使"
"用されている FindBin モジュールはインタプリタの状態に依存して動作しますし、 "
"Perl インタプリタを実行した元のスクリプトのパスにも影響を受けます。また、生成"
"されたコードや組み込まれたコードの場合は、回避策を別途用意する必要があるかも"
"しれません。このモジュールでは、現在のファイルからの相対パスを受け付けて絶対"
"パスに変換し、それを '@INC' に追加しています。\n"
"\n"
"もしもこのモジュールが既に読み込み可能な状態にあれば、これを lib.pm と併用し"
"て使用することができます。これに相対パスを指定することで、現在のファイルから"
"の相対パスとして絶対パスに変換され、ライブラリに渡されるようになります。複数"
"のパラメータは個別に絶対パスに変換されますし、最初から絶対パスになっていれば"
"変換されずに渡されるようになっています。\n"
"\n"
"このモジュールを事前に読み込むことができない場合は、 \"SYNOPSIS\" の最後のセ"
"クションをお読みになり、ファイルを貼り付けてください。"

#. leap/perl-libconfigfile/summary
msgid "Parses simple configuration files"
msgstr "シンプルな設定ファイルの処理"

#. leap/perl-libconfigfile/description
msgid ""
"ConfigFile parses simple configuration files and stores its values in an "
"anonymous hash reference. The syntax of the configuration file is quite "
"simple:\n"
"\n"
"1.  This is a comment VALUE_ONE = foo VALUE_TWO = $VALUE_ONE/bar VALUE_THREE "
"= The value contains a \\# (hash). # This is a comment. COMPOSED_VALUE[one] "
"= The first component of a clustered value COMPOSED_VALUE[two] = The second "
"component of a clustered value\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Sebastien J. Gross <seb@sjgross.org>"
msgstr ""
"ConfigFile はシンプルな形式の設定ファイルを処理し、無名ハッシュ参照として こ"
"れらの値を代入する機能を提供します。 設定ファイルの書式は至ってシンプルで"
"す:\n"
"\n"
"# コメント VALUE_ONE = foo VALUE_TWO = $VALUE_ONE/bar VALUE_THREE = この値に"
"は \\# (ハッシュ) が含まれています. # ここもコメントです COMPOSED_VALUE[one] "
"= 複数個にまたがった値のうち 1 つめの値を示しています COMPOSED_VALUE[two] = "
"複数個にまたがった値のうち 2 つめの値を示しています\n"
"\n"
"\n"
"\n"
"作者:\n"
"--------     Sebastien J. Gross <seb@sjgross.org>"

#. leap/perl-libintl-perl/summary
msgid "High-Level Interface to Uniforum Message Translation"
msgstr "Uniforum Message Translation に対する高レベルインターフェイス"

#. leap/perl-libintl-perl/description
msgid ""
"This is an internationalization library for Perl that aims to be compatible "
"with the Uniforum message translations system as implemented for example in "
"GNU gettext."
msgstr ""
"このモジュールは、 GNU gettext で実装されている統一メッセージ変換システムとの"
"互換性を目指した、国際化ライブラリです。"

#. leap/perl-libwww-perl/summary
#. leap/perl-libwww-perl/description
msgid "The World-Wide Web library for Perl"
msgstr "Perl 向け World-Wide Web (www) ライブラリ"

#. leap/perl-libxml-perl/summary
msgid "Collection of Perl modules for working with XML"
msgstr "XML 処理を行なう Perl モジュール集"

#. leap/perl-libxml-perl/description
msgid ""
"perl-libxml-perl is a collection of Perl modules for working with XML.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Ken MacLeod <ken@bitsko.slc.ut.us>"
msgstr ""
"perl-libxml-perl は、 XML 処理を行なうための Perl モジュール集です。\n"
"\n"
"\n"
"\n"
"作者:\n"
"--------     Ken MacLeod <ken@bitsko.slc.ut.us>"

#. leap/perl-local-lib/summary
msgid "Create and Use a Local Lib/ for Perl Modules with Perl5lib"
msgstr ""
"Perl5lib で Perl モジュール向けのローカルライブラリを作成して使用するモジュー"
"ル"

#. leap/perl-local-lib/description
msgid ""
"This module provides a quick, convenient way of bootstrapping a user-local "
"Perl module library located within the user's home directory. It also "
"constructs and prints out for the user the list of environment variables "
"using the syntax appropriate for the user's current shell (as specified by "
"the 'SHELL' environment variable), suitable for directly adding to one's "
"shell configuration file.\n"
"\n"
"More generally, local::lib allows for the bootstrapping and usage of a "
"directory containing Perl modules outside of Perl's '@INC'. This makes it "
"easier to ship an application with an app-specific copy of a Perl module, or "
"collection of modules. Useful in cases like when an upstream maintainer "
"hasn't applied a patch to a module of theirs that you need for your "
"application.\n"
"\n"
"On import, local::lib sets the following environment variables to "
"appropriate values: \n"
"* PERL_MB_OPT \n"
"* PERL_MM_OPT \n"
"* PERL5LIB \n"
"* PATH \n"
"* PERL_LOCAL_LIB_ROOT\n"
"\n"
"When possible, these will be appended to instead of overwritten entirely.\n"
"\n"
"These values are then available for reference by any code after import."
msgstr ""
"このモジュールは、ユーザのホームディレクトリ内に配置されているローカルの "
"Perl モジュールに対して、そのブートストラップを素早く簡単に行なうための仕組み"
"です。そのほか、ユーザのカレントシェル ('SHELL' 環境変数で指定されているシェ"
"ル) に対して適切な文法を利用して、環境変数の一覧を構築して出力する機能も用意"
"されています。これはシェルの設定ファイルに直接追加できるようにするための措置"
"です。\n"
"\n"
"もっと一般的には、 local::lib は Perl の '@INC' 外にある Perl のモジュール用"
"ディレクトリについて、そのブートストラップと使用を行なうための仕組みでもあり"
"ます。これにより、アプリケーションが独自のバージョンの Perl モジュールのコ"
"ピーを利用できるようになります。たとえばアップストリームのメンテナが、特定の"
"モジュールに対するパッチを当てていないものの、そのパッチを当てないとアプリ"
"ケーションがうまく動作しないような場合などに有用です。\n"
"\n"
"インポートにあたって、 local::lib は下記の環境変数を適切な値に設定します:\n"
"* PERL_MB_OPT\n"
"* PERL_MM_OPT\n"
"* PERL5LIB\n"
"* PATH\n"
"* PERL_LOCAL_LIB_ROOT\n"
"\n"
"また、可能であれば上書きではなく追加されます。\n"
"\n"
"これらの値は import 後、任意の箇所から参照することができます。"

#. leap/perl-multidimensional/summary
msgid "Disables Multidimensional Array Emulation"
msgstr "多次元配列のエミュレーションの無効化"

#. leap/perl-multidimensional/description
msgid ""
"Perl's multidimensional array emulation stems from the days before the "
"language had references, but these days it mostly serves to bite you when "
"you typo a hash slice by using the '$' sigil instead of '@'.\n"
"\n"
"This module lexically makes using multidimensional array emulation a fatal "
"error at compile time."
msgstr ""
"Perl の多次元配列のエミュレーションは、言語が参照を保持していた時代に由来する"
"ものですが、現在はハッシュのスライスを '@' ではなく '$' で使用するようなタイ"
"プミスでのみ発生します。\n"
"\n"
"このモジュールは、多次元の配列エミュレーションを、コンパイル時の致命的な文法"
"エラーとして報告する機能を提供します。"

#. leap/perl-namespace-autoclean/summary
msgid "Keep imports out of your namespace"
msgstr "お使いのネームスペース内でのインポートの維持"

#. leap/perl-namespace-autoclean/description
msgid ""
"When you import a function into a Perl package, it will naturally also be "
"available as a method.\n"
"\n"
"The 'namespace::autoclean' pragma will remove all imported symbols at the "
"end of the current package's compile cycle. Functions called in the package "
"itself will still be bound by their name, but they won't show up as methods "
"on your class or instances.\n"
"\n"
"This module is very similar to namespace::clean, except it will clean all "
"imported functions, no matter if you imported them before or after you "
"'use'd the pragma. It will also not touch anything that looks like a "
"method.\n"
"\n"
"If you're writing an exporter and you want to clean up after yourself (and "
"your peers), you can use the '-cleanee' switch to specify what package to "
"clean:\n"
"\n"
"  package My::MooseX::namespace::autoclean;   use strict;\n"
"\n"
"  use namespace::autoclean (); # no cleanup, just load\n"
"\n"
"  sub import {       namespace::autoclean->import(         -cleanee => "
"scalar(caller),       );   }"
msgstr ""
"Perl パッケージ内に関数をインポートする場合、通常はメソッドとして利用できるの"
"が自然です。\n"
"\n"
"'namespace::autoclean' プラグマは、現在のパッケージに対するコンパイルサイクル"
"の最後で、すべてのインポート済みシンボルを削除します。パッケージ内で呼び出し"
"た関数はそのままその名前に関連付けられますが、クラスやインスタンスのメソッド"
"としては表示されなくなります。\n"
"\n"
"このモジュールは namespace::clean に非常に似ていますが、 'use' でインポートし"
"たものを含めてすべてのインポートされた関数をクリーンアップする点が異なりま"
"す。また、メソッドのように見えるものに関してはタッチしません。\n"
"\n"
"エクスポータを作成していて、自分自身 (およびその相手) の後にクリーンアップを"
"指定したい場合は、 '-cleanee' スイッチを利用して、どのパッケージをクリーン"
"アップするのかを指定してください:\n"
"\n"
"  package My::MooseX::namespace::autoclean;   use strict;\n"
"\n"
"  use namespace::autoclean (); # no cleanup, just load\n"
"\n"
"  sub import {       namespace::autoclean->import(         -cleanee => "
"scalar(caller),       );   }"

#. leap/perl-namespace-clean/summary
#. leap/perl-namespace-clean/description
msgid "Keep imports and functions out of your namespace"
msgstr "ネームスペース外のインポートと関数の維持"

#. leap/perl-pcsc/summary
msgid "Perl interface to Smart Card Reader"
msgstr "スマートカードリーダーに対する Perl インターフェイス"

#. leap/perl-pcsc/description
msgid ""
"PC/SC represents an abstraction layer to smart card readers. It provides a "
"communication layer with a wide variety of smart card readers through a "
"standardized API."
msgstr ""
"PC/SC はスマートカードリーダに対する抽象レイヤを提供する仕組みです。様々な"
"カードリーダーの通信レイヤを、標準化された API の元でアクセスできるようにしま"
"す。"

#. leap/perl-prefork/summary
msgid "Optimized module loading for forking or non-forking processes"
msgstr "forking と非 forking プロセスに対する最適化されたモジュール読み込み"

#. leap/perl-prefork/description
msgid ""
"The 'prefork' pragma is intended to allow module writers to optimise module "
"loading for *both* scenarios with as little additional code as possible.\n"
"\n"
"prefork.pm is intended to serve as a central and optional marshalling point "
"for state detection (are we running in compile-time or run-time mode) and to "
"act as a relatively light-weight module loader."
msgstr ""
"'prefork' プラグマは、できる限り少ないコード量で *両方* のシナリオに対応でき"
"るよう、モジュールの読み込みを最適化するための機能をモジュール作成者に提供す"
"ることを目指しています。\n"
"\n"
"prefork.pm は状態検出 (コンパイル時および実行時) にあたって中央管理型のモ"
"ジュールとなり、比較的軽量なモジュールローダとなることを目指しています。"

#. leap/perl-strictures/summary
msgid "Turn on strict and make most warnings fatal"
msgstr "strict を有効化し、多くの警告を致命的なものとして扱わせるモジュール"

#. leap/perl-strictures/description
msgid ""
"I've been writing the equivalent of this module at the top of my code for "
"about a year now. I figured it was time to make it shorter.\n"
"\n"
"Things like the importer in 'use Moose' don't help me because they turn "
"warnings on but don't make them fatal -- which from my point of view is "
"useless because I want an exception to tell me my code isn't warnings-"
"clean.\n"
"\n"
"Any time I see a warning from my code, that indicates a mistake.\n"
"\n"
"Any time my code encounters a mistake, I want a crash -- not spew to STDERR "
"and then unknown (and probably undesired) subsequent behaviour.\n"
"\n"
"I also want to ensure that obvious coding mistakes, like indirect object "
"syntax (and not so obvious mistakes that cause things to accidentally "
"compile as such) get caught, but not at the cost of an XS dependency and not "
"at the cost of blowing things up on another machine.\n"
"\n"
"Therefore, strictures turns on additional checking, but only when it thinks "
"it's running in a test file in a VCS checkout -- although if this causes "
"undesired behaviour this can be overridden by setting the "
"'PERL_STRICTURES_EXTRA' environment variable.\n"
"\n"
"If additional useful author side checks come to mind, I'll add them to the "
"'PERL_STRICTURES_EXTRA' code path only -- this will result in a minor "
"version increase (e.g. 1.000000 to 1.001000 (1.1.0) or similar). Any fixes "
"only to the mechanism of this code will result in a sub-version increase (e."
"g. 1.000000 to 1.000001 (1.0.1))."
msgstr ""
"1 年ほど前に、私が作成していたコードの中でこのモジュールと同じようなものを"
"作っていました。これをより短く作り直したのがこのモジュールです。\n"
"\n"
"'use Moose' 内でのインポートのような仕組みは、警告を有効にはするものの、それ"
"らを致命的なエラーとして扱うことができないことから、あまり役に立たないものに"
"なってしまっています。私としては、警告が発生するような場合は例外として扱って"
"ほしかったからです。\n"
"\n"
"私が開発しているコードから警告が発生した場合は、それは誤りを意味していま"
"す。\n"
"\n"
"コードが誤りに気付いた時点ではクラッシュして欲しいと考えています -- STDERR に"
"メッセージを出力して未知の (おそらく望まない) 動作をしてほしいわけではないか"
"らです。\n"
"\n"
"また、明らかなコードの誤り、たとえば間接的なオブジェクトの文法ミス (誤った形"
"でコンパイルしてしまったりするようなものではない間違い) があった場合でも、 "
"XS の依存性というコストや、他のマシンで何かを設定するような面倒はやりたくあり"
"ません。\n"
"\n"
"そのため、 strict を設定して追加のチェックを行なうのがより良いと考えました。"
"ただ、これは VCS のチェックアウトのテストファイル内でのみ実行するもので、 "
"'PERL_STRICTURES_EXTRA' の環境変数を設定することで、このような望まない動作を"
"上書きできるようにしておくべきと考えました。\n"
"\n"
"追加の作者側のチェック機能が思い浮かんだ場合は、コードパスにのみ "
"'PERL_STRICTURES_EXTRA' を追加します -- これはマイナーバージョンの増加 (例: "
"1.000000 から 1.001000 (1.1.0) など) が発生します。また、このコードの仕組みの"
"みに対する修正の場合、サブバージョンの追加 (例: 1.000000 から 1.000001 "
"(1.0.1) など) のみが発生します。"

#. leap/perl-syntax/summary
msgid "Activate syntax extensions"
msgstr "文法拡張の有効化"

#. leap/perl-syntax/description
msgid ""
"This module activates community provided syntax extensions to Perl. You pass "
"it a feature name, and optionally a scalar with arguments, and the "
"dispatching system will load and install the extension in your package.\n"
"\n"
"The import arguments are parsed with the Data::OptList manpage. There are no "
"standardised options. Please consult the documentation for the specific "
"syntax feature to find out about possible configuration options.\n"
"\n"
"The passed in feature names are simply transformed: 'function' becomes the "
"Syntax::Feature::Function manpage and 'foo_bar' would become 'Syntax::"
"Feature::FooBar'."
msgstr ""
"このモジュールは、 Perl に対してコミュニティが提供する文法拡張を有効化するモ"
"ジュールです。機能名を指定し、オプションでパラメータ付きのスカラー値を渡すこ"
"とで、発信システムがお使いのパッケージ内に拡張を読み込み、インストールしま"
"す。\n"
"\n"
"インポートのパラメータは Data::OptList で処理されます。標準化されたオプション"
"はありません。設定可能な設定オプションを見つけるための特定の文法機能につい"
"て、詳しくはドキュメンテーションをお読みください。\n"
"\n"
"機能名内に渡されたものは単純に変換されます: 'function' は Syntax::Feature::"
"Function に、 'foo_bar' は 'Syntax::Feature::FooBar' になります。"

#. leap/perl-version/summary
msgid "Perl extension for Version Objects"
msgstr "バージョンオブジェクト向け Perl 拡張"

#. leap/perl-version/description
msgid ""
"Version objects were added to Perl in 5.10. This module implements version "
"objects for older version of Perl and provides the version object API for "
"all versions of Perl. All previous releases before 0.74 are deprecated and "
"should not be used due to incompatible API changes. Version 0.77 introduces "
"the new 'parse' and 'declare' methods to standardize usage. You are strongly "
"urged to set 0.77 as a minimum in your code, e.g.\n"
"\n"
"  use version 0.77; # even for Perl v.5.10.0"
msgstr ""
"version オブジェクトは Perl 5.10 で追加された仕組みです。このモジュールは古い"
"バージョンの Perl に対してバージョンオブジェクトを実装し、すべてのバージョン"
"の Perl で version オブジェクトの API を利用できるようにします。 0.74 以前の"
"リリースは廃止予定のもので、互換性を損なう形で変更が加えられているため、使用"
"すべきではありません。バージョン 0.77 では標準の使い方として新しく 'parse', "
"'declare' の各メソッドが追加されています。そのため、お使いのコードでは最小の"
"バージョンを 0.77 として規定することを強くお勧めします:\n"
"\n"
"  use version 0.77; # Perl v.5.10.0 向け"

#. tumbleweed/perl-Alien-Libxml2/summary
msgid "Install the C libxml2 library on your system"
msgstr "お使いのシステムに対する C libxml2 ライブラリのインストール"

#. tumbleweed/perl-Alien-Libxml2/description
msgid "This module provides 'libxml2' for other modules to use."
msgstr "このモジュールは、他のモジュールで必要な 'libxml2' を提供します。"

#. tumbleweed/perl-Any-URI-Escape/summary
msgid "Load URI::Escape::XS preferentially over URI::Escape"
msgstr "URI::Escape よりも URI::Escape::XS を優先して読み込むモジュール"

#. tumbleweed/perl-Any-URI-Escape/description
msgid ""
"URI::Escape is great, but URI::Escape::XS is faster. This module loads URI::"
"Escape::XS and imports the two most common methods if XS is installed.\n"
"\n"
"The insides of this module aren't completely shaken out yet, so patches "
"welcome."
msgstr ""
"URI::Escape は素晴らしいモジュールですが、 URI::Escape::XS のほうがより高速に"
"動作します。このモジュールは URI::Escape::XS を読み込んで、 XS がインストール"
"されていれば 2 種類の最も一般的なメソッドを取り込みます。\n"
"\n"
"このモジュールの内部はまだ完全にはできあがっていません。パッチ歓迎です。"

#. tumbleweed/perl-AnyEvent-Connector/summary
msgid "Tcp_connect with Transparent Proxy Handling"
msgstr "透過型プロキシ処理機能を持つ tcp_connect"

#. tumbleweed/perl-AnyEvent-Connector/description
msgid ""
"AnyEvent::Connector object has 'tcp_connect' method compatible with that "
"from AnyEvent::Socket, and it handles proxy settings transparently."
msgstr ""
"AnyEvent::Connector オブジェクトには 'tcp_connect' メソッドがあり、これは "
"AnyEvent::Socket からのものと互換性があります。これにより、プロキシ設定を透過"
"的に処理することができます。"

#. tumbleweed/perl-AnyEvent-WebSocket-Client/summary
msgid "WebSocket client for AnyEvent"
msgstr "AnyEvent 向け WebSocket クライアント"

#. tumbleweed/perl-AnyEvent-WebSocket-Client/description
msgid ""
"This class provides an interface to interact with a web server that provides "
"services via the WebSocket protocol in an AnyEvent context. It uses "
"Protocol::WebSocket rather than reinventing the wheel. You could use "
"AnyEvent and Protocol::WebSocket directly if you wanted finer grain control, "
"but if that is not necessary then this class may save you some time.\n"
"\n"
"The recommended API was added to the AnyEvent::WebSocket::Connection class "
"with version 0.12, so it is recommended that you include that version when "
"using this module. The older version of the API has since been deprecated "
"and removed."
msgstr ""
"このクラスは Web サーバとの間を取り持つインターフェイスを提供するもので、 "
"WebSocket プロトコルを AnyEvent コンテキスト内で取り扱う機能を提供します。車"
"輪の再発明をすることなく Protocol::WebSocket を使用していますが、より細かい調"
"整が必要な場合は AnyEvent と Protocol::WebSocket を直接使用することをお勧めし"
"ます。ただし、このクラスを使えば時間をかけずに簡単に作ることができます。\n"
"\n"
"推奨 API が AnyEvent::WebSocket::Connection クラスのバージョン 0.12 で追加さ"
"れていますので、このモジュールを使用する場合はそのバージョンを使用することを"
"お勧めします。それより古いバージョンの API は廃止され、削除されています。"

#. tumbleweed/perl-AnyEvent-WebSocket-Server/summary
msgid "WebSocket server for AnyEvent"
msgstr "AnyEvent 向け WebSocket サーバ"

#. tumbleweed/perl-AnyEvent-WebSocket-Server/description
msgid ""
"This class is an implementation of the WebSocket server in an AnyEvent "
"context.\n"
"\n"
"  * Currently this module supports WebSocket protocol version 13 only. See "
"at https://tools.ietf.org/html/rfc6455 for detail."
msgstr ""
"このクラスは、 AnyEvent のコンテキスト内で WebSocket サーバの実装を提供しま"
"す。\n"
"\n"
"  * 現時点では、このモジュールは WebSocket プロトコル 13 にのみ対応していま"
"す。詳しくは https://tools.ietf.org/html/rfc6455 をお読みください。"

#. tumbleweed/perl-App-perlbrew/description
msgid ""
"perlbrew is a program to automate the building and installation of perl in "
"an easy way. It provides multiple isolated perl environments, and a "
"mechanism for you to switch between them.\n"
"\n"
"Everything are installed unter '~/perl5/perlbrew'. You then need to include "
"a bashrc/cshrc provided by perlbrew to tweak the PATH for you. You then can "
"benefit from not having to run 'sudo' commands to install cpan modules "
"because those are installed inside your 'HOME' too.\n"
"\n"
"For the documentation of perlbrew usage see perlbrew command on at https://"
"metacpan.org/, or by running 'perlbrew help', or by visiting at https://"
"perlbrew.pl/. The following documentation features the API of 'App::"
"perlbrew' module, and may not be remotely close to what your want to read."
msgstr ""
"perlbrewはperlの構築とインストールを簡単な方法で自動化するプログラムです。複"
"数の分離されたPerl環境と、それらを切り替えるためのメカニズムを提供します。\n"
"\n"
"すべては'~/perl5/perlbrew'の後にインストールされます。次に、perlbrewによって"
"提供されたbashrc/cshrcを含めて、PATHを調整する必要があります。cpanモジュール"
"は'HOME'内にもインストールされるので、'sudo'コマンドを実行しなくてもcpanモ"
"ジュールをインストールできるという利点があります。\n"
"\n"
"perlbrewの使用方法のドキュメントについては、https://metacpan.org/,でperlbrew"
"コマンドをオンにするか、「perlbrew help」を実行するか、またはhttps://"
"perlbrew.pl/を見てください。以下のドキュメントは'App::perlbrew'モジュールの"
"APIを中心として扱っており、あなたが読みたいものに遠く及ばないかもしれません。"

#. tumbleweed/perl-App-rsync-retry/summary
#. tumbleweed/perl-App-rsync-retry/description
msgid "Rsync wrapper to retry on transfer errrors"
msgstr "転送エラー時に再試行するrsyncラッパー"

#. tumbleweed/perl-Archive-Any-Lite/summary
msgid "Simple CPAN package extractor"
msgstr "シンプルなCPANパッケージ・エクストラクタ"

#. tumbleweed/perl-Archive-Any-Lite/description
msgid ""
"This is a fork of Archive::Any by Michael Schwern and Clint Moore. The main "
"difference is this works properly even when you fork(), and may require less "
"memory to extract a tarball. On the other hand, this isn't pluggable (this "
"only supports file formats used in the CPAN toolchains), and this doesn't "
"check mime types (at least as of this writing)."
msgstr ""
"これはMichael SchwernとClint MooreによるArchive::Anyのフォークです。主な違いは、fork()を実行しても正しく動作す"
"ることと、tarballを抽出するために必要なメモリが少なくて済むことです。一方、これはプラグ可能ではありません(これはCPANツールチェーンで使用される"
"ファイルフォーマットのみをサポートしています)。また、MIMEタイプをチェックしません(少なくともこの記事を書いている時点では)。"

#. tumbleweed/perl-Archive-Extract/summary
msgid "Generic archive extracting mechanism"
msgstr "汎用書庫抽出メカニズム"

#. tumbleweed/perl-Array-Diff/summary
msgid "Find the differences between two arrays"
msgstr "2つのアレイ間の違いを検出"

#. tumbleweed/perl-Array-Diff/description
msgid ""
"This module compares two *pre-sorted* arrays and returns the added or "
"deleted elements in two separate arrays. It's a simple wrapper around "
"Algorithm::Diff. \n"
"*Note*: the arrays must be sorted before you call 'diff'.\n"
"\n"
"And if you need more complex array tools, check Array::Compare."
msgstr ""
"このモジュールは、2つの *事前にソートされた* "
"配列を比較し、追加または削除された要素を2つの異なる配列で返します。これは、Algorithm::Diffの単純なラッパーです。\n"
"*注意* : 'diff'を呼び出す前に配列を整列しておく必要があります。\n"
"\n"
"さらに複雑な配列ツールが必要な場合は、Array::Compareをチェックしてください。"

#. tumbleweed/perl-BerkeleyDB/summary
msgid "Perl extension for Berkeley DB version 2, 3, 4, 5 or 6"
msgstr "Berkeley DB バージョン 2, 3, 4, 5, 6 向け Perl 拡張"

#. tumbleweed/perl-Business-ISBN/description
msgid ""
"This modules handles International Standard Book Numbers, including ISBN-10 "
"and ISBN-13.\n"
"\n"
"The data come from Business::ISBN::Data, which means you can update the data "
"separately from the code. Also, you can use Business::ISBN::Data with "
"whatever _RangeMessage.xml_ you like if you have updated data. See that "
"module for details."
msgstr ""
"このモジュールは ISBN-10 と ISBN-13 を含む International Standard Book "
"Numbers を処理します。\n"
"\n"
"データは Business::ISBN::Data からのものを使用していますので、コードとデータ"
"は別々に更新することができます。また Business::ISBN::Data と任意の "
"RangeMessage.xml_ を使用することで、必要な最新データを使用することもできま"
"す。詳しくはモジュール内の説明をお読みください。"

#. tumbleweed/perl-Business-ISBN-Data/summary
msgid "Data pack for Business::ISBN"
msgstr "Business::ISBN 向けデータパック"

#. tumbleweed/perl-Business-ISBN-Data/description
msgid ""
"You don't need to load this module yourself in most cases. Business::ISBN "
"will load it when it loads. You must use Business::ISBN 3.005 or later "
"because the data structure changed slightly to fix a bug with ISBN13 "
"prefixes.\n"
"\n"
"These data are generated from the _RangeMessage.xml_ file provided by the "
"ISBN Agency. The distributed version matches the date in the version for "
"this module. You can retrieve this yourself at https://www.isbn-"
"international.org/range_file_generation. This file is included as part of "
"the distribution and should be installed at _~lib/Business/ISBN/Data/"
"RangeMessage.xml_.\n"
"\n"
"If you want to use a different _RangeMessage.xml_ file, you can set the "
"'ISBN_RANGE_MESSAGE' environment variable to the alternate location before "
"you load 'Business::ISBN'. This way, you can use the latest (or even "
"earlier) data without having to install something new or wait for an update "
"to this module.\n"
"\n"
"If the default _RangeMessage.xml_ or your alternate one is not available, "
"the module falls back to data included in _Data.pm_. However, that data are "
"likely to be older. If it does not find that file, it looks for "
"_RangeMessage.xml_ in the current directory.\n"
"\n"
"The data are in '%Business::ISBN::country_data' (although the \"country\" "
"part is historical). If you want to see where the data are from, check "
"'$Business::ISBN::country_data{_source}'."
msgstr ""
"ほとんどの場合、このモジュールを直接読み込む必要はありません。また、このモ"
"ジュールを読み込むと、 'Business::ISBN' も読み込みます。ISBN13 プレフィックス"
"のバグを修正するため、データ構造がわずかに修正されたので、Business::ISBN "
"3.005 以降を使わなければなりません。\n"
"\n"
"これらのデータは ISBN エージェンシーが提供する _RangeMessage.xml_ から生成さ"
"れたものです。配布されたバージョンは、このモジュール用のバージョン中の日付に"
"一致します。これを自分自身で、 https://www.isbn-international.org/"
"range_file_generation で探すことができます。このファイルは配布物の一部として"
"同梱されており、 _~lib/Business/ISBN/Data/RangeMessage.xml_ にインストールさ"
"れます。\n"
"\n"
"これとは異なる _RangeMessage.xml_ ファイルを利用したい場合は、 'Business::"
"ISBN' を読み込む前に 'ISBN_RANGE_MESSAGE' 環境変数に場所を指定してください。"
"この方法が用意されていることにより、このモジュール自身の更新を待ったり、イン"
"ストールしたりすることなく、最新の (もしくは古い) データを利用することができ"
"ます。\n"
"\n"
"既定の _RangeMessage.xml_ が存在せず、代替の場所にも見つからなかった場合は、 "
"_Data.pm_ 内にあるデータを使用します。しかしながら、このデータはより古いデー"
"タになってしまっています。また、カレントディレクトリ内の _RangeMessage.xml_ "
"も検索対象になっています。\n"
"\n"
"また、データは '%Business::ISBN::country_data' (\"country\" は歴史上の経緯で"
"設定されているものです) にあります。どこからのデータであるのかを知りたい場合"
"は、 '$Business::ISBN::country_data{_source}' をご確認ください。"

#. tumbleweed/perl-Business-ISSN/description
msgid ""
"* new($issn)\n"
"\n"
"The constructor accepts a scalar representing the ISSN.\n"
"\n"
"The string representing the ISSN may contain characters other than [0-9xX], "
"although these will be removed in the internal representation. The resulting "
"string must look like an ISSN - the first seven characters must be digits "
"and the eighth character must be a digit, 'x', or 'X'.\n"
"\n"
"The string passed as the ISSN need not be a valid ISSN as long as it "
"superficially looks like one. This allows one to use the 'fix_checksum' "
"method.\n"
"\n"
"One should check the validity of the ISSN with 'is_valid()' rather than "
"relying on the return value of the constructor.\n"
"\n"
"If all one wants to do is check the validity of an ISSN, one can skip the "
"object-oriented interface and use the c<is_valid_checksum()> function which "
"is exportable on demand.\n"
"\n"
"If the constructor decides it can't create an object, it returns undef. It "
"may do this if the string passed as the ISSN can't be munged to the internal "
"format. \n"
"* $obj->checksum\n"
"\n"
"Return the ISSN checksum. \n"
"* $obj->as_string\n"
"\n"
"Return the ISSN as a string.\n"
"\n"
"A terminating 'x' is changed to 'X'. \n"
"* $obj->is_valid\n"
"\n"
"Returns 1 if the checksum is valid.\n"
"\n"
"Returns 0 if the ISSN does not pass the checksum test. The constructor "
"accepts invalid ISSN's so that they might be fixed with 'fix_checksum'. \n"
"* $obj->fix_checksum\n"
"\n"
"Replace the eighth character with the checksum the corresponds to the "
"previous seven digits. This does not guarantee that the ISSN corresponds to "
"the product one thinks it does, or that the ISSN corresponds to any product "
"at all. It only produces a string that passes the checksum routine. If the "
"ISSN passed to the constructor was invalid, the error might have been in any "
"of the other nine positions."
msgstr ""
"* new($issn)\n"
"\n"
"  コンストラクタでは、 ISSN を表わすスカラ値を受け付けます。\n"
"\n"
"  ISSN を表わす文字列には [0-9xX] 以外の文字が含まれることがありますが、それ"
"らは国際表記では削除されます。また、 ISSN はそれとわかるように文字列を生成し"
"ます。最初の 7 桁はそれぞれ数字で、 8 桁目は数字もしくは 'x', 'X' のいずれか"
"でなければなりません。\n"
"\n"
"  ISSN に渡される文字列は、 ISSN であると判断できれば必ずしも正しい形式でなく"
"てもかまいません。この仕組みにより、 'fix_checksum' メソッドを利用することが"
"できます。\n"
"\n"
"  なお、 ISSN の値が正しいかどうかを判断したい場合は、コンストラクタに値を渡"
"すのではなく、 'is_valid()' で検証してください。\n"
"\n"
"  ISSN のチェックだけを行なう目的であれば、オブジェクト指向のインターフェイス"
"ではなく、 C<is_valid_checksum()> 関数を利用することもできます。こちらは必要"
"に応じて公開される関数です。\n"
"\n"
"コンストラクタがオブジェクトを作成できないと判断した場合は undef を返しま"
"す。 ISSN として渡した文字列が内部形式に変換できないような場合に発生しま"
"す。 \n"
"* $obj->checksum\n"
"\n"
"ISSN チェックサムを返します。\n"
"* $obj->as_string\n"
"\n"
"ISSN を文字列として返します。\n"
"\n"
"末尾の 'x' は 'X' に変更されます。\n"
"* $obj->is_valid\n"
"\n"
"チェックサムが正しい場合に 1 を返します。\n"
"\n"
"ISSN がチェックサムテストに合格しない場合は 0 を返します。コンストラクタ側で"
"は不正な ISSN も受け付ける仕様になっていますが、こちらは 'fix_checksum' で修"
"正することができます。\n"
"* $obj->fix_checksum\n"
"\n"
"直前の  7 文字分に対応する形で 8 文字目のチェックサム文字を生成して適用しま"
"す。ただし、 ISSN が想定通りの製品に結びつけられるかどうかは保証していません"
"し、逆にどの製品にも結びついていないことを保証するものでもありません。単純に"
"チェックサムルーチンに合格する文字列を生成するだけです。コンストラクタに対し"
"て渡された ISSN が正しくない場合は、そのエラーは他の 9 つの位置のいずれかに原"
"因があるかもしれません。"

#. tumbleweed/perl-CLI-Osprey/summary
msgid "MooX::Options + MooX::Cmd + Sanity"
msgstr "MooX::Options + MooX::Cmd + Sanity"

#. tumbleweed/perl-CLI-Osprey/description
msgid ""
"CLI::Osprey is a module to assist in writing commandline applications with "
"M* OO modules (Moose, Moo, Mo). With it, you structure your app as one or "
"more modules, which get instantiated with the commandline arguments as "
"attributes. Arguments are parsed using Getopt::Long::Descriptive, and both "
"long and short help messages as well as complete manual pages are "
"automatically generated. An app can be a single command with options, or "
"have sub-commands (like 'git'). Sub-commands can be defined as modules (with "
"options of their own) or as simple coderefs."
msgstr ""
"CLI::Ospreyは、M*OOモジュール(Moose、Moo、Mo)でコマンドラインアプリケーションを作成するのを支援するモジュールです。これにより、"
"アプリケーションは1つ以上のモジュールとして構成され、属性としてコマンドライン引数を使用してインスタンス化されます。引数はGetopt::Long::De"
"scriptiveを使用して解析され、長いヘルプメッセージと短いヘルプメッセージ、および完全なマニュアルページが自動的に生成されます。アプリはオプション付"
"きの単一コマンドにすることも、('git'のような)サブコマンドを持つこともできます。サブコマンドは、モジュール(独自のオプション付き)として定義すること"
"も、単純なcoderefsとして定義することもできます。"

#. tumbleweed/perl-CPAN-Common-Index/summary
msgid "Common library for searching CPAN modules, authors and distributions"
msgstr "CPAN モジュールとその作者、配布物を検索するための汎用ライブラリ"

#. tumbleweed/perl-CPAN-Common-Index/description
msgid ""
"This module provides a common library for working with a variety of CPAN "
"index services. It is intentionally minimalist, trying to use as few non-"
"core modules as possible.\n"
"\n"
"The 'CPAN::Common::Index' module is an abstract base class that defines a "
"common API. Individual backends deliver the API for a particular index.\n"
"\n"
"As shown in the SYNOPSIS, one interesting application is multiplexing -- "
"using different index backends, querying each in turn, and returning the "
"first result."
msgstr ""
"このモジュールは様々な CPAN インデックスサービスを取り扱うための汎用ライブラ"
"リを提供します。最小限の機能に絞って作られていて、できる限り少ない種類のコア"
"モジュールのみを使用しています。\n"
"\n"
"'CPAN::Common::Index' モジュールは抽象クラスで、汎用的な API を提供していま"
"す。個別のバックエンドがそれぞれのインデックスを表わしています。\n"
"\n"
"SYNOPSIS にも書かれていますが、とある興味深い使い方として、多重化があります。"
"異なるインデックスバックエンドを使用し、最初に届いた結果を返します。"

#. tumbleweed/perl-CSS-Minifier-XS/description
msgid ""
"'CSS::Minifier::XS' is a CSS \"minifier\"; its designed to remove "
"unnecessary whitespace and comments from CSS files, while also *not* "
"breaking the CSS.\n"
"\n"
"'CSS::Minifier::XS' is similar in function to 'CSS::Minifier', but is "
"substantially faster as its written in XS and not just pure Perl."
msgstr ""
"'CSS::Minifier::XS'はCSSの「minifier」であり、CSSファイルから不要な空白やコメントを削除すると同時に、CSSを「壊す」こと"
"がないように設計されています。\n"
"\n"
"'CSS::Minifier::XS' "
"は、機能的には'CSS::Minifier'と似ていますが、純粋なPerlだけでなく、XSで記述されているように、かなり高速です。"

#. tumbleweed/perl-Canary-Stability/summary
msgid "Canary to check perl compatibility for schmorp's modules"
msgstr "Schmorp 氏のモジュール向け Perl 互換性チェックモジュール"

#. tumbleweed/perl-Carp-Clan/description
msgid ""
"This module is based on \"'Carp.pm'\" from Perl 5.005_03. It has been "
"modified to skip all package names matching the pattern given in the \"use\" "
"statement inside the \"'qw()'\" term (or argument list).\n"
"\n"
"Suppose you have a family of modules or classes named \"Pack::A\", \"Pack::B"
"\" and so on, and each of them uses \"'Carp::Clan qw(^Pack::);'\" (or at "
"least the one in which the error or warning gets raised).\n"
"\n"
"Thus when for example your script \"tool.pl\" calls module \"Pack::A\", and "
"module \"Pack::A\" calls module \"Pack::B\", an exception raised in module "
"\"Pack::B\" will appear to have originated in \"tool.pl\" where \"Pack::A\" "
"was called, and not in \"Pack::A\" where \"Pack::B\" was called, as the "
"unmodified \"'Carp.pm'\" would try to make you believe ':-)'.\n"
"\n"
"This works similarly if \"Pack::B\" calls \"Pack::C\" where the exception is "
"raised, et cetera.\n"
"\n"
"In other words, this blames all errors in the \"'Pack::*'\" modules on the "
"user of these modules, i.e., on you. ';-)'\n"
"\n"
"The skipping of a clan (or family) of packages according to a pattern "
"describing its members is necessary in cases where these modules are not "
"classes derived from each other (and thus when examining '@ISA' - as in the "
"original \"'Carp.pm'\" module - doesn't help).\n"
"\n"
"The purpose and advantage of this is that a \"clan\" of modules can work "
"together (and call each other) and throw exceptions at various depths down "
"the calling hierarchy and still appear as a monolithic block (as though they "
"were a single module) from the perspective of the caller.\n"
"\n"
"In case you just want to ward off all error messages from the module in "
"which you \"'use Carp::Clan'\", i.e., if you want to make all error messages "
"or warnings to appear to originate from where your module was called (this "
"is what you usually used to \"'use Carp;'\" for ';-)'), instead of in your "
"module itself (which is what you can do with a \"die\" or \"warn\" anyway), "
"you do not need to provide a pattern, the module will automatically provide "
"the correct one for you.\n"
"\n"
"I.e., just \"'use Carp::Clan;'\" without any arguments and call \"carp\" or "
"\"croak\" as appropriate, and they will automatically defend your module "
"against all blames!\n"
"\n"
"In other words, a pattern is only necessary if you want to make several "
"modules (more than one) work together and appear as though they were only "
"one."
msgstr ""
"このモジュールは Perl 5.005_03 における \"'Carp.pm'\" をベースにしたモジュー"
"ルです。 \"use\" ステートメント内の \"'qw()'\" 句 (またはパラメータリスト) "
"で、パターンに該当するすべてのパッケージを飛ばす (スキップする) ように修正さ"
"れています。\n"
"\n"
"たとえば \"Pack::A\", \"Pack::B\" 等のモジュールやクラスがあるものと仮定する"
"と、それらのそれぞれで \"'Carp::Clan qw(^Pack::);'\" を使用している場合があり"
"ます (もしくは、それらのうちのいずれかでエラーや例外が発生した場合を想定しま"
"す) 。\n"
"\n"
"このとき、たとえば \"tool.pl\" というスクリプトが \"Pack::A\" モジュールを呼"
"び出し、 \"Pack::A\" が \"Pack::B\" を呼び出しているとすると、未修正の "
"\"'Carp.pm'\" では、 \"Pack::B\" 内で発生した例外は、 \"tool.pl\" 内の "
"\"Pack::A\" が呼び出された箇所を示す形になり、 \"Pack::B\" を呼び出していた "
"\"Pack::A\" を示すことはありません。\n"
"\n"
"これはたとえば、 \"Pack::B\" が \"Pack::C\" を呼び出していて、その中で例外が"
"発生したなどの場合も同様になります。\n"
"\n"
"これは、言い換えれば \"'Pack::*'\" モジュール内で発生したすべてのエラーが "
"\"tool.pl\" のエラー (つまりあなたの間違い) として報告されることになりま"
"す。\n"
"\n"
"パターンを指定して、パッケージ内の該当する箇所 (またはファミリ) を飛ばすこと"
"は、これらのモジュールが互いに派生関係にない場合に必要となります (そしてこの"
"理由から、(元々の \"'Carp.pm'\" にあるような) '@ISA' を解釈してしまっては解決"
"しません) 。\n"
"\n"
"このモジュールの目的とメリットは、互いにうまく動作するような \"集合\" である"
"ことにあり、様々な場所で例外が発生した場合でも呼び出しの階層構造を表示し、一"
"枚岩のブロックとして見える (それらが単一のモジュールであるかのように) ことを"
"目指しています。\n"
"\n"
"\"'use Carp::Clan'\" を設定していて、単純に特定のモジュール内で発生したすべて"
"のエラーメッセージについて、これらをすべて受け流すようにしたい場合、つまりエ"
"ラーメッセージや警告メッセージ (\"die\" または \"warn\") で表示される場所が、"
"モジュールを呼び出した場所ではなく実際に発生した場所であって欲しい場合 (通常"
"は \"'use Carp;'\" を使用しますが) は、パターンを設定する必要はなく、モジュー"
"ルは自動的に正しい情報を提供します。\n"
"\n"
"これは何もパラメータを指定せずに \"'use Carp::Clan;'\" だけを使用し、 \"carp"
"\" や\"croak\" を適切に使用していれば、警告やエラーのメッセージは自動的に元の"
"場所を示すようになるということです。\n"
"\n"
"これをさらに言い換えれば、パターンは特定のモジュールだけに対して動作させたい"
"場合にのみ指定するものであると言えます。"

#. tumbleweed/perl-Class-Data-Inheritable/description
msgid ""
"Class::Data::Inheritable is for creating accessor/mutators to class data. "
"That is, if you want to store something about your class as a whole (instead "
"of about a single object). This data is then inherited by your subclasses "
"and can be overridden.\n"
"\n"
"For example:\n"
"\n"
"  Pere::Ubu->mk_classdata('Suitcase');\n"
"\n"
"will generate the method Suitcase() in the class Pere::Ubu.\n"
"\n"
"This new method can be used to get and set a piece of class data.\n"
"\n"
"  Pere::Ubu->Suitcase('Red');   $suitcase = Pere::Ubu->Suitcase;\n"
"\n"
"The interesting part happens when a class inherits from Pere::Ubu:\n"
"\n"
"  package Raygun;   use base qw(Pere::Ubu);\n"
"\n"
"     $suitcase = Raygun->Suitcase;\n"
"\n"
"Raygun inherits its Suitcase class data from Pere::Ubu.\n"
"\n"
"Inheritance of class data works analogous to method inheritance. As long as "
"Raygun does not \"override\" its inherited class data (by using Suitcase() "
"to set a new value) it will continue to use whatever is set in Pere::Ubu and "
"inherit further changes:\n"
"\n"
"     Pere::Ubu->Suitcase('Blue');\n"
"\n"
"However, should Raygun decide to set its own Suitcase() it has now "
"\"overridden\" Pere::Ubu and is on its own, just like if it had overridden a "
"method:\n"
"\n"
"     Raygun->Suitcase('Orange');\n"
"\n"
"Now that Raygun has overridden Pere::Ubu further changes by Pere::Ubu no "
"longer effect Raygun.\n"
"\n"
"     Pere::Ubu->Suitcase('Samsonite');"
msgstr ""
"Class::Data::Inheritable はクラスデータに対するアクセサやミューテータを作成す"
"ることができるモジュールです。つまり、 (専用のオブジェクトを作成するのではな"
"く) クラス内に情報を保存したい場合に使用します。このデータはサブクラスで継承"
"したりオーバーライドしたりすることもできます。\n"
"\n"
"例:\n"
"\n"
"  Pere::Ubu->mk_classdata('Suitcase');\n"
"\n"
"は Suitcase() というメソッドを Pere::Ubu 内に作成します。\n"
"\n"
"この新しいメソッドは、クラス内のデータ断片を取り出したり設定したりするのに使"
"用します。\n"
"\n"
"  Pere::Ubu->Suitcase('Red');   $suitcase = Pere::Ubu->Suitcase;\n"
"\n"
"Pere::Ubu からクラスを継承すると、興味深いことが起きます:\n"
"\n"
"  package Raygun;   use base qw(Pere::Ubu);\n"
"\n"
"     $suitcase = Raygun->Suitcase;\n"
"\n"
"Raygun は Pere:Ubu のクラスデータである Suitcase を継承します。\n"
"\n"
"クラスデータの継承はメソッドの継承に似た仕組みで、 Raygun 側でクラスデータを"
"\"オーバーライド\" しない限り (Suitcase() に対して新しい値を設定しない限"
"り) 、Pere::Ubu に設定された内容やその後の変更を継承します:\n"
"\n"
"     Pere::Ubu->Suitcase('Blue');\n"
"\n"
"しかしながら、 Raygun 側で独自の Suitcase() を設定する必要が発生した場合、"
"Pere::Ubu のものを \"オーバーライド\" することができます:\n"
"\n"
"     Raygun->Suitcase('Orange');\n"
"\n"
"これで Raygun は Pere::Ubu のものをオーバーライドすることになります。今後の"
"Pere::Ubu に対する変更は、 Raygun 側には影響しなくなります。\n"
"\n"
"     Pere::Ubu->Suitcase('Samsonite');"

#. tumbleweed/perl-Class-Method-Modifiers/description
msgid ""
"Method modifiers are a convenient feature from the CLOS (Common Lisp Object "
"System) world.\n"
"\n"
"In its most basic form, a method modifier is just a method that calls '$self-"
">SUPER::foo(@_)'. I for one have trouble remembering that exact invocation, "
"so my classes seldom re-dispatch to their base classes. Very bad!\n"
"\n"
"'Class::Method::Modifiers' provides three modifiers: 'before', 'around', and "
"'after'. 'before' and 'after' are run just before and after the method they "
"modify, but can not really affect that original method. 'around' is run in "
"place of the original method, with a hook to easily call that original "
"method. See the MODIFIERS section for more details on how the particular "
"modifiers work.\n"
"\n"
"One clear benefit of using 'Class::Method::Modifiers' is that you can define "
"multiple modifiers in a single namespace. These separate modifiers don't "
"need to know about each other. This makes top-down design easy. Have a base "
"class that provides the skeleton methods of each operation, and have plugins "
"modify those methods to flesh out the specifics.\n"
"\n"
"Parent classes need not know about 'Class::Method::Modifiers'. This means "
"you should be able to modify methods in _any_ subclass. See Term::VT102::"
"ZeroBased for an example of subclassing with 'Class::Method::Modifiers'.\n"
"\n"
"In short, 'Class::Method::Modifiers' solves the problem of making sure you "
"call '$self->SUPER::foo(@_)', and provides a cleaner interface for it.\n"
"\n"
"As of version 1.00, 'Class::Method::Modifiers' is faster in some cases than "
"Moose. See _benchmark/method_modifiers.pl_ in the Moose distribution.\n"
"\n"
"'Class::Method::Modifiers' also provides an additional \"modifier\" type, "
"'fresh'; see below."
msgstr ""
"メソッドの修飾子は CLOS (Common Lisp Object System) の世界では便利な機能で"
"す。\n"
"\n"
"もっとも基本的な形式では、メソッドの修飾子は '$self->SUPER::foo(@_)' を呼び出"
"すだけのメソッドです。私は以前、そのような呼び出しの問題に頭を抱えていました"
"が、これはクラス側でベースクラスに対して再発信を行なっていたためです。非常に"
"よろしくありません。\n"
"\n"
"'Class::Method::Modifiers' は 'before', 'around', 'after' の 3 種類の修飾子を"
"提供します。 'before' と 'after' は単純に対象のメソッドの呼び出し前後に実行さ"
"れる仕組みで、実際のメソッドの実行には影響がありません。 'around' は元のメ"
"ソッドに立ち替わって実行されるもので、フックのようにして元のメソッドから呼び"
"出されます。それぞれの修飾子がどのように動作するのかについて、詳しくは "
"'MODIFIERS' セクションをお読みください。\n"
"\n"
"'Class::Method::Modifiers' を使用するにあたって、明らかな利点としてあげられる"
"のは、単一のネームスペース内で複数の修飾子を設定できることです。それぞれの修"
"飾はお互いを知っておく必要がありません。このような仕組みにより、トップダウン"
"型の設計を簡単に作成することができます。各動作のメソッドに対してスケルトンク"
"ラスを提供するベースクラスがあれば、プラグイン側で各メソッドの実際の動作を記"
"述することができます。\n"
"\n"
"また、親クラス側でも 'Class::Method::Modifiers' を知る必要はありません。これ"
"により、どのようなサブクラス内のメソッドをも修正することができることになりま"
"す。 'Class::Method::Modifiers' を利用したサブクラスの使用例について、詳しく"
"は Term::VT102::ZeroBased をお読みください。\n"
"\n"
"簡単に言うと、 'Class::Method::Modifiers' は '$self->SUPER::foo(@_)' を確実に"
"呼び出さなければならない問題を解決するもので、よりクリーンなインターフェイス"
"を提供します。\n"
"\n"
"バージョン 1.00 では、場合によっては Moose に比べて 'Class::Method::"
"Modifiers' がより高速に動作するようになりました。 Moose 配布物内の "
"'benchmark/method_modifiers.pl' をご覧ください。\n"
"\n"
"また、 'Class::Method::Modifiers' では追加の \"修飾子\" タイプである 'fresh' "
"にも対応しています。詳しくは下記をお読みください。"

#. tumbleweed/perl-Clone/description
msgid ""
"This module provides a 'clone()' method which makes recursive copies of "
"nested hash, array, scalar and reference types, including tied variables and "
"objects.\n"
"\n"
"'clone()' takes a scalar argument and duplicates it. To duplicate lists, "
"arrays or hashes, pass them in by reference, e.g.\n"
"\n"
"    my $copy = clone (\\@array);\n"
"\n"
"    \n"
"\n"
"    my %copy = %{ clone (\\%hash) };"
msgstr ""
"このモジュールは「clone()」メソッドを提供しており、結合された変数やオブジェクトを含む、ネストされたハッシュ、配列、スカラー、参照型の再帰的コピーを"
"作成します。\n"
"\n"
"'clone()'はスカラ引数を取り、それを複製します。リスト、配列、ハッシュを複製するには、それらを参照して渡します。たとえば、\n"
"\n"
"    my $copy = clone (\\@array);\n"
"\n"
"    \n"
"\n"
"    my %copy = %{ clone (\\%hash) };"

#. tumbleweed/perl-Clone-PP/description
msgid ""
"This module provides a general-purpose clone function to make deep copies of "
"Perl data structures. It calls itself recursively to copy nested hash, "
"array, scalar and reference types, including tied variables and objects.\n"
"\n"
"The clone() function takes a scalar argument to copy. To duplicate arrays or "
"hashes, pass them in by reference:\n"
"\n"
"  my $copy = clone(\\@array);    my @copy = @{ clone(\\@array) };   my $copy "
"= clone(\\%hash);     my %copy = %{ clone(\\%hash) };\n"
"\n"
"The clone() function also accepts an optional second parameter that can be "
"used to limit the depth of the copy. If you pass a limit of 0, clone will "
"return the same value you supplied; for a limit of 1, a shallow copy is "
"constructed; for a limit of 2, two layers of copying are done, and so on.\n"
"\n"
"  my $shallow_copy = clone( $item, 1 );\n"
"\n"
"To allow objects to intervene in the way they are copied, the clone() "
"function checks for a couple of optional methods. If an object provides a "
"method named 'clone_self', it is called and the result returned without "
"further processing. Alternately, if an object provides a method named "
"'clone_init', it is called on the copied object before it is returned."
msgstr ""
"このモジュールは、Perlデータ構造のディープコピーを作成するための汎用クローン関数を提供します。それ自体を再帰的に呼び出して、ネストされたハッシュ、配列"
"、スカラー、参照型(結合された変数やオブジェクトを含む)をコピーします。\n"
"\n"
"clone()関数は、コピーするスカラ引数を取ります。配列またはハッシュを複製するには、それらを参照渡しします。\n"
"\n"
"  my $copy = clone(\\@array);    my @copy = @{ clone(\\@array) };   my $copy "
"= clone(\\%hash);     my %copy = %{ clone(\\%hash) };\n"
"\n"
"clone()関数は、コピーの深さを制限するために使用できるオプションの2番目のパラメータも受け付けます。制限値0を超えた場合、クローンは指定した値と同じ"
"値を返します。制限値1の場合は、浅いコピーが作成されます。制限値2の場合は、2つのレイヤーのコピーが作成されます。以下同様です。\n"
"\n"
"  my $shallow_copy = clone($item,1);\n"
"\n"
"オブジェクトがコピーされる方法で介入できるように、clone()関数はいくつかのオプションメソッドをチェックします。オブジェクトが「clone_self」"
"という名前のメソッドを提供している場合、そのオブジェクトが呼び出され、それ以上の処理を行わずに結果が返されます。あるいは、オブジェクトが「clone_in"
"it」という名前のメソッドを提供している場合、コピーされたオブジェクトに対して呼び出されてから返されます。"

#. tumbleweed/perl-Config-AutoConf/summary
msgid "Module to implement some of AutoConf macros in pure perl"
msgstr "純粋な Perl 内で AutoConf のマクロのうちのいくつかを実装するモジュール"

#. tumbleweed/perl-Config-Grammar/summary
msgid "Grammar-based, user-friendly config parser"
msgstr "文法ベースでユーザにわかりやすい設定パーサ"

#. tumbleweed/perl-Config-INI-Reader-Ordered/summary
msgid ".ini-file parser that returns sections in order"
msgstr "セクションを順序通りに返す .ini ファイルパーサー"

#. tumbleweed/perl-Config-INI-Reader-Ordered/description
msgid ""
"Config::INI::Reader::Ordered is a subclass of Config::INI::Reader which "
"preserves section order. See Config::INI::Reader for all documentation; the "
"only difference is as presented in the SYNOPSIS."
msgstr ""
"Config::INI::Reader::Ordered は Config::INI::Reader のサブクラスで、セクショ"
"ンの出現順序を保持する機能を追加します。全てのドキュメンテーションを読むに"
"は、 Config::INI::Reader をお読みください。違いは SYNOPSIS 内に示されていま"
"す。"

#. tumbleweed/perl-Config-Identity/summary
msgid "Load (and optionally decrypt via GnuPG) user/pass identity information"
msgstr "ユーザー/パスのID情報を読み込む(オプションでGnuPGを使って復号化する)"

#. tumbleweed/perl-Config-Identity/description
msgid ""
"Config::Identity is a tool for loading (and optionally decrypting via GnuPG) "
"user/pass identity information\n"
"\n"
"For GitHub API access, an identity is a 'login'/'token' pair\n"
"\n"
"For PAUSE access, an identity is a 'user'/'password' pair"
msgstr ""
"Config::Identityは、ユーザー/パスのID情報をロード(およびオプションでGnuPGを介"
"して復号化)するためのツールです。\n"
"GitHub APIアクセスの場合、IDは'login'と'token'のペアです。\n"
"PAUSEアクセスの場合、IDは「user」と「password」のペアです。"

#. tumbleweed/perl-Config-IniFiles/summary
msgid "Module for reading .ini-style configuration files"
msgstr "ini 形式の設定ファイルを読み込むためのモジュール"

#. tumbleweed/perl-Convert-ASN1/summary
msgid "ASN.1 Encode/Decode library"
msgstr "ASN.1 エンコード／デコードライブラリ"

#. tumbleweed/perl-Convert-UUlib/summary
msgid ""
"Decode uu/xx/b64/mime/yenc/etc-encoded data from a massive number of files"
msgstr ""
"大量のファイルから uu/xx/b64/mime/yenc/etc でエンコードされたファイルをデコー"
"ドするモジュール"

#. tumbleweed/perl-Convert-UUlib/description
msgid ""
"This module started as an interface to the uulib/uudeview library by Frank "
"Pilhofer that can be used to decode all kinds of usenet (and other) binary "
"messages.\n"
"\n"
"After upstream abondoned the project, th library was continuously bugfixed "
"and improved in this module, with major focuses on security fixes, "
"correctness and speed (that does not mean that this library is considered "
"safe with untrusted data, but it surely is safer than the poriginal "
"uudeview).\n"
"\n"
"Read the file doc/library.pdf from the distribution for in-depth information "
"about the C-library used in this interface, and the rest of this document "
"and especially the non-trivial decoder program at the end."
msgstr ""
"このモジュールは Frank Pilhofer 氏が開発した、 usenet (およびその他のリソー"
"ス) で提供されるバイナリメッセージをデコードするライブラリである、 uulib/"
"uudeview ライブラリに対するインターフェイスとして開発が開始されました。\n"
"\n"
"当初の提供元が開発を断念したのち、このモジュールは継続的にバグ修正と改善が行"
"なわれてきました。特にセキュリティ面の修正と速度に関する修正が中心となってい"
"ます (ただし、信頼のできないデータをデコードする目的では開発されていません。"
"オリジナルの uudeview よりは安全であることは間違いないのですが・・) 。\n"
"\n"
"このインターフェイス内で使用されている C 言語ライブラリについて深い情報を知る"
"には、配布物に含まれる doc/library.pdf ファイルをお読みください。また、本文書"
"の残りの部分や一般的ではないデコーダプログラムについては、末尾に説明がありま"
"す。"

#. tumbleweed/perl-Crypt-CBC/description
msgid ""
"This module is a Perl-only implementation of the cryptographic cipher block "
"chaining mode (CBC). In combination with a block cipher such as AES or "
"Blowfish, you can encrypt and decrypt messages of arbitrarily long length. "
"The encrypted messages are compatible with the encryption format used by the "
"*OpenSSL* package.\n"
"\n"
"To use this module, you will first create a Crypt::CBC cipher object with "
"new(). At the time of cipher creation, you specify an encryption key to use "
"and, optionally, a block encryption algorithm. You will then call the "
"start() method to initialize the encryption or decryption process, crypt() "
"to encrypt or decrypt one or more blocks of data, and lastly finish(), to "
"pad and encrypt the final block. For your convenience, you can call the "
"encrypt() and decrypt() methods to operate on a whole data value at once."
msgstr ""
"このモジュールは、暗号化cipher block chaining mode(CBC;ブロック連鎖モード)のPerl専用の実装です。AESやBlowfis"
"hなどのブロック暗号と組み合わせることで、任意の長さのメッセージを暗号化および復号化できます。暗号化されたメッセージは、*OpenSSL* "
"パッケージで使用される暗号化形式と互換性があります。\n"
"\n"
"このモジュールを使うには、まずnew()を使ってCrypt::CBC暗号オブジェクトを作成します。暗号の作成時に、使用する暗号キーを指定します。オプション"
"で、ブロック暗号化アルゴリズムも指定できます。次に、start()メソッドを呼び出して暗号化または復号化プロセスを初期化し、crypt()を呼び出して1つ"
"以上のデータ・ブロックを暗号化または復号化し、最後にfinish()を呼び出して最終ブロックをパディングおよび暗号化します。データ値全体を一度に操作するた"
"めに、encrypt()メソッドとdecrypt()メソッドを呼び出すことができます。"

#. tumbleweed/perl-Crypt-JWT/summary
msgid "JSON Web Token (JWT, JWS, JWE) as defined by RFC7519, RFC7515, RFC7516"
msgstr ""
"RFC7519, RFC7515, RFC7516 で定義されている JSON Web トークン (JWT, JWS, JWE)"

#. tumbleweed/perl-Crypt-JWT/description
msgid ""
"Implements *JSON Web Token (JWT)* - https://tools.ietf.org/html/rfc7519. The "
"implementation covers not only *JSON Web Signature (JWS)* - https://tools."
"ietf.org/html/rfc7515, but also *JSON Web Encryption (JWE)* - https://tools."
"ietf.org/html/rfc7516.\n"
"\n"
"The module implements *all (100%) algorithms* defined in https://tools.ietf."
"org/html/rfc7518 - *JSON Web Algorithms (JWA)*.\n"
"\n"
"This module supports *Compact JWS/JWE* and *Flattened JWS/JWE JSON* "
"serialization, general JSON serialization is not supported yet."
msgstr ""
"*JSON Web Token (JWT)* - https://tools.ietf.org/html/rfc7519 の実装です。実装"
"は JSON Web Signature (JWS)* - https://tools.ietf.org/html/rfc7515 だけでな"
"く、 *JSON Web Encryption (JWE)* - https://tools.ietf.org/html/rfc7516 も含ま"
"れています。\n"
"\n"
"このモジュールは *JSON Web Algorithms (JWA)* - https://tools.ietf.org/html/"
"rfc7518 で知れ冷めている *全て (100%) のアルゴリズム* が含まれています。\n"
"\n"
"このモジュールは *Compact JWS/JWE* および *Flattened JWS/JWE JSON* の各シリア"
"ライズが含まれていますが、一般的な JSON シリアライズはまだサポートされていま"
"せん。"

#. tumbleweed/perl-Crypt-OpenSSL-RSA/description
msgid ""
"'Crypt::OpenSSL::RSA' provides the ability to RSA encrypt strings which are "
"somewhat shorter than the block size of a key. It also allows for "
"decryption, signatures and signature verification.\n"
"\n"
"_NOTE_: Many of the methods in this package can croak, so use 'eval', or "
"Error.pm's try/catch mechanism to capture errors. Also, while some methods "
"from earlier versions of this package return true on success, this (never "
"documented) behavior is no longer the case."
msgstr ""
"'Crypt::OpenSSL::RSA' は鍵のブロックサイズより幾分小さい RSA 暗号化文字列を生"
"成する機能を提供します。復号化や署名、署名の検証にも対応しています。\n"
"\n"
"_注意_: このパッケージ内の多数のメソッドでは croak を使用しているため、 "
"'eval' は Error.pm の try/catch 機構を使用することができます。また、このパッ"
"ケージの従来のバージョンでは、成功時に true を返していましたが、このような動"
"作はしなくなっています。"

#. tumbleweed/perl-Crypt-OpenSSL-Random/summary
msgid "OpenSSL/LibreSSL pseudo-random number generator access"
msgstr "OpenSSL/LibreSSL 疑似乱数生成器へのアクセス"

#. tumbleweed/perl-Crypt-OpenSSL-Random/description
msgid ""
"'Crypt::OpenSSL::Random' provides the ability to seed and query the\n"
"*OpenSSL* and *LibreSSL* library's pseudo-random number generators.\n"
"\n"
"Note: On *LibreSSL* 'random_egd()' is not defined."
msgstr ""
"'Crypt::OpenSSL::Random' は *OpenSSL* ライブラリおよび *LibreSSL* ライブラリ"
"にある\n"
"擬似乱数生成機能を利用し、乱数のシード設定と問い合わせを行なう機能を提供しま"
"す。\n"
"\n"
"注意: *LibreSSL* では 'random_egd()' は未定義です。"

#. tumbleweed/perl-Crypt-PBKDF2/summary
msgid "The PBKDF2 password hashing algorithm"
msgstr "PBKDF2パスワードハッシュアルゴリズム"

#. tumbleweed/perl-Crypt-PBKDF2/description
msgid ""
"PBKDF2 is a secure password hashing algorithm that uses the techniques of "
"\"key strengthening\" to make the complexity of a brute-force attack "
"arbitrarily high. PBKDF2 uses any other cryptographic hash or cipher (by "
"convention, usually HMAC-SHA1, but 'Crypt::PBKDF2' is fully pluggable), and "
"allows for an arbitrary number of iterations of the hashing function, and a "
"nearly unlimited output hash size (up to 2**32 - 1 times the size of the "
"output of the backend hash). The hash is salted, as any password hash should "
"be, and the salt may also be of arbitrary size."
msgstr ""
"PBKDF2は安全なパスワードハッシュアルゴリズムであり、「鍵強化」の技術を使用して、ブルートフォース攻撃の複雑さを任意に高くします。PBKDF2は、他の"
"任意の暗号ハッシュまたは暗号を使用し(慣例により、通常はHMAC-SHA1であるが、'Crypt::PBKDF2'は完全にプラグ可能である)、ハッシュ関数"
"の任意の回数の反復と、ほぼ無制限の出力ハッシュサイズ(バックエンドハッシュの出力サイズの2**32-1倍まで)を可能にします。このハッシュは、他のパスワー"
"ドハッシュと同じようにソルト処理されます。また、ソルトのサイズも任意です。"

#. tumbleweed/perl-Crypt-Rijndael/description
msgid ""
"This module implements the Rijndael cipher, which has just been selected as "
"the Advanced Encryption Standard. \n"
"* keysize\n"
"\n"
"Returns the keysize, which is 32 (bytes). The Rijndael cipher actually "
"supports keylengths of 16, 24 or 32 bytes, but there is no way to "
"communicate this to 'Crypt::CBC'. \n"
"* blocksize\n"
"\n"
"The blocksize for Rijndael is 16 bytes (128 bits), although the algorithm "
"actually supports any blocksize that is any multiple of our bytes. 128 bits, "
"is however, the AES-specified block size, so this is all we support. \n"
"* $cipher = Crypt::Rijndael->new( $key [, $mode] )\n"
"\n"
"Create a new 'Crypt::Rijndael' cipher object with the given key (which must "
"be 128, 192 or 256 bits long). The additional '$mode' argument is the "
"encryption mode, either 'MODE_ECB' (electronic codebook mode, the default), "
"'MODE_CBC' (cipher block chaining, the same that 'Crypt::CBC' does), "
"'MODE_CFB' (128-bit cipher feedback), 'MODE_OFB' (128-bit output feedback), "
"or 'MODE_CTR' (counter mode).\n"
"\n"
"ECB mode is very insecure (read a book on cryptography if you don't know "
"why!), so you should probably use CBC mode. \n"
"* $cipher->set_iv($iv)\n"
"\n"
"This allows you to change the initial value vector used by the chaining "
"modes. It is not relevant for ECB mode. \n"
"* $cipher->encrypt($data)\n"
"\n"
"Encrypt data. The size of '$data' must be a multiple of 'blocksize' (16 "
"bytes), otherwise this function will croak. Apart from that, it can be of "
"(almost) any length. \n"
"* $cipher->decrypt($data)\n"
"\n"
"Decrypts '$data'."
msgstr ""
"このモジュールは Advanced Encryption Standard に選択された Rijndael 暗号を実"
"装しています。\n"
"* 鍵のサイズについて\n"
"\n"
"  鍵のサイズは 32 (バイト) です。 Rijndael 暗号では 16, 24, 32 バイトの鍵に対"
"応していますが、 'Crypt::CBC' にそのような機能はありません。\n"
"* ブロックサイズについて\n"
"\n"
"  Rijndael におけるブロックサイズは 16 バイト (128 ビット) です。本来のアルゴ"
"リズムでは任意のバイトサイズに対応しているはずですが、 AES ではブロックサイズ"
"を規定しているため、本モジュールでもそのように設定しています。\n"
"* $cipher = Crypt::Rijndael->new( $key [, $mode] )\n"
"\n"
"  指定した鍵 (128, 192, 256 ビットの長さ) で新しい 'Crypt::Rijndael' 暗号オブ"
"ジェクトを作成します。追加の '$mode' パラメータは暗号モードの指定"
"で、'MODE_ECB' (電子コードブックモード; 既定値), 'MODE_CBC' (暗号ブロック連"
"鎖; 'Crypt::CBC' と同じ動作) 'MODE_CFB' (128 ビット暗号フィードバック), "
"'MODE_OFB' (128 ビット出力フィードバック), 'MODE_CTR' (カウンタモード) のいず"
"れかを指定します。\n"
"\n"
"  ECB モードは非常に危険な仕組み (詳しく知りたい場合は、暗号化に関する書籍を"
"お読みください！) であり、通常は CBC モードを指定します。\n"
"* $cipher->set_iv($iv)\n"
"\n"
"  上記は、連鎖モードで使用される初期値ベクトルを変更します。 ECB モードの場合"
"は無関係です。\n"
"* $cipher->encrypt($data)\n"
"\n"
"  データを暗号化します。 '$data' のサイズは 'ブロックサイズ' (16 バイト) の整"
"数倍でなければならず、そうでない場合は croak で警告が表示されます。ただし、警"
"告が表示されるものの、 (ほぼ) 任意の長さを指定することができます。\n"
"* $cipher->decrypt($data)\n"
"\n"
"  '$data' の暗号を解読します。"

#. tumbleweed/perl-DBD-MariaDB/summary
msgid "MariaDB and MySQL driver for the Perl5 Database Interface (DBI)"
msgstr ""
"Perl5 データベースインターフェイス (DBI) 向け MariaDB および MySQL ドライバ"

#. tumbleweed/perl-DBD-MariaDB/description
msgid ""
"*DBD::MariaDB* is the Perl5 Database Interface driver for MariaDB and MySQL "
"databases. In other words: DBD::MariaDB is an interface between the Perl "
"programming language and the MariaDB/MySQL programming API that comes with "
"the MariaDB/MySQL relational database management system. Most functions "
"provided by this programming API are supported. Some rarely used functions "
"are missing, mainly because no-one ever requested them."
msgstr ""
"*DBD::MariaDB* は、 MariaDB および MySQL データベース向けの Perl5 データベー"
"スインターフェイスドライバです。言い換えれば、 DBD::MariaDB は Perl プログラ"
"ミング言語と MariaDB/MySQL リレーショナルデータベース管理システムのプログラミ"
"ング API の間に立って、仲介を行なうインターフェイスです。 MariaDB/MySQL 側の "
"API で提供されているほとんどの機能に対応してますが、ごく少数の未対応機能があ"
"ります。これは主に必要とする人がいなかったことによるものです。"

#. tumbleweed/perl-DBICx-Sugar/summary
msgid "Just some syntax sugar for DBIx::Class"
msgstr "DBIx::Class 向け Just some syntax sugar"

#. tumbleweed/perl-DBICx-Sugar/description
msgid ""
"Just some syntax sugar for your DBIx::Class applications. This was "
"originally created to remove code duplication between Dancer::Plugin::DBIC "
"and Dancer2::Plugin::DBIC."
msgstr ""
"DBIx::Class のアプリケーションに対する文法シュガーです。これは元々 Dancer::"
"Plugin::DBIC と Dancer2::Plugin::DBIC の両方にあるコードの重複を削除するため"
"に作られたものでした。"

#. tumbleweed/perl-DBIx-Class-Migration/summary
msgid "Use the best tools together for sane database migrations"
msgstr "適切なデータベース移行を行なうための最適なツールの使用"

#. tumbleweed/perl-DBIx-Class-Migration/description
msgid ""
"DBIx::Class::DeploymentHandler is a state of the art solution to the problem "
"of creating sane workflows for versioning DBIx::Class managed database "
"projects. However, since it is more of a toolkit for building custom "
"versioning and migration workflows than an expression of a particular "
"migration practice, it might not always be the most approachable tool. If "
"you are starting a new DBIx::Class project and you don't have a particular "
"custom workflow need, you might prefer to simply be given a reasonable clear "
"and standard practice, rather than a toolkit with a set of example scripts.\n"
"\n"
"DBIx::Class::Migration defines some logic which combines both DBIx::Class::"
"DeploymentHandler and DBIx::Class::Fixtures, along with a standard tutorial, "
"to give you a simple and straightforward approach to solving the problem of "
"how to best create database versions, migrations and testing data. "
"Additionally it builds on tools like Test::mysqld and Test::Postgresql58 "
"along with DBD::Sqlite in order to assist you in quickly creating a local "
"development database sandbox. It offers some integration points to testing "
"your database, via tools like Test::DBIx::Class in order to make testing "
"your database driven logic less painful. Lastly, we offer some thoughts on "
"good development patterns in using databases with application frameworks "
"like Catalyst.\n"
"\n"
"DBIx::Class::Migration offers code and advice based on my experience of "
"using DBIx::Class for several years, which hopefully can help you bootstrap "
"a new project. The solutions given should work for you if you want to use "
"DBIx::Class and have database migrations, but don't really know what to do "
"next. These solutions should scale upward from a small project to a medium "
"project involving many developers and more than one target environment (DEV\n"
"-> QA -> Production.) If you have very complex database versioning "
"requirements, huge teams and difficult architectual issues, you might be "
"better off building something on top of DBIx::Class::DeploymentHandler "
"directly.\n"
"\n"
"DBIx::Class::Migration is a base class upon which interfaces like DBIx::"
"Class::Migration::Script are built.\n"
"\n"
"Please see DBIx::Class::Migration::Tutorial for more approachable "
"documentation. If you want to read a high level feature overview, see DBIx::"
"Class::Migration::Features. The remainder of this POD is API level "
"documentation on the various internals."
msgstr ""
"DBIx::Class::DeploymentHandler は、バージョン付きの DBIx::Class 管理データ"
"ベース向けの適切なワークフローを作成する問題を解決するためのソリューションで"
"す。しかしながら、特定の移行を表現するよりも、独自のバージョン付けや移行の"
"ワークフローを構築するためのツールキット以上のものとしての存在になっていま"
"す。そのため、これが最も親しみやすいツールとは限らなくなっています。もしも新"
"しい DBIx::Class のプロジェクトを開始しようとしている場合で、特定の独自のワー"
"クフロー要件をお持ちでない場合は、サンプルスクリプト集を含むツールキットとし"
"てよりも、適度に明快で標準的な書き方を好むかもしれません。\n"
"\n"
"DBIx::Class::Migration では DBIx::Class::DeploymentHandler と DBIx::Class::"
"Fixtures を組み合わせたロジックを標準的なチュートリアルと共に定義することで、"
"データベースのバージョンや移行、データのテストなどの最適なソリューションを直"
"感的に作成することができます。これに加えて Test::mysqld や Test::"
"Postgresql58 と共に DBD::Sqlite を使用することで、ローカルのデータベースサン"
"ドボックスを容易に作成することもできます。これによりお使いのデータベースをテ"
"ストするための統合ポイントを提供することになり、 Test::DBIx::Class のような"
"ツールを介してデータベースドリブンでロジックの少ないコートを容易に作成するこ"
"とができます。最後に、 Catalyst  などのアプリケーションフレームワーク内で適切"
"な開発パターンへの提案も行なっています。\n"
"\n"
"DBIx::Class::Migration では DBIx::Class を数年間にわたって使い込んできた経験"
"をベースにしてコードやアドバイスを提供しています。これは新しいプロジェクトを"
"始める際の開始点となるべきものです。このソリューションは DBIx::Class を使用し"
"ていてデータベースの移行を行ないたい場合にうまく当てはまるようになっています"
"が、次に何をすべきかはわかっていません。これらのソリューションは小規模なプロ"
"ジェクトから中規模のプロジェクトまでスケールするようになっていますし、多数の"
"開発者が関わる複数のターゲット環境 (開発 -> 検証 -> 本番) も含まれています。"
"非常に複雑なデータベースバージョン要件をお持ちの場合で巨大なチームを構成して"
"いて、アーキテクチャ側の問題を抱えているような場合は、 DBIx::Class::"
"DeploymentHandler を利用して直接何らかのものを構築したほうが適切でしょう。\n"
"\n"
"DBIx::Class::Migration は DBIx::Class::Migration::Script のようなインターフェ"
"イスを構築するベースクラスが作られています。\n"
"\n"
"詳しいアプローチドキュメンテーションをお読みになりたい場合は、 DBIx::Class::"
"Migration::Tutorial をお読みください。また、高レベルな機能概要を知りたい場合"
"は DBIx::Class::Migration::Features をお読みください。 POD の残りの箇所では、"
"様々な内部仕様を表わす API レベルドキュメンテーションを説明しています。"

#. tumbleweed/perl-Dancer2/summary
msgid "Lightweight yet powerful web application framework"
msgstr "軽量ながらもパワフルな Web アプリケーションフレームワーク"

#. tumbleweed/perl-Dancer2/description
msgid ""
"Dancer2 is the new generation of Dancer, the lightweight web-framework for "
"Perl. Dancer2 is a complete rewrite based on Moo.\n"
"\n"
"Dancer2 can optionally use XS modules for speed, but at its core remains "
"fatpackable (packable by App::FatPacker) so you could easily deploy Dancer2 "
"applications on hosts that do not support custom CPAN modules.\n"
"\n"
"Dancer2 is easy and fun:\n"
"\n"
"    use Dancer2;     get '/' => sub { \"Hello World\" };     dance;\n"
"\n"
"This is the main module for the Dancer2 distribution. It contains logic for "
"creating a new Dancer2 application."
msgstr ""
"Dancer2 は Dancer の新世代で、 Perl 向けの軽量 Web フレームワークです。 "
"Dancer2 は Moo をベースにして完全に書き換えられています。\n"
"\n"
"Dancer2 は速度を向上する目的で、必要に応じて XS モジュールを使用することがで"
"きますが、 その中枢部分は fatpack 可能なままになっています (App::FatPacker を"
"介しています) 。そのため、独自の CPAN モジュールをサポートしないホストであっ"
"ても、 Dancer2 を容易に配置できるように名手います。\n"
"\n"
"Dancer2 は簡単でわかり安い仕組みです:\n"
"\n"
"    use Dancer2;     get '/' => sub { \"Hello World\" };     dance;\n"
"\n"
"これは Dancer2 配布物のメインモジュールです。新しい Dancer2 アプリケーション"
"を構築するためのロジックが含まれています。"

#. tumbleweed/perl-Dancer2-Plugin-Auth-Extensible/summary
msgid "Extensible authentication framework for Dancer2 apps"
msgstr "Dancer2 アプリ向けの拡張可能な認証フレームワーク"

#. tumbleweed/perl-Dancer2-Plugin-Auth-Extensible/description
msgid ""
"A user authentication and authorisation framework plugin for Dancer2 apps.\n"
"\n"
"Makes it easy to require a user to be logged in to access certain routes, "
"provides role-based access control, and supports various authentication "
"methods/sources (config file, database, Unix system users, etc).\n"
"\n"
"Designed to support multiple authentication realms and to be as extensible "
"as possible, and to make secure password handling easy. The base class for "
"auth providers makes handling 'RFC2307'-style hashed passwords really "
"simple, so you have no excuse for storing plain-text passwords. A simple "
"script called *dancer2-generate-crypted-password* to generate RFC2307-style "
"hashed passwords is included, or you can use Crypt::SaltedHash yourself to "
"do so, or use the 'slappasswd' utility if you have it installed."
msgstr ""
"Dancer2 アプリ向けのユーザ認証および認可フレームワークプラグインです。\n"
"\n"
"特定の経路でユーザのログインを求めるように設定するのが簡単で、役割ベースのア"
"クセス制御の提供のほか、様々な認証方式や認証ソース (設定ファイル、データベー"
"ス、 Unix システムユーザなど) を設定することができます。\n"
"\n"
"複数の認証領域に対応するよう設計されているほか、拡張性の高さやパスワードの安"
"全確保をできる限り簡単に処理できるように作られています。認証プロバイダ向けの"
"ベースクラスは 'RFC2307' 形式のハッシュパスワードを簡単に取り扱うことができる"
"ため、パスワードをそのまま保存するような危険を冒すこともありません。また、シ"
"ンプルなスクリプトである *dancer2-generate-crypted-password* では、 RFC2307 "
"形式のハッシュパスワードを簡単に作成することができますし、 Crypt::SaltedHash "
"でも同様のことを行なうことができます。また、 'slappasswd'  がインストールされ"
"ていれば、それでもかまいません。"

#. tumbleweed/perl-Dancer2-Plugin-Auth-Extensible-Provider-DBIC/summary
msgid "Authenticate via the Dancer2::Plugin::DBIC plugin"
msgstr "Dancer2::Plugin::DBIC プラグインを介した認証"

#. tumbleweed/perl-Dancer2-Plugin-Auth-Extensible-Provider-DBIC/description
msgid ""
"This class is an authentication provider designed to authenticate users "
"against a database, using Dancer2::Plugin::DBIC to access a database.\n"
"\n"
"See Dancer2::Plugin::DBIC for how to configure a database connection "
"appropriately; see the CONFIGURATION section below for how to configure this "
"authentication provider with database details.\n"
"\n"
"See Dancer2::Plugin::Auth::Extensible for details on how to use the "
"authentication framework."
msgstr ""
"このクラスはデータベースを利用してユーザを認証するように設計された認証プロバ"
"イダで、データベースへのアクセスにあたっては Dancer2::Plugin::DBIC を使用して"
"います。\n"
"\n"
"データベースの接続設定については、適切な Dancer2::Plugin::DBIC をお読みくださ"
"い。また CONFIGURATION セクションには、認証プロバイダの設定方法とデータベース"
"の詳細が記されています。\n"
"\n"
"認証フレームワークの使用方法の詳細については、 Dancer2::Plugin::Auth::"
"Extensible をお読みください。"

#. tumbleweed/perl-Dancer2-Plugin-DBIC/summary
msgid "DBIx::Class interface for Dancer2 applications"
msgstr "Dancer2 アプリケーション向け DBIx::Class インターフェイス"

#. tumbleweed/perl-Dancer2-Plugin-DBIC/description
msgid ""
"This plugin makes it very easy to create Dancer2 applications that interface "
"with databases. It automatically exports the keyword 'schema' which returns "
"a DBIx::Class::Schema object. It also exports the keywords 'resultset' and "
"'rset'. You just need to configure your database connection information. For "
"performance, schema objects are cached in memory and are lazy loaded the "
"first time they are accessed.\n"
"\n"
"This plugin is a thin wrapper around DBICx::Sugar."
msgstr ""
"このプラグインは、データベースを利用した Dancer2 アプリケーションを非常に簡単"
"に開発することのできるものです。このプラグインでは、 'schema' キーワードで "
"DBIx::Class::Schema のオブジェクトを返す関数を公開します。このほか "
"'resultset' と 'rset' というキーワードも公開しています。あとはデータベースの"
"接続に関する情報を設定するだけです。性能に関しては、スキーマオブジェクトがメ"
"モリ内にキャッシュされ、初回アクセス時に遅延読み込みが行なわれるようになって"
"います。\n"
"\n"
"このプラグインは DBICx::Sugar に対する薄いラッパーです。"

#. tumbleweed/perl-Dancer2-Plugin-REST/summary
msgid "Plugin for writing RESTful apps with Dancer2"
msgstr "Dancer2 で RESTful なアプリを記述するためのプラグイン"

#. tumbleweed/perl-Dancer2-Plugin-REST/description
msgid "This plugin helps you write a RESTful webservice with Dancer2."
msgstr ""
"このプラグインは、 Dancer2 で RESTful な Web サービスを記述するための支援を行"
"ないます。"

#. tumbleweed/perl-Dancer2-Plugin-WebSocket/summary
msgid "Add a websocket interface to your Dancers app"
msgstr "Web ソケットインターフェイスを Dancers アプリに追加"

#. tumbleweed/perl-Dancer2-Plugin-WebSocket/description
msgid ""
"'Dancer2::Plugin::WebSocket' provides an interface to Plack::App::WebSocket "
"and allows to interact with the webSocket connections within the Dancer "
"app.\n"
"\n"
"Plack::App::WebSocket, and thus this plugin, requires a plack server that "
"supports the psgi _streaming_, _nonblocking_ and _io_. Twiggy is the most "
"popular server fitting the bill."
msgstr ""
"'Dancer2::Plugin::WebSocket' は Plack::App::WebSocket に対するインターフェイ"
"スを提供するもので、 Dancer アプリ内で WebSocket の接続を行なって対話できるよ"
"うにします。\n"
"\n"
"Plack::App::WebSocket とこのプラグインは、 psgi _streaming_, _nonblocking_, "
"_io_ にそれぞれ対応する plack サーバが必要となります。 Twiggy がもっとも有名"
"なサーバです。"

#. tumbleweed/perl-Data-Binary/summary
msgid "Simple detection of binary versus text in strings"
msgstr "文字列内のバイナリとテキストの単純な検出"

#. tumbleweed/perl-Data-Binary/description
msgid ""
"This simple module provides string equivalents to the -T / -B operators. "
"Since these only work on file names and file handles, this module provides "
"the same functions but on strings.\n"
"\n"
"Note that the actual implementation is currently different, basically "
"because the -T / -B functions are in C/XS, and this module is written in "
"pure Perl. For now, anyway."
msgstr ""
"この単純なモジュールは、-T / -B "
"演算子に相当する文字列を提供します。これらはファイル名とファイルハンドルに対してのみ機能するので、このモジュールは文字列を除いて同じ関数を提供します。\n"
"\n"
"基本的に、-T / -B 関数は C/XS "
"で記述されており、このモジュールは純粋なPerlで記述されているため、実際の実装は現在異なることに注意してください。とにかく今のところは。"

#. tumbleweed/perl-Data-Compare/summary
msgid "Compare perl data structures"
msgstr "Perl のデータ構造の比較"

#. tumbleweed/perl-Data-Compare/description
msgid ""
"Compare two perl data structures recursively. Returns 0 if the structures "
"differ, else returns 1.\n"
"\n"
"A few data types are treated as special cases: \n"
"* Scalar::Properties objects\n"
"\n"
"This has been moved into a plugin, although functionality remains the same "
"as with the previous version. Full documentation is in Data::Compare::"
"Plugins::Scalar::Properties. \n"
"* Compiled regular expressions, eg qr/foo/\n"
"\n"
"These are stringified before comparison, so the following will match:\n"
"\n"
"    $r = qr/abc/i;     $s = qr/abc/i;     Compare($r, $s);\n"
"\n"
"and the following won't, despite them matching *exactly* the same text:\n"
"\n"
"    $r = qr/abc/i;     $s = qr/[aA][bB][cC]/;     Compare($r, $s);\n"
"\n"
"Sorry, that's the best we can do. \n"
"* CODE and GLOB references\n"
"\n"
"These are assumed not to match unless the references are identical - ie, "
"both are references to the same thing.\n"
"\n"
"You may also customise how we compare structures by supplying options in a "
"hashref as a third parameter to the 'Compare()' function. This is not yet "
"available through the OO-ish interface. These options will be in force for "
"the *whole* of your comparison, so will apply to structures that are lurking "
"deep down in your data as well as at the top level, so beware! \n"
"* ignore_hash_keys\n"
"\n"
"an arrayref of strings. When comparing two hashes, any keys mentioned in "
"this list will be ignored."
msgstr ""
"2 つの Perl データ構造を再帰的に比較します。構造が異なる場合には 0 を、そうで"
"ない場合は 1 を返します。\n"
"\n"
"いくつかのデータタイプは特別な扱いをしています:\n"
"* Scalar::Properties オブジェクト\n"
"\n"
"こちらはプラグイン内に移動されていますが、以前のバージョンと同様の機能が残さ"
"れています。完全なドキュメンテーションが必要となる場合は、 Data::Compare::"
"Plugins::Scalar::Properties をお読みください。\n"
"* コンパイル済みの正規表現 (例: qr/foo/)\n"
"\n"
"  これらは比較時に文字列化されます。そのため下記の比較は一致します:\n"
"\n"
"      $r = qr/abc/i;       $s = qr/abc/i;       Compare($r, $s);\n"
"\n"
"  逆に、下記の比較は同じテキストに対して同じ結果を返すにもかかわらず、一致し"
"ません:\n"
"\n"
"      $r = qr/abc/i;       $s = qr/[aA][bB][cC]/;       Compare($r, $s);\n"
"\n"
"  申し訳ありません。できる限りのことはしています。\n"
"* CODE と GLOB の参照\n"
"\n"
"  これらは参照が等価なもので無い限り、一致しません - 言い換えると、参照先が同"
"じものであれば、一致します。\n"
"\n"
"'Compare()' 関数の 3 つめのパラメータとしてハッシュ参照を指定することで、構造"
"の比較をカスタマイズすることができます。この機能はオブジェクト指向のインター"
"フェイスでは用意されていません。これらのオプションは比較の *全体* に対して強"
"制されるため、データ内の深い場所に隠れたレベルでもトップレベルでも、同様に処"
"理されることに注意してください！\n"
"\n"
"* ignore_hash_keys\n"
"\n"
"  文字列のハッシュ参照を指定します。 2 つのハッシュを比較する際、指定したキー"
"を無視します。"

#. tumbleweed/perl-Data-Dump/description
msgid ""
"This module provides a few functions that traverse their argument list and "
"return a string containing Perl code that, when 'eval'ed, produces a deep "
"copy of the original arguments.\n"
"\n"
"The main feature of the module is that it strives to produce output that is "
"easy to read. Example:\n"
"\n"
"    @a = (1, [2, 3], {4 => 5});     dump(@a);\n"
"\n"
"Produces:\n"
"\n"
"    \"(1, [2, 3], { 4 => 5 })\"\n"
"\n"
"If you dump just a little data, it is output on a single line. If you dump "
"data that is more complex or there is a lot of it, line breaks are "
"automatically added to keep it easy to read."
msgstr ""
"このモジュールは、引数リストで指定した変数を詳しく読み込み、文字列には Perl "
"コードが含まれていて、これを 'eval' することで、元の変数に対するディープコ"
"ピーを生成することができます。\n"
"\n"
"このモジュールの主な機能として、指定したパラメータを読みやすく出力する機能が"
"あげられます。たとえば下記のようになります:\n"
"\n"
"    @a = (1, [2, 3], {4 => 5});     dump(@a);\n"
"\n"
"上記のコードを実行すると、下記のようになります:\n"
"\n"
"    \"(1, [2, 3], { 4 => 5 })\"\n"
"\n"
"小規模なデータを出力する場合、出力は 1 行内に収まります。複雑なデータや多数の"
"データが含まれる場合は、自動的に改行が入れられて、読みやすくなるようにしてい"
"ます。"

#. tumbleweed/perl-Date-Manip/description
msgid ""
"Date::Manip is a series of modules designed to make any common date/time "
"operation easy to do. Operations such as comparing two times, determining a "
"date a given amount of time from another, or parsing international times are "
"all easily done. It deals with time as it is used in the Gregorian calendar "
"(the one currently in use) with full support for time changes due to "
"daylight saving time.\n"
"\n"
"From the very beginning, the main focus of Date::Manip has been to be able "
"to do ANY desired date/time operation easily. Many other modules exist which "
"may do a subset of these operations quicker or more efficiently, but no "
"other module can do all of the operations available in Date::Manip.\n"
"\n"
"Date::Manip has functionality to work with several fundamental types of "
"data. \n"
"* *dates*\n"
"\n"
"The word date is used extensively here and is somewhat misleading. In Date::"
"Manip, a date consists of three pieces of information: a calendar date "
"(year, month, day), a time of day (hour, minute, second), and time zone "
"information. Calendar dates and times are fully handled. Time zones are "
"handled as well, but depending on how you use Date::Manip, there may be some "
"limitations as discussed below. \n"
"* *delta*\n"
"\n"
"A delta is an amount of time (i.e. the amount of time between two different "
"dates). Think of it as the duration of an event or the amount of time "
"between two dates.\n"
"\n"
"A delta refers only to an amount of time. It includes no information about a "
"starting or ending date/time. Most people will think of a delta as an amount "
"of time, but the term 'time' is already used so much in this module that I "
"didn't want to use it here in order to avoid confusion. \n"
"* *recurrence*\n"
"\n"
"A recurring event is something which occurs on a regular recurring basis. \n"
"* *holidays* and *events*\n"
"\n"
"Holidays and events are basically named dates or recurrences.\n"
"\n"
"Among other things, Date::Manip allow you to: \n"
"* ***\n"
"\n"
"Enter a date in practically any format you choose. \n"
"* ***\n"
"\n"
"Compare two dates, entered in widely different formats to determine which is "
"earlier. \n"
"* ***\n"
"\n"
"Extract any information you want from a date using a format string similar "
"to the Unix date command. \n"
"* ***\n"
"\n"
"Determine the amount of time between two dates, or add an amount of time (a "
"delta) to a date to get a second date. \n"
"* ***\n"
"\n"
"Work with dates using international formats (foreign month names, 12/10/95 "
"referring to October rather than December, etc.). \n"
"* ***\n"
"\n"
"Convert dates from one timezone to another. \n"
"* ***\n"
"\n"
"To find a list of dates where a recurring event happens.\n"
"\n"
"Each of these tasks is trivial (one or two lines at most) with this package."
msgstr ""
"Date::Manip は、一般的な日付／時刻操作を簡単に行なうために設計されたモジュー"
"ル集です。操作としては 2 つの時刻に対する比較のほか、一方と他方の時刻の差を計"
"算や協定世界時の処理などを、簡単に行なうことができます。時刻はグレゴリオ暦(現"
"在使用されている暦のうちの 1 つ) として扱う仕組みで、サマータイムなどの調整に"
"も完全対応しています。\n"
"\n"
"開発当初の段階から、  Date::Manip は必要な日付／時刻処理を簡単に行なうことが"
"できるようになっています。既にある他の多くのモジュールは、これらの処理をより"
"素早く、効率的に処理できる仕組みを備えていますが、これらは Date::Manip にある"
"ような処理の全てを実行できわけではありません。\n"
"\n"
"Date::Manip には様々な種類のデータを処理するための機能が備わっています。\n"
"* *日付*\n"
"\n"
"日付という言葉は幅広い意味で使用されているもので、よく間違えられる用語でもあ"
"ります。 Date::Manip では、日付には 3 種類の情報が含まれています: カレンダー"
"の日付、時刻、タイムゾーン情報です。カレンダーの日付と時刻は完全に処理するこ"
"とができます。タイムゾーンについても同様ですが、Date::Manip の使い方によって"
"は、下記に示すとおりいくつかの制限があります。\n"
"* *差分*\n"
"\n"
"差分とは時刻の量を表わした数値 (2 つの異なる日付の差) を意味します。差分は時"
"刻の量のみを意味する言葉で、開始や終了の日時を持たない値になっています。多く"
"の人々にとって、差分とは時刻の量を意味するものですが、 '時刻' という用語は既"
"にそのモジュール内で多数使用されているため、混乱を防ぐために別の言葉を用意し"
"て説明しています。\n"
"* *繰り返し*\n"
"\n"
"一定の周期で発生するイベントを意味します。\n"
"\n"
"* *祝日* と *イベント*\n"
"\n"
"祝日とイベントは、日付と周期に名前が付けられたものを意味します。\n"
"\n"
"それ以外にも、 Date::Manip では下記のようなことを実施することができます:\n"
"* ***\n"
"\n"
"事実上、ほぼ全ての書式で自由に日付入力を行なうことができます。\n"
"* ***\n"
"\n"
"それぞれ大きく異なる書式の 2 つの日付を比較し、どちらが先の日付なのかを簡単に"
"判断することができます。\n"
"* ***\n"
"\n"
"Unix の date コマンドのように、書式文字列を利用して、日付から必要な情報を抽出"
"することができます。\n"
"* ***\n"
"\n"
"2 つの日付の差を計算することができるほか、日付に値を足してもう 1 つの日付を作"
"成することができます。\n"
"* ***\n"
"\n"
"国際化された書式による日付処理 (月名称を含む。 12/10/95 は 12 月ではなく 10 "
"月を意味するものとして扱います) 。\n"
"* ***\n"
"\n"
"タイムゾーン間の日付の変換\n"
"* ***\n"
"\n"
"繰り返しイベントが発生する日付の一覧表示\n"
"\n"
"パッケージ内では、それぞれの処理は平凡な (多くても数行程度) 記述で作成されて"
"います。"

#. tumbleweed/perl-Date-Range/summary
msgid "Work with a range of dates"
msgstr "日付範囲を操作"

#. tumbleweed/perl-Date-Range/description
msgid ""
"Quite often, when dealing with dates, we don't just want to know information "
"about one particular date, but about a range of dates. For example, we may "
"wish to know whether a given date is in a particular range, or what the "
"overlap is between one range and another. This module lets you ask such "
"questions."
msgstr ""
"多くの場合、日付を処理するときに、特定の日付に関する情報だけでなく、日付の範囲に関する情報も知りたいと思います。たとえば、与えられた日付が特定の範囲内にあ"
"るかどうか、またはある範囲と別の範囲との間の重なりが何かを知りたい場合があります。このモジュールでは、このような問い合わせをすることができます。"

#. tumbleweed/perl-DateTime/summary
msgid "Date and time object for Perl"
msgstr "Perl 向け日時オブジェクト"

#. tumbleweed/perl-DateTime/description
msgid ""
"DateTime is a class for the representation of date/time combinations, and is "
"part of the Perl DateTime project.\n"
"\n"
"It represents the Gregorian calendar, extended backwards in time before its "
"creation (in 1582). This is sometimes known as the \"proleptic Gregorian "
"calendar\". In this calendar, the first day of the calendar (the epoch), is "
"the first day of year 1, which corresponds to the date which was "
"(incorrectly) believed to be the birth of Jesus Christ.\n"
"\n"
"The calendar represented does have a year 0, and in that way differs from "
"how dates are often written using \"BCE/CE\" or \"BC/AD\".\n"
"\n"
"For infinite datetimes, please see the DateTime::Infinite module."
msgstr ""
"DateTimeは日付と時刻の組み合わせを表現するためのクラスであり、Perl DateTimeプロジェクトの一部です。\n"
"\n"
"Gregorian calendar は、グレゴリオ暦が作成される前(1582年)に遡って延長されたグレゴリオ暦を表します。予測的グレゴリオ暦と呼ばれるこ"
"ともあります。この暦では、暦の最初の日(紀元)を1年目の最初の日としており、これは(誤りではあるが)キリストの誕生とされた日にあたります。\n"
"\n"
"表示されるカレンダーには0年が含まれていますが、この点で、「BCE/CE」や「BC/AD」を使用して日付を表記する方法とは異なります。\n"
"\n"
"無限の日時については、DateTime::Infiniteモジュールを参照してください。"

#. tumbleweed/perl-DateTime-Format-Builder/summary
msgid "Create DateTime parser classes and objects"
msgstr "DateTime パーサクラスとオブジェクトの作成"

#. tumbleweed/perl-DateTime-Format-Builder/description
msgid ""
"DateTime::Format::Builder creates DateTime parsers. Many string formats of "
"dates and times are simple and just require a basic regular expression to "
"extract the relevant information. Builder provides a simple way to do this "
"without writing reams of structural code.\n"
"\n"
"Builder provides a number of methods, most of which you'll never need, or at "
"least rarely need. They're provided more for exposing of the module's "
"innards to any subclasses, or for when you need to do something slightly "
"beyond what I expected."
msgstr ""
"DateTime::Format::Builder は DateTime のパーサを作成します。日付や時刻の文字"
"列書式はほとんどのものがシンプルで、基本的な正規表現を利用すれば関連する情報"
"が得られるためです。 Builder では、実際の構造体のコードを記述することなく、こ"
"のようなクラスを作成するためのシンプルな方法を提供します。\n"
"\n"
"Builder には多数のメソッドが用意されていますが、多くのものは全く必要としませ"
"んし、あったとしても稀な場合だけです。これらはモジュールの内部状況を任意のサ"
"ブクラスに開示するためのものであるほか、我々の考えている範囲を超えたモジュー"
"ルを作成したいような場合に必要となるものです。"

#. tumbleweed/perl-DateTime-Format-Natural/summary
msgid "Parse informal natural language date/time strings"
msgstr "様々な言語における日時文字列の処理機能"

#. tumbleweed/perl-DateTime-Format-Natural/description
msgid ""
"'DateTime::Format::Natural' parses informal natural language date/time "
"strings. In addition, parsable date/time substrings may be extracted from "
"ordinary strings."
msgstr ""
"'DateTime::Format::Natural' は様々な言語における日時文字列を処理します。これ"
"に加えて、通常の文字列から処理可能な日時文字列を取り出すこともできます。"

#. tumbleweed/perl-DateTime-Locale/description
msgid ""
"DateTime::Locale is primarily a factory for the various locale subclasses. "
"It also provides some functions for getting information on all the available "
"locales.\n"
"\n"
"If you want to know what methods are available for locale objects, then "
"please read the DateTime::Locale::FromData documentation."
msgstr ""
"DateTime::Locale は主に様々なロケールサブクラス向けのファクトリとなるクラスで"
"す。利用可能なすべてのロケールに対して、情報を取得するためのいくつかの関数が"
"提供されています。\n"
"\n"
"ロケールオブジェクトでどのようなメソッドを利用できるのかについては、 "
"'DateTime::Locale::FromData' のドキュメンテーションをお読みください。"

#. tumbleweed/perl-Devel-CheckLib/summary
msgid "Check that a library is available"
msgstr "ライブラリが利用可能かどうかのチェック"

#. tumbleweed/perl-Devel-Declare/summary
msgid "(DEPRECATED) Adding keywords to perl, in perl"
msgstr "(非推奨) Perl に対して、および Perl 内でのキーワードの追加"

#. tumbleweed/perl-Devel-OverloadInfo/summary
msgid "Introspect overloaded operators"
msgstr "オーバーロードされた演算子の内部調査"

#. tumbleweed/perl-Digest-HMAC/description
msgid ""
"HMAC is used for message integrity checks between two parties that share a "
"secret key, and works in combination with some other Digest algorithm, "
"usually MD5 or SHA-1. The HMAC mechanism is described in RFC 2104.\n"
"\n"
"HMAC follow the common 'Digest::' interface, but the constructor takes the "
"secret key and the name of some other simple 'Digest::' as argument.\n"
"\n"
"The hmac() and hmac_hex() functions and the Digest::HMAC->new() constructor "
"takes an optional $blocksize argument as well. The HMAC algorithm assumes "
"the digester to hash by iterating a basic compression function on blocks of "
"data and the $blocksize should match the byte-length of such blocks.\n"
"\n"
"The default $blocksize is 64 which is suitable for the MD5 and SHA-1 digest "
"functions. For stronger algorithms the blocksize probably needs to be "
"increased."
msgstr ""
"HMAC は機密鍵を共有した 2 つの当事者でメッセージの整合性を確認するために 使用"
"されます。 HMAC は他のダイジェストアルゴリズム (主に MD5, SHA-1) と共に 使用"
"します。 HMAC の仕組みは RFC 2104 で説明されています。\n"
"\n"
"HMAC は汎用の 'Digest::' インターフェイスに従って作られていますが、コンストラ"
"クタではパラメータとして、機密鍵と他のシンプルな 'Digest::' 以下の名前を指定"
"する必要があります。\n"
"\n"
"hmac() 関数と hmac_hex() 関数、およびDigest::HMAC->new() コンストラクタは、オ"
"プションの$blocksize 引数も取ります。HMAC アルゴリズムでは、データブロックに"
"対する基本的な圧縮関数を反復することによってダイジェストがハッシュされること"
"を想定しており、$blocksize はそのようなブロックのバイト長と一致する必要があり"
"ます。\n"
"\n"
"既定の $blocksize は 64 で、MD5 および SHA-1 ダイジェスト関数に適しています。"
"より強力なアルゴリズムでは、おそらくブロックサイズを大きくする必要がありま"
"す。"

#. tumbleweed/perl-Digest-SHA3/summary
msgid "Perl extension for SHA-3"
msgstr "SHA-3用のPerl拡張"

#. tumbleweed/perl-Digest-SHA3/description
msgid ""
"Digest::SHA3 is written in C for speed. If your platform lacks a C compiler, "
"perhaps you can find the module in a binary form compatible with your "
"particular processor and operating system.\n"
"\n"
"The programming interface is easy to use: it's the same one found in CPAN's "
"Digest module. So, if your applications currently use Digest::SHA and you'd "
"prefer the newer flavor of the NIST standard, it's a simple matter to "
"convert them.\n"
"\n"
"The interface provides two ways to calculate digests: all-at-once, or in "
"stages. To illustrate, the following short program computes the SHA3-256 "
"digest of \"hello world\" using each approach:\n"
"\n"
"\tuse Digest::SHA3 qw(sha3_256_hex);\n"
"\n"
"\t$data = \"hello world\"; \t@frags = split(//, $data);\n"
"\n"
"\t \t$digest1 = sha3_256_hex($data);\n"
"\n"
"\t \t$state = Digest::SHA3->new(256); \tfor (@frags) { $state->add($_) } \t"
"$digest2 = $state->hexdigest;\n"
"\n"
"\tprint $digest1 eq $digest2 ? \t\t\"that's the ticket!\\n\" : \"oops!\\n"
"\";\n"
"\n"
"To calculate the digest of an n-bit message where _n_ is not a multiple of "
"8, use the _add_bits()_ method. For example, consider the 446-bit message "
"consisting of the bit-string \"110\" repeated 148 times, followed by \"11\". "
"Here's how to display its SHA3-512 digest:\n"
"\n"
"\tuse Digest::SHA3; \t$bits = \"110\" x 148 . \"11\"; \t$sha3 = Digest::SHA3-"
">new(512)->add_bits($bits); \tprint $sha3->hexdigest, \"\\n\";\n"
"\n"
"Note that for larger bit-strings, it's more efficient to use the two-"
"argument version _add_bits($data, $nbits)_, where _$data_ is in the "
"customary packed binary format used for Perl strings."
msgstr ""
"Digest::SHA3は、速度を上げるためにCで書かれています。プラットフォームにCコンパイラがない場合は、特定のプロセッサやオペレーティングシステムと"
"互換性のあるバイナリ形式のモジュールを見つけることができます。\n"
"\n"
"プログラミング・インターフェースは使いやすく、CPANのDigestモジュールにあるものと同じです。そのため、現在アプリケーションでDigest::SHA"
"を使用していて、NIST標準の新しいバージョンが必要な場合は、簡単に変換できます。\n"
"\n"
"このインターフェースには、ダイジェストを計算する2つの方法が用意されています。一度にすべて計算する方法と、段階的に計算する方法です。説明のため、次の短いプ"
"ログラムは、それぞれの方法を使用して「hello world」のSHA3-256ダイジェストを計算します。\n"
"\n"
"use Digest::SHA3 qw(sha3_256_hex);\n"
"\n"
"\t$data = \"hello world\"; \t@frags = split(//, $data);\n"
"\n"
"\t \t$digest1 = sha3_256_hex($data);\n"
"\n"
"\t \t$state = Digest::SHA3->new(256); \tfor (@frags) { $state->add($_) } \t$"
"digest2 = $state->hexdigest;\n"
"\n"
"\tprint $digest1 eq $digest2 ?\t\"これがチケットです!\\n"
"\" : \"おっと!\\n"
"\";\n"
"\n"
"_n_ が8 の倍数でない n ビットのメッセージのダイジェストを計算するには、_add_bits()_ メソッドを使用します。たとえば、ビット列「110"
"」が148回繰り返され、その後に「11」が続く446ビットメッセージを考えてみましょう。SHA3-512ダイジェストを表示する方法は次のとおりです:\n"
"\n"
"\tuse Digest::SHA3; \t$bits = \"110\" x 148 . \"11\"; \t$sha3 = "
"Digest::SHA3->new(512)->add_bits($bits); \tprint $sha3->hexdigest, \"\\n"
"\";\n"
"\n"
"大きなビット文字列の場合は、2つの引数version_add_bits($data,$nbits)_を使用する方が効率的であることに注意してください。ここ"
"で、_$data_はPerl文字列で使用される通常のパックされたバイナリ形式です。"

#. tumbleweed/perl-Dist-Zilla/summary
msgid "Distribution builder; installer not included!"
msgstr "配布物構築モジュール (インストーラは含まれていません)!"

#. tumbleweed/perl-Encode-JIS2K/description
msgid ""
"This module implements encodings that covers JIS X 0213 charset (AKA JIS "
"2000, hence the module name)."
msgstr ""
"このモジュールは JIS X 0213 文字セット (これは JIS 2000 とも呼ばれ、モジュー"
"ル名にもなっています) をカバーするエンコードを実装しています。"

#. tumbleweed/perl-Exception-Class/summary
msgid "Module that allows you to declare real exception classes in Perl"
msgstr "Perl における本格的な例外クラスの定義のためのモジュール"

#. tumbleweed/perl-Exporter-Tiny/summary
msgid ""
"An exporter with the features of Sub::Exporter but only core dependencies"
msgstr ""
"Sub::Exporter の機能を持ちながら、中枢部にしか依存関係を持たないエクスポータ"

#. tumbleweed/perl-ExtUtils-CppGuess/summary
msgid "Guess C++ compiler and flags"
msgstr "C++ コンパイラとフラグの推測"

#. tumbleweed/perl-ExtUtils-InstallPaths/description
msgid ""
"This module tries to make install path resolution as easy as possible.\n"
"\n"
"When you want to install a module, it needs to figure out where to install "
"things. The nutshell version of how this works is that default installation "
"locations are determined from ExtUtils::Config, and they may be individually "
"overridden by using the 'install_path' attribute. An 'install_base' "
"attribute lets you specify an alternative installation root like _/home/foo_ "
"and 'prefix' does something similar in a rather different (and more "
"complicated) way. 'destdir' lets you specify a temporary installation "
"directory like _/tmp/install_ in case you want to create bundled-up "
"installable packages.\n"
"\n"
"The following types are supported by default. \n"
"* * lib\n"
"\n"
"Usually pure-Perl module files ending in _.pm_ or _.pod_. \n"
"* * arch\n"
"\n"
"\"Architecture-dependent\" module files, usually produced by compiling XS, "
"Inline, or similar code. \n"
"* * script\n"
"\n"
"Programs written in pure Perl. In order to improve reuse, you may want to "
"make these as small as possible - put the code into modules whenever "
"possible. \n"
"* * bin\n"
"\n"
"\"Architecture-dependent\" executable programs, i.e. compiled C code or "
"something. Pretty rare to see this in a perl distribution, but it happens. \n"
"* * bindoc\n"
"\n"
"Documentation for the stuff in 'script' and 'bin'. Usually generated from "
"the POD in those files. Under Unix, these are manual pages belonging to the "
"'man1' category. Unless explicitly set, this is only available on platforms "
"supporting manpages. \n"
"* * libdoc\n"
"\n"
"Documentation for the stuff in 'lib' and 'arch'. This is usually generated "
"from the POD in _.pm_ and _.pod_ files. Under Unix, these are manual pages "
"belonging to the 'man3' category. Unless explicitly set, this is only "
"available on platforms supporting manpages. \n"
"* * binhtml\n"
"\n"
"This is the same as 'bindoc' above, but applies to HTML documents. Unless "
"explicitly set, this is only available when perl was configured to do so. \n"
"* * libhtml\n"
"\n"
"This is the same as 'libdoc' above, but applies to HTML documents. Unless "
"explicitly set, this is only available when perl was configured to do so."
msgstr ""
"このモジュールは、インストールパスの解決をできる限り簡単にするモジュールで"
"す。\n"
"\n"
"モジュールをインストールするにあたっては、インストール先を識別する必要があり"
"ます。このモジュールは、簡単に言うと既定のインストール先を ExtUtils::Config "
"を利用して判断しますが、 'install_path' 属性が指定されていれば、その値で上書"
"きすることもできる仕組みです。また、 'install_base' 属性が指定されている場合"
"は、 _/home/foo_ のように代替のインストール先を指定することができるほか、  "
"'prefix' でも似たようなこと (ただしより複雑です) を行なうことができます。この"
"ほか、 'destdir' では _/tmp/install_ のような一時的なインストール先を指定する"
"こともできます。こちらは直接インストール可能なパッケージを作成する際に利用し"
"ます。\n"
"\n"
"既定では下記のタイプに対応しています。\n"
"* * lib\n"
"\n"
"  通常は _.pm_ や _.pod_ で終わる Perl のみで作られたモジュールのインストール"
"先です。\n"
"* * arch\n"
"\n"
"  \"アーキテクチャ依存の\" モジュールファイルで、通常は XS が生成したモジュー"
"ルやインラインのマニュアルページなどのコードがインストールされます。\n"
"* * script\n"
"\n"
"  Perl のみで作成されたプログラムのインストール先です。再利用性を高めるため、"
"これらはできるだけ小さくしておき、モジュール内にコードを配置するようにしてく"
"ださい。\n"
"* * bin\n"
"\n"
"  \"アーキテクチャ依存の\" 実行プログラム (例: コンパイルされた C 言語のコー"
"ドなど) のインストール先です。 Perl の配布物としてはほとんど使われることがあ"
"りません。\n"
"* * bindoc\n"
"\n"
"  'script' や 'bin' にインストールしたファイル向けのドキュメンテーションのイ"
"ンストール先です。通常は POD から生成します。 Unix 環境では 'man1' の分類に属"
"するマニュアルページです。明示的に指定しない限り、マニュアルページに対応した"
"プラットフォームでのみ利用することができます。\n"
"* * libdoc\n"
"\n"
"  'lib' や 'arch' にインストールしたファイル向けのドキュメンテーションのイン"
"ストール先です。通常は _.pm_ や _.pod_ ファイル内の POD から生成します。 "
"Unix 環境では 'man3\" の分類に属するマニュアルページです。明示的に指定しない"
"限り、マニュアルページに対応したプラットフォームでのみ利用することができま"
"す。\n"
"* * binhtml\n"
"\n"
"  上述の 'bindoc' と同じですが、 HTML 文書のみのインストール先です。明示的に"
"指定しない限り、 Perl 側で設定されていないと利用することができません。\n"
"* * libhtml\n"
"\n"
"  上述の 'libdoc' と同じですが、 HTML 文書のみのインストール先です。明示的に"
"指定しない限り、 Perl 側で設定されていないと利用することができません。"

#. tumbleweed/perl-File-Find-Object/summary
msgid "An object oriented File::Find replacement"
msgstr "オブジェクト指向のFile::Find置換"

#. tumbleweed/perl-File-Find-Object/description
msgid ""
"File::Find::Object does the same job as File::Find but works like an object "
"and with an iterator. As File::Find is not object oriented, one cannot "
"perform multiple searches in the same application. The second problem of "
"File::Find is its file processing: after starting its main loop, one cannot "
"easily wait for another event and so get the next result.\n"
"\n"
"With File::Find::Object you can get the next file by calling the next() "
"function, but setting a callback is still possible."
msgstr ""
"File::Find::Objectは、File::Findと同じ働きをしますが、オブジェクトのように、イテレータとともに働きます。File::Findは"
"オブジェクト指向ではないため、同じアプリケーション内で複数の検索を実行することはできません。File::Findの2番目の問題は、そのファイル処理です。メ"
"インループを開始した後、別のイベントを待って次の結果を得るのは簡単ではありません。\n"
"\n"
"File::Find::Objectでは、next()関数を呼び出すことで次のファイルを取得できますが、コールバックを設定することは可能です。"

#. tumbleweed/perl-File-HomeDir/description
msgid ""
"*File::HomeDir* is a module for locating the directories that are \"owned\" "
"by a user (typically your user) and to solve the various issues that arise "
"trying to find them consistently across a wide variety of platforms.\n"
"\n"
"The end result is a single API that can find your resources on any platform, "
"making it relatively trivial to create Perl software that works elegantly "
"and correctly no matter where you run it."
msgstr ""
"*File::HomeDir* は、様々なプラットフォームでユーザ (通常はあなた自身) が所有"
"するディレクトリの場所を検出し、それによって発生する様々な問題を解決するため"
"のモジュールです。\n"
"\n"
"任意のプラットフォーム内で自身のリソースを見つけるための単一 API を構成してい"
"ます。これにより、より上品かつプラットフォームを選ばない Perl ソフトウエアを"
"作成することができるようになります。"

#. tumbleweed/perl-File-Listing/summary
msgid "Parse directory listing"
msgstr "ディレクトリ一覧の処理"

#. tumbleweed/perl-File-Listing/description
msgid ""
"This module exports a single function called 'parse_dir', which can be used "
"to parse directory listings."
msgstr ""
"このモジュールは 'parse_dir' と呼ばれる単一の関数をエクスポートします。この関"
"数はディレクトリリストの解析に使用できます。"

#. tumbleweed/perl-File-Rename/summary
msgid "Perl extension for renaming multiple files"
msgstr "複数のファイルの名前を変更するためのPerl拡張機能"

#. tumbleweed/perl-File-Rename/description
msgid ""
"* 'rename( FILES, CODE [, VERBOSE])'\n"
"\n"
"rename FILES using CODE, if FILES is empty read list of files from stdin \n"
"* 'rename_files( CODE, VERBOSE, FILES)'\n"
"\n"
"rename FILES using CODE \n"
"* 'rename_list( CODE, VERBOSE, HANDLE [, FILENAME])'\n"
"\n"
"rename a list of file read from HANDLE, using CODE"
msgstr ""
"*'rename( FILES, CODE [, VERBOSE])'\n"
"\n"
"名前を変更するにはCODEを使用します。FILESが空の場合は、stdinからファイルのリストを読み込みます。\n"
"* 'rename_files(CODE, VERBOSE,FILES)'\n"
"\n"
"CODEを使用してFILESの名前を変更する\n"
"* 'rename_list( CODE, VERBOSE,HANDLE [, FILENAME])'\n"
"\n"
"CODEを使用して、HANDLEから読み込んだファイルのリストの名前を変更する"

#. tumbleweed/perl-File-Share/summary
msgid "Extend File::ShareDir to Local Libraries"
msgstr "File::ShareDir のローカルライブラリへの拡張"

#. tumbleweed/perl-File-Share/description
msgid ""
"This module is a dropin replacement for the File::ShareDir manpage. It "
"supports the 'dist_dir' and 'dist_file' functions, except these functions "
"have been enhanced to understand when the developer's local './share/' "
"directory should be used.\n"
"\n"
"NOTE: module_dist and module_file are not yet supported, because (afaik) "
"there is no well known way to populate per-module share files. This may "
"change in the future. Please contact me if you know how to do this."
msgstr ""
"このモジュールは File::ShareDir の直接的な置き換えです。それぞれ 'dist_dir' "
"と 'dist_file' という関数を公開していますが、これらの関数はいずれも開発者の"
"ローカルディレクトリである  './share/' ディレクトリを認識するように拡張されて"
"います。\n"
"\n"
"注意: module_dist と module_file はサポートされていません。これは、現時点では"
"モジュールごとの共有ファイルを公開するための既知のディレクトリが存在しないた"
"めです。この機能は将来的に変更される可能性があります。この機能を実装する方法"
"をご存じの場合は、ご連絡ください。"

#. tumbleweed/perl-File-Slurp/summary
msgid "Perl module for reading/writing/modifying complete files"
msgstr ""
"ファイル全体を読み込んだり書き込んだり、修正したりするための Perl モジュール"

#. tumbleweed/perl-File-Slurp/description
msgid ""
"This module provides subs that allow you to read or write entire files with "
"one simple call. They are designed to be simple to use, have flexible ways "
"to pass in or get the file contents and to be very efficient. There is also "
"a sub to read in all the files in a directory."
msgstr ""
"このモジュールは、 1 回の呼び出しでファイルの全体を読み込んだり、書き込んだり"
"するためのサブルーチンを提供します。使いやすくなるよう設計されていますが、非"
"常に効率的にファイルの内容を渡したり受け取ったりする柔軟な方法も提供していま"
"す。またディレクトリ内の全てのファイルを読み込むためのサブルーチンも用意され"
"ています。"

#. tumbleweed/perl-File-Slurper/summary
msgid "Simple, sane and efficient module to slurp a file"
msgstr "ファイルをすするためのシンプルで健全かつ効率的なモジュール"

#. tumbleweed/perl-File-Temp/description
msgid ""
"'File::Temp' can be used to create and open temporary files in a safe way. "
"There is both a function interface and an object-oriented interface. The "
"File::Temp constructor or the tempfile() function can be used to return the "
"name and the open filehandle of a temporary file. The tempdir() function can "
"be used to create a temporary directory.\n"
"\n"
"The security aspect of temporary file creation is emphasized such that a "
"filehandle and filename are returned together. This helps guarantee that a "
"race condition can not occur where the temporary file is created by another "
"process between checking for the existence of the file and its opening. "
"Additional security levels are provided to check, for example, that the "
"sticky bit is set on world writable directories. See \"safe_level\" for more "
"information.\n"
"\n"
"For compatibility with popular C library functions, Perl implementations of "
"the mkstemp() family of functions are provided. These are, mkstemp(), "
"mkstemps(), mkdtemp() and mktemp().\n"
"\n"
"Additionally, implementations of the standard POSIX tmpnam() and tmpfile() "
"functions are provided if required.\n"
"\n"
"Implementations of mktemp(), tmpnam(), and tempnam() are provided, but "
"should be used with caution since they return only a filename that was valid "
"when function was called, so cannot guarantee that the file will not exist "
"by the time the caller opens the filename.\n"
"\n"
"Filehandles returned by these functions support the seekable methods."
msgstr ""
"'File::Temp' は、一時ファイルの作成とオープンを安全に行なう際に使用するモ"
"ジュールです。関数型のインターフェイスとオブジェクト指向のインターフェイスの"
"両方に対応しています。 File::Temp のコンストラクタや tempfile() 関数は、一時"
"ファイルの名前とファイルハンドルを返すことができます。このほか、 tempdir() 関"
"数は一時ディレクトリを作成する際に使用することができます。\n"
"\n"
"一時ファイルを作成する際にセキュリティを確保するため、ファイルハンドルとファ"
"イル名の両方を返すようになっています。このような仕組みにより、万が一他のプロ"
"セスが同じ一時ファイル名を生成してしまったような場合であっても、いずれか片方"
"のプロセスでファイルを開く際に失敗するため、競合してしまうようなことがなくな"
"ります。もう 1 つのセキュリティレベルとしては、たとえば全ユーザに対して書き込"
"み可能なディレクトリで、 sticky ビットが設定されているかどうかをチェックした"
"りすることもできます。詳しくは \"safe_level' をご覧ください。\n"
"\n"
"有名な C ライブラリ関数との互換関数という意味では、 Perl で実装された "
"mkstemp() ファミリがあります。これらには、 mkstemp(), mkstemps(), mkdtemp(), "
"mktemp() が用意されています。\n"
"\n"
"これに加えて、必要であれば標準的な POSIX の tmpnam() と tmpfile() 関数の実装"
"も提供されています。\n"
"\n"
"mktemp(), tmpnam(), tempnam() の各実装も提供されていますが、これらはファイル"
"名のみが返される仕組みであるため、関数が呼び出された時点でのみ有効であり、そ"
"の名前でファイルを作成する際、ファイルが存在しないことを保証することはできま"
"せん。\n"
"\n"
"これらの関数で返されるファイルハンドルは、いずれも seek に対応しています。"

#. tumbleweed/perl-File-Touch/summary
msgid ""
"Update file access and modification times, optionally creating files if "
"needed"
msgstr ""
"ファイルのアクセス日時と変更日時の更新 (必要であればファイルの作成) モジュー"
"ル"

#. tumbleweed/perl-File-Touch/description
msgid ""
"This module provides both a functional and OO interface for changing the "
"file access and modification times on files. It can optionally create the "
"file for you, if it doesn't exist. \n"
"*Note*: you should specify a minimum version of 0.12, as per the SYNOPSIS, "
"as that fixed an issue that affected systems that have sub-second "
"granularity on those file times.\n"
"\n"
"Here's a list of arguments that can be used with the object-oriented "
"contruction: \n"
"* atime_only => [0|1]\n"
"\n"
"If nonzero, change only the access time of files. Default is zero. \n"
"* mtime_only => [0|1]\n"
"\n"
"If nonzero, change only the modification time of files. Default is zero. \n"
"* no_create => [0|1]\n"
"\n"
"If nonzero, do not create new files. Default is zero. \n"
"* reference => $reference_file\n"
"\n"
"If defined, use timestamps from this file instead of current time. The "
"timestamps are read from the reference file when the object is created, not "
"when '<-'touch>> is invoked. Default is undefined. \n"
"* time => $time\n"
"\n"
"If defined, then this value will be used for both access time and "
"modification time, whichever of those are set. This time is overridden by "
"the 'atime' and 'mtime' arguments, if you use them. \n"
"* atime => $time\n"
"\n"
"If defined, use this time (in epoch seconds) instead of current time for "
"access time. \n"
"* mtime => $time\n"
"\n"
"If defined, use this time (in epoch seconds) instead of current time for "
"modification time."
msgstr ""
"このモジュールは、ファイルへのファイル・アクセスと変更時間を変更するための機"
"能インタフェースとOOインタフェースの両方を提供します。ファイルが存在しない場"
"合は、オプションで作成できます。\n"
"*注*:SYNOPSISに従って、最小バージョン 0.12 を指定する必要があります。これは、"
"ファイル時間が1秒以下のシステムに影響する問題を修正したものです。\n"
"\n"
"下記にオブジェクト指向のコンストラクタを利用する際に指定することができる、パ"
"ラメータの一覧を示します:\n"
"* atime_only => [0|1]\n"
"\n"
"0 以外の値を指定すると、ファイルのアクセス日時のみを変更します。既定は 0 で"
"す。\n"
"* mtime_only => [0|1]\n"
"\n"
"0 以外の値を指定すると、ファイルの更新日時のみを変更します。既定は 0 です。\n"
"* no_create => [0|1]\n"
"\n"
"0 以外の値を指定すると、新しいファイルを作成しなくなります。既定は 0 です。\n"
"* reference => $reference_file\n"
"\n"
"値を指定すると、現在の時刻ではなく指定したファイルのタイムスタンプを利用する"
"ようになります。オブジェクトを作成する際、参照先のファイルからタイムスタンプ"
"を読み込みます。既定では値が指定されていません。\n"
"* time => $time\n"
"\n"
"値を指定すると、アクセス日時と更新日時を指定した値に設定します。 'atime', "
"'mtime' の指定よりも優先して働きます。\n"
"* atime => $time\n"
"\n"
"値を指定すると、アクセス日時として指定した日時 (エポックからの秒数) を使用す"
"るようになります。\n"
"* mtime => $time\n"
"\n"
"値を指定すると、更新日時として指定した日時 (エポックからの秒数) を使用するよ"
"うになります。"

#. tumbleweed/perl-File-TreeCreate/summary
msgid "Recursively create a directory tree"
msgstr "ディレクトリツリーを再帰的に作成"

#. tumbleweed/perl-File-TreeCreate/description
msgid ""
"This module was extracted from several near-identical copies used in the "
"tests of some of my CPAN distributions."
msgstr "このモジュールは、私のCPANディストリビューションのいくつかのテストで使用した、ほぼ同一のコピーから抽出したものです。"

#. tumbleweed/perl-Finance-Quote/description
msgid ""
"This module gets stock quotes from various internet sources all over the "
"world. Quotes are obtained by constructing a quoter object and using the "
"fetch method to gather data, which is returned as a two-dimensional hash (or "
"a reference to such a hash, if called in a scalar context). For example:\n"
"\n"
"    $q = Finance::Quote->new;     %info = $q->fetch(\"australia\", \"CML"
"\");     print \"The price of CML is \".$info{\"CML\", \"price\"};\n"
"\n"
"The first part of the hash (eg, \"CML\") is referred to as the stock. The "
"second part (in this case, \"price\") is referred to as the label."
msgstr ""
"このモジュールは、世界中のさまざまなインターネット・ソースから株価を取得します。quoteはquoterオブジェクトを作成し、fetchメソッドを使用して"
"データを収集することで取得されます。このデータは2次元ハッシュ(または、スカラー・コンテキストで呼び出された場合は、そのようなハッシュへの参照)として返さ"
"れます。例:\n"
"\n"
"    $q = Finance::Quote->new;     %info = $q->fetch(\"australia\", \"CML\");"
"     print \"The price of CML is \".$info{\"CML\", \"price\"};\n"
"\n"
"ハッシュの最初の部分(例、「CML」)はストックとして参照されます。2番目の部分(この場合、「price」)は label と呼ばれます。"

#. tumbleweed/perl-Font-AFM/description
msgid ""
"This module implements the Font::AFM class. Objects of this class are "
"initialized from an AFM file and allow you to obtain information about the "
"font and the metrics of the various glyphs in the font."
msgstr ""
"このモジュールは Font::AFM クラスを実装しています。 このクラスのオブジェクト"
"は AFM ファイルによって初期化され、フォントに関する情報やフォント内の様々なグ"
"リフのメトリックを取得することができます。"

#. tumbleweed/perl-Geo-IP2Location/summary
msgid ""
"Lookup of country, region, city, latitude, longitude, ZIP code, time zon[cut]"
msgstr "国、地域、市、緯度、経度、郵便番号、時刻の検索[cut]"

#. tumbleweed/perl-Geo-IP2Location/description
msgid ""
"This Perl module provides fast lookup of country, region, city, latitude, "
"longitude, ZIP code, time zone, ISP, domain name, connection type, IDD code, "
"area code, weather station code and station, MCC, MNC, mobile carrier brand, "
"elevation, usage type, IP address type and IAB advertising category from IP "
"address using IP2Location database. This module uses a file based BIN "
"database available at at https://www.ip2location.com/database/ip2location "
"upon subscription. You can visit at https://www.ip2location.com/development-"
"libraries to download BIN sample files. This database consists of IP address "
"as keys and other information as values. It supports all IP addresses in "
"IPv4 and IPv6.\n"
"\n"
"This module can be used in many types of project such as:\n"
"\n"
" 1) auto-select the geographically closest mirror server  2) analyze web "
"server logs to determine the countries of visitors  3) credit card fraud "
"detection  4) software export controls  5) display native language and "
"currency  6) prevent password sharing and abuse of service  7) geotargeting "
"in advertisement"
msgstr ""
"このPerlモジュールは、国、地域、都市、緯度、経度、ZIPコード、タイムゾーン、ISP、ドメイン名、接続タイプ、IDDコード、市外局番、気象ステーション"
"コード、ステーション、MCC、MNC、モバイルキャリアブランド、高度、使用タイプ、IPアドレスタイプ、およびIAB広告カテゴリを、IP2Locationデ"
"ータベースを使用してIPアドレスからすばやく検索できます。このモジュールは、ファイルベースのBINデータベースを使用します。BINデータベースは、購読時に"
"https://www.ip2location.com/database/"
"ip2locationから入手できます。BINサンプルファイルをダウンロードするには、https://www.ip2location.com/"
"development-librariesにアクセスしてください。このデータベースは、キーとしてIPアドレス、値としてその他の情報から構成されています。I"
"Pv4およびIPv6のすべてのIPアドレスをサポートします。\n"
"\n"
"このモジュールは、次のような多くの種類のプロジェクトで使用できます。\n"
"\n"
" 1) auto-select the geographically closest mirror server  2) analyze web "
"server logs to determine the countries of visitors  3) credit card fraud "
"detection  4) software export controls  5) display native language and "
"currency  6) prevent password sharing and abuse of service  7) geotargeting "
"in advertisement"

#. tumbleweed/perl-Git-Repository/summary
msgid "Perl interface to Git repositories"
msgstr "Git リポジトリに対する Perl インターフェイス"

#. tumbleweed/perl-Git-Repository/description
msgid ""
"Git::Repository is a Perl interface to Git, for scripted interactions with "
"repositories. It's a low-level interface that allows calling any Git "
"command, whether _porcelain_ or _plumbing_, including bidirectional commands "
"such as 'git commit-tree'.\n"
"\n"
"A Git::Repository object simply provides context to the git commands being "
"run. It is possible to call the 'command()' and 'run()' methods against the "
"class itself, and the context (typically _current working directory_) will "
"be obtained from the options and environment.\n"
"\n"
"As a low-level interface, it provides no sugar for particular Git commands. "
"Specifically, it will not prepare environment variables that individual Git "
"commands may need or use.\n"
"\n"
"However, the 'GIT_DIR' and 'GIT_WORK_TREE' environment variables are "
"special: if the command is run in the context of a Git::Repository object, "
"they will be overridden by the object's 'git_dir' and 'work_tree' "
"attributes, respectively. It is still possible to override them if "
"necessary, using the 'env' option.\n"
"\n"
"Git::Repository requires at least Git 1.5.0, and is expected to support any "
"later version.\n"
"\n"
"See Git::Repository::Tutorial for more code examples."
msgstr ""
"Git::Repository は git に対する Perl インターフェイスで、リポジトリに対してス"
"クリプトから操作ができるようになります。これは様々な git コマンドを実行するこ"
"とができるよう低レベルのインターフェイスとして提供されていて、 _porcelain_ "
"や _plumbing_ 、そして 'git commit-tree' などの双方向コマンドも含まれていま"
"す。\n"
"\n"
"Git::Repository オブジェクトは実行すべき git コマンドに対するコンテキストを提"
"供します。クラス自身に対して 'command()' や 'run()' のメソッドを呼び出すこと"
"ができますし、コンテキスト (一般的にはカレントディレクトリ) はオプションや環"
"境から取得することになります。\n"
"\n"
"低レベルなインターフェイスであることから、特定の git コマンドに対するシュガー"
"は提供されていません。特に個別の git コマンドを実行する際に必要となる環境変数"
"の準備などは行ないません。\n"
"\n"
"しかしながら、 'GIT_DIR' および 'GIT_WORK_TREE' の各環境変数は特別なものとし"
"ています。 Git::Repository オブジェクトのコンテキスト内でコマンドを実行した場"
"合、これらはオブジェクトの 'git_dir' および 'work_tree' の属性でそれぞれ上書"
"きされます。必要であれば 'env' オプションで上書きすることもできます。\n"
"\n"
"Git::Repository では最低でも git 1.5.0 が必要です。それ以降のバージョンもサ"
"ポートされているはずです。\n"
"\n"
"コードの作成方法について、詳しくは Git::Repository::Tutorial をお読みくださ"
"い。"

#. tumbleweed/perl-Git-Repository-Plugin-Log/summary
msgid "Add a log() method to Git::Repository"
msgstr "Git::Repository に対する log() メソッドの追加"

#. tumbleweed/perl-Git-Repository-Plugin-Log/description
msgid "This module adds a new method to Git::Repository."
msgstr "このモジュールは、 Git::Repository に新しいメソッドを追加します。"

#. tumbleweed/perl-GooCanvas2/summary
msgid "Perl binding for GooCanvas2 widget using Glib::Object::Introspection"
msgstr ""
"Glib::Object::Introspection を利用した GooCanvas2 ウイジェットに対する Perl "
"バインディング"

#. tumbleweed/perl-GooCanvas2/description
msgid ""
"GooCanvas2 is a new canvas widget for use with Gtk3 that uses the Cairo 2d "
"library for drawing. This is a simple and basic implementation of this "
"wonderful Canvas widget.\n"
"\n"
"For more informations see https://wiki.gnome.org/action/show/Projects/"
"GooCanvas\n"
"\n"
"For instructions, how to use GooCanvas2, please study the API reference at "
"https://developer.gnome.org/goocanvas/unstable/ for now. A perl-specific "
"documentation will perhaps come in later versions. But applying the C "
"documentation should be no problem."
msgstr ""
"GooCanvas2 は gtk3 を使用する新しいキャンバスウイジェットで、 Cairo 2D ライブ"
"ラリを利用して描画を行ないます。これは、この素晴らしい Canvas ウイジェットに"
"対するシンプルで基本的な実装です。\n"
"\n"
"詳しい情報については https://wiki.gnome.org/action/show/Projects/GooCanvas を"
"お読みください。\n"
"\n"
"GooCanvas2 の使用方法などの手順については、今のところ https://developer."
"gnome.org/goocanvas/unstable/ をお読みください。 Perl 固有のドキュメンテー"
"ションは、おそらく将来のバージョンで提供される予定です。ただし、 C 言語のド"
"キュメンテーションをそのままお読みいただいても問題はないはずです。"

#. tumbleweed/perl-Graph/summary
msgid "Graph data structures and algorithms"
msgstr "データ構造やアルゴリズムのグラフ化"

#. tumbleweed/perl-Gtk3-ImageView/summary
msgid "Image viewer widget for Gtk3"
msgstr "Gtk3 用イメージビューワウィジット"

#. tumbleweed/perl-Gtk3-ImageView/description
msgid ""
"The Gtk3::ImageView widget allows the user to zoom, pan and select the "
"specified image and provides hooks to allow additional tools, e.g. painter, "
"to be created and used.\n"
"\n"
"Gtk3::ImageView is a Gtk3 port of Gtk2::ImageView.\n"
"\n"
"To discuss Gtk3::ImageView or gtk3-perl, ask questions and flame/praise the "
"authors, join gtk-perl-list@gnome.org at lists.gnome.org."
msgstr ""
"Gtk3::ImageView ウィジットを使用すると、指定したイメージをズーム、パン、およ"
"び選択できます。また、追加のツール(ペインタなど)を作成して使用できるようにす"
"るためのフックも用意されています。\n"
"\n"
"Gtk3::ImageView は、Gtk2::ImageView の Gtk3 ポートです。\n"
"\n"
"Gtk3::ImageView や gtk3-perl に関する議論、著者への質問やクレーム、賞賛につい"
"ては、 gtk-perl-list@gnome.org (lists.gnome.org) のメーリングリストにお送りく"
"ださい。"

#. tumbleweed/perl-Gtk3-SimpleList/summary
msgid "Simple interface to Gtk3's complex MVC list widget"
msgstr "Gtk3 の複雑な MVC リストウィジット向けのシンプルインターフェイス"

#. tumbleweed/perl-Gtk3-SimpleList/description
msgid ""
"Gtk3 has a powerful, but complex MVC (Model, View, Controller) system used "
"to implement list and tree widgets. Gtk3::SimpleList automates the complex "
"setup work and allows you to treat the list model as a more natural list of "
"lists structure.\n"
"\n"
"After creating a new Gtk3::SimpleList object with the desired columns you "
"may set the list data with a simple Perl array assignment. Rows may be added "
"or deleted with all of the normal array operations. You can treat the 'data' "
"member of the list simplelist object as an array reference, and manipulate "
"the list data with perl's normal array operators.\n"
"\n"
"A mechanism has also been put into place allowing columns to be Perl "
"scalars. The scalar is converted to text through Perl's normal mechanisms "
"and then displayed in the list. This same mechanism can be expanded by "
"defining arbitrary new column types before calling the new function."
msgstr ""
"Gtk3 はパワフルではありますが、複雑な MVC (モデル, ビュー, コントローラ) を使"
"用してリストやツリーのウイジェットを実装しています。 Gtk3::SimpleList はこの"
"ような複雑なセットアップ作業を簡略化し、リスト構造を自然に取り扱うことができ"
"るようになります。\n"
"\n"
"Gtk3::SimpleList を作成したあとは、単純な Perl の配列としてリストデータに割り"
"当てる列を指定します。行は通常の配列操作と同じ形式で追加や削除を行なうことが"
"できます。 'data' というメンバーは単純な配列の参照として使用できますので、 "
"Perl の一般的な配列操作でリストデータを扱うことができます。\n"
"\n"
"同様に列についても Perl のスカラー値として扱うことができます。スカラー値は "
"Perl の通常の仕組みでテキストに変換され、リスト内に表示されるようになります。"
"また、新しい関数を呼び出す前に、新しい列タイプを作成しておくことで、任意の列"
"タイプを作成することもできます。"

#. tumbleweed/perl-HTML-Form/description
msgid ""
"Objects of the 'HTML::Form' class represents a single HTML '<form> ... </"
"form>' instance. A form consists of a sequence of inputs that usually have "
"names, and which can take on various values. The state of a form can be "
"tweaked and it can then be asked to provide HTTP::Request objects that can "
"be passed to the request() method of LWP::UserAgent."
msgstr ""
"'HTML::Form' クラスのオブジェクトは、 1 つの '<form>...</form>' (フォーム) イ"
"ンスタンスを表わします。フォームには名前など、様々な値のタイプを取り得る入力"
"項目が用意されます。フォームの状態を調整できる仕組みがあることから、 LWP::"
"UserAgent のメソッド request() に渡すことのできる 'HTTP::Request' オブジェク"
"トを提供するようにすることもできます。"

#. tumbleweed/perl-HTML-FromANSI-Tiny/summary
msgid "Easily convert colored command line output to HTML"
msgstr "色付きコマンドライン出力を簡単にHTMLに変換"

#. tumbleweed/perl-HTML-FromANSI-Tiny/description
msgid ""
"Convert the output from a terminal command that is decorated with ANSI "
"escape sequences into customizable HTML (with a small amount of code).\n"
"\n"
"This module complements Parse::ANSIColor::Tiny by providing a simple HTML "
"markup around its output.\n"
"\n"
"Parse::ANSIColor::Tiny returns a data structure that's easy to reformat into "
"any desired output. Reformatting to HTML seemed simple and common enough to "
"warrant this module as well."
msgstr ""
"ANSIエスケープシーケンスで修飾された端末コマンドからの出力を、カスタマイズ可能なHTMLに(少量のコードで)変換します。\n"
"\n"
"このモジュールはParse::ANSIColor::Tinyを補完するもので、出力の周りに単純なマークアップを提供します。\n"
"\n"
"Parse::ANSIColor::Tinyは、任意の出力に簡単に再フォーマットできるデータ構造体を返します。HTMLへの再フォーマットは、このモジュール"
"を保証するのに十分なほど単純で一般的に思えました。"

#. tumbleweed/perl-HTML-Restrict/summary
msgid "Strip unwanted HTML tags and attributes"
msgstr "希望しない HTML タグと属性を削除"

#. tumbleweed/perl-HTML-Restrict/description
msgid ""
"This module uses HTML::Parser to strip HTML from text in a restrictive "
"manner. By default all HTML is restricted. You may alter the default "
"behaviour by supplying your own tag rules."
msgstr ""
"このモジュールは、HTML::Parserを使用して、テキストからHTMLを制限的に除去しま"
"す。既定では、すべてのHTMLが制限されています。独自のタグ規則を指定すること"
"で、既定の動作を変更できます。"

#. tumbleweed/perl-HTML-Selector-XPath/summary
msgid "CSS Selector to XPath compiler"
msgstr "CSS SelectorからXPathコンパイラへ"

#. tumbleweed/perl-HTML-Selector-XPath/description
msgid ""
"HTML::Selector::XPath is a utility function to compile full set of CSS2 and "
"partial CSS3 selectors to the equivalent XPath expression."
msgstr ""
"HTML::Selector::XPathは、CSS2セレクターの完全なセットとCSS3セレクターの一部を同等のXPath式にコンパイルするユーティリティ"
"関数です。"

#. tumbleweed/perl-HTML-TreeBuilder-XPath/summary
msgid "Add XPath support to HTML::TreeBuilder"
msgstr "HTML::TreeBuilderへのXPathサポートの追加"

#. tumbleweed/perl-HTML-TreeBuilder-XPath/description
msgid ""
"This module adds typical XPath methods to HTML::TreeBuilder, to make it easy "
"to query a document."
msgstr "このモジュールは、一般的なXPathメソッドをHTML::TreeBuilderに追加して、文書のクエリーを簡単に行えるようにします。"

#. tumbleweed/perl-HTTP-BrowserDetect/summary
msgid ""
"Determine Web browser, version, and platform from an HTTP user agent string"
msgstr ""
"HTTP のユーザエージェント文字列からの Web ブラウザとバージョン、プラット"
"フォームの判別"

#. tumbleweed/perl-HTTP-BrowserDetect/description
msgid ""
"The HTTP::BrowserDetect object does a number of tests on an HTTP user agent "
"string. The results of these tests are available via methods of the object.\n"
"\n"
"For an online demonstration of this module's parsing, you can check out "
"http://www.browserdetect.org/\n"
"\n"
"This module was originally based upon the JavaScript browser detection code "
"available at http://www.mozilla.org/docs/web-developer/sniffer/browser_type."
"html."
msgstr ""
"HTTP::BrowserDetect は HTTP の User-Agent 文字列に対する多数のテストを実施し"
"ます。これらのテストの結果は、オブジェクトに対するメソッドとして利用すること"
"ができます。\n"
"\n"
"このモジュールの処理をオンラインで確認したい場合は、 http://www."
"browserdetect.org/ をご覧ください。\n"
"\n"
"このモジュールは元々、 http://www.mozilla.org/docs/web-developer/sniffer/"
"browser_type.html にある JavaScript のブラウザ検出コードを元にしています。"

#. tumbleweed/perl-HTTP-CookieJar/summary
msgid "Minimalist HTTP user agent cookie jar"
msgstr "ミニマリストの HTTP ユーザエージェントクッキー jar"

#. tumbleweed/perl-HTTP-CookieJar/description
msgid ""
"This module implements a minimalist HTTP user agent cookie jar in "
"conformance with at http://tools.ietf.org/html/rfc6265.\n"
"\n"
"Unlike the commonly used HTTP::Cookies module, this module does not require "
"use of HTTP::Request and HTTP::Response objects. An LWP-compatible adapter "
"is available as HTTP::CookieJar::LWP."
msgstr ""
"このモジュールは、http://tools.ietf.org/html/rfc6265に準拠して、最小限のHTTP"
"ユーザーエージェントcookie jarを実装します。\n"
"\n"
"一般的に使用されるHTTP::Cookiesモジュールとは異なり、このモジュールではHTTP::"
"RequestオブジェクトとHTTP::Responseオブジェクトを使用する必要はありません。"
"LWP互換アダプタは、HTTP::CookieJar::LWPとして使用できます。"

#. tumbleweed/perl-HTTP-CookieMonster/summary
msgid "Easy read/write access to your jar of HTTP::Cookies"
msgstr "HTTP::Cookiesのjarファイルへの容易な読み取り/書き込みアクセス"

#. tumbleweed/perl-HTTP-CookieMonster/description
msgid ""
"This module was created because messing around with HTTP::Cookies is non-"
"trivial. HTTP::Cookies a very useful module, but using it is not always as "
"easy and clean as it could be. For instance, if you want to find a "
"particular cookie, you can't just ask for it by name."
msgstr ""
"このモジュールが作成されたのは、HTTP::Cookiesをいじるのは簡単ではないからで"
"す。HTTP::Cookiesは非常に便利なモジュールですが、それを使用することは必ずしも"
"簡単でクリーンであるとは限りません。例えば、特定のクッキーを見つけたい場合、"
"名前だけでそれを要求することはできません。"

#. tumbleweed/perl-HTTP-Cookies/description
msgid ""
"This class is for objects that represent a \"cookie jar\" -- that is, a "
"database of all the HTTP cookies that a given LWP::UserAgent object knows "
"about.\n"
"\n"
"Cookies are a general mechanism which server side connections can use to "
"both store and retrieve information on the client side of the connection. "
"For more information about cookies refer to at http://curl.haxx.se/rfc/"
"cookie_spec.html and at http://www.cookiecentral.com. This module also "
"implements the new style cookies described in at https://tools.ietf.org/html/"
"rfc2965. The two variants of cookies are supposed to be able to coexist "
"happily.\n"
"\n"
"Instances of the class _HTTP::Cookies_ are able to store a collection of Set-"
"Cookie2: and Set-Cookie: headers and are able to use this information to "
"initialize Cookie-headers in _HTTP::Request_ objects. The state of a _HTTP::"
"Cookies_ object can be saved in and restored from files."
msgstr ""
"このクラスは \"cookie jar\" を表わすオブジェクト向けのものです。言い換えれ"
"ば、すべての LWP::UserAgent オブジェクトが知っているすべての HTTP Cookie の"
"データベースです。\n"
"\n"
"Cookie とは接続とは独立した仕組みで、サーバ側の接続情報をクライアント側に保存"
"したり、それを問い合わせたりするための仕組みです。 Cookie について、詳しくは"
"<URL:http://curl.haxx.se/rfc/cookie_spec.html> と <URL:http://www."
"cookiecentral.com/>をお読みください。また、このモジュールでは https://tools."
"ietf.org/html/rfc2965 で規定される新しいスタイルのCookie も実装しています。 "
"Cookie に対する 2 つの形式は問題なく共存可能です。\n"
"\n"
"また、 _HTTP::Cookies_ クラスのインスタンスは、 Set-Cookie2: や Set-Cookie: "
"のヘッダを集めて保存することができるほか、この情報を利用して _HTTP::Request_ "
"オブジェクト内の Cookie ヘッダを初期化することもできます。 HTTP::Cookies_ オ"
"ブジェクトの状態は、ファイルに保存したり、ファイルから復元したりすることもで"
"きます。"

#. tumbleweed/perl-HTTP-Daemon/summary
msgid "Simple http server class"
msgstr "シンプルな http サーバクラス"

#. tumbleweed/perl-HTTP-Daemon/description
msgid ""
"Instances of the 'HTTP::Daemon' class are HTTP/1.1 servers that listen on a "
"socket for incoming requests. The 'HTTP::Daemon' is a subclass of 'IO::"
"Socket::IP', so you can perform socket operations directly on it too.\n"
"\n"
"Please note that 'HTTP::Daemon' used to be a subclass of 'IO::Socket::INET'. "
"To support IPv6, it switched the parent class to 'IO::Socket::IP' at version "
"6.05. See IPv6 SUPPORT for details.\n"
"\n"
"The accept() method will return when a connection from a client is "
"available. The returned value will be an 'HTTP::Daemon::ClientConn' object "
"which is another 'IO::Socket::IP' subclass. Calling the get_request() method "
"on this object will read data from the client and return an 'HTTP::Request' "
"object. The ClientConn object also provide methods to send back various "
"responses."
msgstr ""
"'HTTP::Daemon' クラスのインスタンスは、要求を待ち受ける HTTP/1.1 サーバとなり"
"ます。 'HTTP::Daemon' は 'IO::Socket::INET' のサブクラスであるため、ソケット"
"に対する直接操作も実施することができます。\n"
"\n"
"'HTTP::Daemon'は'IO::Socket::INET'のサブクラスだったということに注意してくだ"
"さい。IPv6をサポートするために、バージョン6.05で親クラスを'IO::Socket::IP'に"
"切り替えました。詳細はIPv6サポートを参照してください。\n"
"\n"
"クライアントからの接続が到着すると、 accept() メソッドの呼び出しが返却されま"
"す。返却された値は 'HTTP::Daemon::ClientConn' オブジェクトのインスタンスで、"
"こちらは 'IO::Socket::IP' のサブクラスです。このオブジェクトに対して "
"get_request() メソッドを呼び出すと、クライアントからのデータを読み込ん"
"で'HTTP::Request' のインスタンスを返却します。 ClientConn オブジェクトでは、"
"様々な応答を返すためのメソッドが用意されています。"

#. tumbleweed/perl-HTTP-Date/summary
msgid "HTTP::Date - date conversion routines"
msgstr "HTTP::Date - 日付変換ルーチン"

#. tumbleweed/perl-HTTP-Date/description
msgid ""
"This module provides functions that deal the date formats used by the HTTP "
"protocol (and then some more). Only the first two functions, time2str() and "
"str2time(), are exported by default. \n"
"* time2str( [$time] )\n"
"\n"
"The time2str() function converts a machine time (seconds since epoch) to a "
"string. If the function is called without an argument or with an undefined "
"argument, it will use the current time.\n"
"\n"
"The string returned is in the format preferred for the HTTP protocol. This "
"is a fixed length subset of the format defined by RFC 1123, represented in "
"Universal Time (GMT). An example of a time stamp in this format is:\n"
"\n"
"   Sun, 06 Nov 1994 08:49:37 GMT \n"
"* str2time( $str [, $zone] )\n"
"\n"
"The str2time() function converts a string to machine time. It returns "
"'undef' if the format of $str is unrecognized, otherwise whatever the 'Time::"
"Local' functions can make out of the parsed time. Dates before the system's "
"epoch may not work on all operating systems. The time formats recognized are "
"the same as for parse_date().\n"
"\n"
"The function also takes an optional second argument that specifies the "
"default time zone to use when converting the date. This parameter is ignored "
"if the zone is found in the date string itself. If this parameter is "
"missing, and the date string format does not contain any zone specification, "
"then the local time zone is assumed.\n"
"\n"
"If the zone is not \"'GMT'\" or numerical (like \"'-0800'\" or \"'+0100'\"), "
"then the 'Time::Zone' module must be installed in order to get the date "
"recognized. \n"
"* parse_date( $str )\n"
"\n"
"This function will try to parse a date string, and then return it as a list "
"of numerical values followed by a (possible undefined) time zone specifier; "
"($year, $month, $day, $hour, $min, $sec, $tz). The $year will be the full 4-"
"digit year, and $month numbers start with 1 (for January).\n"
"\n"
"In scalar context the numbers are interpolated in a string of the \"YYYY-MM-"
"DD hh:mm:ss TZ\"-format and returned.\n"
"\n"
"If the date is unrecognized, then the empty list is returned ('undef' in "
"scalar context).\n"
"\n"
"The function is able to parse the following formats:\n"
"\n"
" \"Wed, 09 Feb 1994 22:23:32 GMT\"       -- HTTP format  \"Thu Feb  3 "
"17:03:55 GMT 1994\"        -- ctime(3) format  \"Thu Feb  3 00:00:00 "
"1994\",           -- ANSI C asctime() format  \"Tuesday, 08-Feb-94 14:15:29 "
"GMT\"     -- old rfc850 HTTP format  \"Tuesday, 08-Feb-1994 14:15:29 GMT\"   "
"-- broken rfc850 HTTP format\n"
"\n"
" \"03/Feb/1994:17:03:55 -0700\"   -- common logfile format  \"09 Feb 1994 "
"22:23:32 GMT\"     -- HTTP format (no weekday)  \"08-Feb-94 14:15:29 GMT"
"\"       -- rfc850 format (no weekday)  \"08-Feb-1994 14:15:29 GMT\"     -- "
"broken rfc850 format (no weekday)\n"
"\n"
" \"1994-02-03 14:15:29 -0100\"    -- ISO 8601 format  \"1994-02-03 "
"14:15:29\"          -- zone is optional  \"1994-02-03\"                   -- "
"only date  \"1994-02-03T14:15:29\"          -- Use T as separator  "
"\"19940203T141529Z\"             -- ISO 8601 compact format  "
"\"19940203\"                     -- only date\n"
"\n"
" \"08-Feb-94\"         -- old rfc850 HTTP format    (no weekday, no time)  "
"\"08-Feb-1994\"       -- broken rfc850 HTTP format (no weekday, no time)  "
"\"09 Feb 1994\"       -- proposed new HTTP format  (no weekday, no time)  "
"\"03/Feb/1994\"       -- common logfile format     (no time, no offset)\n"
"\n"
" \"Feb  3  1994\"      -- Unix 'ls -l' format  \"Feb  3 17:03\"      -- Unix "
"'ls -l' format\n"
"\n"
" \"11-15-96  03:52PM\" -- Windows 'dir' format\n"
"\n"
"The parser ignores leading and trailing whitespace. It also allow the "
"seconds to be missing and the month to be numerical in most formats.\n"
"\n"
"If the year is missing, then we assume that the date is the first matching "
"date _before_ current month. If the year is given with only 2 digits, then "
"parse_date() will select the century that makes the year closest to the "
"current date. \n"
"* time2iso( [$time] )\n"
"\n"
"Same as time2str(), but returns a \"YYYY-MM-DD hh:mm:ss\"-formatted string "
"representing time in the local time zone. \n"
"* time2isoz( [$time] )\n"
"\n"
"Same as time2str(), but returns a \"YYYY-MM-DD hh:mm:ssZ\"-formatted string "
"representing Universal Time."
msgstr ""
"このモジュールは HTTP プロトコルで使用される日時文字列を扱うための関数を提供"
"します。既定では最初の 2 つの関数 (time2str(), str2time()) のみを公開していま"
"す。\n"
"* time2str( [$time] )\n"
"\n"
"time2str() 関数は機械時刻 (エポック日時からの経過秒数) を文字列に変換します。"
"パラメータ無しで関数を呼び出した場合や、未定義の値を指定した場合、現在時刻を"
"利用します。\n"
"\n"
"返却される文字列は HTTP プロトコルで推奨されている書式です。 RFC 1123 で定義"
"されている固定長形式で、 Universal Time (GMT) を利用して表現されます。この形"
"式での出力例は下記のとおりです:\n"
"\n"
"   Sun, 06 Nov 1994 08:49:37 GMT \n"
"* str2time( $str [, $zone] )\n"
"\n"
"str2time() 関数は文字列を機械時刻に変換します。 $str が解釈できない文字列であ"
"る場合は 'undef' を返しますが、解釈できた場合は 'Time::Local' 関数で処理する"
"ことのできる日時になります。エポック日時よりも前の日時であった場合は、オペ"
"レーティングシステムによっては動作しないかもしれません。認識可能な形式は "
"parse_date() と同じです。\n"
"\n"
"この関数はオプションで 2 つめのパラメータを指定することができます。これは日時"
"を変換する際の既定のタイムゾーンを指定するためのもので、文字列内にタイムゾー"
"ンを表わす文字列が存在した場合には、パラメータ側が無視されます。パラメータが"
"指定されない場合で、文字列内にタイムゾーン情報が存在しない場合は、ローカルの"
"タイムゾーン情報を使用します。\n"
"\n"
"タイムゾーンが \"'GMT'\" や数値表現 (例: \"'-0800'\" or \"'+0100'\") でない場"
"合、タイムゾーン情報を取得する際に 'Time::Zone' モジュールをインストールして"
"おかなければなりません。 \n"
"* parse_date( $str )\n"
"\n"
"この関数は日時文字列を処理しようと試みて、日時の数値表現とタイムゾーン情報 "
"(未定義の場合もあります) を返します: ($year, $month, $day, $hour, $min, "
"$sec, $tz) る $year は 4 桁の完全な年となるほか、 $month は 1 月を 1 として表"
"わします。\n"
"\n"
"スカラーコンテキストの場合、 \"YYYY-MM-DD hh:mm:ss TZ\" の文字列書式で返却さ"
"れます。\n"
"\n"
"日時が解釈できない場合は、空のリストを返します (スカラーの場合は 'undef' にな"
"ります) 。\n"
"\n"
"この関数は下記の書式を処理することができます:\n"
"\n"
" \"Wed, 09 Feb 1994 22:23:32 GMT\"       -- HTTP 形式\n"
" \"Thu Feb  3 17:03:55 GMT 1994\"        -- ctime(3) 形式\n"
" \"Thu Feb  3 00:00:00 1994\",           -- ANSI C asctime() 形式\n"
" \"Tuesday, 08-Feb-94 14:15:29 GMT\"     -- 古い rfc850 HTTP 形式\n"
" \"Tuesday, 08-Feb-1994 14:15:29 GMT\"   -- 壊れた rfc850 HTTP 形式\n"
"\n"
" \"03/Feb/1994:17:03:55 -0700\"   -- 汎用ログファイル形式\n"
" \"09 Feb 1994 22:23:32 GMT\"     -- HTTP 形式 (曜日無し)\n"
" \"08-Feb-94 14:15:29 GMT\"       -- rfc850 形式 (曜日無し)\n"
" \"08-Feb-1994 14:15:29 GMT\"     -- 壊れた rfc850 形式 (曜日無し)\n"
"\n"
" \"1994-02-03 14:15:29 -0100\"    -- ISO 8601 形式\n"
" \"1994-02-03 14:15:29\"          -- タイムゾーン省略\n"
" \"1994-02-03\"                   -- 日付のみ\n"
" \"1994-02-03T14:15:29\"          -- T を区切り文字としている例\n"
" \"19940203T141529Z\"             -- ISO 8601 の短い形式\n"
" \"19940203\"                     -- 日付のみ\n"
"\n"
" \"08-Feb-94\"         -- 古い rfc850 HTTP 形式    (曜日／時刻無し)\n"
" \"08-Feb-1994\"       -- 壊れた rfc850 HTTP 形式 (曜日／時刻無し)\n"
" \"09 Feb 1994\"       -- 提案中の新しい HTTP 形式  (曜日／時刻無し)\n"
" \"03/Feb/1994\"       -- 汎用ログファイル形式     (時刻／オフセット無し)\n"
"\n"
" \"Feb  3  1994\"      -- Unix の 'ls -l' 形式\n"
" \"Feb  3 17:03\"      -- Unix の 'ls -l' 形式\n"
"\n"
" \"11-15-96  03:52PM\" -- Windows の 'dir' での出力形式\n"
"\n"
"パーサは空白を無視するほか、秒が存在しない場合や月が数値で表わされている場合"
"にも対応することができます。\n"
"\n"
"年が記述されていない場合、現在の月以降で該当しうる年を自動的に検索します。ま"
"た年が 2 桁であった場合、 parse_date() は現在の世紀から最も近い年を検索して使"
"用します。\n"
"* time2iso( [$time] )\n"
"\n"
"time2str() と同じですが、ローカルのタイムゾーンで \"YYYY-MM-DD hh:mm:ss\" 形"
"式を返します。\n"
"* time2isoz( [$time] )\n"
"\n"
"Same as time2str() と同じですが、 UTC で \"YYYY-MM-DD hh:mm:ssZ\" 形式を返し"
"ます。"

#. tumbleweed/perl-HTTP-Headers-Fast/summary
msgid "Faster implementation of HTTP::Headers"
msgstr "HTTP::Headers のより高速な実装"

#. tumbleweed/perl-HTTP-Message/description
msgid ""
"An 'HTTP::Message' object contains some headers and a content body. The "
"following methods are available: \n"
"* $mess = HTTP::Message->new \n"
"* $mess = HTTP::Message->new( $headers ) \n"
"* $mess = HTTP::Message->new( $headers, $content )\n"
"\n"
"This constructs a new message object. Normally you would want construct "
"'HTTP::Request' or 'HTTP::Response' objects instead.\n"
"\n"
"The optional $header argument should be a reference to an 'HTTP::Headers' "
"object or a plain array reference of key/value pairs. If an 'HTTP::Headers' "
"object is provided then a copy of it will be embedded into the constructed "
"message, i.e. it will not be owned and can be modified afterwards without "
"affecting the message.\n"
"\n"
"The optional $content argument should be a string of bytes. \n"
"* $mess = HTTP::Message->parse( $str )\n"
"\n"
"This constructs a new message object by parsing the given string. \n"
"* $mess->headers\n"
"\n"
"Returns the embedded 'HTTP::Headers' object. \n"
"* $mess->headers_as_string \n"
"* $mess->headers_as_string( $eol )\n"
"\n"
"Call the as_string() method for the headers in the message. This will be the "
"same as\n"
"\n"
"    $mess->headers->as_string\n"
"\n"
"but it will make your program a whole character shorter :-) \n"
"* $mess->content \n"
"* $mess->content( $bytes )\n"
"\n"
"The content() method sets the raw content if an argument is given. If no "
"argument is given the content is not touched. In either case the original "
"raw content is returned.\n"
"\n"
"If the 'undef' argument is given, the content is reset to its default value, "
"which is an empty string.\n"
"\n"
"Note that the content should be a string of bytes. Strings in perl can "
"contain characters outside the range of a byte. The 'Encode' module can be "
"used to turn such strings into a string of bytes. \n"
"* $mess->add_content( $bytes )\n"
"\n"
"The add_content() methods appends more data bytes to the end of the current "
"content buffer. \n"
"* $mess->add_content_utf8( $string )\n"
"\n"
"The add_content_utf8() method appends the UTF-8 bytes representing the "
"string to the end of the current content buffer. \n"
"* $mess->content_ref \n"
"* $mess->content_ref( \\$bytes )\n"
"\n"
"The content_ref() method will return a reference to content buffer string. "
"It can be more efficient to access the content this way if the content is "
"huge, and it can even be used for direct manipulation of the content, for "
"instance:\n"
"\n"
"  ${$res->content_ref} =~ s/\\bfoo\\b/bar/g;\n"
"\n"
"This example would modify the content buffer in-place.\n"
"\n"
"If an argument is passed it will setup the content to reference some "
"external source. The content() and add_content() methods will automatically "
"dereference scalar references passed this way. For other references "
"content() will return the reference itself and add_content() will refuse to "
"do anything. \n"
"* $mess->content_charset\n"
"\n"
"This returns the charset used by the content in the message. The charset is "
"either found as the charset attribute of the 'Content-Type' header or by "
"guessing.\n"
"\n"
"See http://www.w3.org/TR/REC-html40/charset.html#spec-char-encoding for "
"details about how charset is determined. \n"
"* $mess->decoded_content( %options )\n"
"\n"
"Returns the content with any 'Content-Encoding' undone and, for textual "
"content ('Content-Type' values starting with 'text/', exactly matching "
"'application/xml', or ending with '+xml'), the raw content's character set "
"decoded into Perl's Unicode string format. Note that this at https://github."
"com/libwww-perl/HTTP-Message/pull/99 attempt to decode declared character "
"sets for any other content types like 'application/json' or 'application/"
"javascript'. If the 'Content-Encoding' or 'charset' of the message is "
"unknown, this method will fail by returning 'undef'.\n"
"\n"
"The following options can be specified.\n"
"\n"
"  * 'charset'\n"
"\n"
"This override the charset parameter for text content. The value 'none' can "
"used to suppress decoding of the charset.\n"
"\n"
"  * 'default_charset'\n"
"\n"
"This override the default charset guessed by content_charset() or if that "
"fails \"ISO-8859-1\".\n"
"\n"
"  * 'alt_charset'\n"
"\n"
"If decoding fails because the charset specified in the Content-Type header "
"isn't recognized by Perl's Encode module, then try decoding using this "
"charset instead of failing. The 'alt_charset' might be specified as 'none' "
"to simply return the string without any decoding of charset as alternative.\n"
"\n"
"  * 'charset_strict'\n"
"\n"
"Abort decoding if malformed characters is found in the content. By default "
"you get the substitution character (\"\\x{FFFD}\") in place of malformed "
"characters.\n"
"\n"
"  * 'raise_error'\n"
"\n"
"If TRUE then raise an exception if not able to decode content. Reason might "
"be that the specified 'Content-Encoding' or 'charset' is not supported. If "
"this option is FALSE, then decoded_content() will return 'undef' on errors, "
"but will still set $@.\n"
"\n"
"  * 'ref'\n"
"\n"
"If TRUE then a reference to decoded content is returned. This might be more "
"efficient in cases where the decoded content is identical to the raw content "
"as no data copying is required in this case. \n"
"* $mess->decodable \n"
"* HTTP::Message::decodable()\n"
"\n"
"This returns the encoding identifiers that decoded_content() can process. In "
"scalar context returns a comma separated string of identifiers.\n"
"\n"
"This value is suitable for initializing the 'Accept-Encoding' request header "
"field. \n"
"* $mess->decode\n"
"\n"
"This method tries to replace the content of the message with the decoded "
"version and removes the 'Content-Encoding' header. Returns TRUE if "
"successful and FALSE if not.\n"
"\n"
"If the message does not have a 'Content-Encoding' header this method does "
"nothing and returns TRUE.\n"
"\n"
"Note that the content of the message is still bytes after this method has "
"been called and you still need to call decoded_content() if you want to "
"process its content as a string. \n"
"* $mess->encode( $encoding, ... )\n"
"\n"
"Apply the given encodings to the content of the message. Returns TRUE if "
"successful. The \"identity\" (non-)encoding is always supported; other "
"currently supported encodings, subject to availability of required "
"additional modules, are \"gzip\", \"deflate\", \"x-bzip2\" and \"base64\".\n"
"\n"
"A successful call to this function will set the 'Content-Encoding' header.\n"
"\n"
"Note that 'multipart/*' or 'message/*' messages can't be encoded and this "
"method will croak if you try. \n"
"* $mess->parts \n"
"* $mess->parts( @parts ) \n"
"* $mess->parts( \\@parts )\n"
"\n"
"Messages can be composite, i.e. contain other messages. The composite "
"messages have a content type of 'multipart/*' or 'message/*'. This method "
"give access to the contained messages.\n"
"\n"
"The argumentless form will return a list of 'HTTP::Message' objects. If the "
"content type of $msg is not 'multipart/*' or 'message/*' then this will "
"return the empty list. In scalar context only the first object is returned. "
"The returned message parts should be regarded as read-only (future versions "
"of this library might make it possible to modify the parent by modifying the "
"parts).\n"
"\n"
"If the content type of $msg is 'message/*' then there will only be one part "
"returned.\n"
"\n"
"If the content type is 'message/http', then the return value will be either "
"an 'HTTP::Request' or an 'HTTP::Response' object.\n"
"\n"
"If a @parts argument is given, then the content of the message will be "
"modified. The array reference form is provided so that an empty list can be "
"provided. The @parts array should contain 'HTTP::Message' objects. The "
"@parts objects are owned by $mess after this call and should not be modified "
"or made part of other messages.\n"
"\n"
"When updating the message with this method and the old content type of $mess "
"is not 'multipart/*' or 'message/*', then the content type is set to "
"'multipart/mixed' and all other content headers are cleared.\n"
"\n"
"This method will croak if the content type is 'message/*' and more than one "
"part is provided. \n"
"* $mess->add_part( $part )\n"
"\n"
"This will add a part to a message. The $part argument should be another "
"'HTTP::Message' object. If the previous content type of $mess is not "
"'multipart/*' then the old content (together with all content headers) will "
"be made part #1 and the content type made 'multipart/mixed' before the new "
"part is added. The $part object is owned by $mess after this call and should "
"not be modified or made part of other messages.\n"
"\n"
"There is no return value. \n"
"* $mess->clear\n"
"\n"
"Will clear the headers and set the content to the empty string. There is no "
"return value \n"
"* $mess->protocol \n"
"* $mess->protocol( $proto )\n"
"\n"
"Sets the HTTP protocol used for the message. The protocol() is a string like "
"'HTTP/1.0' or 'HTTP/1.1'. \n"
"* $mess->clone\n"
"\n"
"Returns a copy of the message object. \n"
"* $mess->as_string \n"
"* $mess->as_string( $eol )\n"
"\n"
"Returns the message formatted as a single string.\n"
"\n"
"The optional $eol parameter specifies the line ending sequence to use. The "
"default is \"\\n\". If no $eol is given then as_string will ensure that the "
"returned string is newline terminated (even when the message content is "
"not). No extra newline is appended if an explicit $eol is passed. \n"
"* $mess->dump( %opt )\n"
"\n"
"Returns the message formatted as a string. In void context print the "
"string.\n"
"\n"
"This differs from '$mess->as_string' in that it escapes the bytes of the "
"content so that it's safe to print them and it limits how much content to "
"print. The escapes syntax used is the same as for Perl's double quoted "
"strings. If there is no content the string \"(no content)\" is shown in its "
"place.\n"
"\n"
"Options to influence the output can be passed as key/value pairs. The "
"following options are recognized:\n"
"\n"
"  * maxlength => $num\n"
"\n"
"How much of the content to show. The default is 512. Set this to 0 for "
"unlimited.\n"
"\n"
"If the content is longer then the string is chopped at the limit and the "
"string \"...\\n(### more bytes not shown)\" appended.\n"
"\n"
"  * no_content => $str\n"
"\n"
"Replaces the \"(no content)\" marker.\n"
"\n"
"  * prefix => $str\n"
"\n"
"A string that will be prefixed to each line of the dump.\n"
"\n"
"All methods unknown to 'HTTP::Message' itself are delegated to the 'HTTP::"
"Headers' object that is part of every message. This allows convenient access "
"to these methods. Refer to HTTP::Headers for details of these methods:\n"
"\n"
"    $mess->header( $field => $val )     $mess->push_header( $field => "
"$val )     $mess->init_header( $field => $val )     $mess-"
">remove_header( $field )     $mess->remove_content_headers     $mess-"
">header_field_names     $mess->scan( \\&doit )\n"
"\n"
"    $mess->date     $mess->expires     $mess->if_modified_since     $mess-"
">if_unmodified_since     $mess->last_modified     $mess->content_type     "
"$mess->content_encoding     $mess->content_length     $mess-"
">content_language     $mess->title     $mess->user_agent     $mess-"
">server     $mess->from     $mess->referer     $mess->www_authenticate     "
"$mess->authorization     $mess->proxy_authorization     $mess-"
">authorization_basic     $mess->proxy_authorization_basic"
msgstr ""
"'HTTP::Message'オブジェクトには、いくつかのヘッダーとコンテンツ本体が含まれています。これは新しいメッセージ・オブジェクトを構成します。\n"
"* $mess = HTTP::Message->new \n"
"* $mess = HTTP::Message->new( $headers ) \n"
"* $mess = HTTP::Message->new( $headers, $content )\n"
"\n"
"This constructs a new message object. "
"通常は、代わりに'HTTP::Request'または'HTTP::Response'オブジェクトを作成します。\n"
"\n"
"オプションの$header引数は、'HTTP::Headers'オブジェクトへの参照か、キーと値のペアのプレーンな配列参照でなければなりません。'HTTP"
"::Headers'オブジェクトが提供された場合、そのコピーは構築されたメッセージに埋め込まれます。つまり、そのオブジェクトは所有されず、メッセージに影響"
"を与えずに後で変更できます。\n"
"\n"
"オプションの$content引数は、バイトの文字列でなければなりません。\n"
"* $mess = HTTP::Message->parse( $str )\n"
"\n"
"これは、指定された文字列を解析して新しいメッセージオブジェクトを作成します。\n"
"* $mess->headers\n"
"\n"
"埋め込まれた'HTTP::Headers'オブジェクトを返します。\n"
"* $mess->headers_as_string \n"
"* $mess->headers_as_string( $eol )\n"
"\n"
"メッセージ内のヘッダーに対してas_string()メソッドを呼び出します。これは次と同じです。\n"
"\n"
"    $mess->headers->as_string\n"
"\n"
"プログラム全体が短くなります :-)\n"
"* $mess->content \n"
"* $mess->content( $bytes )\n"
"\n"
"引数が与えられた場合、content()メソッドは生の内容を設定します。引数を指定しない場合、内容には影響しません。いずれの場合も、元の未加工のコンテンツ"
"が返されます。\n"
"\n"
"'undef' 引数を指定すると、内容はデフォルト値(空の文字列)にリセットされます。\n"
"\n"
"内容はバイトの文字列でなければならないことに注意してください。perlの文字列には、バイトの範囲外の文字を含めることができます。'Encode'モジュール"
"は、このような文字列をバイト文字列に変換するために使用できます。\n"
"* $mess->add_content( $bytes )\n"
"\n"
"add_content() メソッドは、現在のコンテンツバッファの末尾にさらにデータバイトを追加します。\n"
"* $mess->add_content_utf8($string)\n"
"\n"
"add_content_utf8()メソッドは、文字列を表すUTF-8バイトを現在のコンテンツ・バッファの末尾に追加します。\n"
"* $mess->content_ref\n"
"* $mess->content_ref(\\$bytes)\n"
"\n"
"content_ref()メソッドは、コンテンツバッファ文字列への参照を返します。コンテンツが巨大な場合は、この方法でコンテンツにアクセスする方が効率的で"
"す。また、コンテンツを直接操作するために使用することもできます。次に例を示します。\n"
"\n"
"  ${$res->content_ref} =~ s/\\bfoo\\b/bar/g;\n"
"\n"
"この例では、コンテンツバッファをインプレイス修正します。\n"
"\n"
"引数が渡されると、何らかの外部ソースを参照するようにコンテンツが設定されます。content()メソッドとadd_content()メソッドは、この方法で"
"渡されたスカラー参照を自動的に逆参照します。その他の参照では、content()は参照そのものを返し、add_content()は何もしません。\n"
"* $mess->content_charset\n"
"\n"
"メッセージの内容で使用されている文字セットを返します。charsetは、'Content-"
"Type'ヘッダのcharset属性として、あるいは推測によって見つけられます。\n"
"\n"
"文字セットの決定方法の詳細については、http://www.w3.org/TR/REC-html40/charset.html#spec-char-"
"encodingを参照してください。\n"
"* $mess->decoded_content( %options )\n"
"\n"
"「Content-Encoding」を元に戻したコンテンツと、テキストコンテンツ(「Content-Type」の値が「text/」で始まる場合、「"
"application/xml」と完全に一致する場合、または「+xml」で終わる場合)については、生のコンテンツの文字セットをPerlのUnicode文字"
"列フォーマットにデコードしたものを返します。https://github.com/libwww-perl/HTTP-Message/pull/99 "
"のこのコマンドは、'application/json'や'application/javascript' "
"などの他のコンテンツ・タイプ用に宣言された文字セットをデコードしようとします。メッセージの'Content-"
"Encoding'または'charset'が不明な場合、このメソッドは'undef'を返して失敗します。\n"
"\n"
"以下のオプションを指定できます。\n"
"\n"
"  * 'charset'\n"
"\n"
"これにより、テキストコンテンツのcharsetパラメータが上書きされます。値'none'を使用すると、文字セットのデコードを抑制できます。\n"
"\n"
"  * 'default_charset'\n"
"\n"
"これはcontent_charset()や\"ISO-8859-1\"に失敗した場合に推測されるデフォルトの文字セットを上書きします。\n"
"\n"
"  * 'alt_charset'\n"
"\n"
"Content-Typeヘッダーで指定された文字セットがPerlのEncodeモジュールで認識されないためにデコードが失敗した場合は、失敗するのではなく、"
"この文字セットを使用してデコードを試みてください。'alt_charset'に'none'を指定すると、charsetをデコードせずに文字列を返すことがで"
"きます。\n"
"\n"
"  * 'charset_strict'\n"
"\n"
"不正な文字がコンテンツ内に見つかった場合、デコードを中止します。デフォルトでは、不正な文字の代わりに置換文字(\"\\x{FFFD}\")が得られます。"
"\n"
"\n"
"  * 'raise_error'\n"
"\n"
"TRUEの場合、コンテンツをデコードできない場合は例外を発生させます。指定された'Content-Encoding'または'charset'がサポートされ"
"ていない可能性があります。このオプションがFALSEの場合、decoded_content()はエラー時に'undef'を返しますが、$@を設定します。"
"\n"
"\n"
"  * 'ref'\n"
"\n"
"TRUEの場合、デコードされた内容への参照が返されます。これは、デコードされたコンテンツが生のコンテンツと同一である場合には、データコピーを必要としないの"
"で、より効率的であり得ます。\n"
"* $mess->decodable\n"
"* HTTP::Message::decodeable()\n"
"\n"
"decoded_content()が処理できるエンコード識別子を返します。スカラコンテキストでは、カンマで区切られた識別子の文字列を返します。\n"
"\n"
"この値は、「Accept-Encoding」リクエストヘッダフィールドを初期化するのに適しています。\n"
"* $mess->decode\n"
"\n"
"このメソッドは、メッセージの内容をデコードされたバージョンで置き換え、'Content-"
"Encoding'ヘッダーを削除します。成功した場合はTRUEを返し、失敗した場合はFALSEを返します。\n"
"\n"
"メッセージに'Content-Encoding'ヘッダーがない場合、このメソッドは何もせず、TRUEを返します。\n"
"\n"
"このメソッドが呼び出された後もメッセージの内容はバイトのままであり、その内容を文字列として処理したい場合はdecoded_content()を呼び出す必要"
"があることに注意してください。\n"
"* $mess->encode( $encoding, ... )\n"
"\n"
"指定されたエンコーディングをメッセージの内容に適用します。成功した場合はTRUEを返します。\"identity\" "
"(非)エンコーディングは常にサポートされています。現在サポートされているその他のエンコーディングは、必要な追加モジュールが利用可能であることを条件として、"
"\"gzip\"、\"deflate\"、\"x-bzip2\"、\"base64\"です。\n"
"\n"
"この関数の呼び出しに成功すると、「Content-Encoding」ヘッダが設定されます。\n"
"\n"
"'multipart/*'や'message/*'メッセージはエンコードできないので、このメソッドを使おうとするとエラーが発生することに注意してください。"
"\n"
"* $mess->parts \n"
"* $mess->parts( @parts ) \n"
"* $mess->parts( \\@parts )\n"
"\n"
"メッセージは複合メッセージ、つまり他のメッセージを含むことができます。複合メッセージの内容タイプは、「multipart/*」または「message/"
"*」です。このメソッドは、含まれているメッセージへのアクセスを提供します。\n"
"\n"
"引数のない形式は'HTTP::Message'オブジェクトのリストを返します。$msgの内容タイプが'multipart/*'または'message/*'"
"でない場合、空のリストを返します。スカラコンテキストでは、最初のオブジェクトのみが返されます。返されたメッセージ部分は読み取り専用とみなすべきです(このラ"
"イブラリの将来のバージョンでは、部分を修正することで親を修正できるようになる可能性があります)。\n"
"\n"
"$msgの内容タイプが'message/*'の場合、返される部分は1つだけです。\n"
"\n"
"コンテンツタイプが「message/"
"http」の場合、戻り値は「HTTP::Request」または「HTTP::Response」オブジェクトのいずれかになります。\n"
"\n"
"@parts 引数を指定すると、メッセージの内容が変更されます。配列参照フォームが提供されているので、空のリストを提供できます。@parts "
"配列には'HTTP::Message'オブジェクトを含める必要があります。@parts "
"オブジェクトはこの呼び出し後に$messによって所有されるので、変更したり他のメッセージの一部にしたりすべきではありません。\n"
"\n"
"このメソッドでメッセージを更新し、$messの古いコンテンツタイプが'multipart/*'または'message/*'でない場合、コンテンツタイプは'"
"multipart/mixed'に設定され、他のすべてのコンテンツヘッダーはクリアされます。\n"
"\n"
"コンテンツタイプが「message/*」で、複数のパートが指定されている場合、このメソッドはクラッシュします。\n"
"* $mess->add_part( $part )\n"
"\n"
"メッセージにパーツを追加します。$part "
"引数は別の'HTTP::Message'オブジェクトである必要があります。$messの以前のコンテンツタイプが'multipart/"
"*'でなければ、古いコンテンツ(すべてのコンテンツヘッダとともに)はpart#1になり、コンテンツタイプは'multipart/mixed'になってから新"
"しいパートが追加されます。$partオブジェクトはこの呼び出し後に$messによって所有されるので、変更したり他のメッセージの一部にしたりすべきではありま"
"せん。\n"
"\n"
"戻り値はありません。\n"
"*$mess->clear\n"
"\n"
"は、ヘッダーをクリアし、内容を空の文字列に設定します。There is no return value \n"
"* $mess->protocol \n"
"* $mess->protocol( $proto )\n"
"\n"
"メッセージに使用されるHTTPプロトコルを設定します。protocol() は 'HTTP/1.0'や'HTTP/1.1'のような文字列です。\n"
"*$mess->clone\n"
"\n"
"メッセージオブジェクトのコピーを返します。\n"
"* $mess->as_string \n"
"* $mess->as_string( $eol )\n"
"\n"
"1つの文字列としてフォーマットされたメッセージを返します。\n"
"\n"
"オプションの$eolパラメータは、使用する行の終了シーケンスを指定します。デフォルトは「\\n"
"」です。$eolが指定されていない場合、as_stringは返された文字列が改行で終了していることを保証します(メッセージの内容が改行でない場合でも)。明"
"示的な$eolが渡された場合、余分な改行は追加されません。\n"
"* $mess->dump(%opt)\n"
"\n"
"文字列形式のメッセージを返します。voidコンテキストでは文字列を出力します。\n"
"\n"
"これは'$mess->as_string'とは異なり、内容のバイト数をエスケープして安全に印刷できるようにし、印刷する内容の量を制限します。使用されるエス"
"ケープ構文は、Perlの二重引用符で囲まれた文字列と同じです。内容がない場合は、代わりに「(内容なし)」という文字列が表示されます。\n"
"\n"
"出力に影響を与えるオプションは、キーと値のペアとして渡すことができます。次のオプションが認識されます:\n"
"\n"
"  * maxlength => $num\n"
"\n"
"表示するコンテンツの量。デフォルトは512です。無制限の場合は0に設定します。\n"
"\n"
"内容が長い場合、文字列は制限値で切り捨てられ、文字列\"...\\n"
"(### それ以上のバイトは表示しません)\"が追加されます。\n"
"\n"
"  * no_content=>$str\n"
"\n"
"「(内容なし)」マーカーを置き換えます。\n"
"\n"
"  * prefix => $str\n"
"\n"
"ダンプの各行の先頭に付ける文字列。\n"
"\n"
"'HTTP::Message'自身が知らないすべてのメソッドは、すべてのメッセージの一部である'HTTP::Headers'オブジェクトに委譲されます。こ"
"れにより、これらのメソッドへのアクセスが便利になります。これらのメソッドの詳細については、「HTTP::Headers」を参照してください:\n"
"\n"
"    $mess->header( $field => $val )     $mess->push_header( $field => $val )"
"     $mess->init_header( $field => $val )     $mess->remove_header( $field )"
"     $mess->remove_content_headers     $mess->header_field_names     "
"$mess->scan( \\&doit )\n"
"\n"
"    $mess->date     $mess->expires     $mess->if_modified_since     $mess-"
">if_unmodified_since     $mess->last_modified     $mess->content_type     "
"$mess->content_encoding     $mess->content_length     $mess-"
">content_language     $mess->title     $mess->user_agent     $mess-"
">server     $mess->from     $mess->referer     $mess->www_authenticate     "
"$mess->authorization     $mess->proxy_authorization     $mess-"
">authorization_basic     $mess->proxy_authorization_basic"

#. tumbleweed/perl-HTTP-Parser/summary
msgid "Parse HTTP/1.1 request into HTTP::Request/Response object"
msgstr "HTTP/1.1要求をHTTP::Request/Responseオブジェクトにパースします"

#. tumbleweed/perl-HTTP-Parser/description
msgid ""
"This is an HTTP request parser. It takes chunks of text as received and "
"returns a 'hint' as to what is required, or returns the HTTP::Request when a "
"complete request has been read. HTTP/1.1 chunking is supported. It dies if "
"it finds an error."
msgstr ""
"これはHTTP要求パーサーです。受信したテキストのチャンクを取得し、必要なものに"
"関する「ヒント」を返すか、完全な要求が読み込まれたときにHTTP::Requestを返しま"
"す。HTTP/1.1チャンクはサポートされています。エラーが検出された場合は停止しま"
"す。"

#. tumbleweed/perl-HTTP-Server-Simple-PSGI/summary
msgid "PSGI handler for HTTP::Server::Simple"
msgstr "HTTP::Server::SimpleのPSGIハンドラ"

#. tumbleweed/perl-HTTP-Server-Simple-PSGI/description
msgid ""
"HTTP::Server::Simple::PSGI is a HTTP::Server::Simple based HTTP server that "
"can run PSGI applications. This module only depends on HTTP::Server::Simple, "
"which itself doesn't depend on any non-core modules so it's best to be used "
"as an embedded web server."
msgstr ""
"HTTP::Server::Simple::PSGIは、PSGIアプリケーションを実行できるHTTP::Server::"
"SimpleベースのHTTPサーバーです。このモジュールはHTTP::Server::Simpleにのみ依"
"存しており、それ自体はコア以外のモジュールには依存していないため、組み込みWeb"
"サーバとして使用するのが最適です。"

#. tumbleweed/perl-HTTP-Tiny/summary
msgid "Small, simple, correct HTTP/1.1 client"
msgstr "小さくてシンプルで正しいHTTP/1.1クライアント"

#. tumbleweed/perl-HTTP-Tinyish/summary
msgid "HTTP::Tiny compatible HTTP client wrappers"
msgstr "HTTP::Tiny 互換の HTTP クライアントラッパー"

#. tumbleweed/perl-HTTP-Tinyish/description
msgid ""
"HTTP::Tinyish is a wrapper module for HTTP client modules LWP, HTTP::Tiny "
"and HTTP client software 'curl' and 'wget'.\n"
"\n"
"It provides an API compatible to HTTP::Tiny, and the implementation has been "
"extracted out of App::cpanminus. This module can be useful in a restrictive "
"environment where you need to be able to download CPAN modules without an "
"HTTPS support in built-in HTTP library."
msgstr ""
"HTTP::Tinyish は HTTP クライアントモジュールである LWP, HTTP::Tiny のほか、 "
"'curl' や 'wget' などの HTTP クライアントソフトウエアに対するラッパーモジュー"
"ルです。\n"
"\n"
"HTTP::Tiny との API 互換性を提供しているほか、実装は App::cpanminus から抽出"
"した仕組みになっています。このモジュールは、組み込みの HTTP ライブラリ内に存"
"在する HTTPS サポートを使用せず、 CPAN モジュールでダウンロードしたいような場"
"合に有用です。"

#. tumbleweed/perl-Heap/summary
msgid "Perl extensions for keeping data partially sorted"
msgstr "データを部分的に整列するための Perl 拡張"

#. tumbleweed/perl-Heap/description
msgid ""
"The Heap collection of modules provide routines that manage a heap of "
"elements. A heap is a partially sorted structure that is always able to "
"easily extract the smallest of the elements in the structure (or the largest "
"if a reversed compare routine is provided).\n"
"\n"
"If the collection of elements is changing dynamically, the heap has less "
"overhead than keeping the collection fully sorted.\n"
"\n"
"The elements must be objects as described in \"Heap::Elem\" and all elements "
"inserted into one heap must be mutually compatible - either the same class "
"exactly or else classes that differ only in ways unrelated to the\n"
"*Heap::Elem* interface."
msgstr ""
"Heap コレクションモジュールは、要素に対するヒープを管理するためのルーチンを提"
"供します。ヒープは構造内での要素の最小値を常に簡単に抽出することのできる部分"
"ソート済み構造です (逆順の並べ替えルーチンを指定すれば、逆を実装することもで"
"きます) 。\n"
"\n"
"要素が動的に変化するようなものの場合、ヒープはコレクションが完全に並べ替えら"
"れている状態を維持し続けるための最小のオーバーヘッドとして動作します。\n"
"\n"
"要素は必ず \"Heap::Elem\" で指定されるオブジェクトでなければならず、全ての要"
"素はヒープに挿入される際、相互に比較可能でもなければなりません。つまり、厳密"
"に同一のクラスを指定するか、もしくは *Heap::Elem* インターフェイスとは関係の"
"ない方法でのみ異なるクラスでなければなりません。"

#. tumbleweed/perl-IO-Async/description
msgid ""
"This collection of modules allows programs to be written that perform "
"asynchronous filehandle IO operations. A typical program using them would "
"consist of a single subclass of IO::Async::Loop to act as a container of "
"other objects, which perform the actual IO work required by the program. As "
"well as IO handles, the loop also supports timers and signal handlers, and "
"includes more higher-level functionality built on top of these basic parts."
msgstr ""
"このモジュールのコレクションは、プログラムにタイしてファイルハンドルの非同期"
"処理を記述できるようにするためのものです。これを利用する典型的なプログラムで"
"は、 IO::Async::Loop にタイする単一のサブクラスを用意して、プログラム側で必要"
"となる実際の I/O 処理を実施する他のオブジェクトのコンテナとして、動作させる方"
"法があります。 IO ハンドルと同様に、ループではタイマーやシグナルに対応してい"
"るほか、これらの基本パーツ上に高レベルな機能も追加されています。"

#. tumbleweed/perl-IO-CaptureOutput/summary
msgid ""
"(DEPRECATED) capture STDOUT and STDERR from Perl code, subprocesses or XS"
msgstr ""
"(廃止予定) Perl コードやサブプロセス、もしくは XS からの標準出力 (STDOUT) や"
"標準エラー出力 (STDERR) のキャプチャ"

#. tumbleweed/perl-IO-CaptureOutput/description
msgid ""
"*This module is no longer recommended by the maintainer* - see Capture::Tiny "
"instead.\n"
"\n"
"This module provides routines for capturing STDOUT and STDERR from perl "
"subroutines, forked system calls (e.g. 'system()', 'fork()') and from XS or "
"C modules."
msgstr ""
"*このモジュールは、もはやメンテナが推奨していません* - 代わりに Capture::"
"Tiny をご覧ください。\n"
"\n"
"このモジュールは、 Perl のサブルーチンや fork されたシステムコール (例: "
"'system()', 'fork()') のほか、 XS や C モジュールからの標準出力 (STDOUT) およ"
"び標準エラー出力 (STDERR) をキャプチャするためのルーチンを提供します。"

#. tumbleweed/perl-IO-Compress-Lzma/summary
msgid "Write lzma files/buffers"
msgstr "lzma ファイル／バッファの書き込み"

#. tumbleweed/perl-IO-Compress-Lzma/description
msgid ""
"This module provides a Perl interface that allows writing lzma compressed "
"data to files or buffer.\n"
"\n"
"For reading lzma files/buffers, see the companion module IO::Uncompress::"
"UnLzma."
msgstr ""
"このモジュールは、 lzma で圧縮されたデータをファイルやバッファに書き込むこと"
"のできる Perl インターフェイスを提供します。\n"
"\n"
"lzma ファイルやバッファの読み込みについては、コンパニオンモジュールである "
"IO::Uncompress::UnLzma をご覧ください。"

#. tumbleweed/perl-IO-HTML/description
msgid ""
"IO::HTML provides an easy way to open a file containing HTML while "
"automatically determining its encoding. It uses the HTML5 encoding sniffing "
"algorithm specified in section 8.2.2.2 of the draft standard.\n"
"\n"
"The algorithm as implemented here is: \n"
"* 1.\n"
"\n"
"If the file begins with a byte order mark indicating UTF-16LE, UTF-16BE, or "
"UTF-8, then that is the encoding. \n"
"* 2.\n"
"\n"
"If the first '$bytes_to_check' bytes of the file contain a '<meta>' tag that "
"indicates the charset, and Encode recognizes the specified charset name, "
"then that is the encoding. (This portion of the algorithm is implemented by "
"'find_charset_in'.)\n"
"\n"
"The '<meta>' tag can be in one of two formats:\n"
"\n"
"  <meta charset=\"...\">   <meta http-equiv=\"Content-Type\" content=\"..."
"charset=...\">\n"
"\n"
"The search is case-insensitive, and the order of attributes within the tag "
"is irrelevant. Any additional attributes of the tag are ignored. The first "
"matching tag with a recognized encoding ends the search. \n"
"* 3.\n"
"\n"
"If the first '$bytes_to_check' bytes of the file are valid UTF-8 (with at "
"least 1 non-ASCII character), then the encoding is UTF-8. \n"
"* 4.\n"
"\n"
"If all else fails, use the default character encoding. The HTML5 standard "
"suggests the default encoding should be locale dependent, but currently it "
"is always 'cp1252' unless you set '$IO::HTML::default_encoding' to a "
"different value. Note: 'sniff_encoding' does not apply this step; only "
"'html_file' does that."
msgstr ""
"IO::HTML は HTML を含むファイルを開くための簡単な方法で、エンコード方式を自動"
"的に判別することができます。 HTML5 のドラフト標準内のセクション 8.2.2.2 で規"
"定されたエンコード検出アルゴリズムを利用しています。\n"
"\n"
"アルゴリズムは下記のように実装されています:\n"
"* 1.\n"
"\n"
"  ファイルの冒頭が UTF-16LE, UTF-16BE, UTF-8 の各バイトオーダーマークであった"
"場合は、そのエンコード方式を採用する。\n"
"* 2.\n"
"\n"
"  ファイルの冒頭 1024 バイト内に '<meta>' タグが含まれていて、そこにキャラク"
"タセットと対応するエンコード方式が書かれている場合、そのエンコード方式を採用"
"する (アルゴリズムのうち、この部分は 'find_charset_in' で実装しています) 。\n"
"\n"
"  '<meta>' タグは下記の 2 つのうちのいずれかの形式であるものとする:\n"
"\n"
"    <meta charset=\"...\">     <meta http-equiv=\"Content-Type\" content="
"\"...charset=...\">\n"
"\n"
"  検索時、大文字と小文字は区別しないほか、タグ内での属性出現順序は気にしない"
"ものとする。また、タグに付けられたその他の属性は無視するものとする。エンコー"
"ドを認識可能な最初のタグが見つかった場合は、その時点で検索を終了する。\n"
"* 3.\n"
"\n"
"  ファイルの冒頭 '$bytes_to_check' バイトが UTF-8 として正当なものである (少"
"なくとも 1 文字以上の非 ASCII 文字がある) 場合、エンコード方式を UTF-8 とす"
"る。\n"
"* 4.\n"
"\n"
"  これまでの処理のすべてが失敗した場合は、既定の文字エンコード方式を利用す"
"る。HTML5 標準では既定のエンコード方式はロケール依存であるが、 '$IO::HTML::"
"default_encoding' で異なる値を指定していない限り、エンコード方式は常に "
"'cp1252' であるものとみなされる。注意: 'sniff_encoding' は上記までの手順を実"
"施せず、'html_file' のみが上記の手順を実施することに注意すること。"

#. tumbleweed/perl-IO-Handle-Util/description
msgid ""
"This module provides a number of helpful routines to manipulate or create "
"IO::Handle like objects."
msgstr ""
"このモジュールは、 IO::Handle のようなオブジェクトを操作したり、作成したりす"
"るための様々な便利ルーチンを提供しています。"

#. tumbleweed/perl-IO-Pipely/summary
msgid "Portably create pipe() or pipe-like handles, one way or another"
msgstr "パイプ()またはパイプのようなハンドルを、何らかの方法でポータブルに作成"

#. tumbleweed/perl-IO-Tty/summary
msgid "Low-level allocate a pseudo-Tty, import constants"
msgstr "擬似端末の低レベル割り当てと定数インポート"

#. tumbleweed/perl-IO-Tty/description
msgid ""
"'IO::Tty' is used internally by 'IO::Pty' to create a pseudo-tty. You "
"wouldn't want to use it directly except to import constants, use 'IO::Pty'. "
"For a list of importable constants, see IO::Tty::Constant.\n"
"\n"
"Windows is now supported, but ONLY under the Cygwin environment, see http://"
"sources.redhat.com/cygwin/.\n"
"\n"
"Please note that pty creation is very system-dependend. From my experience, "
"any modern POSIX system should be fine. Find below a list of systems that "
"'IO::Tty' should work on. A more detailed table (which is slowly getting out-"
"of-date) is available from the project pages document manager at SourceForge "
"http://sourceforge.net/projects/expectperl/.\n"
"\n"
"If you have problems on your system and your system is listed in the "
"\"verified\" list, you probably have some non-standard setup, e.g. you "
"compiled your Linux-kernel yourself and disabled ptys (bummer!). Please ask "
"your friendly sysadmin for help.\n"
"\n"
"If your system is not listed, unpack the latest version of 'IO::Tty', do a "
"''perl Makefile.PL; make; make test; uname -a'' and send me (_RGiersig@cpan."
"org_) the results and I'll see what I can deduce from that. There are "
"chances that it will work right out-of-the-box...\n"
"\n"
"If it's working on your system, please send me a short note with details "
"(version number, distribution, etc. 'uname -a' and 'perl -V' is a good "
"start; also, the output from \"perl Makefile.PL\" contains a lot of "
"interesting info, so please include that as well) so I can get an overview. "
"Thanks!"
msgstr ""
"'IO::Tty' は 'IO::Pty' で内部的に用いられているモジュールで、疑似端末を作成す"
"る際に利用されるものです。定数の取り込み以外の処理を直接使いたくない場合は、 "
"'IO::Pty' をお使いください。重要な定数について、詳しくは IO::Tty::Constant の"
"マニュアルページをお読みください。\n"
"\n"
"Windows にも対応していますが、 cygwin 環境のみで利用できます。詳しくはhttp://"
"sources.redhat.com/cygwin/ のマニュアルページをお読みください。\n"
"\n"
"pty の作成は非常にシステムに依存したつくりになっていることに注意してくださ"
"い。ただ、私の経験では、新しい POSIX システムであればどのようなものでも利用で"
"きます。'IO::Tty' が動作するシステムについて、詳しくはマニュアル内の表をお読"
"みください。より詳しい一覧 (ただし少しずつ古いものが混じっています) について"
"は、 SourceForge 内のプロジェクトページ  http://sourceforge.net/projects/"
"expectperl/ から、マニュアルページをお読みください。\n"
"\n"
"お使いのシステムで問題が発生した場合で、 \"検証済み\" リストにお使いのシステ"
"ムが掲載されている場合は、標準的ではない構成でシステムを動作させているものと"
"思われます (たとえばカーネルを独自に構築していて、 pty 機能を無効化させている"
"場合など) 。このような場合、詳しくはシステムの管理者にお尋ねください。\n"
"\n"
"お使いのシステムが掲載されていない場合は、最新バージョンの 'IO::Tty' を展開"
"し、''perl Makefile.PL; make; make test; uname -a'' を実行したあと、その結果"
"を私 (_RGiersig@cpan.org_) 宛にお送りください。そこから推測可能な情報を提供さ"
"せていただきます。うまくすればそのまま動作するのかもしれませんが...\n"
"\n"
"お使いのシステムでうまく動作しない場合は、私宛に詳細を簡潔にお送りください"
"(バージョン番号、ディストリビューションなど。 'uname -a' や 'perl -V' を含め"
"ていただけると助かります; また、 \"perl Makefile.PL\" の実行結果には多数の有"
"用な情報が含まれているため、できるだけ含めるようにしてください) 。これによ"
"り、ヒントが得られるかもしれません。"

#. tumbleweed/perl-IO-stringy/summary
msgid "I/O on in-core objects like strings and arrays"
msgstr "文字列や配列などのような中枢オブジェクト内 I/O"

#. tumbleweed/perl-IO-stringy/description
msgid ""
"This toolkit primarily provides modules for performing both traditional and "
"object-oriented i/o) on things _other_ than normal filehandles; in "
"particular, IO::Scalar, IO::ScalarArray, and IO::Lines.\n"
"\n"
"In the more-traditional IO::Handle front, we have IO::AtomicFile which may "
"be used to painlessly create files which are updated atomically.\n"
"\n"
"And in the \"this-may-prove-useful\" corner, we have IO::Wrap, whose "
"exported wraphandle() function will clothe anything that's not a blessed "
"object in an IO::Handle-like wrapper... so you can just use OO syntax and "
"stop worrying about whether your function's caller handed you a string, a "
"globref, or a FileHandle."
msgstr ""
"このツールキットは主に、通常のファイルハンドルを除く、従来型の I/O とオブジェ"
"クト指向型の I/O の両方を処理するモジュールを提供するためのものです。オブジェ"
"クト指向型のものとしては特に、 IO::Scalar, IO::ScalarArray, IO::Lines を対象"
"としています。\n"
"\n"
"さらに古い IO::Handle については IO::AtomicFile が提供されています。こちらは"
"アトミックに更新されるファイルを容易に作成するために使用するものです。\n"
"\n"
"また \"this-may-prove-useful\" のコーナーでは、 wraphandle() 関数を公開する "
"IO::Wrap と呼ばれる仕組みを提供し、 IO::Handle のようなラッパー内での bless "
"ではない何かを提供しています。これにより OO 型の文法を使用できることになりま"
"すので、お使いの関数内での呼び出しが文字列なのか globref なのか、それともファ"
"イルハンドルなのかを気にせずに利用できるようになります。"

#. tumbleweed/perl-IPC-System-Simple/description
msgid ""
"Calling Perl's in-built 'system()' function is easy, determining if it was "
"successful is _hard_. Let's face it, '$?' isn't the nicest variable in the "
"world to play with, and even if you _do_ check it, producing a well-"
"formatted error string takes a lot of work.\n"
"\n"
"'IPC::System::Simple' takes the hard work out of calling external commands. "
"In fact, if you want to be really lazy, you can just write:\n"
"\n"
"    use IPC::System::Simple qw(system);\n"
"\n"
"and all of your 'system' commands will either succeed (run to completion and "
"return a zero exit value), or die with rich diagnostic messages.\n"
"\n"
"The 'IPC::System::Simple' module also provides a simple replacement to "
"Perl's backticks operator. Simply write:\n"
"\n"
"    use IPC::System::Simple qw(capture);\n"
"\n"
"and then use the capture() command just like you'd use backticks. If there's "
"an error, it will die with a detailed description of what went wrong. Better "
"still, you can even use 'capturex()' to run the equivalent of backticks, but "
"without the shell:\n"
"\n"
"    use IPC::System::Simple qw(capturex);\n"
"\n"
"    my $result = capturex($command, @args);\n"
"\n"
"If you want more power than the basic interface, including the ability to "
"specify which exit values are acceptable, trap errors, or process "
"diagnostics, then read on!"
msgstr ""
"Perl の内蔵関数 'system()' は簡単に使うことのできるものですが、その成功を判断"
"するのは _難しい_ ものです。コマンドによっては '$?' を正しく設定しないものも"
"ありますし、たとえ正しく設定するプログラムであったとしても、エラー時にエラー"
"の文字列を処理するのは面倒です。\n"
"\n"
"'IPC::System::Simple' は、外部のプログラムを呼び出す際の面倒な手間を省きま"
"す。面倒なことをしたくないのであれば、たとえば下記のように記述することができ"
"ます:\n"
"\n"
"    use IPC::System::Simple qw(system);\n"
"\n"
"上記を記述することにより、 'system' コマンドが成功したかどうか (コマンドが終"
"了し、かつ返り値が 0 であったかどうか) や、饒舌なエラーメッセージが出力されて"
"終了したかどうかを調べることができます。\n"
"\n"
"'IPC::System::Simple' モジュールでは、 Perl のバッククオート演算子の代替とな"
"る機能も用意されています。単純に下記のように記述するだけで利用することができ"
"ます:\n"
"\n"
"    use IPC::System::Simple qw(capture);\n"
"\n"
"あとはバッククオートを利用していた箇所で、 /capture() コマンドを利用するだけ"
"です。エラーが発生した場合は、何が悪かったのかを示す詳細な説明が表示されて終"
"了します。このほかにも、シェル無しでバッククオートを実行する場合は、 "
"'capturex()' を利用することができます:\n"
"\n"
"    use IPC::System::Simple qw(capturex);\n"
"\n"
"    my $result = capturex($command, @args);\n"
"\n"
"終了コードが正常な値かどうかや、エラーの捕捉、およびプロセスの分析機能など、"
"基本的なインターフェイス以上の機能も用意されています。詳しくは同梱のマニュア"
"ルをお読みください！"

#. tumbleweed/perl-JSON/description
msgid ""
"This module is a thin wrapper for JSON::XS-compatible modules with a few "
"additional features. All the backend modules convert a Perl data structure "
"to a JSON text and vice versa. This module uses JSON::XS by default, and "
"when JSON::XS is not available, falls back on JSON::PP, which is in the Perl "
"core since 5.14. If JSON::PP is not available either, this module then falls "
"back on JSON::backportPP (which is actually JSON::PP in a different .pm "
"file) bundled in the same distribution as this module. You can also "
"explicitly specify to use Cpanel::JSON::XS, a fork of JSON::XS by Reini "
"Urban.\n"
"\n"
"All these backend modules have slight incompatibilities between them, "
"including extra features that other modules don't support, but as long as "
"you use only common features (most important ones are described below), "
"migration from backend to backend should be reasonably easy. For details, "
"see each backend module you use."
msgstr ""
"このモジュールは JSON::XS 互換のモジュールに対して、いくつかの追加機能を伴う"
"薄いラッパーです。バックエンドモジュールは Perl のデータ構造を JSON テキスト"
"に変換したり、その逆の変換を行なったりします。また、このモジュールは既定で "
"JSON::XS を使用しますが、 JSON::XS が利用できない場合は、本モジュールに同梱さ"
"れた JSON::backportPP (実際には JSON::PP と同じものですが、異なる .pm ファイ"
"ルです) にフォールバックして動作します。また、明示的に指定することで、 Reini "
"Urban 氏が JSON::XS から fork して作成した Cpanel::JSON::XS を使用することも"
"できます。\n"
"\n"
"なお、一方のバックエンドモジュールで対応している追加機能が、他方のバックエン"
"ドでは利用できないなど、バックエンドモジュール間で若干の非互換性が存在してい"
"ますが、一般的な機能 (最も重要なものは後述) のみを利用している限り、バックエ"
"ンド間の移行はそれほど難しくないものと思われます。詳しくはお使いになるバック"
"エンドモジュールをご覧ください。"

#. tumbleweed/perl-JSON-MaybeXS/description
msgid ""
"This module first checks to see if either Cpanel::JSON::XS or JSON::XS (at "
"at least version 3.0) is already loaded, in which case it uses that module. "
"Otherwise it tries to load Cpanel::JSON::XS, then JSON::XS, then JSON::PP in "
"order, and either uses the first module it finds or throws an error.\n"
"\n"
"It then exports the 'encode_json' and 'decode_json' functions from the "
"loaded module, along with a 'JSON' constant that returns the class name for "
"calling 'new' on.\n"
"\n"
"If you're writing fresh code rather than replacing JSON.pm usage, you might "
"want to pass options as constructor args rather than calling mutators, so we "
"provide our own 'new' method that supports that."
msgstr ""
"このモジュールは、まず Cpanel::JSON::XS または JSON::XS (少なくともバージョン"
"3.0)がすでに読み込まれているかどうかをチェックし、いずれかのモジュールが読み"
"込まれていればそれを使用します。どのモジュールも読み込まれていない場合は、 "
"Cpanel::JSON::XS を読み込もうとしたあと、 JSON::XS および JSON::PP を読み込も"
"うとし、見つかった最初のモジュールを使用するか、エラーを返します。\n"
"\n"
"モジュールが読み込まれると、そのモジュールから 'encode_json' と "
"'decode_json' の関数、および 'JSON' 定数がそれぞれ公開されるようになります。"
"定数は 'new' を呼び出す際のクラス名を含んでいます。\n"
"\n"
"既存の JSON コードではなく新規に作成しようとしている場合は、ミューテータでは"
"なくコンストラクタのパラメータとしてパラメータを指定してください。これに対応"
"するための独自の 'new' メソッドが提供されています。"

#. tumbleweed/perl-JSON-Parse/summary
msgid "Parse JSON"
msgstr "JSON の処理"

#. tumbleweed/perl-JSON-Parse/description
msgid ""
"A module for parsing JSON. (JSON means \"JavaScript Object Notation\" and it "
"is specified in RFC 8259.)\n"
"\n"
"JSON::Parse offers the function parse_json, which takes a string containing "
"JSON, and returns an equivalent Perl structure. It also offers validation of "
"JSON via valid_json, which returns true or false depending on whether the "
"JSON is correct or not, and assert_valid_json, which produces a descriptive "
"fatal error if the JSON is invalid. A function read_json reads JSON from a "
"file, and there is a safer version of parse_json called parse_json_safe "
"which doesn't throw exceptions.\n"
"\n"
"For special cases of parsing, there are also methods new and parse, which "
"create a JSON parsing object and run it on text. See METHODS.\n"
"\n"
"JSON::Parse accepts only UTF-8 as input. See UTF-8 only and Handling of "
"Unicode."
msgstr ""
"JSON (\"JavaScript Object Notation\" の略で、 RFC 8259 で規定) を処理するため"
"のモジュールです。\n"
"\n"
"JSON::Parse は parse_json という関数が提供されていて、これは JSON を含む文字"
"列をパラメータとして与えることで、それと等価な Perl 構造体を返すものです。ま"
"た、 JSON の書式が正しいかどうかを判断して true もしくは false を返す "
"valid_json も含まれています。こちらは JSON が正しくない場合、詳しいエラーを返"
"すことができます。また、 read_json 関数ではファイルから JSON データを読み込む"
"ことができますし、 parse_json の例外を返さないバージョンである "
"parse_json_safe も用意されています。\n"
"\n"
"特別な方法で処理を行ないたい場合は、 new や parse などのメソッドも用意されて"
"います。こちらは JSON の処理オブジェクトを作成して処理することができます。詳"
"しくは METHODS をお読みください。\n"
"\n"
"JSON::Parse は入力できる文字列コードとして UTF-8 のみに対応しています。詳しく"
"は UTF-8 only および Handling of Unicode をお読みください。"

#. tumbleweed/perl-JSON-XS/description
msgid ""
"This module converts Perl data structures to JSON and vice versa. Its "
"primary goal is to be _correct_ and its secondary goal is to be _fast_. To "
"reach the latter goal it was written in C.\n"
"\n"
"See MAPPING, below, on how JSON::XS maps perl values to JSON values and vice "
"versa."
msgstr ""
"このモジュールは、 Perl のデータ構造を JSON 形式に変換したり、その逆変換を行"
"なったりすることができます。主に正しさを重視した構造とし、速度はその次になる"
"構造とするようにしています。本モジュールは特に後者を重視したつくりになってい"
"て、 C 言語で作成されています。\n"
"\n"
"MAPPING セクションには、 JSON::XS が Perl 変数と JSON 値をどのように対応づけ"
"ているのか、その逆はどうなのかについて、詳しく説明しています。"

#. tumbleweed/perl-JavaScript-Minifier-XS/description
msgid ""
"'JavaScript::Minifier::XS' is a JavaScript \"minifier\"; its designed to "
"remove unnecessary whitespace and comments from JavaScript files, which also "
"*not* breaking the JavaScript.\n"
"\n"
"'JavaScript::Minifier::XS' is similar in function to 'JavaScript::Minifier', "
"but is substantially faster as its written in XS and not just pure Perl."
msgstr ""
"'JavaScript::Minifier::XS'はJavaScriptの「minifier」であり、JavaScriptファイルから不要な空白やコメン"
"トを削除するように設計されており、JavaScriptを「壊す」ことはありません。\n"
"\n"
"'JavaScript::Minifier::XS'は、機能的には'JavaScript::Minifier'と似ていますが、XSで書かれているように、純"
"粋なPerlだけでなく、かなり高速です。"

#. tumbleweed/perl-LWP-ConsoleLogger/summary
msgid "LWP tracing and debugging"
msgstr "LWP トレースとデバッグ"

#. tumbleweed/perl-LWP-ConsoleLogger/description
msgid ""
"BETA BETA BETA. This is currently an experiment. Things could change. Please "
"adjust accordingly.\n"
"\n"
"It can be hard (or at least tedious) to debug mechanize scripts. LWP::Debug "
"is deprecated. It suggests you write your own debugging handlers, set up a "
"proxy or install Wireshark. Those are all workable solutions, but this "
"module exists to save you some of that work. The guts of this module are "
"stolen from Plack::Middleware::DebugLogging, which in turn stole most of its "
"internals from Catalyst. If you're new to LWP::ConsoleLogger, I suggest "
"getting started with the LWP::ConsoleLogger::Easy wrapper. This will get you "
"up and running in minutes. If you need to tweak the settings that LWP::"
"ConsoleLogger::Easy chooses for you (or if you just want to be fancy), "
"please read on.\n"
"\n"
"Since this is a debugging library, I've left as much mutable state as "
"possible, so that you can easily toggle output on and off and otherwise "
"adjust how you deal with the output."
msgstr ""
"BETA BETA BETA. これは現在実験中です。状況は変わる可能性があります。調整して"
"ください。\n"
"\n"
"機械化されたスクリプトをデバッグするのは困難です(少なくとも退屈です)。LWP::"
"Debugは非推奨です。独自のデバッグハンドラを作成するか、プロキシを設定するか、"
"Wiresharkをインストールすることをお勧めします。これらはすべて実行可能なソ"
"リューションですが、このモジュールは作業の一部を節約するために存在します。こ"
"のモジュールの中身はPlack::Middleware::DebugLoggingから引用され、今度は"
"Catalystから内部のほとんどを引用されました。LWP::ConsoleLoggerに慣れていない"
"人には、LWP::ConsoleLogger::Easyラッパーを使い始めることをお勧めします。これ"
"により、数分で稼働を開始できます。LWP::ConsoleLogger::Easyで選択される設定を"
"調整する必要がある場合(あるいは単におしゃれにしたい場合)は、こちらをお読みく"
"ださい。\n"
"\n"
"これはデバッグ・ライブラリーなので、出力のオン/オフを簡単に切り替えたり、出力"
"の処理方法を調整したりできるように、できるだけ多くの可変状態を残しました。"

#. tumbleweed/perl-LWP-MediaTypes/summary
msgid "Guess media type for a file or a URL"
msgstr "ファイルや URL からのメディア種類の推測"

#. tumbleweed/perl-LWP-MediaTypes/description
msgid ""
"This module provides functions for handling media (also known as MIME) types "
"and encodings. The mapping from file extensions to media types is defined by "
"the _media.types_ file. If the _~/.media.types_ file exists it is used "
"instead. For backwards compatibility we will also look for _~/.mime.types_.\n"
"\n"
"The following functions are exported by default: \n"
"* guess_media_type( $filename ) \n"
"* guess_media_type( $uri ) \n"
"* guess_media_type( $filename_or_object, $header_to_modify )\n"
"\n"
"This function tries to guess media type and encoding for a file or objects "
"that support the a 'path' or 'filename' method, eg, URI or File::Temp "
"objects. When an object does not support either method, it will be "
"stringified to determine the filename. It returns the content type, which is "
"a string like '\"text/html\"'. In array context it also returns any content "
"encodings applied (in the order used to encode the file). You can pass a URI "
"object reference, instead of the file name.\n"
"\n"
"If the type can not be deduced from looking at the file name, then "
"guess_media_type() will let the '-T' Perl operator take a look. If this "
"works (and '-T' returns a TRUE value) then we return _text/plain_ as the "
"type, otherwise we return _application/octet-stream_ as the type.\n"
"\n"
"The optional second argument should be a reference to a HTTP::Headers object "
"or any object that implements the $obj->header method in a similar way. When "
"it is present the values of the 'Content-Type' and 'Content-Encoding' will "
"be set for this header. \n"
"* media_suffix( $type, ... )\n"
"\n"
"This function will return all suffixes that can be used to denote the "
"specified media type(s). Wildcard types can be used. In a scalar context it "
"will return the first suffix found. Examples:\n"
"\n"
"  @suffixes = media_suffix('image/*', 'audio/basic');   $suffix = "
"media_suffix('text/html');\n"
"\n"
"The following functions are only exported by explicit request: \n"
"* add_type( $type, @exts )\n"
"\n"
"Associate a list of file extensions with the given media type. Example:\n"
"\n"
"    add_type(\"x-world/x-vrml\" => qw(wrl vrml)); \n"
"* add_encoding( $type, @ext )\n"
"\n"
"Associate a list of file extensions with an encoding type. Example:\n"
"\n"
" add_encoding(\"x-gzip\" => \"gz\"); \n"
"* read_media_types( @files )\n"
"\n"
"Parse media types files and add the type mappings found there. Example:\n"
"\n"
"    read_media_types(\"conf/mime.types\");"
msgstr ""
"このモジュールは、メディアタイプ (MIME とも呼ばれます) とエンコーディングを処"
"理する関数を提供します。ファイルの拡張子からメディアタイプへの割り当ては、 "
"_media.types_ ファイルで指定します。 _~/.media.types_ ファイルが存在する場合"
"は、このファイルが優先的に使われます。また、後方互換性のため、 _~/.mime."
"types_ にも対応しています。\n"
"\n"
"既定では、下記の関数が公開されています:\n"
"* guess_media_type( $filename )\n"
"* guess_media_type( $uri )\n"
"* guess_media_type( $filename_or_object, $header_to_modify )\n"
"\n"
"この関数は、ファイルまたは URI に対するメディアタイプとエンコーディングを推測"
"します。返り値は Content-Type の値で、たとえば '\"text/html\"' のような文字列"
"になります。配列のコンテキストであれば、コンテンツに対するエンコーディングも"
"返されます (ファイルをエンコードする際に利用していたもの) 。また、ファイルの"
"代わりに URI オブジェクトの参照を指定したりすることもできます。\n"
"\n"
"ファイル名を見ただけではタイプを判別できない場合、 guess_media_type() は'-T' "
"の Perl 演算子を利用して、内容を参照します。これがうまく動作した場合 (かつ '-"
"T' が TRUE を返した場合) は、タイプに _text/plain_ を設定しますが、うまく動作"
"しなかった場合は、タイプとして _application/octet-stream_ を設定します。\n"
"\n"
"任意で指定できる 2 つめのパラメータは、 HTTP::Headers オブジェクトの参照また"
"は $obj->header メソッドを似たような方法で提供する任意のオブジェクトを指定す"
"ることができます。それぞれ 'Content-Type' や 'Content-Encoding' の値が存在す"
"る場合、これらの値が書き換えられます。\n"
"* media_suffix( $type, ... )\n"
"\n"
"この関数は、指定したメディアタイプを示す接尾辞を返却します。ワイルドカードで"
"の指定も行なうことができます。スカラーコンテキストの場合、最初に見つかった接"
"尾辞を返します。たとえば下記のようになります:\n"
"\n"
"    @suffixes = media_suffix('image/*', 'audio/basic');     $suffix = "
"media_suffix('text/html');\n"
"\n"
"下記の関数は、明示的に要求した場合にのみ公開されます:\n"
"* add_type( $type, @exts )\n"
"\n"
"メディアタイプに対して、ファイルの拡張子の一覧を割り当てます。たとえば下記の"
"ようになります:\n"
"\n"
"      add_type(\"x-world/x-vrml\" => qw(wrl vrml));\n"
"* add_encoding( $type, @ext )\n"
"\n"
"エンコーディングタイプに対して、ファイルの拡張子の一覧を割り当てます。たとえ"
"ば下記のようになります:\n"
"\n"
"   add_encoding(\"x-gzip\" => \"gz\");\n"
"* read_media_types( @files )\n"
"\n"
"メディアタイプを処理して、見つかったタイプマップを追加します。たとえば下記の"
"ようになります:\n"
"\n"
"      read_media_types(\"conf/mime.types\");"

#. tumbleweed/perl-List-BinarySearch/summary
msgid "Binary Search within a sorted array."
msgstr "並べ替えられた配列内でのバイナリ検索"

#. tumbleweed/perl-List-BinarySearch/description
msgid ""
"A binary search searches *sorted* lists using a divide and conquer "
"technique. On each iteration the search domain is cut in half, until the "
"result is found. The computational complexity of a binary search is O(log "
"n).\n"
"\n"
"The binary search algorithm implemented in this module is known as a "
"_Deferred Detection_ variant on the traditional Binary Search. Deferred "
"Detection provides *stable searches*. Stable binary search algorithms have "
"the following characteristics, contrasted with their unstable binary search "
"cousins: \n"
"* In the case of non-unique keys, a stable binary search will always   "
"return the lowest-indexed matching element.  An unstable binary search   "
"would return the first one found, which may not be the chronological "
"first. \n"
"* Best and worst case time complexity is always O(log n).  Unstable   "
"searches may stop once the target is found, but in the worst case are   "
"still O(log n).  In practical terms, this difference is usually not   "
"meaningful. \n"
"* Stable binary searches only require one relational comparison of a   given "
"pair of data elements per iteration, where unstable binary searches   "
"require two comparisons per iteration. \n"
"* The net result is that although an unstable binary search might have   "
"better \"best case\" performance, the fact that a stable binary search "
"gets   away with fewer comparisons per iteration gives it better performance "
"in the   worst case, and approximately equal performance in the average "
"case. By   trading away slightly better \"best case\" performance, the "
"stable search gains   the guarantee that the element found will always be "
"the lowest-indexed   element in a range of non-unique keys.\n"
"\n"
"This module has a companion \"XS\" module: the List::BinarySearch::XS "
"manpage which users are strongly encouraged to install as well. If List::"
"BinarySearch::XS is also installed, 'binsearch' and 'binsearch_pos' will use "
"XS code. This behavior may be overridden by setting "
"'$ENV{List_BinarySearch_PP}' to a true value. Most CPAN installers will "
"either automatically install the XS module, or prompt to automatically "
"install it. See CONFIGURATION for details."
msgstr ""
"このバイナリ検索モジュールは *並べ替え済みの* 配列を分割統治法によって検索す"
"る仕組みを提供しています。領域内では半分ずつに分割していって、結果が見つかる"
"までその処理を繰り返します。そのためバイナリ検索での計算の複雑性は、 O(log "
"n) で表わされることになります。\n"
"\n"
"このモジュール内でのバイナリ検索アルゴリズムは、バイナリ検索の仕組み内での _"
"遅延検出_ として知られています。遅延検出は *安定した検索* を提供します。安定"
"したバイナリ検索アルゴリズムには、それ以外の (安定しない) バイナリ検索と比較"
"して、下記のような特性があります:\n"
"* 非ユニークなキーが存在するような場合、バイナリ検索の結果は必ず配列内の最初"
"の要素を返します。不安定なバイナリ検索では配列内の最初の要素以外を返す場合が"
"あります。\n"
"* 計算処理にかかる時間は、最良でも最悪でも O(log n) になります。不安定な検索"
"の場合は目的の値が見つかった時点で停止しますので、最悪のケースで O(log n) に"
"なります。実際の環境では、この違いはあまり意味がありません。\n"
"* 安定したバイナリ検索の場合、列挙ごとに対を 1 回ずつ比較することになります。"
"不安定な検索の場合は、列挙ごとに 2 回の比較が必要になります。\n"
"* 全体的な結果は、 \"最適な\" 場合は不安定なバイナリ検索のほうがよりよい結果"
"になりますが、 \"最悪の\" 場合は列挙ごとの比較が少なくなることから安定したバ"
"イナリ検索のほうが速くなりますし、平均的な場合はほぼ同等になります。つまり、"
"安定したバイナリ検索では \"最適な\" 場合の性能を少し犠牲にすることで、非ユ"
"ニークなキーが存在する環境でも配列内の順序で最初の値を返すことができます。\n"
"\n"
"このモジュールにはコンパニオン \"XS\" モジュールも用意されていますので、可能"
"な限り List::BinarySearch::XS もインストールしておくことをお勧めします。 "
"List::BinarySearch::XS がインストールされている場合、 'binsearch' や "
"'binsearch_pos' では XS コードを使用するようになります。この動作は "
"'$ENV{List_BinarySearch_PP}' を true の値にすることで上書きすることができま"
"す。ほとんどの CPAN インストーラでは XS モジュールを自動インストールするか、"
"もしくは自動的にインストールするようプロンプトを表示します。詳しくは "
"CONFIGURATION をお読みください。"

#. tumbleweed/perl-List-UtilsBy/description
msgid ""
"This module provides a number of list utility functions, all of which take "
"an initial code block to control their behaviour. They are variations on "
"similar core perl or 'List::Util' functions of similar names, but which use "
"the block to control their behaviour. For example, the core Perl function "
"'sort' takes a list of values and returns them, sorted into order by their "
"string value. The sort_by function sorts them according to the string value "
"returned by the extra function, when given each value.\n"
"\n"
"   my @names_sorted = sort @names;\n"
"\n"
"   my @people_sorted = sort_by { $_->name } @people;"
msgstr ""
"このモジュールは複数のリストユーティリティ関数を提供するもので、いずれもその"
"動作を制御するのに初期コードブロックを利用します。これらは Perl の中枢内、も"
"しくは 'List::Util' 関数などで提供されている機能の派生版ですが、こちらはその"
"動作を制御するのに初期コードブロックを利用することができる仕組みです。たとえ"
"ば Perl 関数の 'sort' は値のリストをパラメータとして受け取って同じ型を返しま"
"すが、並べ替えにあたってはその文字列値をキーにします。 'sort_by' 関数では、"
"コードブロック内で返された文字列を元にして、並べ替えを行ないます。\n"
"\n"
"  my @names_sorted = sort @names;\n"
"\n"
"  my @people_sorted = sort_by { $_->name } @people;"

#. tumbleweed/perl-Locale-Codes/summary
msgid "Distribution of modules to handle locale codes"
msgstr "ロケールコードを扱うための配布モジュール"

#. tumbleweed/perl-Locale-Codes/description
msgid ""
"*Locale-Codes* is a distribution containing a set of modules designed to "
"work with sets of codes which uniquely identify something. For example, "
"there are codes associated with different countries, different currencies, "
"different languages, etc. These sets of codes are typically maintained in "
"some standard.\n"
"\n"
"This distribution provides a way to work with these lists of codes. Because "
"the data from the various standards is not available in any sort of "
"consistent API, access to the lists is not available in any direct fashion. "
"To compensate for this, the list of codes is stored internally within this "
"distribution, and the distribution is updated on a regular basis to include "
"all known codes at that point in time. This does mean that it is necessary "
"to keep this distribution up-to-date to keep up with the various changes "
"that are made in the various standards.\n"
"\n"
"Traditionally, a module has been created to work with each type of code "
"sets. So, there is a module for working with country lists, one for currency "
"lists, etc. Since version 3.00, all of these individual modules were written "
"as wrappers around a central module (which was not intended to be used "
"directly) which did all of the real work.\n"
"\n"
"Starting with version 3.50, the central module was reworked slightly to "
"provide an object-oriented interface. All of the modules for working with "
"individual types of code sets were reworked to use the improved OO module, "
"so the traditional interfaces still work as they always have. As a result, "
"you are free to use the traditional functional (non-OO) interfaces, or to "
"use the OO interface and bypass the wrapper modules entirely.\n"
"\n"
"Both methods will be supported in the future, so use the one that is best "
"suited to your needs.\n"
"\n"
"Within each type, any number of code sets are allowed. For example, sets of "
"country codes are maintained in several different locations including the "
"ISO-3166 standard, the IANA, and by the United Nations. The lists of "
"countries are similar, but not identical. Multiple code sets are supported, "
"though trying to convert from one code set to another will not always work "
"since the list of countries is not one-to-one.\n"
"\n"
"All data in all of these modules comes directly from the original standards "
"(or as close to direct as possible), so it should be up-to-date at the time "
"of release.\n"
"\n"
"I plan on releasing a new version several times a year to incorporate any "
"changes made in the standards. However, I don't always know about changes "
"that occur, so if any of the standards change, and you want a new release "
"sooner, just email me and I'll get one out."
msgstr ""
"*Locale-Codes*は、何かを一意に識別するコードのセットを処理するように設計され"
"たモジュールのセットを含むディストリビューションです。たとえば、異なる国、異"
"なる通貨、異なる言語などに関連付けられたコードがあります。これらのコードセッ"
"トは、通常、何らかの標準で保持されています。\n"
"\n"
"このディストリビューションによって、これらのコード・リストを操作する方法が提"
"供されます。さまざまな標準からのデータは、いかなる種類の一貫したAPIでも利用で"
"きないので、リストへのアクセスはいかなる直接的な方法でも利用できません。これ"
"を補正するために、コードのリストはこのディストリビューション内に内部的に格納"
"され、ディストリビューションは定期的に更新されて、その時点で既知のすべての"
"コードが含まれます。これは、さまざまな標準で行われるさまざまな変更に対応する"
"ために、このディストリビューションを最新の状態に保つ必要があることを意味しま"
"す。\n"
"\n"
"従来、モジュールは各タイプのコード・セットを処理するために作成されてきまし"
"た。したがって、国別リストを操作するためのモジュールや、通貨リストなどのため"
"のモジュールがあります。バージョン3.00以降、これらの個々のモジュールはすべ"
"て、実際の作業をすべて行う中央モジュール(直接使用するようには意図されていませ"
"ん)のラッパーとして書かれました。\n"
"\n"
"バージョン3.50から、中央モジュールはオブジェクト指向インターフェースを提供す"
"るために少し修正されました。個々のタイプのコード・セットを処理するためのモ"
"ジュールはすべて、改良されたOOモジュールを使用するように変更されていますの"
"で、従来のインターフェースは従来どおり動作します。その結果、従来の機能的な(OO"
"でない)インターフェースを自由に使用したり、OOインターフェースを使用してラッ"
"パー・モジュールを完全にバイパスしたりすることができます。\n"
"\n"
"どちらの方法も今後サポートされるため、ニーズに最も適した方法を使用してくださ"
"い。\n"
"\n"
"各タイプ内では、任意の数のコードセットが許可されます。たとえば、国コードの"
"セットは、ISO-3166規格、IANA、および国連を含むいくつかの異なる場所に保持され"
"ます。国のリストは類似しているが、同一ではありません。複数のコードセットがサ"
"ポートされていますが、国のリストが1対1ではないため、あるコードセットから別の"
"コードセットに変換しようとしても、常に動作するとは限りません。\n"
"\n"
"これらすべてのモジュールのすべてのデータは、元の標準から直接(または可能な限り"
"直接に近い)取得されるため、リリース時に最新である必要があります。\n"
"\n"
"年に数回新しいバージョンをリリースして、標準に加えられた変更を取り入れる予定"
"です。しかし、変更が発生したことを常に把握しているわけではないので、いずれか"
"の標準が変更されて、より早く新しいリリースが必要になった場合は、メールをいた"
"だければ、それを入手できます。"

#. tumbleweed/perl-Log-Any-Adapter-Callback/summary
msgid "(DEPRECATED) Send Log::Any logs to a subroutine"
msgstr "(廃止予定) Log::Any のサブルーチンへの送信"

#. tumbleweed/perl-Log-Any-Adapter-Callback/description
msgid ""
"DEPRECATION NOTICE: Log::Any distribution since 1.708 comes with Log::Any::"
"Adapter::Capture which does the same thing. I'm deprecating this adapter "
"now.\n"
"\n"
"This adapter lets you specify callback subroutine to be called by Log::Any's "
"logging methods (like $log->debug(), $log->error(), etc) and detection "
"methods (like $log->is_warning(), $log->is_fatal(), etc.).\n"
"\n"
"This adapter is used for customized logging, and is mostly a convenient "
"construct to save a few lines of code. You could achieve the same effect by "
"creating a full Log::Any adapter class.\n"
"\n"
"Your logging callback subroutine will be called with these arguments:\n"
"\n"
" ($method, $self, $format, @params)\n"
"\n"
"where $method is the name of method (like \"debug\") and ($self, $format, "
"@params) are given by Log::Any."
msgstr ""
"廃止告知: バージョン 1.708 の Log::Any の配布物には、同様の処理を行なう Log::"
"Any::Adapter::Capture というモジュールが同梱されていますが、このアダプタは廃"
"止する予定です。\n"
"\n"
"このアダプタは Log::Any のログ記録メソッド ($log->debug(), $log->error() な"
"ど) や検出メソッド ($log->is_warning(), $log->is_fatal() など) を呼び出す際、"
"コールバックサブルーチンを指定することができるものでした。\n"
"\n"
"このアダプタはログをカスタマイズする際に使用するもので、数行ほどのコードを省"
"略することのできる便利な仕組みでした。 Log::Any のアダプタクラスを作成するこ"
"とで、同様の効果を得ることができます。\n"
"\n"
"ログのコールバックサブルーチンは、下記のようなパラメータで呼び出されます:\n"
"\n"
" ($method, $self, $format, @params)\n"
"\n"
"ここで $method はメソッド名 (例: \"debug\") 、 ($self, $format, @params) は "
"Log::Any に指定したものになります。"

#. tumbleweed/perl-MRO-Compat/summary
msgid "Mro::* interface compatibility for Perls < 5.9.5"
msgstr "Perl <5.9.5 用の Mro::* とのインタフェース互換性"

#. tumbleweed/perl-Mail-AuthenticationResults/summary
msgid "Object Oriented Authentication-Results Headers"
msgstr "オブジェクト指向型の Authentication-Results ヘッダ"

#. tumbleweed/perl-Mail-AuthenticationResults/description
msgid ""
"Object Oriented Authentication-Results email headers.\n"
"\n"
"This parser copes with most styles of Authentication-Results header seen in "
"the wild, but is not yet fully RFC7601 compliant\n"
"\n"
"Differences from RFC7601\n"
"\n"
"key/value pairs are parsed when present in the authserv-id section, this is "
"against RFC but has been seen in headers added by Yahoo!.\n"
"\n"
"Comments added between key/value pairs will be added after them in the data "
"structures and when stringified."
msgstr ""
"オブジェクト指向型の Authentication-Results 電子メールヘッダです。\n"
"\n"
"このパーサーは一般的に使用されているほとんどの Authentication-Results ヘッダ"
"を処理することができますが、 RFC7601 への完全な準拠までは達成できていませ"
"ん。\n"
"\n"
"RFC7601 との違い\n"
"\n"
"authserv-id セクション内にキー／値の対が存在する場合、これは RFC の仕様には"
"従っていませんが、 Yahoo! などのサービスで使用されています。\n"
"\n"
"文字列化する際にデータ内の構造にキー／値に加えてコメントが追加されます。"

#. tumbleweed/perl-Mail-DKIM/description
msgid ""
"This module implements the various components of the DKIM and DomainKeys "
"message-signing and verifying standards for Internet mail. It currently "
"tries to implement these specifications: \n"
"* RFC4871, for DKIM \n"
"* RFC4870, for DomainKeys \n"
"* draft-ietf-dmarc-arc-protocol-06, for ARC\n"
"\n"
"The module uses an object-oriented interface. You use one of two different "
"classes, depending on whether you are signing or verifying a message. To "
"sign, use the Mail::DKIM::Signer class. To verify, use the Mail::DKIM::"
"Verifier class. Simple, eh?\n"
"\n"
"Likewise for ARC, use the ARC modules Mail::DKIM::ARC::Signer and Mail::"
"DKIM::ARC::Verifier\n"
"\n"
"If you're sending to test libraries which expect the tags in headers to be "
"sorted, you can set $Mail::DKIM::SORTTAGS to a true value, and all created "
"headers will get sorted keys"
msgstr ""
"このモジュールは DKIM の様々なコンポーネントを実装し、インターネットメールに"
"対する DomainKeys のメッセージ署名と、検証に関する標準機能を提供します。現時"
"点では、下記の仕様を実装するように目指しています:\n"
"* RFC4871 (DKIM)\n"
"* RFC4870 (DomainKeys)\n"
"* draft-ietf-dmarc-arc-protocol-06, for ARC\n"
"\n"
"このモジュールには、オブジェクト指向のインターフェイスが用意されています。ま"
"た、メッセージへ署名する場合と検証する場合に備えて、 2 種類の異なるクラスを利"
"用することができます。署名を行なう場合は Mail::DKIM::Signer クラスを、検証を"
"行なう場合は Mail::DKIM::Verifier クラスを利用します。\n"
"\n"
"ARC と同様に、  Mail::DKIM::ARC::Signer と Mail::DKIM::ARC::Verifier は ARC "
"モジュールを使用します。\n"
"\n"
"並べ替えるべきヘッダ内のタグを要求するテストライブラリを送信しようとしている"
"場合は、 $Mail::DKIM::SORTTAGS に true の値を設定してください。これにより、作"
"成されたヘッダには並べ替え用のキーが配置されます"

#. tumbleweed/perl-Mail-Message/summary
msgid "General message object"
msgstr "汎用メッセージオブジェクト"

#. tumbleweed/perl-Mail-Message/description
msgid ""
"A 'Mail::Message' object is a container for MIME-encoded message "
"information, as defined by RFC2822. Everything what is not specificaly "
"related to storing the messages in mailboxes (folders) is implemented in "
"this class. Methods which are related to folders is implemented in the Mail::"
"Box::Message extension."
msgstr ""
"'Mail::Message' オブジェクトは RFC2822 で規定された MIME エンコードされたメッ"
"セージ情報を含めるための仕組みです。このクラスでは、メールボックス (フォル"
"ダ) 内に保存されたメッセージに関する処理が含まれています。フォルダに関するメ"
"ソッドは Mail::Box::Message 拡張で実装されています。"

#. tumbleweed/perl-Mail-SpamAssassin-Plugin-dqs/summary
msgid "SpamAssassin plugin for Spamhaus Data Query Service (DQS)"
msgstr "Spamhaus Data Query Service(DQS)用SpamAssassinプラグイン"

#. tumbleweed/perl-Mail-SpamAssassin-Plugin-dqs/description
msgid ""
"The Spamhaus Data Query Service (DQS) plugin for SpamAssassin enhances "
"existing functions by checking HELO/EHLO, From, Reply-To, Envelope-From and "
"Return-Path against Spamhaus DBL/ZRD blacklists. It also scans the e-mail "
"body for e-mail addresses and performs blacklist lookups against the domains "
"or its authoritative nameservers. Further checks cover the reverse DNS "
"matches in DBL/ZRD blacklists or the SBL/CSS lookups for IP addresses or IP "
"addresses of authoritative nameservers of domains being part of the e-mail "
"body.\n"
"\n"
"While the DQS usage is free under the same terms like when using public "
"mirrors (which are shipped in SpamAssassin as default configuration), a "
"registration procedure for a free DQS key is mandatory nevertheless."
msgstr ""
"SpamAssassin用のSpamhaus Data Query Service(DQS)プラグインは、Spamhaus DBL/"
"ZRDブラックリストに対してHELO/EHLO、From、Reply-To、Envelope-From、Return-Pathをチェックすることで、既存の"
"機能を強化します。また、電子メールの本文をスキャンして電子メールアドレスを探し、ドメインや権限のあるネームサーバに対してブラックリスト検索を実行します。さ"
"らなるチェックは、DBL/ZRDブラックリスト内の逆DNS一致、またはSBL/"
"CSSルックアップで、IPアドレスまたは電子メール本文の一部であるドメインの権威あるネームサーバのIPアドレスを対象とします。\n"
"\n"
"DQSの利用は、パブリックミラー(デフォルト設定としてSpamAssassin場合と同じ条件でDQSの使用は無料ですが、無料のDQSキーの登録手順は必須で"
"す。"

#. tumbleweed/perl-Mail-Transport/summary
msgid "Use Mail Transfer Agents (MTAs)"
msgstr "メール転送エージェント (MTA) の使用"

#. tumbleweed/perl-Mail-Transport/description
msgid ""
"Objects which extend 'Mail::Transport' implement sending and/or receiving of "
"messages, using various protocols.\n"
"\n"
"Mail::Transport::Send extends this class, and offers general functionality "
"for send protocols, like SMTP. Mail::Transport::Receive also extends this "
"class, and offers receive method. Some transport protocols will implement "
"both sending and receiving.\n"
"\n"
"Extends \"DESCRIPTION\" in Mail::Reporter."
msgstr ""
"'Mail::Transport' を拡張したオブジェクトを使用することで、さまざまなプロトコ"
"ルを利用したメッセージの送受信を実装することができます。\n"
"\n"
"Mail::Transport::Send はこのクラスを拡張したもので、 SMTP などの送信プロトコ"
"ルに対する一般的な機能を提供しています。同様に Mail::Transport::Receive では"
"受信メソッドが提供されています。このほか、いくつかの伝送プロトコルに対する送"
"受信機能も用意されています。\n"
"\n"
"Mail::Reporter 内の \"DESCRIPTION\" もお読みください。"

#. tumbleweed/perl-MailTools/summary
msgid "Bundle of ancient email modules"
msgstr "古い電子メールモジュールのバンドル"

#. tumbleweed/perl-Math-Int64/summary
msgid "Manipulate 64 bits integers in Perl"
msgstr "Perl 内での 64 ビット整数の取り扱い"

#. tumbleweed/perl-Math-Int64/description
msgid ""
"This module adds support for 64 bit integers, signed and unsigned, to Perl."
msgstr ""
"このモジュールは符号有りもしくは符号無しの 64 ビット整数を Perl 内で扱えるよ"
"うにします。"

#. tumbleweed/perl-Menlo/summary
msgid "CPAN client"
msgstr "CPAN クライアント"

#. tumbleweed/perl-Menlo/description
msgid ""
"Menlo is a backend for _cpanm 2.0_, developed with the goal to replace cpanm "
"internals with a set of modules that are more flexible, extensible and "
"easier to use."
msgstr ""
"Menlo は _cpanm 2.0_ に対するバックエンドで、より柔軟性が高く、拡張性に富み、"
"使いやすい cpanm モジュールの置き換えとして機能することを目指しています。"

#. tumbleweed/perl-Menlo-Legacy/summary
msgid "Legacy internal and client support for Menlo"
msgstr "Menlo のレガシー内部およびクライアントサポート"

#. tumbleweed/perl-Menlo-Legacy/description
msgid ""
"Menlo::Legacy is a package to install Menlo::CLI::Compat which is a "
"compatibility library that implements the classic version of cpanminus "
"internals and behavios. This is so that existing users of cpanm and API "
"clients such as Carton, Carmel and App::cpm) can rely on the stable features "
"and specific behaviors of cpanm.\n"
"\n"
"This way Menlo can evolve and be refactored without the fear of breaking any "
"downstream clients, including 'cpanm' itself."
msgstr ""
"Menlo::Legacy は cpanmipus の従来バージョンにおける内部仕様や動作を実装する "
"Menlo::CLI::Compat 互換ライブラリをインストールするためのパッケージです。これ"
"は cpanm を使用する既存のユーザと Carton, Carmel, App:cpm などの API クライア"
"ントに対して、 cpanm 固有の機能や動作をそのまま使い続けることができるようにす"
"るためのものです。\n"
"\n"
"この方法により、 Menlo は 'cpanm' 自身を含むダウンストリームクライアントに対"
"して互換性の破壊を伴うことなく進化および改善できるようになっています。"

#. tumbleweed/perl-Metrics-Any/summary
msgid "Abstract collection of monitoring metrics"
msgstr "監視メトリックの抽象コレクション"

#. tumbleweed/perl-Metrics-Any/description
msgid ""
"Provides a central location for modules to report monitoring metrics, such "
"as counters of the number of times interesting events have happened, and "
"programs to collect up and send those metrics to monitoring services.\n"
"\n"
"Inspired by Log::Any, this module splits the overall problem into two sides. "
"Modules wishing to provide metrics for monitoring purposes can use the 'use "
"Metrics::Any' statement to obtain a _collector_ into which they can report "
"metric events. By default this collector doesn't actually do anything, so "
"modules can easily use it without adding extra specific dependencies for "
"specific reporting.\n"
"\n"
"A program using one or more such modules can apply a different policy and "
"request a particular _adapter_ implementation in order to actually report "
"these metrics to some external system, by using the 'use Metrics::Any::"
"Adapter' statement.\n"
"\n"
"This separation of concerns allows module authors to write code which will "
"report metrics without needing to care about the exact mechanism of that "
"reporting (as well as to write code which does not itself depend on the code "
"required to perform that reporting)."
msgstr ""
"特定のイベントが発生した回数などの監視メトリックに対して、それを報告するため"
"のモジュールです。このほか、モニタリングサービスに対してイベントの収集を行"
"なって送信するプログラムも備えています。\n"
"\n"
"Log::Any からヒントを得て作られたもので、このモジュールは問題点を 2 つの側面"
"に分解します。監視目的でのメトリックを提供したいモジュール側では 'use "
"Metrics::Any' を指定することで、イベント情報を取得するための _コレクタ_ を定"
"義することができます。規定ではこのコレクタは何も行ないませんが、特定のレポー"
"トを行なうような場合でも、追加の要件を追加することなく使用できるようになって"
"います。\n"
"\n"
"複数のモジュールを使用するプログラムの場合は異なるポリシーを適用します。この"
"場合は、何らかの外部システムにメトリックを報告する目的で 'use Metrics::Any::"
"Adapter' ステートメントを使用することで _アダプタ_ 実装を使用してください。\n"
"\n"
"これらの分離により、モジュールの作者が報告の仕組みを知ることなくメトリックを"
"報告するためのコードを作成できるようになります (また、報告を行なうのに必要な"
"コードにも依存しないようになります。"

#. tumbleweed/perl-Module-Build/description
msgid ""
"'Module::Build' is a system for building, testing, and installing Perl "
"modules. It is meant to be an alternative to 'ExtUtils::MakeMaker'. "
"Developers may alter the behavior of the module through subclassing. It also "
"does not require a 'make' on your system - most of the 'Module::Build' code "
"is pure-perl and written in a very cross-platform way.\n"
"\n"
"See \"COMPARISON\" for more comparisons between 'Module::Build' and other "
"installer tools.\n"
"\n"
"To install 'Module::Build', and any other module that uses 'Module::Build' "
"for its installation process, do the following:\n"
"\n"
"  perl Build.PL       # 'Build.PL' script creates the 'Build' script   ./"
"Build             # Need ./ to ensure we're using this \"Build\" script   ./"
"Build test        # and not another one that happens to be in the PATH   ./"
"Build install\n"
"\n"
"This illustrates initial configuration and the running of three 'actions'. "
"In this case the actions run are 'build' (the default action), 'test', and "
"'install'. Other actions defined so far include:\n"
"\n"
"  build                          manifest   clean                          "
"manifest_skip   code                           manpages   "
"config_data                    pardist   diff                           "
"ppd   dist                           ppmdist   "
"distcheck                      prereq_data   distclean                      "
"prereq_report   distdir                        pure_install   "
"distinstall                    realclean   distmeta                       "
"retest   distsign                       skipcheck   "
"disttest                       test   docs                           "
"testall   fakeinstall                    testcover   "
"help                           testdb   html                           "
"testpod   install                        testpodcoverage   "
"installdeps                    versioninstall\n"
"\n"
"You can run the 'help' action for a complete list of actions."
msgstr ""
"'Module::Build' は Perl モジュールを構築し、テストし、インストールするための"
"システムです。 'ExtUtils::MakeMaker' の代替となるべく開発されています。開発者"
"はサブクラス化を通じてモジュールの動作を変更することもできます。また、お使い"
"のシステムには 'make' を必要としなくなります。それは、 'Module::Build' のほと"
"んどのコードは純粋な Perl で作成されていて、クロスプラットフォームな方法で書"
"かれているためです。\n"
"\n"
"'Module::Build' とその他のインストーラツールの比較について、詳しくは "
"\"COMPARISON\" のマニュアルページをお読みください。\n"
"\n"
"'Module::Build' やこれをインストール時に使用するモジュールをインストールする"
"には、下記のようにして行ないます:\n"
"\n"
"  perl Build.PL       # 'Build.PL' スクリプトが 'Build' スクリプトを作成しま"
"す   ./Build             # カレントディレクトリにある \"Build\" スクリプトを"
"指定して実行します   ./Build test           ./Build install\n"
"\n"
"これは初期設定と 3 種類の 'アクション' を説明しているものです。この場合、 "
"'build' (既定のアクション), 'test', 'install' の各処理を実行しています。その"
"他のアクションには、下記のようなものがあります:\n"
"\n"
"  build                          manifest   clean                          "
"manifest_skip   code                           manpages   "
"config_data                    pardist   diff                           "
"ppd   dist                           ppmdist   "
"distcheck                      prereq_data   distclean                      "
"prereq_report   distdir                        pure_install   "
"distinstall                    realclean   distmeta                       "
"retest   distsign                       skipcheck   "
"disttest                       test   docs                           "
"testall   fakeinstall                    testcover   "
"help                           testdb   html                           "
"testpod   install                        testpodcoverage   "
"installdeps                    versioninstall\n"
"\n"
"動作の一覧について、詳しくは 'help' のセクションをお読みください。"

#. tumbleweed/perl-Module-Build-Prereqs-FromCPANfile/summary
msgid "Construct prereq parameters of Module::Build from cpanfile"
msgstr "cpanfile からの Module::Build のパラメータの prereq 構築"

#. tumbleweed/perl-Module-Build-Prereqs-FromCPANfile/description
msgid ""
"This simple module reads cpanfile and converts its content into valid prereq "
"parameters for 'new()' method of Module::Build.\n"
"\n"
"Currently it does not support \"optional features\" specification (See "
"cpanfile/feature)."
msgstr ""
"このシンプルなモジュールは cpanfile を読み込んで、その内容を Module::Build "
"の 'new()' メソッド向けの prereq パラメータに変換します。\n"
"\n"
"現時点では \"optional features\" には対応していません (詳しくは cpanfile/"
"feature をお読みください) 。"

#. tumbleweed/perl-Module-Build-Using-PkgConfig/summary
msgid ""
"Extend Module::Build to more easily use platform libraries provided by pkg-"
"config"
msgstr ""
"pkg-config で提供されるプラットフォームをより容易に使用できるようにするため"
"の Module::Build の拡張"

#. tumbleweed/perl-Module-Build-Using-PkgConfig/description
msgid ""
"This subclass of Module::Build provides some handy methods to assist the "
"_Build.PL_ script of XS-based module distributions that make use of platform "
"libraries managed by _pkg-config_.\n"
"\n"
"As well as supporting libraries installed on a platform-wide basis and thus "
"visible to _pkg-config_ itself, this subclass also assists with 'Alien::'-"
"based wrappers of these system libraries, allowing them to be dynamically "
"installed at build time if the platform does not provide them."
msgstr ""
"Module::Build のサブクラスである本クラスは、 _pkg-config_ で管理されるプラッ"
"トフォーム側ライブラリを使用する XS ベースのモジュール配布物に対し、 _Build."
"PL_ での支援を行なう各種のメソッドを提供します。\n"
"\n"
"プラットフォーム全体に対してインストールされているライブラリと _pkg-config_ "
"それ自身に加え、このサブクラスではシステムライブラリに対する 'Alien::' ベース"
"のラッパーの支援を行なうことができます。これにより、プラットフォーム側では提"
"供されていないライブラリがある場合、その構築の時点で動的にインストールできる"
"ようになります。"

#. tumbleweed/perl-Module-CPANTS-Analyse/summary
#. tumbleweed/perl-Module-CPANTS-Analyse/description
msgid "Generate Kwalitee ratings for a distribution"
msgstr "ディストリビューション用のKwalitee評価の生成"

#. tumbleweed/perl-Module-Mask/summary
msgid "Pretend certain modules are not installed"
msgstr "特定のモジュールがインストールされていないと仮定"

#. tumbleweed/perl-Module-Mask/description
msgid ""
"Sometimes you need to test what happens when a given module is not "
"installed. This module provides a way of temporarily hiding installed "
"modules from perl's require mechanism. The Module::Mask object adds itself "
"to @INC and blocks require calls to restricted modules.\n"
"\n"
"Module::Mask will not affect modules already loaded at time of instantiation."
msgstr ""
"特定のモジュールがインストールされていない場合に何が起こるかをテストする必要がある場合もあります。このモジュールは、インストールされたモジュールをperl"
"のrequireメカニズムから一時的に隠す方法を提供します。Module::Maskオブジェクトはそれ自体を@INCに追加し、ブロックには制限されたモジュ"
"ールへの呼び出しが必要です。\n"
"\n"
"Module::Maskは、インスタンス化の時点ですでにロードされているモジュールには影響しません。"

#. tumbleweed/perl-Mojo-Log-Colored/summary
msgid "Colored Mojo logging"
msgstr "色付き Mojo ログ"

#. tumbleweed/perl-Mojo-Log-Colored/description
msgid ""
"Mojo::Log::Colored is a logger for Mojolicious with colored output for the "
"terminal. It lets you define colors for each log level based on Term::"
"ANSIColor and comes with sensible default colors. The full lines in the log "
"will be colored.\n"
"\n"
"Since this inherits from Mojo::Log you can still give it a 'file', but the "
"output would also be colored. That does not make a lot of sense, so you "
"don't want to do that. Use this for development, not production."
msgstr ""
"Mojo::Log::Colored は端末に対して Mojolicious で色つきの出力を行なうことので"
"きるロガーです。 Term::ANSIColor をベースにして各ログレベルに色を設定すること"
"ができるほか、既定の色をそのまま使用することもできます。これにより、ログ全体"
"が色付きで出力されるようになります。\n"
"\n"
"このモジュールは Mojo::Log を継承しているため、 'file' に対してそれを与えるこ"
"とで色つきのファイル出力を行なうこともできます。ほとんどの場合において意味の"
"ないものではありますが・・。また、このモジュールは開発用に使用すべきものであ"
"り、本番環境では使用すべきではありません。"

#. tumbleweed/perl-Mojo-Redis/summary
msgid "Redis driver based on Mojo::IOLoop"
msgstr "Mojo::IOLoop をベースにした Redis ドライバ"

#. tumbleweed/perl-Mojo-Redis/description
msgid ""
"Mojo::Redis is a Redis driver that use the Mojo::IOLoop, which makes it "
"integrate easily with the Mojolicious framework.\n"
"\n"
"It tries to mimic the same interface as Mojo::Pg, Mojo::mysql and Mojo::"
"SQLite, but the methods for talking to the database vary.\n"
"\n"
"This module is in no way compatible with the 1.xx version of 'Mojo::Redis' "
"and this version also tries to fix a lot of the confusing methods in 'Mojo::"
"Redis2' related to pubsub.\n"
"\n"
"This module is currently EXPERIMENTAL, and bad design decisions will be "
"fixed without warning. Please report at https://github.com/jhthorsen/mojo-"
"redis/issues if you find this module useful, annoying or if you simply find "
"bugs. Feedback can also be sent to 'jhthorsen@cpan.org'."
msgstr ""
"Mojo::RedisはMojo::IOLoopを使用するRedisドライバであり、Mojoliciousフレームワークと簡単に統合できるようにします。"
"\n"
"\n"
"Mojo::Pg、Mojo::mysql、Mojo::SQLiteと同じインターフェースを模倣しようとしますが、データベースと対話するメソッドは異なります"
"。\n"
"\n"
"このモジュールは'Mojo::Redis'の1."
"xxバージョンとは全く互換性がなく、このバージョンはpubsubに関連する'Mojo::Redis2'の多くの混乱したメソッドを修正しようとしています。"
"\n"
"\n"
"このモジュールは現在実験的であり、不適切な設計判断は警告なしに修正されます。このモジュールが役に立ったり、面倒だったり、単にバグを見つけただけの場合は、h"
"ttps://github.com/jhthorsen/mojo-redis/"
"issuesに報告してください。フィードバックは'jhthorsen@cpan.org'に送ることもできます。"

#. tumbleweed/perl-Mojolicious-Plugin-Status/summary
msgid "Mojolicious server status"
msgstr "Mojolicious サーバステータス"

#. tumbleweed/perl-Mojolicious-Plugin-Status/description
msgid ""
"Mojolicious::Plugin::Status is a Mojolicious plugin providing a server "
"status ui for Mojo::Server::Daemon and Mojo::Server::Prefork. Note that this "
"module is *EXPERIMENTAL* and should therefore only be used for debugging "
"purposes."
msgstr ""
"Mojolicious::Plugin::Status は Mojo::Server::Daemon と Mojo::Server::Prefork "
"に対して、サーバステータス UI を提供する Mojolicious プラグインです。このモ"
"ジュールは*実験的*であるため、デバッグ目的にのみ使用することに注意してくださ"
"い。"

#. tumbleweed/perl-Mojolicious-Plugin-Webpack/summary
msgid "Mojolicious ♥ Webpack"
msgstr "Mojolicious ♥　Webpack"

#. tumbleweed/perl-Mojolicious-Plugin-Webpack/description
msgid ""
"Mojolicious::Plugin::Webpack is a Mojolicious plugin to make it easier to "
"work with https://webpack.js.org/ or https://rollupjs.org/. This plugin "
"will... \n"
"* 1.\n"
"\n"
"Generate a minimal 'package.json' and a Webpack or Rollup config file. Doing "
"this manually is possible, but it can be quite time consuming to figure out "
"all the bits and pieces if you are not already familiar with Webpack. \n"
"* 2."
msgstr ""
"Mojolicious::Plugin::Webpackは、https://webpack.js.org/やhttps://rollupjs.org/"
"での作業を容易にするMojoliciousプラグインです。このプラグインは...\n"
"* 1.\n"
"\n"
"最小限の「package.json」とWebpackまたはRollup構成ファイルを生成します。これを手動で行うこともできますが、Webpackに慣れてい"
"ない場合は、すべての部分を把握するのにかなり時間がかかります。\n"
"* 2."

#. tumbleweed/perl-Moo/description
msgid ""
"'Moo' is an extremely light-weight Object Orientation system. It allows one "
"to concisely define objects and roles with a convenient syntax that avoids "
"the details of Perl's object system. 'Moo' contains a subset of Moose and is "
"optimised for rapid startup.\n"
"\n"
"'Moo' avoids depending on any XS modules to allow for simple deployments. "
"The name 'Moo' is based on the idea that it provides almost -- but not quite "
"-- two thirds of Moose. As such, the Moose::Manual can serve as an effective "
"guide to 'Moo' aside from the MOP and Types sections.\n"
"\n"
"Unlike Mouse this module does not aim at full compatibility with Moose's "
"surface syntax, preferring instead to provide full interoperability via the "
"metaclass inflation capabilities described in MOO AND MOOSE.\n"
"\n"
"For a full list of the minor differences between Moose and Moo's surface "
"syntax, see INCOMPATIBILITIES WITH MOOSE."
msgstr ""
"'Moo' は非常に軽量なオブジェクト指向システムです。 Perl のオブジェクトシステ"
"ムの詳細を気にすることなく、簡潔にオブジェクトと役割を定義することができま"
"す。 'Moo' には Moose のサブセットが含まれ、高速に起動できるように最適化がな"
"されています。\n"
"\n"
"'Moo' はシンプルなデプロイのため、どの XS モジュールとも依存関係を持ちませ"
"ん。 'Moo' という名前は、 Moose の 2/3 程度 (かなりの量とは言えませんが・・) "
"を提供する、という考え方をベースにしています。そのため、 Moose::Manual は "
"MOP や Types セクションとは別に 'Moo' への効果的なガイドとしても機能しま"
"す。\n"
"\n"
"Mouse とは異なり、このモジュールは Moose のサーフェイス文法との完全な互換性は"
"目指していません。その代わりに、 MOO AND MOOSE で記述されているメタクラスの膨"
"張機能を介して、すべての相互運用性を提供することを目指しています。\n"
"\n"
"Moose と Moo のサーフェイス文法についての細かい差異については、 "
"INCOMPATIBILITIES WITH MOOSE をお読みください。"

#. tumbleweed/perl-MooX-Attribute-ENV/summary
msgid "Allow Moo attributes to get their values from %ENV"
msgstr "Moo 属性が %ENV から値を取得できるようにする"

#. tumbleweed/perl-MooX-Attribute-ENV/description
msgid ""
"This is a Moo extension. It allows other attributes for Moo/has. If any of "
"these are given, then Moo/BUILDARGS is wrapped so that values for object "
"attributes can, if not supplied in the normal construction process, come "
"from the environment.\n"
"\n"
"The environment will be searched for either the given case, or upper case, "
"version of the names discussed below.\n"
"\n"
"When a prefix is mentioned, it will be prepended to the mentioned name, with "
"a '_' in between."
msgstr ""
"これはMoo拡張です。Moo/hasの他の属性を許可します。これらのいずれかを指定すると、Moo/"
"BUILDARGSがラップされ、オブジェクト属性の値が通常のコンストラクションプロセスで指定されていない場合でも、環境から取得できるようになります。\n"
"\n"
"環境では、以下で説明する名前の大文字と小文字のどちらかが検索されます。\n"
"\n"
"接頭辞が指定されている場合は、指定された名前の前に「_」を付けて付加されます。"

#. tumbleweed/perl-MooX-Locale-Passthrough/summary
msgid "Provide API used in translator modules without translating"
msgstr "変換無しでの変換モジュール内で使用する API"

#. tumbleweed/perl-MooX-Locale-Passthrough/description
msgid ""
"'MooX::Locale::Passthrough' is made to allow CPAN modules use translator API "
"without adding heavy dependencies (external software) or requirements "
"(operating resulting solution).\n"
"\n"
"This software is released together with MooX::Locale::TextDomain::OO, which "
"allowes then to plugin any desired translation."
msgstr ""
"'MooX::Locale::Passthrough' は CPAN モジュールに対して、変換 API に重い依存関"
"係 (外部ソフトウエア) や要件 (操作結果の解決) をもたらさずに処理する機能を提"
"供します。\n"
"\n"
"このソフトウエアは MooX::Locale::TextDomain::OO と呼ばれる、任意の必要な変換"
"に接続することのできるモジュールとともに公開されています。"

#. tumbleweed/perl-MooX-Options/summary
msgid "Explicit Options eXtension for Object Class"
msgstr "オブジェクトクラスに対する明示的なオプション拡張"

#. tumbleweed/perl-MooX-Options/description
msgid ""
"Create a command line tool with your Moo, Moose objects.\n"
"\n"
"Everything is explicit. You have an 'option' keyword to replace the usual "
"'has' to explicitly use your attribute into the command line.\n"
"\n"
"The 'option' keyword takes additional parameters and uses Getopt::Long::"
"Descriptive to generate a command line tool."
msgstr ""
"Moo (Moose オブジェクト) を利用したコマンドラインツールを作成します。\n"
"\n"
"全てのものは明示的な存在で、 'option' キーワードを指定することで通常の 'has' "
"を置き換えて、コマンドライン内で独自の属性を使用することができます。\n"
"\n"
"'option' キーワードには追加のパラメータを指定できるほか、 Getopt::Long::"
"Descriptive を利用してコマンドラインツールを構築することができます。"

#. tumbleweed/perl-MooX-StrictConstructor/summary
msgid "Make your Moo-based object constructors blow up on unknown attributes"
msgstr ""
"Moo ベースのオブジェクトのコンストラクタで未知の属性を排除するモジュール"

#. tumbleweed/perl-MooX-StrictConstructor/description
msgid ""
"Simply loading this module makes your constructors \"strict\". If your "
"constructor is called with an attribute init argument that your class does "
"not declare, then it dies. This is a great way to catch small typos.\n"
"\n"
"Your application can use Carp::Always to generate stack traces on 'die'. "
"Previously all exceptions contained traces, but this could potentially leak "
"sensitive information, e.g.\n"
"\n"
"    My::Sensitive::Class->new( password => $sensitive, extra_value => "
"'foo' );"
msgstr ""
"このモジュールをロードするだけで、コンストラクターは「厳密」になります。クラ"
"スが宣言していない属性init引数を指定してコンストラクターを呼び出すと、コンス"
"トラクターは終了します。これは小さなタイプミスを検出するための優れた方法で"
"す。\n"
"\n"
"アプリケーションはCarp::Alwaysを使って'die'にスタックトレースを生成することが"
"できます。以前はすべての例外にトレースが含まれていましたが、これにより機密情"
"報が漏洩する可能性がありました。たとえば\n"
"\n"
"    My::Sensitive::Class->new(password=>$sensitive,extra_value=>'foo');"

#. tumbleweed/perl-MooX-Traits/description
msgid ""
"Was any of the SYNOPSIS unexpected? Basically, this module is the same thing "
"as MooseX::Traits and MouseX::Traits, only for Moo. _Quelle surprise_, right?"
msgstr ""
"SYNOPSIS は予期しないものでしたでしょうか？ 基本的に、このモジュールは "
"MooseX::Traits と MouseX::Traits と同じものですが、 Moo 向けだけのものです。"
"驚きですか？"

#. tumbleweed/perl-MooX-late/summary
msgid "Easily translate Moose code to Moo"
msgstr "Moose コードを Moo に簡単に翻訳できるモジュール"

#. tumbleweed/perl-MooX-late/description
msgid ""
"Moo is a light-weight object oriented programming framework which aims to be "
"compatible with Moose. It does this by detecting when Moose has been loaded, "
"and automatically \"inflating\" its classes and roles to full Moose classes "
"and roles. This way, Moo classes can consume Moose roles, Moose classes can "
"extend Moo classes, and so forth.\n"
"\n"
"However, the surface syntax of Moo differs somewhat from Moose. For example "
"the 'isa' option when defining attributes in Moose must be either a string "
"or a blessed Moose::Meta::TypeConstraint object; but in Moo must be a "
"coderef. These differences in surface syntax make porting code from Moose to "
"Moo potentially tricky. MooX::late provides some assistance by enabling a "
"slightly more Moosey surface syntax.\n"
"\n"
"MooX::late does the following: \n"
"* 1.\n"
"\n"
"Supports 'isa => $stringytype'. \n"
"* 2.\n"
"\n"
"Supports 'does => $rolename' . \n"
"* 3.\n"
"\n"
"Supports 'lazy_build => 1'. \n"
"* 4.\n"
"\n"
"Exports 'blessed' and 'confess' functions to your namespace. \n"
"* 5.\n"
"\n"
"Handles native attribute traits.\n"
"\n"
"Five features. It is not the aim of 'MooX::late' to make every aspect of Moo "
"behave exactly identically to Moose. It's just going after the low-hanging "
"fruit. So it does five things right now, and I promise that future versions "
"will never do more than seven.\n"
"\n"
"Previous releases of MooX::late added support for 'coerce => 1' and 'default "
"=> $nonref'. These features have now been added to Moo itself, so MooX::late "
"no longer has to deal with them."
msgstr ""
"Moo はオブジェクト指向のプログラミングフレームワークで、 Moose との互換性を目"
"指しているものです。 Moose が読み込まれたタイミングを検出することで、自動的に"
"自己のクラスや役割を自動的に \"膨張\" させ、完全な Moose クラスや役割となるよ"
"うに作られています。この方法により、 Moo のクラスは Moose の役割を消費するこ"
"とができますし、逆に Moose のクラスは Moo のクラス拡張することができます。\n"
"\n"
"しかしながら、 Moo のサーフェイス文法は Moose のものとは少し異なります。たと"
"えば Moose 内で属性を定義する際の 'isa' オプションは、文字列または Moose::"
"Meta::TypeConstraint オブジェクトのブレスを指定しますが、 Moo ではコード参照"
"でなければなりません。このようなサーフェイス文法の差異は、 Moose から Moo へ"
"のコードの移植を潜在的にやりにくくしています。 MooX::late では、 Moosey サー"
"フェイス文法を有効化するためのいくつかの支援機能が提供されています。\n"
"\n"
"MooX::late では下記のようなことを行ないます:\n"
"* 1.\n"
"\n"
"  'isa => $stringytype' のサポート\n"
"* 2.\n"
"\n"
"  'does => $rolename'  のサポート\n"
"* 3.\n"
"\n"
"  'lazy_build => 1' のサポート\n"
"* 4.\n"
"\n"
"  お使いのネームスペースに対する 'blessed' と 'confess' の関数\n"
"* 5.\n"
"\n"
"ネイティブ属性特性を処理します。\n"
"\n"
"  'String', 'Number', 'Counter','Bool' は、 Moo の内部実装詳細により、サポー"
"トされることはまずありません。サポートすべき他の属性がある場合は、まず私たち"
"あてに連絡を取ってください。こちらで判断させていただきます。\n"
"\n"
"5 つの機能。 Moo の様々な局面で、 'MooX::late' が Moose と正確に同じ動作をす"
"ることは目指していません。このモジュールは、取りやすいフルーツのようなもので"
"あるべきであると考えています。そのため、現時点では 5 つの要素がありますが、将"
"来的に 7 つ以上になることは決してありません。\n"
"\n"
"MooX::late の以前のリリースでは、 'coerce => 1' と 'default => $nonref' に対"
"するサポートが追加されました。これらの機能は Moo 自身にも追加されているた"
"め、 MooX::late ではもはやそれを扱わなくなっています。"

#. tumbleweed/perl-Moose/summary
msgid "Postmodern object system for Perl 5"
msgstr "Perl 5 向けポストモダンオブジェクトシステム"

#. tumbleweed/perl-MooseX-App/summary
msgid "Write user-friendly command line apps with even less suffering"
msgstr "ユーザフレンドリなコマンドラインアプリを作成するための仕組み"

#. tumbleweed/perl-MooseX-App/description
msgid ""
"MooseX-App is a highly customisable helper to write user-friendly command "
"line applications without having to worry about most of the annoying things "
"usually involved. Just take any existing Moose class, add a single line "
"('use MooseX-App qw(PluginA PluginB ...);') and create one class for each "
"command in an underlying namespace. Options and positional parameters can be "
"defined as simple Moose accessors using the 'option' and 'parameter' "
"keywords respectively."
msgstr ""
"MooseX-App は高度にカスタマイズ可能なヘルパーで、ユーザフレンドリなコマンドラ"
"インアプリケーションを、よくある面倒な手間を省いて作成することができる仕組み"
"です。任意の既存の Moose クラスを指定するだけで、あとは ('use MooseX-App "
"qw(PluginA PluginB ...);') の 1 行を追加して、元の名前空間内にコマンドごとの"
"クラスを 1 つずつ作成するだけです。オプションや位置依存のパラメータは、 "
"'option' や 'parameter' のキーワードを使用することで、単純な Moose アクセサー"
"として定義することができます。"

#. tumbleweed/perl-Net-AMQP-RabbitMQ/summary
msgid "Interact with RabbitMQ over AMQP using librabbitmq"
msgstr "librabbitmq を利用して AMQP 経由での RabbitMQ との対話"

#. tumbleweed/perl-Net-AMQP-RabbitMQ/description
msgid ""
"'Net::AMQP::RabbitMQ' provides a simple wrapper around the librabbitmq "
"library that allows connecting, declaring exchanges and queues, binding and "
"unbinding queues, publishing, consuming and receiving events.\n"
"\n"
"Error handling in this module is primarily achieve by 'Perl_croak' (die). "
"You should be making good use of 'eval' around these methods to ensure that "
"you appropriately catch the errors."
msgstr ""
"'Net::AMQP::RabbitMQ' は librabbitmq に対する薄いラッパーで、エクスチェンジや"
"キューに対する接続や定義、キューのバインドやその解除、イベントの消費や受信な"
"どを行なうことができます。\n"
"\n"
"このモジュール内でのエラー処理は、主に 'Perl_croak' (die) によって実現されて"
"います。エラーを取得できるようにするため、これらのメソッドを使用する場合は "
"'eval' を適切に使用するようにしてください。"

#. tumbleweed/perl-Net-CIDR-Lite/description
msgid ""
"Faster alternative to Net::CIDR when merging a large number of CIDR address "
"ranges. Works for IPv4 and IPv6 addresses."
msgstr ""
"大規模な CIDR アドレス範囲を合成する際に使用する、 Net::CIDR の高速化版です。"
"IPv4 と IPv6 の両方のアドレスで動作します。"

#. tumbleweed/perl-Net-DBus/description
msgid ""
"Net::DBus provides a Perl API for the DBus message system. The DBus Perl "
"interface is currently operating against the 0.32 development version of "
"DBus, but should work with later versions too, providing the API changes "
"have not been too drastic.\n"
"\n"
"Users of this package are either typically, service providers in which case "
"the Net::DBus::Service and Net::DBus::Object modules are of most relevance, "
"or are client consumers, in which case Net::DBus::RemoteService and Net::"
"DBus::RemoteObject are of most relevance."
msgstr ""
"Net::DBus は DBus メッセージシステムに対する Perl API を提供します。 DBus "
"Perl インターフェイスは、現在 DBus の開発バージョン 0.32 で動作する仕組みです"
"が、 API が大幅に変更されない限り、以降のバージョンでも動作するはずのもので"
"す。\n"
"\n"
"このパッケージは一般に、 Net::DBus::Service や Net::DBus::Object のモジュール"
"などから使われるほか、 Net::DBus::RemoteService や Net::DBus::RemoteObjectな"
"ど、クライアント側でも使用する場合があります。"

#. tumbleweed/perl-Net-DNS/description
msgid ""
"Net::DNS is a collection of Perl modules that act as a Domain Name System "
"(DNS) resolver. It allows the programmer to perform DNS queries that are "
"beyond the capabilities of \"gethostbyname\" and \"gethostbyaddr\".\n"
"\n"
"The programmer should be familiar with the structure of a DNS packet. See "
"RFC 1035 or DNS and BIND (Albitz & Liu) for details."
msgstr ""
"Net::DNS はドメインネームシステム (DNS) の解決器として動作する Perl モジュー"
"ルです。プログラマに対して DNS の問い合わせ機能を提供し、 'gethostbyname' や "
"'gethostbyaddr' が提供する以上のことを行なうことができます。\n"
"\n"
"なお、プログラムを記述する際には DNS パケットの書式に関する知識が必要となりま"
"す。詳しくは RFC 1035 または DNS and BIND (Albitz & Liu 著作) をお読みくださ"
"い。"

#. tumbleweed/perl-Net-INET6Glue/description
msgid ""
"Net::INET6Glue is a collection of modules to make common modules IPv6 ready "
"by hotpatching them.\n"
"\n"
"Unfortunatly the current state of IPv6 support in perl is that no IPv6 "
"support is in the core and that a lot of important modules (like Net::FTP, "
"Net::SMTP, LWP,...) do not support IPv6 even if the modules for IPv6 sockets "
"like Socket6, IO::Socket::IP or IO::Socket::INET6 are available.\n"
"\n"
"This module tries to mitigate this by hotpatching. Currently the following "
"submodules are available: \n"
"* Net::INET6Glue::INET_is_INET6\n"
"\n"
"Makes IO::Socket::INET behave like IO::Socket::IP (with fallback to like IO::"
"Socket::INET6), especially make it capable to create IPv6 sockets. This "
"makes LWP, Net::SMTP and others IPv6 capable. \n"
"* Net::INET6Glue::FTP\n"
"\n"
"Hotpatches Net::FTP to support EPRT and EPSV commands which are needed to "
"deal with FTP over IPv6. Also loads Net::INET6Glue::INET_is_INET6."
msgstr ""
"Net::INET6Glue はホットパッチを利用することによって、一般的なモジュールを "
"IPv6 対応にするためのモジュール集です。\n"
"\n"
"不幸にも、現状 Perl における IPv6 のサポートは中枢には取り入れられておらず、 "
"Socket6, IO::Socket::IP, IO::Socket::INET6 など、 IPv6 対応のモジュールが存在"
"しているにも関わらず、主要なモジュールの多く (Net::FTP や Net::SMTP, LWP な"
"ど) は対応していません。\n"
"\n"
"このモジュールは、ホットパッチの仕組みによってこれを緩和しようとする試みで"
"す。現時点では下記のサブモジュールを利用することができます:\n"
"* Net::INET6Glue::INET_is_INET6 \n"
"\n"
" IO::Socket::INET を IO::Socket::IP のように動作させ (IO::Socket::INET6 等へ"
"のフォールバック機能もあります) 、特に IPv6 ソケットへの対応を行なうことがで"
"きる仕組みです。これにより、 LWP, Net::SMTP などを IPv6 対応にすることができ"
"ます。\n"
"* Net::INET6Glue::FTP\n"
"\n"
" Net::FTP を、 IPv6 に対応するのに必要な EPRT, EPSV コマンドに対応させます。 "
"Net::INET6Glue::INET_is_INET6 モジュールも読みこまれます。"

#. tumbleweed/perl-Net-IP/summary
msgid "Perl extension for manipulating IPv4/IPv6 addresses"
msgstr "IPv4 または IPv6 の CIDR アドレスを操作するための Perl 拡張"

#. tumbleweed/perl-Net-IP/description
msgid ""
"This module provides functions to deal with *IPv4/IPv6* addresses. The "
"module can be used as a class, allowing the user to instantiate IP objects, "
"which can be single IP addresses, prefixes, or ranges of addresses. There is "
"also a procedural way of accessing most of the functions. Most subroutines "
"can take either *IPv4* or *IPv6* addresses transparently."
msgstr ""
"このモジュールは *IPv4/IPv6* アドレスを扱う関数を提供します。このモジュールは"
"クラスとしても使用することができるため、単一の IP アドレスやプレフィクス、ア"
"ドレス範囲などの IP オブジェクトをインスタンス化して使用することができます。"
"また、これらの関数のほとんどに対してアクセスすることのできるプロシージャ型の"
"構造も用意されています。ほとんどのサブルーチンは *IPv4* と *IPv6* の各アドレ"
"スを透過的に扱うことができます。"

#. tumbleweed/perl-Net-Ident/summary
msgid "Lookup the username on the remote end of a TCP/IP connection"
msgstr "TCP/IP 接続の相手に対してユーザ名を検索するモジュール"

#. tumbleweed/perl-Net-Netmask/summary
msgid "Parse, manipulate and lookup IP network blocks"
msgstr "IP ネットワークブロックを処理／操作／参照するモジュール"

#. tumbleweed/perl-Net-Netmask/description
msgid ""
"Net::Netmask parses and understands IPv4 and IPv6 CIDR blocks (see https://"
"en.wikipedia.org/wiki/Classless_Inter-Domain_Routing for more information on "
"CIDR blocks). It's built with an object-oriented interface, with functions "
"being methods that operate on a Net::Netmask object.\n"
"\n"
"These methods provide nearly all types of information about a network block "
"that you might want.\n"
"\n"
"There are also functions to insert a network block into a table and then "
"later lookup network blocks by IP address using that table. There are "
"functions to turn a IP address range into a list of CIDR blocks. There are "
"functions to turn a list of CIDR blocks into a list of IP addresses.\n"
"\n"
"There is a function for sorting by text IP address.\n"
"\n"
"All functions understand both IPv4 and IPv6. Matches, finds, etc, will "
"always return false when an IPv4 address is matched against an IPv6 "
"address.\n"
"\n"
"IPv6 support was added in 1.9104."
msgstr ""
"Net::Netmask は IPv4 および IPv6 の CIDR ブロック (詳しくは https://ja."
"wikipedia.org/wiki/Classless_Inter-Domain_Routing をお読みください) を処理し"
"て認識します。このモジュールはオブジェクト指向のインターフェイスを持ってい"
"て、関数を Net::Netmask オブジェクトのメソッドとして呼び出すことができま"
"す。\n"
"\n"
"本モジュールは、ネットワークブロックに関する情報処理について、必要なものほぼ"
"すべてがそろっています。\n"
"\n"
"本モジュールでは上記以外にも、ネットワークブロックを表形式にして、後から IP "
"アドレスと突き合わせるようなこともできます。また、アドレスの範囲を CIDR ブ"
"ロックのリストに変換したり、その逆を行なったりすることもできます。\n"
"\n"
"また、テキストの IP アドレスを並べ替える関数も用意されています。\n"
"\n"
"全ての関数は IPv4 と IPv6 の両方に対応し、適合処理や検索などでは IPv4 アドレ"
"スが IPv6 アドレスと一致した場合も、常に false を返すようになっています。\n"
"\n"
"IPv6 のサポートは 1.9104 で追加されています。"

#. tumbleweed/perl-Net-OBS-Client/summary
msgid "Simple OBS API calls"
msgstr "シンプルな OBS API コール"

#. tumbleweed/perl-Net-OBS-Client/description
msgid ""
"Net::OBS::Client aims to simplify usage of OBS (https://openbuildservice."
"org) API calls in perl."
msgstr ""
"Net::OBS::Client は OBS (https://openbuildservice.org) の API コールを Perl "
"から簡単に利用できるようにすることを目指しています。"

#. tumbleweed/perl-Net-SSLeay/summary
msgid "Perl bindings for OpenSSL and LibreSSL"
msgstr "OpenSSLおよびLibreSSL用のPerlバインディング"

#. tumbleweed/perl-Net-SSLeay/description
msgid ""
"This module provides Perl bindings for libssl (an SSL/TLS API) and libcrypto "
"(a cryptography API)."
msgstr "このモジュールは、libssl(SSL/TLS API)およびlibcrypto(暗号化API)のPerlバインディングを提供します。"

#. tumbleweed/perl-Net-Telnet/summary
msgid "Interact with TELNET port or other TCP ports"
msgstr "TELNETポートまたは他のTCPポートと通信"

#. tumbleweed/perl-Net-Telnet/description
msgid ""
"Net::Telnet allows you to make client connections to a TCP port and do "
"network I/O, especially to a port using the TELNET protocol. Simple I/O "
"methods such as print, get, and getline are provided. More sophisticated "
"interactive features are provided because connecting to a TELNET port "
"ultimately means communicating with a program designed for human "
"interaction. These interactive features include the ability to specify a "
"time-out and to wait for patterns to appear in the input stream, such as the "
"prompt from a shell. IPv6 support is available when using perl 5.14 or "
"later, see 'family()'.\n"
"\n"
"Other reasons to use this module than strictly with a TELNET port are:\n"
"\n"
"  * You're not familiar with sockets and you want a simple way to make "
"client connections to TCP services.\n"
"\n"
"  * You want to be able to specify your own time-out while connecting, "
"reading, or writing.\n"
"\n"
"  * You're communicating with an interactive program at the other end of "
"some socket or pipe and you want to wait for certain patterns to appear.\n"
"\n"
"Here's an example that prints who's logged-on to a remote host. In addition "
"to a username and password, you must also know the user's shell prompt, "
"which for this example is '\"bash$ \"'\n"
"\n"
"    use Net::Telnet ();     $t = new Net::Telnet (Timeout => "
"10,                           Prompt => '/bash\\$ $/');     $t-"
">open($host);     $t->login($username, $passwd);     @lines = $t->cmd(\"who"
"\");     print @lines;\n"
"\n"
"See the *EXAMPLES* section below for more examples.\n"
"\n"
"Usage questions should be directed to the perlmonks.org discussion group. "
"Bugs can be viewed or reported at cpan.org on the Net::Telnet page."
msgstr ""
"Net::Telnet は指定した TCP ポートに対してクライアントとして接続し、ネットワー"
"ク上の入出力 (特に TELNET プロトコルを利用した通信) を行なうことができます。"
"単純な入出力機能としては print, get, getline などのメソッドがあるほか、より高"
"度な機能 (TELNET プロトコルは、主に人間と対話的に動作することを前提にしたもの"
"であるため) も提供されています。対話的な機能としては、制限時間の設定や入力ス"
"トリーム内における特定パターンの検出 (たとえばシェルのプロンプト) などがあり"
"ます。 Perl 5.14 またはそれ以降のバージョンの場合、 IPv6 にも対応しています "
"(詳しくは 'family()' をお読みください) 。\n"
"\n"
"TELNET ポート以外の用途としては、下記のようなものがあります:\n"
"\n"
"* ソケットについて詳しい使い方がわからず、指定した TCP サービスに対して単純に"
"クライアント接続を行ないたいような場合。\n"
"\n"
"* 接続時や読み込み時、書き込み時にタイムアウト設定を必要とする場合。\n"
"\n"
"* ソケットやパイプを通じて他の対話的なプログラムと通信を行ない、特定のパター"
"ンが現れるまで待ちたいような場合。\n"
"\n"
"下記の例は、リモートのホスト上で誰がログインしているのかを表示する例です。"
"ユーザ名とパスワードに加えて、ユーザのシェルプロンプトも設定しなければなりま"
"せん。下記の例は、シェルプロンプトが '\"bash$ \"' である場合の例です。\n"
"\n"
"    use Net::Telnet ();     $t = new Net::Telnet (Timeout => "
"10,                           Prompt => '/bash\\$ $/');     $t-"
">open($host);     $t->login($username, $passwd);     @lines = $t->cmd(\"who"
"\");     print @lines;\n"
"\n"
"上記以外の例について、詳しくは *EXAMPLES* セクションをお読みください。\n"
"\n"
"使用方法の質問は、 perlmonks.org ディスカッショングループにお送りください。ま"
"た、バグは cpan.org の Net::Telnet ページで閲覧および報告することができます。"

#. tumbleweed/perl-Number-Bytes-Human/summary
msgid "Convert byte count to human readable format"
msgstr "バイト数を人間が読める形式に変換"

#. tumbleweed/perl-Number-Bytes-Human/description
msgid ""
"THIS IS ALPHA SOFTWARE: THE DOCUMENTATION AND THE CODE WILL SUFFER CHANGES "
"SOME DAY (THANKS, GOD!).\n"
"\n"
"This module provides a formatter which turns byte counts to usual readable "
"format, like '2.0K', '3.1G', '100B'. It was inspired in the '-h' option of "
"Unix utilities like 'du', 'df' and 'ls' for \"human-readable\" output."
msgstr ""
"これはα版ソフトウェアです:ドキュメントとコードはいずれ変更されます(神様、ありがとう!)。\n"
"\n"
"このモジュールは、バイトカウントを「2.0K」、「3.1G」、「100B」のような通常の読み取り可能なフォーマットに変換するフォーマッタを提供します。"
"UNIXユーティリティの '-h' オプション('du'、'df'、'ls'など)にヒントを得て、\"人間が読める\"出力を実現しました。"

#. tumbleweed/perl-OLE-Storage_Lite/summary
msgid "Simple Class for OLE document interface"
msgstr "OLE ドキュメントインターフェイス向けシンプルクラス"

#. tumbleweed/perl-PDF-Builder/summary
#. tumbleweed/perl-PDF-Builder/description
msgid "Facilitates the creation and modification of PDF files"
msgstr "PDF ファイルの作成と修正を扱うモジュール"

#. tumbleweed/perl-Package-Stash/summary
msgid "Routines for manipulating stashes"
msgstr "Stash を扱うためのルーチン集"

#. tumbleweed/perl-Package-Stash-XS/summary
msgid "Faster and More Correct Implementation of the Package::Stash Api"
msgstr "Package::Stash API の高速でより正しい実装"

#. tumbleweed/perl-Package-Stash-XS/description
msgid ""
"This is a backend for Package::Stash, which provides the functionality in a "
"way that's less buggy and much faster. It will be used by default if it's "
"installed, and should be preferred in all environments with a compiler."
msgstr ""
"これは Package::Stash のバックエンドで、バグも少なく高速に動作する機能を提供"
"します。インストールされていれば、このモジュールが既定で使用されるようになっ"
"ていて、コンパイラのある環境であれば全ての環境で推奨されます。"

#. tumbleweed/perl-Parallel-ForkManager/summary
msgid "Simple Parallel Processing Fork Manager"
msgstr "単純並列処理フォークマネージャ"

#. tumbleweed/perl-Parallel-ForkManager/description
msgid ""
"This module is intended for use in operations that can be done in parallel "
"where the number of processes to be forked off should be limited. Typical "
"use is a downloader which will be retrieving hundreds/thousands of files.\n"
"\n"
"The code for a downloader would look something like this:\n"
"\n"
"  use LWP::Simple;   use Parallel::ForkManager;\n"
"\n"
"  ...\n"
"\n"
"  my @links=(     [\"http://www.foo.bar/rulez.data\",\"rulez_data.txt"
"\"],     [\"http://new.host/more_data.doc\",\"more_data.doc"
"\"],     ...   );\n"
"\n"
"  ...\n"
"\n"
"     my $pm = Parallel::ForkManager->new(30);\n"
"\n"
"  LINKS:   foreach my $linkarray (@links) {     $pm->start and next LINKS; # "
"do the fork\n"
"\n"
"    my ($link, $fn) = @$linkarray;     warn \"Cannot get $fn from $link"
"\"       if getstore($link, $fn) != RC_OK;\n"
"\n"
"    $pm->finish; # do the exit in the child process   }   $pm-"
">wait_all_children;\n"
"\n"
"First you need to instantiate the ForkManager with the \"new\" constructor. "
"You must specify the maximum number of processes to be created. If you "
"specify 0, then NO fork will be done; this is good for debugging purposes.\n"
"\n"
"Next, use $pm->start to do the fork. $pm returns 0 for the child process, "
"and child pid for the parent process (see also perlfunc(1p)/fork()). The "
"\"and next\" skips the internal loop in the parent process. NOTE: $pm->start "
"dies if the fork fails.\n"
"\n"
"$pm->finish terminates the child process (assuming a fork was done in the "
"\"start\").\n"
"\n"
"NOTE: You cannot use $pm->start if you are already in the child process. If "
"you want to manage another set of subprocesses in the child process, you "
"must instantiate another Parallel::ForkManager object!"
msgstr ""
"このモジュールは、分岐されるプロセスの数が制限される並列処理で使用することを意図しています。一般的な用途は、数百/数千のファイルを取得するダウンローダです"
"。\n"
"\n"
"ダウンローダのコードは次のようになります。\n"
"\n"
"  use LWP::Simple;   use Parallel::ForkManager;\n"
"\n"
"  ...\n"
"\n"
"  my @links=(     [\"http://www.foo.bar/rulez.data\",\"rulez_data.txt\"]"
",     [\"http://new.host/more_data.doc\",\"more_data.doc\"],     ...   );\n"
"\n"
"  ...\n"
"\n"
"     my $pm = Parallel::ForkManager->new(30);\n"
"\n"
"  LINKS:   foreach my $linkarray (@links) {     $pm->start and next LINKS; # "
"do the fork\n"
"\n"
"    my ($link, $fn) = @$linkarray;     warn \"Cannot get $fn from $link\""
"       if getstore($link, $fn) != RC_OK;\n"
"\n"
"    $pm->finish; # do the exit in the child process   }   "
"$pm->wait_all_children;\n"
"\n"
"最初に、「new」コンストラクタでForkManagerをインスタンス化する必要があります。作成するプロセスの最大数を指定する必要があります。0を指定する"
"と、forkは実行されません。これはデバッグの目的に適しています。\n"
"\n"
"次に、$pm->startを使用してフォークを行います。$pmは子プロセスには0を、親プロセスには子プロセスのpidを返します(perlfunc(1p)/"
"fork()も参照)。「and next」は、親プロセスの内部ループをスキップします。注:フォークが失敗すると$pm->startは終了します。\n"
"\n"
"$pm->finishは子プロセスを終了します(\"start\"でフォークが行われたと仮定します)。\n"
"\n"
"注:すでに子プロセスに入っている場合は、$pm->startを使用できません。子プロセス内の別のサブプロセスセットを管理する場合は、別のParallel:"
":ForkManagerオブジェクトをインスタンス化する必要があります!"

#. tumbleweed/perl-Parse-ANSIColor-Tiny/summary
msgid "Determine attributes of ANSI-Colored string"
msgstr "ANSI色の文字列の属性を決定"

#. tumbleweed/perl-Parse-ANSIColor-Tiny/description
msgid ""
"Parse a string colored with ANSI escape sequences into a structure suitable "
"for reformatting (into HTML, for example).\n"
"\n"
"The output of terminal commands can be marked up with colors and formatting "
"that in some instances you'd like to preserve.\n"
"\n"
"This module is essentially the inverse of Term::ANSIColor. The array refs "
"returned from parse can be passed back in to 'Term::ANSIColor::colored'. The "
"strings may not match exactly due to different ways the attributes can be "
"specified, but the end result should be colored the same.\n"
"\n"
"This is a '::Tiny' module... it attempts to be correct for most cases with a "
"small amount of code. It may not be 100% correct, especially in complex "
"cases. It only handles the 'm' escape sequence ('\\033[0m') which produces "
"colors and simple attributes (bold, underline) (like what can be produced "
"with Term::ANSIColor). Other escape sequences are removed by default but you "
"can disable this by passing 'remove_escapes => 0' to the constructor.\n"
"\n"
"If you do find bugs please submit tickets (with patches, if possible)."
msgstr ""
"ANSIエスケープシーケンスで色付けされた文字列を、再フォーマット(例えばHTMLなど)に適した構造にパースします。\n"
"\n"
"ターミナルコマンドの出力は、場合によっては保存したい色や書式でマークアップすることができます。\n"
"\n"
"このモジュールは本質的に、Term::ANSIColorの逆です。parseから返された配列参照は'Term::ANSIColor::colored'に返"
"すことができます。属性の指定方法が異なるため、文字列が正確に一致しない場合がありますが、最終的な結果は同じ色にする必要があります。\n"
"\n"
"これは '::Tiny' モジュールです。ほとんどの場合、少量のコードで正しいことを試みます。特に複雑な場合は、100%正しくない可能性があります。これは"
"、色と単純な属性(ボールド、アンダーライン)(Term::ANSIColorで生成できるようなもの)を生成するm'エスケープシーケンス('\\033"
"[0m])のみを処理します。他のエスケープシーケンスはデフォルトで削除されますが、コンストラクタに 'remove_escapes=>0' "
"を渡すことで無効にすることができます。\n"
"\n"
"バグが見つかった場合は、チケット(可能であればパッチ付き)を提出してください。"

#. tumbleweed/perl-Parse-MIME/summary
msgid "Parse mime-types, match against media ranges"
msgstr "MIMEタイプを解析し、メディア範囲と照合します"

#. tumbleweed/perl-Parse-MIME/description
msgid ""
"This module provides basic functions for handling mime-types. It can handle "
"matching mime-types against a list of media-ranges. See section 14.1 of the "
"HTTP specification [RFC 2616] for a complete explanation: http://www.w3.org/"
"Protocols/rfc2616/rfc2616-sec14.html#sec14.1"
msgstr ""
"このモジュールは、MIMEタイプを処理するための基本的な関数を提供します。これ"
"は、メディア範囲のリストに対して一致するMIMEタイプを処理できます。完全な説明"
"については、HTTP仕様[RFC2616]のセクション14.1を参照してください。http://www."
"w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1"

#. tumbleweed/perl-Passwd-Keyring-Gnome/summary
msgid "Password storage implementation based on GNOME Keyring"
msgstr "GNOME キーリングをベースにしたパスワードストレージ実装"

#. tumbleweed/perl-Passwd-Keyring-Gnome/description
msgid "Password storage implementation based on GNOME Keyring."
msgstr "GNOME キーリングをベースにしたパスワードストレージ実装です。"

#. tumbleweed/perl-Passwd-Keyring-KDEWallet/summary
msgid "Password storage implementation based on KDE Wallet"
msgstr "KDE Wallet をベースにしたパスワードストレージ実装"

#. tumbleweed/perl-Passwd-Keyring-KDEWallet/description
msgid "Password storage implementation based on KDE Wallet."
msgstr "KDE Wallet をベースにしたパスワードストレージ実装です。"

#. tumbleweed/perl-Path-Tiny/description
msgid ""
"This module provides a small, fast utility for working with file paths. It "
"is friendlier to use than File::Spec and provides easy access to functions "
"from several other core file handling modules. It aims to be smaller and "
"faster than many alternatives on CPAN, while helping people do many common "
"things in consistent and less error-prone ways.\n"
"\n"
"Path::Tiny does not try to work for anything except Unix-like and Win32 "
"platforms. Even then, it might break if you try something particularly "
"obscure or tortuous. (Quick! What does this mean: '///../../..//./././a//"
"b/.././c/././'? And how does it differ on Win32?)\n"
"\n"
"All paths are forced to have Unix-style forward slashes. Stringifying the "
"object gives you back the path (after some clean up).\n"
"\n"
"File input/output methods 'flock' handles before reading or writing, as "
"appropriate (if supported by the platform and/or filesystem).\n"
"\n"
"The '*_utf8' methods ('slurp_utf8', 'lines_utf8', etc.) operate in raw mode. "
"On Windows, that means they will not have CRLF translation from the ':crlf' "
"IO layer. Installing Unicode::UTF8 0.58 or later will speed up '*_utf8' "
"situations in many cases and is highly recommended. Alternatively, "
"installing PerlIO::utf8_strict 0.003 or later will be used in place of the "
"default ':encoding(UTF-8)'.\n"
"\n"
"This module depends heavily on PerlIO layers for correct operation and thus "
"requires Perl 5.008001 or later."
msgstr ""
"このモジュールは、ファイルパスを扱うための小さくて高速なユーティリティを提供"
"します。 File::Spec を利用するよりはフレンドリーな仕組みであり、他の中枢ファ"
"イルハンドルモジュールから簡単にアクセスするための関数も用意されています。ま"
"た、 CPAN 内で公開されている多数の同系モジュールよりも小さくて高速に動作する"
"ように作られているため、よくある様々な作業を一貫性のある、エラーを避けやすい"
"方法で行なうことができます。\n"
"\n"
"Path::Tiny は Unix と Win32 のプラットフォーム以外で動作するようには設計され"
"ていません。また、非常に分かりにくい表記や複雑な表記などは、うまく動作しない"
"場合もあります (例: '///../../..//./././a//b/.././c/././') 。\n"
"\n"
"すべてのパスは Unix スタイルで記述する必要があり、パスの区切りはスラッシュ "
"(/) で指定します。また、オブジェクトを文字列化すると、元のパスが返されます "
"(ただしいくつかのクリーンアップ処理が施されます) 。\n"
"\n"
"ファイルの入出力のメソッドを実行する際には、読み書きの処理の前に (プラット"
"フォーム側やファイルシステム側で対応していれば) 'flock' の処理が行なわれま"
"す。\n"
"\n"
"'*_utf8' メソッド ('slurp_utf8', 'lines_utf8' など) は RAW モードで動作するメ"
"ソッドです。 Windows の場合、 ':crlf' IO レイヤによる CRLF の処理が行なわれな"
"くなります。 Unicode::UTF8 0.58 もしくはそれ以降のバージョンをインストールし"
"ている場合、これらのメソッドの処理は多くの場合において高速化されます (そのた"
"め、インストールが推奨されます) 。このほか、 PerlIO::utf8_strict 0.003 もしく"
"はそれ以降のバージョンをインストールしている場合、デフォルトの ':"
"encoding(UTF-8)' の代わりに使用されるようにもなっています。\n"
"\n"
"このモジュールは正しい操作を PerlIO レイヤに多く依存しているため、 Perl "
"5.008001 もしくはそれ以降のバージョンが必要となります。"

#. tumbleweed/perl-Perl-Critic-Community/summary
msgid "Community-inspired Perl::Critic policies"
msgstr "コミュニティに触発されたPerl::Criticポリシー"

#. tumbleweed/perl-Perl-Critic-Community/description
msgid ""
"A set of Perl::Critic policies to enforce the practices generally "
"recommended by subsets of the Perl community, particularly on IRC. Formerly "
"known as Perl::Critic::Freenode. Because this policy \"theme\" is designed "
"to be used with zero configuration on the command line, some duplication "
"will occur if it is used in combination with core Perl::Critic policies."
msgstr ""
"Perl::Criticポリシーのセット。Perlコミュニティのサブセット、特にIRCで一般的に推奨されているプラクティスを実施します。旧称 Perl::"
"Critic::freenode。このポリシー「テーマ」は、コマンドラインの0設定で使用するように設計されているので、コアとなるPerl::Criticポ"
"リシーと組み合わせて使用すると、重複が発生します。"

#. tumbleweed/perl-Perl-Critic-Policy-Variables-ProhibitLoopOnHash/description
msgid ""
"When \"looping over hashes,\" we mean looping over hash keys or hash values. "
"If you forgot to call 'keys' or 'values' you will accidentally loop over "
"both.\n"
"\n"
"    foreach my $foo (%hash) {...}        # not ok     action() for "
"%hash;                  # not ok     foreach my $foo ( keys %hash ) {...} # "
"ok     action() for values %hash;           # ok\n"
"\n"
"An effort is made to detect expressions:\n"
"\n"
"    action() for %hash ? keys %hash : ();                             # "
"ok     action() for %{ $hash{'stuff'} } ? keys %{ $hash{'stuff'} } : (); # "
"ok\n"
"\n"
"(Granted, the second example there doesn't make much sense, but I have found "
"a variation of it in real code.)"
msgstr ""
"\"ハッシュに対するループ\" とは一般に、ハッシュのキーや値に対するループを意味"
"します。もしも 'keys' や 'values' の呼び出しをせずにループを行なってしまう"
"と、その両方に対してループが動作してしまいます。\n"
"\n"
"    foreach my $foo (%hash) {...}        # not ok\n"
"    action() for %hash;                  # not ok\n"
"    foreach my $foo ( keys %hash ) {...} # ok\n"
"    action() for values %hash;           # ok\n"
"\n"
"そのため、下記のような表現で適切なループを行ないます:\n"
"\n"
"    action() for %hash ? keys %hash : ();                             # ok\n"
"    action() for %{ $hash{'stuff'} } ? keys %{ $hash{'stuff'} } : (); # ok\n"
"\n"
"(2 番目の例はあまり意味のあるものではありませんが、実際のコード内にも類似の"
"コードが存在しています)"

#. tumbleweed/perl-Perl-PrereqScanner-NotQuiteLite/description
msgid ""
"Perl::PrereqScanner::NotQuiteLite is yet another prerequisites scanner. It "
"passes almost all the scanning tests for Perl::PrereqScanner and Module::"
"ExtractUse (ie. except for a few dubious ones), and runs slightly faster "
"than PPI-based Perl::PrereqScanner. However, it doesn't run as fast as Perl::"
"PrereqScanner::Lite (which uses an XS lexer).\n"
"\n"
"Perl::PrereqScanner::NotQuiteLite also recognizes 'eval'. Prerequisites in "
"'eval' are not considered as requirements, but you can collect them as "
"suggestions.\n"
"\n"
"Conditional requirements or requirements loaded in a block are treated as "
"recommends. Noed modules are stored separately (since 0.94). You may or may "
"not need to merge them into requires.\n"
"\n"
"Perl::PrereqScanner::NotQuiteLite can also recognize some of the new "
"language features such as 'say', subroutine signatures, and postfix "
"dereferences, to improve the minimum perl requirement (since 0.9905)."
msgstr ""
"Perl::PrereqScanner::NotQuiteLiteは、もう1つの前提条件スキャナです。Perl::PrereqScannerとModule"
"::ExtractUseのほとんどすべてのスキャンテストに合格しています(つまりPPIベースのPerl::PrereqScannerよりもppiベースのP"
"erl::よりもわずかに高速です。ただし、Perl::PrereqScanner::Lite(XS字句解析器を使用します)ほど高速ではありません)。\n"
"\n"
"Perl::PrereqScanner::NotQuiteLiteも'eval'を認識します。'eval'の前提条件は、要件とはみなされませんが、提案とし"
"て収集できます。\n"
"\n"
"条件付き要件またはブロックにロードされた要件は、推奨され処理されます。no edモジュールは個別に保存されます(0."
"94以降)。これらをにマージする必要がある場合とない場合があります。\n"
"\n"
"Perl::PrereqScanner::NotQuiteLite は、'say' "
"やサブルーチン・シグニチャー、接尾辞の逆参照などの新しい言語機能のいくつかを認識することもでき、Perlの最小要件(0.9905 以降)を改善しています。"

#. tumbleweed/perl-PerlX-Maybe/summary
msgid "Return a Pair Only If They Are Both Defined"
msgstr "対の両方が定義されている場合にのみ返すモジュール"

#. tumbleweed/perl-PerlX-Maybe/description
msgid ""
"Moose classes (and some other classes) distinguish between an attribute "
"being unset and the attribute being set to undef. Supplying a constructor "
"arguments like this:\n"
"\n"
" my $bob = Person->new(     name => $name,     age => $age,  );\n"
"\n"
"Will result in the 'name' and 'age' attributes possibly being set to undef "
"(if the corresponding '$name' and '$age' variables are not defined), which "
"may violate the Person class' type constraints.\n"
"\n"
"(Note: if you are the _author_ of the class in question, you can solve this "
"using MooseX::UndefTolerant. However, some of us are stuck using non-"
"UndefTolerant classes written by third parties.)\n"
"\n"
"To ensure that the Person constructor does not try to set a name or age at "
"all when they are undefined, ugly looking code like this is often used:\n"
"\n"
" my $bob = Person->new(     defined $name ? (name => $name) : (),     "
"defined $age ? (age => $age) : (),  );\n"
"\n"
"or:\n"
"\n"
" use PerlX::Maybe;\n"
"\n"
" my $bob = Person->new(     (name => $name) x!!(defined $name),     (age  => "
"$age)  x!!(defined $age),  );\n"
"\n"
"A slightly more elegant solution is the 'maybe' function."
msgstr ""
"Mosse のクラス (およびその他のいくつかのクラス) では、属性値が設定されていな"
"い場合と undef が設定されている場合を区別して扱います。コンストラクタのパラ"
"メータに対して下記のような指定を行なった場合を想定します:\n"
"\n"
" my $bob = Person->new(     name => $name,     age => $age,  );\n"
"\n"
"'$name' や '$age' の変数がそれぞれ undef である場合 (未定義の場合) は、 "
"'name' や 'age' の属性が Person クラスの型制約に違反することになってしまいま"
"す。\n"
"\n"
"(注意: あなた自身が対象のクラスの _作者_ である場合は、 MooseX::"
"UndefTolerant を使用することで問題を解決できます。ただし、 UndefTolerant を使"
"用していないクラスが存在したりしてしまうと、解決できなくなってしまいま"
"す) 。\n"
"\n"
"このような Person コンストラクタで undef に設定された name や age を定義しな"
"いままにしておきたい場合は、下記のような醜いコードが必要になってしまいます:\n"
"\n"
" my $bob = Person->new(     defined $name ? (name => $name) : (),     "
"defined $age ? (age => $age) : (),  );\n"
"\n"
"これを下記のように改善することができます:\n"
"\n"
" use PerlX::Maybe;\n"
"\n"
" my $bob = Person->new(     (name => $name) x!!(defined $name),     (age  => "
"$age)  x!!(defined $age),  );\n"
"\n"
"より洗練されたソリューションとして、 'maybe' 関数があります。"

#. tumbleweed/perl-Plack-App-WebSocket/summary
msgid "WebSocket server as a PSGI application"
msgstr "PSCI アプリケーションとしての WebSocket サーバ"

#. tumbleweed/perl-Plack-App-WebSocket/description
msgid ""
"This module is a PSGI application that creates an endpoint for WebSocket "
"connections."
msgstr ""
"このモジュールは WebSocket のエンドポイントを作成する PSGI アプリケーションで"
"す。"

#. tumbleweed/perl-Plack-Middleware-FixMissingBodyInRedirect/summary
msgid ""
"Plack::Middleware which sets body for redirect response, if it's not alr[cut]"
msgstr "リダイレクト応答の本文部分を設定する Plack::Middleware"

#. tumbleweed/perl-Plack-Middleware-FixMissingBodyInRedirect/description
msgid "This module sets body in redirect response, if it's not already set."
msgstr "このモジュールは、未設定の場合に転送応答時の本文部分を設定します。"

#. tumbleweed/perl-Plack-Middleware-LogErrors/description
msgid ""
"'psgi.errors' defaults to 'STDERR' in most backends, which results in "
"content going somewhere unhelpful like the server console.\n"
"\n"
"This middleware simply remaps the 'psgi.errors' stream to the 'psgix.logger' "
"stream, or an explicit logger that you provide.\n"
"\n"
"This is especially handy when used in combination with other middlewares "
"such as Plack::Middleware::LogWarn (which diverts Perl warnings to 'psgi."
"errors'); Plack::Middleware::HTTPExceptions (which diverts uncaught "
"exceptions to 'psgi.errors'); and Plack::Middleware::AccessLog, which "
"defaults to 'psgi.errors' when not passed a logger -- which is also "
"automatically applied via plackup (so if you provided no '--access-log' "
"option indicating a filename, 'psgi.errors' is used)."
msgstr ""
"'psgi.errors' は多くのバックエンドでは既定で 'STDERR' が指定されているため、"
"サーバのコンソールなどのあまり役に立たない場所にエラーが表示されてしまいま"
"す。\n"
"\n"
"このミドルウエアは 'psgi.errors' ストリームを 'psgix.logger' ストリームに再"
"マップするか、もしくは指定したロガーに明示的に転送します。\n"
"\n"
"これは特に、いずれもロガーが指定されない場合は 'psgi.errors' に出力される、 "
"Plack::Middleware::LogWarn  (Perl の警告を 'psgi.errors' に転送するモジュー"
"ル) や Plack::Middleware::HTTPExceptions (捕らえられていない例外を 'psgi."
"errors' に転送するモジュール) 、もしくは Plack::Middleware::AccessLog のよう"
"な他のミドルウエアと組み合わせて使用すると、特に便利な仕組みになります。ま"
"た、 plackup を介して自動的にも適用されます (そのため、 '--access-log' オプ"
"ションでファイル名を指定しない場合は、 'psgi.errors' が使用されます) 。"

#. tumbleweed/perl-Plack-Middleware-RemoveRedundantBody/summary
msgid ""
"Plack::Middleware which removes body for HTTP response if it's not required"
msgstr "不要な場合に HTTP 応答から本文部分を削除する Plack::Middleware"

#. tumbleweed/perl-Plack-Middleware-RemoveRedundantBody/description
msgid "This module removes body in HTTP response, if it's not required."
msgstr "このモジュールは、不要であれば HTTP 応答内の本文を削除します。"

#. tumbleweed/perl-Plack-Middleware-ReverseProxy/summary
msgid "Supports app to run as a reverse proxy backend"
msgstr "リバースプロキシバックエンドとして動作するアプリをサポート"

#. tumbleweed/perl-Plack-Middleware-ReverseProxy/description
msgid ""
"Plack::Middleware::ReverseProxy resets some HTTP headers, which changed by "
"reverse-proxy. You can specify the reverse proxy address and stop fake "
"requests using 'enable_if' directive in your app.psgi."
msgstr ""
"Pack::Middleware::ReverseProxyは、リバースプロキシによって変更された一部のHTTPヘッダーをリセットします。app."
"PSGIの'enable_if'ディレクティブを使用して、リバースプロキシアドレスを指定し、偽のリクエストを防ぐことができます。"

#. tumbleweed/perl-Plack-Test-Agent/summary
#. tumbleweed/perl-Plack-Test-Agent/description
msgid "OO interface for testing low-level Plack/PSGI apps"
msgstr "低レベルのPlack/PSGIアプリをテストするためのOOインターフェース"

#. tumbleweed/perl-Pod-AsciiDoctor/summary
#. tumbleweed/perl-Pod-AsciiDoctor/description
msgid "Convert from POD to AsciiDoc"
msgstr "PODからAsciiDocへの変換"

#. tumbleweed/perl-Pod-Elemental/summary
msgid "Work with nestable Pod elements"
msgstr "ネスト可能な Pod要素と共に動作"

#. tumbleweed/perl-Pod-Elemental/description
msgid ""
"Pod::Elemental is a system for treating a Pod (plain old documentation|"
"perlpod) documents as trees of elements. This model may be familiar from "
"many other document systems, especially the HTML DOM. Pod::Elemental's "
"document object model is much less sophisticated than the HTML DOM, but "
"still makes a lot of document transformations easy.\n"
"\n"
"In general, you'll want to read in a Pod document and then perform a number "
"of prepackaged transformations on it. The most common of these will be the "
"Pod5 transformation|Pod::Elemental::Transformer::Pod5, which assumes that "
"the basic meaning of Pod commands described in the Perl 5 documentation "
"hold: '=begin', '=end', and '=for' commands mark regions of the document, "
"leading whitespace marks a verbatim paragraph, and so on. The Pod5 "
"transformer also eliminates the need to track elements representing vertical "
"whitespace."
msgstr ""
"Pod::Elemental は Pod (plain old documentation|perlpod) を要素ツリーとして扱"
"うためのシステムです。このモデルは、特に HTML DOM などのような他の文書システ"
"ムでは有名な存在になっています。 Pod::Elemental のドキュメントオブジェクトモ"
"デルは HTML DOM よりは洗練されていないものになっていますが、文書の形式変更を"
"より簡単に扱うことができます。\n"
"\n"
"一般的には Pod 文書を読み込んでさまざまな形式変更を行なうことになるでしょう。"
"一般的には Pod5 整形 (Pod::Elemental::Transformer::Pod5) が最もよくある変更で"
"しょう。これは Perl 5 のドキュメンテーション内で Pod コマンドに対する基本的な"
"説明を記述したもので、 '=begin', '=end', '=for' などのコマンドが文書の領域を"
"示すものになっています。また、文頭の空白は逐語的な段落などとして解釈されま"
"す。 Pod5 の変換機能は、垂直方向の空白を表わすトラック要素の必要性を削減しま"
"す。"

#. tumbleweed/perl-Pod-Parser/summary
msgid "Base Class for Creating Pod Filters and Translators"
msgstr "Pod Filter および Translator を作成するための基本クラス"

#. tumbleweed/perl-Pod-Parser/description
msgid ""
"*NOTE: This module is considered legacy; modern Perl releases (5.18 and "
"higher) are going to remove Pod-Parser from core and use Pod-Simple for all "
"things POD.* \n"
"*Pod::Parser* is a base class for creating POD filters and translators. It "
"handles most of the effort involved with parsing the POD sections from an "
"input stream, leaving subclasses free to be concerned only with performing "
"the actual translation of text. \n"
"*Pod::Parser* parses PODs, and makes method calls to handle the various "
"components of the POD. Subclasses of *Pod::Parser* override these methods to "
"translate the POD into whatever output format they desire."
msgstr ""
"*注意: このモジュールは古いものとして考えられています。新しい Perl リリース "
"(5.18 もしくはそれ以降) では、 Perl の中枢部から Pod パーサーが削除される予定"
"で、 Pod-Simple が Pod に関わる全てを行ないます。 *\n"
"*Pod::Parser* は POD のフィルタやトランスレータを作成するためのベースクラスで"
"す。入力ストリームからの POD セクションを処理する際の多くの面倒を省いて、テキ"
"ストの実際の変換処理そのものに注力できる仕組みを提供します。\n"
"*Pod::Parser* は POD を処理しますが、メソッド呼び出しでさまざまな POD のコン"
"ポーネントにアクセスする機能を提供します。 *Pod::Parser* のサブクラスではこれ"
"らのメソッドをオーバーライドして、 POD を必要なさまざまな形式に変換することも"
"できます。"

#. tumbleweed/perl-Pod-Usage/summary
msgid "Extracts POD documentation and shows usage information"
msgstr "POD ドキュメンテーションの抽出と使用方法の表示"

#. tumbleweed/perl-Proc-SyncExec/summary
msgid "Spawn processes but report exec() errors"
msgstr "プロセスを起動するが exec() エラーを報告するモジュール"

#. tumbleweed/perl-Proc-SyncExec/description
msgid ""
"This module contains functions for synchronized process spawning with full "
"error return. If the child's exec() call fails the reason for the failure is "
"reported back to the parent."
msgstr ""
"このモジュールは、完全なエラー返却を行なうことのできる同期型プロセス起動の関"
"数を提供します。子の exec() が何らかの理由で失敗した場合、そのエラーを親に報"
"告することができます。"

#. tumbleweed/perl-Protocol-HTTP2/summary
msgid "HTTP/2 protocol implementation (RFC 7540)"
msgstr "HTTP/2 プロトコル実装 (RFC 7540)"

#. tumbleweed/perl-Protocol-HTTP2/description
msgid ""
"Protocol::HTTP2 is HTTP/2 protocol implementation (at https://tools.ietf.org/"
"html/rfc7540) with stateful decoders/encoders of HTTP/2 frames. You may use "
"this module to implement your own HTTP/2 client/server/intermediate on top "
"of your favorite event loop over plain or tls socket (see examples)."
msgstr ""
"Protocol::HTTP2 は HTTP/2 プロトコル (https://tools.ietf.org/html/rfc7540) の"
"実装で、 HTTP/2 フレームのステートフルなデコーダおよびエンコーダとして動作し"
"ます。このモジュールを利用することで、独自の HTTP/2 クライアント／サーバ／仲"
"介を作成して必要なイベントループ内で使用できるほか、 TLS ソケットを扱ったりす"
"ることもできます (サンプルをご覧ください) 。"

#. tumbleweed/perl-RPC-XML/summary
msgid "Set of classes for core data, message and XML handling"
msgstr "コアデータ、メッセージ、 XML 処理向けのクラスセット"

#. tumbleweed/perl-Redis/description
msgid ""
"Pure perl bindings for https://redis.io/\n"
"\n"
"This version supports protocol 2.x (multi-bulk) or later of Redis available "
"at https://github.com/antirez/redis/.\n"
"\n"
"This documentation lists commands which are exercised in test suite, but "
"additional commands will work correctly since protocol specifies enough "
"information to support almost all commands with same piece of code with a "
"little help of 'AUTOLOAD'."
msgstr ""
"https://redis.io/ 用の純粋な perl バインディング\n"
"\n"
"このバージョンでは、プロトコル2.x(マルチバルク)以降のRedisをサポートしています。Redisはhttps://github.com/"
"antirez/redis/で入手できます。\n"
"\n"
"このドキュメントには、テストスイートで実行されるコマンドがリストされていますが、追加のコマンドは正しく動作します。プロトコルは、「AUTOLOAD」の少し"
"の助けを借りて、同じコードでほとんどすべてのコマンドをサポートするのに十分な情報を規定しているからです。"

#. tumbleweed/perl-Ref-Util/summary
msgid "Utility functions for checking references"
msgstr "参照チェックのためのユーティリティ関数集"

#. tumbleweed/perl-Ref-Util/description
msgid ""
"Ref::Util introduces several functions to help identify references in a\n"
"*smarter* (and usually faster) way. In short:\n"
"\n"
"    \n"
"\n"
"    ref( $foo ) eq 'ARRAY'              is_plain_arrayref( $foo )\n"
"\n"
"    use Scalar::Util qw( reftype );     reftype( $foo ) eq 'ARRAY'          "
"is_arrayref( $foo )\n"
"\n"
"The difference: \n"
"* * No comparison against a string constant\n"
"\n"
"When you call 'ref', you stringify the reference and then compare it to some "
"string constant (like 'ARRAY' or 'HASH'). Not just awkward, it's brittle "
"since you can mispell the string.\n"
"\n"
"If you use Scalar::Util's 'reftype', you still compare it as a string:\n"
"\n"
"    if ( reftype($foo) eq 'ARRAY' ) { ... } \n"
"* * Supports blessed variables \n"
"*Note:* In future versions, the idea is to make the default functions use "
"the *plain* variation, which means explicitly non-blessed references.\n"
"\n"
"If you want to explicitly check for *blessed* references, you should use the "
"'is_blessed_*' functions. There will be an 'is_any_*' variation which will "
"act like the current main functions - not caring whether it's blessed or "
"not.\n"
"\n"
"When calling 'ref', you receive either the reference type (*SCALAR*,\n"
"*ARRAY*, *HASH*, etc.) or the package it's blessed into.\n"
"\n"
"When calling 'is_arrayref' (et. al.), you check the variable flags, so even "
"if it's blessed, you know what type of variable is blessed.\n"
"\n"
"    my $foo = bless {}, 'PKG';     ref($foo) eq 'HASH'; # fails\n"
"\n"
"    use Ref::Util 'is_hashref';     my $foo = bless {}, 'PKG';     "
"is_hashref($foo); # works\n"
"\n"
"On the other hand, in some situations it might be better to specifically "
"exclude blessed references. The rationale for that might be that merely "
"because some object happens to be implemented using a hash doesn't mean it's "
"necessarily correct to treat it as a hash. For these situations, you can use "
"'is_plain_hashref' and friends, which have the same performance benefits as "
"'is_hashref'.\n"
"\n"
"There is also a family of functions with names like 'is_blessed_hashref'; "
"these return true for blessed object instances that are implemented using "
"the relevant underlying type. \n"
"* * Supports tied variables and magic\n"
"\n"
"Tied variables (used in Readonly, for example) are supported.\n"
"\n"
"    use Ref::Util qw<is_plain_hashref>;     use Readonly;\n"
"\n"
"    Readonly::Scalar my $rh2 => { a => { b => 2 } };     "
"is_plain_hashref($rh2); # success\n"
"\n"
"Ref::Util added support for this in 0.100. Prior to this version the test "
"would fail. \n"
"* * Ignores overloading\n"
"\n"
"These functions ignore overloaded operators and simply check the variable "
"type. Overloading will likely not ever be supported, since I deem it "
"problematic and confusing.\n"
"\n"
"Overloading makes your variables opaque containers and hides away *what* "
"they are and instead require you to figure out *how* to use them. This leads "
"to code that has to test different abilities (in 'eval', so it doesn't "
"crash) and to interfaces that get around what a person thought you would do "
"with a variable. This would have been alright, except there is no clear way "
"of introspecting it. \n"
"* * Ignores subtle types:\n"
"\n"
"The following types, provided by Scalar::Util's 'reftype', are not "
"supported:\n"
"\n"
"  * * 'VSTRING'\n"
"\n"
"This is a 'PVMG' (\"normal\" variable) with a flag set for VSTRINGs. Since "
"this is not a reference, it is not supported.\n"
"\n"
"  * * 'LVALUE'\n"
"\n"
"A variable that delegates to another scalar. Since this is not a reference, "
"it is not supported.\n"
"\n"
"  * * 'INVLIST'\n"
"\n"
"I couldn't find documentation for this type.\n"
"\n"
"Support might be added, if a good reason arises. \n"
"* * Usually fast\n"
"\n"
"When possible, Ref::Util uses Ref::Util::XS as its implementation. (If you "
"don't have a C compiler available, it uses a pure Perl fallback that has all "
"the other advantages of Ref::Util, but isn't as fast.)\n"
"\n"
"In fact, Ref::Util::XS has two alternative implementations available "
"internally, depending on the features supported by the version of Perl "
"you're using. For Perls that supports custom OPs, we actually add an OP "
"(which is faster); for other Perls, the implementation that simply calls an "
"XS function (which is still faster than the pure-Perl equivalent).\n"
"\n"
"See below for benchmark results."
msgstr ""
"Ref::Util は *より賢い* (および通常は高速な) 方法で、参照を識別するための支援"
"機能を提供します。簡単に言うと下記のような感じです:\n"
"\n"
"    \n"
"\n"
"    ref( $foo ) eq 'ARRAY'              is_plain_arrayref( $foo )\n"
"\n"
"    use Scalar::Util qw( reftype );     reftype( $foo ) eq 'ARRAY'          "
"is_arrayref( $foo )\n"
"\n"
"違いは下記のとおりです:\n"
"* * 文字列定数に対して比較する必要がありません\n"
"\n"
"'ref' を呼び出した場合、参照が文字列に変換されたあと 'ARRAY' や 'HASH' などの"
"固定文字列と比較を行なうことになります。それだけではありません。固定の文字列"
"を誤って指定してしまうこともあります。\n"
"\n"
"Scalar::Util の 'reftype' を使用しても、下記のように文字列と比較することがで"
"きます:\n"
"\n"
"    if ( reftype($foo) eq 'ARRAY' ) { ... } \n"
"* * bless された変数にも対応\n"
"*注意:* 将来のバージョンでは、既定の関数呼び出しでは *純粋な* もののみを扱う"
"ことになります。つまり、明示的に非 bless 参照を行なうことになります。\n"
"\n"
"*bless された* 参照を明示的にチェックしたい場合は、 'is_blessed_*' 関数をお使"
"いください。現在のメイン関数のように動作する 'is_any_*' バリエーションもあり"
"ます。こちらは bless されていてもいなくても動作します。\n"
"\n"
"'ref' を呼び出すと、参照型 (*SCALAR*, *ARRAY*, *HASH* など) か bless したパッ"
"ケージ名が返されます。\n"
"\n"
"'is_arrayref' などを呼び出すと、変数フラグをチェックして、 bless されているも"
"のであれば bless した変数の型を知ることができます。\n"
"\n"
"    my $foo = bless {}, 'PKG';     ref($foo) eq 'HASH'; # 失敗する\n"
"\n"
"    use Ref::Util 'is_hashref';     my $foo = bless {}, 'PKG';     "
"is_hashref($foo); # 動作する\n"
"\n"
"その一方、状況によっては bless された参照を除外したほうが適切な場合もありま"
"す。これは単純にオブジェクトがハッシュを利用して実装されているからといって、"
"それをハッシュのまま扱うのが正しいとは限らないからです。このような状況下で"
"は、 'is_plain_hashref' などの関数を使用することで、 'is_hashref' と同等の性"
"能改善を得ることができます。\n"
"\n"
"このほか、 'is_blessed_hashref' のような関数群も提供されています; これらはそ"
"れぞれ対応する型をりようして実装されている bless されたオブジェクトインスタン"
"スである場合に true を返します。\n"
"* * tie 変数や magic への対応\n"
"\n"
"tie 変数 (Readonly などで使用されています) にも対応しています。\n"
"\n"
"    use Ref::Util qw<is_plain_hashref>;     use Readonly;\n"
"\n"
"    Readonly::Scalar my $rh2 => { a => { b => 2 } };     "
"is_plain_hashref($rh2); # 成功\n"
"\n"
"Ref::Util では 0.100 以降でこれに対応しています。それ以前のバージョンの場合、"
"テストは失敗します。\n"
"* * オーバーロードの無視\n"
"\n"
"これらの関数はオーバーロードされた演算子を無視し、単純に変数の型のみをチェッ"
"クします。オーバーロードは問題が多く、混乱を起こすものであるため、将来的にも"
"サポートされない可能性があります。\n"
"\n"
"オーバーロードを使用することで、変数を不透明なコンテナにしてしまい、それらが"
"どのようなものであるのか、およびそれらをどのように扱うのかがわからなくなって"
"しまいます。これにより、さまざまな能力をテストしなければならなくなります "
"('eval' を利用してクラッシュを回避する必要も生じます) し、変数を利用しようと"
"している人に対してインターフェイスを作成する必要もあります。その内部を調べる"
"明確な方法が無いという点だけが問題です。\n"
"* * subtle 型の無視:\n"
"\n"
"下記の型は Scalar::Util の 'reftype' で提供されているものですが、サポート対象"
"外です:\n"
"\n"
"  * * 'VSTRING'\n"
"\n"
"これは VSTRING 向けにフラグが設定された 'PVMG' (\"通常の\" 変数) です。これは"
"参照ではありませんので、サポート対象ではありません。\n"
"\n"
"  * * 'LVALUE'\n"
"\n"
"他のスカラー値を代理する変数です。これも参照ではありませんので、サポート対象"
"外です。\n"
"\n"
"  * * 'INVLIST'\n"
"\n"
"この方に対するドキュメンテーションはありませんでした。\n"
"\n"
"何らかの適切な理由が見つかれば、サポートを追加するかもしれません。\n"
"* * 高速性\n"
"\n"
"可能な限り Ref::Util は Ref::Util::XS を実装として使用します (C コンパイラが"
"利用できない場合は Perl のみで実装された Ref::Util の代替機能を使用します。こ"
"ちらはあまり高速ではありません) 。\n"
"\n"
"事実、 Ref::Util::XS には内部に 2 種類の実装が存在しています。これは利用して"
"いる Perl のバージョンでサポートされている機能が異なるためにそうなっていま"
"す。独自の OP に対応する Perl を使用している場合は OP を追加して使用します "
"(こちらのほうが高速です) 。その他の Perl の場合は、単純に XS 関数をそのまま呼"
"び出します (それでも純粋な Perl よりは高速です) 。\n"
"\n"
"ベンチマーク結果については下記をお読みください。"

#. tumbleweed/perl-Ref-Util-XS/summary
msgid "XS implementation for Ref::Util"
msgstr "Ref::Util 向け XS 実装"

#. tumbleweed/perl-Ref-Util-XS/description
msgid ""
"Ref::Util::XS is the XS implementation of Ref::Util, which provides several "
"functions to help identify references in a more convenient way than the "
"usual approach of examining the return value of 'ref'.\n"
"\n"
"You should use Ref::Util::XS by installing Ref::Util itself: if the system "
"you install it on has a C compiler available, 'Ref::Util::XS' will be "
"installed and used automatically, providing a significant speed boost to "
"everything that uses 'Ref::Util'.\n"
"\n"
"See Ref::Util for full documentation of the available functions."
msgstr ""
"Ref::Util::XS は Ref::Util の XS 実装で、 'ref' の返り値を調べる従来の方法よ"
"りずっと便利な参照の識別支援を行なういくつかの関数を提供しています。\n"
"\n"
"お使いのシステムに C コンパイラが存在する場合、 Ref::Util をインストールした"
"ら Ref::Util::XS を使用すべきです。 'Ref::Util::XS' は自動的にインストールさ"
"れ使用されるようになるはずです。これにより、 'Ref::Util' をそのまま使用するよ"
"りは顕著に高速化することができます。\n"
"\n"
"利用可能な関数について、詳しくは Ref::Util をお読みください。"

#. tumbleweed/perl-Regexp-Trie/summary
msgid "Builds trie-ized regexp"
msgstr "trie 化された正規表現を構築"

#. tumbleweed/perl-Regexp-Trie/description
msgid ""
"This module is a faster but simpler version of Regexp::Assemble or Regexp::"
"Optimizer. It builds a trie-ized regexp as above.\n"
"\n"
"This module is faster than Regexp::Assemble but you can only add literals. 'a"
"+b' is treated as 'a\\+b', not \"more than one a's followed by b\".\n"
"\n"
"I wrote this module because I needed something faster than Regexp::Assemble "
"and Regexp::Optimizer. If you need more minute control, use those instead."
msgstr ""
"このモジュールは、Regexp::AssembleまたはRegexp::Optimizerのより高速で単純なバージョンです。上のように trie "
"化された正規表現を構築します。\n"
"\n"
"このモジュールはRegexp::Assembleよりも高速ですが、追加できるのはリテラルのみです。'a+b' は 'a\\+b' として扱われ、"
"\"複数のaの後にbが続く\"ことはありません。\n"
"\n"
"このモジュールを作成したのは、Regexp::AssembleやRegexp::Optimizerよりも高速なものが必要だったからです。より細かい制御が必"
"要な場合は、代わりにそれらを使用してください。"

#. tumbleweed/perl-Reply/summary
msgid "Read, eval, print, loop, yay!"
msgstr "Read, eval, print, loop, yay!"

#. tumbleweed/perl-Reply/description
msgid ""
"NOTE: This is an early release, and implementation details of this module "
"are still very much in flux. Feedback is welcome!\n"
"\n"
"Reply is a lightweight, extensible REPL for Perl. It is plugin-based (see "
"Reply::Plugin), and through plugins supports many advanced features such as "
"coloring and pretty printing, readline support, and pluggable commands."
msgstr ""
"注意: このパッケージは初期リリースであり、このモジュール内の実装は流動的に変"
"化し続けています。フィードバックをお願いします！\n"
"\n"
"Reply は Perl に対する軽量で拡張性の飛んだ仕組みです。プラグインベース (詳し"
"くは Reply::Plugin をお読みください) であり、それらを使用することで色付けやわ"
"かりやすい出力、 readline のサポートやプラグイン志井のできるコマンドなどに対"
"応しています。"

#. tumbleweed/perl-Role-Tiny/summary
msgid "Roles: a nouvelle cuisine portion size slice of Moose"
msgstr ""
"Roles: Moose におけるヌーベルキュイジーヌのポーションサイズスライスのような役"
"割"

#. tumbleweed/perl-SQL-Abstract-Classic/description
msgid ""
"This module was inspired by the excellent DBIx::Abstract. However, in using "
"that module I found that what I really wanted to do was generate SQL, but "
"still retain complete control over my statement handles and use the DBI "
"interface. So, I set out to create an abstract SQL generation module.\n"
"\n"
"While based on the concepts used by DBIx::Abstract, there are several "
"important differences, especially when it comes to WHERE clauses. I have "
"modified the concepts used to make the SQL easier to generate from Perl data "
"structures and, IMO, more intuitive. The underlying idea is for this module "
"to do what you mean, based on the data structures you provide it. The big "
"advantage is that you don't have to modify your code every time your data "
"changes, as this module figures it out."
msgstr ""
"このモジュールは DBIx::Abstract という素晴らしいモジュールにヒントを得ていま"
"す。しかしながら、本当にやるべきことは SQL を生成することでありながら、ステー"
"トメントハンドルの完璧な制御や DBI インターフェイスの使用なども行なわなければ"
"ならない、ということに気が付いてしまいました。そのため、抽象的な SQL 生成モ"
"ジュールが必要であると考え、これを作成したものです。\n"
"\n"
"DBIx::Abstract で使用されている考え方をベースにしながら、特に WHERE 句を使用"
"する場合の重要な変更が加えられています。 Perl のデータ構造から SQL を簡単に "
"(かつ直感的に) 生成しやすくするため、考え方を変えて対応しています。このモ"
"ジュールにおけるベースとなる考え方は、提供したデータ構造をベースにして、意図"
"したとおりの動作を行なわせる、ということです。これの大きな利点としては、デー"
"タを変更してもコードを変更する必要がなく、このモジュールが検出したとおりに動"
"作させることができるという点にあります。"

#. tumbleweed/perl-SQL-SplitStatement/description
msgid ""
"This is a simple module which tries to split any SQL code, even including "
"non-standard extensions (for the details see the SUPPORTED DBMSs section "
"below), into the atomic statements it is composed of.\n"
"\n"
"The logic used to split the SQL code is more sophisticated than a raw "
"'split' on the ';' (semicolon) character: first, various different statement "
"terminator _tokens_ are recognized (see below for the list), then this "
"module is able to correctly handle the presence of said tokens inside "
"identifiers, values, comments, 'BEGIN ... END' blocks (even nested), _dollar-"
"quoted_ strings, MySQL custom 'DELIMITER's, procedural code etc., as "
"(partially) exemplified in the SYNOPSIS above.\n"
"\n"
"Consider however that this is by no means a validating parser (technically "
"speaking, it's just a _context-sensitive tokenizer_). It should rather be "
"seen as an in-progress _heuristic_ approach, which will gradually improve as "
"test cases will be reported. This also means that, except for the "
"LIMITATIONS detailed below, there is no known (to the author) SQL code the "
"most current release of this module can't correctly split.\n"
"\n"
"The test suite bundled with the distribution (which now includes the popular "
"_Sakila_ and _Pagila_ sample db schemata, as detailed in the SHOWCASE "
"section below) should give you an idea of the capabilities of this module\n"
"\n"
"If your atomic statements are to be fed to a DBMS, you are encouraged to use "
"DBIx::MultiStatementDo instead, which uses this module and also (optionally) "
"offers automatic transactions support, so that you'll have the _all-or-"
"nothing_ behavior you would probably want."
msgstr ""
"これは単純なモジュールで、標準以外の拡張(詳細は下記の「サポートされているDBMS」のセクションを参照)を含むSQLコードを、構成するアトミックなステート"
"メントに分割しようとします。\n"
"\n"
"SQLコードを分割するために使用されるロジックは、「;」(セミコロン)文字の生の「分割」よりも洗練されています。最初に、さまざまな異なるステートメントte"
"rminator_tokens_が認識されます(リストについては以下を参照)。次に、このモジュールは識別子、値、コメント、BEGIN."
"内のトークンの存在を正しく処理できます。END' ブロック(ネストされている場合も含む)、_dollar-"
"quoted_strings、MySQLカスタムの'DELIMITER'、手続きコードなど、上記の書式で(部分的に)例示したもの。\n"
"\n"
"ただし、これは決して検証パーサーではないことを考慮してください(厳密に言えば、単に_context-sensitive tokenizer_です)。むしろ"
"、進行中の_ヒューリスティック_アプローチと見るべきであり、テストケースが報告されるにつれて徐々に改善されるでしょう。これはまた、以下で説明する制限を除い"
"て、このモジュールの最新リリースが正しく分割できない既知のSQLコードが(作成者には)存在しないことを意味します。\n"
"\n"
"このディストリビューションにバンドルされているテスト・スイート(これには現在、ポピュラーな_Sakila_and_Pagila_sampleデータベース・"
"スキーマが含まれています。これについては、以下のSHOWCASEセクションで詳しく説明します)から、このモジュールの機能を理解することができます。\n"
"\n"
"アトミックな文をDBMSに渡す場合は、代わりにDBIx::MultiStatementDoを使用することをお勧めします。これは、このモジュールを使用し、("
"オプションで)自動トランザクションサポートも提供するので、おそらく必要な_all-or-nothing_動作を持つことになります。"

#. tumbleweed/perl-SUPER/summary
msgid "Control superclass method dispatch"
msgstr "スーパークラスのメソッド実行の制御"

#. tumbleweed/perl-Search-Elasticsearch/summary
msgid "The official client for Elasticsearch"
msgstr "Elasticsearch の公式クライアント"

#. tumbleweed/perl-Search-Elasticsearch/description
msgid ""
"Search::Elasticsearch is the official Perl client for Elasticsearch, "
"supported by at http://elastic.co. Elasticsearch itself is a flexible and "
"powerful open source, distributed real-time search and analytics engine for "
"the cloud. You can read more about it on at http://www.elastic.co."
msgstr ""
"Search::Elasticsearch は Elasticsearch (http://elastic.co) の公式 Perl クライ"
"アントです。 Elasticsearch 自身は柔軟性が高く、パワフルなオープンソースです。"
"クラウド内のリアルタイム検索や分析エンジンとして配布されています。詳しくは "
"http://www.elastic.co をお読みください。"

#. tumbleweed/perl-Search-Xapian/summary
msgid "Perl XS frontend to the Xapian C++ search library"
msgstr "Xapian C++検索ライブラリのフロントエンドである Perl XS"

#. tumbleweed/perl-Search-Xapian/description
msgid ""
"This module wraps most methods of most Xapian classes. The missing classes "
"and methods should be added in the future. It also provides a simplified, "
"more 'perlish' interface to some common operations, as demonstrated above.\n"
"\n"
"There are some gaps in the POD documentation for wrapped classes, but you "
"can read the Xapian C++ API documentation at https://xapian.org/docs/apidoc/"
"html/annotated.html for details of these. Alternatively, take a look at the "
"code in the examples and tests.\n"
"\n"
"If you want to use Search::Xapian and the threads module together, make sure "
"you're using Search::Xapian >= 1.0.4.0 and Perl >= 5.8.7. As of 1.0.4.0, "
"Search::Xapian uses CLONE_SKIP to make sure that the perl wrapper objects "
"aren't copied to new threads - without this the underlying C++ objects can "
"get destroyed more than once.\n"
"\n"
"If you encounter problems, or have any comments, suggestions, patches, etc "
"please email the Xapian-discuss mailing list (details of which can be found "
"at https://xapian.org/lists)."
msgstr ""
"このモジュールは、ほとんどのXapianクラスのほとんどのメソッドをラップします。欠落しているクラスとメソッドは、将来追加されるはずです。また、上記で説明"
"したように、いくつかの一般的な操作に対して、単純化された、より「perlish」なインターフェースを提供します。\n"
"\n"
"ラップされたクラスに関するPODドキュメントにはいくつかのギャップがありますが、これらの詳細についてはhttps://xapian.org/docs/"
"apidoc/html/annotated.htmlのXapian "
"C++APIドキュメントを参照してください。あるいは、サンプルとテストのコードを参照してください。\n"
"\n"
"Search::Xapianとthreadsモジュールを一緒に使用したい場合は、Search::Xapian>=1.0.4.0とPerl>=5.8."
"7を使用していることを確認してください。1.0.4.0の時点で、Search::XapianはCLONE_SKIPを使用して、perlラッパーオブジェクト"
"が新しいスレッドにコピーされないようにしています。これがなければ、基礎となるC++オブジェクトが複数回破壊される可能性があります。\n"
"\n"
"問題が発生した場合、またはコメント、提案、パッチなどがある場合は、Xapian-discussメーリングリスト(詳細はhttps://xapian."
"org/lists)にあります)にメールしてください。"

#. tumbleweed/perl-Sereal/summary
msgid "Binary serialization module for Perl"
msgstr "Perl 向けバイナリシリアライズモジュール"

#. tumbleweed/perl-Sereal/description
msgid ""
"_Sereal_ is an efficient, compact-output, binary and feature-rich "
"serialization protocol. The Perl encoder is implemented as the Sereal::"
"Encoder module, the Perl decoder correspondingly as Sereal::Decoder. They "
"are distributed separately to allow for safe upgrading without downtime. "
"(Hint: Upgrade the decoder everywhere first, then the encoder.)\n"
"\n"
"This 'Sereal' module is a very thin wrapper around both 'Sereal::Encoder' "
"and 'Sereal::Decoder'. It depends on both and loads both. So if you have a "
"user of both encoder and decoder, it is enough to depend on a particular "
"version of 'Sereal' and you'll get the most recent released versions of "
"'Sereal::Encoder' and 'Sereal::Decoder' whose version is smaller than or "
"equal to the version of 'Sereal' you depend on.\n"
"\n"
"The protocol specification and many other bits of documentation can be found "
"in the github repository. Right now, the specification is at https://github."
"com/Sereal/Sereal/blob/master/sereal_spec.pod, there is a discussion of the "
"design objectives in https://github.com/Sereal/Sereal/blob/master/README."
"pod, and the output of our benchmarks can be seen at https://github.com/"
"Sereal/Sereal/wiki/Sereal-Comparison-Graphs."
msgstr ""
"_Sereal_ は効率的でコンパクトな出力を行なう、バイナリに対応した機能豊富なシリ"
"アライズプロトコルです。 Perl のエンコーダは Sereal::Encoder モジュールとして"
"実装され、 Perl のデコーダは Sereal::Decoder として提供されています。これらは"
"ダウンタイム無しでアップグレードできるよう、個別に提供されています (ヒント: "
"まずはデコーダ側をアップグレードしてから、エンコーダ側をアップグレードしてく"
"ださい) 。\n"
"\n"
"'Sereal' モジュールは 'Sereal::Encoder' および 'Sereal::Decoder' に対する非常"
"に薄いラッパーとして存在しています。両方に依存し、両方を読み込むように作られ"
"ています。エンコーダとデコーダの両方を使用する場合は、特定のバージョンの "
"'Sereal' に依存するように作るだけで十分で、依存先のバージョンと同じか、それよ"
"り小さいバージョンの 'Sereal::Encoder' および 'Sereal::Decoder' のリリース版"
"を使用することができるようになります。\n"
"\n"
"プロトコルの仕様とその他のドキュメンテーションについては、 github のリポジト"
"リをご覧ください。現時点では仕様は https://github.com/Sereal/Sereal/blob/"
"master/sereal_spec.pod で公開しています。また、設計面の議論については "
"https://github.com/Sereal/Sereal/blob/master/README.pod に、ベンチマークの出"
"力結果は https://github.com/Sereal/Sereal/wiki/Sereal-Comparison-Graphs にそ"
"れぞれ用意されています。"

#. tumbleweed/perl-Session-Token/summary
msgid "Secure, efficient, simple random session token generation"
msgstr "機密性が高く効率的でシンプルな、乱数からのセッショントークン生成"

#. tumbleweed/perl-Session-Token/description
msgid ""
"This module provides a secure, efficient, and simple interface for creating "
"session tokens, password reset codes, temporary passwords, random "
"identifiers, and anything else you can think of.\n"
"\n"
"When a Session::Token object is created, 1024 bytes are read from '/dev/"
"urandom' (Linux, Solaris, most BSDs), '/dev/arandom' (some older BSDs), or "
"Crypt::Random::Source::Strong::Win32 (Windows). These bytes are used to seed "
"the at http://www.burtleburtle.net/bob/rand/isaacafa.html pseudo random "
"number generator.\n"
"\n"
"Once a generator is created, you can repeatedly call the 'get' method on the "
"generator object and it will return a new token each time. \n"
"*IMPORTANT*: If your application calls 'fork', make sure that any generators "
"are re-created in one of the processes after the fork since forking will "
"duplicate the generator state and both parent and child processes will go on "
"to produce identical tokens (just like perl's rand after it is seeded).\n"
"\n"
"After the generator context is created, no system calls are used to generate "
"tokens. This is one way that Session::Token helps with efficiency. However, "
"this is only important for certain use cases (generally not web sessions).\n"
"\n"
"ISAAC is a cryptographically secure PRNG that improves on the well-known RC4 "
"algorithm in some important areas. For instance, it doesn't have short "
"cycles or initial bias like RC4 does. A theoretical shortest possible cycle "
"in ISAAC is '2**40', although no cycles this short have ever been found (and "
"probably don't exist at all). On average, ISAAC cycles are '2**8295'."
msgstr ""
"このモジュールはセッショントークやパスワードリセットコード、暫定パスワードや"
"乱数識別子などを作成することのできる、機密性が高く効率的でシンプルなインター"
"フェイスです。\n"
"\n"
"Session::Token オブジェクトを作成すると、 '/dev/urandom' (Linux, Solaris, お"
"よびほとんどの BSDs) または '/dev/arandom' (いくつかの古い BSD) や Crypt::"
"Random::Source::Strong::Win32 (Windows) から 1024 バイトを読み込みます。読み"
"込んだバイト列は擬似乱数生成器 (http://www.burtleburtle.net/bob/rand/"
"isaacafa.html) に対する乱数シードとして使用されます。\n"
"\n"
"このオブジェクトを作成したあとは、繰り返し 'get' メソッドを呼び出すことで、新"
"しいトークンを毎回取得できるようになります。\n"
"*重要*: アプリケーション内で 'fork' が行なわれると、本ジェネレータ内部の状態"
"についても複製が行なわれることになりますので、そのままでは親プロセスも子プロ"
"セスも同一のトークンを生成してしまうことになります。そのため、いずれか片方の"
"プロセスではオブジェクトを再作成するようにしてください (Perl の rand と同じで"
"す) 。\n"
"\n"
"ジェネレータコンテキストが作成されたあとは、トークン生成でシステムコールを使"
"用することはありません。これが Session::Token の効率性を高めています。しかし"
"ながら、これは特定の用途でのみ重要です (一般的な Web セッションではそうではあ"
"りません) 。\n"
"\n"
"ISAAC は暗号理論的に機密性の高い PRNG (擬似乱数) で、いくつかの重要な領域で既"
"知の RC4 アルゴリズムを改善しています。たとえば RC4 が行なうような短いサイク"
"ルや初期バイアスなどがそれにあたります。 ISAAC で論理的に最も短いサイクルは "
"'2**40' で、実際のところはこれほどまでに短いサイクルは見つかっていません (そ"
"しておそらく存在しないはず) 。平均的には ISAAC のサイクルは '2**8295' です。"

#. tumbleweed/perl-Set-IntSpan/summary
msgid "Manages sets of integers"
msgstr "整数セットのマニュアルページ"

#. tumbleweed/perl-Set-IntSpan/description
msgid ""
"'Set::IntSpan' manages sets of integers. It is optimized for sets that have "
"long runs of consecutive integers. These arise, for example, in .newsrc "
"files, which maintain lists of articles:\n"
"\n"
"  alt.foo: 1-21,28,31   alt.bar: 1-14192,14194,14196-14221\n"
"\n"
"A run of consecutive integers is sometimes called a _span_.\n"
"\n"
"Sets are stored internally in a run-length coded form. This provides for "
"both compact storage and efficient computation. In particular, set "
"operations can be performed directly on the encoded representation.\n"
"\n"
"'Set::IntSpan' is designed to manage finite sets. However, it can also "
"represent some simple infinite sets, such as { x | x>n }. This allows "
"operations involving complements to be carried out consistently, without "
"having to worry about the actual value of INT_MAX on your machine."
msgstr ""
"'Set::IntSpan' は整数セットを管理します。特に連続した整数を長く実行する用途に"
"最適化されいます。たとえば .newsrc ファイルでは下記のように記事リストを管理し"
"ます:\n"
"\n"
"  alt.foo: 1-21,28,31   alt.bar: 1-14192,14194,14196-14221\n"
"\n"
"このような連続した整数は _スパン_ と呼ばれることもあります。\n"
"\n"
"セットはランレングス形式で内部的に保存され、コンパクトな記憶領域でありながら"
"効率的な計算を実現しています。特に set 操作はエンコードされた形式で直接実行す"
"ることができます。\n"
"\n"
"'Set::IntSpan' は有限セットの管理を行なうために設計されています。しかしなが"
"ら、 { x | x>n } のような無限セットも表現することができます。これにより補数を"
"含む操作を、マシンの INT_MAX の値に注意することなく、安定的に実行することがで"
"きます。"

#. tumbleweed/perl-Set-Tiny/summary
msgid "Simple sets of strings"
msgstr "単純な文字セット"

#. tumbleweed/perl-Set-Tiny/description
msgid ""
"Set::Tiny is a thin wrapper around regular Perl hashes to perform often "
"needed set operations, such as testing two sets of strings for equality, or "
"checking whether one is contained within the other.\n"
"\n"
"For a more complete implementation of mathematical set theory, see Set::"
"Scalar. For sets of arbitrary objects, see Set::Object."
msgstr ""
"Set::Tiny は一般的な Perl ハッシュに対する薄いラッパーで、しばしば必要となる"
"集合の操作、たとえば 2 つのセットの文字列が等しいかどうかや、一方が他方に包含"
"されているかどうかなどの処理を行ないます。\n"
"\n"
"数学的集合論に対する詳しい説明は Set::Scalar を、任意のオブジェクトの集合につ"
"いては Set::Object をそれぞれお読みください。"

#. tumbleweed/perl-Socket6/summary
msgid "IPv6 related part of the C socket.h defines and structure manipulators"
msgstr "C 言語の socket.h で提供される定義と構造操作のうちの IPv6 関連の部分"

#. tumbleweed/perl-Socket6/description
msgid ""
"This module provides glue routines to the various IPv6 functions.\n"
"\n"
"If you use the Socket6 module, be sure to specify \"use Socket\" as well as "
"\"use Socket6\"."
msgstr ""
"このモジュールは、様々な IPv6 機能を組み合わせたルーチンを提供します。\n"
"\n"
"Socket6 モジュールを使用する場合は、 \"use Socket\" と共に \"use Socket6\" を"
"指定してください。"

#. tumbleweed/perl-Software-License/summary
msgid "Packages that provide templated software licenses"
msgstr "テンプレート化されたソフトウェアライセンスを提供するパッケージ"

#. tumbleweed/perl-Spreadsheet-ParseXLSX/summary
msgid "Parse Xlsx Files"
msgstr "Xlsx ファイルの処理"

#. tumbleweed/perl-Spreadsheet-ParseXLSX/description
msgid ""
"This module is an adaptor for Spreadsheet::ParseExcel that reads XLSX files. "
"For documentation about the various data that you can retrieve from these "
"classes, please see Spreadsheet::ParseExcel, Spreadsheet::ParseExcel::"
"Workbook, Spreadsheet::ParseExcel::Worksheet, and Spreadsheet::ParseExcel::"
"Cell."
msgstr ""
"このモジュールは XLSX ファイルを読み込むことのできる Spreadsheet::ParseExcel "
"向けのアダプタです。これらのクラスから取得することのできる様々なデータに関す"
"るドキュメンテーションについては、 Spreadsheet::ParseExcel, Spreadsheet::"
"ParseExcel::Workbook, Spreadsheet::ParseExcel::Worksheet, Spreadsheet::"
"ParseExcel::Cell をそれぞれお読みください。"

#. tumbleweed/perl-Spreadsheet-Read/perl-Spreadsheet-Read-scripts/summary
msgid "Scripts to Work with Spreadsheets"
msgstr "スプレッドシートを操作するスクリプト"

#. tumbleweed/perl-Spreadsheet-Read/perl-Spreadsheet-Read-scripts/description
msgid "This package includes some scripts to work with spreadsheets."
msgstr "このパッケージには、スプレッドシートを操作するいくつかのスクリプトが含まれています。"

#. tumbleweed/perl-Spreadsheet-ReadSXC/description
msgid ""
"Spreadsheet::ReadSXC extracts data from OpenOffice 1.x spreadsheet files (."
"sxc). It exports the function read_sxc() which takes a filename and an "
"optional reference to a hash of options as arguments and returns a reference "
"to a hash of references to two-dimensional arrays. The hash keys correspond "
"to the names of worksheets in the OpenOffice workbook. The two-dimensional "
"arrays correspond to rows and cells in the respective spreadsheets. If you "
"don't like this because the order of sheets is not preserved in a hash, read "
"on. The 'OrderBySheet' option provides an array of hashes instead.\n"
"\n"
"If you prefer to unpack the .sxc file yourself, you can use the function "
"read_xml_file() instead and pass the path to content.xml as an argument. Or "
"you can extract the XML string from content.xml and pass the string to the "
"function read_xml_string(). Both functions also take a reference to a hash "
"of options as an optional second argument.\n"
"\n"
"Spreadsheet::ReadSXC uses XML::Twig to parse the XML contained in .sxc "
"files. Only the contents of text:p elements are returned, not the actual "
"values of table:value attributes. For example, a cell might have a table:"
"value-type attribute of \"currency\", a table:value attribute of "
"\"-1500.99\" and a table:currency attribute of \"USD\". The text:p element "
"would contain \"-$1,500.99\". This is the string which is returned by the "
"read_sxc() function, not the value of -1500.99.\n"
"\n"
"Spreadsheet::ReadSXC was written with data import into an SQL database in "
"mind. Therefore empty spreadsheet cells correspond to undef values in array "
"rows. The example code above shows how to replace undef values with empty "
"strings.\n"
"\n"
"If the .sxc file contains an empty spreadsheet its hash element will point "
"to an empty array (unless you use the 'NoTruncate' option in which case it "
"will point to an array of an array containing one undefined element).\n"
"\n"
"OpenOffice uses UTF-8 encoding. It depends on your environment how the data "
"returned by the XML Parser is best handled:\n"
"\n"
"  use Unicode::String qw(latin1 utf8);   $unicode_string = utf8($"
"$workbook_ref{\"Sheet1\"}[0][0])->as_string;\n"
"\n"
"  \n"
"\n"
"  $latin1_string = utf8($$workbook_ref{\"Sheet1\"}[0][0])->latin1;\n"
"\n"
"Of course there are other modules than Unicode::String on CPAN that handle "
"conversion between encodings. It's your choice.\n"
"\n"
"Table rows in .sxc files may have a \"table:number-rows-repeated\" "
"attribute, which is often used for consecutive empty rows. When you format "
"whole rows and/or columns in OpenOffice, it sets the numbers of rows in a "
"worksheet to 32,000 and the number of columns to 256, even if only a few "
"lower-numbered rows and cells actually contain data. Spreadsheet::ReadSXC "
"truncates such sheets so that there are no empty rows after the last row "
"containing data and no empty columns after the last column containing data "
"(unless you use the 'NoTruncate' option).\n"
"\n"
"Still it is perfectly legal for an .sxc file to apply the \"table:number-"
"rows-repeated\" attribute to rows that actually contain data (although I "
"have only been able to produce such files manually, not through OpenOffice "
"itself). To save on memory usage in these cases, Spreadsheet::ReadSXC does "
"not copy rows by value, but by reference (remember that multi-dimensional "
"arrays in Perl are really arrays of references to arrays). Therefore, if you "
"change a value in one row, it is possible that you find the corresponding "
"value in the next row changed, too:\n"
"\n"
"  $$workbook_ref{\"Sheet1\"}[0][0] = 'new string';   print $"
"$workbook_ref{\"Sheet1\"}[1][0];\n"
"\n"
"As of version 0.20 the references returned by read_sxc() et al. remain valid "
"after subsequent calls to the same function. In earlier versions, calling "
"read_sxc() with a different file as the argument would change the data "
"referenced by the original return value, so you had to derefence it before "
"making another call. Thanks to H. Merijn Brand for fixing this."
msgstr ""
"Spreadsheet::ReadSXC は OpenOffice 1.x 表計算ファイル (.sxc) からデータを抽出"
"することのできるモジュールです。 read_sxc() と呼ばれる関数が公開されていて、"
"パラメータとしてファイル名のほか、任意でその他のオプションハッシュを指定しま"
"す。返り値は 2 次元配列のハッシュ参照が返されます。ハッシュのキーは "
"OpenOffice ワークブック内のワークシート名に対応しています。 2 次元配列はそれ"
"ぞれのワークシート内の行および列を表わしています。ワークシートの順序を維持し"
"ておきたい場合は、 'OrderBySheet' オプションを指定してください。これにより、"
"ハッシュの配列が返されるようになります。\n"
"\n"
".sxc ファイルを独自に展開したい場合は、代わりに read_xml_file() 関数をお使い"
"ください。このパラメータには content.xml を指定します。また、content.xml か"
"ら XML 文字列を抽出して read_xml_string() に文字列を渡すこともできます。それ"
"ぞれの関数はいずれも、 2 つめのパラメータとしてオプションのハッシュを指定する"
"ことができます。\n"
"\n"
"Spreadsheet::ReadSXC は XML::Twig を使用して .sxc ファイル内の XML を処理して"
"います。 text:p の内容のみが返却され、 table:value 属性の実際の値は返されませ"
"ん。たとえばセル内の table:value の型に \"currency\" が設定されていて、 "
"table:value 属性には \"-1500.99\" が、table:currency の属性には \"USD\" が設"
"定されている場合、 text:p 要素は \"-$1,500.99\" になります。これが実際に返さ"
"れる値となり、元の値である \"-1500.99\" は返されません。\n"
"\n"
"Spreadsheet::ReadSXC はデータを抽出して SQL データベースに取り込むことを前提"
"にして作られています。そのため、空のワークシートセルには undef が設定されま"
"す。サンプルコードでは、 undef を空文字列に置き換える方法が示されています。\n"
"\n"
".sxc ファイル内に空のワークシートが含まれている場合、ハッシュ要素は空の配列を"
"指し示します ('NoTruncate' オプションを指定した場合を除きます。この場合は、 "
"1 つの undef 要素が含まれる配列の配列が返されます) 。\n"
"\n"
"OpenOffice では UTF-8 エンコーディングを使用しています。お使いの環境に合わせ"
"て XML パーサが返すデータを調整してください:\n"
"\n"
"  use Unicode::String qw(latin1 utf8);   $unicode_string = utf8($"
"$workbook_ref{\"Sheet1\"}[0][0])->as_string;\n"
"\n"
"  \n"
"\n"
"  $latin1_string = utf8($$workbook_ref{\"Sheet1\"}[0][0])->latin1;\n"
"\n"
"もちろん CPAN には Unicode::String 以外の様々なモジュールが存在していますの"
"で、それらのモジュールで変換を行なってもかまいません。\n"
"\n"
".sxc ファイル内の行には \"table:number-rows-repeated\" 属性が含まれ、連続した"
"空行を表わすようにしている場合があります。 OpenOffice で行や列を整形した場"
"合、ごく少数の行や列にしかデータが存在しない場合であっても、ワークシート内の"
"行数は 32000 に、列数は 256 に設定されます。 Spreadsheet::ReadSXC ではそれら"
"のシートを削除するため、データを含む最後の行の後に空の行はなく、データを含む"
"最後の列の後に空の列はありません ('NoTruncate' オプションを指定した場合を除き"
"ます) 。\n"
"\n"
"ただし、 .sxc ファイル内で \"table:number-rows-repeated\" 属性を実際にデータ"
"の存在する行に適用するのは問題ではありません (ただし OpenOffice 自身では生成"
"できません。手作業で作成する必要があります) 。これらの状況下でメモリの使用率"
"を削減するため、 Spreadsheet::ReadSXC は値で行をコピーすることはせず、参照と"
"してコピーするようになっています (Perl 内では多次元配列は配列の参照に対する配"
"列であることに注意してください) 。そのため、 1 つの行内にある値を変更してしま"
"うと、次の行にある同じ値も変更してしまうことになります:\n"
"\n"
"  $$workbook_ref{\"Sheet1\"}[0][0] = 'new string';   print $"
"$workbook_ref{\"Sheet1\"}[1][0];\n"
"\n"
"バージョン 0.20 では、 read_sxc() 等が返した参照は、同じ関数を続けて呼んでも"
"有効であり続けます。それ以前のバージョンでは、異なるファイルに対する "
"read_sxc() は元の返り値のデータを変更してしまうことがありました。そのため、次"
"の呼び出しを行なう前に参照外しを行なう必要がありました。この修正を行なった "
"H. Merijn Brand 氏に感謝します。"

#. tumbleweed/perl-Starman/description
msgid ""
"Starman is a PSGI perl web server that has unique features such as: \n"
"* High Performance\n"
"\n"
"Uses the fast XS/C HTTP header parser \n"
"* Preforking\n"
"\n"
"Spawns workers preforked like most high performance UNIX servers do. Starman "
"also reaps dead children and automatically restarts the worker pool. \n"
"* Signals\n"
"\n"
"Supports 'HUP' for graceful worker restarts, and 'TTIN'/'TTOU' to "
"dynamically increase or decrease the number of worker processes, as well as "
"'QUIT' to gracefully shutdown the worker processes. \n"
"* Superdaemon aware\n"
"\n"
"Supports Server::Starter for hot deploy and graceful restarts. \n"
"* Multiple interfaces and UNIX Domain Socket support\n"
"\n"
"Able to listen on multiple interfaces including UNIX sockets. \n"
"* Small memory footprint\n"
"\n"
"Preloading the applications with '--preload-app' command line option enables "
"copy-on-write friendly memory management. Also, the minimum memory usage "
"Starman requires for the master process is 7MB and children (workers) is "
"less than 3.0MB. \n"
"* PSGI compatible\n"
"\n"
"Can run any PSGI applications and frameworks \n"
"* HTTP/1.1 support\n"
"\n"
"Supports chunked requests and responses, keep-alive and pipeline requests. \n"
"* UNIX only\n"
"\n"
"This server does not support Win32."
msgstr ""
"Starman は PSGI perl web サーバで、下記のようなユニークな機能が提供されていま"
"す:\n"
"* 高性能\n"
"\n"
"  高速な XS/C HTTP ヘッダパーサを使用しています\n"
"* prefork 型\n"
"\n"
"  高性能な UNIX サーバが行なっているのと同じ、ワーカスレッドを事前に fork す"
"る仕組みを備えています。 Starman では子プロセスが死んでしまった場合、それらの"
"プロセスを自動的に終了させて再起動し、自動的にワーカプールに再投入する機能も"
"備えています。\n"
"* シグナル対応\n"
"\n"
"  'HUP' ではワーカに影響を与えずに再起動することができるほか、 'TTIN'/'TTOU' "
"ではワーカプロセスの拡大と縮小、 'QUIT' ではワーカプロセスの処理終了を待って"
"終了することができます。\n"
"* スーパーデーモン対応\n"
"\n"
"  Server::Starter に対応し、ホットデプロイや再起動などを行なうことができま"
"す。\n"
"* 複数インスタンスおよび UNIX ドメインソケット対応\n"
"\n"
"  UNIX ソケットを含む複数のインターフェイスに対してサービスを提供することがで"
"きます。\n"
"* 小さなメモリフットプリント\n"
"\n"
"  '--preload-app' コマンドラインオプションを指定してアプリケーションを事前読"
"み込みさせると、コピーオンライト型に適したメモリ管理を行なうようになります。"
"また、 Starman が必要とする最小メモリは 7MB で、子プロセス (ワーカ) は 3.0MB "
"未満で動作します。\n"
"* PSGI 互換\n"
"\n"
"  任意の PSGI アプリケーションおよびフレームワークを動作させることができま"
"す。\n"
"* HTTP/1.1 対応\n"
"\n"
"  チャンクリクエストおよびチャンクレスポンスに対応しているほか、キープアライ"
"ブやパイプライン要求にも対応しています。\n"
"* UNIX のみ対応\n"
"\n"
"  Win32 には対応していません。"

#. tumbleweed/perl-String-CRC32/description
msgid ""
"The *CRC32* module calculates CRC sums of 32 bit lengths as integers. It "
"generates the same CRC values as ZMODEM, PKZIP, PICCHECK and many others.\n"
"\n"
"Despite its name, this module is able to compute the checksum of files as "
"well as strings."
msgstr ""
"*CRC32* モジュールは、 32 ビットの長さを持つ CRC チェックサムを生成します。 "
"CRC の仕組みは、 ZMODEM, PKZIP, PICCHECK など、数多くのモジュールで採用されて"
"います。\n"
"\n"
"なお、この名前とは裏腹に、文字列だけでなくファイルのチェックサムも計算するこ"
"とができます。"

#. tumbleweed/perl-String-Trim/summary
msgid "Trim whitespace from your strings"
msgstr "文字列から空白を削除します"

#. tumbleweed/perl-String-Trim/description
msgid ""
"'String::Trim' trims whitespace off your strings. chomp trims only "
"'$/' (typically, that's newline), but 'trim' will trim all leading and "
"trailing whitespace."
msgstr ""
"'String::Trim'は、文字列から空白を削除します。chompは'$/'だけを削除します(通"
"常は改行です)が、'trim'は前後の空白をすべて削除します。"

#. tumbleweed/perl-String-Util/summary
msgid "String processing utility functions"
msgstr "文字列処理ユーティリティ機能"

#. tumbleweed/perl-String-Util/description
msgid ""
"String::Util provides a collection of small, handy functions for processing "
"strings in various ways."
msgstr ""
"String::Util は、文字列を様々な方法で処理する小さくて扱いやすい関数群を提供し"
"ます。"

#. tumbleweed/perl-Sub-Exporter/summary
msgid "Sophisticated exporter for custom-built routines"
msgstr "カスタムビルドルーチン用の洗練されたエクスポータ"

#. tumbleweed/perl-Sub-Exporter/description
msgid ""
"*ACHTUNG!* If you're not familiar with Exporter or exporting, read Sub::"
"Exporter::Tutorial first!"
msgstr ""
"*注意!* Exporter や関数のエクスポートについて詳しくない場合は、まずSub::"
"Exporter::Tutorial をお読みください!"

#. tumbleweed/perl-Sub-HandlesVia/summary
msgid "Alternative handles_via implementation"
msgstr "代替 handles_via 実装"

#. tumbleweed/perl-Sub-HandlesVia/description
msgid ""
"If you've used Moose's native attribute traits, or MooX::HandlesVia before, "
"you should have a fairly good idea what this does.\n"
"\n"
"Why re-invent the wheel? Well, this is an implementation that should work "
"okay with Moo, Moose, Mouse, and any other OO toolkit you throw at it. One "
"ring to rule them all, so to speak.\n"
"\n"
"Also, unlike MooX::HandlesVia, it honours type constraints, plus it doesn't "
"have the limitation that it can't mutate non-reference values."
msgstr ""
"Moose のネイティブな属性の仕組みや MooX::HandlesVia を以前に使用したことがあ"
"れば、このモジュールが行なうことが非常によいものであることがわかるでしょ"
"う。\n"
"\n"
"なぜ車輪の再発明を？とお考えかもしれませんが、これは Moo, Moose, Mouse やその"
"他の OO ツールキットなどで動作する、いわば 1 つで全てを支配できる指輪のような"
"ものです。\n"
"\n"
"なお MooX::HandlesVia とは異なり、型制約を尊重する仕組みであるほか、非参照の"
"値を変更できない制限もありません。"

#. tumbleweed/perl-Syntax-Keyword-Try/description
msgid ""
"This module provides a syntax plugin that implements exception-handling "
"semantics in a form familiar to users of other languages, being built on a "
"block labeled with the 'try' keyword, followed by at least one of a 'catch' "
"or 'finally' block.\n"
"\n"
"As well as providing a handy syntax for this useful behaviour, this module "
"also serves to contain a number of code examples for how to implement parser "
"plugins and manipulate optrees to provide new syntax and behaviours for perl "
"code.\n"
"\n"
"Syntax similar to this module has now been added to core perl, starting at "
"version 5.34.0. If you are writing new code, it is suggested that you "
"instead use the Feature::Compat::Try module instead, as that will enable the "
"core feature on those supported perl versions, falling back to 'Syntax::"
"Keyword::Try' on older perls."
msgstr ""
"このモジュールは、他の言語のユーザになじみのある形式で例外処理セマンティクスを実装する構文プラグインを提供します。この形式は、「try」キーワードでラベル"
"付けされたブロック上に構築され、その後に「catch」または「finally」ブロックの少なくとも1つが続きます。\n"
"\n"
"この便利な動作のための便利な構文を提供するだけでなく、このモジュールには、パーサープラグインの実装方法や、perlコード用の新しい構文と動作を提供するため"
"のoptreesの操作方法に関する多数のコード例が含まれています。\n"
"\n"
"このモジュールに似た構文が、バージョン5.34.0以降のcore perlに追加されました。新しいコードを作成する場合は、代わりにFeature::Com"
"pat::Tryモジュールを使用することをお勧めします。これにより、サポートされているバージョンのperlではコア機能が有効になり、古いバージョンでは「S"
"yntax::Keyword::Try」に戻ります。"

#. tumbleweed/perl-Sys-MemInfo/summary
msgid "Query the total free and used physical memory"
msgstr "物理メモリの使用済み容量と空き容量の問い合わせ"

#. tumbleweed/perl-Sys-MemInfo/description
msgid ""
"Sys::MemInfo return the total amount of free and used physical memory in "
"bytes in totalmem and freemem variables.\n"
"\n"
"Total amount of free and user swap memory are alse returned in totalswap and "
"freeswap variables.\n"
"\n"
"This module has been tested on Linux 3.13.0, UnixWare 7.1.2, AIX5, OpenBSD "
"3.8, NetBSD 2.0.2, FreBSD 5.4, HPUX11, Solaris 9, Tru64 5.1, Irix 6.5, Mac "
"OS X 10.2 darwin and Windows XP.\n"
"\n"
"It should work on FreeBSD 4 and Windows 9X/ME/NT/200X/Vista."
msgstr ""
"Sys::MemInfo はバイト単位で物理メモリの使用済み容量と空き容量を返します。それ"
"ぞれ totalmem と freemem という変数で返されます。\n"
"\n"
"スワップメモリの使用済み容量と空き容量については、 totalswap と freeswap の各"
"変数で返されます。\n"
"\n"
"このモジュールは Linux 3.13.0, UnixWare 7.1.2, AIX5, OpenBSD 3.8, NetBSD "
"2.0.2, FreBSD 5.4, HPUX11, Solaris 9, Tru64 5.1, Irix 6.5, Mac OS X 10.2 "
"darwin, Windows XP でそれぞれテストされています。\n"
"\n"
"FreeBSD 4 と Windows 9X/ME/NT/200X/Vista で動作するはずです。"

#. tumbleweed/perl-System-Command/summary
msgid "Object for running system commands"
msgstr "実行中のシステムコマンドに対するオブジェクト"

#. tumbleweed/perl-System-Command/description
msgid ""
"System::Command is a class that launches external system commands and return "
"an object representing them, allowing to interact with them through their "
"'STDIN', 'STDOUT' and 'STDERR' handles."
msgstr ""
"System::Command は外部のシステムコマンドを実行するためのクラスで、その実行中"
"のコマンド自身をオブジェクトとして返します。これにより、 'STDIN', 'STDOUT', "
"'STDERR' の各ハンドルを制御できるようになります。"

#. tumbleweed/perl-Template-Plugin-Filter-ANSIColor/summary
msgid "Colorizes text using ANSI colors"
msgstr "ANSI カラー設定によるテキストの色づけ"

#. tumbleweed/perl-Template-Plugin-Filter-ANSIColor/description
msgid "colorizes text using ANSI colors"
msgstr "ANSI カラー設定によるテキストの色づけ"

#. tumbleweed/perl-Template-Plugin-JSON-Escape/summary
msgid "Adds a .json vmethod and a json filter"
msgstr ".sjon vmethod と json フィルタの追加"

#. tumbleweed/perl-Template-Plugin-JSON-Escape/description
msgid ""
"This plugin allows you to embed JSON strings in HTML. In the output, special "
"characters such as '<' and '&' are escaped as '\\uxxxx' to prevent XSS "
"attacks.\n"
"\n"
"It also provides decoding function to keep compatibility with Template::"
"Plugin::JSON."
msgstr ""
"このプラグインは JSON 文字列を HTML 内に埋め込むための仕組みです。出力時には "
"'<' や '&' などの文字を、 XSS 攻撃を防ぐために '\\uxxxx' にエンコードしま"
"す。\n"
"\n"
"このほか、 Template::Plugin::JSON との互換性を維持するためのデコード関数も提"
"供されています。"

#. tumbleweed/perl-Template-Tiny/summary
msgid "Template Toolkit reimplemented in as little code as possible"
msgstr "できる限り少ないコード量でのテンプレートツールキットの再実装"

#. tumbleweed/perl-Template-Tiny/description
msgid ""
"*Template::Tiny* is a reimplementation of a subset of the functionality from "
"Template Toolkit in as few lines of code as possible.\n"
"\n"
"It is intended for use in light-usage, low-memory, or low-cpu templating "
"situations, where you may need to upgrade to the full feature set in the "
"future, or if you want the retain the familiarity of TT-style templates.\n"
"\n"
"For the subset of functionality it implements, it has fully-compatible "
"template and stash API. All templates used with *Template::Tiny* should be "
"able to be transparently upgraded to full Template Toolkit.\n"
"\n"
"Unlike Template Toolkit, *Template::Tiny* will process templates without a "
"compile phase (but despite this is still quicker, owing to heavy use of the "
"Perl regular expression engine."
msgstr ""
"*Template::Tiny* は Template ツールキットの機能の一部を再実装したもので、でき"
"る限り少ないコード行数でこれを実現しています。\n"
"\n"
"これはテンプレートの処理にあたって軽量でメモリの使用量も少なく、かつ CPU の消"
"費量も少なくなるように作られています。そのため、将来的に全ての機能が必要と"
"なってアップグレードを行なうか、もしくは TT スタイルのテンプレート処理を使い"
"続けるのかを選ぶことができるようになります。\n"
"\n"
"実装は一部分の機能にとどまりますが、 template と stash の API との互換性は完"
"全に確保されています。 *Template::Tiny* で使用される全てのテンプレートは、将"
"来的に完全機能版の Template ツールキットに透過的に移行できるように作られてい"
"ます。\n"
"\n"
"なお、 Template ツールキットとは異なり、 *Template::Tiny* はコンパイルフェー"
"ズでのテンプレート処理は行ないません (ただし Perl の正規表現エンジンを使用し"
"ているため、それでも高速に動作します) 。"

#. tumbleweed/perl-Term-ReadLine-Gnu/description
msgid ""
"This is an implementation of Term::ReadLine using the GNU Readline/History "
"Library.\n"
"\n"
"For basic functions object oriented interface is provided. These are "
"described in the section \"Standard Methods\" and \"Term::ReadLine::Gnu "
"Functions\".\n"
"\n"
"This package also has the interface with the almost all functions and "
"variables which are documented in the GNU Readline/History Library Manual."
msgstr ""
"これは GNU Readline/History ライブラリを使用する Term::ReadLine の実装で"
"す。\n"
"\n"
"基本的な機能としてオブジェクト指向のインターフェイスが提供されています。これ"
"らは \"Standard Methods\" と \"Term::ReadLine::Gnu Functions\" のセクション内"
"で説明されています。\n"
"\n"
" また、このパッケージには GNU Readline/History のマニュアルに書かれている、ほ"
"ぼ全ての関数や変数に対するインターフェイスが備わっています。"

#. tumbleweed/perl-Term-Size-Any/summary
msgid "Retrieve terminal size"
msgstr "端末サイズを取得します"

#. tumbleweed/perl-Term-Size-Any/description
msgid ""
"This is a unified interface to retrieve terminal size. It loads one module "
"of a list of known alternatives, each implementing some way to get the "
"desired terminal information. This loaded module will actually do the job on "
"behalf of 'Term::Size::Any'.\n"
"\n"
"Thus, 'Term::Size::Any' depends on the availability of one of these "
"modules:\n"
"\n"
"    Term::Size           (soon to be supported)     Term::Size::Perl     "
"Term::Size::ReadKey  (soon to be supported)     Term::Size::Win32\n"
"\n"
"This release fallbacks to Term::Size::Win32 if running in Windows 32 "
"systems. For other platforms, it uses the first of Term::Size::Perl, Term::"
"Size or Term::Size::ReadKey which loads successfully. (To be honest, I "
"disabled the fallback to Term::Size and Term::Size::ReadKey which are buggy "
"by now.)"
msgstr ""
"これは端末サイズを取得するための統一されたインタフェースです。これは既知の選"
"択肢リストの1つのモジュールをロードし、それぞれが所望の端末情報を得るための何"
"らかの方法を実装します。このロードされたモジュールは、実際には'Term::Size::"
"Any'の代わりにジョブを実行します。\n"
"\n"
"したがって、'Term::Size::Any'は、次のいずれかのモジュールの可用性に依存しま"
"す。\n"
"\n"
"    Term::Size(間もなくサポートされる予定)Term::Size::Perl Term::Size::"
"ReadKey(間もなくサポートされる予定)Term::Size::Win32\n"
"このリリースは、Windows32システムで実行されている場合、Term::Size::Win32に"
"フォールバックします。他のプラットフォームでは、正常にロードされたTerm::"
"Size::Perl、Term::SizeまたはTerm::Size::ReadKeyの1番目が使用されます。(正直に"
"言うと、今ではバグが多いTerm::SizeとTerm::Size::ReadKeyへのフォールバックを無"
"効にしました。)"

#. tumbleweed/perl-Term-Size-Perl/summary
msgid "Perl extension for retrieving terminal size (Perl version)"
msgstr "端末サイズを取得するための Perl 拡張(Perl 版)"

#. tumbleweed/perl-Term-Size-Perl/description
msgid ""
"Yet another implementation of 'Term::Size'. Now in pure Perl, with the "
"exception of a C probe run on build time."
msgstr ""
"'Term::Size'のさらに別の実装。純粋なPerlでは、Cプローブはビルド時に実行されま"
"す。"

#. tumbleweed/perl-Term-Terminfo/summary
msgid "Access the terminfo database"
msgstr "terminfo データベースへのアクセス"

#. tumbleweed/perl-Term-Terminfo/description
msgid ""
"Objects in this class provide access to _terminfo_ database entires.\n"
"\n"
"This database provides information about a terminal, in three separate sets "
"of capabilities. Flag capabilities indicate the presence of a particular "
"ability, feature, or bug simply by their presence. Number capabilities give "
"the size, count or other numeric detail of some feature of the terminal. "
"String capabilities are usually control strings that the terminal will "
"recognise, or send.\n"
"\n"
"Capabilities each have two names; a short name called the capname, and a "
"longer name called the varname. This class provides two sets of methods, one "
"that works on capnames, one that work on varnames.\n"
"\n"
"This module optionally uses _unibilium_ to access the terminfo(5) database, "
"if it is available at compile-time. If not, it will use _<term.h>_ and _-"
"lcurses_. For more detail, see the SEE ALSO section below."
msgstr ""
"このクラス内のオブジェクトは、 _terminfo_ データベースエントリへのアクセス機"
"能を提供します。\n"
"\n"
"このデータベースは端末に関する情報を保持するもので、端末機能に対する 3 種類の"
"個別セットを定義しています。フラグでは端末の特定機能やバグの存在有無を、数値"
"では端末のサイズやカウント、その他の数値表現を、文字列では端末が認識できる制"
"御文字列をそれぞれ表わします。\n"
"\n"
"機能には 2 種類の名前が設定されます。短いほうの名前は capname 、長いほうの名"
"前は varname と呼ばれます。このクラスでは　 2 種類のメソッドを提供していて、"
"一方は capname で、他方は varname で動作するようになっています。\n"
"\n"
"このモジュールでは、必要に応じて terminfo(5) データベースにアクセスするため"
"の _unibilium_ を使用することもできます。これは通常コンパイル時に利用するもの"
"ですが、それ以外の場合は _<term.h>_ と _-lcurses_ をそれぞれ使用します。詳し"
"くは SEE ALSO セクションをお読みください。"

#. tumbleweed/perl-Test-API/summary
msgid "Test a list of subroutines provided by a module"
msgstr "モジュールが提供するサブルーチンリストのテスト"

#. tumbleweed/perl-Test-API/description
msgid ""
"This simple test module checks the subroutines provided by a module. This is "
"useful for confirming a planned API in testing and ensuring that other "
"functions aren't unintentionally included via import."
msgstr ""
"このシンプルなテストモジュールは、モジュールが提供するサブルーチンリストをテ"
"ストすることができます。これはテスト時に設計通りの API 仕様に準拠しているかど"
"うかを確認する際に有用であるほか、 import を介してその他の関数が不正に取り込"
"まれていないかどうかをテストする際にも使用することができます。"

#. tumbleweed/perl-Test-Base/summary
msgid "Data Driven Testing Framework"
msgstr "データ駆動型のテストフレームワーク"

#. tumbleweed/perl-Test-Class/description
msgid ""
"Test::Class provides a simple way of creating classes and objects to test "
"your code in an xUnit style.\n"
"\n"
"Built using Test::Builder, it was designed to work with other Test::Builder "
"based modules (Test::More, Test::Differences, Test::Exception, etc.).\n"
"\n"
"_Note:_ This module will make more sense, if you are already familiar with "
"the \"standard\" mechanisms for testing perl code. Those unfamiliar with "
"Test::Harness, Test::Simple, Test::More and friends should go take a look at "
"them now. Test::Tutorial is a good starting point."
msgstr ""
"Test::Class は、 xUnit スタイルでのコードテスト用にクラスやオブジェクトを作成"
"するシンプルな方法を提供します。\n"
"\n"
"Test::Builder を利用して構築したことで、 Test::Builder ベースのモジュール "
"(Test::More, Test::Differences, Test::Exception など) とともに動作するように"
"設計されています。\n"
"\n"
"_注意:_ このモジュールは、すでに Perl のコードをテストする \"標準的な\" 仕組"
"みを知っている方に向けて作られています。 Test::Harness や Test::Simple, "
"Test::More などに詳しくない方は、まず Test::Tutorial をお読みください。"

#. tumbleweed/perl-Test-Deep/description
msgid ""
"If you don't know anything about automated testing in Perl then you should "
"probably read about Test::Simple and Test::More before preceding. Test::Deep "
"uses the Test::Builder framework.\n"
"\n"
"Test::Deep gives you very flexible ways to check that the result you got is "
"the result you were expecting. At its simplest it compares two structures by "
"going through each level, ensuring that the values match, that arrays and "
"hashes have the same elements and that references are blessed into the "
"correct class. It also handles circular data structures without getting "
"caught in an infinite loop.\n"
"\n"
"Where it becomes more interesting is in allowing you to do something besides "
"simple exact comparisons. With strings, the 'eq' operator checks that 2 "
"strings are exactly equal but sometimes that's not what you want. When you "
"don't know exactly what the string should be but you do know some things "
"about how it should look, 'eq' is no good and you must use pattern matching "
"instead. Test::Deep provides pattern matching for complex data structures\n"
"\n"
"Test::Deep has *_a lot_* of exports. See EXPORTS below."
msgstr ""
"Perl で自動化されたテストについてご存じない場合は、まず Test::Simple と "
"Test::More をお読みになることをお勧めします。 Test::Deep は Test::Builder フ"
"レームワークを使用しています。\n"
"\n"
"Test::Deep は、取得した結果が期待通りのものであるかどうかをチェックするため"
"の、非常に柔軟な方法を提供しています。 2 つの構造体はそれぞれのレベルに対して"
"行なわれるシンプルな仕組みであることから、値が等しいことや配列やハッシュが同"
"じ要素を持っているか、およびその参照が正しいクラスにブレスしているかどうかを"
"調べることができます。また、無限ループを回避する仕組みを備えているため、循環"
"構造でも問題なく動作します。\n"
"\n"
"より興味深い点としては、シンプルで正確な比較を行なうことができるという点があ"
"ります。文字列の場合、 'eq' 演算子を利用して 2 つの文字列が等しいことを確認し"
"ますが、場合によってはこれが期待するものではないことがあります。文字列が正確"
"にどのような値であるべきかがわからない場合は、パターンマッチングを代わりに使"
"用することができます。 Test::Deep では、複雑なデータ構造を比較する際にパター"
"ンマッチングを使用することができます。\n"
"\n"
"Test::Deep には *_多数の_* 公開関数があります。詳しくは /EXPORTS をお読みくだ"
"さい。"

#. tumbleweed/perl-Test-DiagINC/summary
msgid "List modules and versions loaded if tests fail"
msgstr "テストが失敗した場合にロードされるモジュールとバージョンのリスト"

#. tumbleweed/perl-Test-DiagINC/description
msgid ""
"Assuming you shipped your module to CPAN with working tests, test failures "
"from at http://www.cpantesters.org/ might be due to platform issues, Perl "
"version issues or problems with dependencies. This module helps you diagnose "
"deep dependency problems by showing you exactly what modules and versions "
"were loaded during a test run."
msgstr ""
"モジュールを動作テストとともにCPANに出荷したと仮定すると、http://www.cpantesters.org/でのテストの失敗は、プラットフォームの"
"問題、Perlバージョンの問題、依存関係の問題が原因である可能性があります。このモジュールは、テスト実行中にロードされたモジュールとバージョンを正確に表示"
"することで、依存関係の深刻な問題を診断するのに役立ちます。"

#. tumbleweed/perl-Test-Fatal/summary
msgid "Incredibly simple helpers for testing code with exceptions"
msgstr "例外付きのコードをテストするための非常にシンプルなヘルパー"

#. tumbleweed/perl-Test-Fatal/description
msgid ""
"Test::Fatal is an alternative to the popular Test::Exception. It does much "
"less, but should allow greater flexibility in testing exception-throwing "
"code with about the same amount of typing.\n"
"\n"
"It exports one routine by default: 'exception'. \n"
"*Achtung!* 'exception' intentionally does not manipulate the call stack. "
"User-written test functions that use 'exception' must be careful to avoid "
"false positives if exceptions use stack traces that show arguments. For a "
"more magical approach involving globally overriding 'caller', see Test::"
"Exception."
msgstr ""
"Test::Fatal は有名な Text::Exception に対する代替モジュールです。Test::"
"Exception よりはとても少ない処理しか行ないませんが、例外をスローするコードを"
"テストする際には、コードの入力と同程度の手間で、非常に柔軟な仕組みを提供しま"
"す。\n"
"\n"
"既定では 1 つのルーチンのみが公開されています: 'exception'\n"
"*Achtung! *'exception' は意図的にコール・スタックを操作しません。'exception' "
"を使用するユーザー作成のテスト関数では、例外が引数を示すスタック・トレースを"
"使用する場合、誤検出を避けるように注意する必要があります。'caller' をグローバ"
"ルに上書きするという、より魔法のようなアプローチについては、Test::Exception "
"を参照してください。"

#. tumbleweed/perl-Test-File/description
msgid ""
"This modules provides a collection of test utilities for file attributes.\n"
"\n"
"Some file attributes depend on the owner of the process testing the file in "
"the same way the file test operators do. For instance, root (or super-user "
"or Administrator) may always be able to read files no matter the "
"permissions.\n"
"\n"
"Some attributes don't make sense outside of Unix, either, so some tests "
"automatically skip if they think they won't work on the platform. If you "
"have a way to make these functions work on Windows, for instance, please "
"send me a patch. :) If you want to pretend to be Windows on a non-Windows "
"machine (for instance, to test 'skip()'), you can set the "
"'PRETEND_TO_BE_WINDOWS' environment variable.\n"
"\n"
"The optional NAME parameter for every function allows you to specify a name "
"for the test. If not supplied, a reasonable default will be generated."
msgstr ""
"このモジュールは、ファイル属性のテストユーティリティのコレクションを提供します。\n"
"\n"
"ファイル属性の中には、ファイルテストオペレータと同じ方法でファイルをテストするプロセスの所有者に依存するものがあります。たとえば、root(またはスーパー"
"ユーザや管理者)は、権限に関係なく、常にファイルを読み取ることができます。\n"
"\n"
"一部の属性はUnix以外では意味を持たないため、一部のテストはプラットフォームで動作しないと判断した場合に自動的にスキップします。例えば、これらの機能をW"
"indowsで動作させる方法があれば、パッチを送ってください。:) Windows 以外のマシンで Windows "
"のふりをしたい場合(例えば、'skip()'をテストする場合)は、環境変数 'FEET_TO_BE_WINDOWS' を設定できます。\n"
"\n"
"すべての関数にオプションのNAMEパラメータを使用すると、テストの名前を指定できます。指定しない場合は、妥当なデフォルト値が生成されます。"

#. tumbleweed/perl-Test-Fork/summary
msgid "Test code which forks"
msgstr "フォークするテストコード"

#. tumbleweed/perl-Test-Fork/description
msgid ""
"*THIS IS ALPHA CODE!* The implementation is unreliable and the interface is "
"subject to change.\n"
"\n"
"Because each test has a number associated with it, testing code which forks "
"is problematic. Coordinating the test number amongst the parent and child "
"processes is complicated. Test::Fork provides a function to smooth over the "
"complications."
msgstr ""
"*これはαコードです! *実装に信頼性がなく、インターフェイスは変更される可能性があります。\n"
"\n"
"各テストには番号が関連付けられているので、フォークするコードのテストには問題があります。親プロセスと子プロセスの間でテスト番号を調整するのは複雑です。Te"
"st::Forkには、複雑な問題をスムーズに処理する機能があります。"

#. tumbleweed/perl-Test-HTTP-MockServer/summary
msgid "Implement a mock HTTP server for use in tests"
msgstr "テストで使用するモックHTTPサーバを実装します"

#. tumbleweed/perl-Test-HTTP-MockServer/description
msgid ""
"Sometimes, when writing a test, you don't have to oportunity to do "
"dependency injection of the type of transport used in a specific API. "
"Sometimes that code willl unequivocally always use actual HTTP and the only "
"control you have is over the host and port to which it will connect.\n"
"\n"
"This class offer a simple way to mock the service being called. It does that "
"by binding to a random port on localhost and allowing you to inspect which "
"port that was. Using a random port means that this can be used by tests "
"running in parallel on the same host.\n"
"\n"
"The socket will be bound and listened on the main test process, such that "
"the lifetime of the connection is defined by the lifetime of the test "
"itself.\n"
"\n"
"Since the socket will be already bound and listened to, the two conntrol "
"methods (start_mock_server and stop_mock_server) fork only for the accept "
"call, which means that it is safe to call start and stop several times "
"during the test in order to change the expectations of the mocked code.\n"
"\n"
"That allows you to easily configure the expectations of the mock server "
"across each step of your test case. On the other hand, it also means that no "
"state is shared between the code running in the mock server and the test "
"code."
msgstr ""
"テストを作成する際に、特定のAPIで使用されるトランスポートのタイプの依存性イン"
"ジェクションを行う必要がない場合があります。場合によっては、そのコードが常に"
"実際のHTTPを使用し、接続先のホストとポートだけを制御することもあります。\n"
"\n"
"このクラスは、呼び出されるサービスを模倣する簡単な方法を提供します。これは、"
"localhost上のランダムなポートにバインドし、どのポートがそうであったかを調査で"
"きるようにすることによって行われます。ランダム・ポートを使用するということ"
"は、同じホスト上で並行して実行されるテストで使用できることを意味します。\n"
"\n"
"接続の存続時間がテスト自体の存続時間によって定義されるように、ソケットは主テ"
"スト・プロセスにバインドされ、listenされます。\n"
"\n"
"ソケットはすでにバインドされてリッスンされているので、2つのconntrolメソッド"
"(start_mock_serverとstop_mock_server)はaccept呼び出しに対してのみforkします。"
"つまり、モック・コードの予想を変更するために、テスト中に何度かstartとstopを呼"
"び出しても安全です。\n"
"\n"
"これにより、テスト・ケースの各ステップにわたってモック・サーバーの予測を容易"
"に構成することができます。一方、モック・サーバーで実行されているコードとテス"
"ト・コードの間で状態が共有されていないことも意味します。"

#. tumbleweed/perl-Test-Inter/summary
msgid "Framework for more readable interactive test scripts"
msgstr "よりわかりやすい対話テストスクリプトのためのフレームワーク"

#. tumbleweed/perl-Test-Kit/summary
msgid "Build custom test packages with only the features you want"
msgstr "必要な機能のみを持つ独自のテストパッケージの構築"

#. tumbleweed/perl-Test-Kit/description
msgid ""
"Test::Kit allows you to create a single module in your project which gives "
"you access to all of the testing functions you want.\n"
"\n"
"Its primary goal is to reduce boilerplate code that is currently littering "
"the top of all your test files.\n"
"\n"
"It also allows your testing to be more consistent; for example it becomes a "
"trivial change to include Test::FailWarnings in all of your tests, and there "
"is no danger that you forget to include it in a new test."
msgstr ""
"Test::Kit はプロジェクト内に 1 つのモジュールを作成して、全ての必要なテスト機"
"能にアクセスできる機能を提供します。\n"
"\n"
"主な目的は、テストファイル内の冒頭に散らばっている決まり切ったコードを削減す"
"ることにあります。\n"
"\n"
"これにより、テストをより一貫したものに仕上げることができます。たとえば全ての"
"テストに対して Test::FailWarnings を含めるのは簡単ですが、新しいテストにもそ"
"れを忘れずに追加できるようになります。"

#. tumbleweed/perl-Test-Kwalitee/summary
msgid "Test the Kwalitee of a distribution before you release it"
msgstr "配布をリリースする前に配布のKwaliteeをテスト"

#. tumbleweed/perl-Test-Kwalitee/description
msgid ""
"Kwalitee is an automatically-measurable gauge of how good your software is. "
"That's very different from quality, which a computer really can't measure in "
"a general sense. (If you can, you've solved a hard problem in computer "
"science.)\n"
"\n"
"In the world of the CPAN, the CPANTS project (CPAN Testing Service; also a "
"funny acronym on its own) measures Kwalitee with several metrics. If you "
"plan to release a distribution to the CPAN -- or even within your own "
"organization -- testing its Kwalitee before creating a release can help you "
"improve your quality as well.\n"
"\n"
"'Test::Kwalitee' and a short test file will do this for you automatically."
msgstr ""
"Kwaliteeは、あなたのソフトウェアがどれだけ優れているかを自動的に測定できるゲージです。これは、コンピュータが一般的な意味で測定できない品質とは大き"
"く異なります。(それができれば、コンピュータサイエンスの難しい問題を解決したことになります)。\n"
"\n"
"CPANの世界では、CPANTSプロジェクト(CPAN Testing Service;それ自体も面白い頭字語)がいくつかの指標でKwaliteeを測定し"
"ています。ディストリビューションをCPANに(あるいは自分の組織内でさえ)リリースすることを計画しているのであれば、リリースを作成する前にKwalitee"
"をテストすることで、品質を向上させることもできます。\n"
"\n"
"'Test::Kwalitee'と短いテストファイルが自動的にこれを行います。"

#. tumbleweed/perl-Test-Lib/summary
msgid "Use libraries from a t/lib directory"
msgstr "t/lib ディレクトリのライブラリを使用"

#. tumbleweed/perl-Test-Lib/description
msgid ""
"Searches upward from the calling module for a directory _t_ with a _lib_ "
"directory inside it, and adds it to the module search path. Looks upward up "
"to 5 directories. This is intended to be used in test modules either "
"directly in _t_ or in a subdirectory to find their included testing "
"libraries located in _t/lib_."
msgstr ""
"内部に_lib_directoryを持つdirectory_t_を呼び出し元モジュールから上方向に検索し、モジュール検索パスに追加します。上位5ディレクト"
"リを検索します。これは、テストモジュール内で直接_t_内で使用するか、サブディレクトリ内で_t/"
"lib_内にあるテストライブラリを検索するために使用します。"

#. tumbleweed/perl-Test-Magpie/summary
msgid "Mocking framework with method stubs and behaviour verification"
msgstr "メソッドスタブと振る舞い検証のためのモッキングフレームワーク"

#. tumbleweed/perl-Test-Magpie/description
msgid ""
"Test::Magpie is a test double framework heavily inspired by the Mockito "
"framework for Java, and also the Python-Mockito project. In Mockito, you "
"\"spy\" on objects for their behaviour, rather than being upfront about what "
"should happen. I find this approach to be significantly more flexible and "
"easier to work with than mocking systems like EasyMock, so I created a Perl "
"implementation. \n"
"* Mock objects\n"
"\n"
"Mock objects, represented by Test::Magpie::Mock objects, are objects that "
"pretend to be everything you could ever want them to be. A mock object can "
"have any method called on it, does every roles, and isa subclass of any "
"superclass. This allows you to easily throw a mock object around it will be "
"treated as though it was a real object. \n"
"* Method stubbing\n"
"\n"
"Any method can be called on a mock object, and it will be logged as an "
"invocation. By default, method calls return 'undef' in scalar context or an "
"empty list in list context. Often, though, clients will be interested in the "
"result of calling a method with some arguments. So you may specify how a "
"method stub should respond when it is called. \n"
"* Verify interactions\n"
"\n"
"After calling your concrete code (the code under test) you may want to check "
"that the code did operate correctly on the mock. To do this, you can use "
"verifications to make sure code was called, with correct parameters and the "
"correct amount of times. \n"
"* Argument matching\n"
"\n"
"Magpie gives you some helpful methods to validate arguments passed in to "
"calls. You can check equality between arguments, or consume a general type "
"of argument, or consume multiple arguments. See Test::Magpie::"
"ArgumentMatcher for the juicy details."
msgstr ""
"Test::Magpie はテストダブルフレームワークで、 Java 向けの Mockito フレーム"
"ワークや Python-Mockito プロジェクトに強く感化されてできたものです。 Mockito "
"では、何が起こるべきなのかを明確に指定するのではなく、その動作のオブジェクト"
"を \"隠密に\" 調査します。このような仕組みは非常に柔軟なものであり、 "
"EasyMock のようなモッキングシステムよりもずっと簡単に扱うことができますの"
"で、 Perl 版の実装を行なったわけです。\n"
"* モックオブジェクト\n"
"\n"
"モックオブジェクトは Test::Magpie::Mock で表わされるオブジェクトですが、期待"
"通りの任意のものになりすますことができます。モックオブジェクトには任意のメ"
"ソッドを設定できますし、役割やスーパークラスに対する isa サブクラスも任意に設"
"定することができます。この仕組みにより、モックオブジェクトを容易に作成して実"
"際のオブジェクトであるかのように扱うことができます。\n"
"* メソッドスタブ\n"
"\n"
"モックオブジェクトでは任意のメソッドを呼び出すことができますが、それは呼び出"
"しとして記録されます。既定では、メソッド呼び出しはスカラーコンテキストの場合"
"は 'undef' を、リストコンテキストの場合は空のリストを返します。ただし多くの場"
"合において、クライアント側からはいくつかのパラメータを指定してメソッドを呼び"
"出したいはずです。そのため、メソッドスタブを指定してパラメータを返すようにし"
"ます。\n"
"* 対話の検証\n"
"\n"
"作成した具体的なコード (テスト対象のコード) を呼び出した後は、モック内でそれ"
"が正しく動作したことを確認する必要があります。これを実現するため、適切なパラ"
"メータおよび適切な回数の呼び出しでコードの検証を行なうことができます。\n"
"* パラメータマッチング\n"
"\n"
"Magpie では呼び出し内で渡されるパラメータを検証するための支援メソッドも用意さ"
"れています。パラメータ間の同一性のほか、パラメータの汎用型の消費や複数パラ"
"メータの消費などがそれにあたります。詳しくは Test::Magpie::ArgumentMatcher を"
"お読みください。"

#. tumbleweed/perl-Test-Metrics-Any/summary
msgid "Assert that code produces metrics via L<Metrics::Any>"
msgstr "コードが L<Metrics::Any> を介して生成されることの仮定"

#. tumbleweed/perl-Test-Metrics-Any/description
msgid ""
"This test module helps write unit tests which assert that the code under "
"test reports metrics via Metrics::Any.\n"
"\n"
"Loading this module automatically sets the Metrics::Any::Adapter type to "
"'Test'."
msgstr ""
"このテストモジュールは単体テストを作成する際の支援を行なうもので、コードが "
"Metrics::Any を介してメトリックを報告するテストに対応しています。\n"
"\n"
"このモジュールを読み込むと、 Metrics::Any::Adapter 型が自動的に 'Test' に設定"
"されます。"

#. tumbleweed/perl-Test-MockDateTime/summary
msgid "Mock Datetime->Now Calls During Tests"
msgstr "テスト時の Datetime->Now の擬似"

#. tumbleweed/perl-Test-MockDateTime/description
msgid ""
"Getting the current time sometimes is not very helpful for testing "
"scenarios. Instead, if you could obtain a known value during the runtime of "
"a testcase will make your results predictable.\n"
"\n"
"Why another Date Mocker? I wanted something simple with a very concise usage "
"pattern and a mocked date should only exist and stay constant inside a "
"scope. After leaving the scope the current time should be back. This lead to "
"this tiny module.\n"
"\n"
"This simple module allows faking a given date and time for the runtime of a "
"subsequent code block. By default the 'on' keyword is exported into the "
"namespace of the test file. The date to get mocked must be in a format that "
"is recognized by DateTime::Format::DateParse.\n"
"\n"
"    on '2013-01-02 03:04:05', sub { ... };\n"
"\n"
"is basically the same as\n"
"\n"
"    {         my $now = DateTime::Format::DateParse-"
">parse_datetime(             '2013-01-02 03:04:05'         );\n"
"\n"
"        local *DateTime::now = sub { $now->clone };\n"
"\n"
"        ... everything from code block above     }\n"
"\n"
"A drawback when relying on this module is that you must know that the module "
"you are testing uses 'DateTime->now' to obtain the current time. =cut"
msgstr ""
"現在時刻を取得する処理は、テストシナリオを作成する際には不便な仕組みです。テ"
"ストの実行時には特定の既知の時刻値を取得できるようにすれば、テスト結果がより"
"推測可能なものになるはずです。\n"
"\n"
"他の Date モックとの違いは使用方法の簡潔さで、擬似的な日付はテストのスコープ"
"内でのみ存在し、安定しているべきものである、という考え方を使用しています。こ"
"のスコープを外れると通常通りの日時を取得できるようになります。これにより、簡"
"易なモジュールになっています。\n"
"\n"
"このシンプルなモジュールは、指定したブロックの実行時に指定した日時に偽装する"
"だけの仕組みを提供します。既定では 'on' キーワードがテストファイルのネームス"
"ペースに公開され、 DateTime::Format::DateParse で認識可能な形式で日時を取得で"
"きるようにします。\n"
"\n"
"    on '2013-01-02 03:04:05', sub { ... };\n"
"\n"
"上記は下記と同じ動作になります:\n"
"\n"
"    {         my $now = DateTime::Format::DateParse-"
">parse_datetime(             '2013-01-02 03:04:05'         );\n"
"\n"
"        local *DateTime::now = sub { $now->clone };\n"
"\n"
"        ... everything from code block above     }\n"
"\n"
"このモジュールに依存することによる欠点は、テスト対象のモジュールが 'DateTime-"
">now' を利用して時刻を取得しているかどうかを知っておく必要がある、という点で"
"す。 =cut"

#. tumbleweed/perl-Test-Modern/summary
msgid "precision testing for modern perl"
msgstr "モダン Perl 向け精密性テスト"

#. tumbleweed/perl-Test-Modern/description
msgid ""
"Test::Modern provides the best features of the Test::More manpage, the Test::"
"Fatal manpage, the Test::Warnings manpage, the Test::API manpage, the Test::"
"LongString manpage, and the Test::Deep manpage, as well as ideas from the "
"Test::Requires manpage, the Test::DescribeMe manpage, the Test::Moose "
"manpage, and the Test::CleanNamespaces manpage.\n"
"\n"
"Test::Modern also automatically imposes the strict manpage and the warnings "
"manpage on your script, and loads the IO::File manpage. (Much of the same "
"stuff the Modern::Perl manpage does.)\n"
"\n"
"Although Test::Modern is a modern testing framework, it should run fine on "
"pre-modern versions of Perl. It should be easy to install on Perl 5.8.9 and "
"above; and if you can persuade its dependencies to install (not necessarily "
"easy!), should be OK on anything back to Perl 5.6.1."
msgstr ""
"Test::Modern は Test::More, Test::Fatal manpage, Test::Warnings, Test::API, "
"Test::LongString, Test::Deep の最良の機能を提供するもので、 Test::Requires, "
"Test::DescribeMe, Test::Moose, Test::CleanNamespaces などのアイディアも採用し"
"ています。\n"
"\n"
"Test::Modern はスクリプト内で strict や warnings の使用を自動的に課す仕組みに"
"なっているほか、 IO::File を自動的に読み込むようにもなっています (Modern::"
"Perl が行なうことと多くは同じです) 。\n"
"\n"
"Test::Modern はモダンなテストフレームワークですが、それ以前のバージョンの "
"Perl でも動作するはずです。 Perl 5.8.9 もしくはそれ以降であれば簡単にインス"
"トールできますし、依存関係を問題なくインストールできる (簡単である必要はあり"
"ません) 環境であれば、 Perl 5.6.1 での問題なく動作するはずです。"

#. tumbleweed/perl-Test-NoWarnings/description
msgid ""
"In general, your tests shouldn't produce warnings. This modules causes any "
"warnings to be captured and stored. It automatically adds an extra test that "
"will run when your script ends to check that there were no warnings. If "
"there were any warnings, the test will give a \"not ok\" and diagnostics of "
"where, when and what the warning was, including a stack trace of what was "
"going on when the it occurred.\n"
"\n"
"If some of your tests *are supposed to* produce warnings then you should be "
"capturing and checking them with Test::Warn, that way Test::NoWarnings will "
"not see them and so not complain.\n"
"\n"
"The test is run by an 'END' block in Test::NoWarnings. It will not be run "
"when any forked children exit."
msgstr ""
"一般的に、テストによって警告が生成されることはありません。このモジュールにより、すべての警告がキャプチャされ、保存されます。スクリプトが終了したときに警告"
"がないことを確認するために実行されるテストが、自動的に追加されます。警告が発生した場合、テストでは「not "
"ok」が表示され、警告が発生した場所、時間、内容を診断できます。これには、警告が発生したときに何が発生していたかを示すスタックトレースも含まれます。\n"
"\n"
"テストの中に警告を生成するものがある場合は、Test::Warnでキャプチャしてチェックする必要があります。Test::NoWarningsでは警告が表示"
"されないので、文句を言わないようにします。\n"
"\n"
"テストは、Test::NoWarningsの'END'ブロックによって実行されます。分岐した子が終了したときには実行されません。"

#. tumbleweed/perl-Test-TCP/summary
msgid "Testing TCP program"
msgstr "テスト用 TCP プログラム"

#. tumbleweed/perl-Test-Time/description
msgid ""
"Test::Time can be used to test modules that deal with time. Once you 'use' "
"this module, all references to 'time', 'localtime' and 'sleep' will be "
"internalized. You can set custom time by passing time => number after the "
"'use' statement:\n"
"\n"
"    use Test::Time time => 1;\n"
"\n"
"    my $now = time;    # $now is equal to 1     sleep 300;         # returns "
"immediately, displaying a note     my $then = time;   # $then equals to 301"
msgstr ""
"Test::Time は時刻を扱うモジュールをテストする際に使用します。 'use' でこのモ"
"ジュールを指定すると、 'time', 'localtime', 'sleep' に対する参照が内部化され"
"ます。なお、 'use' ステートメントに続いて time => (数値) のように指定すること"
"で、独自の時刻を設定することもできます:\n"
"\n"
"    use Test::Time time => 1;\n"
"\n"
"    my $now = time;    # $now は 1 になる\n"
"    sleep 300;         # 即時に処理が返る (ただし注記が表示される)\n"
"    my $then = time;   # $then は 301 になる"

#. tumbleweed/perl-Test-Warn/description
msgid ""
"A good style of Perl programming calls for a lot of diverse regression "
"tests.\n"
"\n"
"This module provides a few convenience methods for testing warning based-"
"code.\n"
"\n"
"If you are not already familiar with the Test::More manpage now would be the "
"time to go take a look."
msgstr ""
"Perl のプログラミングにおいて、良いスタイルとは多様な回帰 (リグレッション) テ"
"ストを実施することです。\n"
"\n"
"このモジュールは、警告ベースのコードに対していくつかの便利なメソッドを提供し"
"ます。\n"
"\n"
"Test::More について詳しく知らない場合は、まずそちらをお読みください。"

#. tumbleweed/perl-Test-YAML/description
msgid "Test::YAML is a subclass of Test::Base with YAML specific support."
msgstr ""
"Test::YAML は Test::Base のサブクラスで、 YAML 固有のサポートが追加されていま"
"す。"

#. tumbleweed/perl-Text-Aligner/summary
msgid "Module to align text"
msgstr "テキストを調整するモジュール"

#. tumbleweed/perl-Text-CSV/summary
msgid "Comma-separated values manipulator (using XS or PurePerl)"
msgstr "カンマ区切りの値を操作するルーチン (XS および PurePerl)"

#. tumbleweed/perl-Text-CSV_XS/summary
msgid "Comma-separated values manipulation routines"
msgstr "カンマ区切りの値 (CSV) を操作するルーチン"

#. tumbleweed/perl-Text-SimpleTable/summary
msgid "Simple Eyecandy ASCII Tables"
msgstr "簡単なEyecandy ASCIIテーブル"

#. tumbleweed/perl-Text-SimpleTable/description
msgid "Simple eyecandy ASCII tables."
msgstr "簡単なeyecandy ASCIIテーブル。"

#. tumbleweed/perl-Text-SimpleTable-AutoWidth/summary
msgid ""
"Text::SimpleTable::AutoWidth - Simple eyecandy ASCII tables with auto-wi[cut]"
msgstr ""
"Text::SimpleTable::AutoWidth-auto-wi[cut]を使用した単純なeyecandy ASCIIテーブ"
"ル"

#. tumbleweed/perl-Text-SimpleTable-AutoWidth/description
msgid ""
"Simple eyecandy ASCII tables with auto-selection columns width, as seen in "
"Catalyst."
msgstr ""
"Catalystで見られるように、自動選択列幅を持つ単純なEyecandy ASCIIテーブル。"

#. tumbleweed/perl-Tie-Handle-Offset/summary
msgid "Tied handle that hides the beginning of a file"
msgstr "ファイルの冒頭部を隠蔽する tie ハンドル"

#. tumbleweed/perl-Tie-Handle-Offset/description
msgid ""
"This modules provides a file handle that hides the beginning of a file. "
"After opening, the file is positioned at the offset location. 'seek()' and "
"'tell()' calls are modified to preserve the offset.\n"
"\n"
"For example, 'tell($fh)' will return 0, though the actual file position is "
"at the offset. Likewise, 'seek($fh,80,0)' will seek to 80 bytes from the "
"offset instead of 80 bytes from the actual start of the file."
msgstr ""
"このモジュールはファイルの冒頭部を隠蔽するファイルハンドルを提供します。ファ"
"イルを開くと、ファイルハンドルは指定した位置まで移動されます。 'seek()' や "
"'tell()' の呼び出しは、それぞれ指定した位置を隠蔽するように動作します。\n"
"\n"
"たとえば 'tell($fh)' が 0 を返した場合でも、実際のファイル位置はオフセット値"
"分だけズレています。同様に 'seek($fh,80,0)' を実行すると、通常はファイルの冒"
"頭部から 80 バイト目に移動しますが、このモジュールでは 80 バイトにオフセット"
"値を足した分だけの位置に移動します。"

#. tumbleweed/perl-Tk/summary
msgid "Graphical user interface toolkit for Perl"
msgstr "Perl 向けグラフィカルユーザインターフェイスツールキット"

#. tumbleweed/perl-Tk/description
msgid ""
"This a re-port of a perl interface to Tk8.4. C code is derived from Tcl/"
"Tk8.4.5. It also includes all the C code parts of Tix8.1.4 from SourceForge. "
"The perl code corresponding to Tix's Tcl code is not fully implemented.\n"
"\n"
"Perl API is essentially the same as Tk800 series Tk800.025 but has not been "
"verified as compliant. There ARE differences see pod/804delta.pod."
msgstr ""
"これはperlインタフェースをTk8.4に移植し直したものです。CコードはTcl/Tk8.4.5から派生しています。また、SourceForgeのTix8"
".1.4のCコード部分もすべて含まれています。TixのTclコードに対応するperlコードは完全には実装されていません。\n"
"\n"
"Perl APIは基本的にはTk800 シリーズ Tk800.025と同じですが、準拠していることは確認されていません。相違点があります。pod/"
"804delta.pod を参照してください。"

#. tumbleweed/perl-Tk-TableMatrix/summary
msgid "Table/Matrix Widget Extension to perl/tk"
msgstr "perl/tkへのテーブル/行列ウィジェット拡張"

#. tumbleweed/perl-Tk-TableMatrix/description
msgid ""
"Tk::TableMatrix is a table/matrix widget extension to perl/tk for displaying "
"data in a table (or spreadsheet) format."
msgstr ""
"Tk::TableMatrixはperl/tkを拡張したテーブル/行列ウィジェットで、データをテーブル(またはスプレッドシート)形式で表示します。"

#. tumbleweed/perl-Tk/perl-Tk-devel/summary
msgid "Development files for perl-Tk"
msgstr "perl-Tk 向け開発用ファイル"

#. tumbleweed/perl-Tk/perl-Tk-devel/description
msgid "Development files for Tk - a graphical user interface toolkit for Perl"
msgstr ""
"Tk - Perl 向けグラフィカルユーザインターフェイスツールキット向け開発用ファイ"
"ル"

#. tumbleweed/perl-Try-Tiny/description
msgid ""
"This module provides bare bones 'try'/'catch'/'finally' statements that are "
"designed to minimize common mistakes with eval blocks, and NOTHING else.\n"
"\n"
"This is unlike TryCatch which provides a nice syntax and avoids adding "
"another call stack layer, and supports calling 'return' from the 'try' block "
"to return from the parent subroutine. These extra features come at a cost of "
"a few dependencies, namely Devel::Declare and Scope::Upper which are "
"occasionally problematic, and the additional catch filtering uses Moose type "
"constraints which may not be desirable either.\n"
"\n"
"The main focus of this module is to provide simple and reliable error "
"handling for those having a hard time installing TryCatch, but who still "
"want to write correct 'eval' blocks without 5 lines of boilerplate each "
"time.\n"
"\n"
"It's designed to work as correctly as possible in light of the various "
"pathological edge cases (see BACKGROUND) and to be compatible with any style "
"of error values (simple strings, references, objects, overloaded objects, "
"etc).\n"
"\n"
"If the 'try' block dies, it returns the value of the last statement executed "
"in the 'catch' block, if there is one. Otherwise, it returns 'undef' in "
"scalar context or the empty list in list context. The following examples all "
"assign '\"bar\"' to '$x':\n"
"\n"
"  my $x = try { die \"foo\" } catch { \"bar\" };   my $x = try { die \"foo"
"\" } || \"bar\";   my $x = (try { die \"foo\" }) // \"bar\";\n"
"\n"
"  my $x = eval { die \"foo\" } || \"bar\";\n"
"\n"
"You can add 'finally' blocks, yielding the following:\n"
"\n"
"  my $x;   try { die 'foo' } finally { $x = 'bar' };   try { die 'foo' } "
"catch { warn \"Got a die: $_\" } finally { $x = 'bar' };\n"
"\n"
"'finally' blocks are always executed making them suitable for cleanup code "
"which cannot be handled using local. You can add as many 'finally' blocks to "
"a given 'try' block as you like.\n"
"\n"
"Note that adding a 'finally' block without a preceding 'catch' block "
"suppresses any errors. This behaviour is consistent with using a standalone "
"'eval', but it is not consistent with 'try'/'finally' patterns found in "
"other programming languages, such as Java, Python, Javascript or C#. If you "
"learned the 'try'/'finally' pattern from one of these languages, watch out "
"for this."
msgstr ""
"このモジュールは、evalブロックやNOTHINGでよくある間違いを最小限にするために設計された、最小限の「try」/「catch」/「finally」ス"
"テートメントを提供します。\n"
"\n"
"これは、優れた構文を提供し、別のコールスタック層を追加することを避け、'try'ブロックから'return'を呼び出して親サブルーチンから戻ることをサポー"
"トするTryCatchとは異なります。これらの追加機能は、Devel::DeclareとScope::Upperなど、いくつかの依存関係を犠牲にして提供さ"
"れます。これらは問題を引き起こすことがあり、追加のキャッチフィルタリングはMooseタイプの制約を使用しており、これも望ましくない可能性があります。\n"
"\n"
"このモジュールの主な焦点は、TryCatchのインストールに苦労しているが、それでも毎回5行の定型文なしで正しい'eval'ブロックを書きたいと思っている"
"人たちに、簡単で信頼性の高いエラー処理を提供することです。\n"
"\n"
"これは、様々な病的なエッジケース(BACKGROUNDを参照)に照らして可能な限り正確に動作し、あらゆる種類のエラー値(単純な文字列、参照、オブジェクト、"
"オーバーロードされたオブジェクトなど)と互換性があるように設計されています。\n"
"\n"
"'try'ブロックが終了した場合、'catch'ブロック内で最後に実行された文の値を返します。それ以外の場合は、スカラーコンテキストでは'undef'を返"
"し、リストコンテキストでは空のリストを返します。次の例では、すべて「bar」を「$x」に割り当てています。\n"
"\n"
"  my $x = try { die \"foo\" } catch { \"bar\" };   my $x = try { die \"foo\" "
"} || \"bar\";   my $x = (try { die \"foo\" }) // \"bar\";\n"
"\n"
"  my $x = eval { die \"foo\" } || \"bar\";\n"
"\n"
"You can add 'finally' blocks, yielding the following:\n"
"\n"
"  my $x;   try { die 'foo' } finally { $x = 'bar' };   try { die 'foo' } "
"catch { warn \"Got a die: $_\" } finally { $x = 'bar' };\n"
"\n"
"'finally'ブロックは常に実行され、ローカルを使用して処理できないクリーンアップコードに適しています。. "
"「finally」ブロックは、任意の「try」ブロックに好きなだけ追加できます。\n"
"\n"
"「catch」ブロックを前に付けずに「finally」ブロックを追加すると、エラーが抑制されることに注意してください。この動作はスタンドアロンの'eval"
"'を使用する場合と一貫しているが、Java、Python、Javascript、C#などの他のプログラミング言語で見られる'try'/'finally'パ"
"ターンとは一貫していません。これらの言語のいずれかから「try」/「finally」パターンを学んだ場合は、この点に注意してください。"

#. tumbleweed/perl-Twiggy/summary
msgid "AnyEvent HTTP server for PSGI"
msgstr "PSGI 向け AnyEvent HTTP サーバ"

#. tumbleweed/perl-Twiggy/description
msgid ""
"Twiggy is a lightweight and fast HTTP server with unique features such as: \n"
"* PSGI\n"
"\n"
"Can run any PSGI applications. Fully supports _psgi.nonblocking_ and _psgi."
"streaming_ interfaces. \n"
"* AnyEvent\n"
"\n"
"This server uses AnyEvent and runs in a non-blocking event loop, so it's "
"best to run event-driven web applications that runs I/O bound jobs or "
"delayed responses such as long-poll, WebSocket or streaming content (server "
"push).\n"
"\n"
"This software used to be called Plack::Server::AnyEvent but was renamed to "
"Twiggy. \n"
"* Fast header parser\n"
"\n"
"Uses XS/C based HTTP header parser for the best performance. (optional, "
"install the HTTP::Parser::XS module to enable it; see also Plack::HTTPParser "
"for more information). \n"
"* Lightweight and Fast\n"
"\n"
"The memory required to run twiggy is 6MB and it can serve more than 4500 req/"
"s with a single process on Perl 5.10 with MacBook Pro 13\" late 2009. \n"
"* Superdaemon aware\n"
"\n"
"Supports Server::Starter for hot deploy and graceful restarts.\n"
"\n"
"To use it, instead of the usual:\n"
"\n"
"    plackup --server Twiggy --port 8111 app.psgi\n"
"\n"
"install Server::Starter and use:\n"
"\n"
"    start_server --port 8111 -- plackup --server Twiggy app.psgi"
msgstr ""
"Twiggy は下記のようなユニークな機能を持つ軽量高速な HTTP サーバです:\n"
"* PSGI\n"
"\n"
"任意の PSGI アプリケーションを動作させることができます。 _psgi.nonblocking_ "
"と _psgi.streaming_ の両方のインターフェイスに完全対応しています。\n"
"* AnyEvent\n"
"\n"
"このサーバは AnyEvent を利用していて、非ブロッキングなイベントループ内で動作"
"しています。そのため、 I/O の重いジョブを動作させたり、長時間ポーリングなどで"
"遅延応答をしたり、 WebSocket や (サーバプッシュ型の) ストリーミングコンテンツ"
"を流すようなイベントドリブンな Web アプリケーションに最適です。\n"
"\n"
"このソフトウエアは Plack::Server::AnyEvent と呼ばれていましたが、これは後か"
"ら Twiggy に名前変更されました。\n"
"* 高速なヘッダパーサ\n"
"\n"
"XS/C ベースの HTTP ヘッダパーサが含まれていますので、最高の性能を発揮すること"
"ができます (ただし使用は任意で、 HTTP::Parser::XS モジュールをインストールし"
"ておく必要があります。詳しくは Plack::HTTPParser をお読みください) 。\n"
"* 軽量で高速\n"
"\n"
"Twiggy を動作させるのに必要なメモリは 6MB だけで、 MacBook Pro 13\" late "
"2009 の環境で Perl 5.10 を利用している場合、 1 プロセスで 4500 リクエスト毎秒"
"を処理することができます。\n"
"* スーパーデーモン対応\n"
"\n"
"Server::Starter に対応し、ホットデプロイやリクエスト終了後再起動に対応してい"
"ます。\n"
"\n"
"このモジュールを使用するには:\n"
"\n"
"    plackup --server Twiggy --port 8111 app.psgi\n"
"\n"
"の代わりに Server::Starter をインストールして、下記のように実行します:\n"
"\n"
"    start_server --port 8111 -- plackup --server Twiggy app.psgi"

#. tumbleweed/perl-Type-Tiny/summary
msgid "Tiny, yet Moo(se)-compatible type constraint"
msgstr "簡易だが Moo(se) との互換性のある型制約"

#. tumbleweed/perl-Type-Tiny/description
msgid ""
"This documents the internals of the Type::Tiny class. Type::Tiny::Manual is "
"a better starting place if you're new.\n"
"\n"
"Type::Tiny is a small class for creating Moose-like type constraint objects "
"which are compatible with Moo, Moose and Mouse."
msgstr ""
"この文書は Type::Tiny クラスの内部を示しています。新しくお使いになる場合は、 "
"Type::Tiny::Manual をお使いになることをお勧めします。\n"
"\n"
"Type::Tiny は Moose のような型制約を作成するための小さなクラスで、 Moo, "
"Moose, Mouse などと互換性があります。"

#. tumbleweed/perl-Types-Path-Tiny/summary
msgid "Path::Tiny types and coercions for Moose and Moo"
msgstr "MooseとMooのPath::Tinyタイプと強制"

#. tumbleweed/perl-Types-Path-Tiny/description
msgid ""
"This module provides Path::Tiny types for Moose, Moo, etc.\n"
"\n"
"It handles two important types of coercion:\n"
"\n"
"  * coercing objects with overloaded stringification\n"
"\n"
"  * coercing to absolute paths\n"
"\n"
"It also can check to ensure that files or directories exist."
msgstr ""
"このモジュールは、 Moose 、Moo などに対して Path::Tiny の型を提供するものです。\n"
"\n"
"このモジュールは、下記 2 つの重要な強制型を処理します:\n"
"\n"
"* オブジェクトに対するオーバーロードされた署名の強制\n"
"\n"
"* 絶対パスに対する強制\n"
"\n"
"また、ファイルやディレクトリが存在しているかどうかをチェックすることもできます。"

#. tumbleweed/perl-UNIVERSAL-ref/summary
msgid "Turns ref() into a multimethod"
msgstr "ref() のマルチメソッド対応"

#. tumbleweed/perl-UNIVERSAL-ref/description
msgid ""
"This module changes the behavior of the builtin function ref(). If ref() is "
"called on an object that has requested an overloaded ref, the object's '-"
">ref' method will be called and its return value used instead."
msgstr ""
"このモジュールは内蔵関数である ref() の動作を変更するためのものです。 ref() "
"がオーバーロードされた ref を持つオブジェクトに対して呼び出された場合、オブ"
"ジェクトの '->ref' メソッドを呼び出して、その返り値を使用するようにします。"

#. tumbleweed/perl-URI-Query/summary
msgid "Class providing URI query string manipulation"
msgstr "URI 問い合わせ文字列を提供するクラス"

#. tumbleweed/perl-URI-Query/description
msgid ""
"URI::Query provides simple URI query string manipulation, allowing you to "
"create and manipulate URI query strings from GET and POST requests in web "
"applications. This is primarily useful for creating links where you wish to "
"preserve some subset of the parameters to the current request, and "
"potentially add or replace others. Given a query string this is doable with "
"regexes, of course, but making sure you get the anchoring and escaping right "
"is tedious and error-prone - this module is simpler."
msgstr ""
"URI::Queryは単純なURIクエリー文字列操作を提供し、WebアプリケーションのGETおよ"
"びPOST要求からURIクエリー文字列を作成および操作できるようにします。これは主"
"に、現在の要求に対してパラメータの一部のサブセットを保持し、場合によっては他"
"のパラメータを追加または置換するリンクを作成する場合に役立ちます。クエリー文"
"字列が与えられれば、これは正規表現を使って行うことができますが、アンカーとエ"
"スケープが正しく行われるようにするのは面倒でエラーが発生しやすく、このモ"
"ジュールの方が簡単です。"

#. tumbleweed/perl-URI-cpan/summary
#. tumbleweed/perl-URI-cpan/description
msgid "URLs that refer to things on the CPAN"
msgstr "CPAN上のものを参照するURL"

#. tumbleweed/perl-URI-ws/summary
msgid "WebSocket support for URI package"
msgstr "URI パッケージの WebSocket サポート"

#. tumbleweed/perl-URI-ws/description
msgid ""
"After this module is installed, the URI package provides the same set of "
"methods for WebSocket URIs as it does for HTTP ones. For secure WebSockets, "
"see URI::wss."
msgstr ""
"このモジュールをインストールすると、 URI パッケージは HTTP で提供されるメソッ"
"ドと同じものを WebSocket に対して実施できるようになります。 WebSocket の SSL "
"暗号化版については、 URI::wss をご覧ください。"

#. tumbleweed/perl-UUID/summary
msgid "DCE compatible Universally Unique Identifier library for Perl"
msgstr "DCE 互換の Perl 向け Universally Unique Identifier (UUID) ライブラリ"

#. tumbleweed/perl-UUID/description
msgid ""
"The UUID library is used to generate unique identifiers for objects that may "
"be accessible beyond the local system. For instance, they could be used to "
"generate unique HTTP cookies across multiple web servers without "
"communication between the servers, and without fear of a name clash.\n"
"\n"
"The generated UUIDs can be reasonably expected to be unique within a system, "
"and unique across all systems, and are compatible with those created by the "
"Open Software Foundation (OSF) Distributed Computing Environment (DCE) "
"utility uuidgen."
msgstr ""
"UUID ライブラリはオブジェクトに対する唯一の識別番号を生成するための仕組みで、"
"ローカルシステム内だけでなくさまざまなシステムにまたがって使用することができ"
"ます。たとえば HTTP の Cookie 生成では、識別番号の衝突を防ぎながら、かつサー"
"バ間の通信を行なうことなく、複数の Web サーバにまたがった識別子を生成していま"
"す。\n"
"\n"
"生成された UUID はシステム内でもシステム外でもそれなりの唯一性が期待されま"
"す。また、 Open Software Foundation (OSF) Distributed Computing Environment "
"(DCE) が提供する uuidgen ユーティリティが生成する値とも互換性があります。"

#. tumbleweed/perl-Unicode-EastAsianWidth/summary
msgid "East Asian Width properties"
msgstr "東アジアの文字幅ライブラリ"

#. tumbleweed/perl-Unicode-EastAsianWidth/description
msgid ""
"This module provide user-defined Unicode properties that deal with width "
"status of East Asian characters, as specified in http://www.unicode.org/"
"unicode/reports/tr11/.\n"
"\n"
"It exports the following functions to the caller's scope, to be used by "
"Perl's Unicode matching system: 'InEastAsianFullwidth', "
"'InEastAsianHalfwidth', 'InEastAsianAmbiguous', 'InEastAsianNarrow' "
"'InEastAsianWide', 'InEastAsianNeutral'.\n"
"\n"
"In accord to TR11 cited above, two additional context-sensitive properties "
"are exported: 'InFullwidth' (union of 'Fullwidth' and 'Wide') and "
"'InHalfwidth' (union of 'Halfwidth', 'Narrow' and 'Neutral').\n"
"\n"
"_Ambiguous_ characters are treated by default as part of 'InHalfwidth', but "
"you can modify this behaviour by assigning a true value to '$Unicode::"
"EastAsianWidth::EastAsian' at compile time within a 'BEGIN' block before "
"loading this module:\n"
"\n"
"    BEGIN { $Unicode::EastAsianWidth::EastAsian = 1; }     use Unicode::"
"EastAsianWidth;\n"
"\n"
"Setting '$Unicode::EastAsianWidth::EastAsian' at run-time used to work on "
"Perl versions between 5.8 and 5.14 due to an implementation detail, but it "
"will no longer work on Perl 5.16 and later versions, and hence is not "
"recommended."
msgstr ""
"このモジュールはユーザ指定の Unicode プロパティを提供するもので、東アジアのも"
"じを扱う際に使用するものです。仕様は http://www.unicode.org/unicode/reports/"
"tr11/ に書かれています。\n"
"\n"
"呼び出し側のスコープに対して、下記のような関数を公開して Perl の Unicode マッ"
"チングシステムで使用することができます: 'InEastAsianFullwidth', "
"'InEastAsianHalfwidth', 'InEastAsianAmbiguous', 'InEastAsianNarrow' "
"'InEastAsianWide', 'InEastAsianNeutral'\n"
"\n"
"上記の TR11 に従って、 2 種類の状況依存のプロパティが追加で公開されます: "
"'InFullwidth' ('Fullwidth' と 'Wide' の合成) および "
"'InHalfwidth' ('Halfwidth', 'Narrow', 'Neutral' の合成)\n"
"\n"
"_曖昧な_ 文字は、既定では 'InHalfwidth' として扱われますが、このモジュールの"
"使用を始める前のコンパイル時に、 '$Unicode::EastAsianWidth::EastAsian' の値"
"を true にすることで、動作を変更することができます:\n"
"\n"
"    BEGIN { $Unicode::EastAsianWidth::EastAsian = 1; }     use Unicode::"
"EastAsianWidth;\n"
"\n"
"実行時に '$Unicode::EastAsianWidth::EastAsian' を設定しても、 Perl 5.8 から "
"5.14 までの間であれば問題なく動作しますが、 Perl 5.16 およびそれ以降のバー"
"ジョンでは動作しなくなるものと思われます。そのため非推奨です。"

#. tumbleweed/perl-Unicode-Normalize/description
msgid ""
"Parameters:\n"
"\n"
"'$string' is used as a string under character semantics (see perlunicode).\n"
"\n"
"'$code_point' should be an unsigned integer representing a Unicode code "
"point.\n"
"\n"
"Note: Between XSUB and pure Perl, there is an incompatibility about the "
"interpretation of '$code_point' as a decimal number. XSUB converts "
"'$code_point' to an unsigned integer, but pure Perl does not. Do not use a "
"floating point nor a negative sign in '$code_point'."
msgstr ""
"バラメータ:\n"
"\n"
"'$string' は文字セマンティクスで扱われる文字列です (詳しくは perlunicode をお"
"読みください) 。\n"
"\n"
"'$code_point' は Unicode コードポイントを表わす符号無し整数です。\n"
"\n"
"注意: XSUB と純粋 Perl の間では、 '$code_point' を 10 進数の数値として解釈す"
"る際の非互換性が存在しています。 XSUB では '$code_point' を符号無し整数に変換"
"しますが、純粋 Perl ではそれを行ないません。 '$code_point' には小数点、もしく"
"は負の数値を入れてはなりません。"

#. tumbleweed/perl-User-Identity/summary
msgid "Maintain info about a physical person"
msgstr "物理的な人間に関する情報の管理"

#. tumbleweed/perl-User-Identity/description
msgid ""
"The 'User-Identity' distribution is created to maintain a set of "
"informational objects which are related to one user. The 'User::Identity' "
"module tries to be smart providing defaults, conversions and often required "
"combinations.\n"
"\n"
"The identities are not implementing any kind of storage, and can therefore "
"be created by any simple or complex Perl program. This way, it is more "
"flexible than an XML file to store the data. For instance, you can decide to "
"store the data with Data::Dumper, Storable, DBI, AddressBook or whatever. "
"Extension to simplify this task are still to be developed.\n"
"\n"
"If you need more kinds of user information, then please contact the module "
"author.\n"
"\n"
"Extends \"DESCRIPTION\" in User::Identity::Item."
msgstr ""
"'User-Identity' の配布物では、特定の 1 人のユーザに対する情報オブジェクト集を"
"管理ことができます。 'User::Identity' モジュールでは、既定値や変換、多くの場"
"合において必要な組み合わせを利用して、スマートに解決しようとしています。\n"
"\n"
"このモジュールでは記憶領域に関する実装は行なっていませんので、必要であれば簡"
"単もしくは複雑な Perl プログラムで作成する必要があります。この方法により、 "
"XML ファイルでデータを保存するのに比べて、より柔軟な仕組みになっています。た"
"とえば Data::Dumper, Storable, DBI, AddressBook など、さまざまなデータ保存形"
"式が考えられます。この処理に対する拡張も現在開発予定です。\n"
"\n"
"より多くのユーザ情報が必要である場合は、モジュールの作者に問い合わせてくださ"
"い。\n"
"\n"
"User::Identity::Item 内では \"DESCRIPTION\" の拡張を行なっています。"

#. tumbleweed/perl-WWW-Mechanize/description
msgid ""
"'WWW::Mechanize', or Mech for short, is a Perl module for stateful "
"programmatic web browsing, used for automating interaction with websites.\n"
"\n"
"Features include: \n"
"* All HTTP methods\n"
"* High-level hyperlink and HTML form support, without having to parse   HTML "
"yourself\n"
"* SSL support\n"
"* Automatic cookies\n"
"* Custom HTTP headers\n"
"* Automatic handling of redirections\n"
"* Proxies\n"
"* HTTP authentication\n"
"\n"
"Mech is well suited for use in testing web applications. If you use one of "
"the Test::*, like Test::HTML::Lint modules, you can check the fetched "
"content and use that as input to a test call."
msgstr ""
"'WWW::Mechanize' は Mech とも略されますが、状態遷移機能のある Web サイトに対"
"して、ユーザに成り代わって自動処理を行なう機能を提供します。\n"
"\n"
"主な機能:\n"
"* 全ての HTTP メソッドに対応\n"
"* 高レベルなハイパーリンク機能や HTML フォームへの対応。独自に HTML を解釈す"
"る必要はありません\n"
"* SSL に対応\n"
"* 自動 Cookie\n"
"* 独自の HTTP ヘッダに対応\n"
"* 転送の自動処理\n"
"* プロキシ\n"
"* HTTP 認証\n"
"\n"
"Mech は Web アプリケーションのテストに最適です。 Test::HTML::Lint モジュール"
"など、 Test::* モジュールを使用している場合は、取得済みのコンテンツに対してテ"
"ストを実施したり、テストコールの入力として使用したりすることができます。"

#. tumbleweed/perl-Web-Scraper/summary
msgid "Web Scraping Toolkit using HTML and CSS Selectors or XPath expressions"
msgstr "HTMLセレクタとCSSセレクタ、またはXPath式を使用したWeb Scraping ツールキット"

#. tumbleweed/perl-Web-Scraper/description
msgid ""
"Web::Scraper is a web scraper toolkit, inspired by Ruby's equivalent Scrapi. "
"It provides a DSL-ish interface for traversing HTML documents and returning "
"a neatly arranged Perl data structure.\n"
"\n"
"The _scraper_ and _process_ blocks provide a method to define what segments "
"of a document to extract. It understands HTML and CSS Selectors as well as "
"XPath expressions."
msgstr ""
"Web::ScraperはWebスクレイパーツールキットで、RubyのScrapiにインスパイアされています。HTML文書をトラバースし、きちんと整理され"
"たPerlデータ構造を返すための、DSL風のインターフェースを提供します。\n"
"\n"
"_scraper_ブロックと_process_ブロックは、ドキュメントのどのセグメントを抽出するかを定義するメソッドを提供します。HTMLセレクターとCS"
"Sセレクター、そしてXPath式を理解します。"

#. tumbleweed/perl-XML-Feed/summary
msgid "Syndication feed parser and auto-discovery"
msgstr "シンジケーションフィードパーサ／自動検出"

#. tumbleweed/perl-XML-Feed/description
msgid ""
"_XML::Feed_ is a syndication feed parser for both RSS and Atom feeds. It "
"also implements feed auto-discovery for finding feeds, given a URI.\n"
"\n"
"_XML::Feed_ supports the following syndication feed formats: \n"
"* * RSS 0.91 \n"
"* * RSS 1.0 \n"
"* * RSS 2.0 \n"
"* * Atom\n"
"\n"
"The goal of _XML::Feed_ is to provide a unified API for parsing and using "
"the various syndication formats. The different flavors of RSS and Atom "
"handle data in different ways: date handling; summaries and content; "
"escaping and quoting; etc. This module attempts to remove those differences "
"by providing a wrapper around the formats and the classes implementing those "
"formats (XML::RSS and XML::Atom::Feed). For example, dates are handled "
"differently in each of the above formats. To provide a unified API for date "
"handling, _XML::Feed_ converts all date formats transparently into DateTime "
"objects, which it then returns to the caller."
msgstr ""
"_XML::Feed_ は RSS と Atom のフィードに対応したシンジケーションフィードフェッ"
"チャです。指定した URI からフィードを自動検出することもできます。\n"
"\n"
"_XML::Feed_ は下記のシンジケーションフィード形式に対応しています:\n"
"* * RSS 0.91 \n"
"* * RSS 1.0 \n"
"* * RSS 2.0 \n"
"* * Atom\n"
"\n"
"_XML::Feed_ の目的は、様々なシンジケーション形式に対して統一された API を提供"
"することにあります。 RSS や Atom の形式によっては、データ (日付処理、概要や内"
"容の処理、エスケープやクォートなど) の取り扱い方が異なりますが、このモジュー"
"ルはそれらの違いをラッパーで吸収して解決しています (XML::RSS および XML::"
"Atom::Feed) 。たとえば上述の形式でそれぞれ異なる日付処理を実装しています。日"
"付処理に際して統一された API を提供するため、 _XML::Feed_ では全ての日付書式"
"を DateTime オブジェクトに変換して呼び出し元に返却します。"

#. tumbleweed/perl-XML-Parser/summary
msgid "Perl module for parsing XML documents"
msgstr "XML ドキュメントを解釈するための Perl モジュール"

#. tumbleweed/perl-XML-Parser/description
msgid ""
"This module provides ways to parse XML documents. It is built on top of XML::"
"Parser::Expat, which is a lower level interface to James Clark's expat "
"library. Each call to one of the parsing methods creates a new instance of "
"XML::Parser::Expat which is then used to parse the document. Expat options "
"may be provided when the XML::Parser object is created. These options are "
"then passed on to the Expat object on each parse call. They can also be "
"given as extra arguments to the parse methods, in which case they override "
"options given at XML::Parser creation time.\n"
"\n"
"The behavior of the parser is controlled either by 'STYLES' and/or "
"'HANDLERS' options, or by setHandlers method. These all provide mechanisms "
"for XML::Parser to set the handlers needed by XML::Parser::Expat. If neither "
"'Style' nor 'Handlers' are specified, then parsing just checks the document "
"for being well-formed.\n"
"\n"
"When underlying handlers get called, they receive as their first parameter "
"the _Expat_ object, not the Parser object."
msgstr ""
"このモジュールは XML ドキュメントを処理する手段を提供しています。 XML::"
"Parser::Expat と呼ばれる James Clark 氏が開発したexpat ライブラリをベースに作"
"成されています。 XML の解析メソッドのうちのいずれかを呼び出すと XML::Parser::"
"Expat に対する新しいインスタンスが作成され、そこからドキュメントの解析が始ま"
"ります。 expat オプションは XML::Parser オブジェクトが作成された際に設定でき"
"るようになります。これらのオプションは各解析処理の呼び出しの際に、 expat オブ"
"ジェクトに渡されます。オプションは解析メソッドのパラメータとして渡すこともで"
"き、この際に渡したパラメータは XML::Parser のインスタンスを作成した際に指定し"
"たオプションを上書きします。\n"
"\n"
"解析処理の振る舞いは、それぞれ \"スタイル\" や \"ハンドラ\" と呼ばれるオプ"
"ションで制御することができるほか、 \"setHandlers\"メソッドでも制御することが"
"できます。これらすべては XML::Parser に対してメカニズムを提供するもので、 "
"XML::Parser::Expat が必要とするハンドラを設定するためのものです。スタイルやハ"
"ンドラを何も指定しない場合は、ドキュメントが正しい形式になっているかどうかを"
"単純にチェックするだけの動作をします。\n"
"\n"
"設定したハンドラが呼び出されると、ハンドラ側では最初のパラメータとして "
"Parser のオブジェクトではなく、expat のオブジェクトを受け取ります。"

#. tumbleweed/perl-XML-RSS/summary
msgid "Creates and updates RSS files"
msgstr "RSS ファイルの作成と更新"

#. tumbleweed/perl-XML-RSS/description
msgid ""
"This module provides a basic framework for creating and maintaining RDF Site "
"Summary (RSS) files. This distribution also contains many examples that "
"allow you to generate HTML from an RSS, convert between 0.9, 0.91, 1.0, and "
"2.0 version, and other nifty things. This might be helpful if you want to "
"include news feeds on your Web site from sources like Slashdot and Freshmeat "
"or if you want to syndicate your own content.\n"
"\n"
"XML::RSS currently supports versions at http://www.rssboard.org/rss-0-9-0, "
"at http://www.rssboard.org/rss-0-9-1, at http://web.resource.org/rss/1.0/, "
"and at http://www.rssboard.org/rss-2-0 of RSS.\n"
"\n"
"RSS was originally developed by Netscape as the format for Netscape "
"Netcenter channels, however, many Web sites have since adopted it as a "
"simple syndication format. With the advent of RSS 1.0, users are now able to "
"syndication many different kinds of content including news headlines, "
"threaded messages, products catalogs, etc. \n"
"*Note:* In order to parse and generate dates (such as 'pubDate' and 'dc:"
"date') it is recommended to use DateTime::Format::Mail and DateTime::Format::"
"W3CDTF , which is what XML::RSS uses internally and requires. It should also "
"be possible to pass DateTime objects which will be formatted accordingly. E."
"g:\n"
"\n"
"    use DateTime ();\n"
"\n"
"    my $dt = DateTime->from_epoch(epoch => 1_500_000_000);\n"
"\n"
"    $rss->channel(         pubDate => "
"$dt,         .         .         .     );"
msgstr ""
"このモジュールは RDF Site Summary (RSS) ファイルを作成したり管理したりするた"
"めの基本的なフレームワークを提供します。この配布物には多数のサンプルが用意さ"
"れていて、 RSS から HTML を生成したり、バージョン 0.9, 0.91, 1.0, 2.0 間の変"
"換を行なったりなど、様々なことを行なうことができます。また Slashdot や "
"Freshmeat などの情報を元に Web サイト内のニュースフィードを作成したり、独自の"
"コンテンツを配布したりすることもできます。\n"
"\n"
"XML::RSS では http://www.rssboard.org/rss-0-9-0, http://www.rssboard.org/"
"rss-0-9-1, http://web.resource.org/rss/1.0/, http://www.rssboard.org/"
"rss-2-0  にある RSS バージョンにそれぞれ対応しています。\n"
"\n"
"RSS はもともと Netscape 社が開発したもので、 Netscape Netcenter チャンネルで"
"使用されていたものでした。しかしながら、多数の Web サイトがそのシンプルな形式"
"に対応するようになりました。 RSS 1.0 の登場により、ユーザ側でもニュースヘッド"
"ラインやスレッド型メッセージ、製品カタログなど様々な用途に使用できるようにな"
"りました。\n"
"*注意:* 日時 ('pubDate', 'dc:date' など) を処理したり生成したりする目的で"
"は、 DateTime::Format::Mail や DateTime::Format::W3CDTF を使用することをお勧"
"めします。 これらは XML::RSS が内部的に使用し必要としているものでもあります。"
"もちろん DateTime オブジェクトを使用することもできます。例:\n"
"\n"
"    use DateTime ();\n"
"\n"
"    my $dt = DateTime->from_epoch(epoch => 1_500_000_000);\n"
"\n"
"    $rss->channel(         pubDate => "
"$dt,         .         .         .     );"

#. tumbleweed/perl-XML-SAX/summary
msgid "Simple API for XML"
msgstr "XML 向けシンプル API"

#. tumbleweed/perl-XML-SAX/description
msgid ""
"XML::SAX is a SAX parser access API for Perl. It includes classes and APIs "
"required for implementing SAX drivers, along with a factory class for "
"returning any SAX parser installed on the user's system."
msgstr ""
"XML::SAX は Perl 向けの SAX パーサーアクセス API です。 SAX ドライバで実装さ"
"れているクラスと API が含まれていて、ユーザ側のシステムにインストールされてい"
"る任意の SAX パーサを選択するためのファクトリクラスにも対応しています。"

#. tumbleweed/perl-XML-SAX-Expat/description
msgid ""
"This is an implementation of a SAX2 driver sitting on top of Expat (XML::"
"Parser) which Ken MacLeod posted to perl-xml and which I have updated.\n"
"\n"
"It is still incomplete, though most of the basic SAX2 events should be "
"available. The SAX2 spec is currently available from http://perl-xml."
"sourceforge.net/perl-sax/.\n"
"\n"
"A more friendly URL as well as a PODification of the spec are in the works."
msgstr ""
"このモジュールは Expat (XML::Parser) 上で動作する SAX2 ドライバの実装で、 "
"Ken MacLeod が perl-xml に投稿し、その後更新されたモジュールです。\n"
"\n"
"このモジュールは今もなお不完全なものでありますが、 SAX2 の基本イベントについ"
"ては利用可能な状態にあります。 SAX2 の仕様は現在、 http://perl-xml."
"sourceforge.net/perl-sax/ のマニュアルページにあります。\n"
"\n"
"よりわかりやすい URL と仕様の POD 文書は、現在準備中です。"

#. tumbleweed/perl-XS-Parse-Keyword/summary
msgid "XS functions to assist in parsing keyword syntax"
msgstr "キーワード構文の解析を支援するXS関数"

#. tumbleweed/perl-XS-Parse-Keyword/description
msgid ""
"This module provides some XS functions to assist in writing syntax modules "
"that provide new perl-visible syntax, primarily for authors of keyword "
"plugins using the 'PL_keyword_plugin' hook mechanism. It is unlikely to be "
"of much use to anyone else; and highly unlikely to be any use when writing "
"perl code using these. Unless you are writing a keyword plugin using XS, "
"this module is not for you.\n"
"\n"
"This module is also currently experimental, and the design is still evolving "
"and subject to change. Later versions may break ABI compatibility, requiring "
"changes or at least a rebuild of any module that depends on it."
msgstr ""
"このモジュールは、主に'PL_keyword_plugin'フックメカニズムを使用するキーワードプラグインの作成者のために、新しいperl-visible"
"構文を提供する構文モジュールの作成を支援するいくつかのXS関数を提供します。他の誰にとってもあまり役に立つことはなさそうですし、これらを使ってperlコー"
"ドを書くときに役に立つこともなさそうです。XSを使ってキーワード・プラグインを作成しているのでなければ、このモジュールはあなたに向いていません。\n"
"\n"
"このモジュールも現在実験中であり、設計は進化中であり、変更される可能性があります。それ以降のバージョンでは、ABIとの互換性が失われる可能性があり、それに"
"依存するモジュールを変更するか、少なくとも再構築する必要があります。"

#. tumbleweed/perl-XString/summary
msgid "Isolated String helpers from B"
msgstr "B から独立した文字列ヘルパー"

#. tumbleweed/perl-XString/description
msgid ""
"XString provides the B string helpers in one isolated package. Right now "
"only cstring and perlstring are available."
msgstr ""
"XString は 1 つの独立したパッケージ内に B 文字列ヘルパーを提供しています。現"
"時点では cstring と perlstring のみ提供されています。"

#. tumbleweed/perl-YAML-LibYAML-API/summary
msgid "Wrapper around the C libyaml library"
msgstr "C libyaml ライブラリに対するラッパー"

#. tumbleweed/perl-YAML-LibYAML-API/description
msgid ""
"This module provides a thin wrapper around the C libyaml API.\n"
"\n"
"Currently it provides functions for parsing and emitting events.\n"
"\n"
"libyaml also provides a loader/dumper API to load/dump YAML into a list of "
"nodes. There's no wrapper for these functions yet.\n"
"\n"
"This is just one of the first releases. The function names will eventually "
"be changed.\n"
"\n"
"The sources of 'libyaml-dev' are included in this distribution. You can "
"build this module with the system libyaml instead, if you remove the libyaml "
"sources and call 'Makefile.PL' with 'WITH_SYSTEM_LIBYAML=1'."
msgstr ""
"このモジュールは C libyaml API に対する薄いラッパー機能を提供します。\n"
"\n"
"現時点では、イベントの処理や発信を行なうための関数が提供されています。\n"
"\n"
"libyaml では YAML をノードリストとして読み込んだりダンプしたりする機能が提供"
"されていますが、これらの機能に対するラッパーはありません。\n"
"\n"
"これは最初のリリースのうちの 1 つです。今後関数名が変更されることもありま"
"す。\n"
"\n"
"この配布物内に 'libyaml-dev' のソースコードが含まれていますが、システムの "
"libyaml を代わりに使用してこのモジュールを構築することもできます。この場合は "
"libyaml のソースコードを削除して 'WITH_SYSTEM_LIBYAML=1' を指定して "
"'Makefile.PL' を実行してください。"

#. tumbleweed/perl-YAML-PP-LibYAML/summary
msgid "Faster parsing for YAML::PP"
msgstr "YAML::PP 向けの高速処理"

#. tumbleweed/perl-YAML-PP-LibYAML/description
msgid ""
"YAML::PP::LibYAML is a subclass of YAML::PP. Instead of using YAML::PP::"
"Parser as a the backend parser, it uses YAML::PP::LibYAML::Parser which "
"calls YAML::LibYAML::API, an XS wrapper around the 'C libyaml'."
msgstr ""
"YAML::PP::LibYAML は YAML::PP のサブクラスです。 YAML::PP::Parser をバックエ"
"ンドパーサとして使用する代わりに YAML::PP::LibYAML::Parser を使用して、ここか"
"ら YAML::LibYAML::API ('C libyaml' に対する XS ラッパー) を呼び出しています。"

#. tumbleweed/perl-YAML-Syck/summary
msgid "Perl YAML loader and dumper"
msgstr "Perl YAML ローダ／ダンパ"

#. tumbleweed/perl-common-sense/summary
msgid "Save a tree AND a kitten, use common::sense!"
msgstr "木と子猫を救うためのツール Common::Sense!"

#. tumbleweed/perl-common-sense/description
msgid ""
"   “Nothing is more fairly distributed than common sense: no one thinks    "
"he needs more of it than he already has.”\n"
"\n"
"   – René Descartes\n"
"\n"
"This module implements some sane defaults for Perl programs, as defined by "
"two typical (or not so typical - use your common sense) specimens of Perl "
"coders. In fact, after working out details on which warnings and strict "
"modes to enable and make fatal, we found that we (and our code written so "
"far, and others) fully agree on every option, even though we never used "
"warnings before, so it seems this module indeed reflects a \"common\" sense "
"among some long-time Perl coders.\n"
"\n"
"The basic philosophy behind the choices made in common::sense can be "
"summarised as: \"enforcing strict policies to catch as many bugs as "
"possible, while at the same time, not limiting the expressive power "
"available to the programmer\".\n"
"\n"
"Two typical examples of how this philosophy is applied in practise is the "
"handling of uninitialised and malloc warnings: \n"
"* _uninitialised_\n"
"\n"
"'undef' is a well-defined feature of perl, and enabling warnings for using "
"it rarely catches any bugs, but considerably limits you in what you can do, "
"so uninitialised warnings are disabled. \n"
"* _malloc_\n"
"\n"
"Freeing something twice on the C level is a serious bug, usually causing "
"memory corruption. It often leads to side effects much later in the program "
"and there are no advantages to not reporting this, so malloc warnings are "
"fatal by default.\n"
"\n"
"Unfortunately, there is no fine-grained warning control in perl, so often "
"whole groups of useful warnings had to be excluded because of a single "
"useless warning (for example, perl puts an arbitrary limit on the length of "
"text you can match with some regexes before emitting a warning, making the "
"whole 'regexp' category useless).\n"
"\n"
"What follows is a more thorough discussion of what this module does, and why "
"it does it, and what the advantages (and disadvantages) of this approach are."
msgstr ""
"   \"分別ほど人々の間に平等に分け与えられているものはない。というのも、誰でも"
"みんな、自分には分別が十分に備わっていると思っているからだ。\" \n"
"\n"
"   - ルネ・デカルト\n"
"\n"
"このモジュールは、 2 つの典型的 (かどうかはあなたの判断です) な Perl プログラ"
"ムの見本として、真っ当な既定値を実装しています。事実、生成された警告や制約"
"モードを致命的エラーとして扱うことで、我々 (と作成するコード) は各メッセージ"
"による対応を促される結果となります。これは今まで警告として扱ってこなかったも"
"のであっても、それは長期間にわたる Perl のコーダによる \"分別\" に照らしあわ"
"せることで、悪い箇所を指摘することになるためです。\n"
"\n"
"common::sense モジュールで選定された基本的な哲学は、 \"できるかぎり多数のバグ"
"を捕まえるための制約ポリシーを強制しながら、同時にプログラマに備わった表現力"
"を邪魔しないこと\" にあります。\n"
"\n"
"下記の 2 つの例で、実際に uninitialised と malloc に対する警告哲学を示しま"
"す:\n"
"* _uninitialised_\n"
"\n"
"  'undef' は Perl でよく使用される機能で、これを使用することで滅多に発生しな"
"いバグに対して警告を生成することができます。ですが、これを利用することでコー"
"ディングを制限してしまうことになるため、初期化されていない旨の警告を無効化し"
"ます。\n"
"* _malloc_\n"
"\n"
"  C 言語レベルでは、確保されたメモリを 2 度解放することは深刻なバグになり、一"
"般的にはメモリ破壊を引き起こします。プログラム内で副次的な悪影響を起こすこと"
"もあるため、これを警告しないことに何の利点もありません。そのため、 malloc の"
"警告は既定で致命的エラーに設定されています。\n"
"\n"
"残念ながら Perl の警告をうまく制御する方法はなく、 1 つの無意味な警告のため"
"に、残り全ての有用な警告を排除してしまいがちです (たとえば Perl では、正規表"
"現に該当させる目的で任意の長さにテキストを制限できますが、これにより無意味な"
"警告を生成してしまう場合があります。これにより 'regexp' の警告分類は意味のな"
"いものになってしまいます) 。\n"
"\n"
"下記はこのモジュールが何を行なうのか、およびなぜこれを行なうのか、そしてこの"
"方法がどのような利点をもたらすのかについて、詳しく述べたものです。"

#. tumbleweed/perl-experimental/description
msgid ""
"This pragma provides an easy and convenient way to enable or disable "
"experimental features.\n"
"\n"
"Every version of perl has some number of features present but considered "
"\"experimental.\" For much of the life of Perl 5, this was only a "
"designation found in the documentation. Starting in Perl v5.10.0, and more "
"aggressively in v5.18.0, experimental features were placed behind pragmata "
"used to enable the feature and disable associated warnings.\n"
"\n"
"The 'experimental' pragma exists to combine the required incantations into a "
"single interface stable across releases of perl. For every experimental "
"feature, this should enable the feature and silence warnings for the "
"enclosing lexical scope:\n"
"\n"
"  use experimental 'feature-name';"
msgstr ""
"このプラグマは、試験的な機能を有効または無効にするための簡単で便利な方法を提供します。\n"
"\n"
"Perlのすべてのバージョンにはいくつかの機能がありますが、「実験的」と考えられています。Perl "
"5のほとんどの期間、これはドキュメントに記載されている名称でしかありませんでした。Perl v5.10.0以降、さらに積極的にv5.18."
"0では、機能を有効にし、関連する警告を無効にするために使用されるpragmataの後ろに実験的な機能が配置されました。\n"
"\n"
"「実験的な」プラグマは、必要な呪文を組み合わせて、perlのリリース間で安定した単一のインターフェースにするために存在します。すべての実験的な機能に対して"
"、これは機能を有効にし、包含する語彙スコープの警告を無音にする必要があります。\n"
"\n"
"  use experimental 'feature-name';"

#. tumbleweed/perl-ldap/summary
msgid "Perl::ldap Perl module"
msgstr "Perl::ldap Perl モジュール"

#. tumbleweed/perl-ldap/description
msgid "perl::ldap Perl module"
msgstr "Perl::ldap Perl モジュール"

#. tumbleweed/perl-local-lib/summary
msgid "Create and use a local lib/ for perl modules with PERL5LIB"
msgstr ""
"PERL5LIBで Perl モジュール向けのローカルライブラリを作成して使用するモジュー"
"ル"

#~ msgid "A module for merging hierarchies using the C3 algorithm"
#~ msgstr "C3 アルゴリズムを利用して階層構造を合成するためのモジュール"

#~ msgid ""
#~ "This module implements the C3 algorithm. I have broken this out into it's "
#~ "own module because I found myself copying and pasting it way too often "
#~ "for various needs. Most of the uses I have for C3 revolve around class "
#~ "building and metamodels, but it could also be used for things like "
#~ "dependency resolution as well since it tends to do such a nice job of "
#~ "preserving local precedence orderings.\n"
#~ "\n"
#~ "Below is a brief explanation of C3 taken from the the Class::C3 manpage "
#~ "module. For more detailed information, see the the SEE ALSO manpage "
#~ "section and the links there."
#~ msgstr ""
#~ "このモジュールは C3 アルゴリズムを実装しています。なお、このモジュールは"
#~ "様々な要件に合わせるためにコピーを切り返している箇所があるため、モジュール"
#~ "を分解して対応しています。多くの用途では、クラスの構築やメタモデルに対し"
#~ "て C3 を利用しますが、ローカルでの優先順位を維持するのに便利な仕組みを作る"
#~ "目的があることから、依存関係の解決などにも利用することができます。\n"
#~ "\n"
#~ "下記は Class::C3 モジュール内に書かれている C3 の概要例です。詳しくは SEE "
#~ "ALSO セクションとそのリンク先をお読みください。"

#~ msgid "Building, Finding and Using Wxwidgets Binaries"
#~ msgstr "Wxwidgets バイナリの構築／検出／使用"

#~ msgid "The Dbi of Event Loop Programming"
#~ msgstr "イベントループプログラミングの Dbi"

#~ msgid "Simple but Non-Blocking Http/Https Client"
#~ msgstr "シンプルながらも非ブロック型の http/https クライアント"

#~ msgid "A persistence framework for session data"
#~ msgstr "セッションデータ向け永続フレームワーク"

#~ msgid "An AuthCookie module backed by a DBI database."
#~ msgstr "DBI データベースをバックエンドとする AuthCookie モジュール。"

#~ msgid ""
#~ "'App::CLI' dispatches CLI (command line interface) based commands into "
#~ "command classes. It also supports subcommand and per-command options.\n"
#~ "\n"
#~ "get_opt([@config], %opt_map)     Give options map, processed by Getopt::"
#~ "Long::Parser.\n"
#~ "\n"
#~ "Interface of dispatcher\n"
#~ "\n"
#~ "cmd_map($cmd)     Find package name of subcommand in constant '%alias'.\n"
#~ "\n"
#~ "    If it's found, return 'ucfirst' of the package name, otherwise, "
#~ "return     'ucfirst' of '$cmd' itself.\n"
#~ "\n"
#~ "get_cmd($cmd, @arg)     Return subcommand of first level via '$ARGV[0]'."
#~ msgstr ""
#~ "'App::CLI' は CLI (コマンドラインインターフェイス) ベースのコマンドをコマ"
#~ "ンドクラスに送信するためのモジュールです。サブコマンドやコマンド別のオプ"
#~ "ションにも対応しています。\n"
#~ "\n"
#~ "get_opt([@config], %opt_map)         オプションマップの取得 (Getopt::"
#~ "Long::Parser で処理されます)\n"
#~ "\n"
#~ "ディスパッチャのインターフェイス\n"
#~ "\n"
#~ "cmd_map($cmd)     定数 %alias 内でサブコマンドのパッケージ名の検索。\n"
#~ "\n"
#~ "  見つかった場合はパッケージ名の 'ucfirst' が、見つからなかった場合は "
#~ "'$cmd' 自身の 'ucfirst' が返されます\n"
#~ "\n"
#~ "get_cmd($cmd, @arg)     $ARGV[0] を利用して最初のレベルのサブコマンドを返"
#~ "します。"

#~ msgid "Write Command Line Apps with Less Suffering"
#~ msgstr "難なくコマンドラインアプリを作成するための仕組み"

#~ msgid "Get, Unpack, Build and Install Modules From Cpan"
#~ msgstr "CPAN 提供のモジュールの取得／展開／構築／インストール"

#~ msgid ""
#~ "Archive::Tar::Wrapper is an API wrapper around the 'tar' command line "
#~ "utility. It never stores anything in memory, but works on temporary "
#~ "directory structures on disk instead. It provides a mapping between the "
#~ "logical paths in the tarball and the 'real' files in the temporary "
#~ "directory on disk.\n"
#~ "\n"
#~ "It differs from Archive::Tar in two ways:\n"
#~ "\n"
#~ "  * Archive::Tar::Wrapper doesn't hold anything in memory. Everything is "
#~ "stored on disk.\n"
#~ "\n"
#~ "  * Archive::Tar::Wrapper is 100% compliant with the platform's 'tar' "
#~ "utility, because it uses it internally."
#~ msgstr ""
#~ "Archive::Tar::Wrapper は 'tar' コマンドラインユーティリティに対する API "
#~ "ラッパーです。メモリ内には何も保存されず、ディスク内のテンポラリディレクト"
#~ "リ構造内で処理を行ないます。 tar ボール内の論理パスと、ディスク内のテンポ"
#~ "ラリディレクトリ内にある '実際の' ファイルとの間で、マッピングする機能を提"
#~ "供しています。\n"
#~ "\n"
#~ "Archive::Tar とは下記 2 点が異なります:\n"
#~ "\n"
#~ "  * Archive::Tar::Wrapper は、メモリ内に何も保持しません。全てのコンテンツ"
#~ "はディスクに保存されます。\n"
#~ "\n"
#~ "  * Archive::Tar::Wrapper は、プラットフォーム側で提供されている 'tar' "
#~ "ユーティリティを内部で使用しているため、 100% の互換性があります。"

#~ msgid ""
#~ "CGI::FastTemplate manages templates and parses templates replacing "
#~ "variable names with values. It was designed for mid to large scale web "
#~ "applications (CGI, mod_perl) where there are great benefits to separating "
#~ "the logic of an application from the specific implementation details.\n"
#~ "\n"
#~ "Author:\tJason Moore <jmoore@sober.com>"
#~ msgstr ""
#~ "CGI::FastTemplate では変数を実際の値に置き換える処理を行なう、テンプレート"
#~ "モジュールです。中規模もしくは大規模の Web アプリケーション (CGI, "
#~ "mod_perl) に向けて設計されており、アプリケーションのロジックと特定の実装仕"
#~ "様とを分離するための素晴らしい仕組みを提供しています。\n"
#~ "\n"
#~ "Author:\tJason Moore <jmoore@sober.com>"

#~ msgid "Simple totally OO CGI interface that is CGI.pm compliant"
#~ msgstr "CGI.pm に準拠するシンプルな完全 OO CGI インターフェイス"

#~ msgid "Upload Things to the Cpan"
#~ msgstr "CPAN へのアップロード"

#~ msgid ""
#~ "This module is meant as a debugging aid. It can be used to make a script "
#~ "complain loudly with stack backtraces when warn()ing or die()ing.\n"
#~ "\n"
#~ "Here are how stack backtraces produced by this module looks:\n"
#~ "\n"
#~ "     $ perl -MCarp::Always -e 'sub f { die \"arghh\" }; sub g { f }; g'   "
#~ "arghh at -e line 1           main::f() called at -e line 1           "
#~ "main::g() called at -e line 1\n"
#~ "\n"
#~ "     $ perl -MCarp::Always -w -e 'sub f { $a = shift; @a = @$a };' "
#~ "\\                            -e 'sub g { f(undef) }; g'   Use of "
#~ "uninitialized value in array dereference at -e line 1           main::"
#~ "f('undef') called at -e line 2           main::g() called at -e line 2\n"
#~ "\n"
#~ "In the implementation, the 'Carp' module does the heavy work, through "
#~ "'longmess()'. The actual implementation sets the signal hooks "
#~ "'$SIG{__WARN__}' and '$SIG{__DIE__}' to emit the stack backtraces.\n"
#~ "\n"
#~ "Oh, by the way, 'carp' and 'croak' when requiring/using the 'Carp' module "
#~ "are also made verbose, behaving like 'cluck' and 'confess', respectively."
#~ msgstr ""
#~ "このモジュールはデバッグ目的で提供されているものです。 warn() や die() の"
#~ "際に、スタックバックトレースを表示して詳細情報を出力できるようにします。\n"
#~ "\n"
#~ "このモジュールで生成されるバックトレースは下記のようになっています:\n"
#~ "\n"
#~ "     $ perl -MCarp::Always -e 'sub f { die \"arghh\" }; sub g { f }; g'   "
#~ "arghh at -e line 1           main::f() called at -e line 1           "
#~ "main::g() called at -e line 1\n"
#~ "\n"
#~ "     $ perl -MCarp::Always -w -e 'sub f { $a = shift; @a = @$a };' "
#~ "\\                            -e 'sub g { f(undef) }; g'   Use of "
#~ "uninitialized value in array dereference at -e line 1           main::"
#~ "f('undef') called at -e line 2           main::g() called at -e line 2\n"
#~ "\n"
#~ "この実装では、 'Carp' モジュールの 'longmess()' を主に利用しています。ま"
#~ "た、スタックバックトレースを出力するにあたっては、 '$SIG{__WARN__}' と "
#~ "'$SIG{__DIE__}' のフックを利用しています。\n"
#~ "\n"
#~ "ところで、 'Carp' モジュールを必要 (もしくは使用) する際、 'carp' と "
#~ "'croak' を 'cluck' や 'confess' のように冗長出力することもできます。"

#~ msgid "Convenience Wrappers Around Carp::Assert"
#~ msgstr "Carp::Assert に対する便利なラッパー"

#~ msgid ""
#~ "This class lets you build groups of accessors that will call different "
#~ "getters and setters. The documentation of this module still requires a "
#~ "lot of work (*volunteers welcome >.>*), but in the meantime you can refer "
#~ "to http://lo-f.at/glahn/2009/08/WritingPowerfulAccessorsForPerlClasses."
#~ "html for more information."
#~ msgstr ""
#~ "このクラスは、様々な getter や setter を呼び出すアクセサのグループを構築し"
#~ "ます。このモジュールのドキュメンテーションはまだ作成途中で、多くの作業が必"
#~ "要となっています (*ボランティア募集中*) が、詳しい情報については http://"
#~ "lo-f.at/glahn/2009/08/WritingPowerfulAccessorsForPerlClasses.html をお読み"
#~ "ください。"

#~ msgid "Pragma to Use the C3 Method Resolution Order Algorithm"
#~ msgstr "C3 メソッド解決順序アルゴリズムを使用するプラグマ"

#~ msgid "Recursively Copy Perl Datatypes"
#~ msgstr "Perl データタイプの再帰的な複製"

#~ msgid ""
#~ "The module reports repeated text fragments (typically Perl code) that "
#~ "could be considered for isolation and/or abstraction in order to reduce "
#~ "multiple copies of the same code (a.k.a. cut and paste code).\n"
#~ "\n"
#~ "Code duplicates may occur in the same line, file or directory.\n"
#~ "\n"
#~ "Rather than the exponential-time ad-hoc approach to compare every item "
#~ "against every other item, this module can create the suffix array and the "
#~ "longest common prefix array for a string of 8-bit characters. These data "
#~ "structures can be used to search for repetitions of substrings in O(n) "
#~ "time. The current strategy is to concatenate code from all files into one "
#~ "string and then use the suffix array and its companion, the longest-"
#~ "common-prefix (lcp) array on this string."
#~ msgstr ""
#~ "このモジュールは、同じコードを繰り返し記述するようなことを避けるため、分離"
#~ "や抽象化を行なうことができるよう、繰り返し現われるテキストの一部 (一般に "
#~ "Perl のコード) を報告するモジュールです。\n"
#~ "\n"
#~ "コードの重複は、行内だけでなくファイルやディレクトリ内でも発生します。\n"
#~ "\n"
#~ "一方のコードと他方のコードを見比べて判断するようでは、指数関数的に時間のか"
#~ "かる作業になってしまいますが、このモジュールでは 8 ビット文字の文字列に対"
#~ "して、後方一致用配列と最も長い前方一致用配列を作成することができます。これ"
#~ "らのデータ構造は、 O(n) 時間内で部分一致の文字列を検出するのに便利な構造で"
#~ "す。現在の戦略では、全てのファイルを単一の文字列内に連結して格納し、後方一"
#~ "致用配列を利用して最も長い前方一致 (lcp) を検出します。"

#~ msgid "Git-Compatible Config File Parsing"
#~ msgstr "Git 互換の設定ファイル処理"

#~ msgid "Simple .Ini-File Format"
#~ msgstr "シンプルな .ini ファイル形式"

#~ msgid "Multivalue-Property Package-Oriented Configuration"
#~ msgstr "プロパティに複数の値を設定することができるパッケージ指向の設定"

#~ msgid "Cpanel Fork of Json::Xs, Fast and Correct Serializing"
#~ msgstr "高速で正確なシリアライズを行なう Json::XS の Cpanel Fork"

#~ msgid ""
#~ "Curses is the interface between Perl and your system's curses(3) library. "
#~ "For descriptions on the usage of a given function, variable, or constant, "
#~ "consult your system's documentation, as such information invariably "
#~ "varies (:-) between different curses(3) libraries and operating systems. "
#~ "This document describes the interface itself, and assumes that you "
#~ "already know how your system's curses(3) library works."
#~ msgstr ""
#~ "Curses は Perl とシステム向けに提供されている curses(3) ライブラリとの間の"
#~ "インターフェイスです。それぞれ関数や変数、定数などの使い方について、詳しく"
#~ "はシステムのドキュメンテーションをお読みください。これは、それぞれの "
#~ "curses(3) ライブラリやオペレーティングシステムで仕様が異なることによるもの"
#~ "です。なお、本文書ではインターフェイスそれ自身に関する説明のみで、すでに "
#~ "curses(3) ライブラリの動作については知っていることを前提にして作られていま"
#~ "す。"

#~ msgid "Parse and Validate Simple Name/Value Option Pairs"
#~ msgstr "シンプルな名前／値の対を処理および検証するモジュール"

#~ msgid ""
#~ "When searching through large amounts of data, it is often the case that a "
#~ "result set is returned that is larger than we want to display on one "
#~ "page. This results in wanting to page through various pages of data. The "
#~ "maths behind this is unfortunately fiddly, hence this module.\n"
#~ "\n"
#~ "The main concept is that you pass in the number of total entries, the "
#~ "number of entries per page, and the current page number. You can then "
#~ "call methods to find out how many pages of information there are, and "
#~ "what number the first and last entries on the current page really are."
#~ msgstr ""
#~ "大量のデータを検索する場合、検索結果が 1 ページ内に収まらないことがありま"
#~ "す。このような場合は、データをページ制御する必要がありますが、このような処"
#~ "理は面倒なものです。このモジュールは、そのような問題を解決します。\n"
#~ "\n"
#~ "このモジュールは、データの項目数と 1 ページあたりの項目数、そして現在の"
#~ "ページ番号を渡すことで、全体のページ数や現在のページの最初および最後に表示"
#~ "される項目の番号がそれぞれ返されます。"

#~ msgid "Collection of Low-Level Debug Facilities"
#~ msgstr "低レベルなデバッグ機能集"

#~ msgid "Base classes wrapping fundamental Perl data types."
#~ msgstr "基礎的な Perl データタイプをラッピングするベースクラス"

#~ msgid ""
#~ "Data::Perl is a collection of classes that wrap fundamental data types "
#~ "that exist in Perl. These classes and methods as they exist today are an "
#~ "attempt to mirror functionality provided by Moose's Native Traits. One "
#~ "important thing to note is all classes currently do no validation on "
#~ "constructor input.\n"
#~ "\n"
#~ "Data::Perl is a container class for the following classes: \n"
#~ "* * the Data::Perl::Collection::Hash manpage \n"
#~ "* * the Data::Perl::Collection::Array manpage \n"
#~ "* * the Data::Perl::String manpage \n"
#~ "* * the Data::Perl::Number manpage \n"
#~ "* * the Data::Perl::Counter manpage \n"
#~ "* * the Data::Perl::Bool manpage \n"
#~ "* * the Data::Perl::Code manpage"
#~ msgstr ""
#~ "Data::Perl は Perl 内に存在する基礎的なデータタイプをラッピングするクラス"
#~ "集です。これらのクラスやメソッドは、現在は Mosse's Native Traits でも提供"
#~ "される機能を反映しようとしています。なお、現時点ではすべてのクラスのコンス"
#~ "トラクタの入力に対して、検証は行なわれないことに注意してください。\n"
#~ "\n"
#~ "Data::Perl は下記のクラスに対するコンテナクラスです:\n"
#~ "* * the Data::Perl::Collection::Hash\n"
#~ "* * the Data::Perl::Collection::Array\n"
#~ "* * the Data::Perl::String\n"
#~ "* * the Data::Perl::Number\n"
#~ "* * the Data::Perl::Counter\n"
#~ "* * the Data::Perl::Bool\n"
#~ "* * the Data::Perl::Code"

#~ msgid "Colored Pretty-Print of Perl Data Structures and Objects"
#~ msgstr "Perl のデータ構造やオブジェクトに対する色つきの見やすい表示"

#~ msgid "colored pretty-print of Perl data structures and objects"
#~ msgstr "Perl のデータ構造やオブジェクトに対する色つきの見やすい表示"

#~ msgid ""
#~ "This module is a simple visitor implementation for Perl values.\n"
#~ "\n"
#~ "It has a main dispatcher method, 'visit', which takes a single perl value "
#~ "and then calls the methods appropriate for that value.\n"
#~ "\n"
#~ "It can recursively map (cloning as necessary) or just traverse most "
#~ "structures, with support for per object behavior, circular structures, "
#~ "visiting tied structures, and all ref types (hashes, arrays, scalars, "
#~ "code, globs).\n"
#~ "\n"
#~ "the Data::Visitor manpage is meant to be subclassed, but also ships with "
#~ "a callback driven subclass, the Data::Visitor::Callback manpage."
#~ msgstr ""
#~ "このモジュールは、 Perl の値を見やすく表示するための実装です。\n"
#~ "\n"
#~ "メインのメソッドとして 'visit' が用意されていますが、このメソッドは単一の "
#~ "Perl 値をパラメータとして受け付け、その値に対して適切なメソッドを呼び出し"
#~ "ます。\n"
#~ "\n"
#~ "多くの構造体に対して、再帰的にマップ (必要に応じて複製を作成) するか、純粋"
#~ "に中身を表示します。 Perl のオブジェクトや循環構造、タイ構造やすべての参照"
#~ "タイプ (ハッシュ、配列、スカラー、コード、グロブ) にも対応しています。\n"
#~ "\n"
#~ "Data::Visitor はサブクラス化する目的で作られていますが、コールバック関数を"
#~ "ベースにしたサブクラス Data::Visitor::Callback も用意されています。"

#~ msgid "Check What Os We're Running On"
#~ msgstr "実行中の OS の判断"

#~ msgid ""
#~ "Given a list of Perl modules/filenames, this module makes 'require' and "
#~ "'use' statements fail (no matter the specified files/modules are "
#~ "installed or not).\n"
#~ "\n"
#~ "They _die_ with a message like:\n"
#~ "\n"
#~ "    Can't locate Module/ToHide.pm (hidden)\n"
#~ "\n"
#~ "The original intent of this module is to allow Perl developers to test "
#~ "for alternative behavior when some modules are not available. In a Perl "
#~ "installation, where many modules are already installed, there is a chance "
#~ "to screw things up because you take for granted things that may not be "
#~ "there in other machines.\n"
#~ "\n"
#~ "For example, to test if your distribution does the right thing when a "
#~ "module is missing, you can do\n"
#~ "\n"
#~ "    perl -MDevel::Hide=Test::Pod Makefile.PL\n"
#~ "\n"
#~ "forcing 'Test::Pod' to not be found (whether it is installed or not).\n"
#~ "\n"
#~ "Another use case is to force a module which can choose between two "
#~ "requisites to use the one which is not the default. For example, 'XML::"
#~ "Simple' needs a parser module and may use 'XML::Parser' or 'XML::"
#~ "SAX' (preferring the latter). If you have both of them installed, it will "
#~ "always try 'XML::SAX'. But you can say:\n"
#~ "\n"
#~ "    perl -MDevel::Hide=XML::SAX script_which_uses_xml_simple.pl\n"
#~ "\n"
#~ "NOTE. This module does not use the Carp manpage. As said before, denial "
#~ "_dies_.\n"
#~ "\n"
#~ "This module is pretty trivial. It uses a code reference in @INC to get "
#~ "rid of specific modules during require - denying they can be successfully "
#~ "loaded and stopping the search before they have a chance to be found.\n"
#~ "\n"
#~ "There are three alternative ways to include modules in the hidden list: \n"
#~ "* *\n"
#~ "\n"
#~ "  setting @Devel::Hide::HIDDEN \n"
#~ "* *\n"
#~ "\n"
#~ "  environment variable DEVEL_HIDE_PM \n"
#~ "* *\n"
#~ "\n"
#~ "  import()\n"
#~ "\n"
#~ "Optionally, you can propagate the list of hidden modules to your process' "
#~ "child processes, by passing '-from:children' as the first option when you "
#~ "use() this module. This works by populating 'PERL5OPT', and is "
#~ "incompatible with Taint mode, as explained in the perlrun manpage."
#~ msgstr ""
#~ "Perl のモジュール名やファイル名を指定することで、このモジュールは "
#~ "'require', 'use' の使用時に失敗させることができます (指定したファイル名や"
#~ "モジュール名が存在するかどうかには関係なく失敗します) 。\n"
#~ "\n"
#~ "失敗時には、下記のようにして _die_ されます:\n"
#~ "\n"
#~ "    Can't locate Module/ToHide.pm (hidden)\n"
#~ "\n"
#~ "このモジュールのもう 1 つの意図として、 Perl の開発者に対してモジュールが"
#~ "利用できない場合の動作をテストさせる、という意図があります。 Perl のインス"
#~ "トール時には多数のモジュールが併せてインストールされますが、他のマシンでも"
#~ "それらのモジュールが利用できるかどうかはわかりませんので、その際のテストを"
#~ "実施することができます。\n"
#~ "\n"
#~ "たとえば、お使いの配布物で特定のモジュールが存在しない場合をテストしたい場"
#~ "合は、下記のように実行します:\n"
#~ "\n"
#~ "    perl -MDevel::Hide=Test::Pod Makefile.PL\n"
#~ "\n"
#~ "上記のように実行することで、 (インストールされているかどうかにかかわらず) "
#~ "'Test::Pod' が見つからない状況を作り出すことができます。\n"
#~ "\n"
#~ "もう 1 つの使い方としては、 2 つのモジュールのうちのいずれかを利用するモ"
#~ "ジュールで、一方が既定ではインストールされないものの場合が考えられます。た"
#~ "とえば 'XML::Simple' ではパーサモジュールを必要としますが、パーサモジュー"
#~ "ルは 'XML::Parser' と 'XML::SAX' のいずれかを利用することができます (後者"
#~ "が優先されます) 。両方をインストールしている環境では 'XML::SAX' が優先され"
#~ "てしまいますが、下記のように実行することで、 'XML::SAX' を無効化することが"
#~ "できます:\n"
#~ "\n"
#~ "    perl -MDevel::Hide=XML::SAX script_which_uses_xml_simple.pl\n"
#~ "\n"
#~ "ただし、このモジュールは Carp を利用していないことに注意してください。上述"
#~ "のとおり _die_ で終了します。\n"
#~ "\n"
#~ "このモジュールはよくある仕組みでもあります。 @INC 内のコード参照を利用し"
#~ "て、特定のモジュールが require される際に拒否を行ない、読み込みが正常終了"
#~ "するのを妨げ、検出される前に検索を停止します。\n"
#~ "\n"
#~ "隠蔽リストにモジュールを追加する方法としては、下記の 3 種類があります:\n"
#~ "* *\n"
#~ "\n"
#~ "  setting @Devel::Hide::HIDDEN\n"
#~ "* *\n"
#~ "\n"
#~ "  environment variable DEVEL_HIDE_PM\n"
#~ "* *\n"
#~ "\n"
#~ "  import()\n"
#~ "\n"
#~ "このほか、隠蔽モジュールのリストを子プロセスにも反映させたい場合は、  "
#~ "use() モジュールを利用する際の最初のオプションに '-from:children' を指定し"
#~ "てください。これは 'PERL5OPT' を利用して反映させる仕組みで、 Taint モ"
#~ "ジュールとの互換性はありません。詳しくは perlrun をお読みください。"

#~ msgid "produce RFC 2822 date strings"
#~ msgstr "RFC 2822 日付文字列の生成"

#~ msgid "Easy Mime Message Handling"
#~ msgstr "簡易 MIME メッセージ処理"

#~ msgid "Parse a MIME Content-Type or Content-Disposition Header"
#~ msgstr "MIME の Content-Type, Content-Disposition ヘッダの処理"

#~ msgid "Library for Sending Email"
#~ msgstr "メール送信用ライブラリ"

#~ msgid "Character Encodings in Perl"
#~ msgstr "Perl 内の文字エンコーディング"

#~ msgid ""
#~ "This module tries to figure out how to link C programs with Fortran "
#~ "subroutines on your system. Basically one must add a list of Fortran "
#~ "runtime libraries. The problem is their location and name varies with "
#~ "each OS/compiler combination!\n"
#~ "\n"
#~ "This module tries to implement a simple 'rule-of-thumb' database for "
#~ "various flavours of UNIX systems. A simple self-documenting Perl database "
#~ "of knowledge/code for figuring out how to link for various combinations "
#~ "of OS and compiler is embedded in the modules Perl code. Please help save "
#~ "the world by sending database entries for your system to karl_pgplot@mac."
#~ "com\n"
#~ "\n"
#~ "Note the default on most systems is now to search for a generic 'GNU' "
#~ "compiler which can be g77, gfortran or g95 and then find the appropriate "
#~ "link libraries automatically. (This is the 'Generic' 'GNU' database entry "
#~ "in the code.)\n"
#~ "\n"
#~ "The library list which the module returns can be explicitly overridden by "
#~ "setting the environment variable F77LIBS, e.g.\n"
#~ "\n"
#~ "  % setenv F77LIBS \"-lfoo -lbar\"   % perl Makefile.PL   ..."
#~ msgstr ""
#~ "このモジュールは、お使いのシステムで Fortran サブルーチンと C プログラムを"
#~ "リンクさせる方法を示すためのものです。基本的には Fortran のランタイムライ"
#~ "ブラリを追加しなければなりません。また、発生しうる問題は、 OS とコンパイラ"
#~ "の組み合わせによって異なります！\n"
#~ "\n"
#~ "このモジュールは、様々な UNIX プラットフォームに対して 'rule-of-thumb'の"
#~ "データベースを実装しようとしている試みです。シンプルな自己ドキュメント型の"
#~ "知識／コード Perl データベースで、様々な OS とコンパイラの組み合わせで、 "
#~ "Perl コードのモジュール内でのリンク方法を示すためのものです。お使いのシス"
#~ "テムでのデータベース項目を karl_pgplot@mac.com 宛に送信することで、開発を"
#~ "ご支援ください。\n"
#~ "\n"
#~ "なお、ほとんどのシステムにおける既定は、汎用の 'GNU' コンパイラであり、 "
#~ "g77/gfortran/g95 などという名前を検索するようになっているほか、適切なライ"
#~ "ブラリリンクも自動的に行ないます (コード内の 'Generic' 'GNU' データベース"
#~ "項目で設定されています) 。\n"
#~ "\n"
#~ "\n"
#~ "このライブラリは、 F77LIBS 環境変数を設定することで、明示的に上書きするこ"
#~ "とができます:\n"
#~ "\n"
#~ "  % setenv F77LIBS \"-lfoo -lbar\"   % perl Makefile.PL   ..."

#~ msgid ""
#~ "This utility is designed to write a Makefile for an extension module from "
#~ "a Makefile.PL. It is based on the Makefile.SH model provided by Andy "
#~ "Dougherty and the perl5-porters.\n"
#~ "\n"
#~ "It splits the task of generating the Makefile into several subroutines "
#~ "that can be individually overridden. Each subroutine returns the text it "
#~ "wishes to have written to the Makefile.\n"
#~ "\n"
#~ "As there are various Make programs with incompatible syntax, which use "
#~ "operating system shells, again with incompatible syntax, it is important "
#~ "for users of this module to know which flavour of Make a Makefile has "
#~ "been written for so they'll use the correct one and won't have to face "
#~ "the possibly bewildering errors resulting from using the wrong one.\n"
#~ "\n"
#~ "On POSIX systems, that program will likely be GNU Make; on Microsoft "
#~ "Windows, it will be either Microsoft NMake, DMake or GNU Make. See the "
#~ "section on the L</\"MAKE\"> parameter for details.\n"
#~ "\n"
#~ "ExtUtils::MakeMaker (EUMM) is object oriented. Each directory below the "
#~ "current directory that contains a Makefile.PL is treated as a separate "
#~ "object. This makes it possible to write an unlimited number of Makefiles "
#~ "with a single invocation of WriteMakefile().\n"
#~ "\n"
#~ "All inputs to WriteMakefile are Unicode characters, not just octets. EUMM "
#~ "seeks to handle all of these correctly. It is currently still not "
#~ "possible to portably use Unicode characters in module names, because this "
#~ "requires Perl to handle Unicode filenames, which is not yet the case on "
#~ "Windows."
#~ msgstr ""
#~ "このユーティリティは、 Makefile.PL から拡張モジュール向けの Makefile を作"
#~ "成するために設計されたモジュールです。 Andy Dougherty 氏と Perl5 移植作業"
#~ "者の皆様が提供する Makefile.SH のモデルをベースにしています。\n"
#~ "\n"
#~ "Makefile の生成に際しては、それを複数のサブルーチンに分割して、個別にオー"
#~ "バーライドできるようにしてあります。各サブルーチンでは、 Makefile に書き込"
#~ "みたい内容を返します。\n"
#~ "\n"
#~ "Make プログラムには様々なものがあり、それらは互換性のない仕組みであるほ"
#~ "か、オペレーティングシステムのシェルについても相互に互換性が確保できていな"
#~ "いため、このモジュールを利用するにあたっては、どの Make を利用する "
#~ "Makefile を作成しているのかを事前に知っておいて、異なる環境の Make 向けの"
#~ "出力に悩まされないようにする必要があります。\n"
#~ "\n"
#~ "POSIX システムでは通常、 GNU Make を利用します。 Microsoft Windows では "
#~ "Microsoft NMake, DMake, GNU Make のいずれかを利用します。詳しくは L</"
#~ "\"MAKE\"> パラメータをお読みください。\n"
#~ "\n"
#~ "ExtUtils::MakeMaker (EUMM) はオブジェクト指向です。カレントディレクトリ以"
#~ "下の各ディレクトリに Makefile.PL が含まれていると、それらは個別のオブジェ"
#~ "クトとして扱われます。これにより、 WriteMakefile() を一度だけ呼び出すだけ"
#~ "で、制限無く Makefile を作成することができるようになっています。\n"
#~ "\n"
#~ "WriteMakefile への入力は Unicode 文字であり、単なるオクテットではないこと"
#~ "に注意してください。 EUMM ではこれらを正しく処理します。また、現時点ではモ"
#~ "ジュール名に Unicode 文字を利用することはできません。これは Perl 側で "
#~ "Unicode のファイル名を扱う必要があるためですが、 Windows ではまだ実装され"
#~ "ていません。"

#~ msgid "utilities to write and check a MANIFEST file"
#~ msgstr "MANIFEST ファイルの作成とチェックのためのユーティリティ"

#~ msgid ""
#~ "The 'File::LibMagic' is a simple perl interface to libmagic from the file "
#~ "package (version 4.x or 5.x). You will need both the library (_libmagic."
#~ "so_) and the header file (_magic.h_) to build this Perl module."
#~ msgstr ""
#~ "'File::LibMagic' は file パッケージが提供する libmagic (バージョン 4.x ま"
#~ "たは 5.x) に対する、シンプルな Perl インターフェイスです。この Perl モ"
#~ "ジュールを構築するには、ライブラリ (_libmagic.so_) とヘッダファイル "
#~ "(_magic.h_) の両方が必要となります。"

#~ msgid ""
#~ "Recursive Versions of Mkdir() and Rmdir() Without As Much Overhead As "
#~ "Fi[cut]"
#~ msgstr "File::Path のオーバーヘッドを軽減した mkdir() と rmdir() の再帰版"

#~ msgid "More Sensible Way to Change Directories"
#~ msgstr "ディレクトリを変更する際の気の利いた方法"

#~ msgid ""
#~ "Perl's 'chdir()' has the unfortunate problem of being very, very, very "
#~ "global. If any part of your program calls 'chdir()' or if any library you "
#~ "use calls 'chdir()', it changes the current working directory for the\n"
#~ "*whole* program.\n"
#~ "\n"
#~ "This sucks.\n"
#~ "\n"
#~ "File::chdir gives you an alternative, '$CWD' and '@CWD'. These two "
#~ "variables combine all the power of 'chdir()', the File::Spec manpage and "
#~ "the Cwd manpage."
#~ msgstr ""
#~ "Perl の 'chdir()' はとてもとてもグローバルな問題を抱えた不幸なシステムで"
#~ "す。お使いのプログラムのどこかで 'chdir()' を呼び出したり、どこかのライブ"
#~ "ラリで 'chdir()' が呼び出されたりすると、プログラム全体に対して作業ディレ"
#~ "クトリが変更されてしまいます。\n"
#~ "\n"
#~ "これはあまりにも問題です。\n"
#~ "\n"
#~ "File::chdir では、代替となる '$CWD' と '@CWD' を提供しています。この 2 つ"
#~ "の変数は 'chdir()' の威力のすべてを結集した仕組みです。詳しくは File::"
#~ "Spec および Cwd をお読みください。"

#~ msgid "Represent an Operation Awaiting Completion"
#~ msgstr "処理中を表示するためのモジュール"

#~ msgid ""
#~ "This wrapper attempts to provide a perlish interface while remaining as "
#~ "true as possible to the underlying C API, so that any reference materials "
#~ "you can find on using GLib may still apply to using the libraries from "
#~ "perl. This module also provides facilities for creating wrappers for "
#~ "other GObject-based libraries. The the SEE ALSO manpage section contains "
#~ "pointers to all sorts of good information."
#~ msgstr ""
#~ "このラッパーは、裏側に存在する C 言語 API を維持したまま、できるかぎり "
#~ "Perl 形式のインターフェイスを提供するように目指したものです。これにより、 "
#~ "glib 内に存在する様々な要素を、 Perl から利用できるようにしています。この"
#~ "モジュールには、他の GOBject ベースのライブラリに対するラッパー作成機構も"
#~ "用意されています。詳しい情報へのポインタは、マニュアルページの SEE ALSO を"
#~ "お読みください。"

#~ msgid "GObject Introspection bindings for Perl"
#~ msgstr "Perl 向け GObject イントロスペクションバインディング"

#~ msgid ""
#~ "This package provides perl bindings for GObject Introspection. Glib::"
#~ "Object::Introspection uses the gobject-introspection and libffi projects "
#~ "to dynamically create Perl bindings for a wide variety of libraries. "
#~ "Examples include GTK+, WebKit, libsoup and many more."
#~ msgstr ""
#~ "このパッケージは GObject イントロスペクション向けの Perl バインディングで"
#~ "す。 Glib::Object::Introspection は gobject-introspection と libffi プロ"
#~ "ジェクトを利用して、様々なライブラリに対する Perl のバインディングを動的に"
#~ "作成します。たとえば GTK+, WebKit, libsoup などがあります。"

#~ msgid "Perl interface to the 2.x series of the GTK+ library"
#~ msgstr "GTK+ ライブラリのバージョン 2.x に対する Perl インターフェイス"

#~ msgid ""
#~ "The Gtk2 module allows a Perl developer to use the GTK+ graphical user "
#~ "interface library. Find out more about GTK+ at https://gtk.org/\n"
#~ "\n"
#~ "The GTK+ Reference Manual is also a handy companion when writing Gtk "
#~ "applications in any language. The Perl bindings follow the C API very "
#~ "closely, and the C reference documentation should be considered the "
#~ "canonical source.\n"
#~ "\n"
#~ "To discuss gtk2-perl, ask questions and flame/praise the authors, join "
#~ "gtk-perl-list@gnome.org at lists.gnome.org.\n"
#~ "\n"
#~ "Also have a look at the gtk2-perl website and sourceforge project page, "
#~ "http://gtk2-perl.sourceforge.net/"
#~ msgstr ""
#~ "Gtk2 モジュールは、 Perl の開発者に対して GTK+ グラフィカルユーザインター"
#~ "フェイスライブラリを提供する仕組みです。 GTK+ について、詳しくは https://"
#~ "gtk.org/ をお読みください。\n"
#~ "\n"
#~ "Gtk アプリケーションを開発したい場合は、言語にかかわらず GTK+ リファレンス"
#~ "マニュアルをお読みになるのが適切でしょう。 Perl のバインディングは C 言語"
#~ "の API に非常に似通った構造になるように作られていて、 C 言語のリファレンス"
#~ "文書を正式なものとしてお使いいただくことができます。\n"
#~ "\n"
#~ "このモジュールに関する議論や質問、著者へのクレームや賞賛については、  gtk-"
#~ "perl-list@gnome.org (lists.gnome.org) のメーリングリストにお送りくださ"
#~ "い。\n"
#~ "\n"
#~ "また、 gtk2-perl の Web サイトや sourceforge のプロジェクトページ (http://"
#~ "gtk2-perl.sourceforge.net) もご覧ください。"

#~ msgid ""
#~ "The majority of the web pages of the internet today are much larger than "
#~ "they need to be.  The reason for this is that HTML tends to be stored in "
#~ "a human readable format, with indenting, newlines and comments.\n"
#~ "\n"
#~ "However, all of these comments, whitespace etc. are ignored by the "
#~ "browser, and needlessly lengthen download times.\n"
#~ "\n"
#~ "Second, many people are using WYSIWYG HTML editors these days. This makes "
#~ "creating content easy.  However these editors can cause a number of "
#~ "compatibility problems by tying themselves to a particular browser or "
#~ "operating system.\n"
#~ "\n"
#~ "\n"
#~ "\n"
#~ "Authors:\n"
#~ "--------     Paul Lindner <paul.lindner@itu.int>"
#~ msgstr ""
#~ "インターネット上にある多くの Web ページはその要件よりも ずっと大きなサイズ"
#~ "になってしまっています。このようなことが起こるのは HTML を人間にとって読み"
#~ "やすい書式で書いて保存しているためで、 インデントや改行、コメントなどが含"
#~ "まれています。\n"
#~ "\n"
#~ " しかしながら、これらのコメントや空白の全ては ブラウザが無視するものであ"
#~ "り、不用意にダウンロード時間を伸ばす結果になっています。\n"
#~ "\n"
#~ " また、多くの人々は WYSIWYG (実際にユーザが閲覧するイメージを直接編集でき"
#~ "る) の HTML エディタを使用しているというのも一つの理由です。これによってコ"
#~ "ンテンツを作りやすいものに していますが、これらのエディタは特定のブラウザ"
#~ "やオペレーティングシステムで 数多くの互換性問題を引き起こすものにもなって"
#~ "います。\n"
#~ "\n"
#~ "\n"
#~ "\n"
#~ "作者:\n"
#~ "--------     Paul Lindner <paul.lindner@itu.int>"

#~ msgid "Perl extension for scrubbing/sanitizing html"
#~ msgstr "HTML の洗浄と消毒化のための Perl 拡張"

#~ msgid ""
#~ "Hash::Merge merges two arbitrarily deep hashes into a single hash. That "
#~ "is, at any level, it will add non-conflicting key-value pairs from one "
#~ "hash to the other, and follows a set of specific rules when there are key "
#~ "value conflicts (as outlined below). The hash is followed recursively, so "
#~ "that deeply nested hashes that are at the same level will be merged when "
#~ "the parent hashes are merged. *Please note that self-referencing hashes, "
#~ "or recursive references, are not handled well by this method.*\n"
#~ "\n"
#~ "Values in hashes are considered to be either ARRAY references, HASH "
#~ "references, or otherwise are treated as SCALARs. By default, the data "
#~ "passed to the merge function will be cloned using the Clone module; "
#~ "however, if necessary, this behavior can be changed to use as many of the "
#~ "original values as possible. (See 'set_clone_behavior').\n"
#~ "\n"
#~ "Because there are a number of possible ways that one may want to merge "
#~ "values when keys are conflicting, Hash::Merge provides several preset "
#~ "methods for your convenience, as well as a way to define you own."
#~ msgstr ""
#~ "Hash::Merge は 2 つの深いハッシュを 1 つに合成します。これは、どのレベルで"
#~ "も、一方のハッシュから他方のハッシュに対して、矛盾のないキー／値のペアを追"
#~ "加し、何らかのキー／値の矛盾が発生した場合に、特定のルールセットに従うとい"
#~ "うモジュールです。ハッシュは再帰的に追跡することができるため、同じレベルで"
#~ "入れ子になった深いハッシュ同士を、親のハッシュを合成して実現することができ"
#~ "ます。 *ただし、自己参照型のハッシュや、再帰的な参照については、このメソッ"
#~ "ドで正しく処理することができません。 *\n"
#~ "\n"
#~ "ハッシュ内の値は配列への参照かハッシュの参照、もしくは単にスカラー値として"
#~ "考えることができます。既定では、合成関数に渡されたデータは Clone モジュー"
#~ "ルで複製されます; しかしながら、必要であればこの動作を変更して、できる限り"
#~ "元の値と同じだけ多く変更することもできます ('set_clone_behavior' をご覧く"
#~ "ださい) 。\n"
#~ "\n"
#~ "キーが矛盾した場合の値の合成を行なうにあたって、この方法には様々なやり方が"
#~ "あることから、 Hash::Merge では利便性のためいくつかの方法を提供していま"
#~ "す。もちろん独自の方法を指定することもできます。"

#~ msgid ""
#~ "Similar to 'List::MoreUtils', 'Hash::MoreUtils' contains trivial but "
#~ "commonly-used functionality for hashes."
#~ msgstr ""
#~ "'List::MoreUtils' と同様に、 'Hash::MoreUtils' では些細なものながらよく使"
#~ "用されるハッシュ向け機能が含まれています。"

#~ msgid ""
#~ "This module provides three utility subroutines that make it easier to "
#~ "develop interactive applications... \n"
#~ "* 'is_interactive()'\n"
#~ "\n"
#~ "This subroutine returns true if '*ARGV' and the currently selected "
#~ "filehandle (usually '*STDOUT') are connected to the terminal. The test is "
#~ "considerably more sophisticated than:\n"
#~ "\n"
#~ "    -t *ARGV && -t *STDOUT\n"
#~ "\n"
#~ "as it takes into account the magic behaviour of '*ARGV'.\n"
#~ "\n"
#~ "You can also pass 'is_interactive' a writable filehandle, in which case "
#~ "it requires that filehandle be connected to a terminal (instead of the "
#~ "currently selected). The usual suspect here is '*STDERR':\n"
#~ "\n"
#~ "    if ( is_interactive(*STDERR) ) {         carp $warning;     } \n"
#~ "* 'interactive()'\n"
#~ "\n"
#~ "This subroutine returns '*STDOUT' if 'is_interactive' is true. If "
#~ "'is_interactive()' is false, 'interactive' returns a filehandle that does "
#~ "not print.\n"
#~ "\n"
#~ "This makes it easy to create applications that print out only when the "
#~ "application is interactive:\n"
#~ "\n"
#~ "    print {interactive} \"Please enter a value: \";     my $value = <>;\n"
#~ "\n"
#~ "You can also pass 'interactive' a writable filehandle, in which case it "
#~ "writes to that filehandle if it is connected to a terminal (instead of "
#~ "writing to '*STDOUT'). Once again, the usual suspect is '*STDERR':\n"
#~ "\n"
#~ "    print {interactive(*STDERR)} $warning; \n"
#~ "* 'busy {...}'\n"
#~ "\n"
#~ "This subroutine takes a block as its single argument and executes that "
#~ "block. Whilst the block is executed, '*ARGV' is temporarily replaced by a "
#~ "closed filehandle. That is, no input from '*ARGV' is possible in a 'busy' "
#~ "block. Furthermore, any attempts to send input into the 'busy' block "
#~ "through '*ARGV' is intercepted and a warning message is printed to "
#~ "'*STDERR'. The 'busy' call returns a filehandle that contains the "
#~ "intercepted input.\n"
#~ "\n"
#~ "A 'busy' block is therefore useful to prevent attempts at input when the "
#~ "program is busy at some non-interactive task."
#~ msgstr ""
#~ "このモジュールは、対話的なアプリケーションを開発しやすくするための 3 種類"
#~ "のユーティリティサブルーチンを提供しています。\n"
#~ "* 'is_interactive()'\n"
#~ "\n"
#~ "このサブルーチンは、 '*ARGV' と現在選択されているファイルハンドル (通常は "
#~ "'*STDOUT') が端末に接続されているかどうかを確認し、そうであれば true を返"
#~ "します。このテストは下記の方法よりも洗練された仕組みと考えることができま"
#~ "す:\n"
#~ "\n"
#~ "    -t *ARGV && -t *STDOUT\n"
#~ "\n"
#~ "また、 '*ARGV' に対する魔法のような処理も含まれています。\n"
#~ "\n"
#~ "このほか、端末に (現在選択されているファイルハンドルではなく) ファイルハン"
#~ "ドルを接続する必要がある場合は、 'is_interactive' に書き込み可能なファイル"
#~ "ハンドルを指定することもできます。たとえば '*STDERR' などを接続することが"
#~ "できます:\n"
#~ "\n"
#~ "    if ( is_interactive(*STDERR) ) {         carp $warning;     }\n"
#~ "* 'interactive()'\n"
#~ "\n"
#~ "このサブルーチンは、 'is_interactive' が true であった場合に、 '*STDOUT' "
#~ "を返します。 'is_interactive' が false であった場合は、何も表示しないファ"
#~ "イルハンドルを返します。\n"
#~ "\n"
#~ "このサブルーチンは、アプリケーション側で対話処理が必要な場合にのみ出力する"
#~ "ような仕組みを作るためのものです:\n"
#~ "\n"
#~ "    print {interactive} \"Please enter a value: \";     my $value = <>;\n"
#~ "\n"
#~ "このほか、端末に ('*STDOUT' ではなく) ファイルハンドルを接続する必要がある"
#~ "場合は、 'interactive' に書き込み可能なファイルハンドルを指定することもで"
#~ "きます。たとえば、ここでも '*STDERR' などを接続することができます:\n"
#~ "\n"
#~ "    print {interactive(*STDERR)} $warning;\n"
#~ "* 'busy {...}'\n"
#~ "\n"
#~ "このサブルーチンはブロックを受け付ける仕組みで、 1 つのパラメータをとって"
#~ "ブロックを実行します。ブロックが実行されている間、 '*ARGV' は一時的に、閉"
#~ "じられたファイルハンドルに置き換えられます。言い換えると、 'busy' 内のブ"
#~ "ロックでは、 '*ARGV' からの入力ができなくなります。これに加えて、 '*ARGV' "
#~ "を介して 'busy' ブロック内に入力を送信するような仕組みも遮られ、 "
#~ "'*STDERR' に警告メッセージが表示されるようになります。 'busy' が終了する"
#~ "と、遮られた入力を含むファイルハンドルを返します。\n"
#~ "\n"
#~ "'busy' ブロックは、何らかの非対話処理を実施する際、プログラム側にデータが"
#~ "入力できないようにするための仕組みです。"

#~ msgid "Select a pager and pipe text to it if destination is a TTY"
#~ msgstr ""
#~ "出力先が TTY であった場合にページャまたはパイプ出力を選択するモジュール"

#~ msgid "IO::Stty Perl module"
#~ msgstr "IO::Stty  Perl モジュール"

#~ msgid ""
#~ "This is the PERL POSIX compliant stty.\n"
#~ "\n"
#~ "Authors:\n"
#~ "--------     Austin Schutz <auschutz@cpan.org>     Todd Rinaldo "
#~ "<toddr@cpan.org>"
#~ msgstr ""
#~ "PERL による POSIX 互換 stty です。\n"
#~ "\n"
#~ "作者:\n"
#~ "--------     Austin Schutz <auschutz@cpan.org>     Todd Rinaldo "
#~ "<toddr@cpan.org>"

#~ msgid "System() and Background Procs W/ Piping, Redirs, Ptys (Unix, Win32)"
#~ msgstr ""
#~ "パイプ、リダイレクト、擬似端末 (Unix, Win32) に対応した system() とバック"
#~ "グラウンドプロシージャ"

#~ msgid ""
#~ "ExifTool is a customisable set of Perl modules plus a full-featured "
#~ "application for reading and writing meta information in a wide variety of "
#~ "files, including the maker note information of many digital cameras by "
#~ "various manufacturers such as Canon, Casio, FujiFilm, GE, HP, JVC/Victor, "
#~ "Kodak, Leaf, Minolta/Konica-Minolta, Nikon, Olympus/Epson, Panasonic/"
#~ "Leica, Pentax/Asahi, Reconyx, Ricoh, Samsung, Sanyo, Sigma/Foveon and "
#~ "Sony."
#~ msgstr ""
#~ "ExifTool はすべての機能が装備された、各種ファイル対応のメタデータを読み書"
#~ "きするアプリケーションです。デジタルカメラにおける製造元固有の情報にも対応"
#~ "していて、たとえばキヤノン, カシオ, 富士フイルム, GE, HP, JVC／ビクター, "
#~ "コダック, Leaf, ミノルタ／コニカミノルタ, ニコン, オリンパス／エプソン, パ"
#~ "ナソニック／ライカ, ペンタックス／旭光学, Reconyx, リコー, サムスン, サン"
#~ "ヨー, Sigma/Foveon, SONY などに対応しています。"

#~ msgid "Read the Dimensions of an Image in Several Popular Formats"
#~ msgstr "いくつかの有名な形式に対応した画像のサイズ読み込み"

#~ msgid ""
#~ "The Inline module allows you to put source code from other programming "
#~ "languages directly \"inline\" in a Perl script or module. The code is "
#~ "automatically compiled as needed, and then loaded for immediate access "
#~ "from Perl.\n"
#~ "\n"
#~ "Inline saves you from the hassle of having to write and compile your own "
#~ "glue code using facilities like XS or SWIG. Simply type the code where "
#~ "you want it and run your Perl as normal. All the hairy details are "
#~ "handled for you. The compilation and installation of your code chunks all "
#~ "happen transparently; all you will notice is the delay of compilation on "
#~ "the first run.\n"
#~ "\n"
#~ "The Inline code only gets compiled the first time you run it (or whenever "
#~ "it is modified) so you only take the performance hit once. Code that is "
#~ "Inlined into distributed modules (like on the CPAN) will get compiled "
#~ "when the module is installed, so the end user will never notice the "
#~ "compilation time.\n"
#~ "\n"
#~ "Best of all, it works the same on both Unix and Microsoft Windows. See "
#~ "the Inline- Support manpage for support information."
#~ msgstr ""
#~ "Inline モジュールは、 Perl スクリプトまたはモジュールの中に直接他の言語の"
#~ "ソースコードを \"インライン\" で埋め込むモジュールです。コードは必要に応じ"
#~ "て自動的にコンパイルされ、 Perl から即時にアクセスできるよう読み込まれま"
#~ "す。\n"
#~ "\n"
#~ "Inline は XS や SWIG のような機構を使用したグルーコードを作成してコンパイ"
#~ "ルする手間を省くことができます。必要なコードを中に記述して、 Perl を通常通"
#~ "りに実行するだけです。難しい処理は Inline が行ないます。コードチャンクのコ"
#~ "ンパイルとインストールは透過的に行なわれます; 初回の起動時にコンパイルが動"
#~ "作するため、その時にのみ遅いと感じる程度でしょう。\n"
#~ "\n"
#~ "Inline のコードは初回の実行時 (および変更時) にのみコンパイルされるため、"
#~ "性能の劣化もその時だけです。 Inline で記述されたコードは (CPAN などで) モ"
#~ "ジュール内で配布することもできますので、モジュールを読み込んだ時にコンパイ"
#~ "ルが行なわれ、エンドユーザは何もすることなくそのまま実行できるようになりま"
#~ "す。\n"
#~ "\n"
#~ "Unix および Microsoft Windows で同じように動作します。サポート情報につい"
#~ "て、詳しくは Inline- Support のマニュアルページをお読みください。"

#~ msgid ""
#~ "JSON::Validator is a data structure validation library based around at "
#~ "https://json-schema.org/. This module can be used directly with a JSON "
#~ "schema or you can use the elegant DSL schema-builder JSON::Validator::joi "
#~ "to define the schema programmatically."
#~ msgstr ""
#~ "JSON::Validator は https://json-schema.org/ をベースにしたデータ構造の検証"
#~ "ライブラリです。このモジュールは JSON スキーマを直接利用することができるほ"
#~ "か、スキーマを機械的に定義するため、上品な DSL スキーマビルダである JSON::"
#~ "Validator::joi を使用することもできます。"

#~ msgid ""
#~ "The 'Lingua::EN::Sentence' module contains the function get_sentences, "
#~ "which splits text into its constituent sentences, based on a regular "
#~ "expression and a list of abbreviations (built in and given).\n"
#~ "\n"
#~ "Certain well know exceptions, such as abbreviations, may cause incorrect "
#~ "segmentations. But some of them are already integrated into this code and "
#~ "are being taken care of. Still, if you see that there are words causing "
#~ "the get_sentences() to fail, you can add those to the module, so it "
#~ "notices them."
#~ msgstr ""
#~ "'Lingua::EN::Sentence' モジュールでは、 get_sentences と呼ばれる関数が提供"
#~ "されています。この関数は、正規表現と略称一覧 (内蔵のものを使用することがで"
#~ "きるほか、指定することもできます) を利用して、テキストを文章ごとに分割する"
#~ "ことができます。\n"
#~ "\n"
#~ "このようなモジュールは、略称などがあるとうまく動作せず、正しくない分割など"
#~ "が行なわれてしまうことが知られていますが、これらのうちのいくつかは既にコー"
#~ "ド内で対応済みで、配慮されるようになっています。ただし、場合によっては "
#~ "get_sentences()で失敗することがありますので、モジュールに対して追加するこ"
#~ "とで対応できるようになっています。"

#~ msgid "Stemming of words in various languages"
#~ msgstr "様々な言語における単語の語幹抽出"

#~ msgid "scalable directory/file change notification"
#~ msgstr "スケーラブルなディレクトリ／ファイルの変更通知"

#~ msgid ""
#~ "This module implements an interface to the Linux 2.6.13 and later Inotify "
#~ "file/directory change notification sytem."
#~ msgstr ""
#~ "このモジュールは、 Linux 2.6.13 およびそれ以降で対応している、 Inotify "
#~ "ファイル／ディレクトリ変更通知システムに対するインターフェイスを実装してい"
#~ "ます。"

#~ msgid ""
#~ "Locale::Maketext::Gettext joins the GNU gettext and Maketext frameworks. "
#~ "It is a subclass of Locale::Maketext(3) that follows the way GNU gettext "
#~ "works. It works seamlessly, both in the sense of GNU gettext and "
#~ "Maketext. As a result, you enjoy both their advantages, and get rid of "
#~ "both their problems, too."
#~ msgstr ""
#~ "Locale::Maketext::Gettext は GNU gettext と Maketext のフレームワークを合"
#~ "体させたもので、 GNU gettext の動作方式に合わせた Locale::Maketext(3) のサ"
#~ "ブクラスです。 GNU gettext と Maketext の両方の考え方を取り入れ、シームレ"
#~ "スに動作する仕組みです。その結果、両方にそれぞれ存在する問題を回避しなが"
#~ "ら、両方の利点を享受できるような作りになっています。"

#~ msgid "Simple Wrapper Around Log::Dispatch"
#~ msgstr "Log::Dispatch に対するシンプルなラッパー"

#~ msgid "low-calorie MIME generator"
#~ msgstr "低カロリーの MIME 生成モジュール"

#~ msgid "Work with Mac Plists at a Low Level"
#~ msgstr "Mac のプロパティリストを低レベルで操作するモジュール"

#~ msgid "Backend Library for Math::Bigint Etc. Based On Gmp"
#~ msgstr "Gmp をベースにした Math::BigInt 向けバックエンドライブラリ"

#~ msgid "Points On a Path Through the 2-D Plane"
#~ msgstr "2D 平面を介したパス上のポイント"

#~ msgid ""
#~ "This is a base class for some mathematical paths which map an integer "
#~ "position '$n' to and from coordinates '$x,$y' in the 2D plane.\n"
#~ "\n"
#~ "The current classes include the following. The intention is that any "
#~ "'Math::PlanePath::Something' is a PlanePath, and supporting base classes "
#~ "or related things are further down like 'Math::PlanePath::Base::Xyzzy'.\n"
#~ "\n"
#~ "    SquareSpiral           four-sided spiral     PyramidSpiral          "
#~ "square base pyramid     TriangleSpiral         equilateral triangle "
#~ "spiral     TriangleSpiralSkewed   equilateral skewed for compactness     "
#~ "DiamondSpiral          four-sided spiral, looping faster     "
#~ "PentSpiral             five-sided spiral     PentSpiralSkewed       five-"
#~ "sided spiral, compact     HexSpiral              six-sided spiral     "
#~ "HexSpiralSkewed        six-sided spiral skewed for compactness     "
#~ "HeptSpiralSkewed       seven-sided spiral, compact     "
#~ "AnvilSpiral            anvil shape     OctagramSpiral         eight "
#~ "pointed star     KnightSpiral           an infinite knight's tour     "
#~ "CretanLabyrinth        7-circuit extended infinitely\n"
#~ "\n"
#~ "    SquareArms             four-arm square spiral     "
#~ "DiamondArms            four-arm diamond spiral     AztecDiamondRings      "
#~ "four-sided rings     HexArms                six-arm hexagonal spiral     "
#~ "GreekKeySpiral         square spiral with Greek key motif     "
#~ "MPeaks                 \"M\" shape layers\n"
#~ "\n"
#~ "    SacksSpiral            quadratic on an Archimedean spiral     "
#~ "VogelFloret            seeds in a sunflower     TheodorusSpiral        "
#~ "unit steps at right angles     ArchimedeanChords      unit chords on an "
#~ "Archimedean spiral     MultipleRings          concentric circles     "
#~ "PixelRings             concentric rings of midpoint pixels     "
#~ "FilledRings            concentric rings of pixels     "
#~ "Hypot                  points by distance     HypotOctant            "
#~ "first octant points by distance     TriangularHypot        points by "
#~ "triangular distance     PythagoreanTree        X^2+Y^2=Z^2 by trees\n"
#~ "\n"
#~ "    PeanoCurve             3x3 self-similar quadrant     "
#~ "WunderlichSerpentine   transpose parts of PeanoCurve     "
#~ "HilbertCurve           2x2 self-similar quadrant     "
#~ "HilbertSides           2x2 self-similar quadrant segments     "
#~ "HilbertSpiral          2x2 self-similar whole-plane     "
#~ "ZOrderCurve            replicating Z shapes     GrayCode               "
#~ "Gray code splits     WunderlichMeander      3x3 \"R\" pattern "
#~ "quadrant     BetaOmega              2x2 self-similar half-plane     "
#~ "AR2W2Curve             2x2 self-similar of four parts     "
#~ "KochelCurve            3x3 self-similar of two parts     "
#~ "DekkingCurve           5x5 self-similar, edges     DekkingCentres         "
#~ "5x5 self-similar, centres     CincoCurve             5x5 self-similar\n"
#~ "\n"
#~ "    ImaginaryBase          replicate in four directions     "
#~ "ImaginaryHalf          half-plane replicate three directions     "
#~ "CubicBase              replicate in three directions     "
#~ "SquareReplicate        3x3 replicating squares     CornerReplicate        "
#~ "2x2 replicating \"U\"     LTiling                self-simlar L shapes     "
#~ "DigitGroups            digits grouped by zeros     FibonacciWordFractal   "
#~ "turns by Fibonacci word bits\n"
#~ "\n"
#~ "    Flowsnake              self-similar hexagonal tile traversal     "
#~ "FlowsnakeCentres         likewise but centres of hexagons     "
#~ "GosperReplicate        self-similar hexagonal tiling     "
#~ "GosperIslands          concentric island rings     GosperSide             "
#~ "single side or radial\n"
#~ "\n"
#~ "    QuintetCurve           self-similar \"+\" traversal     "
#~ "QuintetCentres           likewise but centres of squares     "
#~ "QuintetReplicate       self-similar \"+\" tiling\n"
#~ "\n"
#~ "    DragonCurve            paper folding     DragonRounded          paper "
#~ "folding rounded corners     DragonMidpoint         paper folding segment "
#~ "midpoints     AlternatePaper         alternating direction folding     "
#~ "AlternatePaperMidpoint alternating direction folding, midpoints     "
#~ "TerdragonCurve         ternary dragon     TerdragonRounded       ternary "
#~ "dragon rounded corners     TerdragonMidpoint      ternary dragon segment "
#~ "midpoints     AlternateTerdragon     alternate ternary dragon     "
#~ "R5DragonCurve          radix-5 dragon curve     R5DragonMidpoint       "
#~ "radix-5 dragon curve midpoints     CCurve                 \"C\" curve     "
#~ "ComplexPlus            base i+realpart     ComplexMinus           base i-"
#~ "realpart, including twindragon     ComplexRevolving       revolving base i"
#~ "+1\n"
#~ "\n"
#~ "    SierpinskiCurve        self-similar right-triangles     "
#~ "SierpinskiCurveStair   self-similar right-triangles, stair-step     "
#~ "HIndexing              self-similar right-triangles, squared up\n"
#~ "\n"
#~ "    KochCurve              replicating triangular notches     "
#~ "KochPeaks              two replicating notches     KochSnowflakes         "
#~ "concentric notched 3-sided rings     KochSquareflakes       concentric "
#~ "notched 4-sided rings     QuadricCurve           eight segment zig-"
#~ "zag     QuadricIslands           rings of those zig-zags     "
#~ "SierpinskiTriangle     self-similar triangle by rows     "
#~ "SierpinskiArrowhead    self-similar triangle connectedly     "
#~ "SierpinskiArrowheadCentres  likewise but centres of triangles\n"
#~ "\n"
#~ "    Rows                   fixed-width rows     Columns                "
#~ "fixed-height columns     Diagonals              diagonals between X and Y "
#~ "axes     DiagonalsAlternating   diagonals Y to X and back again     "
#~ "DiagonalsOctant        diagonals between Y axis and X=Y centre     "
#~ "Staircase              stairs down from the Y to X axes     "
#~ "StaircaseAlternating   stairs Y to X and back again     "
#~ "Corner                 expanding stripes around a corner     "
#~ "PyramidRows            expanding stacked rows pyramid     "
#~ "PyramidSides           along the sides of a 45-degree pyramid     "
#~ "CellularRule           cellular automaton by rule number     "
#~ "CellularRule54         cellular automaton rows pattern     "
#~ "CellularRule57         cellular automaton (rule 99 mirror too)     "
#~ "CellularRule190        cellular automaton (rule 246 mirror too)     "
#~ "UlamWarburton          cellular automaton diamonds     "
#~ "UlamWarburtonQuarter   cellular automaton quarter-plane\n"
#~ "\n"
#~ "    DiagonalRationals      rationals X/Y by diagonals     "
#~ "FactorRationals        rationals X/Y by prime factorization     "
#~ "GcdRationals           rationals X/Y by rows with GCD integer     "
#~ "RationalsTree          rationals X/Y by tree     FractionsTree          "
#~ "fractions 0<X/Y<1 by tree     ChanTree               rationals X/Y multi-"
#~ "child tree     CfracDigits            continued fraction 0<X/Y<1 by "
#~ "digits     CoprimeColumns         coprime X,Y     DivisibleColumns       "
#~ "X divisible by Y     WythoffArray           Fibonacci recurrences     "
#~ "WythoffPreliminaryTriangle     PowerArray             powers in rows     "
#~ "File                   points from a disk file\n"
#~ "\n"
#~ "And in the separate Math-PlanePath-Toothpick distribution\n"
#~ "\n"
#~ "    ToothpickTree          pattern of toothpicks     "
#~ "ToothpickReplicate     same by replication rather than tree     "
#~ "ToothpickUpist         toothpicks only growing upwards     "
#~ "ToothpickSpiral        toothpicks around the origin\n"
#~ "\n"
#~ "    LCornerTree            L-shape corner growth     "
#~ "LCornerReplicate       same by replication rather than tree     "
#~ "OneOfEight     HTree                  H shapes replicated\n"
#~ "\n"
#~ "The paths are object oriented to allow parameters, though many have none. "
#~ "See 'examples/numbers.pl' in the Math-PlanePath sources for a sample "
#~ "printout of numbers from selected paths or all paths."
#~ msgstr ""
#~ "このモジュールは、整数表記の '$n' と二次元座標 '$x,$y' との間を相互に変換"
#~ "することのできる、数学におけるパスを利用するためのベースクラスです。 \n"
#~ "\n"
#~ "現時点では下記のようなクラスが用意されています。それぞれ 'Math::"
#~ "PlanePath::Something' は PlanePath を意図していて、サポートするベースクラ"
#~ "スや関連するクラスは 'Math::PlanePath::Base::Xyzzy' のようなクラスになって"
#~ "います。\n"
#~ "\n"
#~ "    SquareSpiral           four-sided spiral     PyramidSpiral          "
#~ "square base pyramid     TriangleSpiral         equilateral triangle "
#~ "spiral     TriangleSpiralSkewed   equilateral skewed for compactness     "
#~ "DiamondSpiral          four-sided spiral, looping faster     "
#~ "PentSpiral             five-sided spiral     PentSpiralSkewed       five-"
#~ "sided spiral, compact     HexSpiral              six-sided spiral     "
#~ "HexSpiralSkewed        six-sided spiral skewed for compactness     "
#~ "HeptSpiralSkewed       seven-sided spiral, compact     "
#~ "AnvilSpiral            anvil shape     OctagramSpiral         eight "
#~ "pointed star     KnightSpiral           an infinite knight's tour     "
#~ "CretanLabyrinth        7-circuit extended infinitely\n"
#~ "\n"
#~ "    SquareArms             four-arm square spiral     "
#~ "DiamondArms            four-arm diamond spiral     AztecDiamondRings      "
#~ "four-sided rings     HexArms                six-arm hexagonal spiral     "
#~ "GreekKeySpiral         square spiral with Greek key motif     "
#~ "MPeaks                 \"M\" shape layers\n"
#~ "\n"
#~ "    SacksSpiral            quadratic on an Archimedean spiral     "
#~ "VogelFloret            seeds in a sunflower     TheodorusSpiral        "
#~ "unit steps at right angles     ArchimedeanChords      unit chords on an "
#~ "Archimedean spiral     MultipleRings          concentric circles     "
#~ "PixelRings             concentric rings of midpoint pixels     "
#~ "FilledRings            concentric rings of pixels     "
#~ "Hypot                  points by distance     HypotOctant            "
#~ "first octant points by distance     TriangularHypot        points by "
#~ "triangular distance     PythagoreanTree        X^2+Y^2=Z^2 by trees\n"
#~ "\n"
#~ "    PeanoCurve             3x3 self-similar quadrant     "
#~ "WunderlichSerpentine   transpose parts of PeanoCurve     "
#~ "HilbertCurve           2x2 self-similar quadrant     "
#~ "HilbertSides           2x2 self-similar quadrant segments     "
#~ "HilbertSpiral          2x2 self-similar whole-plane     "
#~ "ZOrderCurve            replicating Z shapes     GrayCode               "
#~ "Gray code splits     WunderlichMeander      3x3 \"R\" pattern "
#~ "quadrant     BetaOmega              2x2 self-similar half-plane     "
#~ "AR2W2Curve             2x2 self-similar of four parts     "
#~ "KochelCurve            3x3 self-similar of two parts     "
#~ "DekkingCurve           5x5 self-similar, edges     DekkingCentres         "
#~ "5x5 self-similar, centres     CincoCurve             5x5 self-similar\n"
#~ "\n"
#~ "    ImaginaryBase          replicate in four directions     "
#~ "ImaginaryHalf          half-plane replicate three directions     "
#~ "CubicBase              replicate in three directions     "
#~ "SquareReplicate        3x3 replicating squares     CornerReplicate        "
#~ "2x2 replicating \"U\"     LTiling                self-simlar L shapes     "
#~ "DigitGroups            digits grouped by zeros     FibonacciWordFractal   "
#~ "turns by Fibonacci word bits\n"
#~ "\n"
#~ "    Flowsnake              self-similar hexagonal tile traversal     "
#~ "FlowsnakeCentres         likewise but centres of hexagons     "
#~ "GosperReplicate        self-similar hexagonal tiling     "
#~ "GosperIslands          concentric island rings     GosperSide             "
#~ "single side or radial\n"
#~ "\n"
#~ "    QuintetCurve           self-similar \"+\" traversal     "
#~ "QuintetCentres           likewise but centres of squares     "
#~ "QuintetReplicate       self-similar \"+\" tiling\n"
#~ "\n"
#~ "    DragonCurve            paper folding     DragonRounded          paper "
#~ "folding rounded corners     DragonMidpoint         paper folding segment "
#~ "midpoints     AlternatePaper         alternating direction folding     "
#~ "AlternatePaperMidpoint alternating direction folding, midpoints     "
#~ "TerdragonCurve         ternary dragon     TerdragonRounded       ternary "
#~ "dragon rounded corners     TerdragonMidpoint      ternary dragon segment "
#~ "midpoints     AlternateTerdragon     alternate ternary dragon     "
#~ "R5DragonCurve          radix-5 dragon curve     R5DragonMidpoint       "
#~ "radix-5 dragon curve midpoints     CCurve                 \"C\" curve     "
#~ "ComplexPlus            base i+realpart     ComplexMinus           base i-"
#~ "realpart, including twindragon     ComplexRevolving       revolving base i"
#~ "+1\n"
#~ "\n"
#~ "    SierpinskiCurve        self-similar right-triangles     "
#~ "SierpinskiCurveStair   self-similar right-triangles, stair-step     "
#~ "HIndexing              self-similar right-triangles, squared up\n"
#~ "\n"
#~ "    KochCurve              replicating triangular notches     "
#~ "KochPeaks              two replicating notches     KochSnowflakes         "
#~ "concentric notched 3-sided rings     KochSquareflakes       concentric "
#~ "notched 4-sided rings     QuadricCurve           eight segment zig-"
#~ "zag     QuadricIslands           rings of those zig-zags     "
#~ "SierpinskiTriangle     self-similar triangle by rows     "
#~ "SierpinskiArrowhead    self-similar triangle connectedly     "
#~ "SierpinskiArrowheadCentres  likewise but centres of triangles\n"
#~ "\n"
#~ "    Rows                   fixed-width rows     Columns                "
#~ "fixed-height columns     Diagonals              diagonals between X and Y "
#~ "axes     DiagonalsAlternating   diagonals Y to X and back again     "
#~ "DiagonalsOctant        diagonals between Y axis and X=Y centre     "
#~ "Staircase              stairs down from the Y to X axes     "
#~ "StaircaseAlternating   stairs Y to X and back again     "
#~ "Corner                 expanding stripes around a corner     "
#~ "PyramidRows            expanding stacked rows pyramid     "
#~ "PyramidSides           along the sides of a 45-degree pyramid     "
#~ "CellularRule           cellular automaton by rule number     "
#~ "CellularRule54         cellular automaton rows pattern     "
#~ "CellularRule57         cellular automaton (rule 99 mirror too)     "
#~ "CellularRule190        cellular automaton (rule 246 mirror too)     "
#~ "UlamWarburton          cellular automaton diamonds     "
#~ "UlamWarburtonQuarter   cellular automaton quarter-plane\n"
#~ "\n"
#~ "    DiagonalRationals      rationals X/Y by diagonals     "
#~ "FactorRationals        rationals X/Y by prime factorization     "
#~ "GcdRationals           rationals X/Y by rows with GCD integer     "
#~ "RationalsTree          rationals X/Y by tree     FractionsTree          "
#~ "fractions 0<X/Y<1 by tree     ChanTree               rationals X/Y multi-"
#~ "child tree     CfracDigits            continued fraction 0<X/Y<1 by "
#~ "digits     CoprimeColumns         coprime X,Y     DivisibleColumns       "
#~ "X divisible by Y     WythoffArray           Fibonacci recurrences     "
#~ "WythoffPreliminaryTriangle     PowerArray             powers in rows     "
#~ "File                   points from a disk file\n"
#~ "\n"
#~ "And in the separate Math-PlanePath-Toothpick distribution\n"
#~ "\n"
#~ "    ToothpickTree          pattern of toothpicks     "
#~ "ToothpickReplicate     same by replication rather than tree     "
#~ "ToothpickUpist         toothpicks only growing upwards     "
#~ "ToothpickSpiral        toothpicks around the origin\n"
#~ "\n"
#~ "    LCornerTree            L-shape corner growth     "
#~ "LCornerReplicate       same by replication rather than tree     "
#~ "OneOfEight     HTree                  H shapes replicated\n"
#~ "\n"
#~ "パスはパラメータを許容できるようにするためオブジェクト指向になっています"
#~ "が、そうでないものも多数あります。選択したパスやすべてのパスからの数値出力"
#~ "について、詳しくは Math-PlanePath ソース内の 'examples/numbers.pl' をお読"
#~ "みください。"

#~ msgid "Tools for creating Meta objects to track custom metrics."
#~ msgstr "Meta オブジェクトに対して独自のメトリックを追跡するためのツール"

#~ msgid ""
#~ "Meta programming is becomming more and more popular. The popularity of "
#~ "Meta programming comes from the fact that many problems are made "
#~ "significantly easier. There are a few specialized Meta tools out there, "
#~ "for instance the Class:MOP manpage which is used by the Moose manpage to "
#~ "track class metadata.\n"
#~ "\n"
#~ "Meta::Builder is designed to be a generic tool for writing Meta objects. "
#~ "Unlike specialized tools, Meta::Builder makes no assumptions about what "
#~ "metrics you will care about. Meta::Builder also mkaes it simple for "
#~ "others to extend your meta-object based tools by providing hooks for "
#~ "other packages to add metrics to your meta object.\n"
#~ "\n"
#~ "If a specialized Meta object tool is available ot meet your needs please "
#~ "use it. However if you need a simple Meta object to track a couple "
#~ "metrics, use Meta::Builder.\n"
#~ "\n"
#~ "Meta::Builder is also low-sugar and low-dep. In most cases you will not "
#~ "want a class that needs a meta object to use your meta-object class "
#~ "directly. Rather you will usually want to create a sugar class that "
#~ "exports enhanced API functions that manipulate the meta object."
#~ msgstr ""
#~ "メタプログラミングは日に日に知られるようになってきています。メタプログラミ"
#~ "ングの知名度は、多くの問題が比較的簡単であるという事実から来ています。いく"
#~ "つかの特化したメタツールが公開されていて、たとえば Mosse で使用されている "
#~ "Class:MOP などは、クラスのメタデータを追跡する際に使用するものです。\n"
#~ "\n"
#~ "Meta::Builder はメタオブジェクトを記述するための汎用的なツールです。特化し"
#~ "たツールとは異なり、 Meta::Builder は特定のメトリックを使用していることを"
#~ "想定していません。このほかにも、 Meta::Builder では、お使いのメタオブジェ"
#~ "クト内にメトリックを追加するにあたって、他のパッケージ向けのフックを提供す"
#~ "ることで、メタオブジェクトベースのツールを拡張しやすくする仕組みも用意され"
#~ "ています。\n"
#~ "\n"
#~ "特定の用途に特化したメタオブジェクトツールをご希望の場合は、そちらをお使い"
#~ "管井。しかしながら、メトリックの対を追跡するためのシンプルなメタオブジェク"
#~ "トを必要とする場合は、 Meta::Builder をお使いください。\n"
#~ "\n"
#~ "Meta::Builder は省エネルギーな仕組みです。多くの場合、お使いのメタオブジェ"
#~ "クトのクラスで使用する際、メタオブジェクトを直接必要とするクラスは作成する"
#~ "必要はありません。その代わり、メタオブジェクトを操作するための拡張 API 関"
#~ "数を公開する、 \"シュガークラス\" を作成する必要があるはずです。"

#~ msgid ""
#~ "Minion is a high performance job queue for the Perl programming language, "
#~ "with support for multiple named queues, priorities, delayed jobs, job "
#~ "dependencies, job progress, job results, retries with backoff, rate "
#~ "limiting, unique jobs, expiring jobs, statistics, distributed workers, "
#~ "parallel processing, autoscaling, remote control, at https://mojolicious."
#~ "org admin ui, resource leak protection and multiple backends (such as at "
#~ "https://www.postgresql.org).\n"
#~ "\n"
#~ "Job queues allow you to process time and/or computationally intensive "
#~ "tasks in background processes, outside of the request/response lifecycle "
#~ "of web applications. Among those tasks you'll commonly find image "
#~ "resizing, spam filtering, HTTP downloads, building tarballs, warming "
#~ "caches and basically everything else you can imagine that's not super "
#~ "fast."
#~ msgstr ""
#~ "Minion は Perl プログラミング言語における高性能なジョブキューです。複数の"
#~ "名前付きキューに対応しているほか、優先順位や遅延ジョブ、ジョブ同士の依存関"
#~ "係や進捗管理、結果やバックオフ付きの再試行、ユニークジョブやジョブの有効期"
#~ "限設定、統計情報や分散ワーカー、並行処理や自動スケール、リモートコントロー"
#~ "ル (https://mojolicious.org) 、管理 UI やリソースリーク検出、複数バックエ"
#~ "ンド (https://www.postgresql.org など) の機能があります。 \n"
#~ "\n"
#~ "ジョブキューは裏での一括処理を管理する仕組みで、 Web アプリケーションのリ"
#~ "クエスト／レスポンスとは別枠で動作するものです。これらのタスクには例えば、"
#~ "画像のサイズ変更や SPAM のフィルタリング、 HTTP のダウンロードや tar ボー"
#~ "ルのビルド、キャッシュの再活性化など、あらゆることを非常に高速に処理するこ"
#~ "とができます。"

#~ msgid "Enable All of the Features of Modern Perl with One Import"
#~ msgstr "Perl の新しい機能を一括でインポートするモジュール"

#~ msgid ""
#~ "*Module::Signature* adds cryptographic authentications to CPAN "
#~ "distributions, via the special _SIGNATURE_ file.\n"
#~ "\n"
#~ "If you are a module user, all you have to do is to remember to run "
#~ "'cpansign -v' (or just 'cpansign') before issuing 'perl Makefile.PL' or "
#~ "'perl Build.PL'; that will ensure the distribution has not been tampered "
#~ "with.\n"
#~ "\n"
#~ "Module authors can easily add the _SIGNATURE_ file to the distribution "
#~ "tarball; see NOTES below for how to do it as part of 'make dist'.\n"
#~ "\n"
#~ "If you _really_ want to sign a distribution manually, simply add "
#~ "'SIGNATURE' to _MANIFEST_, then type 'cpansign -s' immediately before "
#~ "'make dist'. Be sure to delete the _SIGNATURE_ file afterwards.\n"
#~ "\n"
#~ "Please also see NOTES about _MANIFEST.SKIP_ issues, especially if you are "
#~ "using *Module::Build* or writing your own _MANIFEST.SKIP_."
#~ msgstr ""
#~ "*Module::Signatur* は CPAN の配布物に対して、特別な _SIGNATURE_ ファイルを"
#~ "介して暗号化された認証機能を提供します。\n"
#~ "\n"
#~ "モジュールのユーザ側の立場では、忘れずに 'perl Makefile.PL' や 'perl "
#~ "Build.PL' を実行する前に 'cpansign -v' (もしくは単に 'cpansign') を実行す"
#~ "るようにします。これにより、配布物が不用意に改変されていないことを確認する"
#~ "ことができます。\n"
#~ "\n"
#~ "モジュールの作者の立場では、配布物の tar ボール内に _SIGNATURE_ ファイルを"
#~ "追加するだけの簡単な作業です。 'make dist' の一部として実行する場合につい"
#~ "ては、 NOTES をお読みください。\n"
#~ "\n"
#~ "配布物に対して手作業で署名を行ないたい場合は、 _MANIFEST_ ファイル内に "
#~ "'SIGNATURE' を追加して、 'make dist' の直後に 'cpansign -s' を実行してくだ"
#~ "さい。なお、作業完了後には忘れずに _SIGNATURE_ ファイルを削除してくださ"
#~ "い。\n"
#~ "\n"
#~ "特に *Module::Build' を利用している場合や、独自の _MANIFEST.SKIP_ を作成し"
#~ "ているような場合など、 _MANIFEST.SKIP_ の問題については NOTES をお読みくだ"
#~ "さい。"

#~ msgid "Simple Starter Kit for Any Module"
#~ msgstr "任意のモジュールに対するシンプルなスターターキット"

#~ msgid ""
#~ "Mojo::DOM58 is a minimalistic and relaxed pure-perl HTML/XML DOM parser "
#~ "based on Mojo::DOM. It supports the at https://html.spec.whatwg.org/ and "
#~ "at http://www.w3.org/TR/xml/, and matching based on at http://www.w3.org/"
#~ "TR/selectors/. It will even try to interpret broken HTML and XML, so you "
#~ "should not use it for validation."
#~ msgstr ""
#~ "Mojo::DOM58 は Mojo::DOM をベースにして、最小限の実装で緩やかな純粋 Perl "
#~ "製の HTML/XML DOM パーサです。 https://html.spec.whatwg.org/ と http://"
#~ "www.w3.org/TR/xml/ にある仕様に対応し、 http://www.w3.org/TR/selectors/ に"
#~ "あるマッチングをベースにしています。ただし、壊れた HTML/XML の処理にも対応"
#~ "していますので、検証用に使用すべきではありません。"

#~ msgid "Mojolicious ♥ PostgreSQL"
#~ msgstr "Mojolicious ♥ PostgreSQL"

#~ msgid ""
#~ "Mojo::Pg is a tiny wrapper around DBD::Pg that makes at http://www."
#~ "postgresql.org a lot of fun to use with the at http://mojolicious.org "
#~ "real-time web framework. Perform queries blocking and non-blocking, use "
#~ "all at https://www.postgresql.org/docs/current/static/sql.html PostgreSQL "
#~ "has to offer, generate CRUD queries from data structures, manage your "
#~ "database schema with migrations and build scalable real-time web "
#~ "applications with the publish/subscribe pattern."
#~ msgstr ""
#~ "Mojo::Pg は DBD::Pg に対する簡易ラッパーで、 http://www.postgresql.org を "
#~ "http://mojolicious.org リアルタイム Web フレームワークで使用するための仕組"
#~ "みです。問い合わせは https://www.postgresql.org/docs/current/static/sql."
#~ "html PostgreSQL が提供するとおり、ブロックあり／無しを選択できます。データ"
#~ "構造から CRUD の問い合わせを生成したり、マイグレーションを利用してデータ"
#~ "ベーススキーマを管理したり、公開／購読パターンを利用して、スケーラブルなリ"
#~ "アルタイム Web アプリケーションを構築することもできます。"

#~ msgid "Tiny Mojolicious Wrapper for Sqlite"
#~ msgstr "Sqlite 向け簡易 Mojolicious ラッパー"

#~ msgid ""
#~ "Mojo::SQLite is a tiny wrapper around DBD::SQLite that makes at https://"
#~ "www.sqlite.org/ a lot of fun to use with the at https://mojolico.us real-"
#~ "time web framework. Use all at http://sqlite.org/lang.html SQLite has to "
#~ "offer, generate CRUD queries from data structures, and manage your "
#~ "database schema with migrations.\n"
#~ "\n"
#~ "Database and statement handles are cached automatically, so they can be "
#~ "reused transparently to increase performance. And you can handle "
#~ "connection timeouts gracefully by holding on to them only for short "
#~ "amounts of time.\n"
#~ "\n"
#~ "  use Mojolicious::Lite;   use Mojo::SQLite;\n"
#~ "\n"
#~ "  helper sqlite => sub { state $sql = Mojo::SQLite->new('sqlite:test."
#~ "db') };\n"
#~ "\n"
#~ "  get '/' => sub {     my $c  = shift;     my $db = $c->sqlite->db;     "
#~ "$c->render(json => $db->query('select datetime(\"now\",\"localtime\") as "
#~ "now')->hash);   };\n"
#~ "\n"
#~ "  app->start;\n"
#~ "\n"
#~ "In this example application, we create a 'sqlite' helper to store a Mojo::"
#~ "SQLite object. Our action calls that helper and uses the method Mojo::"
#~ "SQLite/\"db\" to dequeue a Mojo::SQLite::Database object from the "
#~ "connection pool. Then we use the method Mojo::SQLite::Database/\"query\" "
#~ "to execute an at http://www.postgresql.org/docs/current/static/sql.html "
#~ "statement, which returns a Mojo::SQLite::Results object. And finally we "
#~ "call the method Mojo::SQLite::Results/\"hash\" to retrieve the first row "
#~ "as a hash reference.\n"
#~ "\n"
#~ "All I/O and queries are performed synchronously. However, the \"Write-"
#~ "Ahead Log\" journal is enabled for all connections, allowing multiple "
#~ "processes to read and write concurrently to the same database file (but "
#~ "only one can write at a time). You can prevent this mode from being "
#~ "enabled by passing the option 'no_wal', but note that this is "
#~ "incompatible with SQLite databases that have already had WAL mode "
#~ "enabled. See http://sqlite.org/wal.html and DBD::SQLite/\"journal_mode\" "
#~ "for more information.\n"
#~ "\n"
#~ "     my $pid = fork || die $!;   say $sql->db->query('select "
#~ "datetime(\"now\",\"localtime\") as time')->hash->{time};   exit unless "
#~ "$pid;\n"
#~ "\n"
#~ "All cached database handles will be reset automatically if a new process "
#~ "has been forked, this allows multiple processes to share the same Mojo::"
#~ "SQLite object safely.\n"
#~ "\n"
#~ "Any database errors will throw an exception as 'RaiseError' is "
#~ "automatically enabled, so use 'eval' or Try::Tiny to catch them. This "
#~ "makes transactions with Mojo::SQLite::Database/\"begin\" easy.\n"
#~ "\n"
#~ "While passing a file path of ':memory:' (or a custom \"dsn\" with "
#~ "'mode=memory') will create a temporary database, in-memory databases "
#~ "cannot be shared between connections, so subsequent calls to \"db\" may "
#~ "return connections to completely different databases. For a temporary "
#~ "database that can be shared between connections and processes, pass a "
#~ "file path of ':temp:' to store the database in a temporary directory "
#~ "(this is the default), or consider constructing a temporary directory "
#~ "yourself with File::Temp if you need to reuse the filename. A temporary "
#~ "directory allows SQLite to create at https://www.sqlite.org/tempfiles."
#~ "html safely.\n"
#~ "\n"
#~ "  use File::Spec::Functions 'catfile';   use File::Temp;   use Mojo::"
#~ "SQLite;   my $tempdir = File::Temp->newdir; # Deleted when object goes "
#~ "out of scope   my $tempfile = catfile $tempdir, 'test.db';   my $sql = "
#~ "Mojo::SQLite->new->from_filename($tempfile);"
#~ msgstr ""
#~ "Mojo::SQLite は DBD::SQLute に対する簡易なラッパーで、 http://mojolicious."
#~ "org リアルタイム Web フレームワークで https://www.sqlite.org/ を利用できる"
#~ "ようにする仕組みです。 http://sqlite.org/lang.html SQLite が提供する全ての"
#~ "機能を利用することができます。データ構造に対する CRUD クエリや移行を含む"
#~ "データベーススキーマの管理、そして公開／購読パターンを利用したスケーラブル"
#~ "でリアルタイムな Web アプリケーションを構築することができます。\n"
#~ "\n"
#~ "データベースとステートメントのハンドルは自動的に作成され、性能を上げるため"
#~ "に自動的に再利用されるようになっています。また、接続タイムアウトについても"
#~ "うまく処理するように作られていて、長く待たされてしまうようなことも無くなっ"
#~ "ています。\n"
#~ "\n"
#~ "  use Mojolicious::Lite;   use Mojo::SQLite;\n"
#~ "\n"
#~ "  helper sqlite => sub { state $sql = Mojo::SQLite->new('sqlite:test."
#~ "db') };\n"
#~ "\n"
#~ "  get '/' => sub {     my $c  = shift;     my $db = $c->sqlite->db;     "
#~ "$c->render(json => $db->query('select datetime(\"now\",\"localtime\") as "
#~ "now')->hash);   };\n"
#~ "\n"
#~ "  app->start;\n"
#~ "\n"
#~ "上記のサンプルアプリケーションでは、 'pg' ヘルパーを作成して Mojo::SQLite "
#~ "オブジェクトを保存しています。アクションではそのヘルパーを呼び出して、  "
#~ "Mojo::SQLite/\"db\" で接続プールから Mojo::SQLite::Database オブジェクトを"
#~ "キューから取り出しています。あとは Mojo::SQLite::Database/\"query\" を利用"
#~ "して SQL (http://www.postgresql.org/docs/current/static/sql.html) ステート"
#~ "メントを実行し、結果を Mojo::SQLite::Results の形式で受け取っています。最"
#~ "後に Mojo::SQLite::Results/\"hash\" を呼び出して、ハッシュ参照の形で最初の"
#~ "行を取り出しています。\n"
#~ "\n"
#~ "全ての I/O と問い合わせは同期して処理されます。しかしながら、全ての接続に"
#~ "対して \"ログ先行書き込み\" ジャーナルを有効にすることで、複数のプロセスか"
#~ "ら同じデータベースファイルに対して、同時に読み書きすることができるようにな"
#~ "ります (ただし書き込みは複数のプロセスから同時に行なうことはできません) 。"
#~ "また、このモードは 'no_wal' オプションを指定することで無効化することもでき"
#~ "ますが、既に WAL モードが有効化された SQLite データベースが存在する場合"
#~ "は、非互換性を生んでしまいます。詳しくは http://sqlite.org/wal.html およ"
#~ "び DBD::SQLite/\"journal_mode\" をお読みください。\n"
#~ "\n"
#~ "     my $pid = fork || die $!;   say $sql->db->query('select "
#~ "datetime(\"now\",\"localtime\") as time')->hash->{time};   exit unless "
#~ "$pid;\n"
#~ "\n"
#~ "なお、新しいプロセスが fork されると、全てのキャッシュ済みデータベースハン"
#~ "ドルがリセットされます。これにより、同じ Mojo::Pg を共有する複数のプロセス"
#~ "が合った場合も、安全に動作することになります。\n"
#~ "\n"
#~ "全てのデータベースエラーは、 'RaiseError' を自動的に有効化して例外としてス"
#~ "ローします。そのため、 'eval' や Try::Tiny などを利用することで、これらを"
#~ "キャッチすることができます。これにより、 Mojo::SQLite::Database/\"begin\" "
#~ "によるトランザクション処理を簡単に作ることができるようになっています。\n"
#~ "\n"
#~ "なお、ファイルパスに ':memory:' (もしくは 'mode=memory' を指定した独自の "
#~ "\"dsn\") を指定すると、一時的なメモリデータベースを作成することができま"
#~ "す。メモリデータベースは接続間で共有することができませんので、 \"db\" を呼"
#~ "び出すたびに全く異なるデータベースを返すことに注意してください。接続やプロ"
#~ "セスを跨いで共有できる一時データベースを作成したい場合は、ファイルパスに "
#~ "':temp:' を指定してください。これにより、データベースをテンポラリディレク"
#~ "トリ内に作成することかできます。また、ファイル名を再利用したい場合は、 "
#~ "File::Temp でディレクトリを作成して指定してください。テンポラリディレクト"
#~ "リを利用することで、 SQLite のデータベースを安全に作成することができま"
#~ "す。\n"
#~ "\n"
#~ "  use File::Spec::Functions 'catfile';   use File::Temp;   use Mojo::"
#~ "SQLite;   my $tempdir = File::Temp->newdir; # Deleted when object goes "
#~ "out of scope   my $tempfile = catfile $tempdir, 'test.db';   my $sql = "
#~ "Mojo::SQLite->new->from_filename($tempfile);"

#~ msgid ""
#~ "Compress and convert css, less, sass, javascript and coffeescript files"
#~ msgstr "css/less/sass/javascript/coffeescript ファイルの圧縮と変換"

#~ msgid ""
#~ "Mojolicious::Plugin::AssetPack is Mojolicious plugin for processing "
#~ "static assets. The idea is that JavaScript and CSS files should be served "
#~ "as one minified file to save bandwidth and roundtrip time to the server.\n"
#~ "\n"
#~ "There are many external tools for doing this, but integrating them with "
#~ "Mojolicious can be a struggle: You want to serve the source files "
#~ "directly while developing, but a minified version in production. This "
#~ "assetpack plugin will handle all of that automatically for you.\n"
#~ "\n"
#~ "Your application creates and refers to an asset by its topic (virtual "
#~ "asset name). The process of building actual assets from their components "
#~ "is delegated to \"pipe objects\". Please see Mojolicious::Plugin::"
#~ "AssetPack::Guides::Tutorial/Pipes for a complete list."
#~ msgstr ""
#~ "Mojolicious::Plugin::AssetPack は固定のアセットを処理するための "
#~ "Mojolicious のプラグインです。サーバとの帯域やラウンドトリップタイムの問題"
#~ "を最小化するため、 JavaScript や CSS ファイルは最小限のサイズにすべきであ"
#~ "る、という考え方から来ているものです。\n"
#~ "\n"
#~ "ここにはこれを実現するための多数の外部ツールが存在していますが、 "
#~ "Mojolicious 本体への統合は戦いでもあります: 開発中はソースファイルを直接提"
#~ "供したくても、本番環境ではそれを小さくまとめて送りたいものです。このアセッ"
#~ "トパックプラグインは、これらの処理をすべてを自動的に行ないます。\n"
#~ "\n"
#~ "お使いのアプリケーションはトピック (仮想アセット名) でアセットを作成して参"
#~ "照します。コンポーネントからの実際のアセット構築処理は、 \"パイプオブジェ"
#~ "クト\" に移譲されています。完全なリストについて、詳しくは Mojolicious::"
#~ "Plugin::AssetPack::Guides::Tutorial/Pipes をお読みください。"

#~ msgid "Serialization Framework for Moose Classes"
#~ msgstr "Moose クラス向けシリアライズフレームワーク"

#~ msgid ""
#~ "The Net::CIDR package contains functions that manipulate lists of IP "
#~ "netblocks expressed in CIDR notation. The Net::CIDR functions handle both "
#~ "IPv4 and IPv6 addresses."
#~ msgstr ""
#~ "Net::CIDR パッケージには、 CIDR 形式で表記された IP ネットブロックリストの"
#~ "操作を行なうための関数が含まれています。 Net::CIDR の関数は、 IPv4 と "
#~ "IPv6 の両方のアドレスを扱うことができます。"

#~ msgid ""
#~ "This module provides an easy-to-use interface for encoding and decoding "
#~ "Internationalized Domain Names (IDNs).\n"
#~ "\n"
#~ "IDNs use characters drawn from a large repertoire (Unicode), but IDNA "
#~ "allows the non-ASCII characters to be represented using only the ASCII "
#~ "characters already allowed in so-called host names today (letter-digit-"
#~ "hypen, '/[A-Z0-9-]/i').\n"
#~ "\n"
#~ "Use this module if you just want to convert domain names (or email "
#~ "addresses), using whatever IDNA standard is the best choice at the "
#~ "moment.\n"
#~ "\n"
#~ "You should be familiar with Unicode support in perl, as this module "
#~ "expects correctly encoded input. See the perlunitut manpage, the "
#~ "perluniintro manpage and the perlunicode manpage for details."
#~ msgstr ""
#~ "このモジュールは、国際ドメイン名 (IDN) をエンコードしたりデコードしたりす"
#~ "るための使いやすいインターフェイスです。\n"
#~ "\n"
#~ "IDN は様々なレパートリーから構成される文字 (Unicode) を使用していますが、 "
#~ "IDNA は現代のホスト名に対してすでに許可されている文字 (英字／数字／ハイフ"
#~ "ン: '/[A-Z0-9-]/i') のみを利用して、非 ASCII 文字を表現するように規定して"
#~ "います。\n"
#~ "\n"
#~ "ドメイン名 (またはメールアドレス) を変換したい場合は、このモジュールをお使"
#~ "いください。それは、 IDNA 標準が現時点では最適の選択肢であるためです。\n"
#~ "\n"
#~ "このモジュールは正しくエンコードされた文字を期待する構造から、 Perl の "
#~ "Unicode について詳しく知っていることが前提とになります。詳しくは "
#~ "perlunitut, perluniintro, perlunicode の各マニュアルページをお読みくださ"
#~ "い。"

#~ msgid "Stringprep Profile for Internationalized Domain Names (S<RFC3491>)"
#~ msgstr "国際ドメイン名 (S<RFC 3491>) 向け Stringprep プロファイル"

#~ msgid "Pure-Perl Implementation of the Ripe Database Client"
#~ msgstr "Ripe データベースクライアントの純粋 Perl 実装"

#~ msgid "Assemble/Disassemble Network Packets at the Protocol Level"
#~ msgstr ""
#~ "ネットワークパケットをプロトコルレベルで組み立てまたは分解するモジュール"

#~ msgid ""
#~ "Object::Signature is an abstract base class that you can inherit from in "
#~ "order to allow your objects to generate unique cryptographic signatures.\n"
#~ "\n"
#~ "The method used to generate the signature is based on Storable and "
#~ "Digest::MD5. The object is fed to 'Storable::nfreeze' to get a string, "
#~ "which is then passed to Digest::MD5::md5_hex to get a unique 32 character "
#~ "hexidecimal signature."
#~ msgstr ""
#~ "Object::Signature は抽象化されたオブジェクトクラスで、独自の電子署名を生成"
#~ "するオブジェクトを作成できるようにするために、このクラスを派生させることが"
#~ "できるものです。\n"
#~ "\n"
#~ "署名を生成するために使用されるメソッドは Storable と Digest::MD5 をベース"
#~ "にしています。オブジェクトから文字列を得るために 'Storable::nfreeze' が使"
#~ "用され、ユニークな 16 進数 32 文字を得るために、 Digest::MD5::md5_hex が呼"
#~ "び出されます。"

#~ msgid ""
#~ "This Perl class parses Perl string literals and things that are "
#~ "reasonably like string literals. Its real reason for being is to find "
#~ "interpolated variables for Perl::Critic policies and similar code."
#~ msgstr ""
#~ "この Perl クラスは Perl の文字列リテラルと、文字列リテラルのように記述され"
#~ "ているものを処理します。 Perl::Critic ポリシーと同様のコードのための内挿さ"
#~ "れた変数を見つけることが実際の理由です。"

#~ msgid "Extensions to L<PPI|PPI>."
#~ msgstr "L<PPI|PPI> 向け拡張"

#~ msgid "Play with Other Peoples' Lexical Variables"
#~ msgstr "他の人々のレキシカル変数の使用"

#~ msgid "Pango Perl module"
#~ msgstr "Pango Perl モジュール"

#~ msgid ""
#~ "A big part of good API design is that we should be able to be flexible in "
#~ "the ways that we take parameters.\n"
#~ "\n"
#~ "Params::Coerce attempts to encourage this, by making it easier to take a "
#~ "variety of different arguments, while adding negligable additional "
#~ "complexity to your code."
#~ msgstr ""
#~ "良い API 設計で重要な点は、パラメータを取る方法によって柔軟な仕組みになり"
#~ "うるものであることだ。\n"
#~ "\n"
#~ "Params::Coerce はこのような仕組みを支援するためのもので、様々な種類のパラ"
#~ "メータを取ることで、コード内の複雑性をあまり増やさない仕組みを提供します。"

#~ msgid "Parses .Pm File As Pause Does"
#~ msgstr "pause と同じ方法での .pm ファイルの処理"

#~ msgid "Some Add-On Perlcritic Policies"
#~ msgstr "いくつかのアドオン Perlcritic ポリシー"

#~ msgid "Formatter for Spellchecking Pod"
#~ msgstr "スペルチェック Pod 向けフォーマッタ"

#~ msgid "Perl Graphic Toolkit"
#~ msgstr "Perl グラフィックツールキット"

#~ msgid "simple, intuitive interface to the fork() system call"
#~ msgstr "fork() システムコールに対するシンプルで直感的なインターフェイス"

#~ msgid "Qm-like superpositions for Perl"
#~ msgstr "Perl 向けの Qm 風重ね合わせ"

#~ msgid ""
#~ "The Quantum::Superpositions module provides a new scalar data structure: "
#~ "the superposition. In a metaphor drawn from quantum mechanics, "
#~ "superpositions store a collection of values by overlaying them in "
#~ "parallel superimposed states within a single scalar variable.\n"
#~ "\n"
#~ "\n"
#~ "\n"
#~ "Authors:\n"
#~ "--------     Damian Conway <damian@conway.org>"
#~ msgstr ""
#~ "Quantum::Superpositions モジュールは、\"重ね合わせ\" という新しいスカラー"
#~ "データ構造を 提供します。これは量子力学で作られた隠喩で、 重ね合わせとは単"
#~ "一のスカラー値内で同時に重ね合わせられた状態が保存されている ことを指しま"
#~ "す。\n"
#~ "\n"
#~ "\n"
#~ "\n"
#~ "作者:\n"
#~ "--------     Damian Conway <damian@conway.org>"

#~ msgid "Glue between Perl and SDL"
#~ msgstr "Perl と SDL の間を結ぶグルー"

#~ msgid "Manipulate Structured Data Definitions (Sql and More)"
#~ msgstr "構造化されたデータ定義の操作 (SQL 等)"

#~ msgid ""
#~ "Selenium is a test tool that allows you to write automated web "
#~ "application UI tests in any programming language against any HTTP website "
#~ "using any mainstream JavaScript-enabled browser. This module is an "
#~ "implementation of the client for the Remote driver that Selenium "
#~ "provides. You can find bindings for other languages at this location:\n"
#~ "\n"
#~ "http://code.google.com/p/selenium/\n"
#~ "\n"
#~ "This module sends commands directly to the Server using HTTP. Using this "
#~ "module together with the Selenium Server, you can automatically control "
#~ "any supported browser. To use this module, you need to have already "
#~ "downloaded and started the Selenium Server (Selenium Server is a Java "
#~ "application)."
#~ msgstr ""
#~ "Selenium は自動化された Web アプリケーションの UI テストを、任意のプログラ"
#~ "ミング言語で作成し、任意の HTTP Web サイトに対して任意の主な JavaScript 対"
#~ "応のブラウザで実施することのできる、テストツールです。このモジュールは "
#~ "Selenium が提供する Remote ドライバ向けのクライアント実装です。他の言語に"
#~ "対するバインディングは、下記をご覧ください:\n"
#~ "\n"
#~ "http://code.google.com/p/selenium/\n"
#~ "\n"
#~ "このモジュールは HTTP を利用してサーバにコマンドを送信します。このモジュー"
#~ "ルを Selenium サーバとともに使用すると、任意の対応ブラウザを自動的に制御す"
#~ "ることができます。このモジュールを使用するには、 Selenium サーバをダウン"
#~ "ロードおよび開始しておく必要があります (Selenium サーバは Java アプリケー"
#~ "ションです) 。"

#~ msgid "Set of Objects and Strings"
#~ msgstr "オブジェクト／文字列集"

#~ msgid "Perl interface for the sendmsg/recvmsg functions"
#~ msgstr "sendmsg/recvmsg 機能向け Perl インターフェイス"

#~ msgid ""
#~ "Socket::MsgHdr provides advanced socket messaging operations via sendmsg "
#~ "and recvmsg.\n"
#~ "\n"
#~ "\n"
#~ "\n"
#~ "Authors:\n"
#~ "--------     Michael J. Pomraning"
#~ msgstr ""
#~ "Socket::MsgHdr は、 sendmsg/recvmsg を介した高機能なソケットメッセージ操作"
#~ "を 提供します。\n"
#~ "\n"
#~ "\n"
#~ "\n"
#~ "作者:\n"
#~ "--------     Michael J. Pomraning"

#~ msgid "Make Simple Lightweight Record-Like Structures"
#~ msgstr "シンプルな軽量型レコード構造を作成するモジュール"

#~ msgid "Helper Routines for Using Sub::Exporter to Build Methods"
#~ msgstr ""
#~ "メソッドを構築するために Sub::Exporter を利用するためのヘルパールーチン"

#~ msgid ""
#~ "Algorithm::Annotate generates a list that is useful for generating output "
#~ "similar to 'cvs annotate'."
#~ msgstr ""
#~ "Algorithm::Annotate は、 'cvs annotate' に似た出力を生成する際に便利なリス"
#~ "ト生成モジュールです。"

#~ msgid ""
#~ "'Test::Compile' lets you check the whether your perl modules and scripts "
#~ "compile properly, and report its results in standard 'Test::Simple' "
#~ "fashion.\n"
#~ "\n"
#~ "The basic usage - as shown above, will locate your perl files and test "
#~ "that they all compile.\n"
#~ "\n"
#~ "Module authors can (and probably should) include the following in a _t/00-"
#~ "compile.t_ file and have 'Test::Compile' automatically find and check all "
#~ "Perl files in a module distribution:\n"
#~ "\n"
#~ "         use strict;     use warnings;     use Test::Compile;     my "
#~ "$test = Test::Compile->new();     $test->all_files_ok();     $test-"
#~ ">done_testing();"
#~ msgstr ""
#~ "'Test::Compile' はお使いの Perl モジュールやスクリプトが正しくコンパイルで"
#~ "きるかどうかをチェックし、結果を標準の 'Test::Simple' の方式で報告しま"
#~ "す。\n"
#~ "\n"
#~ "基本的な使い方は上述のとおりで、お使いの Perl ファイルを検索してすべてのコ"
#~ "ンパイルをテストします。\n"
#~ "\n"
#~ "モジュールの作者は下記のような _t/00-comple.t_ ファイルを含めることができ"
#~ "ます (含めておくべきです) 。これにより、 'Test::Compile' が自動的に検出さ"
#~ "れ、モジュールの配布物の中ですべての Perl ファイルをチェックします:\n"
#~ "\n"
#~ "         use strict;     use warnings;     use Test::Compile;     my "
#~ "$test = Test::Compile->new();     $test->all_files_ok();     $test-"
#~ ">done_testing();"

#~ msgid ""
#~ "Sometimes, testing code involves making sure that files are created and "
#~ "deleted as expected. This module simplifies maintaining test directories "
#~ "by tracking their status as they are modified or tested with this API, "
#~ "making it simple to test both individual files, as well as to verify that "
#~ "there are no missing or unknown files.\n"
#~ "\n"
#~ "Test::Directory implements an object-oriented interface for managing test "
#~ "directories. It tracks which files it knows about (by creating or testing "
#~ "them via its API), and can report if any files were missing or "
#~ "unexpectedly added.\n"
#~ "\n"
#~ "There are two flavors of methods for interacting with the directory. "
#~ "_Utility_ methods simply return a value (i.e. the number of files/errors) "
#~ "with no output, while the _Test_ functions use Test::Builder to produce "
#~ "the approriate test results and diagnostics for the test harness.\n"
#~ "\n"
#~ "The directory will be automatically cleaned up when the object goes out "
#~ "of scope; see the _clean_ method below for details."
#~ msgstr ""
#~ "場合によっては、テスト用のコードでは特定のファイルが作成されたり削除された"
#~ "りすることを確認するものがあります。このモジュールは、テストディレクトリの"
#~ "状態を、この API で変更またはテストされたときに追跡することによって、テス"
#~ "トディレクトリの管理を簡素化します。また、ファイルが失われてしまったり、未"
#~ "知のファイルが現われた場合の検証を行なうこともできます。\n"
#~ "\n"
#~ "Test::Directory では、オブジェクト指向のインターフェイスを実装して、テスト"
#~ "ディレクトリの管理を行なっています。どのファイルが (APIを使用して作成また"
#~ "はテストして) 既知のものであるかを追跡し、見つからなかったファイルや予期せ"
#~ "ず追加されたファイルがあるかどうかを報告することができます。\n"
#~ "\n"
#~ "ディレクトリを扱うメソッドとしては 2 種類のものがあります。 _Utility_ メ"
#~ "ソッドでは単純に値 (ファイルやエラーの数) を返すだけで、何も出力を行ないま"
#~ "せん。 _Test_ メソッドでは Test::Builder を使用して、適切なテスト結果を生"
#~ "成したり、テストハーネスの分析を行なうことができます。\n"
#~ "\n"
#~ "また、オブジェクトがスコープ外に外れると、ディレクトリが自動的にクリーン"
#~ "アップされます。詳しくは _clean_ メソッドをお読みください。"

#~ msgid "Test File Attributes"
#~ msgstr "ファイル属性のテスト"

#~ msgid ""
#~ "This module is a subclass of LWP::UserAgent which overrides a few key low-"
#~ "level methods that are concerned with actually sending your request over "
#~ "the network, allowing an interception of that request and simulating a "
#~ "particular response. This greatly facilitates testing of client "
#~ "networking code where the server follows a known protocol.\n"
#~ "\n"
#~ "The synopsis describes a typical case where you want to test how your "
#~ "application reacts to various responses from the server. This module will "
#~ "let you send back various responses depending on the request, without "
#~ "having to set up a real server to test against. This can be invaluable "
#~ "when you need to test edge cases or error conditions that are not "
#~ "normally returned from the server.\n"
#~ "\n"
#~ "There are a lot of different ways you can set up the response mappings, "
#~ "and hook into this module; see the documentation for the individual "
#~ "interface methods.\n"
#~ "\n"
#~ "You can use a PSGI app to handle the requests - see _examples/call_psgi."
#~ "t_ in this distribution, and also register_psgi below.\n"
#~ "\n"
#~ "OR, you can route some or all requests through the network as normal, but "
#~ "still gain the hooks provided by this class to test what was sent and "
#~ "received:\n"
#~ "\n"
#~ "    my $useragent = Test::LWP::UserAgent->new(network_fallback => 1);\n"
#~ "\n"
#~ "or:\n"
#~ "\n"
#~ "    $useragent->map_network_response(qr/real.network.host/);\n"
#~ "\n"
#~ "    \n"
#~ "\n"
#~ "         is(         $useragent->last_useragent->timeout,         "
#~ "180,         'timeout was overridden properly',     );     "
#~ "is(         $useragent->last_http_request_sent->uri,         'uri my code "
#~ "should have constructed',     );     is(         $useragent-"
#~ ">last_http_response_received->code,         '200',         'I should have "
#~ "gotten an OK response',     );"
#~ msgstr ""
#~ "このモジュールは LWP::UserAgent のサブクラスで、実際にネットワークを介して"
#~ "リクエストを送信するような主要な低レベルのメソッドに対してオーバーライドを"
#~ "行なうことで、リクエストの送信を傍受し、特定の応答を擬似します。これによ"
#~ "り、サーバ側が既知のプロトコルを使用している場合、クライアント側のネット"
#~ "ワークコードのテストを非常にやりやすくすることができます。\n"
#~ "\n"
#~ "synopsis には、アプリケーションがサーバからの様々な応答に反応する際の典型"
#~ "的なテストケースが示されています。このモジュールは、テスト先となる実際の"
#~ "サーバを用意することなく、要求に応じて様々な応答を返すことができます。この"
#~ "モジュールは、非常にまれなケースをテストしたり、通常はサーバから返されない"
#~ "ようなエラーをテストしたりしたい場合には、非常に価値のあるものになりま"
#~ "す。\n"
#~ "\n"
#~ "応答は様々な方法で設定することができますし、モジュール内のフックを設定する"
#~ "こともできます。個別のインターフェイスメソッドについて、詳しくはドキュメン"
#~ "テーションをお読みください。\n"
#~ "\n"
#~ "要求を処理する際、 PSGI アプリケーションを使用することもできます。詳しくは"
#~ "配布物内の _examples/call_psgi.t_ および /register_psgi をご覧ください。\n"
#~ "\n"
#~ "また、要求のうちのいくつか、もしくはそのすべてを通常通りネットワーク経由で"
#~ "送信することもできます。この場合、このクラスが提供するフックを利用して、送"
#~ "受信されるデータをテストすることもできます:\n"
#~ "\n"
#~ "    my $useragent = Test::LWP::UserAgent->new(network_fallback => 1);\n"
#~ "\n"
#~ "もしくは、下記のようにすることもできます:\n"
#~ "\n"
#~ "    $useragent->map_network_response(qr/real.network.host/);\n"
#~ "\n"
#~ "    \n"
#~ "\n"
#~ "         is(         $useragent->last_useragent->timeout,         "
#~ "180,         'timeout was overridden properly',     );     "
#~ "is(         $useragent->last_http_request_sent->uri,         'uri my code "
#~ "should have constructed',     );     is(         $useragent-"
#~ ">last_http_response_received->code,         '200',         'I should have "
#~ "gotten an OK response',     );"

#~ msgid "interact with a t/test_manifest file"
#~ msgstr "t/test_manifest ファイルの処理"

#~ msgid "Assert Reference Counts On Objects"
#~ msgstr "オブジェクトに対するアサート参照カウント"

#~ msgid ""
#~ "The intent of this module is to provide a series of basic tests for 80% "
#~ "of the testing you will need to do for scripts in the _script_ (or _bin_ "
#~ "as is also commonly used) paths of your Perl distribution.\n"
#~ "\n"
#~ "Further, it aims to provide this functionality with perfect platform-"
#~ "compatibility, and in a way that is as unobtrusive as possible.\n"
#~ "\n"
#~ "That is, if the program works on a platform, then *Test::Script* should "
#~ "always work on that platform as well. Anything less than 100% is "
#~ "considered unacceptable.\n"
#~ "\n"
#~ "In doing so, it is hoped that *Test::Script* can become a module that you "
#~ "can safely make a dependency of all your modules, without risking that "
#~ "your module won't on some platform because of the dependency.\n"
#~ "\n"
#~ "Where a clash exists between wanting more functionality and maintaining "
#~ "platform safety, this module will err on the side of platform safety."
#~ msgstr ""
#~ "このモジュールは、お使いの Perl 配布物内の _script_ パス (もしくは一般に使"
#~ "用される _bin_ パス) にあるスクリプトに対して、必要なテスト量の 80% を占め"
#~ "る基本テストを提供することを目的にしています。\n"
#~ "\n"
#~ "これに加えて、完全なプラットフォーム互換性を持つ機能の提供と、できる限り控"
#~ "えめな機能の提供を目的としています。\n"
#~ "\n"
#~ "言い換えれば、そのプログラムを特定のプラットフォーム上で動作させる場合、 "
#~ "*Test::Scriot* もまた同じプラットフォームで動作すべきです。 100% を下回る"
#~ "状況は受け入れられるものではありません。\n"
#~ "\n"
#~ "これを実現する際、 *Test::Script* がお使いのすべてのモジュールに対して安全"
#~ "に依存関係を作成できるモジュールであることが望ましく、依存関係の理由で特定"
#~ "のプラットフォームで問題を発生させるようなリスクもないことが望まれます。\n"
#~ "\n"
#~ "さらなる機能への欲求とプラットフォームの安全性維持との間で衝突が発生した場"
#~ "合、このモジュールはプラットフォームの安全性を優先してエラーを発生させま"
#~ "す。"

#~ msgid "Check for Spelling Errors in Pod Files"
#~ msgstr "POD ファイル内のスペルミスのチェック"

#~ msgid ""
#~ "'Test::Spelling' lets you check the spelling of a POD file, and report "
#~ "its results in standard 'Test::More' fashion. This module requires a "
#~ "spellcheck program such as _spell_, _aspell_, _ispell_, or _hunspell_.\n"
#~ "\n"
#~ "    use Test::Spelling;     pod_file_spelling_ok('lib/Foo/Bar.pm', 'POD "
#~ "file spelling OK');\n"
#~ "\n"
#~ "Note that it is a bad idea to run spelling tests during an ordinary CPAN "
#~ "distribution install, or in a package that will run in an uncontrolled "
#~ "environment. There is no way of predicting whether the word list or "
#~ "spellcheck program used will give the same results. You *can* include the "
#~ "test in your distribution, but be sure to run it only for authors of the "
#~ "module by guarding it in a 'skip_all unless -d 'inc/.author'' clause, or "
#~ "by putting the test in your distribution's _xt/_ directory. Anyway, "
#~ "people installing your module really do not need to run such tests, as it "
#~ "is unlikely that the documentation will acquire typos while in "
#~ "transit. :-)\n"
#~ "\n"
#~ "You can add your own stop words, which are words that should be ignored "
#~ "by the spell check, like so:\n"
#~ "\n"
#~ "    add_stopwords(qw(asdf thiswordiscorrect));\n"
#~ "\n"
#~ "Adding stop words in this fashion affects all files checked for the "
#~ "remainder of the test script. See Pod::Spell (which this module is built "
#~ "upon) for a variety of ways to add per-file stop words to each .pm file.\n"
#~ "\n"
#~ "If you have a lot of stop words, it's useful to put them in your test "
#~ "file's 'DATA' section like so:\n"
#~ "\n"
#~ "    use Test::Spelling;     add_stopwords(<DATA>);     "
#~ "all_pod_files_spelling_ok();\n"
#~ "\n"
#~ "    __END__     folksonomy     Jifty     Zakirov\n"
#~ "\n"
#~ "To maintain backwards compatibility, comment markers and some whitespace "
#~ "are ignored. In the near future, the preprocessing we do on the arguments "
#~ "to add_stopwords will be changed and documented properly."
#~ msgstr ""
#~ "'Test::Spelling' は POD ファイルのスペルチェックを行ない、その結果を "
#~ "'Test::More' のやり方で報告します。このモジュールを利用するには、 "
#~ "_spell_, _aspell_, _ispell_, _hunspell_ のようなスペルチェックプログラムが"
#~ "必要です。\n"
#~ "\n"
#~ "    use Test::Spelling;     pod_file_spelling_ok('lib/Foo/Bar.pm', 'POD "
#~ "file spelling OK');\n"
#~ "\n"
#~ "ただし、 CPAN 配布物をインストールする際にスペルチェックを実施するのはよく"
#~ "ありませんし、制御下にない環境のパッケージに対して実施するのもよくありませ"
#~ "ん。どの単語リストやスペルチェックプログラムを利用しているのかによって、同"
#~ "じ結果を予測することはできないためです。また、配布物内にテストとして含める"
#~ "ことも *できます* が、モジュールの作者が実行した場合にのみテストが行なわれ"
#~ "るよう、 'skip_all unless -d 'inc/.author'' で保護することを忘れずに実施す"
#~ "るか、もしくはそれらを配布物内の _xt/_ ディレクトリ内に配置してください。"
#~ "ともかく、このモジュールをインストールしようとしている人々にとっては、配布"
#~ "物を転送している際に記述ミスが発生したりすることはありませんから、このよう"
#~ "なテストは実際には不要でしょう :-)\n"
#~ "\n"
#~ "また、独自のストップワードを追加することもできます。ストップワードとはスペ"
#~ "ルチェックで無視すべき単語のことで、下記のようにして使用します:\n"
#~ "\n"
#~ "    add_stopwords(qw(asdf thiswordiscorrect));\n"
#~ "\n"
#~ "この方法でストップワードを追加すると、テストスクリプト内の残りの個所に対す"
#~ "るすべてのファイルに影響します。ファイルごとにストップワードを各 .pm ファ"
#~ "イルに追加するための様々な方法について、詳しくは Pod::Spell (このモジュー"
#~ "ルのベース) をご覧ください。\n"
#~ "\n"
#~ "多数のストップワードを設定している場合は、それらをファイル内の 'DATA' セク"
#~ "ションに配置するとよいでしょう:\n"
#~ "\n"
#~ "    use Test::Spelling;     add_stopwords(<DATA>);     "
#~ "all_pod_files_spelling_ok();\n"
#~ "\n"
#~ "    __END__     folksonomy     Jifty     Zakirov\n"
#~ "\n"
#~ "広報互換性を維持するため、コメントマーカーといくつかのホワイトスペースは無"
#~ "視されます。近い将来には add_stopwords に対するパラメータの事前処理方法が"
#~ "変更され、適切に文書化される予定です。"

#~ msgid ""
#~ "Tainted data is data that comes from an unsafe source, such as the "
#~ "command line, or, in the case of web apps, any GET or POST transactions. "
#~ "Read the the perlsec manpage man page for details on why tainted data is "
#~ "bad, and how to untaint the data.\n"
#~ "\n"
#~ "When you're writing unit tests for code that deals with tainted data, "
#~ "you'll want to have a way to provide tainted data for your routines to "
#~ "handle, and easy ways to check and report on the taintedness of your "
#~ "data, in standard the Test::More manpage style."
#~ msgstr ""
#~ "汚染された (tainted) データとは信頼のできない発信源からのデータを意味する"
#~ "用語で、たとえばコマンドラインや Web アプリにおける GET または POST のデー"
#~ "タを指します。なぜ汚染されたデータが問題になるのか、およびデータの汚染除去"
#~ "方法について、詳しくは perlsec マニュアルページをお読みください。\n"
#~ "\n"
#~ "このような汚染されたデータを扱うコードを作成している場合、単体テストではそ"
#~ "の動作を確認するため、汚染されたデータを用意する必要がありますが、このモ"
#~ "ジュールではそのような汚染データを Test::More のような標準の形式で提供して"
#~ "チェックし、レポートを生成する機能を提供しています。"

#~ msgid ""
#~ "capitalize strings (\"to WORK AS titles\" becomes \"To Work as Titles\")"
#~ msgstr ""
#~ "大文字と小文字の調整 (\"to WORK AS titles\" を \"To Work as Titles\" に)"

#~ msgid "Sprintf-Like Function with Named Conversions"
#~ msgstr "連想配列を利用した sprintf のような機能"

#~ msgid "reliable job queue"
#~ msgstr "信頼性のあるジョブキュー"

#~ msgid "Tie a Plain Hash to a Database Table"
#~ msgstr "データベーステーブルに対するプレーンハッシュの tie"

#~ msgid "Rounded or Exact English Expression of Durations"
#~ msgstr "曖昧な／正確な英語での範囲表記"

#~ msgid ""
#~ "Time::Duration::Parse is a module to parse human readable duration "
#~ "strings like _2 minutes and 3 seconds_ to seconds.\n"
#~ "\n"
#~ "It does the opposite of _duration_exact_ function in Time::Duration and "
#~ "is roundtrip safe. So, the following is always true.\n"
#~ "\n"
#~ "  use Time::Duration::Parse;   use Time::Duration;\n"
#~ "\n"
#~ "  my $seconds = int rand 100000;   "
#~ "is( parse_duration(duration_exact($seconds)), $seconds );"
#~ msgstr ""
#~ "Time::Duration::Parse は、 _2 minutes_ (2 分) や _3 seconds_ (3 秒) のよう"
#~ "に、人間にとってわかりやすい期間表記を秒単位の値に変換するモジュールで"
#~ "す。\n"
#~ "\n"
#~ "Time::Duration 内の _duration_exact_ 関数の反対を実施することもできます"
#~ "し、それらとの間で値をやり取りすることもできます。そのため、下記は常に "
#~ "true となります:\n"
#~ "\n"
#~ "  use Time::Duration::Parse;   use Time::Duration;\n"
#~ "\n"
#~ "  my $seconds = int rand 100000;   "
#~ "is( parse_duration(duration_exact($seconds)), $seconds );"

#~ msgid "require() modules from a variable"
#~ msgstr "変数からの require() モジュール"

#~ msgid ""
#~ "If you've ever had to do this...\n"
#~ "\n"
#~ "    eval \"require $module\";\n"
#~ "\n"
#~ "to get around the bareword caveats on require(), this module is for you. "
#~ "It creates a universal require() class method that will work with every "
#~ "Perl module and its secure. So instead of doing some arcane eval() work, "
#~ "you can do this:\n"
#~ "\n"
#~ "    $module->require;\n"
#~ "\n"
#~ "It doesn't save you much typing, but it'll make a lot more sense to "
#~ "someone who's not a ninth level Perl acolyte."
#~ msgstr ""
#~ "下記のようなコードを見たことがありませんか？\n"
#~ "\n"
#~ "    eval \"require $module\";\n"
#~ "\n"
#~ "これは require() における裸文字の警告に対する回避策ですが、このような問題"
#~ "を解決することができるのがこのモジュールです。このモジュールは汎用的な "
#~ "require() クラスメソッドを作成し、すべての Perl モジュールで利用できる安全"
#~ "な仕組みを提供します。そのため、 eval() のような裏技を使用しなくても、下記"
#~ "のように記述することができるようになります:\n"
#~ "\n"
#~ "    $module->require;\n"
#~ "\n"
#~ "これにより入力量を大きく減らすことができるようになります。"

#~ msgid ""
#~ "The Verilog-Perl library is a building point for Verilog support in the "
#~ "Perl language."
#~ msgstr ""
#~ "Verilog-Perl ライブラリは、 Perl 言語内で Verilog サポートを行なうためのモ"
#~ "ジュールです。"

#~ msgid "Parser and Builder for Application/X-Www-Form-Urlencoded"
#~ msgstr "application/x-www-form-urlencoded 向けの処理と構築"

#~ msgid ""
#~ "A Perl interface to various services that shorten URLs. These sites "
#~ "maintain databases of long URLs, each of which has a unique identifier.\n"
#~ "\n"
#~ "\n"
#~ "\n"
#~ "The following shorten services have been deprecated as the endpoints no "
#~ "longer exist or function:\n"
#~ "\n"
#~ "  * WWW::Shorten::LinkToolbot\n"
#~ "\n"
#~ "  * WWW::Shorten::Linkz\n"
#~ "\n"
#~ "  * WWW::Shorten::MakeAShorterLink\n"
#~ "\n"
#~ "  * WWW::Shorten::Metamark\n"
#~ "\n"
#~ "  * WWW::Shorten::TinyClick\n"
#~ "\n"
#~ "  * WWW::Shorten::Tinylink\n"
#~ "\n"
#~ "  * WWW::Shorten::Qurl\n"
#~ "\n"
#~ "  * WWW::Shorten::Qwer\n"
#~ "\n"
#~ "When version '3.100' is released, these deprecated services will not be "
#~ "part of the distribution."
#~ msgstr ""
#~ "URL を短縮する様々なサービスに対する Perl のインターフェイスです。これらの"
#~ "サイトでは長い URL のデータベースを管理していて、それぞれに対してユニーク"
#~ "な識別子を保持しています。\n"
#~ "\n"
#~ "\n"
#~ "\n"
#~ "下記の短縮サービスは、すでに存在していないか機能していないため、廃止対象と"
#~ "して設定されています:\n"
#~ "\n"
#~ "  * WWW::Shorten::LinkToolbot\n"
#~ "\n"
#~ "  * WWW::Shorten::Linkz\n"
#~ "\n"
#~ "  * WWW::Shorten::MakeAShorterLink\n"
#~ "\n"
#~ "  * WWW::Shorten::Metamark\n"
#~ "\n"
#~ "  * WWW::Shorten::TinyClick\n"
#~ "\n"
#~ "  * WWW::Shorten::Tinylink\n"
#~ "\n"
#~ "  * WWW::Shorten::Qurl\n"
#~ "\n"
#~ "  * WWW::Shorten::Qwer\n"
#~ "\n"
#~ "'3.100' のリリースをもって、これらの廃止予定のサービスは配布物に含まれなく"
#~ "なります。"

#~ msgid "An API to search the musicbrainz.org database."
#~ msgstr "musicbrainz.org のデータベースを検索するための API です。"

#~ msgid "Perl module XML::XSLT"
#~ msgstr "Perl モジュール XML::XSLT"

#~ msgid ""
#~ "This is a Perl module to parse XSL Transformational sheets.\n"
#~ "\n"
#~ "\n"
#~ "\n"
#~ "Authors:\n"
#~ "--------     Geert Josten <gjosten@sci.kun.nl>     Egon Willighagen "
#~ "<egonw@sci.kun.nl>"
#~ msgstr ""
#~ "このモジュールは、 XSL 変換シートを処理するための Perl モジュールです。\n"
#~ "\n"
#~ "\n"
#~ "\n"
#~ "作者:\n"
#~ "--------     Geert Josten <gjosten@sci.kun.nl>     Egon Willighagen "
#~ "<egonw@sci.kun.nl>"

#~ msgid ""
#~ "The 'autobox' pragma allows methods to be called on integers, floats, "
#~ "strings, arrays, hashes, and code references in exactly the same manner "
#~ "as blessed references.\n"
#~ "\n"
#~ "Autoboxing is transparent: values are not blessed into their (user-"
#~ "defined) implementation class (unless the method elects to bestow such a "
#~ "blessing) - they simply use its methods as though they are.\n"
#~ "\n"
#~ "The classes (packages) into which the native types are boxed are fully "
#~ "configurable. By default, a method invoked on a non-object value is "
#~ "assumed to be defined in a class whose name corresponds to the 'ref()' "
#~ "type of that value - or SCALAR if the value is a non-reference."
#~ msgstr ""
#~ "autobox pragma は整数や浮動小数、文字列や配列、ハッシュやコード参照などを"
#~ "ブレスと全く同じやり方で呼び出すことができます。\n"
#~ "\n"
#~ "autobox は透過的に動作します: 値はそれらの (ユーザ定義の) 実装クラス内にブ"
#~ "レスされることはなく (メソッドがそのようなブレス処理を意図的に選択しない限"
#~ "り) 、単にメソッドを呼び出すだけの処理にすることができます。\n"
#~ "\n"
#~ "ネイティブな型がボックス化されているクラス (パッケージ) は、全てを設定する"
#~ "ことができます。既定では非オブジェクト値で実行されたメソッドは、その値の "
#~ "'ref()' 型の関係づけられた名前のクラスで定義されているものと判断します。そ"
#~ "れ以外の場合は、値は非参照のスカラとして呼び出されます。"

#~ msgid "Disables Bareword Filehandles"
#~ msgstr "単純なファイルハンドルの無効化"

#~ msgid ""
#~ "This pragma provides an easy and convenient way to enable or disable "
#~ "experimental features.\n"
#~ "\n"
#~ "Every version of perl has some number of features present but considered "
#~ "\"experimental.\" For much of the life of Perl 5, this was only a "
#~ "designation found in the documentation. Starting in Perl v5.10.0, and "
#~ "more aggressively in v5.18.0, experimental features were placed behind "
#~ "pragmata used to enable the feature and disable associated warnings.\n"
#~ "\n"
#~ "The 'experimental' pragma exists to combine the required incantations "
#~ "into a single interface stable across releases of perl. For every "
#~ "experimental feature, this should enable the feature and silence warnings "
#~ "for the enclosing lexical scope:\n"
#~ "\n"
#~ "  use experimental 'feature-name';\n"
#~ "\n"
#~ "To disable the feature and, if applicable, re-enable any warnings, use:\n"
#~ "\n"
#~ "  no experimental 'feature-name';\n"
#~ "\n"
#~ "The supported features, documented further below, are: \n"
#~ "* * 'array_base' - allow the use of '$[' to change the starting index "
#~ "of   '@array'.\n"
#~ "\n"
#~ "This is supported on all versions of perl. \n"
#~ "* * 'autoderef' - allow push, each, keys, and other built-ins on   "
#~ "references.\n"
#~ "\n"
#~ "This was added in perl 5.14.0 and removed in perl 5.23.1. \n"
#~ "* * 'bitwise' - allow the new stringwise bit operators\n"
#~ "\n"
#~ "This was added in perl 5.22.0. \n"
#~ "* * 'const_attr' - allow the :const attribute on subs\n"
#~ "\n"
#~ "This was added in perl 5.22.0. \n"
#~ "* * 'lexical_topic' - allow the use of lexical '$_' via 'my $_'.\n"
#~ "\n"
#~ "This was added in perl 5.10.0 and removed in perl 5.23.4. \n"
#~ "* * 'lexical_subs' - allow the use of lexical subroutines.\n"
#~ "\n"
#~ "This was added in 5.18.0. \n"
#~ "* * 'postderef' - allow the use of postfix dereferencing expressions,   "
#~ "including in interpolating strings\n"
#~ "\n"
#~ "This was added in perl 5.20.0. \n"
#~ "* * 're_strict' - enables strict mode in regular expressions\n"
#~ "\n"
#~ "This was added in perl 5.22.0. \n"
#~ "* * 'refaliasing' - allow aliasing via '\\$x = \\$y'\n"
#~ "\n"
#~ "This was added in perl 5.22.0. \n"
#~ "* * 'regex_sets' - allow extended bracketed character classes in regexps\n"
#~ "\n"
#~ "This was added in perl 5.18.0. \n"
#~ "* * 'signatures' - allow subroutine signatures (for named arguments)\n"
#~ "\n"
#~ "This was added in perl 5.20.0. \n"
#~ "* * 'smartmatch' - allow the use of '~~'\n"
#~ "\n"
#~ "This was added in perl 5.10.0, but it should be noted there are "
#~ "significant incompatibilities between 5.10.0 and 5.10.1. \n"
#~ "* * 'switch' - allow the use of '~~', given, and when\n"
#~ "\n"
#~ "This was added in perl 5.10.0. \n"
#~ "* * 'win32_perlio' - allows the use of the :win32 IO layer.\n"
#~ "\n"
#~ "This was added on perl 5.22.0."
#~ msgstr ""
#~ "このプラグマは、実験的な機能を有効にしたり無効にしたりするための簡単かつ便"
#~ "利な方法を提供します。\n"
#~ "\n"
#~ "各バージョンの Perl では \"実験的\" として扱われる様々な機能が用意されてい"
#~ "ます。 Perl 5 ではドキュメンテーション内で指定されていただけでしたが、 "
#~ "Perl v5.10.0 以降、特に v5.18.0 以降では積極的な仕組みになり、実験的な機能"
#~ "はプラグマタの背後に置かれ、機能を有効化したり警告を無効化したりすることが"
#~ "できるようになりました。\n"
#~ "\n"
#~ "'eexperimental' プラグマは必要な呪文を組み合わせて単一のインターフェイスに"
#~ "したもので、 Perl のリリースをまたいでも安定して動作するようになっていま"
#~ "す。それぞれの実験的な機能に対して、文法スコープ内での機能の有効化と警告の"
#~ "無効化を実施する必要があります:\n"
#~ "\n"
#~ "  use experimental '機能名';\n"
#~ "\n"
#~ "機能を無効化して警告を再度有効化するには、下記のようにします:\n"
#~ "\n"
#~ "  no experimental '機能名';\n"
#~ "\n"
#~ "対応する機能名については、下記をお読みください:\n"
#~ "* * 'array_base' - '@array' の開始位置を変更するための '$[' の使用\n"
#~ "\n"
#~ "これは全てのバージョンの Perl でサポートされています。\n"
#~ "* * 'autoderef' - 参照内での push, each, keys やその他の内蔵機能\n"
#~ "\n"
#~ "これは Perl 5.14.0 で追加され、 Perl 5.23.1 で削除されたものです。\n"
#~ "* * 'bitwise' - 文字列ベースのビット演算子\n"
#~ "\n"
#~ "これは Perl 5.22.0 で追加されたものです。\n"
#~ "* * 'const_attr' - sub での :const 属性\n"
#~ "\n"
#~ "これは Perl 5.22.0 で追加されたものです。\n"
#~ "* * 'lexical_topic' - 'my $_' での '$_' の使用\n"
#~ "\n"
#~ "これは Perl 5.22.0 で追加され、 Perl 5.23.4 で削除されたものです。\n"
#~ "* * 'lexical_subs' - レキシカルサブルーチン\n"
#~ "\n"
#~ "これは Perl 5.18.0 で追加されたものです。\n"
#~ "* * 'postderef' - 参照外し表現 (postfix dereferencing expressions, "
#~ "interpolating strings)\n"
#~ "\n"
#~ "これは Perl 5.20.0 で追加されたものです。\n"
#~ "* * 're_strict' - 正規表現での厳密モード\n"
#~ "\n"
#~ "これは Perl 5.22.0 で追加されたものです。\n"
#~ "* * 'refaliasing' - '\\$x = \\$y' を利用した別名設定\n"
#~ "\n"
#~ "これは Perl 5.22.0 で追加されたものです。\n"
#~ "* * 'regex_sets' - 正規表現内でのブラケット文字クラスの設定\n"
#~ "\n"
#~ "これは Perl 5.18.0 で追加されたものです。\n"
#~ "* * 'signatures' - サブルーチンシグネーチャ (名前付きパラメータ)\n"
#~ "\n"
#~ "これは Perl 5.20.0 で追加されたものです。\n"
#~ "* * 'smartmatch' - '~~' の使用\n"
#~ "\n"
#~ "これは Perl 5.10.0 で追加されたものですが、 5.10.0 と 5.10.1 との間では顕"
#~ "著な非互換性が存在しています。\n"
#~ "* * 'switch' - '~~' の使用\n"
#~ "\n"
#~ "これは Perl 5.10.0 で追加されたものです。\n"
#~ "* * 'win32_perlio' - :win32 IO レイヤの使用\n"
#~ "\n"
#~ "これは Perl 5.22.0 で追加されたものです。"

#~ msgid "A Mouse role for processing command line options"
#~ msgstr "コマンドラインオプションを処理するための Mouse の役割"

#~ msgid ""
#~ "A Mouse role which provides an alternate constructor for creating objects "
#~ "using parameters passed in from the command line."
#~ msgstr ""
#~ "コマンドラインで渡されたパラメータを利用して、オブジェクトを作成するための"
#~ "代替コンストラクタを提供する Mouse の役割です。"

#~ msgid "Perl bindings for the Qpid messaging framework"
#~ msgstr "Qpid メッセージングフレームワーク向け Perl バインディング"

#~ msgid "Perl bindings for the Qpid messaging framework."
#~ msgstr "Qpid メッセージングフレームワーク向け Perl バインディングです。"

#~ msgid "Turn On Strict and Make Most Warnings Fatal"
#~ msgstr "strict を有効化し、多くの警告を致命的なものとして扱わせるモジュール"

#~ msgid "Convenience wrappers around Carp::Assert"
#~ msgstr "Carp::Assert に対する便利なラッパー"

#~ msgid "Tk - a graphical user interface toolkit for Perl"
#~ msgstr "Tk - Perl 向けグラフィカルユーザインターフェイスツールキット"

#~ msgid ""
#~ "SQLite is a public domain file-based relational database engine that you "
#~ "can find at http://www.sqlite.org/. \n"
#~ "*DBD::SQLite* is a Perl DBI driver for SQLite, that includes the entire "
#~ "thing in the distribution. So in order to get a fast transaction capable "
#~ "RDBMS working for your perl project you simply have to install this "
#~ "module, and *nothing* else.\n"
#~ "\n"
#~ "SQLite supports the following features: \n"
#~ "* Implements a large subset of SQL92\n"
#~ "\n"
#~ "See http://www.sqlite.org/lang.html for details. \n"
#~ "* A complete DB in a single disk file\n"
#~ "\n"
#~ "Everything for your database is stored in a single disk file, making it "
#~ "easier to move things around than with DBD::CSV. \n"
#~ "* Atomic commit and rollback\n"
#~ "\n"
#~ "Yes, *DBD::SQLite* is small and light, but it supports full "
#~ "transactions! \n"
#~ "* Extensible\n"
#~ "\n"
#~ "User-defined aggregate or regular functions can be registered with the "
#~ "SQL parser.\n"
#~ "\n"
#~ "There's lots more to it, so please refer to the docs on the SQLite web "
#~ "page, listed above, for SQL details. Also refer to DBI for details on how "
#~ "to use DBI itself. The API works like every DBI module does. However, "
#~ "currently many statement attributes are not implemented or are limited by "
#~ "the typeless nature of the SQLite database."
#~ msgstr ""
#~ "SQLite (http://www.sqlite.org/) はパブリックドメインで公開されているファイ"
#~ "ルベースのリレーショナルデータベースエンジンです。\n"
#~ "*DBD::SQLite* は SQLite 向けの Perl DBI ドライバで、配布物のすべてが含まれ"
#~ "ていますので、このモジュールをインストールするだけで、お使いの Perl プロ"
#~ "ジェクトを高速でトランザクションにも対応する RDBMS を利用できるようになり"
#~ "ます。\n"
#~ "\n"
#~ "SQLIte には下記のような機能があります:\n"
#~ "* SQL92 のラージサブセットに対応\n"
#~ "\n"
#~ "  詳しくは http://www.sqlite.org/lang.html をお読みください。\n"
#~ "* 単一のディスクファイルによる完全な DB\n"
#~ "\n"
#~ "  データベースに必要な情報すべてが単一のディスクファイルに記録されます。こ"
#~ "れにより、 DBD::CSV などよりも簡単に扱うことができるようになります。\n"
#~ "* アトミックなコミットとロールバック\n"
#~ "\n"
#~ "  *DBD::SQLite* は小さくて軽量ですが、トランザクションに完全対応していま"
#~ "す！\n"
#~ "* 拡張可能性\n"
#~ "\n"
#~ "  ユーザ定義の集計関数または通常関数を SQL パーサに登録することができま"
#~ "す。\n"
#~ "\n"
#~ "上記以外にも SQLite には様々な機能が用意されています。 SQL の詳細につい"
#~ "て、詳しくは上述の SQLite の Web ページをご覧ください。また、 DBI の使用方"
#~ "法については、 DBI のマニュアルページをお読みください。 API は DBI が提供"
#~ "する機能それぞれに対応していますが、多くのステートメント属性は未実装のまま"
#~ "であるほか、 SQLite が型を持たない仕組みであることによる制限もあることにご"
#~ "注意ください。"

#~ msgid "(DEPRECATED) A structured graphics canvas"
#~ msgstr "(廃止予定) 構造型のグラフィックキャンバス"

#~ msgid ""
#~ "*NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE*\n"
#~ "\n"
#~ "This module has been deprecated by the Gtk-Perl project. This means that "
#~ "the module will no longer be updated with security patches, bug fixes, or "
#~ "when changes are made in the Perl ABI. The Git repo for this module has "
#~ "been archived (made read-only), it will no longer possible to submit new "
#~ "commits to it. You are more than welcome to ask about this module on the "
#~ "Gtk-Perl mailing list, but our priorities going forward will be "
#~ "maintaining Gtk-Perl modules that are supported and maintained upstream; "
#~ "this module is neither.\n"
#~ "\n"
#~ "Since this module is licensed under the LGPL v2.1, you may also fork this "
#~ "module, if you wish, but you will need to use a different name for it on "
#~ "CPAN, and the Gtk-Perl team requests that you use your own resources "
#~ "(mailing list, Git repos, bug trackers, etc.) to maintain your fork going "
#~ "forward.\n"
#~ "\n"
#~ "  * Perl URL: https://gitlab.gnome.org/GNOME/perl-gnome2-canvas\n"
#~ "\n"
#~ "  * Upstream URL: https://gitlab.gnome.org/Archive/libgnomecanvas\n"
#~ "\n"
#~ "  * Last upstream version: 2.30.3\n"
#~ "\n"
#~ "  * Last upstream release date: 2011-01-31\n"
#~ "\n"
#~ "  * Migration path for this module: No upstream replacement \n"
#~ "*NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE*\n"
#~ "\n"
#~ "The Gnome Canvas is an engine for structured graphics that offers a rich "
#~ "imaging model, high-performance rendering, and a powerful, high level "
#~ "API. It offers a choice of two rendering back-ends, one based on GDK for "
#~ "extremely fast display, and another based on Libart, a sophisticated, "
#~ "antialiased, alpha-compositing engine. This widget can be used for "
#~ "flexible display of graphics and for creating interactive user interface "
#~ "elements.\n"
#~ "\n"
#~ "To create a new Gnome2::Canvas widget call 'Gnome2::Canvas->new' or "
#~ "'Gnome2::Canvas->new_aa' for an anti-aliased mode canvas.\n"
#~ "\n"
#~ "A Gnome2::Canvas contains one or more Gnome2::CanvasItem objects. Items "
#~ "consist of graphing elements like lines, ellipses, polygons, images, "
#~ "text, and curves. These items are organized using Gnome2::CanvasGroup "
#~ "objects, which are themselves derived from Gnome2::CanvasItem. Since a "
#~ "group is an item it can be contained within other groups, forming a tree "
#~ "of canvas items. Certain operations, like translating and scaling, can be "
#~ "performed on all items in a group.\n"
#~ "\n"
#~ "There is a special root group created by a Gnome2::Canvas. This is the "
#~ "top level group under which all items in a canvas are contained. The root "
#~ "group is available as '$canvas->root'.\n"
#~ "\n"
#~ "There are several different coordinate systems used by Gnome2::Canvas "
#~ "widgets. The primary system is a logical, abstract coordinate space "
#~ "called world coordinates. World coordinates are expressed as unbounded "
#~ "double floating point numbers. When it comes to rendering to a screen the "
#~ "canvas pixel coordinate system (also referred to as just canvas "
#~ "coordinates) is used. This system uses integers to specify screen pixel "
#~ "positions. A user defined scaling factor and offset are used to convert "
#~ "between world coordinates and canvas coordinates. Each item in a canvas "
#~ "has its own coordinate system called item coordinates. This system is "
#~ "specified in world coordinates but they are relative to an item (0.0, 0.0 "
#~ "would be the top left corner of the item). The final coordinate system of "
#~ "interest is window coordinates. These are like canvas coordinates but are "
#~ "offsets from within a window a canvas is displayed in. This last system "
#~ "is rarely used, but is useful when manually handling GDK events (such as "
#~ "drag and drop) which are specified in window coordinates (the events "
#~ "processed by the canvas are already converted for you).\n"
#~ "\n"
#~ "Along with different coordinate systems come methods to convert between "
#~ "them. '$canvas->w2c' converts world to canvas pixel coordinates and "
#~ "'canvas->c2w' converts from canvas to world. To get the affine transform "
#~ "matrix for converting from world coordinates to canvas coordinates call "
#~ "'$canvas->w2c_affine'. '$canvas->window_to_world' converts from window to "
#~ "world coordinates and '$canvas->world_to_window' converts in the other "
#~ "direction. There are no methods for converting between canvas and window "
#~ "coordinates, since this is just a matter of subtracting the canvas "
#~ "scrolling offset. To convert to/from item coordinates use the methods "
#~ "defined for Gnome2::CanvasItem objects.\n"
#~ "\n"
#~ "To set the canvas zoom factor (canvas pixels per world unit, the scaling "
#~ "factor) call '$canvas->set_pixels_per_unit'; setting this to 1.0 will "
#~ "cause the two coordinate systems to correspond (e.g., [5, 6] in pixel "
#~ "units would be [5.0, 6.0] in world units).\n"
#~ "\n"
#~ "Defining the scrollable area of a canvas widget is done by calling "
#~ "'$canvas->set_scroll_region' and to get the current region '$canvas-"
#~ ">get_scroll_region' can be used. If the window is larger than the canvas "
#~ "scrolling region it can optionally be centered in the window. Use "
#~ "'$canvas->set_center_scroll_region' to enable or disable this behavior. "
#~ "To scroll to a particular canvas pixel coordinate use '$canvas-"
#~ ">scroll_to' (typically not used since scrollbars are usually set up to "
#~ "handle the scrolling), and to get the current canvas pixel scroll offset "
#~ "call '$canvas->get_scroll_offsets'."
#~ msgstr ""
#~ "*NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE*\n"
#~ "\n"
#~ "このモジュールは Gtk-Perl プロジェクトの誕生により、古いものとなっていま"
#~ "す。つまり、このモジュールはセキュリティ修正やバグ修正のほか、 Perl の "
#~ "ABI が更新された場合であっても、更新がされないことを意味しています。このモ"
#~ "ジュールの git リポジトリは読み込み専用でアーカイブされていて、新しいコ"
#~ "ミットは受け付けておりません。このモジュールの質問については Gtk-Perl の"
#~ "メーリングリストでも受け付けておりますが、基本的には Gtk-Perl モジュールへ"
#~ "の対応を優先しておりますので、あらかじめご了承ください。\n"
#~ "\n"
#~ "このモジュールは LGPL v2.1 でライセンスされておりますので fork することも"
#~ "できますが、 CPAN に登録される場合は名前を変更していただくとともに、新しい"
#~ "プロジェクトに対しては独自のリソース (メーリングリスト, git リポジトリ, バ"
#~ "グトラッカーなど) をご用意いただくようお願いいたします。\n"
#~ "\n"
#~ "  * Perl URL: https://gitlab.gnome.org/GNOME/perl-gnome2-canvas\n"
#~ "\n"
#~ "  * 提供元 URL: https://gitlab.gnome.org/Archive/libgnomecanvas\n"
#~ "\n"
#~ "  * 最新の提供元バージョン: 2.30.3\n"
#~ "\n"
#~ "  * 最新の提供元公開日: 2011-01-31\n"
#~ "\n"
#~ "  * このモジュールに対する移行パス: 直接の置き換えはありません \n"
#~ "\n"
#~ "*NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE NOTICE*\n"
#~ "\n"
#~ "Gnome Canvas はリッチなイメージングモデルを持つ構造型グラフィックエンジン"
#~ "で、描画の高速性とパワフルさ、そして高レベルな API を特徴としています。描"
#~ "画用のバックエンドとしては、描画が高速な GDK と、より洗練されアンチエイリ"
#~ "アスやアルファコンポジットにも対応した libart ベースの 2 種類から選択して"
#~ "いただくことができます。このウイジェットは、対話的なユーザインターフェイス"
#~ "要素を作成するための、柔軟なグラフィック表示にお使いいただくことができま"
#~ "す。\n"
#~ "\n"
#~ "新しい Gnome2::Canvas ウイジェットを作成するには、 'Gnome2::Canvas->new' "
#~ "または 'Gnome2::Canvas->new_aa' (アンチエイリアスが必要な場合) を呼び出し"
#~ "てください。\n"
#~ "\n"
#~ "Gnome2::Canvas には 1 つ以上の Gnome2::CanvasItem オブジェクトが存在してい"
#~ "ます。直線や曲線、多角形や画像、テキストなどの要素から構成され、これらの要"
#~ "素は Gnome2::CanvasGroup オブジェクトでまとめられます。この Gnome2::"
#~ "CanvasGroup 自身も Gnome2::CanvasItem からの派生クラスとなっています。ま"
#~ "た、一方のグループから他方のグループを含むことができるため、項目の木構造を"
#~ "作成してグループ化し、まとめて変換や拡大／縮小を行なうこともできます。\n"
#~ "\n"
#~ "また Gnome2::Canvas で作成される特別なルートグループも存在しています。これ"
#~ "はトップレベルのグループであり、そのほかの全てのグループを包含します。ルー"
#~ "トグループは '$canvas->root' でアクセスすることができます。\n"
#~ "\n"
#~ "また Gnome2::Canvas ウイジェットには、複数の座標系システムが存在していま"
#~ "す。通常は世界座標系と呼ばれ、抽象的な座標モデルを構成し、倍精度小数点で値"
#~ "を表現します。これを画面に描画する場合は、ピクセルを描画先に合わせるため、"
#~ "世界座標系からキャンバス座標系と呼ばれる座標系に変換することになります。"
#~ "ユーザ定義の拡大／縮小処理を適用することもできます。さらに、キャンバス内の"
#~ "各要素には要素座標系と呼ばれる独自の座標系を持っています。このシステムは世"
#~ "界座標系内からの相対値 (0.0, 0.0 が左上) で表わします。このほか、ウインド"
#~ "ウ座標系も提供されています。これらはキャンバス座標系と似ていますが、描画先"
#~ "のウインドウ内での相対値になっています。最後の座標系はあまり使用されるもの"
#~ "ではありませんが、 GDK イベント (例: ドラッグ＆ドロップ) を処理するような"
#~ "場合に有用です。こちらはウインドウ座標系で指定されるためです (キャンバス側"
#~ "でイベントが処理される場合、座標系は変換済みの状態になります) 。\n"
#~ "\n"
#~ "このような様々な座標系は、相互に変換することができます。たとえば '$canvas-"
#~ ">w2c' は世界座標系をキャンバス座標系に変換するほか、 'canvas->c2w' はその"
#~ "逆を行ないます。世界座標系からキャンバス座標系へのアフィン変換行列を取得す"
#~ "るには、 '$canvas->w2c_affine' をお使いください。また、 '$canvas-"
#~ ">window_to_world' はウインドウ座標系から世界座標系に、 '$canvas-"
#~ ">world_to_window' はその逆を行ないます。キャンバス座標ケイトウインドウ座標"
#~ "系を直接変換するメソッドはありませんが、その代わりにキャンバスのスクロール"
#~ "オフセット値を利用して減算を行なってください。また、要素座標系からの変換に"
#~ "ついては、 Gnome2::CanvasItem オブジェクト内のメソッドをお使いください。\n"
#~ "\n"
#~ "キャンバスの倍率 (世界座標系での倍率単位) を設定するには '$canvas-"
#~ ">set_pixels_per_unit' をお使いください。これを 1.0 にすると、それぞれの座"
#~ "標系が同じ値になります (例: [5, 6] -> [5.0, 6.0]) 。\n"
#~ "\n"
#~ "キャンバス内のスクロール領域を指定したい場合は '$canvas-"
#~ ">set_scroll_region' を、現在の位置を取得したい場合は '$canvas-"
#~ ">get_scroll_region' をお使いください。ウインドウがキャンバスのスクロール領"
#~ "域よりも大きい場合は、ウインドウ内の中央に配置されます。この動作を変更した"
#~ "い場合は、 '$canvas->set_center_scroll_region' をお使いください。特定の"
#~ "キャンバスピクセルにスクロールしたい場合は、  '$canvas->scroll_to' をお使"
#~ "いください (通常はスクロールバーが自動的に行なうため不要です) 。また、現在"
#~ "のキャンバスのスクロール位置を取得するには、 '$canvas-"
#~ ">get_scroll_offsets' をお使いください。"

#~ msgid ""
#~ "Mojolicious::Plugin::AssetPack has a very limited feature set, especially "
#~ "when it comes to processing JavaScript. It is recommended that you switch "
#~ "to Mojolicious::Plugin::Webpack if you want to write modern JavaScript "
#~ "code."
#~ msgstr ""
#~ "Mojolicious::Plugin::AssetPack は非常に限られた機能セットで、特に "
#~ "JavaScript を処理するような場合には顕著です。新しい JavaScript を作成した"
#~ "い場合は、 Mojolicious::Plugin::Webpack に切り替えることをお勧めします。"

#~ msgid "Perl extension for the SANE (Scanner Access Now Easy) Project"
#~ msgstr ""
#~ "SANE (Scanner Access Now Easy; スキャナアクセス簡略化) プロジェクト向けの "
#~ "Perl 拡張"

#~ msgid ""
#~ "This module allows you to access SANE-compatible scanners in a Perlish "
#~ "and object-oriented way, freeing you from the casting and memory "
#~ "management in C, yet remaining very close in spirit to original API."
#~ msgstr ""
#~ "このモジュールを利用することで、 Perl から Perl 風かつオブジェクト指向の方"
#~ "法で SANE 互換のスキャナにアクセスできるようになるほか、 C 言語のキャスト"
#~ "処理やメモリの管理などの手間を省くことができます。また、オリジナルの API "
#~ "の考え方を非常に強く継承しています。"

#~ msgid "Portable Multitasking and Networking Framework for Any Event Loop"
#~ msgstr ""
#~ "任意のイベントループ向けに可搬性のあるマルチタスク処理およびネットワーク処"
#~ "理フレームワーク"

#~ msgid ""
#~ "POE is a framework for cooperative, event driven multitasking and "
#~ "networking in Perl. Other languages have similar frameworks. Python has "
#~ "Twisted. TCL has \"the event loop\".\n"
#~ "\n"
#~ "POE provides a unified interface for several other event loops, including "
#~ "select(), IO::Poll, the Glib manpage, the Gtk manpage, the Tk manpage, "
#~ "the Wx manpage, and the Gtk2 manpage. Many of these event loop interfaces "
#~ "were written by others, with the help of POE::Test::Loops. They may be "
#~ "found on the CPAN.\n"
#~ "\n"
#~ "POE achieves its high degree of portability to different operating "
#~ "systems and Perl versions by being written entirely in Perl. CPAN hosts "
#~ "optional XS modules for POE if speed is more desirable than portability.\n"
#~ "\n"
#~ "POE is designed in layers. Each layer builds atop the lower level ones. "
#~ "Programs are free to use POE at any level of abstraction, and different "
#~ "levels can be mixed and matched seamlessly within a single program. "
#~ "Remember, though, that higher-level abstractions often require more "
#~ "resources than lower-level ones. The conveniences they provide are not "
#~ "free.\n"
#~ "\n"
#~ "POE's bundled abstraction layers are the tip of a growing iceberg. the "
#~ "Sprocket manpage, POE::Stage, and other CPAN distributions build upon "
#~ "this work. You're encouraged to look around.\n"
#~ "\n"
#~ "No matter how high you go, though, it all boils down to calls to POE::"
#~ "Kernel. So your down-to-earth code can easily cooperate with "
#~ "stratospheric systems."
#~ msgstr ""
#~ "POE は Perl 内でのイベント駆動型マルチタスク／ネットワーク処理フレームワー"
#~ "クです。他の言語にも類似のフレームワークが存在しています。 Python では "
#~ "Twisted 、 TCL では \"the event loop\" です。\n"
#~ "\n"
#~ "POE は select(), IO::Poll, Glib, Gtk, Tk, Wx, Gtk2 などのいくつかのイベン"
#~ "トループ向けの統合インターフェイスです。これらのイベントループインターフェ"
#~ "イスの多くは、 POE::Test::Loops の支援のもと他のユーザが作成しています。こ"
#~ "れらは CPAN 内で公開されています。\n"
#~ "\n"
#~ "POE は異なるオペレーティングシステムや Perl のバージョンに対して、 Perl 単"
#~ "体で記述することによって高度な可搬性を提供します。 CPAN ではオプションの "
#~ "POE 向け XS モジュールも公開されていますが、こちらは可搬性よりも速度を重視"
#~ "したつくりになっています。\n"
#~ "\n"
#~ "POE は階層構造になっています。各階層はそれより低い階層のものをベースにして"
#~ "作られています。プログラム側ではどの階層の抽象化を使用しても構いませんし、"
#~ "単一のプログラム内で異なるレベルを混在させたり、それらをシームレスに適合さ"
#~ "せてもかまいません。ただし、高レベルの抽象化は、低レベルの抽象化より多くの"
#~ "リソースを必要とします。つまり、利便性はタダでは手に入らない、ということで"
#~ "す。\n"
#~ "\n"
#~ "POE に内蔵されている抽象化レイヤは成長する氷山の先端ともいえます。 "
#~ "Sprocket, POE::Stage, その他の CPAN 配布物では、これらの成果を利用して構築"
#~ "されています。まずは周囲をご覧になるとよいでしょう。\n"
#~ "\n"
#~ "どれだけ高い階層であっても、 煮詰めれば POE::Kernel への呼び出しになりま"
#~ "す。そのため、地球上の表面にあるコードも、容易に成層圏のシステムと協調処理"
#~ "することができます。"

#~ msgid ""
#~ "This module provides libxml2 for other modules to use. There was an "
#~ "already existing Alien::LibXML, but it uses the older Alien::Build::"
#~ "ModuleBuild and has not been actively maintained for a while."
#~ msgstr ""
#~ "このモジュールは、他のモジュールに対して libxml2 を提供します。既に "
#~ "Alien::LibXML というモジュールが存在していますが、これは Alien::Build::"
#~ "ModuleBuild という古いモジュールを使用しているほか、しばらくメンテナンスさ"
#~ "れていないことから、新しいモジュールを作成しています。"

#~ msgid ""
#~ "This is the top-level module of App::CELL, the Configuration, Error-"
#~ "handling, Localization, and Logging framework for applications (or "
#~ "scripts) written in Perl.\n"
#~ "\n"
#~ "For details, read the POD in the the App::CELL manpage distro. For an "
#~ "introduction, read the App::CELL::Guide manpage."
#~ msgstr ""
#~ "これは App::CELL のトップレベルモジュールで、 Perl 内で設定ファイルやエ"
#~ "ラー処理、ローカライズやログ記録に関するフレームワークを提供します。\n"
#~ "\n"
#~ "詳しくは App::CELL の配布物に含まれている POD をお読みください。また、概要"
#~ "については App::CELL:Guide をお読みください。"

#~ msgid "Perl interface to the uulib library (a.k.a. uudeview/uuenview)"
#~ msgstr ""
#~ "uulib ライブラリへの Perl インターフェイス (別名: uudeview/uuenview)"

#~ msgid ""
#~ "Read the file doc/library.pdf from the distribution for in-depth "
#~ "information about the C-library used in this interface, and the rest of "
#~ "this document and especially the non-trivial decoder program at the end."
#~ msgstr ""
#~ "このインターフェイス内で使用されている C 言語ライブラリに関する詳しい情報"
#~ "は、配布物に含まれる doc/library.pdf と文書をお読みください。特に特殊なデ"
#~ "コーダプログラムについても示されています。"

#~ msgid "Return Name and Handle of a Temporary File Safely"
#~ msgstr "一時ファイルの名前とハンドルを安全に返すモジュール"

#~ msgid ""
#~ "Instances of the 'HTTP::Daemon' class are HTTP/1.1 servers that listen on "
#~ "a socket for incoming requests. The 'HTTP::Daemon' is a subclass of 'IO::"
#~ "Socket::IP', so you can perform socket operations directly on it too.\n"
#~ "\n"
#~ "The accept() method will return when a connection from a client is "
#~ "available. The returned value will be an 'HTTP::Daemon::ClientConn' "
#~ "object which is another 'IO::Socket::IP' subclass. Calling the "
#~ "get_request() method on this object will read data from the client and "
#~ "return an 'HTTP::Request' object. The ClientConn object also provide "
#~ "methods to send back various responses.\n"
#~ "\n"
#~ "This HTTP daemon does not fork(2) for you. Your application, i.e. the "
#~ "user of the 'HTTP::Daemon' is responsible for forking if that is "
#~ "desirable. Also note that the user is responsible for generating "
#~ "responses that conform to the HTTP/1.1 protocol."
#~ msgstr ""
#~ "'HTTP::Daemon' クラスのインスタンスは、要求を待ち受ける HTTP/1.1 サーバと"
#~ "なります。 'HTTP::Daemon' は 'IO::Socket::IP' のサブクラスであるため、ソ"
#~ "ケットに対する直接操作も実施することができます。\n"
#~ "\n"
#~ "クライアントからの接続が到着すると、 accept() メソッドの呼び出しが返却され"
#~ "ます。返却された値は 'HTTP::Daemon::ClientConn' オブジェクトのインスタンス"
#~ "で、こちらは 'IO::Socket::IP' のサブクラスです。このオブジェクトに対して "
#~ "get_request() メソッドを呼び出すと、クライアントからのデータを読み込ん"
#~ "で'HTTP::Request' のインスタンスを返却します。 ClientConn オブジェクトで"
#~ "は、様々な応答を返すためのメソッドが用意されています。\n"
#~ "\n"
#~ "この HTTP デーモンは fork しないような作りになっています。 'HTTP::Daemon' "
#~ "のユーザ側であるお使いのアプリケーションでは、必要に応じて fork を行なって"
#~ "ください。また、 HTTP/1.1 プロトコルに準拠するよう応答を生成する必要もあり"
#~ "ます。"

#~ msgid ""
#~ "Mojolicious::Plugin::AssetPack is Mojolicious plugin for processing "
#~ "static assets. The idea is that JavaScript and CSS files should be served "
#~ "as one minified file to save bandwidth and roundtrip time to the server.\n"
#~ "\n"
#~ "Note that the main author have moved on to using Mojolicious::Plugin::"
#~ "Webpack instead, which uses https://webpack.js.org/ under the hood, but "
#~ "is just as convenient to use as this plugin. It is very easy to try out "
#~ "Mojolicious::Plugin::Webpack, since it will detect your AssetPack based "
#~ "project automatically, and migrate them over to webpack once the plugin "
#~ "is loaded.\n"
#~ "\n"
#~ "There are many external tools for doing this, but integrating them with "
#~ "Mojolicious can be a struggle: You want to serve the source files "
#~ "directly while developing, but a minified version in production. This "
#~ "assetpack plugin will handle all of that automatically for you.\n"
#~ "\n"
#~ "Your application creates and refers to an asset by its topic (virtual "
#~ "asset name). The process of building actual assets from their components "
#~ "is delegated to \"pipe objects\". Please see Mojolicious::Plugin::"
#~ "AssetPack::Guides::Tutorial/Pipes for a complete list."
#~ msgstr ""
#~ "Mojolicious::Plugin::AssetPack は固定のアセットを処理するための "
#~ "Mojolicious のプラグインです。サーバとの帯域やラウンドトリップタイムの問題"
#~ "を最小化するため、 JavaScript や CSS ファイルは最小限のサイズにすべきであ"
#~ "る、という考え方から来ているものです。\n"
#~ "\n"
#~ "なお、主な作者は裏で https://webpack.js.org/ にある Mojolicious::Plugin::"
#~ "Webpack を使用するように移行してしまっていますが、これをプラグインとして使"
#~ "用するには十分な仕組みでもあります。また AssetPack ベースのプロジェクトを"
#~ "自動的に検出することができることから、Mojolicious::Plugin::Webpack を試し"
#~ "てみて、プラグインの読み込み後に Webpack に移行してもかまいません。\n"
#~ "\n"
#~ "ここにはこれを実現するための多数の外部ツールが存在していますが、 "
#~ "Mojolicious 本体への統合は戦いでもあります: 開発中はソースファイルを直接提"
#~ "供したくても、本番環境ではそれを小さくまとめて送りたいものです。このアセッ"
#~ "トパックプラグインは、これらの処理をすべてを自動的に行ないます。\n"
#~ "\n"
#~ "お使いのアプリケーションはトピック (仮想アセット名) でアセットを作成して参"
#~ "照します。コンポーネントからの実際のアセット構築処理は、 \"パイプオブジェ"
#~ "クト\" に移譲されています。完全なリストについて、詳しくは Mojolicious::"
#~ "Plugin::AssetPack::Guides::Tutorial/Pipes をお読みください。"

#~ msgid "Routines for Manipulating Stashes"
#~ msgstr "Stash を扱うためのルーチン集"

#~ msgid "Interact with a T/Test_manifest File"
#~ msgstr "t/test_manifest ファイルの処理"

#~ msgid "Perl bindings needed for the Qpid messaging framework."
#~ msgstr "Qpid メッセージングフレームワークに必要な Perl バインディングです。"

#~ msgid ""
#~ "This module provides methods implementing the IMAP protocol to support "
#~ "interacting with IMAP message stores.\n"
#~ "\n"
#~ "The module is used by constructing or instantiating a new IMAPClient "
#~ "object via the the /new manpage constructor method. Once the object has "
#~ "been instantiated, the the /connect manpage method is either implicitly "
#~ "or explicitly called. At that point methods are available that implement "
#~ "the IMAP client commands as specified in *RFC3501*. When processing is "
#~ "complete, the the /logout manpage object method should be called.\n"
#~ "\n"
#~ "This documentation is not meant to be a replacement for RFC3501 nor any "
#~ "other IMAP related RFCs.\n"
#~ "\n"
#~ "Note that this documentation uses the term _folder_ in place of RFC3501's "
#~ "use of _mailbox_. This documentation reserves the use of the term "
#~ "_mailbox_ to refer to the set of folders owned by a specific IMAP id."
#~ msgstr ""
#~ "このモジュールは、 IMAP メッセージストアとの対話に対応する、 IMAP プロトコ"
#~ "ルを実装するメソッドを提供します。\n"
#~ "\n"
#~ "モジュールは /new コンストラクタメソッドを利用して IMAPClient オブジェクト"
#~ "を構築もしくはインスタンス化して使用します。オブジェクトがインスタンス化さ"
#~ "れると、 /connect を明示的もしくは暗黙的に呼び出します。この時点では、 "
#~ "*RFC3501* に規定された IMAP クライアントコマンドのみを実装しています。処理"
#~ "が終わったら、 /logout メソッドを呼び出すべきです。\n"
#~ "\n"
#~ "なお、このドキュメンテーションでは RFC3501 そのものやその他の IMAP 関連 "
#~ "RFC を説明するものではありません。\n"
#~ "\n"
#~ "ただし、このドキュメンテーションでは RFC3501 で _メールボックス_ と呼ばれ"
#~ "るものを _フォルダ_ として説明しています。このドキュメンテーションにおけ"
#~ "る _メールボックス_ は、 IMAP id で識別されるフォルダの所有者を意味しま"
#~ "す。"

#~ msgid "Check That All Your Files Are Tidy"
#~ msgstr "ファイルがきれいであるかどうかをチェックするモジュール"

#~ msgid "Error"
#~ msgstr "エラー"

#~ msgid ""
#~ "A 'Future' object represents an operation that is currently in progress, "
#~ "or has recently completed. It can be used in a variety of ways to manage "
#~ "the flow of control, and data, through an asynchronous program.\n"
#~ "\n"
#~ "Some futures represent a single operation and are explicitly marked as "
#~ "ready by calling the 'done' or 'fail' methods. These are called \"leaf\" "
#~ "futures here, and are returned by the 'new' constructor.\n"
#~ "\n"
#~ "Other futures represent a collection of sub-tasks, and are implicitly "
#~ "marked as ready depending on the readiness of their component futures as "
#~ "required. These are called \"convergent\" futures here as they converge "
#~ "control and data-flow back into one place. These are the ones returned by "
#~ "the various 'wait_*' and 'need_*' constructors.\n"
#~ "\n"
#~ "It is intended that library functions that perform asynchronous "
#~ "operations would use future objects to represent outstanding operations, "
#~ "and allow their calling programs to control or wait for these operations "
#~ "to complete. The implementation and the user of such an interface would "
#~ "typically make use of different methods on the class. The methods below "
#~ "are documented in two sections; those of interest to each side of the "
#~ "interface.\n"
#~ "\n"
#~ "It should be noted however, that this module does not in any way provide "
#~ "an actual mechanism for performing this asynchronous activity; it merely "
#~ "provides a way to create objects that can be used for control and data "
#~ "flow around those operations. It allows such code to be written in a "
#~ "neater, forward-reading manner, and simplifies many common patterns that "
#~ "are often involved in such situations.\n"
#~ "\n"
#~ "See also Future::Utils which contains useful loop-constructing functions, "
#~ "to run a future-returning function repeatedly in a loop."
#~ msgstr ""
#~ "'Future' オブジェクトは現在処理の操作や、すぐに終わるような操作を表わすも"
#~ "のです。非同期に動作するプログラムに対して、制御やデータの流れを管理するた"
#~ "めの様々な方法が用意されています。\n"
#~ "\n"
#~ "'Future' では単一の操作を表わすことができるほか、 'done' や 'fail' などの"
#~ "メソッドを呼び出すことで、明示的に終了を表わすこともできます。これらは "
#~ "\"Leaf Future' と呼ばれ、 'new' コンストラクタで返される値になります。\n"
#~ "\n"
#~ "そのほかにも、サブタスクの集合を表わす 'Future' のほか、必要なコンポーネン"
#~ "トとして依存先の処理状況に応じたマーキングを暗黙のうちに行なうこともできま"
#~ "す。これらは \"Convergent Future\" (収束型 Future) と呼ばれ、制御やデータ"
#~ "の流れを一カ所で行なうことになります。これらは様々な 'wait_*' または "
#~ "'need_*' コンストラクタで返される値になります。\n"
#~ "\n"
#~ "このモジュールは、ライブラリの関数に対して非同期の処理を実施させ、 Future "
#~ "オブジェクトを利用して進行状況を表示させ、呼び出し元のプログラム側で何らか"
#~ "の制御を行なうか、もしくは待機するかを指定することができる仕組みです。実装"
#~ "とその実装を使用するユーザは、クラス内の様々なメソッドを使用して必要な処理"
#~ "を行ないます。下記のメソッドは 2 つのセクションに分かれていますが、これら"
#~ "はインターフェイスの各面を表わしています。\n"
#~ "\n"
#~ "ただし、このモジュールは実際の仕組みや非同期の処理そのものを提供するもので"
#~ "はありません。単純に制御や制御内のデータで使用するオブジェクトを作成するだ"
#~ "けです。このモジュールを利用することで、より洗練されわかりやすく、かつシン"
#~ "プルな汎用パターンを利用して、非同期の処理を実現することができるようになり"
#~ "ます。\n"
#~ "\n"
#~ "なお、便利なループを構築するための機能については、 Future::Utils をお読み"
#~ "ください。こちらには、ループ内で繰り返し呼び出す場合の関数が提供されていま"
#~ "す。"

#~ msgid ""
#~ "Miscellaneous extras and helpers for X11::Protocol: \n"
#~ "- X11::Protocol::Other - misc helpers\n"
#~ "- X11::Protocol::ChooseWindow - user click on window\n"
#~ "- X11::Protocol::GrabServer - oop block scope server grab\n"
#~ "- X11::Protocol::WM - window manager things\n"
#~ "- X11::Protocol::XSetRoot - set root window background\n"
#~ "- X11::AtomConstants - atoms\n"
#~ "- X11::CursorFont - cursor names\n"
#~ "- Encode::X11 - compound text encode/decode\n"
#~ "- X11::Protocol::Ext::Composite - obscured window content\n"
#~ "- X11::Protocol::Ext::DAMAGE - window/pixmap content changes\n"
#~ "- X11::Protocol::Ext::DOUBLE_BUFFER - off-screen swapped drawing\n"
#~ "- X11::Protocol::Ext::MIT_SCREEN_SAVER - external screen saver\n"
#~ "- X11::Protocol::Ext::MIT_SHM - images through shared memory\n"
#~ "- X11::Protocol::Ext::MIT_SUNDRY_NONSTANDARD - old bug mode\n"
#~ "- X11::Protocol::Ext::TOG_CUP - colormap helpers\n"
#~ "- X11::Protocol::Ext::XFree86_DGA - direct video RAM access\n"
#~ "- X11::Protocol::Ext::XFIXES - various regions, cursors, selection "
#~ "events\n"
#~ "- X11::Protocol::Ext::XINERAMA.pm - multiple monitors as one big screen\n"
#~ "- X11::Protocol::Ext::X_Resource - server usage statistics"
#~ msgstr ""
#~ "X11::Protocol に対するその他の拡張およびヘルパーです: \n"
#~ "- X11::Protocol::Other - その他のヘルパー\n"
#~ "- X11::Protocol::ChooseWindow - ウインドウに対するユーザクリック\n"
#~ "- X11::Protocol::GrabServer - oop ブロックスコープサーバグラブ\n"
#~ "- X11::Protocol::WM - さまざまなウインドウマネージャの機能\n"
#~ "- X11::Protocol::XSetRoot - ルートウインドウの背景設定\n"
#~ "- X11::AtomConstants - atoms\n"
#~ "- X11::CursorFont - カーソル名\n"
#~ "- Encode::X11 - コンパウンドテキストエンコード／デコード\n"
#~ "- X11::Protocol::Ext::Composite - ウインドウコンテンツの難読化\n"
#~ "- X11::Protocol::Ext::DAMAGE - ウインドウ／ピクセルマップの内容変更\n"
#~ "- X11::Protocol::Ext::DOUBLE_BUFFER - オフスクリーンスワップ描画\n"
#~ "- X11::Protocol::Ext::MIT_SCREEN_SAVER - 外部スクリーンセーバー\n"
#~ "- X11::Protocol::Ext::MIT_SHM - 共有メモリを介した画像\n"
#~ "- X11::Protocol::Ext::MIT_SUNDRY_NONSTANDARD - 古いバグモード\n"
#~ "- X11::Protocol::Ext::TOG_CUP - カラーマップヘルパー\n"
#~ "- X11::Protocol::Ext::XFree86_DGA - 直接ビデオ RAM アクセス\n"
#~ "- X11::Protocol::Ext::XFIXES - 各種のリージョン／カーソル／選択イベント\n"
#~ "- X11::Protocol::Ext::XINERAMA.pm - 複数モニタによる巨大画面の構成\n"
#~ "- X11::Protocol::Ext::X_Resource - サーバ統計情報"

#~ msgid "(DEPRECATED) RFC 2822 Address Parsing and Creation"
#~ msgstr "(廃止予定) RFC 2822 のアドレス処理と作成"

#~ msgid ""
#~ "*ACHTUNG!* This module has a vulnerability (at https://cve.mitre.org/cgi-"
#~ "bin/cvename.cgi?name=CVE-2015-7686) which allows remote attackers to "
#~ "cause denial of service. In other words, sometimes it takes way too long "
#~ "to process certain kinds of input. Maybe someday this will be fixed. "
#~ "Until then, use *Email::Address::XS* instead which has backward "
#~ "compatible API.\n"
#~ "\n"
#~ "This class implements a regex-based RFC 2822 parser that locates email "
#~ "addresses in strings and returns a list of 'Email::Address' objects "
#~ "found. Alternatively you may construct objects manually. The goal of this "
#~ "software is to be correct, and very very fast."
#~ msgstr ""
#~ "*警告!* このモジュールには、リモートの攻撃者がサービス拒否攻撃を実施できて"
#~ "しまう脆弱性 (https://cve.mitre.org/cgi-bin/cvename.cgi?"
#~ "name=CVE-2015-7686) があります。言い換えると、処理に長い時間を要するような"
#~ "入力を受け付けてしまう、というものです。将来的には修正される予定ですが、現"
#~ "時点では後方互換性のある *Email::Address::XS* をお使いください。\n"
#~ "\n"
#~ "このクラスは、文字列内から電子メールアドレスを検出することのできる、正規表"
#~ "現ベースの RFC 2822 パーサを実装しています。オブジェクトは手作業で構築する"
#~ "こともできます。このソフトウエアの目的は、正確かつ非常に高速なモジュールと"
#~ "なることにあります。"

#~ msgid ""
#~ "Minion is a high performance job queue for the Perl programming language, "
#~ "with support for multiple named queues, priorities, delayed jobs, job "
#~ "dependencies, job progress, job results, retries with backoff, rate "
#~ "limiting, unique jobs, statistics, distributed workers, parallel "
#~ "processing, autoscaling, remote control, at http://mojolicious.org admin "
#~ "ui, resource leak protection and multiple backends (such as at http://www."
#~ "postgresql.org).\n"
#~ "\n"
#~ "Job queues allow you to process time and/or computationally intensive "
#~ "tasks in background processes, outside of the request/response lifecycle "
#~ "of web applications. Among those tasks you'll commonly find image "
#~ "resizing, spam filtering, HTTP downloads, building tarballs, warming "
#~ "caches and basically everything else you can imagine that's not super "
#~ "fast."
#~ msgstr ""
#~ "Minion は Perl プログラミング言語における高性能なジョブキューです。複数の"
#~ "名前付きキューに対応しているほか、優先順位や遅延ジョブ、ジョブ同士の依存関"
#~ "係や進捗管理、結果やバックオフ付きの再試行、ユニークジョブや統計情報、分散"
#~ "ワーカーや並行処理、自動スケールやリモートコントロール (http://"
#~ "mojolicious.org) 、管理 UI やリソースリーク検出、複数バックエンド (http://"
#~ "www.postgresql.org など) の機能があります。 \n"
#~ "\n"
#~ "ジョブキューは裏での一括処理を管理する仕組みで、 Web アプリケーションのリ"
#~ "クエスト／レスポンスとは別枠で動作するものです。これらのタスクには例えば、"
#~ "画像のサイズ変更や SPAM のフィルタリング、 HTTP のダウンロードや tar ボー"
#~ "ルのビルド、キャッシュの再活性化など、あらゆることを非常に高速に処理するこ"
#~ "とができます。"

#~ msgid ""
#~ "This module implements an XML parser with a interface similar to the XML::"
#~ "Parser manpage. Though not all callbacks are supported, you should be "
#~ "able to use it in the same way you use XML::Parser. Due to using "
#~ "experimental regexp features it'll work only on Perl 5.6 and above and "
#~ "may behave differently on different platforms.\n"
#~ "\n"
#~ "Note that you cannot use regular expressions or split in callbacks. This "
#~ "is due to a limitation of perl's regular expression implementation (which "
#~ "is not re-entrant)."
#~ msgstr ""
#~ "このモジュールは XML::Parser に似たインターフェイスを持つ XML パーサを実装"
#~ "しています。すべてのコールバックには対応していませんが、 XML::Parser と同"
#~ "じように利用できるようになっています。実験的な正規表現機能を利用しているた"
#~ "め、 Perl 5.6 もしくはそれ以降のバージョンでのみ動作するほか、プラット"
#~ "フォームによっては異なる動作をする場合があります。\n"
#~ "\n"
#~ "なお、コールバック内では正規表現やスプリットを利用することができません。こ"
#~ "れは Perl の正規表現の実装による制限 (リエントラントではないため) です。"

#~ msgid "Calculate digests while reading or writing"
#~ msgstr "読み込み時や書き込み時にダイジェスト値を計算するモジュール"

#~ msgid ""
#~ "This module allows you to calculate digests while reading or writing from/"
#~ "to file handles. This avoids having to reread the same content to compute "
#~ "the digests after having written a file."
#~ msgstr ""
#~ "このモジュールは、ファイルハンドルに対する読み込みや書き込みの際にダイジェ"
#~ "スト値を計算することができるものです。このモジュールを利用することで、ファ"
#~ "イルへの書き込み後に再度読み出しを行なってダイジェスト値を計算したりする手"
#~ "間を省くことができます。"

#~ msgid "Fast, compact, powerful binary (de-)serialization"
#~ msgstr "高速でコンパクトなバイナリシリアライズ／デシリアライズ処理"

#~ msgid "Fast, compact, powerful binary deserialization"
#~ msgstr "高速でコンパクトなバイナリシリアライズ／デシリアライズ処理"

#~ msgid "Fast, compact, powerful binary serialization"
#~ msgstr "高速でコンパクトなバイナリシリアライズ／デシリアライズ処理"

#~ msgid ""
#~ "   ?Nothing is more fairly distributed than common sense: no one "
#~ "thinks    he needs more of it than he already has.?\n"
#~ "\n"
#~ "   ? René Descartes\n"
#~ "\n"
#~ "This module implements some sane defaults for Perl programs, as defined "
#~ "by two typical (or not so typical - use your common sense) specimens of "
#~ "Perl coders. In fact, after working out details on which warnings and "
#~ "strict modes to enable and make fatal, we found that we (and our code "
#~ "written so far, and others) fully agree on every option, even though we "
#~ "never used warnings before, so it seems this module indeed reflects a "
#~ "\"common\" sense among some long-time Perl coders.\n"
#~ "\n"
#~ "The basic philosophy behind the choices made in common::sense can be "
#~ "summarised as: \"enforcing strict policies to catch as many bugs as "
#~ "possible, while at the same time, not limiting the expressive power "
#~ "available to the programmer\".\n"
#~ "\n"
#~ "Two typical examples of how this philosophy is applied in practise is the "
#~ "handling of uninitialised and malloc warnings: \n"
#~ "* _uninitialised_\n"
#~ "\n"
#~ "  'undef' is a well-defined feature of perl, and enabling warnings for   "
#~ "using it rarely catches any bugs, but considerably limits you in what "
#~ "you   can do, so uninitialised warnings are disabled. \n"
#~ "* _malloc_\n"
#~ "\n"
#~ "  Freeing something twice on the C level is a serious bug, usually "
#~ "causing   memory corruption. It often leads to side effects much later in "
#~ "the   program and there are no advantages to not reporting this, so "
#~ "malloc   warnings are fatal by default.\n"
#~ "\n"
#~ "Unfortunately, there is no fine-grained warning control in perl, so often "
#~ "whole groups of useful warnings had to be excluded because of a single "
#~ "useless warning (for example, perl puts an arbitrary limit on the length "
#~ "of text you can match with some regexes before emitting a warning, making "
#~ "the whole 'regexp' category useless).\n"
#~ "\n"
#~ "What follows is a more thorough discussion of what this module does, and "
#~ "why it does it, and what the advantages (and disadvantages) of this "
#~ "approach are."
#~ msgstr ""
#~ "   \"分別ほど人々の間に平等に分け与えられているものはない。というのも、誰"
#~ "でもみんな、自分には分別が十分に備わっていると思っているからだ。\" \n"
#~ "\n"
#~ "   - ルネ・デカルト\n"
#~ "\n"
#~ "このモジュールは、 2 つの典型的 (かどうかはあなたの判断です) な Perl プロ"
#~ "グラムの見本として、真っ当な既定値を実装しています。事実、生成された警告や"
#~ "制約モードを致命的エラーとして扱うことで、我々 (と作成するコード) は各メッ"
#~ "セージによる対応を促される結果となります。これは今まで警告として扱ってこな"
#~ "かったものであっても、それは長期間にわたる Perl のコーダによる \"分別\" に"
#~ "照らしあわせることで、悪い箇所を指摘することになるためです。\n"
#~ "\n"
#~ "common::sense モジュールで選定された基本的な哲学は、 \"できるかぎり多数の"
#~ "バグを捕まえるための制約ポリシーを強制しながら、同時にプログラマに備わった"
#~ "表現力を邪魔しないこと\" にあります。\n"
#~ "\n"
#~ "下記の 2 つの例で、実際に uninitialised と malloc に対する警告哲学を示しま"
#~ "す:\n"
#~ "\n"
#~ "* _uninitialised_\n"
#~ "\n"
#~ "  'undef' は Perl でよく使用される機能で、これを使用することで滅多に発生し"
#~ "ないバグに対して警告を生成することができます。ですが、これを利用することで"
#~ "コーディングを制限してしまうことになるため、初期化されていない旨の警告を無"
#~ "効化します。\n"
#~ "\n"
#~ "* _malloc_\n"
#~ "\n"
#~ "  C 言語レベルでは、確保されたメモリを 2 度解放することは深刻なバグにな"
#~ "り、一般的にはメモリ破壊を引き起こします。プログラム内で副次的な悪影響を起"
#~ "こすこともあるため、これを警告しないことに何の利点もありません。そのた"
#~ "め、 malloc の警告は既定で致命的エラーに設定されています。\n"
#~ "\n"
#~ "残念ながら Perl の警告をうまく制御する方法はなく、 1 つの無意味な警告のた"
#~ "めに、残り全ての有用な警告を排除してしまいがちです (たとえば Perl では、正"
#~ "規表現に該当させる目的で任意の長さにテキストを制限できますが、これにより無"
#~ "意味な警告を生成してしまう場合があります。これにより 'regexp' の警告分類は"
#~ "意味のないものになってしまいます) 。\n"
#~ "\n"
#~ "下記はこのモジュールが何を行なうのか、およびなぜこれを行なうのか、そしてこ"
#~ "の方法がどのような利点をもたらすのかについて、詳しく述べたものです。"

#~ msgid ""
#~ "The goal here is simply to provide recursive versions of mkdir() and "
#~ "rmdir() with as little code and overhead as possible.\n"
#~ "\n"
#~ "This module is in no way meant to derogate File::Path and is in no way an "
#~ "endorsement to go out and replace all use of File::Path with File::Path::"
#~ "Tiny.\n"
#~ "\n"
#~ "File::Path is very good at what it does but there's simply a lot "
#~ "happening that we can do without much of the time.\n"
#~ "\n"
#~ "Here are some things File::Path has/does that this module attempts to do "
#~ "without: \n"
#~ "* * multiple interfaces\n"
#~ "\n"
#~ "Backwards compatibility brings in a lot of code and logic that we don't "
#~ "need from here on out. \n"
#~ "* * chdir()s\n"
#~ "\n"
#~ "It forces a ton of chdir()s which could leave you somewhere you're not "
#~ "planning on being and requires much more overhead to do.\n"
#~ "\n"
#~ "This module provides a way to disable that if you know it is safe to do "
#~ "so in your circumstance. \n"
#~ "* * can croak not allowing you to detect and handle failure\n"
#~ "\n"
#~ "Just let me handle errors how I want. Don't make my entire app die or "
#~ "have to wrap it in an eval\n"
#~ "\n"
#~ "The exception here is the security checks can croak, which is what you "
#~ "want. See DIAGNOSTICS for more info. \n"
#~ "* * A well intentioned output system\n"
#~ "\n"
#~ "Just let me do the output how I want. (Nothing, As HTML, print to a "
#~ "filehandle, etc...) \n"
#~ "* * A well intentioned and experimental (IE subject to change) error   "
#~ "handling system.\n"
#~ "\n"
#~ "Just keep it simple and detect failure via a boolean check and do what I "
#~ "want with the error. See \"How can I make/remove multiple paths?\" \n"
#~ "* * According to its POD, removing a tree is apparently not safe unless "
#~ "you   tell it to be with the ?safe? or 'keep_root' attributes.\n"
#~ "\n"
#~ "Seems like that should just happen, I don't want to worry about "
#~ "accidentally removing / when I pass it /tmp"
#~ msgstr ""
#~ "このモジュールは、できる限り小さなコードとオーバーヘッドで、 mkdir() と "
#~ "rmdir() の再帰版を提供することを目的としています。\n"
#~ "\n"
#~ "このモジュールは File::Path の機能縮小版ではありませんし、 File::Path の機"
#~ "能のすべてを File::Path::Tiny で置き換えるような意図もありません。\n"
#~ "\n"
#~ "File::Path は機能の割には非常に良質なモジュールですが、このモジュールを使"
#~ "うことによる負荷は大きく、このモジュール無しでできることも数多くありま"
#~ "す。\n"
#~ "\n"
#~ "下記に File::Path には存在するものの、本モジュールには存在していない機能を"
#~ "示します:\n"
#~ "* * 複数のインターフェイス\n"
#~ "\n"
#~ "後方互換性の確保には大量のコードが必要となりますが、本モジュールでは不要で"
#~ "あるため、削除されています。\n"
#~ "* * chdir()\n"
#~ "\n"
#~ "File::Path には予期せぬ場所に多数の chdir() が存在し、これによって大きな"
#~ "オーバーヘッドになっています。\n"
#~ "\n"
#~ "このモジュールは、お使いの状況下で無効化するのが安全かどうかを知る術を提供"
#~ "します。\n"
#~ "* * croak による失敗の検出とその処理\n"
#~ "\n"
#~ "必要に応じてエラーを処理したいものです。アプリケーション全体を終了させた"
#~ "り、わざわざ eval() でラッピングしたりしたくはありません。\n"
#~ "\n"
#~ "ただし、セキュリティチェックでのみ croak することがあります。これはお使い"
#~ "の方にとっても希望の動作でしょう。詳しくは DIAGNOSTICS をお読みくださ"
#~ "い。\n"
#~ "* * よりわかりやすい出力システム\n"
#~ "\n"
#~ "出力形式も必要に応じて処理したいものです (HTML 出力やファイルハンドルへの"
#~ "出力など) 。\n"
#~ "* * よりわかりやすく、実験的 (つまり、仕様を変えやすい) エラー処理システ"
#~ "ム\n"
#~ "\n"
#~ "シンプルであり、かつ boolean チェックで容易に検出できるエラー処理システム"
#~ "であるべきです。詳しくは \"How can I make/remove multiple paths?\" (複数の"
#~ "パスをつく性または削除するには？) をお読みください。\n"
#~ "* * POD によると、 ‘safe’ もしくは 'keep_root' の属性を付与しない限り、ツ"
#~ "リーの削除は安全ではないものと思われる\n"
#~ "\n"
#~ "誤って / を削除してしまったりなどの心配をする必要はありません。"

#~ msgid ""
#~ "This module is a low-level interface to the Mac OS X Property List "
#~ "(plist) format. You probably shouldn't use this in applications?build "
#~ "interfaces on top of this so you don't have to put all the heinous multi-"
#~ "level object stuff where people have to look at it.\n"
#~ "\n"
#~ "You can parse a plist file and get back a data structure. You can take "
#~ "that data structure and get back the plist as XML. If you want to change "
#~ "the structure inbetween that's your business. :)\n"
#~ "\n"
#~ "You don't need to be on Mac OS X to use this. It simply parses and "
#~ "manipulates a text format that Mac OS X uses."
#~ msgstr ""
#~ "このモジュールは Mac OS X のプロパティリスト (plist) 形式に対する低レベル"
#~ "なインターフェイスです。これを利用してアプリケーションを構築するためのイン"
#~ "ターフェイスとするものではないため、ユーザが参照するようなものをここにおく"
#~ "べきではありません。\n"
#~ "\n"
#~ "このモジュールは plist ファイルを処理することができるほか、それをデータ構"
#~ "造に戻すこともできます。データ構造はそのまま取得することができるほか、 "
#~ "XML 形式で plist に戻すこともできます。データ構造を変更したい場合は、それ"
#~ "ぞれ必要に応じて独自に実施してください。\n"
#~ "\n"
#~ "このモジュールを利用するにあたっては、 Mac OS X である必要はありません。こ"
#~ "のモジュールは、 Mac OS X が使用するテキスト形式を、単純に処理して操作する"
#~ "だけです。"

#~ msgid "Stringprep Profile for Internationalized Domain Names (S<RFC?3491>)"
#~ msgstr "国際ドメイン名 (S<RFC 3491>) 向け Stringprep プロファイル"

#~ msgid ""
#~ "From http://en.wikipedia.org/wiki/Kensho:\n"
#~ "\n"
#~ "    Kensh? (??) (C. Wu) is a Japanese term for enlightenment experiences "
#~ "-     most commonly used within the confines of Zen Buddhism - "
#~ "literally     meaning \"seeing one's nature\"[1] or \"true self.\"[2] It "
#~ "generally     \"refers to the realization of nonduality of subject and "
#~ "object.\"[3]\n"
#~ "\n"
#~ "Task::Kensho is a list of recommended modules for Enlightened Perl "
#~ "development. CPAN is wonderful, but there are too many wheels and you "
#~ "have to pick and choose amongst the various competing technologies.\n"
#~ "\n"
#~ "The plan is for Task::Kensho to be a rough testing ground for ideas that "
#~ "go into among other things the Enlightened Perl Organisation Extended "
#~ "Core (EPO-EC).\n"
#~ "\n"
#~ "The modules that are bundled by Task::Kensho are broken down into several "
#~ "categories and are still being considered. They are all taken from "
#~ "various top 100 most used perl modules lists and from discussions with "
#~ "various subject matter experts in the Perl Community. That said, this "
#~ "bundle does _not_ follow the guidelines established for the EPO-EC for "
#~ "peer review via industry advisers.\n"
#~ "\n"
#~ "Starting in 2011, Task::Kensho split its sub-groups of modules into "
#~ "individually-installable tasks. Each Task::Kensho sub-task is listed at "
#~ "the beginning of its section in this documentation.\n"
#~ "\n"
#~ "When installing Task::Kensho itself, you will be asked to install each "
#~ "sub-task in turn, or you can install individual tasks separately. These "
#~ "individual tasks will always install all their modules by default. This "
#~ "facilitates the ease and simplicity the distribution aims to achieve."
#~ msgstr ""
#~ "https://ja.wikipedia.org/wiki/見性より:\n"
#~ "\n"
#~ "    見性（けんしょう）とは、仏教の禅において用いられる仏教用語。人間に本来"
#~ "そなわる、本性を徹見すること。禅の悟りの１つとされる。次の修行過程は修道。"
#~ "仏典には見性の語は多く現れるが、見（dṛṣti）と性（svabhāva）という字義通り"
#~ "の熟語（複合語）で、禅宗の用法と関係した記述はほとんど見られず（#見性成仏"
#~ "を参照）、これが禅の用語とされる理由となっている。\n"
#~ "\n"
#~ "Task::Kensho は Enlightened Perl の開発で使用する推奨モジュール集です。"
#~ "CPAN は素晴らしい仕組みですが、多数のモジュールが存在することから、様々な"
#~ "競合技術の間でどれを選択すべきかがわかりにくくなっています。\n"
#~ "\n"
#~ "Task::Kensho は、アイディアに対して大まかなテストグラウンドとなることを目"
#~ "指し、これによって Enlightened Perl Organisation Extended Core (EPO-EC) を"
#~ "構成しています。\n"
#~ "\n"
#~ "Task::Kensho に同梱されているモジュールは複数のカテゴリに分類されます。こ"
#~ "れらは 100 種類のもっともよく使用される Perl モジュールの一覧から取られた"
#~ "ものであるほか、 Perl のコミュニティ内で熟練者同士が議論を行なって決めたも"
#~ "のでもあります。つまり、この同梱物は技術的なアドバイザを介してピアレビュー"
#~ "を行ない、 EPO-EC 用に建てられたガイドラインには従って _いない_ ということ"
#~ "になります。\n"
#~ "\n"
#~ "2011 年以降、 Task::Kensho はモジュールのサブグループを個別に分割し、それ"
#~ "ぞれインストール可能なタスクとしました。各 Task::Kensho のサブタスクは、こ"
#~ "のドキュメンテーション内のセクションの冒頭に一覧で示されています。\n"
#~ "\n"
#~ "Task::Kensho 自身をインストールする場合、インストールするサブタスクを選択"
#~ "するように求められるほか、個別にタスクをインストールすることもできます。こ"
#~ "れらの個別のタスクは、既定では常にすべてのモジュールをインストールします。"
#~ "これにより、配布物を実現するのに簡単でシンプルな方法となっています。"

#~ msgid ""
#~ "This module replaces actual time with simulated time everywhere (core "
#~ "time(), Time::HiRes, EV, AnyEvent with EV, Mojolicious, ?) and provide a "
#~ "way to write deterministic tests for event loop based applications with "
#~ "timers. \n"
#~ "*IMPORTANT!* This module *must* be loaded by your script/app/test before "
#~ "other related modules (Time::HiRes, Mojolicious, EV, etc.)."
#~ msgstr ""
#~ "このモジュールは、様々な状況下で実際の時刻を疑似の時刻に置き換えることがで"
#~ "きる仕組みです。これには例えば、 Perl 標準の time() のほか、 Time::HiRes, "
#~ "EV, EV 付き AnyEvent, Mojolicious などが含まれます。これにより、タイマーを"
#~ "利用するイベントループベースのアプリケーションで、状況に左右されない安定し"
#~ "たテストを実現します。\n"
#~ "*注意* このモジュールは、関連するモジュール (Time::HiRes, Mojolicious, EV "
#~ "など) が読み込まれる前に、スクリプトやアプリ、テストなどで読み込んでおかな"
#~ "ければなりません。"

#~ msgid "YAML Ain't Markup Language?"
#~ msgstr "YAML - マークアップ言語以外のもの?"

#~ msgid ""
#~ "This class implements a regex-based RFC 2822 parser that locates email "
#~ "addresses in strings and returns a list of 'Email::Address' objects "
#~ "found. Alternatively you may construct objects manually. The goal of this "
#~ "software is to be correct, and very very fast."
#~ msgstr ""
#~ "このクラスは、正規表現をベースとした RFC 2822 のパーサを実装しています。"
#~ "パーサでは文字列の中から電子メールアドレスの存在を検出できるほか、検出した"
#~ "電子メールアドレスを 'Email::Address' オブジェクトのリストとして返すことが"
#~ "できます。もちろんオブジェクトを手作業で作成することもできます。このソフト"
#~ "ウエアは、正しくかつ非常に素早く動作することを目指しています。"

#~ msgid "Perl modules for configuring various boot loaders."
#~ msgstr "様々なブートローダを設定するための Perl モジュールです。"

#~ msgid ""
#~ "This module automatically generates accessor/mutators for your class. "
#~ "Most of the time, writing accessors is an exercise in cutting and "
#~ "pasting.\n"
#~ "\n"
#~ "If you make your module a subclass of Class::Accessor and declare your "
#~ "accessor fields with mk_accessors() then you'll find yourself with a set "
#~ "of automatically generated accessors which can even be customized!"
#~ msgstr ""
#~ "このモジュールは、お使いのクラスに対して自動的にアクセサやミューテータを作"
#~ "成することができます。アクセサの作成はカット＆ペーストを多用する面倒な作業"
#~ "であるためです。\n"
#~ "\n"
#~ "Class::Accessor に対するサブクラスのモジュールを作成し、 mk_accessors() で"
#~ "アクセサフィールドを定義すると、自動的に生成されるアクセサに対してカスタマ"
#~ "イズを行なうことができます。"

#~ msgid "Run-time class loading on first method call"
#~ msgstr "最初のメソッド呼び出し時に読み込まれるランタイムクラス"

#~ msgid ""
#~ "Class::Autouse allows you to specify a class the will only load when a "
#~ "method of that class is called. For large classes that might not be used "
#~ "during the running of a program, such as Date::Manip, this can save you "
#~ "large amounts of memory, and decrease the script load time."
#~ msgstr ""
#~ "Class::Autouse は、それらのクラス内のメソッドが呼び出されたときにのみ 読み"
#~ "込むクラスを指定することができます。プログラムの起動時には使用されないよう"
#~ "な巨大なクラス クラスの場合 (たとえば Date::Manip など) 、本モジュールを使"
#~ "用することで 大きなメモリを消費せずに済むほか、スクリプトの読み込み時間も"
#~ "削減することができます。"

#~ msgid ""
#~ "Class::Multimethods -- Supports multimethods and subroutine overloading "
#~ "in Perl."
#~ msgstr ""
#~ "Class::Multimethods -- Perl でマルチメソッドやサブルーチンオーバーライドに"
#~ "対応することができます。"

#~ msgid "Copy and Paste with any OS"
#~ msgstr "任意の OS で動作するコピー＆ペースト"

#~ msgid ""
#~ "Who doesn't remember the first time they learned to copy and paste, and "
#~ "generated an exponentially growing text document? Yes, that's right, "
#~ "clipboards are magical.\n"
#~ "\n"
#~ "With Clipboard.pm, this magic is now trivial to access, in a cross-"
#~ "platform-consistent API, from your Perl code."
#~ msgstr ""
#~ "初めてコピー＆ペーストを学んだ時の記憶がありますか？コピー＆ペーストによっ"
#~ "て、テキストは指数関数的に増えていきます。そう、クリップボードは魔法のよう"
#~ "な仕組みです。\n"
#~ "\n"
#~ "Clipboard.pm を利用することで、お使いの Perl コードからプラットフォームに"
#~ "依存することなく、この魔法にアクセスする機能が提供されます。"

#~ msgid ""
#~ "This module tries to figure out how to link C programs with Fortran "
#~ "subroutines on your system. Basically one must add a list of Fortran "
#~ "runtime libraries. The problem is their location and name varies with "
#~ "each OS/compiler combination!"
#~ msgstr ""
#~ "このモジュールは、お使いのシステムで C プログラムと Fortran サブルーチンを"
#~ "リンクする方法を示すものです。基本的に Fortran のランタイムライブラリの一"
#~ "覧に追加しなければなりません。また、それぞれの OS やコンパイラの組み合わせ"
#~ "で場所と名前が変わってしまう問題があります。"

#~ msgid ""
#~ "This module does the same thing as msgfmt from GNU gettext-tools, except "
#~ "this is pure Perl."
#~ msgstr ""
#~ "このモジュールは、 GNU gettext-tools の msgfmt と同じ処理を行ないます。た"
#~ "だし、このモジュールは純粋に Perl だけで作られています。"

#~ msgid "Simple platform independent e-mail from your perl script."
#~ msgstr ""
#~ "お使いの Perl スクリプトからプラットフォームに依存しない形式で電子メールを"
#~ "送信します。"

#~ msgid "An Autoload-Capable Interface Module for libmcrypt"
#~ msgstr "自動読み込みに対応した libmcrypt 向けインターフェイスモジュール"

#~ msgid ""
#~ "The Mcrypt module provides a simple and intuitive Perl abstraction of the "
#~ "libmcrypt cryptography library.  It provides mechanisms for encoding and "
#~ "decoding Perl scalars."
#~ msgstr ""
#~ "mcrypt モジュールは、 libmcrypt 暗号化ライブラリに対するシンプルで直感的"
#~ "な Perl 抽象化を 実現します。 Perl のスカラー変数に対するエンコードやデ"
#~ "コード処理機構を提供しています。"

#~ msgid "PerlIO layer for normalizing line endings"
#~ msgstr "行編集の標準化のための PerlIO レイヤ"

#~ msgid ""
#~ "This layer normalizes any of \"CR\", \"LF\", \"CRLF\" and \"Native\" into "
#~ "the designated line ending.  It works for both input and output handles."
#~ msgstr ""
#~ "このレイヤは、 \"CR\", \"LF\", \"CRLF\", \"ネイティブ\" の各改行を標準化"
#~ "し、正しい行編集を行なうことを目的としています。入出力ハンドルの両方に対応"
#~ "しています。"

#~ msgid ""
#~ "One recurring problem in modules that use Scalar::Util's \"weaken\" "
#~ "function is that it is not present in the pure-perl variant.\n"
#~ "\n"
#~ "While this isn't necessarily always a problem in a straight CPAN-based "
#~ "Perl environment, some operating system distributions only include the "
#~ "pure-Perl versions, don't include the XS version, and so weaken is then "
#~ "\"missing\" from the platform, despite passing a dependency on Scalar::"
#~ "Util successfully."
#~ msgstr ""
#~ "モジュールにおいて頻発する問題として、 Scalar::Util の \"weaken\" 関数が、"
#~ "特定の Perl 環境に存在するかどうか、というものがあります。\n"
#~ "\n"
#~ "これは CPAN ベースの Perl では発生しない問題ですが、オペレーティングシステ"
#~ "ムによっては純粋な Perl 機能しか搭載しておらず、 XS バージョンを含まない場"
#~ "合があります。そのため、 weaken が存在しないプラットフォームが存在し、それ"
#~ "にも関わらず Scalar::Util の依存関係をパスしてしまう場合があるためです。"

#~ msgid "This module lets you easily test the validity of YAML."
#~ msgstr ""
#~ "このモジュールを利用することで、 YAML の正当性を簡単にテストすることができ"
#~ "るようになります。"

#~ msgid "Perl interface to the GNU Aspell library"
#~ msgstr "GNU Aspell ライブラリに対する Perl インターフェイス"

#~ msgid ""
#~ "This module provides a Perl interface to the GNU Aspell library. This "
#~ "module is to meet the need of looking up many words, one at a time, in a "
#~ "single session, such as spell-checking a document in memory.\n"
#~ "\n"
#~ "The GNU C interface is described at:\n"
#~ "\n"
#~ "    http://aspell.net/man-html/Through-the-C-API.html#Through-the-C-API\n"
#~ "\n"
#~ "It's worth looking over the way config and speller (manager) objects are "
#~ "created when using the Aspell C API as some of that is hidden in the "
#~ "Text::Aspell module.\n"
#~ "\n"
#~ "For example, with Text::Aspell you do not have to explicitly create a "
#~ "speller object. The speller (manager) object is created automatically the "
#~ "first time you call suggest() or check().\n"
#~ "\n"
#~ "Note also that once the speller object is created some (all?) config "
#~ "options cannot be changed. For example, setting configuration options "
#~ "such as \"lang\" are what determine what dictionary Aspell will use. Once "
#~ "the speller object is created that dictionary will be used. I.e. setting "
#~ "\"lang\" after the speller object is created will have no effect."
#~ msgstr ""
#~ "このモジュールは GNU Aspell ライブラリに対する Perl のインターフェイスで"
#~ "す。このモジュールは、単一のセッション内で多数の単語を 1 つずつ検索したい"
#~ "用途に適合するように作られていて、たとえばメモり内にある文書のスペルチェッ"
#~ "クなどに使用することができます。\n"
#~ "\n"
#~ "GNU C インターフェイスについて、詳しくは下記をお読みください:\n"
#~ "\n"
#~ "    http://aspell.net/man-html/Through-the-C-API.html#Through-the-C-API\n"
#~ "\n"
#~ "設定方法や speller (管理) オブジェクトの作成について、詳しくは上記をお読み"
#~ "ください。また、 Aspell C API を使用する際の作業は、 Text::Aspell モジュー"
#~ "ル内に隠蔽される仕組みになっています。\n"
#~ "\n"
#~ "たとえば Text::Aspell では、 speller オブジェクトを明示的に作成する必要は"
#~ "ありません。 speller (管理) オブジェクトは、 suggest() や check() を初めて"
#~ "実行した際に自動的に作成されます。\n"
#~ "\n"
#~ "なお、いったん speller オブジェクトが作成されてしまうと、設定項目によって"
#~ "は変更できないものがあることにご注意ください。たとえば、 \"lang\" (Aspell "
#~ "が使用する辞書の設定) などのオプションなどがそれにあたります。 speller オ"
#~ "ブジェクトがいったん作成されてしまうと、 \"lang\" オプションの設定を変更し"
#~ "ても、効果がありません。"

#~ msgid "This is a Perl module to parse XSL Transformational sheets."
#~ msgstr ""
#~ "これは XSL Transformational sheet を処理するための Perl モジュールです。"

#~ msgid "PerlQt kdebindings library"
#~ msgstr "PerlQt kdebindings ライブラリ"

#~ msgid "Perl bindings for the Qt4 libraries from the kdebindings project."
#~ msgstr ""
#~ "kdebindings プロジェクト提供の qt4 ライブラリ向け Perl バインディングで"
#~ "す。"

#~ msgid "Development libraries for Perl-Qt4"
#~ msgstr "Perl-Qt4 向け開発ライブラリ"

#~ msgid ""
#~ "This package contains development files for the Perl bindings for the Qt4 "
#~ "libraries."
#~ msgstr ""
#~ "このパッケージには Qt4 ライブラリの Perl バインディングに対する開発用ファ"
#~ "イルが含まれています。"

#~ msgid "Command-Line Utilities to Copy and Paste with any OS"
#~ msgstr ""
#~ "任意の OS でコピー＆ペーストを行なうためのコマンドラインユーティリティ"

#~ msgid ""
#~ "Who doesn't remember the first time they learned to copy and paste, and "
#~ "generated an exponentially growing text document? Yes, that's right, "
#~ "clipboards are magical.\n"
#~ "\n"
#~ "This package contains several command-line utilities to manpulate "
#~ "clipboards."
#~ msgstr ""
#~ "初めてコピー＆ペーストを学んだ時の記憶がありますか？コピー＆ペーストによっ"
#~ "て、テキストは指数関数的に増えていきます。そう、クリップボードは魔法のよう"
#~ "な仕組みです。\n"
#~ "\n"
#~ "このパッケージには、クリップボードを操作するためのいくつかのコマンドライン"
#~ "ユーティリティが含まれています。"

#~ msgid ""
#~ "This distro contains modules that are used by both the server App::"
#~ "Dochazka::REST and the command-line client App::Dochazka::CLI."
#~ msgstr ""
#~ "この配布物には、サーバとして動作する App::Dochazka::REST とコマンドライン"
#~ "クライアントである App::Dochazka::CLI の両方で使用される、共有モジュールが"
#~ "含まれています。"

#~ msgid "The Distribution Metadata for a Cpan Dist"
#~ msgstr "CPAN 配布物に対する配布メタデータ"

#~ msgid ""
#~ "Software distributions released to the CPAN include a _META.json_ or, for "
#~ "older distributions, _META.yml_, which describes the distribution, its "
#~ "contents, and the requirements for building and installing the "
#~ "distribution. The data structure stored in the _META.json_ file is "
#~ "described in CPAN::Meta::Spec.\n"
#~ "\n"
#~ "CPAN::Meta provides a simple class to represent this distribution "
#~ "metadata (or _distmeta_), along with some helpful methods for "
#~ "interrogating that data.\n"
#~ "\n"
#~ "The documentation below is only for the methods of the CPAN::Meta object. "
#~ "For information on the meaning of individual fields, consult the spec."
#~ msgstr ""
#~ "CPAN に公開されたソフトウエア配布物には、 _META.json_ または _META.yml_ "
#~ "(古い配布物の場合) が存在していますが、これらは配布物の説明や内容物、そし"
#~ "て構築やインストールを行なう際の依存関係が記されています。このデータ構造"
#~ "は CPAN::Meta::Spec 内の _META.json_ ファイル内に保存されています。\n"
#~ "\n"
#~ "CPAN::Meta は配布物のメタデータ (もしくは _distmeta_) を表わすシンプルなク"
#~ "ラスを提供しているほか、それらのデータに問い合わせを行なうための便利なメ"
#~ "ソッドも用意されています。\n"
#~ "\n"
#~ "下記のドキュメンテーションは CPAN::Meta オブジェクトのメソッドのみが示され"
#~ "ています。それぞれのフィールドに対する意味については、 spec ファイルをお読"
#~ "みください。"

#~ msgid "Read and write a subset of YAML for CPAN Meta files"
#~ msgstr "CPAN メタファイル向けの YAML サブセットの読み書き"

#~ msgid ""
#~ "This module implements a subset of the YAML specification for use in "
#~ "reading and writing CPAN metadata files like _META.yml_ and _MYMETA.yml_. "
#~ "It should not be used for any other general YAML parsing or generation "
#~ "task.\n"
#~ "\n"
#~ "NOTE: _META.yml_ (and _MYMETA.yml_) files should be UTF-8 encoded. Users "
#~ "are responsible for proper encoding and decoding. In particular, the "
#~ "'read' and 'write' methods do *not* support UTF-8 and should not be used."
#~ msgstr ""
#~ "このモジュールは、 _META.yml_ や _MYMETA.yml_ のような CPAN メタデータファ"
#~ "イルに対して、これを読み書きする際に使用する YAML 仕様のサブセットを実装す"
#~ "るものです。汎用的な YAML の処理や生成の処理に使用すべきではありません。\n"
#~ "\n"
#~ "注意: _META.yml_ (および _MYMETA.yml_) ファイルは UTF-8 のエンコーディング"
#~ "であるべきものです。エンコーディングやデコーディングはユーザ側の責任で実施"
#~ "してください。特に UTF-8 に対応していない 'read', 'write' のメソッドは使用"
#~ "すべきではありません。"

#~ msgid ""
#~ "A very simple perl module that models a calendar month.\n"
#~ "\n"
#~ "This function returns a data structure representing the dates in a month. "
#~ "The data structure returned is an array of array references. The first "
#~ "level array represents the weeks in the month. The second level array "
#~ "contains the actual days. By default, each week starts on a Sunday and "
#~ "the value in the array is the date of that day. Any days at the beginning "
#~ "of the first week or the end of the last week that are from the previous "
#~ "or next month have the value undef."
#~ msgstr ""
#~ "月次カレンダーをモデルとした非常にシンプルな Perl モジュールです。\n"
#~ "\n"
#~ "この関数は月内での日付を表わすデータ構造を返します。返されるデータ構造は配"
#~ "列参照の配列になっていて、最初のレベルでは月内の週を表わし、 2 つめのレベ"
#~ "ルでは実際の日を表わします。既定では各週は日曜日に始まるものとされていて、"
#~ "そのように配列内に格納されていますが、月内の最初の週や最終の週の場合、対応"
#~ "する曜日の日が存在しない場合は、 undef が設定されます。"

#~ msgid "Class::C3::Componentised Perl module"
#~ msgstr "Class::C3::Componentised Perl モジュール"

#~ msgid "provides Moose-like method modifiers"
#~ msgstr "Moose のようなメソッド修飾子"

#~ msgid ""
#~ "Return-value object that lets you treat it as as a boolean, array or "
#~ "object"
#~ msgstr "boolean, 配列, オブジェクトとして扱うことのできる返り値オブジェクト"

#~ msgid ""
#~ "\"Class::Spiffy\" is a framework and methodology for doing object "
#~ "oriented (OO) programming in Perl. Class::Spiffy combines the best parts "
#~ "of Exporter.pm, base.pm, mixin.pm and SUPER.pm into one magic foundation "
#~ "class. It attempts to fix all the nits and warts of traditional Perl OO, "
#~ "in a clean, straightforward and (perhaps someday) standard way."
#~ msgstr ""
#~ "\"Class::Spiffy\" は、 Perl でオブジェクト指向 (OO) のプログラミングを行な"
#~ "うためのフレームワークと方法です。 Class::Spiffy は Exporter.pm, base.pm, "
#~ "mixin.pm, SUPER.pm の各部品を組み合わせて、 1 つの魔法のような基礎クラスと"
#~ "して組み立てています。既存の Perl オブジェクト指向に存在するバグの卵や不便"
#~ "なところをきれいに直し、素直で (いつかは) 標準的な方法になるよう目指してい"
#~ "ます。"

#~ msgid "Serialize/Deserialize AMF data"
#~ msgstr "AMF データのシリアライズ／デシリアライズ"

#~ msgid ""
#~ "This module is (de)serializer for Adobe's AMF (Action Message Format). "
#~ "Data::AMF is core module and it recognize only AMF data, not AMF packet. "
#~ "If you want to read/write AMF Packet, see Data::AMF::Packet instead."
#~ msgstr ""
#~ "このモジュールは Adobe 社の AMF (Action Message Format) のシリアライザ／デ"
#~ "シリアライザです。 Data::AMF が中枢モジュールで、ここでは AMF パケットでは"
#~ "なく AMF データのみを解釈することができます。 AMF パケットを読み書きしたい"
#~ "場合は、 Data::AMF::Packet をお使いください。"

#~ msgid ""
#~ "This module provides a simple object for logging to files under the Log::"
#~ "Dispatch::* system, and automatically rotating them according to "
#~ "different constraints. This is basically a Log::Dispatch::File wrapper "
#~ "with additions. To that end the arguments\n"
#~ "\n"
#~ "\tname, min_level, filename and  mode\n"
#~ "\n"
#~ "behave the same as Log::Dispatch::File. So see its man page (perldoc Log::"
#~ "Dispatch::File)\n"
#~ "\n"
#~ "The arguments size and max specify the maximum size and maximum number of "
#~ "log files created. The size defaults to 10M and the max number of files "
#~ "defaults to 1. If DatePattern is not defined then we default to working "
#~ "in size mode. That is, use size values for deciding when to rotate.\n"
#~ "\n"
#~ "Once DatePattern is defined FileRotate will move into time mode. Once "
#~ "this happens file rotation ignores size constraints, unless check_both, "
#~ "and uses the defined date pattern constraints.\n"
#~ "\n"
#~ "If you setup a config file using Log::Log4perl::init_and_watch() or the "
#~ "like, you can switch between modes just by commenting out the DatePattern "
#~ "line.\n"
#~ "\n"
#~ "When using DatePattern make sure TZ is defined correctly and that the TZ "
#~ "you use is understood by Date::Manip. We use Date::Manip to generate our "
#~ "recurrences. Bad TZ equals bad recurrences equals surprises! Read the "
#~ "Date::Manip man page for more details on TZ.\n"
#~ "\n"
#~ "DatePattern will default to a daily rotate if your entered pattern is "
#~ "incorrect. You will also get a warning message.\n"
#~ "\n"
#~ "If you have multiple writers that were started at different times you "
#~ "will find each writer will try to rotate the log file at a recurrence "
#~ "calculated from its start time. To sync all the writers just use a config "
#~ "file and update it after starting your last writer. This will cause Log::"
#~ "Dispatch::FileRotate->new() to be called by each of the writers close to "
#~ "the same time, and if your recurrences aren't too close together all "
#~ "should sync up just nicely.\n"
#~ "\n"
#~ "I initially assumed a long running process but it seems people are using "
#~ "this module as part of short running CGI programs. So, now we look at the "
#~ "last modified time stamp of the log file and compare it to a previous "
#~ "occurance of a DatePattern, on startup only. If the file stat shows the "
#~ "mtime to be earlier than the previous recurrance then I rotate the log "
#~ "file.\n"
#~ "\n"
#~ "We handle multiple writers using flock()."
#~ msgstr ""
#~ "このモジュールは、 Log::Dispatch::* システム下でファイルへのログを行ない、"
#~ "異なる制約指定でログのローテーションを行なうためのシンプルなオブジェクトを"
#~ "提供します。基本的な仕組みは、 Log::Dispatch::File ラッパーに追加機能を加"
#~ "えたものと言えるでしょう。ラッパーとしての動作を前提としているため、\n"
#~ "\n"
#~ "\tname (名前), min_level (最小レベル), filename (ファイル名), mode (モー"
#~ "ド)\n"
#~ "\n"
#~ "については、 Log::Dispatch::File と同じ動作になっています。詳しくはマニュ"
#~ "アルページをお読みください (perldoc Log::Dispatch::File) 。\n"
#~ "\n"
#~ "size, max には、それぞれログファイルを作成する際の最大サイズと最大ログ個数"
#~ "を指定します。既定では、それぞれサイズが 10MB 、個数は 1 に設定されていま"
#~ "す。また、 DatePattern を指定しない場合、サイズモードで動作することになり"
#~ "ます。つまり、ローテーションする際にはサイズを基準にして行なうことになりま"
#~ "す。\n"
#~ "\n"
#~ "DatePattern を指定すると、 FileRotate は時刻モードに切り替わります。 "
#~ "check_both を指定しない限り、サイズによる制約は無視され、日付パターンによ"
#~ "る制約のもと、動作することになります。\n"
#~ "\n"
#~ "Log::Log4perl::init_and_watch() やその他の機能を利用して設定ファイルを指定"
#~ "した場合は、 DatePattern の行をコメントアウトするだけでこれらを切り替える"
#~ "ことができます。\n"
#~ "\n"
#~ "また、 DatePattern を指定した場合は、 TZ が正しく設定されていて、かつ "
#~ "Date::Manip で解釈可能な形式になっていることをご確認ください。本モジュール"
#~ "では、 Date::Manip を利用してログの切り替えを判断しています。 TZ が誤った"
#~ "値に設定されていると、切り替えが正しく動作しないことに注意してください！ "
#~ "TZ について、詳しくは Date::Manip をお読みください。\n"
#~ "\n"
#~ "なお、 DatePattern で入力した値が誤っている場合は、日単位でのローテーショ"
#~ "ンになります。この際には渓谷メッセージが表示されます。\n"
#~ "\n"
#~ "複数のライターを異なる時刻で開始すると、それぞれ開始時刻から計算された時刻"
#~ "にログファイルをローテーションしようとします。全てのライターを同期したい場"
#~ "合は、設定ファイルを使用して、最後のライターが起動した後に更新を行なうよう"
#~ "にしてください。これにより Log::Dispatch::FileRotate->new() が呼び出され、"
#~ "ライター間の時刻が同じになります。ローテーションの間隔があまりにも短すぎる"
#~ "設定でもない限り、うまく同期して動作するはずです。\n"
#~ "\n"
#~ "初めのうちは、本モジュールは長期間動作するようなプロセスで使用されることを"
#~ "想定していましたが、 CGI プログラムのようにすぐに終了してしまうプログラム"
#~ "でも使用されていることに気がつきました。そのため、ログファイルの最終更新日"
#~ "時を参照して、 DatePattern によるローテーション比較を行なう処理は、開始時"
#~ "にのみ行なうようにしました。言い換えると、以前のローテーションよりも "
#~ "mtime が前であった場合、ローテーション処理を実施するようになっています。\n"
#~ "\n"
#~ "なお、複数のライター間の排他制御は flock() を使用しています。"

#~ msgid "Various e-mail related modules"
#~ msgstr "様々な電子メール関連モジュール"

#~ msgid ""
#~ "Minion is a job queue for the at http://mojolicious.org real-time web "
#~ "framework, with support for multiple named queues, priorities, delayed "
#~ "jobs, job dependencies, job progress, job results, retries with backoff, "
#~ "rate limiting, unique jobs, statistics, distributed workers, parallel "
#~ "processing, autoscaling, remote control, resource leak protection and "
#~ "multiple backends (such as at http://www.postgresql.org).\n"
#~ "\n"
#~ "Job queues allow you to process time and/or computationally intensive "
#~ "tasks in background processes, outside of the request/response lifecycle. "
#~ "Among those tasks you'll commonly find image resizing, spam filtering, "
#~ "HTTP downloads, building tarballs, warming caches and basically "
#~ "everything else you can imagine that's not super fast.\n"
#~ "\n"
#~ "  use Mojolicious::Lite;\n"
#~ "\n"
#~ "  plugin Minion => {Pg => 'postgresql://sri:s3cret@localhost/test'};\n"
#~ "\n"
#~ "     app->minion->add_task(poke_mojo => sub {     my $job = shift;     "
#~ "$job->app->ua->get('mojolicious.org');     $job->app->log->debug('We have "
#~ "poked mojolicious.org for a visitor');   });\n"
#~ "\n"
#~ "     get '/' => sub {     my $c = shift;     $c->minion-"
#~ ">enqueue('poke_mojo');     $c->render(text => 'We will poke mojolicious."
#~ "org for you soon.');   };\n"
#~ "\n"
#~ "  app->start;\n"
#~ "\n"
#~ "Background worker processes are usually started with the command Minion::"
#~ "Command::minion::worker, which becomes automatically available when an "
#~ "application loads the plugin Mojolicious::Plugin::Minion.\n"
#~ "\n"
#~ "  $ ./myapp.pl minion worker\n"
#~ "\n"
#~ "Jobs can be managed right from the command line with Minion::Command::"
#~ "minion::job.\n"
#~ "\n"
#~ "  $ ./myapp.pl minion job\n"
#~ "\n"
#~ "To manage background worker processes with systemd, you can use a unit "
#~ "configuration file like this.\n"
#~ "\n"
#~ "  [Unit]   Description=My Mojolicious application workers   "
#~ "After=postgresql.service\n"
#~ "\n"
#~ "  [Service]   Type=simple   ExecStart=/home/sri/myapp/myapp.pl minion "
#~ "worker -m production   KillMode=process\n"
#~ "\n"
#~ "  [Install]   WantedBy=multi-user.target\n"
#~ "\n"
#~ "Every job can fail or succeed, but not get lost, the system is eventually "
#~ "consistent and will preserve job results for as long as you like, "
#~ "depending on \"remove_after\". While individual workers can fail in the "
#~ "middle of processing a job, the system will detect this and ensure that "
#~ "no job is left in an uncertain state, depending on \"missing_after\"."
#~ msgstr ""
#~ "Minion は http://mojolicious.org で公開されているリアルタイム Web フレーム"
#~ "ワーク向けのジョブキューです。複数の名前付きキューに対応しているほか、優先"
#~ "順位や遅延ジョブ、ジョブの依存関係や進捗／実行結果、バックオフ付きの再試行"
#~ "や負荷制御、排他制御や統計情報、分散型ワーカーや並列処理、自動スケーリング"
#~ "や遠隔制御、リソースリークの保護と複数バックエンド (例: http://www."
#~ "postgresql.org) への対応などが行われています。\n"
#~ "\n"
#~ "ジョブキューの仕組みにより、計算量の多い処理を、リクエスト／レスポンスのラ"
#~ "イフサイクルからは切り離して、バックグラウンドプロセスとして実行することが"
#~ "できるようになります。このような処理にはたとえば、画像のサイズ変更や迷惑"
#~ "メールのフィルタリング、 HTTP のダウンロードや tar ボールの作成、キャッ"
#~ "シュの準備のほか、すぐに処理することのできない処理であればどのようなものに"
#~ "も適用することができます。\n"
#~ "\n"
#~ "  use Mojolicious::Lite;\n"
#~ "\n"
#~ "  plugin Minion => {Pg => 'postgresql://sri:s3cret@localhost/test'};\n"
#~ "\n"
#~ "     app->minion->add_task(poke_mojo => sub {     my $job = shift;     "
#~ "$job->app->ua->get('mojolicious.org');     $job->app->log->debug('We have "
#~ "poked mojolicious.org for a visitor');   });\n"
#~ "\n"
#~ "     get '/' => sub {     my $c = shift;     $c->minion-"
#~ ">enqueue('poke_mojo');     $c->render(text => 'We will poke mojolicious."
#~ "org for you soon.');   };\n"
#~ "\n"
#~ "  app->start;\n"
#~ "\n"
#~ "バックグラウンドのワーカープロセスは、通常 Minion::Command::minion::"
#~ "worker のコマンドで開始されますが、こちらはアプリケーションが "
#~ "Mojolicious::Plugin::Minion プラグインを読み込んだ段階で、自動的に利用でき"
#~ "るようになるものです。\n"
#~ "\n"
#~ "  $ ./myapp.pl minion worker\n"
#~ "\n"
#~ "ジョブは Minion::Command::minion::job をコマンドラインから利用して管理する"
#~ "ことができます。\n"
#~ "\n"
#~ "  $ ./myapp.pl minion job\n"
#~ "\n"
#~ "systemd でバッググラウンドのワーカープロセスを管理したい場合は、下記のよう"
#~ "なユニット設定ファイルをお使いください。\n"
#~ "\n"
#~ "  [Unit]   Description=My Mojolicious application workers   "
#~ "After=postgresql.service\n"
#~ "\n"
#~ "  [Service]   Type=simple   ExecStart=/home/sri/myapp/myapp.pl minion "
#~ "worker -m production   KillMode=process\n"
#~ "\n"
#~ "  [Install]   WantedBy=multi-user.target\n"
#~ "\n"
#~ "それぞれのジョブは成功する場合も失敗する場合もありますが、いずれにしても失"
#~ "われてしまうことはありません。システムは最終的に一貫性の保たれた状態になり"
#~ "ますし、ジョブの結果は必要なだけ保持します (\"remove_after\") 。個別のワー"
#~ "カーではジョブの処理途中で失敗する場合もありますが、システム側ではそれを検"
#~ "出して、不確定なジョブが残らないように動作します (\"missing_after\")。"

#~ msgid ""
#~ "Mojo::Pg is a tiny wrapper around DBD::Pg that makes at http://www."
#~ "postgresql.org a lot of fun to use with the at http://mojolicious.org "
#~ "real-time web framework. Perform queries blocking and non-blocking, use "
#~ "all at https://www.postgresql.org/docs/current/static/sql.html PostgreSQL "
#~ "has to offer, generate CRUD queries from data structures, manage your "
#~ "database schema with migrations and build scalable real-time web "
#~ "applications with the publish/subscribe pattern.\n"
#~ "\n"
#~ "Database and statement handles are cached automatically, and will be "
#~ "reused transparently to increase performance. You can handle connection "
#~ "timeouts gracefully by holding on to them only for short amounts of "
#~ "time.\n"
#~ "\n"
#~ "  use Mojolicious::Lite;   use Mojo::Pg;\n"
#~ "\n"
#~ "  helper pg => sub { state $pg = Mojo::Pg->new('postgresql://postgres@/"
#~ "test') };\n"
#~ "\n"
#~ "  get '/' => sub {     my $c  = shift;     my $db = $c->pg->db;     $c-"
#~ ">render(json => $db->query('select now() as now')->hash);   };\n"
#~ "\n"
#~ "  app->start;\n"
#~ "\n"
#~ "In this example application, we create a 'pg' helper to store a Mojo::Pg "
#~ "object. Our action calls that helper and uses the method Mojo::Pg/\"db\" "
#~ "to dequeue a Mojo::Pg::Database object from the connection pool. Then we "
#~ "use the method Mojo::Pg::Database/\"query\" to execute an at http://www."
#~ "postgresql.org/docs/current/static/sql.html statement, which returns a "
#~ "Mojo::Pg::Results object. And finally we call the method Mojo::Pg::"
#~ "Results/\"hash\" to retrieve the first row as a hash reference.\n"
#~ "\n"
#~ "While all I/O operations are performed blocking, you can wait for long "
#~ "running queries asynchronously, allowing the Mojo::IOLoop event loop to "
#~ "perform other tasks in the meantime. Since database connections usually "
#~ "have a very low latency, this often results in very good performance.\n"
#~ "\n"
#~ "Every database connection can only handle one active query at a time, "
#~ "this includes asynchronous ones. To perform multiple queries "
#~ "concurrently, you have to use multiple connections.\n"
#~ "\n"
#~ "     $pg->db->query('select pg_sleep(5)' => sub {...});   $pg->db-"
#~ ">query('select pg_sleep(5)' => sub {...});\n"
#~ "\n"
#~ "All cached database handles will be reset automatically if a new process "
#~ "has been forked, this allows multiple processes to share the same Mojo::"
#~ "Pg object safely."
#~ msgstr ""
#~ "Mojo::Pg は DBD::Pg に対する簡易なラッパーで、 http://mojolicious.org リア"
#~ "ルタイム Web フレームワークで http://www.postgresql.org を利用できるように"
#~ "する仕組みです。 ブロック型と非ブロック型の両方で問い合わせを行なうことが"
#~ "できるほか、 https://www.postgresql.org/docs/current/static/sql.html "
#~ "PostgreSQL が提供する全ての機能を利用することができます。データ構造に対す"
#~ "る CRUD クエリや移行を含むデータベーススキーマの管理、そして公開／購読パ"
#~ "ターンを利用したスケーラブルでリアルタイムな Web アプリケーションを構築す"
#~ "ることができます。\n"
#~ "\n"
#~ "データベースとステートメントのハンドルは自動的に作成され、性能を上げるため"
#~ "に自動的に再利用されるようになっています。また、接続タイムアウトについても"
#~ "うまく処理するように作られていて、長く待たされてしまうようなことも無くなっ"
#~ "ています。\n"
#~ "\n"
#~ "  use Mojolicious::Lite;   use Mojo::Pg;\n"
#~ "\n"
#~ "  helper pg => sub { state $pg = Mojo::Pg->new('postgresql://postgres@/"
#~ "test') };\n"
#~ "\n"
#~ "  get '/' => sub {     my $c  = shift;     my $db = $c->pg->db;     $c-"
#~ ">render(json => $db->query('select now() as now')->hash);   };\n"
#~ "\n"
#~ "  app->start;\n"
#~ "\n"
#~ "上記のサンプルアプリケーションでは、 'pg' ヘルパーを作成して Mojo::Pg オブ"
#~ "ジェクトを保存しています。アクションではそのヘルパーを呼び出して、  Mojo::"
#~ "Pg/\"db\" で接続プールから Mojo::Pg::Database オブジェクトをキューから取り"
#~ "出しています。あとは Mojo::Pg::Database/\"query\" を利用して SQL (http://"
#~ "www.postgresql.org/docs/current/static/sql.html) ステートメントを実行し、"
#~ "結果を Mojo::Pg::Results の形式で受け取っています。最後に Mojo::Pg::"
#~ "Results/\"hash\" を呼び出して、ハッシュ参照の形で最初の行を取り出していま"
#~ "す。\n"
#~ "\n"
#~ "全ての I/O 操作はブロック型として実行されますが、長時間かかるような処理の"
#~ "場合は、非同期で待機することもできます。これは Mojo::IOLoop イベントループ"
#~ "を利用するもので、待機中に他の処理を行なうことができます。データベース接続"
#~ "は通常は非常に素早く行なわれるため、結果として非常に高い性能をもたらすこと"
#~ "になります。\n"
#~ "\n"
#~ "それぞれのデータベース接続は、 1 つのクエリしか同時に処理することができま"
#~ "せん。非同期処理の場合でもそれは同じです。複数のクエリを同時に処理したい場"
#~ "合は、必要なだけ接続を増やして対応してください。\n"
#~ "\n"
#~ "     $pg->db->query('select pg_sleep(5)' => sub {...});   $pg->db-"
#~ ">query('select pg_sleep(5)' => sub {...});\n"
#~ "\n"
#~ "なお、新しいプロセスが fork されると、全てのキャッシュ済みデータベースハン"
#~ "ドルがリセットされます。これにより、同じ Mojo::Pg を共有する複数のプロセス"
#~ "が合った場合も、安全に動作することになります。"

#~ msgid "Create your own Parameterizable Types"
#~ msgstr "独自のパラメータ化可能型の作成"

#~ msgid ""
#~ "A the MooseX::Types manpage library for creating parameterizable types. A "
#~ "parameterizable type constraint for all intents and uses is a subclass of "
#~ "a parent type, but adds additional type parameters which are available to "
#~ "constraint callbacks (such as inside the 'where' clause of a type "
#~ "constraint definition) or in the coercions you define for a given type "
#~ "constraint.\n"
#~ "\n"
#~ "If you have the Moose manpage experience, you probably are familiar with "
#~ "the builtin parameterizable type constraints 'ArrayRef' and 'HashRef'. "
#~ "This type constraint lets you generate your own versions of parameterized "
#~ "constraints that work similarly. See the Moose::Util::TypeConstraints "
#~ "manpage for more."
#~ msgstr ""
#~ "パラメータ化可能な型を作成するための MooseX::Types ライブラリです。すべて"
#~ "の目的と用途に対してパラメータ化可能な型の制約は、親となる型のサブクラスで"
#~ "すが、 (型制約の定義の 'where' 句内など) 制約のコールバックや指定した型制"
#~ "約向けに定義した強制などに対して、利用可能な追加の型パラメータも追加されて"
#~ "います。\n"
#~ "\n"
#~ "Moose の知識がある方であれば、おそらく内蔵のパラメータ化可能制約である "
#~ "'ArrayRef' や 'HashRef' などをご存じと思います。この型制約は、これらと同じ"
#~ "ように動作するパラメータ化された制約のオリジナル版を作成する機能を提供しま"
#~ "す。詳しくは Moose::Util::TypeConstraints をお読みください。"

#~ msgid ""
#~ "MouseX::Types::Path::Class creates common the Mouse manpage types, "
#~ "coercions and option specifications useful for dealing with the Path::"
#~ "Class manpage objects as the Mouse manpage attributes.\n"
#~ "\n"
#~ "Coercions (see the Mouse::Util::TypeConstraints manpage) are made from "
#~ "both 'Str' and 'ArrayRef' to both the Path::Class::Dir manpage and the "
#~ "Path::Class::File manpage objects. If you have the MouseX::Getopt manpage "
#~ "installed, the Getopt option type (\"=s\") will be added for both the "
#~ "Path::Class::Dir manpage and the Path::Class::File manpage."
#~ msgstr ""
#~ "MouseX::Types::Path::Class は汎用的な Mouse の型や強制、オプション仕様など"
#~ "を作成するもので、 Mouse の属性として Path:Class を扱う際に便利な仕組みで"
#~ "す。\n"
#~ "\n"
#~ "強制 (Mouse::Util::TypeConstraints をお読みください) は、 'Str' および "
#~ "'ArrayRef' の両方から Path::Class:Dir および Path::Class::File オブジェク"
#~ "トの両方を作成することができます。 MouseX::Getopt がインストールされている"
#~ "場合は、 'Getopt' オプションタイプ (\"=s\") が Path::Class::Dir と Path::"
#~ "Class::File の両方に追加されます。"

#~ msgid ""
#~ "This module provides a perl interface to the Twitter APIs. See http://dev."
#~ "twitter.com/doc for a full description of the Twitter APIs."
#~ msgstr ""
#~ "このモジュールは、 Twitter API に対する Perl のインターフェイスを提供しま"
#~ "す。 Twitter API に関する完全な説明は、 http://dev.twitter.com/doc をお読"
#~ "みください。"

#~ msgid "Parse date strings into time values"
#~ msgstr "日付の文字列を値に変換するモジュール"

#~ msgid ""
#~ "This class encapsulates/makes/manipulates objects that represent nodes in "
#~ "a tree structure. The tree structure is not an object itself, but is "
#~ "emergent from the linkages you create between nodes. This class provides "
#~ "the methods for making linkages that can be used to build up a tree, "
#~ "while preventing you from ever making any kinds of linkages which are not "
#~ "allowed in a tree (such as having a node be its own mother or ancestor, "
#~ "or having a node have two mothers).\n"
#~ "\n"
#~ "This is what I mean by a \"tree structure\", a bit redundantly stated:\n"
#~ "\n"
#~ "* o A tree is a special case of an acyclic directed graph\n"
#~ "\n"
#~ "* o A tree is a network of nodes where there's exactly one root node\n"
#~ "\n"
#~ "  Also, the only primary relationship between nodes is the mother-"
#~ "daughter   relationship.\n"
#~ "\n"
#~ "* o No node can be its own mother, or its mother's mother, etc\n"
#~ "\n"
#~ "* o Each node in the tree has exactly one parent\n"
#~ "\n"
#~ "  Except for the root of course, which is parentless.\n"
#~ "\n"
#~ "* o Each node can have any number (0 .. N) daughter nodes\n"
#~ "\n"
#~ "  A given node's daughter nodes constitute an _ordered_ list.\n"
#~ "\n"
#~ "  However, you are free to consider this ordering irrelevant. Some   "
#~ "applications do need daughters to be ordered, so I chose to consider "
#~ "this   the general case.\n"
#~ "\n"
#~ "* o A node can appear in only one tree, and only once in that tree\n"
#~ "\n"
#~ "  Notably (notable because it doesn't follow from the two above points), "
#~ "a   node cannot appear twice in its mother's daughter list.\n"
#~ "\n"
#~ "* o There's an idea of up versus down\n"
#~ "\n"
#~ "  Up means towards to the root, and down means away from the root (and   "
#~ "towards the leaves).\n"
#~ "\n"
#~ "* o There's an idea of left versus right\n"
#~ "\n"
#~ "  Left is toward the start (index 0) of a given node's daughter list, "
#~ "and   right is toward the end of a given node's daughter list.\n"
#~ "\n"
#~ "Trees as described above have various applications, among them: "
#~ "representing syntactic constituency, in formal linguistics; representing "
#~ "contingencies in a game tree; representing abstract syntax in the parsing "
#~ "of any computer language -- whether in expression trees for programming "
#~ "languages, or constituency in the parse of a markup language document. "
#~ "(Some of these might not use the fact that daughters are ordered.)\n"
#~ "\n"
#~ "(Note: B-Trees are a very special case of the above kinds of trees, and "
#~ "are best treated with their own class. Check CPAN for modules "
#~ "encapsulating B-Trees; or if you actually want a database, and for some "
#~ "reason ended up looking here, go look at the AnyDBM_File manpage.)\n"
#~ "\n"
#~ "Many base classes are not usable except as such -- but 'Tree::DAG_Node' "
#~ "can be used as a normal class. You can go ahead and say:\n"
#~ "\n"
#~ "\tuse Tree::DAG_Node; \tmy $root = Tree::DAG_Node->new(); \t$root-"
#~ ">name(\"I'm the tops\"); \t$new_daughter = Tree::DAG_Node->new(); \t"
#~ "$new_daughter->name(\"More\"); \t$root->add_daughter($new_daughter);\n"
#~ "\n"
#~ "and so on, constructing and linking objects from 'Tree::DAG_Node' and "
#~ "making useful tree structures out of them."
#~ msgstr ""
#~ "このクラスはツリー構造内でのノードを表すオブジェクトをカプセル化／作成／操"
#~ "作します。ツリー構造はオブジェクト自身ではありませんが、ノード間で作成する"
#~ "リンク構造から生成されます。このクラスには、ツリー構造の構築のためのリンク"
#~ "を作成するメソッドが用意されていますが、ツリー内で許可されていない種類のリ"
#~ "ンクを作成しようとする (たとえば親や祖先のノードを子ノードにしようとした場"
#~ "合や、 2 つの親を持つようにノードを構成した場合) 際にはエラーになるように"
#~ "なっています。\n"
#~ "\n"
#~ "少し冗長に記述すると、 \"ツリー構造\" とは下記のような構造のことを指しま"
#~ "す:\n"
#~ "\n"
#~ "* ツリーとは循環構造を持たない有向グラフである。\n"
#~ "\n"
#~ "* ツリーはそれぞれのノードに対して厳密に 1 つの親ノードを設定するノードの"
#~ "ネットワークである。\n"
#~ "\n"
#~ " また、ツリーはノード間で唯一の、かつ主要な関係性として親子関係を持つ。\n"
#~ "\n"
#~ "* どのノードも親や祖先を子として持つことはない。\n"
#~ "\n"
#~ "* ツリー内の各ノードには、厳密に 1 つの親ノードが存在する。\n"
#~ "\n"
#~ " ツリーの最上位の親だけは例外で、親ノードを持たない。\n"
#~ "\n"
#~ "* 各ノードには任意の数の (0 .. N 個の) 子ノードを持つ。\n"
#~ "\n"
#~ " 特定のノードにおける子ノードは、 _順序付き_ リストを構成する。\n"
#~ "\n"
#~ " しかしながら、順序関係を無視することもできるものとする。アプリケーション"
#~ "によっては順序通りに子ノードを列挙しなければならないものがあるが、こちらを"
#~ "一般的なケースとみなしている。\n"
#~ "\n"
#~ "* ノードは、 1 つのツリー内に 1 度だけ現れる。\n"
#~ "\n"
#~ " 特に (例外事項であるため) 、特定のノードは親が持つ子リストの中で二度現れ"
#~ "ることはできない。\n"
#~ "\n"
#~ "* 上向きと下向きの考え方がある。\n"
#~ "\n"
#~ "  上向きとは最上位の親に至るまでの関係を、下向きとは最上位の親から離れてい"
#~ "く関係を意味する。\n"
#~ "\n"
#~ "* 左向きと右向きの考え方もある。\n"
#~ "\n"
#~ "  左とは特定のノードにおいて、子ノード一覧の順序番号の古い (0 に近づく) も"
#~ "の、右向きとは子ノード一覧の順序番号の新しい (0 から離れる) ものを意味す"
#~ "る。\n"
#~ "\n"
#~ "上記のようなツリー構造には様々な適用先があります: 正式な言語学における構文"
#~ "的な構成要素であったり、ゲームツリーにおける状況表現であったり、コンピュー"
#~ "タ言語における処理を表す抽象表現であったりします。プログラミング言語向けの"
#~ "表現ツリーであるかどうかや、マークアップ言語の文書を処理する際の構成要素な"
#~ "どを表すこともできます。\n"
#~ "\n"
#~ "(注意: 二分木 (バイナリツリー) は上記ツリーの非常に特殊な形態であるため、"
#~ "専用のクラスを利用して扱うほうが適切です。二分木をカプセル化するモジュール"
#~ "については CPAN を、何らかのデータベースを必要としていてここに到達した場合"
#~ "は、 AnyDBM_File などをご覧ください) 。"

#~ msgid ""
#~ "This module is a blunt rewrite of XML::Simple (by Grant McLean) to use "
#~ "the XML::LibXML parser for XML structures, where the original uses plain "
#~ "Perl or SAX parsers."
#~ msgstr ""
#~ "このモジュールは XML::Simple (Grant McLean 氏) の素っ気ない書き換えモ"
#~ "ジュールで、 XML 構造の処理に際して XML::LibXML を利用 するものです。 "
#~ "XML::Simple では Perl や SAX のパーサを利用しています。"

#~ msgid "Pure Perl YAML Implementation"
#~ msgstr "Perl のみで作られた YAML の実装"

#~ msgid ""
#~ "PyYAML is the most robust and correct YAML module for a dynamic language. "
#~ "It is (obviously) written in/for Python. This module is a complete port "
#~ "of PyYAML to Perl."
#~ msgstr ""
#~ "PyYAML は動的な言語向けの強健で正しい YAML モジュールです。 Python 言語で"
#~ "書かれ、 Python 言語向けにできています。このモジュールは、 PyYAML を Perl "
#~ "に完全移植したものです。"

#~ msgid ""
#~ "This module is an the AnyEvent manpage user, you need to make sure that "
#~ "you use and run a supported event loop.\n"
#~ "\n"
#~ "This module implements a simple, stateless and non-blocking HTTP client. "
#~ "It supports GET, POST and other request methods, cookies and more, all on "
#~ "a very low level. It can follow redirects, supports proxies, and "
#~ "automatically limits the number of connections to the values specified in "
#~ "the RFC.\n"
#~ "\n"
#~ "It should generally be a \"good client\" that is enough for most HTTP "
#~ "tasks. Simple tasks should be simple, but complex tasks should still be "
#~ "possible as the user retains control over request and response headers.\n"
#~ "\n"
#~ "The caller is responsible for authentication management, cookies (if the "
#~ "simplistic implementation in this module doesn't suffice), referer and "
#~ "other high-level protocol details for which this module offers only "
#~ "limited support."
#~ msgstr ""
#~ "このモジュールは AnyEvent のユーザであり、対応するイベントループを使用し、"
#~ "実行していることをあらかじめ確認しておく必要があります。\n"
#~ "\n"
#~ "このモジュールは、シンプルで状態管理機能の無い、非ブロック型の HTTP クライ"
#~ "アントを実装しています。 GET, POST のほか、その他のリクエストメソッドにも"
#~ "対応しているほか、 Cookie などにも非常に低レベルにて対応しています。このほ"
#~ "か、リダイレクトやプロキシサーバ、自動的な同時接続数の管理など、 RFC に規"
#~ "定された機能に対応しています。\n"
#~ "\n"
#~ "なお、このモジュールは一般に、多くの HTTP 処理に対して十分な \"良いクライ"
#~ "アント\" として動作します。シンプルな処理はシンプルに実施することができま"
#~ "すが、複雑な処理を実施するには、リクエストからレスポンスまでの制御を行なう"
#~ "必要があります。\n"
#~ "\n"
#~ "また、呼び出し元は認証機能や Cookie (このモジュール側で対応しているシンプ"
#~ "ルな実装では機能が不足している場合) のほか、 Referer などの高レベルな仕組"
#~ "みに関しては、いずれも限定的なサポートにとどまることから、呼び出し元側で処"
#~ "理を行なう必要があります。"

#~ msgid ""
#~ "'App::CLI' dispatches CLI (command line interface) based commands into "
#~ "command classes. It also supports subcommand and per-command options.\n"
#~ "\n"
#~ "get_opt([@config], %opt_map)         give options map, process by Getopt::"
#~ "Long::Parser\n"
#~ "\n"
#~ "interface of dispatcher\n"
#~ "\n"
#~ "cmd_map($cmd)     find package name of subcommand in constant %alias\n"
#~ "\n"
#~ "    if it's finded, return ucfirst of the package name,\n"
#~ "\n"
#~ "    otherwise, return ucfirst of $cmd itself.\n"
#~ "\n"
#~ "get_cmd($cmd, @arg)     return subcommand of first level via $ARGV[0]"
#~ msgstr ""
#~ "'App::CLI' は CLI (コマンドラインインターフェイス) ベースのコマンドをコマ"
#~ "ンドクラスに送信するためのモジュールです。サブコマンドやコマンド別のオプ"
#~ "ションにも対応しています。\n"
#~ "\n"
#~ "get_opt([@config], %opt_map)         オプションマップの取得 (Getopt::"
#~ "Long::Parser で処理されます)\n"
#~ "\n"
#~ "cmd_map($cmd)     定数 %alias 内でサブコマンドのパッケージ名の検索。見つ"
#~ "かった場合はパッケージ名の ucfirst が、見つからなかった場合は $cmd 自身の "
#~ "ucfirst が返されます\n"
#~ "\n"
#~ "get_cmd($cmd, @arg)     $ARGV[0] を利用して最初のレベルのサブコマンドを返"
#~ "します"

#~ msgid ""
#~ "App::Cmd is intended to make it easy to write complex command-line "
#~ "applications without having to think about most of the annoying things "
#~ "usually involved.\n"
#~ "\n"
#~ "For information on how to start using App::Cmd, see the App::Cmd::"
#~ "Tutorial manpage."
#~ msgstr ""
#~ "App::Cmd は、面倒な手続きの多くを省略して、複雑なコマンドラインアプリケー"
#~ "ションを簡単に開発することのできる仕組みを提供しています。\n"
#~ "\n"
#~ "App::Cmd を使い始めるための情報は、 App::Cmd::Tutorial をお読みください。"

#~ msgid ""
#~ "the App::Dochazka::CLI manpage is the Command Line Interface (CLI) "
#~ "component of the Dochazka Attendance & Time Tracking system.\n"
#~ "\n"
#~ "In order to work, the CLI must be pointed at a running the App::Dochazka::"
#~ "REST manpage (i.e., Dochazka REST server) instance by setting the "
#~ "'MREST_CLI_URI_BASE' site configuration parameter.\n"
#~ "\n"
#~ "Detailed documentation covering configuration, deployment, and the "
#~ "commands that can be used with the CLI can be found in the App::Dochazka::"
#~ "CLI::Guide manpage.\n"
#~ "\n"
#~ "This module is used to store some \"global\" package variables that are "
#~ "used throughout the CLI code base."
#~ msgstr ""
#~ "App::Dochazka::CLI は、 Dochazka 会議管理／時間管理システムのコマンドライ"
#~ "ンインターフェイス (CLI) コンポーネントです。\n"
#~ "\n"
#~ "このモジュールを動作させるには、コマンドラインインターフェイス側で App::"
#~ "Dochazka::REST インスタンスの動作している場所 (つまり Dochazka サーバ) を"
#~ "指定する必要があります。この設定は、 'MREST_CLI_URI_BASE' というサイト設定"
#~ "パラメータで指定することができます。\n"
#~ "\n"
#~ "設定や配置、 CLI で利用可能なコマンドなどについて、詳しくは App::"
#~ "Dochazka::CLI::Guide をお読みください。\n"
#~ "\n"
#~ "このモジュールは、コマンドラインインターフェイスの基礎として使用される、 "
#~ "\"グローバルな\" パッケージ変数を保持するために使用されます。"

#~ msgid ""
#~ "You don't need to load this module yourself in most cases. 'Business::"
#~ "ISBN' will load it when it loads.\n"
#~ "\n"
#~ "These data are generated from the _RangeMessage.xml_ file provided by the "
#~ "ISBN Agency. You can retrieve this yourself at the http://www.isbn-"
#~ "international.org/agency?rmxml=1 manpage. This file is included as part "
#~ "of the distribution and should be installed at _~lib/Business/ISBN/"
#~ "RangeMessage.xml_.\n"
#~ "\n"
#~ "If you want to use a different _RangeMessage.xml_ file, you can set the "
#~ "'ISBN_RANGE_MESSAGE' environment variable to the alternate location "
#~ "before you load 'Business::ISBN'. This way, you can use the latest (or "
#~ "even earlier) data without having to install something new or wait for an "
#~ "update to this module.\n"
#~ "\n"
#~ "If the default _RangeMessage.xml_ or your alternate one is not available, "
#~ "the module falls back to data included in _Data.pm_. However, that data "
#~ "is likely to be older data.\n"
#~ "\n"
#~ "The data are in '%Business::ISBN::country_data' (although the \"country\" "
#~ "part is historical). If you want to see where the data are from, check "
#~ "'$Business::ISBN::country_data{_source}'."
#~ msgstr ""
#~ "このモジュールは、多くの場合直接的に使用することはありません。また、このモ"
#~ "ジュールを読み込むと、 'Business::ISBN' も読み込まれます。\n"
#~ "\n"
#~ "これらのデータは ISBN Agency が提供する _RangeMessage.xml_ ファイルから生"
#~ "成されたものです。このファイルは http://www.isbn-international.org/agency?"
#~ "rmxml=1 からダウンロードすることができます。このファイルは配布物内にも含ま"
#~ "れていて、 _~lib/Business/ISBN/RangeMessage.xml_ にインストールされま"
#~ "す。\n"
#~ "\n"
#~ "なお、異なる _RangeMessage.xml_ ファイルをお使いになりたい場合は、 "
#~ "'Business::ISBN' を読み込む前に 'ISBN_RANGE_MESSAGE' 環境変数を設定して場"
#~ "所を指定してください。この仕組みにより、最新の (場合によっては古い) データ"
#~ "を、パッケージごとインストールしなおすすることなく利用できるようになってい"
#~ "ます。\n"
#~ "\n"
#~ "既定の _RangeMessage.xml_ や代替の場所が利用できない場合は、 _Data.pm_ 内"
#~ "に含まれているデータを代わりに使用しますが、こちらはより古いデータしか用意"
#~ "されていません。\n"
#~ "\n"
#~ "データは '%Business::ISBN::country_data' 内 (ただし \"country\" パートは歴"
#~ "史的な経緯によるものです) にあります。データの発信元を確認したい場合は、 "
#~ "'$Business::ISBN::country_data{_source}' をご確認ください。"

#~ msgid ""
#~ "Software distributions released to the CPAN include a _META.json_ or, for "
#~ "older distributions, _META.yml_, which describes the distribution, its "
#~ "contents, and the requirements for building and installing the "
#~ "distribution. The data structure stored in the _META.json_ file is "
#~ "described in the CPAN::Meta::Spec manpage.\n"
#~ "\n"
#~ "CPAN::Meta provides a simple class to represent this distribution "
#~ "metadata (or _distmeta_), along with some helpful methods for "
#~ "interrogating that data.\n"
#~ "\n"
#~ "The documentation below is only for the methods of the CPAN::Meta object. "
#~ "For information on the meaning of individual fields, consult the spec."
#~ msgstr ""
#~ "CPAN に公開されたソフトウエアには _META.json_ や _META.yml_ (古い配布物の"
#~ "場合) が含まれていますが、こちらは配布物の説明や内容物、それを構築したりイ"
#~ "ンストールしたりするときの要件などが書かれています。 _META.json_ ファイル"
#~ "のデータ構造は CPAN::Meta::Spec に記述されています。\n"
#~ "\n"
#~ "CPAN::Meta は、そのようなソフトウエアのメタデータ (_distmeta_) を表現する"
#~ "ためのシンプルなクラスで、そのデータに対して問い合わせを実施するための支援"
#~ "メソッドも用意されています。\n"
#~ "\n"
#~ "下記のドキュメンテーションは、 CPAN::Meta に対するものだけです。個別の"
#~ "フィールドに関する説明は、 spec ファイルをご覧ください。"

#~ msgid ""
#~ "This module is based on \"'Carp.pm'\" from Perl 5.005_03. It has been "
#~ "modified to skip all package names matching the pattern given in the \"use"
#~ "\" statement inside the \"'qw()'\" term (or argument list).\n"
#~ "\n"
#~ "Suppose you have a family of modules or classes named \"Pack::A\", "
#~ "\"Pack::B\" and so on, and each of them uses \"'Carp::Clan "
#~ "qw(^Pack::);'\" (or at least the one in which the error or warning gets "
#~ "raised).\n"
#~ "\n"
#~ "Thus when for example your script \"tool.pl\" calls module \"Pack::A\", "
#~ "and module \"Pack::A\" calls module \"Pack::B\", an exception raised in "
#~ "module \"Pack::B\" will appear to have originated in \"tool.pl\" where "
#~ "\"Pack::A\" was called, and not in \"Pack::A\" where \"Pack::B\" was "
#~ "called, as the unmodified \"'Carp.pm'\" would try to make you believe "
#~ "':-)'.\n"
#~ "\n"
#~ "This works similarly if \"Pack::B\" calls \"Pack::C\" where the exception "
#~ "is raised, etcetera.\n"
#~ "\n"
#~ "In other words, this blames all errors in the \"'Pack::*'\" modules on "
#~ "the user of these modules, i.e., on you. ';-)'\n"
#~ "\n"
#~ "The skipping of a clan (or family) of packages according to a pattern "
#~ "describing its members is necessary in cases where these modules are not "
#~ "classes derived from each other (and thus when examining '@ISA' - as in "
#~ "the original \"'Carp.pm'\" module - doesn't help).\n"
#~ "\n"
#~ "The purpose and advantage of this is that a \"clan\" of modules can work "
#~ "together (and call each other) and throw exceptions at various depths "
#~ "down the calling hierarchy and still appear as a monolithic block (as "
#~ "though they were a single module) from the perspective of the caller.\n"
#~ "\n"
#~ "In case you just want to ward off all error messages from the module in "
#~ "which you \"'use Carp::Clan'\", i.e., if you want to make all error "
#~ "messages or warnings to appear to originate from where your module was "
#~ "called (this is what you usually used to \"'use Carp;'\" for ';-)'), "
#~ "instead of in your module itself (which is what you can do with a \"die\" "
#~ "or \"warn\" anyway), you do not need to provide a pattern, the module "
#~ "will automatically provide the correct one for you.\n"
#~ "\n"
#~ "I.e., just \"'use Carp::Clan;'\" without any arguments and call \"carp\" "
#~ "or \"croak\" as appropriate, and they will automatically defend your "
#~ "module against all blames!\n"
#~ "\n"
#~ "In other words, a pattern is only necessary if you want to make several "
#~ "modules (more than one) work together and appear as though they were only "
#~ "one.\n"
#~ "\n"
#~ "Forcing a Stack Trace     As a debugging aid, you can force \"'Carp::"
#~ "Clan'\" to treat a \"croak\" as     a \"confess\" and a \"carp\" as a "
#~ "\"cluck\". In other words, force a detailed     stack trace to be given. "
#~ "This can be very helpful when trying to     understand why, or from "
#~ "where, a warning or error is being generated.\n"
#~ "\n"
#~ "    This feature is enabled either by \"importing\" the non-existent "
#~ "symbol     'verbose', or by setting the global variable \"'$Carp::Clan::"
#~ "Verbose'\"     to a true value.\n"
#~ "\n"
#~ "    You would typically enable it by saying\n"
#~ "\n"
#~ "        use Carp::Clan qw(verbose);\n"
#~ "\n"
#~ "    Note that you can both specify a \"family pattern\" and the "
#~ "string     \"verbose\" inside the \"'qw()'\" term (or argument list) of "
#~ "the \"use\"     statement, but consider that a pattern of packages to "
#~ "skip is pointless     when \"verbose\" causes a full stack trace anyway."
#~ msgstr ""
#~ "このモジュールは Perl 5.005_03 における \"'Carp.pm'\" をベースにしたモ"
#~ "ジュールです。 \"use\" ステートメント内の \"'qw()'\" 句 (またはパラメータ"
#~ "リスト) で、パターンに該当するすべてのパッケージを飛ばす (スキップする) よ"
#~ "うに修正されています。\n"
#~ "\n"
#~ "たとえば \"Pack::A\", \"Pack::B\" 等のモジュールやクラスがあるものと仮定す"
#~ "ると、それらのそれぞれで \"'Carp::Clan qw(^Pack::);'\" を使用している場合"
#~ "があります (もしくは、それらのうちのいずれかでエラーや例外が発生した場合を"
#~ "想定します) 。\n"
#~ "\n"
#~ "このとき、たとえば \"tool.pl\" というスクリプトが \"Pack::A\" モジュールを"
#~ "呼び出し、 \"Pack::A\" が \"Pack::B\" を呼び出しているとすると、未修正の "
#~ "\"'Carp.pm'\" では、 \"Pack::B\" 内で発生した例外は、 \"tool.pl\" 内の "
#~ "\"Pack::A\" が呼び出された箇所を示す形になり、 \"Pack::B\" を呼び出してい"
#~ "た \"Pack::A\" を示すことはありません。\n"
#~ "\n"
#~ "これはたとえば、 \"Pack::B\" が \"Pack::C\" を呼び出していて、その中で例外"
#~ "が発生した場合も同様になります。\n"
#~ "\n"
#~ "これは、言い換えれば \"'Pack::*'\" モジュール内で発生したすべてのエラーが "
#~ "\"tool.pl\" のエラー (つまりあなたの間違い) として報告されることになりま"
#~ "す。\n"
#~ "\n"
#~ "パターンを指定して、パッケージ内の該当する箇所 (またはファミリ) を飛ばすこ"
#~ "とは、これらのモジュールが互いに派生関係にない場合に必要となります (そして"
#~ "この理由から、(元々の \"'Carp.pm'\" にあるような) '@ISA' を解釈してしまっ"
#~ "ては解決しません) 。\n"
#~ "\n"
#~ "このモジュールの目的とメリットは、互いにうまく動作するような \"集合\" であ"
#~ "ることにあり、様々な場所で例外が発生した場合でも呼び出しの階層構造を表示"
#~ "し、一枚岩のブロックとして見える (それらが単一のモジュールであるかのよう"
#~ "に) ことを目指しています。\n"
#~ "\n"
#~ "\"'use Carp::Clan'\" を設定していて、単純に特定のモジュール内で発生したす"
#~ "べてのエラーメッセージについて、これらをすべて受け流すようにしたい場合、つ"
#~ "まりエラーメッセージや警告メッセージ (\"die\" または \"warn\") で表示され"
#~ "る場所が、モジュールを呼び出した場所ではなく実際に発生した場所であって欲し"
#~ "い場合 (通常は \"'use Carp;'\" を使用しますが) は、パターンを設定する必要"
#~ "はなく、モジュールは自動的に正しい情報を提供します。\n"
#~ "\n"
#~ "これは何もパラメータを指定せずに \"'use Carp::Clan;'\" だけを使用し、 "
#~ "\"carp\" や\"croak\" を適切に使用していれば、警告やエラーのメッセージは自"
#~ "動的に元の場所を示すようになるということです。\n"
#~ "\n"
#~ "これをさらに言い換えれば、パターンは特定のモジュールだけに対して動作させた"
#~ "い場合にのみ指定するものであると言えます。\n"
#~ "\n"
#~ "デバッグ目的でスタックトレースを強制する場合、 \"'Carp::Clan'\" で強制的に"
#~ "\"croak\" を \"confess\" として扱い、 \"carp\" を \"cluck\" として扱うよう"
#~ "に設定することもできます。これは詳細なスタックトレースを強制する意味になり"
#~ "ます。これは警告やエラーの発生元を特定するのに便利です。\n"
#~ "\n"
#~ "この機能は存在していないシンボル 'verbose' を \"インポート\" することに"
#~ "よって有効化できるほか、 \"'$Carp::Clan::Verbose'\" を true に設定しても実"
#~ "現できます。\n"
#~ "\n"
#~ "一般的には下記のように指定して有効化します:\n"
#~ "\n"
#~ "        use Carp::Clan qw(verbose);\n"
#~ "\n"
#~ "ただし、 \"use\" ステートメント内の \"'qw()'\" の表現には、 \"ファミリパ"
#~ "ターン\" と \"verbose\" の両方を (パラメータリストとして) 指定できますが、"
#~ "スキップすべきパターンは \"verbose\" を指定してしまうと無視されることに注"
#~ "意してください。"

#~ msgid "useful base class for deriving other modules"
#~ msgstr "他のモジュールの派生モジュールを作るための便利なベースクラス"

#~ msgid ""
#~ "Please consider using the Badger::Base manpage instead which is the "
#~ "successor of this module.\n"
#~ "\n"
#~ "This module implements a simple base class from which other modules can "
#~ "be derived, thereby inheriting a number of useful methods such as "
#~ "'new()', 'init()', 'params()', 'clone()', 'error()' and 'debug()'.\n"
#~ "\n"
#~ "For a number of years, I found myself re-writing this module for "
#~ "practically every Perl project of any significant size. Or rather, I "
#~ "would copy the module from the last project and perform a global search "
#~ "and replace to change the names. Each time it got a little more polished "
#~ "and eventually, I decided to Do The Right Thing and release it as a "
#~ "module in it's own right.\n"
#~ "\n"
#~ "It doesn't pretend to be an all-encompassing solution for every kind of "
#~ "object creation problem you might encounter. In fact, it only supports "
#~ "blessed hash references that are created using the popular, but by no "
#~ "means universal convention of calling 'new()' with a list or reference to "
#~ "a hash array of named parameters. Constructor failure is indicated by "
#~ "returning undef and setting the '$ERROR' package variable in the module's "
#~ "class to contain a relevant message (which you can also fetch by calling "
#~ "'error()' as a class method).\n"
#~ "\n"
#~ "e.g.\n"
#~ "\n"
#~ "    my $object = My::Module->new( \tfile => 'myfile.html', \tmsg  => "
#~ "'Hello World'     ) || die $My::Module::ERROR;\n"
#~ "\n"
#~ "or:\n"
#~ "\n"
#~ "    my $object = My::Module->new({ \tfile => 'myfile.html', \tmsg  => "
#~ "'Hello World',     }) || die My::Module->error();\n"
#~ "\n"
#~ "The 'new()' method handles the conversion of a list of arguments into a "
#~ "hash array and calls the 'init()' method to perform any initialisation. "
#~ "In many cases, it is therefore sufficient to define a module like so:\n"
#~ "\n"
#~ "    package My::Module;     use Class::Base;     use base qw( Class::"
#~ "Base );\n"
#~ "\n"
#~ "    sub init { \tmy ($self, $config) = @_; \t \t$self->params($config, "
#~ "qw( FOO BAR )) || return undef; \treturn $self;     }\n"
#~ "\n"
#~ "    \n"
#~ "\n"
#~ "    1;\n"
#~ "\n"
#~ "Then you can go right ahead and use it like this:\n"
#~ "\n"
#~ "    use My::Module;\n"
#~ "\n"
#~ "    my $object = My::Module->new( FOO => 'the foo value', \t\t\t\t  BAR "
#~ "=> 'the bar value' )         || die $My::Module::ERROR;\n"
#~ "\n"
#~ "Despite its limitations, Class::Base can be a surprisingly useful module "
#~ "to have lying around for those times where you just want to create a "
#~ "regular object based on a blessed hash reference and don't want to worry "
#~ "too much about duplicating the same old code to bless a hash, define "
#~ "configuration values, provide an error reporting mechanism, and so on. "
#~ "Simply derive your module from 'Class::Base' and leave it to worry about "
#~ "most of the detail. And don't forget, you can always redefine your own "
#~ "'new()', 'error()', or other method, if you don't like the way the Class::"
#~ "Base version works."
#~ msgstr ""
#~ "このモジュールは使用せず、後継モジュールである Badger::Base をお使いくださ"
#~ "い。\n"
#~ "\n"
#~ "このモジュールは、他のモジュールが提供するクラスを派生させ、 'new()', "
#~ "'init()', 'params()', 'clone()', 'error()', 'debug()' などの多くの便利なメ"
#~ "ソッドを継承することのできる、シンプルなベースクラスを実装しています。\n"
#~ "\n"
#~ "何年にもわたり、様々な規模の Perl プロジェクトに対して、このモジュールは書"
#~ "き直されてきました。というよりも、直近のプロジェクトからモジュールをコピー"
#~ "して、名前を変更するためにグローバルに検索および置換が行なわれてきました。"
#~ "作業を行なうごとにそれは磨き上げられてきたことから、ここでようやくこれをモ"
#~ "ジュールとして公開するに至りました。\n"
#~ "\n"
#~ "なお、このモジュールは、オブジェクトを作成するにあたって発生する様々な問題"
#~ "に対して、すべてを網羅するようには考えられていません。実際には、 'new()' "
#~ "に対してリストや名前付きのパラメータが含まれるハッシュ参照を与えるような、"
#~ "よくあるブレス型のハッシュ参照のみをサポートしています。コンストラクタにお"
#~ "けるエラーは undef を返すことによって表わされ、モジュール内にある "
#~ "'$ERROR' というパッケージ変数に関連するメッセージが設定されます (クラスメ"
#~ "ソッドの 'error()' を呼び出しても同じ結果を得られます) 。\n"
#~ "\n"
#~ "具体的には、下記のいずれかのようになります:\n"
#~ "\n"
#~ "    my $object = My::Module->new( \tfile => 'myfile.html', \tmsg  => "
#~ "'Hello World'     ) || die $My::Module::ERROR;\n"
#~ "\n"
#~ "    my $object = My::Module->new({ \tfile => 'myfile.html', \tmsg  => "
#~ "'Hello World',     }) || die My::Module->error();\n"
#~ "\n"
#~ "'new()' メソッドはパラメータの一覧をハッシュ参照に変換して 'init()' メソッ"
#~ "ドを呼び出し、実際の初期化を行ないます。多くのクラスでは、下記のようにモ"
#~ "ジュールを定義するのがよいでしょう:\n"
#~ "\n"
#~ "    package My::Module;     use Class::Base;     use base qw( Class::"
#~ "Base );\n"
#~ "\n"
#~ "    sub init { \tmy ($self, $config) = @_; \t \t$self->params($config, "
#~ "qw( FOO BAR )) || return undef; \treturn $self;     }\n"
#~ "\n"
#~ "    \n"
#~ "\n"
#~ "    1;\n"
#~ "\n"
#~ "モジュールを使用する場合は、下記のようにするだけです:\n"
#~ "\n"
#~ "    use My::Module;\n"
#~ "\n"
#~ "    my $object = My::Module->new( FOO => 'the foo value', \t\t\t\t  BAR "
#~ "=> 'the bar value' )         || die $My::Module::ERROR;\n"
#~ "\n"
#~ "制限事項もありますが、 Class::Base は驚くほど便利なモジュールで、通常のオ"
#~ "ブジェクトベースのブレス型参照を利用するような場合や、ハッシュをブレスする"
#~ "ための同じような古いコードを繰り返してしまうような手間をかけたくない場合、"
#~ "もしくは設定値の定義やエラー報告の仕組みなど、様々な手間を省くことができま"
#~ "す。単純に 'Class::Base' からお使いのモジュールに派生させれば、それだけで"
#~ "済みます。なお、 Class::Base のバージョンの動作で支障がある場合は、忘れず"
#~ "に 'new()', 'error()' などのメソッドを定義してください。"

#~ msgid "a working (require \"Class::Name\") and more"
#~ msgstr "動的なクラス読み込み (require \"Class::Name\")"

#~ msgid ""
#~ "This is the \"Class::Singleton\" module. A Singleton describes an object "
#~ "class that can have only one instance in any system. An example of a "
#~ "Singleton might be a print spooler or system registry. This module "
#~ "implements a Singleton class from which other classes can be derived. By "
#~ "itself, the \"Class::Singleton\" module does very little other than "
#~ "manage the instantiation of a single object. In deriving a class from "
#~ "\"Class::Singleton\", your module will inherit the Singleton "
#~ "instantiation method and can implement whatever specific functionality is "
#~ "required.\n"
#~ "\n"
#~ "For a description and discussion of the Singleton class, see \"Design "
#~ "Patterns\", Gamma et al, Addison-Wesley, 1995, ISBN 0-201-63361-2.\n"
#~ "\n"
#~ "Author: Andy Wardley <abw@wardley.org>"
#~ msgstr ""
#~ "これは \"Class::Singleton\" モジュールです。シングルトンとは、システム内で"
#~ "1 つだけのインスタンスを保持できるクラスのことを指します。シングルトンのオ"
#~ "ブジェクトとしては、たとえば印刷用のスプールシステムや、システムのレジスト"
#~ "リなどが挙げられます。このモジュールは、そのようなシングルトンを他のクラス"
#~ "から派生する形で作成することができます。なお、 \"Class::Singleton\" モ"
#~ "ジュールは、単一のオブジェクトに対するインスタンス化を管理するよりも、非常"
#~ "に小さな処理しか行ないません。 \"Class::Singleton\" からクラスを派生させて"
#~ "作成することで、シングルトンのインスタンス化方式を継承し、必要な機能を実装"
#~ "することができるようになります。\n"
#~ "\n"
#~ "シングルトンクラスに関する説明や議論について、詳しくは \"デザインパターン"
#~ "\" (Gamma et al, Addison-Wesley, 1995, 原文 ISBN 0-201-63361-2, 日本語訳  "
#~ "ISBN-10: 4797311126 ISBN-13: 978-4797311129) をお読みください。\n"
#~ "\n"
#~ "作者: Andy Wardley <abw@wardley.org>"

#~ msgid ""
#~ "This module offers a minimalist class construction kit in around 120 "
#~ "lines of code. Here is a list of features:\n"
#~ "\n"
#~ "  * defines attributes via import arguments\n"
#~ "\n"
#~ "  * generates read-write accessors\n"
#~ "\n"
#~ "  * supports lazy attribute defaults\n"
#~ "\n"
#~ "  * supports custom accessors\n"
#~ "\n"
#~ "  * superclass provides a standard 'new' constructor\n"
#~ "\n"
#~ "  * 'new' takes a hash reference or list of key/value pairs\n"
#~ "\n"
#~ "  * 'new' supports providing 'BUILDARGS' to customize constructor "
#~ "options\n"
#~ "\n"
#~ "  * 'new' calls 'BUILD' for each class from parent to child\n"
#~ "\n"
#~ "  * superclass provides a 'DESTROY' method\n"
#~ "\n"
#~ "  * 'DESTROY' calls 'DEMOLISH' for each class from child to parent\n"
#~ "\n"
#~ "Multiple-inheritance is possible, with superclass order determined via "
#~ "mro::get_linear_isa|mro/Functions.\n"
#~ "\n"
#~ "It uses no non-core modules for any recent Perl. On Perls older than "
#~ "v5.10 it requires MRO::Compat. On Perls older than v5.14, it requires "
#~ "Devel::GlobalDestruction."
#~ msgstr ""
#~ "このモジュールは 120 行程度のコードで、必要最低限のクラス構築キットを提供"
#~ "しています。下記に機能を示します:\n"
#~ "\n"
#~ "  * import パラメータによる属性の定義\n"
#~ "\n"
#~ "  * 読み書きのアクセサの生成\n"
#~ "\n"
#~ "  * 遅延属性の既定値\n"
#~ "\n"
#~ "  * 独自アクセサへの対応\n"
#~ "\n"
#~ "  * 標準的な 'new' コンストラクタを提供するスーパークラス\n"
#~ "\n"
#~ "  * 'new' ではハッシュ参照とキー／値のペアの両方に対応\n"
#~ "\n"
#~ "  * 'new' では 'BUILDARGS' を指定して、コンストラクタのオプションをカスタ"
#~ "マイズ可能\n"
#~ "\n"
#~ "  * 'new' は親から子の各クラスに対して 'BUILD' を呼び出します\n"
#~ "\n"
#~ "  * スーパークラスでは 'DESTROY' メソッドにも対応しています\n"
#~ "\n"
#~ "  * 'DESTROY' は子から親の各クラスに対して 'DEMOLISH' を呼び出します\n"
#~ "\n"
#~ "mro::get_linear_isa|mro/Functions を介してスーパークラスの順序を制御できる"
#~ "多重継承にも対応しています。\n"
#~ "\n"
#~ "最近のバージョンの Perl であれば、中枢モジュール以外のモジュールは不要で"
#~ "す。 v5.10 以前の Perl の場合は、 MRO::Compat が必要です。また、 v5.14 以"
#~ "前の Perl の場合は、 Devel::GlobalDestruction が必要です。"

#~ msgid "A module to implement some of AutoConf macros in pure perl."
#~ msgstr ""
#~ "純粋な Perl 内で AutoConf のマクロのうちのいくつかを実装するモジュールで"
#~ "す。"

#~ msgid ""
#~ "run code after a subroutine call, preserving the context the subroutine "
#~ "would have seen if it were the last statement in the caller"
#~ msgstr ""
#~ "サブルーチンの呼び出し後にコードを実行し、呼び出し後にサブルーチンを呼び出"
#~ "す前の状況に復元するためのモジュール"

#~ msgid ""
#~ "'DBIx::Class::DeploymentHandler' is, as its name suggests, a tool for "
#~ "deploying and upgrading databases with the DBIx::Class manpage. It is "
#~ "designed to be much more flexible than the DBIx::Class::Schema::Versioned "
#~ "manpage, hence the use of the Moose manpage and lots of roles.\n"
#~ "\n"
#~ "'DBIx::Class::DeploymentHandler' itself is just a recommended set of "
#~ "roles that we think will not only work well for everyone, but will also "
#~ "yield the best overall mileage. Each role it uses has its own nuances and "
#~ "documentation, so I won't describe all of them here, but here are a few "
#~ "of the major benefits over how the DBIx::Class::Schema::Versioned manpage "
#~ "worked (and the DBIx::Class::DeploymentHandler::Deprecated manpage tries "
#~ "to maintain compatibility with):\n"
#~ "\n"
#~ "* *\n"
#~ "\n"
#~ "  Downgrades in addition to upgrades.\n"
#~ "\n"
#~ "* *\n"
#~ "\n"
#~ "  Multiple sql files files per upgrade/downgrade/install.\n"
#~ "\n"
#~ "* *\n"
#~ "\n"
#~ "  Perl scripts allowed for upgrade/downgrade/install.\n"
#~ "\n"
#~ "* *\n"
#~ "\n"
#~ "  Just one set of files needed for upgrade, unlike before where one "
#~ "might   need to generate 'factorial(scalar @versions)', which is just "
#~ "silly.\n"
#~ "\n"
#~ "* *\n"
#~ "\n"
#~ "  And much, much more!\n"
#~ "\n"
#~ "That's really just a taste of some of the differences. Check out each "
#~ "role for all the details."
#~ msgstr ""
#~ "'DBIx::Class::DeploymentHandler' はその名前が示しているとおり、 DBIx::"
#~ "Class でデータベースの配置とアップグレードの処理を行なうためのツールで"
#~ "す。 DBIx::Class::Schema::Versioned よりもずっと柔軟な仕組みになるよう設計"
#~ "されていて、 Moose の用途や役割を担うことができるようにもなっています。\n"
#~ "\n"
#~ "'DBIx::Class::DeploymentHandler' それ自身はお勧めの役割セットともいえるも"
#~ "ので、多くの人々にとってはうまく使いこなせないものでもありますが、それでも"
#~ "十分にお役に立てるものと思っております。各役割に対して独自のニュアンスやド"
#~ "キュメンテーションが設定されているため、ここでは詳しく説明しませんが、 "
#~ "DBIx::Class::Schema::Versioned の動作 (および互換性を確保しようとしている "
#~ "DBIx::Class::DeploymentHandler::Deprecated) と比較した主な利点がありま"
#~ "す:\n"
#~ "\n"
#~ "* *\n"
#~ "\n"
#~ "  アップグレードに加えてダウングレードにも対応。\n"
#~ "\n"
#~ "* *\n"
#~ "\n"
#~ "  アップグレードやダウングレード、インストール時に追加の複数の SQL ファイ"
#~ "ルを設定可能。\n"
#~ "\n"
#~ "* *\n"
#~ "\n"
#~ "  アップグレードやダウングレード、インストール時に Perl スクリプトを設定可"
#~ "能。\n"
#~ "\n"
#~ "* *\n"
#~ "\n"
#~ "  'factorial(scalar @versions)' を生成するのに必要となっていた不便な場合と"
#~ "は異なり、アップグレードに対しては 1 セットのファイルがあれば実施可能。\n"
#~ "\n"
#~ "* *\n"
#~ "\n"
#~ "  それ以外にも多数の機能があります！\n"
#~ "\n"
#~ "ここで示されているのはごく一部でしかありません。詳しくは各役割をお読みくだ"
#~ "さい。"

#~ msgid "read multiple hunks of data out of your DATA section"
#~ msgstr "お使いの DATA セクションからの複数のデータセクションの読み取り"

#~ msgid ""
#~ "Date::Manip is a series of modules designed to make any common date/time "
#~ "operation easy to do. Operations such as comparing two times, determining "
#~ "a date a given amount of time from another, or parsing international "
#~ "times are all easily done. It deals with time as it is used in the "
#~ "Gregorian calendar (the one currently in use) with full support for time "
#~ "changes due to daylight saving time.\n"
#~ "\n"
#~ "From the very beginning, the main focus of Date::Manip has been to be "
#~ "able to do ANY desired date/time operation easily. Many other modules "
#~ "exist which may do a subset of these operations quicker or more "
#~ "efficiently, but no other module can do all of the operations available "
#~ "in Date::Manip.\n"
#~ "\n"
#~ "Since many other date/time modules exist, some of which may do the "
#~ "specific operation(s) you need faster, be sure to read the section SHOULD "
#~ "I USE DATE::MANIP in the Date::Manip::Misc document before deciding which "
#~ "of the Date and Time modules from CPAN is for you. However, if you want "
#~ "one module to do it all, Date::Manip is the one to use.\n"
#~ "\n"
#~ "Date::Manip has functionality to work with several fundamental types of "
#~ "data.\n"
#~ "\n"
#~ "* *dates*\n"
#~ "\n"
#~ "  The word date is used extensively here and is somewhat misleading. In   "
#~ "Date::Manip, a date consists of three pieces of information: a calendar   "
#~ "date, a time of day, and time zone information. Calendar dates and "
#~ "times   are fully handled. Time zones are handled as well, but depending "
#~ "on how   you use Date::Manip, there may be some limitations as discussed "
#~ "below.\n"
#~ "\n"
#~ "* *delta*\n"
#~ "\n"
#~ "  A delta is an amount of time (i.e. the amount of time between two   "
#~ "different dates). A delta refers only to an amount of time. It includes   "
#~ "no information about a starting or ending date/time. Most people will   "
#~ "think of a delta as an amount of time, but the term 'time' is already   "
#~ "used so much in this module that I didn't want to use it here in order "
#~ "to   avoid confusion.\n"
#~ "\n"
#~ "* *recurrence*\n"
#~ "\n"
#~ "  A recurring event is something which occurs on a regular recurring "
#~ "basis.\n"
#~ "\n"
#~ "* *holidays* and *events*\n"
#~ "\n"
#~ "  Holidays and events are basically named dates or recurrences.\n"
#~ "\n"
#~ "Among other things, Date::Manip allow you to:\n"
#~ "\n"
#~ "* ***\n"
#~ "\n"
#~ "  Enter a date in practically any format you choose.\n"
#~ "\n"
#~ "* ***\n"
#~ "\n"
#~ "  Compare two dates, entered in widely different formats to determine "
#~ "which   is earlier.\n"
#~ "\n"
#~ "* ***\n"
#~ "\n"
#~ "  Extract any information you want from a date using a format string   "
#~ "similar to the Unix date command.\n"
#~ "\n"
#~ "* ***\n"
#~ "\n"
#~ "  Determine the amount of time between two dates, or add an amount of "
#~ "time   to a date to get a second date.\n"
#~ "\n"
#~ "* ***\n"
#~ "\n"
#~ "  Work with dates with dates using international formats (foreign month   "
#~ "names, 12/10/95 referring to October rather than December, etc.).\n"
#~ "\n"
#~ "* ***\n"
#~ "\n"
#~ "  To find a list of dates where a recurring event happens.\n"
#~ "\n"
#~ "Each of these tasks is trivial (one or two lines at most) with this "
#~ "package."
#~ msgstr ""
#~ "Date::Manip は、一般的な日付／時刻操作を簡単に行なうために設計されたモ"
#~ "ジュール集です。操作としては 2 つの時刻に対する比較のほか、一方と他方の時"
#~ "刻の差を計算や協定世界時の処理などを、簡単に行なうことができます。時刻はグ"
#~ "レゴリオ暦(現在使用されている暦のうちの 1 つ) として扱う仕組みで、サマータ"
#~ "イムなどの調整にも完全対応しています。\n"
#~ "\n"
#~ "開発当初の段階から、  Date::Manip は必要な日付／時刻処理を簡単に行なうこと"
#~ "ができるようになっています。既にある他の多くのモジュールは、これらの処理を"
#~ "より素早く、効率的に処理できる仕組みを備えていますが、これらは Date::"
#~ "Manip にあるような処理の全てを実行できわけではありません。\n"
#~ "\n"
#~ "既に他の多くの日付／時刻モジュールが存在していて、それらは場合によっては高"
#~ "速に処理できる仕組みを備えていることから、事前に Date::Manip::Misc ドキュ"
#~ "メントをお読みになり、 CPAN から提供されるモジュールのうちのどのモジュール"
#~ "が適切なのかを判断してからお使いください。全ての作業を単一のモジュールで扱"
#~ "いたい場合には、本モジュールがお勧めです。\n"
#~ "\n"
#~ "Date::Manip には様々な種類のデータを処理するための機能が備わっています。\n"
#~ "\n"
#~ "* *日付*\n"
#~ "\n"
#~ "  日付という言葉は幅広い意味で使用されているもので、よく間違えられる用語で"
#~ "もあります。 Date::Manip では、日付には 3 種類の情報が含まれています: カレ"
#~ "ンダーの日付、時刻、タイムゾーン情報です。カレンダーの日付と時刻は完全に処"
#~ "理することができます。タイムゾーンについても同様ですが、Date::Manip の使い"
#~ "方によっては、下記に示すとおりいくつかの制限があります。\n"
#~ "\n"
#~ "* *差分*\n"
#~ "\n"
#~ "  差分とは時刻の量を表わした数値 (2 つの異なる日付の差) を意味します。差分"
#~ "は時刻の量のみを意味する言葉で、開始や終了の日時を持たない値になっていま"
#~ "す。多くの人々にとって、差分とは時刻の量を意味するものですが、 '時刻' とい"
#~ "う用語は既にそのモジュール内で多数使用されているため、混乱を防ぐために別の"
#~ "言葉を用意して説明しています。\n"
#~ "\n"
#~ "* *繰り返し*\n"
#~ "\n"
#~ "  一定の周期で発生するイベントを意味します。\n"
#~ "\n"
#~ "* *祝日* と *イベント*\n"
#~ "\n"
#~ "  祝日とイベントは、日付と周期に名前が付けられたものを意味します。\n"
#~ "\n"
#~ "それ以外にも、 Date::Manip では下記のようなことを実施することができます:\n"
#~ "\n"
#~ "* ***\n"
#~ "\n"
#~ "  事実上、ほぼ全ての書式で自由に日付入力を行なうことができます。\n"
#~ "\n"
#~ "* ***\n"
#~ "\n"
#~ "  それぞれ大きく異なる書式の 2 つの日付を比較し、どちらが先の日付なのかを"
#~ "判断することができます。\n"
#~ "\n"
#~ "* ***\n"
#~ "\n"
#~ "  Unix の date コマンドのように、書式文字列を利用して、日付から必要な情報"
#~ "を抽出することができます。\n"
#~ "\n"
#~ "* ***\n"
#~ "\n"
#~ "  2 つの日付の差を計算することができるほか、時刻に値を足してもう 1 つの日"
#~ "付を作成することができます。\n"
#~ "\n"
#~ "* ***\n"
#~ "\n"
#~ "  国際化された書式による日付処理 (月名称を含む。 12/10/95 は 12 月ではな"
#~ "く 10 月を意味するものとして扱います) 。\n"
#~ "\n"
#~ "* ***\n"
#~ "\n"
#~ "  繰り返しイベントが発生する日付の一覧表示\n"
#~ "\n"
#~ "パッケージ内では、それぞれの処理は平凡な (多くても数行程度) 記述で作成され"
#~ "ています。"

#~ msgid ""
#~ "DateTime::Locale is primarily a factory for the various locale "
#~ "subclasses. It also provides some functions for getting information on "
#~ "all the available locales.\n"
#~ "\n"
#~ "If you want to know what methods are available for locale objects, then "
#~ "please read the DateTime::Locale::Base documentation."
#~ msgstr ""
#~ "DateTime::Locale は主に様々なロケールサブクラス向けのファクトリとなるクラ"
#~ "スです。利用可能なすべてのロケールに対して、情報を取得するためのいくつかの"
#~ "関数が提供されています。\n"
#~ "\n"
#~ "ロケールオブジェクトでどのようなメソッドを利用できるのかについては、 "
#~ "DateTime::Locale::Base のドキュメンテーションをお読みください。"

#~ msgid "A date object, with as little code as possible"
#~ msgstr "できる限り少ない行数で作成された日付オブジェクト"

#~ msgid ""
#~ "*DateTime::Tiny* is a most prominent member of the the DateTime::Tiny "
#~ "manpage suite of time modules.\n"
#~ "\n"
#~ "It implements an extremely lightweight object that represents a "
#~ "datetime.\n"
#~ "\n"
#~ "The Tiny Mandate     Many CPAN modules which provide the best "
#~ "implementation of a certain     concepts are very large. For some reason, "
#~ "this generally seems to be     about 3 megabyte of ram usage to load the "
#~ "module.\n"
#~ "\n"
#~ "    For a lot of the situations in which these large and "
#~ "comprehensive     implementations exist, some people will only need a "
#~ "small fraction of     the functionality, or only need this functionality "
#~ "in an ancillary     role.\n"
#~ "\n"
#~ "    The aim of the Tiny modules is to implement an alternative to the "
#~ "large     module that implements a useful subset of their functionality, "
#~ "using as     little code as possible.\n"
#~ "\n"
#~ "    Typically, this means a module that implements between 50% and 80% "
#~ "of     the features of the larger module (although this is just a "
#~ "guideline),     but using only 100 kilobytes of code, which is about "
#~ "1/30th of the     larger module.\n"
#~ "\n"
#~ "The Concept of Tiny Date and Time     Due to the inherent complexity, "
#~ "Date and Time is intrinsically very     difficult to implement properly.\n"
#~ "\n"
#~ "    The arguably *only* module to implement it completely correct is "
#~ "the     DateTime manpage. However, to implement it properly the "
#~ "DateTime     manpage is quite slow and requires 3-4 megabytes of memory "
#~ "to load.\n"
#~ "\n"
#~ "    The challenge in implementing a Tiny equivalent to DateTime is to do "
#~ "so     without making the functionality critically flawed, and to "
#~ "carefully     select the subset of functionality to implement.\n"
#~ "\n"
#~ "    If you look at where the main complexity and cost exists, you will "
#~ "find     that it is relatively cheap to represent a date or time as an "
#~ "object,     but much much more expensive to modify, manipulate or convert "
#~ "the     object.\n"
#~ "\n"
#~ "    As a result, *DateTime::Tiny* provides the functionality required "
#~ "to     represent a date as an object, to stringify the date and to parse "
#~ "it     back in, but does *not* allow you to modify the dates.\n"
#~ "\n"
#~ "    The purpose of this is to allow for date object representations "
#~ "in     situations like log parsing and fast real-time type work.\n"
#~ "\n"
#~ "    The problem with this is that having no ability to modify date "
#~ "limits     the usefulness greatly.\n"
#~ "\n"
#~ "    To make up for this, *if* you have the DateTime manpage installed, "
#~ "any     *DateTime::Tiny* module can be inflated into the equivalent "
#~ "the     DateTime manpage as needing, loading the DateTime manpage on the "
#~ "fly if     necesary.\n"
#~ "\n"
#~ "    This is somewhat similar to DateTime::LazyInit, but unlike that "
#~ "module     *DateTime::Tiny* is not modifiable.\n"
#~ "\n"
#~ "    For the purposes of date/time logic, all *DateTime::Tiny* objects "
#~ "exist     in the \"C\" locale, and the \"floating\" time zone. This may "
#~ "be improved     in the future if a suitably tiny way of handling "
#~ "timezones is found.\n"
#~ "\n"
#~ "    When converting up to full the DateTime manpage objects, these "
#~ "local     and time zone settings will be applied (although an ability is "
#~ "provided     to override this).\n"
#~ "\n"
#~ "    In addition, the implementation is strictly correct and is intended "
#~ "to     be very easily to sub-class for specific purposes of your own."
#~ msgstr ""
#~ "*DateTime::Tiny* は時刻モジュールである DateTime::Tiny スイートの中でもっ"
#~ "ともよく知られたメンバーです。\n"
#~ "\n"
#~ "日付と時刻を表わす非常に軽量なオブジェクトを実装しています。\n"
#~ "\n"
#~ "CPAN モジュールには様々な日付モジュールがありますが、いずれも非常に大きい"
#~ "もので、モジュールを読み込むと一般に 3MB 程度のメモリを使用してしまいま"
#~ "す。\n"
#~ "\n"
#~ "このように巨大で広範囲をサポートする実装は多数あるものの、利用者によっては"
#~ "もっと簡易的で部分的なサポートのみを提供するものを必要とする方々がいまし"
#~ "た。\n"
#~ "\n"
#~ "Tiny モジュールの目的は、できる限り少ないコード量で、必要とされる主要な機"
#~ "能に対応した、巨大モジュールに対する代替品を作成することを目的にしていま"
#~ "す。\n"
#~ "\n"
#~ "一般的に、これは巨大なモジュールの 50% から 80% 程度を実装することになりま"
#~ "すが、コード量に関しては巨大モジュールと比較して 1/30 、つまり 100 キロバ"
#~ "イト程度で作成することを意味しています。\n"
#~ "\n"
#~ "日付と時刻の処理には固有の複雑さが存在することから、これを正しく実装するに"
#~ "はそれなりの困難が伴っています。\n"
#~ "\n"
#~ "そのため、日付と時刻を完全に正しく実装しているのは、本モジュールだけである"
#~ "と確信しています。ただし、日付と時刻を適切に処理すると、かなり重い処理に"
#~ "なってしまうほか、メモリも 3 から 4 メガバイト程度必要になってしまいま"
#~ "す。\n"
#~ "\n"
#~ "日付と時刻の簡易的な実装への挑戦としては、明らかに欠陥のある機能を残したり"
#~ "はせず、かつ価値の高い修正／操作／変換機能を提供することにあります。\n"
#~ "\n"
#~ "その結果、 *DateTime::Tiny* は、日付をオブジェクトとして表現するのに必要な"
#~ "機能を提供するほか、日付と文字列との相互変換の機能も提供していますが、日付"
#~ "の変更については対応 *していません* 。\n"
#~ "\n"
#~ "この機能を提供した理由は、ログの処理や高速でリアルタイムな型処理などを提供"
#~ "するためです。\n"
#~ "\n"
#~ "また、変更機能への未対応は、このオブジェクトの用途を大きく狭める結果になっ"
#~ "ています。\n"
#~ "\n"
#~ "このような問題から、 DateTime がインストールされている環境の場合、 "
#~ "*DateTime::Tiny* モジュールは必要に応じて DateTime と同等の機能を提供する"
#~ "ようにすることができます。この場合、 DateTime は自動的に読み込まれます。\n"
#~ "\n"
#~ "このような仕組みは DateTime::LazyInit に似た仕組みですが、 *DateTime::"
#~ "Tiny* は修正できないという点が異なります。\n"
#~ "\n"
#~ "日付と時刻のロジックのため、すべての *DateTime::Tiny* オブジェクトは \"C"
#~ "\" ロケール内に存在していて、 \"浮動型\" のタイムゾーンを保持しています。"
#~ "これは将来的に、タイムゾーンに関する簡易的な処理方法が見つかり次第、改善さ"
#~ "れる予定です。\n"
#~ "\n"
#~ "完全機能の DateTime オブジェクトに変換する場合、ローカルのタイムゾーン設定"
#~ "が適用されます (ただし上書きする機能もあります) 。\n"
#~ "\n"
#~ "これに加えて、実装は厳密に正しく、かつ独自のクラスを作成するためにサブクラ"
#~ "ス化することもできるようになっています。"

#~ msgid ""
#~ "This module is meant as a debugging aid. It can be used to make a script "
#~ "complain loudly with stack backtraces when warn()ing or die()ing. Unlike "
#~ "other similar modules (e.g. the Carp::Always manpage), it includes stack "
#~ "traces even when exception objects are thrown.\n"
#~ "\n"
#~ "The stack traces are generated using the Carp manpage, and will look work "
#~ "for all types of errors. the Carp manpage's 'carp' and 'confess' "
#~ "functions will also be made to include stack traces.\n"
#~ "\n"
#~ "     $ perl -d:Confess -e 'sub f { die \"arghh\" }; sub g { f }; g'   "
#~ "arghh at -e line 1.           main::f() called at -e line 1           "
#~ "main::g() called at -e line 1\n"
#~ "\n"
#~ "     $ perl -d:Confess -w -e 'sub f { $a = shift; @a = @$a };' "
#~ "\\                                         -e 'sub g { f(undef) }; g'   "
#~ "Use of uninitialized value $a in array dereference at -e line "
#~ "1.           main::f(undef) called at -e line 2           main::g() "
#~ "called at -e line 2\n"
#~ "\n"
#~ "Internally, this is implemented with '$SIG{__WARN__}' and '$SIG{__DIE__}' "
#~ "hooks.\n"
#~ "\n"
#~ "Stack traces are also included if raw non-object references are thrown."
#~ msgstr ""
#~ "このモジュールはデバッグ用に作られたもので、 warn() や die() が発生した際"
#~ "に完全なバックトレースを表示して、わかりやすい状況を提示します。他の類似モ"
#~ "ジュール (Carp::Always など) とは異なり、例外オブジェクトがスローされた場"
#~ "合でも、スタックトレースを表示することができます。\n"
#~ "\n"
#~ "スタックトレースは Carp を利用して生成され、すべてのタイプのエラーで動作し"
#~ "ます。 Carp の 'carp' および 'confess' 関数を利用して、スタックトレースを"
#~ "出力しています。\n"
#~ "\n"
#~ "     $ perl -d:Confess -e 'sub f { die \"arghh\" }; sub g { f }; g'   "
#~ "arghh at -e line 1.           main::f() called at -e line 1           "
#~ "main::g() called at -e line 1\n"
#~ "\n"
#~ "     $ perl -d:Confess -w -e 'sub f { $a = shift; @a = @$a };' "
#~ "\\                                         -e 'sub g { f(undef) }; g'   "
#~ "Use of uninitialized value $a in array dereference at -e line "
#~ "1.           main::f(undef) called at -e line 2           main::g() "
#~ "called at -e line 2\n"
#~ "\n"
#~ "また、内部的には '$SIG{__WARN__}' と '$SIG{__DIE__}' のフックを利用してい"
#~ "ます。\n"
#~ "\n"
#~ "非オブジェクト参照がスローされた場合にもスタックトレースが表示されます。"

#~ msgid ""
#~ "The 'Devel::StackTrace' module contains two classes, C,Devel::StackTrace> "
#~ "and Devel::StackTrace::Frame. These objects encapsulate the information "
#~ "that can retrieved via Perl's 'caller()' function, as well as providing a "
#~ "simple interface to this data.\n"
#~ "\n"
#~ "The 'Devel::StackTrace' object contains a set of 'Devel::StackTrace::"
#~ "Frame' objects, one for each level of the stack. The frames contain all "
#~ "the data available from 'caller()'.\n"
#~ "\n"
#~ "This code was created to support my Exception::Class::Base class (part of "
#~ "Exception::Class) but may be useful in other contexts."
#~ msgstr ""
#~ "'Devel::StackTrace' モジュールには 2 つのクラスが含まれています。それぞれ "
#~ "Devel::StackTrace, Devel::StackTrace::Frame というクラスで、これらのオブ"
#~ "ジェクトは Perl の'caller()' 関数を介して取得することができる情報をカプセ"
#~ "ル化し、このデータに対するシンプルなインターフェイスを提供します。\n"
#~ "\n"
#~ "'Devel::StackTrace' オブジェクトには、各スタックのレベルに対応した "
#~ "'Devel::StackTrace::Frame' オブジェクトが複数個含まれています。フレーム内"
#~ "には、 'caller()' で提供されるすべてのデータが含まれています。\n"
#~ "\n"
#~ "このコードは、私が作成している Exception::Class::Base クラス (Exception::"
#~ "Class の一部) に対応するために作ったものですが、他の箇所でも便利に使用する"
#~ "ことができます。"

#~ msgid "Dump symbol names or the symbol table"
#~ msgstr "シンボル名やシンボルテーブルをダンプするツール"

#~ msgid ""
#~ "In many applications it's wise to let Perl use Unicode for the strings it "
#~ "processes. Most of the interfaces Perl has to the outside world are still "
#~ "byte based. Programs therefore need to decode byte strings that enter the "
#~ "program from the outside and encode them again on the way out.\n"
#~ "\n"
#~ "The POSIX locale system is used to specify both the language conventions "
#~ "requested by the user and the preferred character set to consume and "
#~ "output. The 'Encode::Locale' module looks up the charset and encoding "
#~ "(called a CODESET in the locale jargon) and arranges for the the Encode "
#~ "manpage module to know this encoding under the name \"locale\". It means "
#~ "bytes obtained from the environment can be converted to Unicode strings "
#~ "by calling 'Encode::encode(locale => $bytes)' and converted back again "
#~ "with 'Encode::decode(locale => $string)'.\n"
#~ "\n"
#~ "Where file systems interfaces pass file names in and out of the program "
#~ "we also need care. The trend is for operating systems to use a fixed file "
#~ "encoding that don't actually depend on the locale; and this module "
#~ "determines the most appropriate encoding for file names. The the Encode "
#~ "manpage module will know this encoding under the name \"locale_fs\". For "
#~ "traditional Unix systems this will be an alias to the same encoding as "
#~ "\"locale\".\n"
#~ "\n"
#~ "For programs running in a terminal window (called a \"Console\" on some "
#~ "systems) the \"locale\" encoding is usually a good choice for what to "
#~ "expect as input and output. Some systems allows us to query the encoding "
#~ "set for the terminal and 'Encode::Locale' will do that if available and "
#~ "make these encodings known under the 'Encode' aliases \"console_in\" and "
#~ "\"console_out\". For systems where we can't determine the terminal "
#~ "encoding these will be aliased as the same encoding as \"locale\". The "
#~ "advice is to use \"console_in\" for input known to come from the terminal "
#~ "and \"console_out\" for output known to go from the terminal.\n"
#~ "\n"
#~ "In addition to arranging for various Encode aliases the following "
#~ "functions and variables are provided:\n"
#~ "\n"
#~ "* decode_argv( )\n"
#~ "\n"
#~ "* decode_argv( Encode::FB_CROAK )\n"
#~ "\n"
#~ "  This will decode the command line arguments to perl (the '@ARGV' "
#~ "array)   in-place.\n"
#~ "\n"
#~ "  The function will by default replace characters that can't be decoded "
#~ "by   \"\\x{FFFD}\", the Unicode replacement character.\n"
#~ "\n"
#~ "  Any argument provided is passed as CHECK to underlying Encode::"
#~ "decode()   call. Pass the value 'Encode::FB_CROAK' to have the decoding "
#~ "croak if not   all the command line arguments can be decoded. See the "
#~ "Encode/\"Handling   Malformed Data\" manpage for details on other options "
#~ "for CHECK.\n"
#~ "\n"
#~ "* env( $uni_key )\n"
#~ "\n"
#~ "* env( $uni_key => $uni_value )\n"
#~ "\n"
#~ "  Interface to get/set environment variables. Returns the current value "
#~ "as   a Unicode string. The $uni_key and $uni_value arguments are expected "
#~ "to   be Unicode strings as well. Passing 'undef' as $uni_value deletes "
#~ "the   environment variable named $uni_key.\n"
#~ "\n"
#~ "  The returned value will have the characters that can't be decoded   "
#~ "replaced by \"\\x{FFFD}\", the Unicode replacement character.\n"
#~ "\n"
#~ "  There is no interface to request alternative CHECK behavior as for   "
#~ "decode_argv(). If you need that you need to call encode/decode "
#~ "yourself.   For example:\n"
#~ "\n"
#~ "      my $key = Encode::encode(locale => $uni_key, Encode::"
#~ "FB_CROAK);       my $uni_value = Encode::decode(locale => $ENV{$key}, "
#~ "Encode::FB_CROAK);\n"
#~ "\n"
#~ "* reinit( )\n"
#~ "\n"
#~ "* reinit( $encoding )\n"
#~ "\n"
#~ "  Reinitialize the encodings from the locale. You want to call this   "
#~ "function if you changed anything in the environment that might "
#~ "influence   the locale.\n"
#~ "\n"
#~ "  This function will croak if the determined encoding isn't recognized "
#~ "by   the Encode module.\n"
#~ "\n"
#~ "  With argument force $ENCODING_... variables to set to the given value.\n"
#~ "\n"
#~ "* $ENCODING_LOCALE\n"
#~ "\n"
#~ "  The encoding name determined to be suitable for the current locale. "
#~ "the   Encode manpage know this encoding as \"locale\".\n"
#~ "\n"
#~ "* $ENCODING_LOCALE_FS\n"
#~ "\n"
#~ "  The encoding name determined to be suiteable for file system "
#~ "interfaces   involving file names. the Encode manpage know this encoding "
#~ "as   \"locale_fs\".\n"
#~ "\n"
#~ "* $ENCODING_CONSOLE_IN\n"
#~ "\n"
#~ "* $ENCODING_CONSOLE_OUT\n"
#~ "\n"
#~ "  The encodings to be used for reading and writing output to the a "
#~ "console.   the Encode manpage know these encodings as \"console_in\" "
#~ "and   \"console_out\"."
#~ msgstr ""
#~ "多くのアプリケーションでは、 Perl での文字列操作に Unicode を使用するのが"
#~ "よいものとされています。ただし Perl 以外の多くのインターフェイスでは現在も"
#~ "バイトベースのものが利用されているため、 Perl のプログラム側ではバイト文字"
#~ "列をデコードして取り込み、エンコードして取り出す作業が必要になります。\n"
#~ "\n"
#~ "POSIX のロケールシステムは、ユーザから要求のあった言語仕様と入出力に利用す"
#~ "る文字セットの間で使用するものです。 'Encode::Locale' モジュールは文字セッ"
#~ "ト(ロケール用語では CODESET とも言います) を参照してエンコードを行ない、こ"
#~ "のエンコードを \"ロケール\" の名称で知るために Encode のモジュールを配置し"
#~ "ます。これにより、この環境から取得できるバイトは、 'Encode::encode(locale "
#~ "=> $bytes)'で Unicode 文字列を変換したり、 'Encode::decode(locale => "
#~ "$string)'で Unicode 文字列に戻したりすることができるようになります。\n"
#~ "\n"
#~ "ファイルシステムのインターフェイスでは、プログラムとのファイル名入出力に際"
#~ "してこのような処理を行なう必要があります。オペレーティングシステム側では一"
#~ "般に、ロケールには依存しない固定のファイル名エンコーディングを行なうため、"
#~ "このモジュールではファイル名に対して最も適切なエンコーディングを判断するこ"
#~ "とができます。Encode のマニュアルページでは、ファイル名用に最も適切なエン"
#~ "コーディングが\"locale_fs\" として書かれています。従来の Unix システムで"
#~ "は、 \"locale\" と同じエンコーディングになっています。\n"
#~ "\n"
#~ "端末ウインドウ内で動作するプログラム (\"コンソール\" プログラムとも呼びま"
#~ "す)の場合、 \"locale\" エンコーディングは入出力に期待するものを判断するた"
#~ "めの材料として利用することができます。システムによっては、端末側にエンコー"
#~ "ディングセットを問い合わせることができるものもあり、 'Encode::Locale' では"
#~ "可能な限りこれを使用して\"console_in\" と \"console_out\" の別名で "
#~ "'Encode' 内のエンコーディングを判断します。端末のエンコーディングを判断で"
#~ "きないシステムの場合は、 \"locale\" と同じエンコーディングを使用します。端"
#~ "末から入力されるデータに対しては \"console_in\" を使用し、端末に出力する"
#~ "データに対しては \"console_out\" を使用することをお勧めします。\n"
#~ "\n"
#~ "様々なエンコーディング別名を配置することができるほか、下記のような関数や変"
#~ "数が提供されています:\n"
#~ "\n"
#~ "* decode_argv( )\n"
#~ "\n"
#~ "* decode_argv( Encode::FB_CROAK )\n"
#~ "\n"
#~ "  上記の関数は、コマンドラインパラメータ ('@ARGV' 配列) を Perl に取り込む"
#~ "際、デコード処理を行ないます。\n"
#~ "\n"
#~ "  この関数は、既定ではデコードできない文字を \"\\x{FFFD}\" (Unicode の未定"
#~ "義扱い文字) に置き換えます。\n"
#~ "\n"
#~ "  指定されるパラメータは Encode::decode() を呼び出すことで CHECK (チェッ"
#~ "ク) が行なわれます。すべてのコマンドラインパラメータがデコードできない場合"
#~ "は、'Encode::FB_CROAK' の値を渡すことで、デコード用の制御を行ないます。 "
#~ "CHECK に対するその他のオプションについて、詳しくはEncode/\"Handling "
#~ "Malformed Data\" のマニュアルページをお読みください。\n"
#~ "\n"
#~ "* env( $uni_key )\n"
#~ "\n"
#~ "* env( $uni_key => $uni_value )\n"
#~ "\n"
#~ "  環境変数を設定したり取得したりするインターフェイスです。現在の値を "
#~ "Unicode 文字列として返却します。 $uni_key と $uni_value の値は、それぞれ "
#~ "Unicode 文字列で指定します。また、 $uni_value に 'undef' を指定すると、 "
#~ "$uni_key で指定した環境変数を削除します。\n"
#~ "\n"
#~ "  返却された値のうち、デコードできない文字は \"\\x{FFFD}\" (Unicode の未定"
#~ "義扱い  文字) に置き換えられます。\n"
#~ "\n"
#~ "  decode_argv() では、代替のチェック動作を要求するインターフェイスはありま"
#~ "せん。自分自身でエンコード／デコードを呼び出したい場合は、下記のようにしま"
#~ "す:\n"
#~ "\n"
#~ "      my $key = Encode::encode(locale => $uni_key, Encode::"
#~ "FB_CROAK);       my $uni_value = Encode::decode(locale => $ENV{$key}, "
#~ "Encode::FB_CROAK);\n"
#~ "\n"
#~ "* reinit( )\n"
#~ "\n"
#~ "* reinit( $encoding )\n"
#~ "\n"
#~ "  ロケール情報からエンコーディングを再初期化します。ロケールに影響する設定"
#~ "を変更したりしたような場合に、この関数を呼び出してください。\n"
#~ "\n"
#~ "  また、この関数は判断したエンコーディングが Encode モジュールで認識されな"
#~ "い場合にも使用します。\n"
#~ "\n"
#~ "  指定したロケールに変更したい場合は、 $ENCODING_... 変数をお使いくださ"
#~ "い。\n"
#~ "\n"
#~ "* $ENCODING_LOCALE\n"
#~ "\n"
#~ "  現在のロケールに適切であると判断されたエンコーディング名が含まれます。"
#~ "Encode のマニュアルページでは \"locale\" としてこのエンコーディングが書か"
#~ "れています。\n"
#~ "\n"
#~ "* $ENCODING_LOCALE_FS\n"
#~ "\n"
#~ "  ファイル名を含むファイルシステムのインターフェイスに対して、適切であると"
#~ "判断されたエンコーディング名が含まれます。Encode のマニュアルページでは "
#~ "\"locale\" としてこのエンコーディングが書かれています。\n"
#~ "\n"
#~ "* $ENCODING_CONSOLE_IN\n"
#~ "\n"
#~ "* $ENCODING_CONSOLE_OUT\n"
#~ "\n"
#~ "  コンソールとの入出力に使用されるエンコーディングです。Encode のマニュア"
#~ "ルページでは \"locale\" としてこのエンコーディングが書かれています。"

#~ msgid ""
#~ "The Expect module is a successor of Comm.pl and a descendent of Chat.pl. "
#~ "It more closely resembles the Tcl Expect language than its predecessors. "
#~ "It does not contain any of the networking code found in Comm.pl. I "
#~ "suspect this would be obsolete anyway given the advent of IO::Socket and "
#~ "external tools such as netcat.\n"
#~ "\n"
#~ "Expect.pm is an attempt to have more of a switch() & case feeling to make "
#~ "decision processing more fluid. Three separate types of debugging have "
#~ "been implemented to make code production easier.\n"
#~ "\n"
#~ "It is possible to interconnect multiple file handles (and processes) much "
#~ "like Tcl's Expect. An attempt was made to enable all the features of "
#~ "Tcl's Expect without forcing Tcl on the victim programmer :-) .\n"
#~ "\n"
#~ "Please, before you consider using Expect, read the FAQs about the /\"I "
#~ "want to automate password entry for su/ssh/scp/rsh/...\" manpage and the /"
#~ "\"I want to use Expect to automate [anything with a buzzword]...\" manpage"
#~ msgstr ""
#~ "Expect モジュールは Comm.pl の後継、かつ Chat.pl の子孫となるモジュール"
#~ "で、従来のモジュールよりも Tcl の Excpect 言語により近い形式を提供していま"
#~ "す。 Comm.pl には通信用のコードが含まれていませんが、 IO::Socket を利用し"
#~ "たり netcat のような外部ツールを利用したりするのは、時代遅れだと間が家庭ま"
#~ "す。\n"
#~ "\n"
#~ "Expect.pm は switch() と case を多用して、処理の判断をより流動的に行なうよ"
#~ "うになっています。また、コードの作成をより容易にするため、 3 種類のデバッ"
#~ "グタイプが用意されています。\n"
#~ "\n"
#~ "また、 Tcl の Expect のように、複数のファイルハンドル (およびプロセス) を"
#~ "相互に接続することもできます。このモジュールは、 Tcl を強要することでプロ"
#~ "グラマに犠牲を強いるようなことが無いようにする目的もあります。\n"
#~ "\n"
#~ "なお、 Expect を利用する際には、 事前に /\"I want to automate password "
#~ "entry for su/ssh/scp/rsh/...\" (su/ssh/scp/rsh などでパスワードの入力を自"
#~ "動化したい) や /\"I want to use Expect to automate [anything with a "
#~ "buzzword]...\" (何らかのモジュールを Expect で自動化したい) に書かれた "
#~ "FAQ をお読みください。"

#~ msgid ""
#~ "Exporter::Tiny supports many of Sub::Exporter's external-facing features "
#~ "including renaming imported functions with the '-as', '-prefix' and '-"
#~ "suffix' options; explicit destinations with the 'into' option; and "
#~ "alternative installers with the 'installler' option. But it's written in "
#~ "only about 40% as many lines of code and with zero non-core "
#~ "dependencies.\n"
#~ "\n"
#~ "Its internal-facing interface is closer to Exporter.pm, with "
#~ "configuration done through the '@EXPORT', '@EXPORT_OK' and '%EXPORT_TAGS' "
#~ "package variables.\n"
#~ "\n"
#~ "Exporter::Tiny performs most of its internal duties (including resolution "
#~ "of tag names to sub names, resolution of sub names to coderefs, and "
#~ "installation of coderefs into the target package) as method calls, which "
#~ "means they can be overridden to provide interesting behaviour."
#~ msgstr ""
#~ "Exporter::Tiny は、インポートされた関数の名前変更 ('-as', '-prefix', '-"
#~ "suffix' オプションもあります) などの機能を含む Sub::Exporter の外部公開機"
#~ "能に多数対応しています。 'into' オプションによる明示的な宛先指定や "
#~ "'installer' オプションによる代替インストーラにも対応しています。ただし、"
#~ "コードの 40% 程度の行数で書かれていて、中枢以外の依存関係を持たないのが特"
#~ "長です。\n"
#~ "\n"
#~ "内部向けのインターフェイスは Exporter.pm に似た構造で、 '@EXPORT', "
#~ "'@EXPORT_OK', '%EXPORT_TAGS' などのパッケージ変数で設定を行なうことができ"
#~ "ます。\n"
#~ "\n"
#~ "Exporter::Tiny は内部向けの処理の多くをメソッドコールとして実施 (タグ名か"
#~ "らサブ名への解決やサブ名からコード参照への解決、コード参照のターゲットパッ"
#~ "ケージへのインストールなど) しているため、興味深いふるまいを上書きできるよ"
#~ "うになっています。"

#~ msgid "ExtUtils::Config is an abstraction around the %Config hash."
#~ msgstr "ExtUtils::Config は %Config ハッシュに対する抽象化機構です。"

#~ msgid "Dependency pkg for perl-ExtUtils-MakeMaker"
#~ msgstr "perl-ExtUtils-MakeMaker 向け依存パッケージ"

#~ msgid ""
#~ "This package is a dependency package to keep track of perl Modules needed "
#~ "to build perl-ExtUtils-MakeMaker. It is only used for build to avoid "
#~ "build loops of perl-ExtUtils-MakeMaker and its dependent packages."
#~ msgstr ""
#~ "このパッケージは、 perl-ExtUtils-MakeMaker を構築するのに必要な Perl のモ"
#~ "ジュールを追跡するための、依存パッケージです。 perl-ExtUtils-MakeMaker や"
#~ "その依存パッケージの構築を繰り返したりしないようにするためだけの仕組みで"
#~ "す。"

#~ msgid ""
#~ "This module provide a convenient way to create directories of arbitrary "
#~ "depth and to delete an entire directory subtree from the filesystem."
#~ msgstr ""
#~ "このモジュールは、任意の深さのディレクトリを作成したり、サブツリー全体を削"
#~ "除したりすることのできる便利な方法を提供します。"

#~ msgid ""
#~ "File::ShareDir::Install allows you to install read-only data files from a "
#~ "distribution. It is a companion module to the File::ShareDir manpage, "
#~ "which allows you to locate these files after installation.\n"
#~ "\n"
#~ "It is a port of the Module::Install::Share manpage to the ExtUtils::"
#~ "MakeMaker manpage with the improvement of only installing the files you "
#~ "want; '.svn', '.git' and other source-control junk will be ignored.\n"
#~ "\n"
#~ "Please note that this module installs read-only data files; empty "
#~ "directories will be ignored."
#~ msgstr ""
#~ "File::ShareDir::Install は、配布物から読み込み専用のデータをインストールす"
#~ "ることができるモジュールです。これは File::ShareDir に対するコンパニオンモ"
#~ "ジュールで、これによってインストール後にこれらのファイルの場所がわかるよう"
#~ "になっています。\n"
#~ "\n"
#~ "これは Module::Install::Share を ExtUtils::MakeMaker に移植したもので、必"
#~ "要なファイルのみをインストールするように改善された仕組みも追加されていま"
#~ "す。たとえば '.svn', '.git' などのソース制御用ファイルは無視するようになっ"
#~ "ています。\n"
#~ "\n"
#~ "なお、このモジュールは読み込み専用のデータのみをインストールすることに注意"
#~ "してください。また、空のディレクトリは無視されます。"

#~ msgid "change directory temporarily for a limited scope"
#~ msgstr "制限されたスコープ内での一時的なディレクトリ変更"

#~ msgid ""
#~ "File::pushd does a temporary 'chdir' that is easily and automatically "
#~ "reverted, similar to 'pushd' in some Unix command shells. It works by "
#~ "creating an object that caches the original working directory. When the "
#~ "object is destroyed, the destructor calls 'chdir' to revert to the "
#~ "original working directory. By storing the object in a lexical variable "
#~ "with a limited scope, this happens automatically at the end of the "
#~ "scope.\n"
#~ "\n"
#~ "This is very handy when working with temporary directories for tasks like "
#~ "testing; a function is provided to streamline getting a temporary "
#~ "directory from the File::Temp manpage.\n"
#~ "\n"
#~ "For convenience, the object stringifies as the canonical form of the "
#~ "absolute pathname of the directory entered.\n"
#~ "\n"
#~ "*Warning*: if you create multiple 'pushd' objects in the same lexical "
#~ "scope, their destruction order is not guaranteed and you might not wind "
#~ "up in the directory you expect."
#~ msgstr ""
#~ "File::pushd は、簡単に元のディレクトリに戻ることのできる一時的な 'chdir' "
#~ "機能を提供します。これはいくつかの Unix コマンドシェルで提供されている "
#~ "'pushd' に似た仕組みです。このモジュールでは、オブジェクトを作成して元の"
#~ "ディレクトリを記憶しています。オブジェクトが破壊されると、デストラクタが元"
#~ "のディレクトリに戻す処理を実施します。このような仕組みから、制限スコープ内"
#~ "でオブジェクトを保存しておくと、スコープの終了時に自動的にディレクトリが戻"
#~ "るようになります。\n"
#~ "\n"
#~ "このモジュールは、テストなどの処理のため、一時ディレクトリ内で作業を行なう"
#~ "ような用途に便利です。関数は File::Temp から取得した一時ディレクトリを利用"
#~ "することもできます。\n"
#~ "\n"
#~ "また、利便性を確保するため、オブジェクトは突入したディレクトリの絶対パスを"
#~ "文字列化して保持します。\n"
#~ "\n"
#~ "*警告*: 同じ文法スコープ内で複数の 'pushd' オブジェクトを作成した場合、そ"
#~ "の破壊順序は保証されません。したがって、期待通りにディレクトリが戻らない場"
#~ "合があります。"

#~ msgid ""
#~ "A 'Future' object represents an operation that is currently in progress, "
#~ "or has recently completed. It can be used in a variety of ways to manage "
#~ "the flow of control, and data, through an asynchronous program.\n"
#~ "\n"
#~ "Some futures represent a single operation and are explicitly marked as "
#~ "ready by calling the 'done' or 'fail' methods. These are called \"leaf\" "
#~ "futures here, and are returned by the 'new' constructor.\n"
#~ "\n"
#~ "Other futures represent a collection of sub-tasks, and are implicitly "
#~ "marked as ready depending on the readiness of their component futures as "
#~ "required. These are called \"convergent\" futures here as they converge "
#~ "control and data-flow back into one place. These are the ones returned by "
#~ "the various 'wait_*' and 'need_*' constructors.\n"
#~ "\n"
#~ "It is intended that library functions that perform asynchronous "
#~ "operations would use future objects to represent outstanding operations, "
#~ "and allow their calling programs to control or wait for these operations "
#~ "to complete. The implementation and the user of such an interface would "
#~ "typically make use of different methods on the class. The methods below "
#~ "are documented in two sections; those of interest to each side of the "
#~ "interface.\n"
#~ "\n"
#~ "It should be noted however, that this module does not in any way provide "
#~ "an actual mechanism for performing this asynchronous activity; it merely "
#~ "provides a way to create objects that can be used for control and data "
#~ "flow around those operations. It allows such code to be written in a "
#~ "neater, forward-reading manner, and simplifies many common patterns that "
#~ "are often involved in such situations.\n"
#~ "\n"
#~ "See also the Future::Utils manpage which contains useful loop-"
#~ "constructing functions, to run a future-returning function repeatedly in "
#~ "a loop.\n"
#~ "\n"
#~ "Unless otherwise noted, the following methods require at least version "
#~ "_0.08_."
#~ msgstr ""
#~ "'Future' オブジェクトは現在処理の操作や、ごく最近に終わったばかりの操作を"
#~ "表わすものです。非同期に動作するプログラムに対して、制御やデータの流れを管"
#~ "理するための様々な方法が用意されています。\n"
#~ "\n"
#~ "'Future' では単一の操作を表わすことができるほか、 'done' や 'fail' などの"
#~ "メソッドを呼び出すことで、明示的に終了を表わすこともできます。これらは "
#~ "\"Leaf Future' と呼ばれ、 'new' コンストラクタで返される値になります。\n"
#~ "\n"
#~ "そのほかにも、サブタスクの集合を表わす 'Future' のほか、必要なコンポーネン"
#~ "トとして依存先の処理状況に応じたマーキングを暗黙のうちに行なうこともできま"
#~ "す。これらは \"Convergent Future\" (収束型 Future) と呼ばれ、制御やデータ"
#~ "の流れを一カ所で行なうことになります。これらは様々な 'wait_*' または "
#~ "'need_*' コンストラクタで返される値になります。\n"
#~ "\n"
#~ "このモジュールは、ライブラリの関数に対して非同期の処理を実施させ、 Future "
#~ "オブジェクトを利用して進行状況を表示させ、呼び出し元のプログラム側で何らか"
#~ "の制御を行なうか、もしくは待機するかを指定することができる仕組みです。実装"
#~ "とその実装を使用するユーザは、クラス内の様々なメソッドを使用して必要な処理"
#~ "を行ないます。下記のメソッドは 2 つのセクションに分かれていますが、これら"
#~ "はインターフェイスの各面を表わしています。\n"
#~ "\n"
#~ "ただし、このモジュールは実際の仕組みや非同期の処理そのものを提供するもので"
#~ "はありません。単純に制御や制御内のデータで使用するオブジェクトを作成するだ"
#~ "けです。このモジュールを利用することで、より洗練されわかりやすく、かつシン"
#~ "プルな汎用パターンを利用して、非同期の処理を実現することができるようになり"
#~ "ます。\n"
#~ "\n"
#~ "なお、便利なループを構築するための機能については、 Future::Utils をお読み"
#~ "ください。こちらには、ループ内で繰り返し呼び出す場合の関数が提供されていま"
#~ "す。\n"
#~ "\n"
#~ "なお、下記のメソッドは明示されているものを除き、バージョン _0.08_ 以降が必"
#~ "要です。"

#~ msgid "Package to generate charts, using Lincoln Stein's GD.pm"
#~ msgstr "Lincoln Stein 氏の GD.pm を使用したグラフ生成パッケージ"

#~ msgid ""
#~ "This is GDGraph, a package to generate charts, using Lincoln Stein's GD."
#~ "pm. See the documentation for some history and more information."
#~ msgstr ""
#~ "これは GDGraph と呼ばれ、 Lincoln Stein 氏の GD.pm を使用したグラフ作成を "
#~ "行なうパッケージです。履歴と詳細情報についてはドキュメンテーションをお読み"
#~ "ください。"

#~ msgid ""
#~ "A Gravatar is a Globally Recognized Avatar for a given email address. "
#~ "This allows you to have a global picture associated with your email "
#~ "address. You can look up the Gravatar for any email address by "
#~ "constructing a URL to get the image from the gravatar.com manpage. This "
#~ "module does that.\n"
#~ "\n"
#~ "Examples of use include the author faces on the http://search.cpan.org "
#~ "manpage.\n"
#~ "\n"
#~ "See the http://gravatar.com manpage for more info."
#~ msgstr ""
#~ "Gravatar は Globally Recognized Avatar の略で、電子メールアドレスから生成"
#~ "するアバターです。このモジュールを利用することで、電子メールアドレスからグ"
#~ "ローバルな画像を生成することができます。 URL を構築して gravatar.com にア"
#~ "クセスすることで、電子メールアドレスから Gravatar を参照することができま"
#~ "す。\n"
#~ "\n"
#~ "使い方の例として、 http://search.cpan.org をご覧いただくと、著者の "
#~ "Gravatar を参照することができます。\n"
#~ "\n"
#~ "詳しくは http://gravatar.com をお読みください。"

#~ msgid ""
#~ "HTML::TableExtract is a subclass of HTML::Parser that serves to extract "
#~ "the information from tables of interest contained within an HTML "
#~ "document. The information from each extracted table is stored in table "
#~ "objects. Tables can be extracted as text, HTML, or HTML::ElementTable "
#~ "structures (for in-place editing or manipulation).\n"
#~ "\n"
#~ "There are currently four constraints available to specify which tables "
#~ "you would like to extract from a document: _Headers_, _Depth_, _Count_, "
#~ "and _Attributes_.\n"
#~ "\n"
#~ "_Headers_, the most flexible and adaptive of the techniques, involves "
#~ "specifying text in an array that you expect to appear above the data in "
#~ "the tables of interest. Once all headers have been located in a row of "
#~ "that table, all further cells beneath the columns that matched your "
#~ "headers are extracted. All other columns are ignored: think of it as "
#~ "vertical slices through a table. In addition, TableExtract automatically "
#~ "rearranges each row in the same order as the headers you provided. If you "
#~ "would like to disable this, set _automap_ to 0 during object creation, "
#~ "and instead rely on the column_map() method to find out the order in "
#~ "which the headers were found. Furthermore, TableExtract will "
#~ "automatically compensate for cell span issues so that columns are really "
#~ "the same columns as you would visually see in a browser. This behavior "
#~ "can be disabled by setting the _gridmap_ parameter to 0. HTML is stripped "
#~ "from the entire textual content of a cell before header matches are "
#~ "attempted -- unless the _keep_html_ parameter was enabled.\n"
#~ "\n"
#~ "_Depth_ and _Count_ are more specific ways to specify tables in relation "
#~ "to one another. _Depth_ represents how deeply a table resides in other "
#~ "tables. The depth of a top-level table in the document is 0. A table "
#~ "within a top-level table has a depth of 1, and so on. Each depth can be "
#~ "thought of as a layer; tables sharing the same depth are on the same "
#~ "layer. Within each of these layers, _Count_ represents the order in which "
#~ "a table was seen at that depth, starting with 0. Providing both a _depth_ "
#~ "and a _count_ will uniquely specify a table within a document.\n"
#~ "\n"
#~ "_Attributes_ match based on the attributes of the html <table> tag, for "
#~ "example, boder widths or background color.\n"
#~ "\n"
#~ "Each of the _Headers_, _Depth_, _Count_, and _Attributes_ specifications "
#~ "are cumulative in their effect on the overall extraction. For instance, "
#~ "if you specify only a _Depth_, then you get all tables at that depth "
#~ "(note that these could very well reside in separate higher- level tables "
#~ "throughout the document since depth extends across tables). If you "
#~ "specify only a _Count_, then the tables at that _Count_ from all depths "
#~ "are returned (i.e., the _n_th occurrence of a table at each depth). If "
#~ "you only specify _Headers_, then you get all tables in the document "
#~ "containing those column headers. If you have specified multiple "
#~ "constraints of _Headers_, _Depth_, _Count_, and _Attributes_, then each "
#~ "constraint has veto power over whether a particular table is extracted.\n"
#~ "\n"
#~ "If no _Headers_, _Depth_, _Count_, or _Attributes_ are specified, then "
#~ "all tables match.\n"
#~ "\n"
#~ "When extracting only text from tables, the text is decoded with HTML::"
#~ "Entities by default; this can be disabled by setting the _decode_ "
#~ "parameter to 0."
#~ msgstr ""
#~ "HTML::TableExtract は HTML::Parser のサブクラスで、 HTML 文書内にある表 "
#~ "(テーブル)について、その中に含まれる情報を取り出すために使用します。それぞ"
#~ "れ取り出した情報は表オブジェクト内に保存されます。表はテキストとして取り出"
#~ "すことができるほか、HTML や HTML::ElementTable の構造 (その場での操作や編"
#~ "集のため) として取り出すことができます。\n"
#~ "\n"
#~ "文書から情報を取り出す表を指定するにあたっては、下記の 4 つの制約条件を指"
#~ "定することができます: _Headers_, _Depth_, _Count_, _Attributes_.\n"
#~ "\n"
#~ "_Headers_ (ヘッダ) は、最も柔軟で他の技術との親和性が高い方法で、配列内に"
#~ "テキストを指定することで、データを取り出す対象を指定します。該当の表に対す"
#~ "る全てのヘッダ行にアクセスすると、該当列の残りのセルを取り出すことができる"
#~ "仕組みです。つまり、表を縦に分断して取り出す方式です。それに加えて、 "
#~ "TableExtract は指定した順序に並ぶように列を入れ替えます。この入れ替え処理"
#~ "を無効化したい場合は、オブジェクト生成時 _automap_ に 0 を指定してくださ"
#~ "い。この場合は column_map() メソッドに依存して、ヘッダの順序が決められま"
#~ "す。それに加えて、 TableExtract ではセルの長さに関する問題を解決することが"
#~ "できます。これにより、ブラウザ内で見えているとおりにデータを取り出すことが"
#~ "できます。この動作は _gridmap_ パラメータを 0 にすることで無効化できます。"
#~ "なお、ヘッダの適合処理が行なわれる前に HTML が解釈されることに注意してくだ"
#~ "さい。これは _keep_html_ パラメータを有効にすることで回避できます。\n"
#~ "\n"
#~ "_Depth_ と _Count_ は 2 つの表の関連性をより厳密に指定できる方法です。 "
#~ "_Depth_ は他の表内で対象の表がどれだけ深いものであるのかを指定します。文書"
#~ "内でのトップレベルの (一番外側の) 表は 0 になります。トップレベル内にある"
#~ "表は 1 、その中にある表は 2 のようになります。それぞれの深さはレイヤ (層) "
#~ "としても考えられるもので、同じ深さの表は同じレイヤにある表と言えます。この"
#~ "ようなレイヤの仕組みの中で、_Count_ は同じ深さの中での順序を指定します。こ"
#~ "れは 0 から始まる値で、 _Depth_ と _Count_ を指定することで、文書内の表を"
#~ "厳密に指定することができます。\n"
#~ "\n"
#~ "_Attributes_ でのマッチングは、 html の <table> タグにおける属性 (アトリ"
#~ "ビュート)を基準にして行なうものです。たとえば枠線の幅や背景色などです。\n"
#~ "\n"
#~ "_Headers_, _Depth_, _Count_, _Attributes_ の各指定は、組み合わせて指定する"
#~ "こともできます。たとえば _Depth_ だけを指定した場合は、その深さの表全てを"
#~ "対象とすることになります (ただしそれぞれの親となる表が文書内でどこにあるの"
#~ "かをきちんと把握しておく必要があります) 。また _Count_ だけを指定した場"
#~ "合、全ての深さにある表のうち、その位置 (順番) のものだけが返されます。 "
#~ "_Headers_ だけを指定した場合も同様で、指定した列ヘッダのものだけを取り出し"
#~ "ます。 _Headers_, _Depth_, _Count_, _Attributes_ を組み合わせて指定すると"
#~ "複数の組み合わせ条件となり、指定した条件全てに該当するものだけが返されま"
#~ "す。\n"
#~ "\n"
#~ "逆に _Headers_, _Depth_, _Count_, _Attributes_ のいずれも指定しない場合"
#~ "は、全ての表が該当することになります。\n"
#~ "\n"
#~ "表からテキストだけを取り出す場合、既定ではテキストは HTML::Entities でデ"
#~ "コードされます。これは _decode_ パラメータを 0 にすることで無効化できま"
#~ "す。"

#~ msgid "Build and scan parse-trees of HTML"
#~ msgstr "HTML ツリー構造の構築とスキャン"

#~ msgid ""
#~ "HTML-Tree is a suite of Perl modules for making parse trees out of HTML "
#~ "source. It consists of mainly two modules, whose documentation you should "
#~ "refer to: HTML::TreeBuilder and HTML::Element.\n"
#~ "\n"
#~ "HTML::TreeBuilder is the module that builds the parse trees. (It uses "
#~ "HTML::Parser to do the work of breaking the HTML up into tokens.)\n"
#~ "\n"
#~ "The tree that TreeBuilder builds for you is made up of objects of the "
#~ "class HTML::Element.\n"
#~ "\n"
#~ "If you find that you do not properly understand the documentation for "
#~ "HTML::TreeBuilder and HTML::Element, it may be because you are unfamiliar "
#~ "with tree-shaped data structures, or with object-oriented modules in "
#~ "general. Sean Burke has written some articles for _The Perl Journal_ "
#~ "('www.tpj.com') that seek to provide that background. The full text of "
#~ "those articles is contained in this distribution, as:\n"
#~ "\n"
#~ "* HTML::Tree::AboutObjects\n"
#~ "\n"
#~ "  \"User's View of Object-Oriented Modules\" from TPJ17.\n"
#~ "\n"
#~ "* HTML::Tree::AboutTrees\n"
#~ "\n"
#~ "  \"Trees\" from TPJ18\n"
#~ "\n"
#~ "* HTML::Tree::Scanning\n"
#~ "\n"
#~ "  \"Scanning HTML\" from TPJ19\n"
#~ "\n"
#~ "Readers already familiar with object-oriented modules and tree-shaped "
#~ "data structures should read just the last article. Readers without that "
#~ "background should read the first, then the second, and then the third.\n"
#~ "\n"
#~ "new     Redirects to HTML::TreeBuilder::new\n"
#~ "\n"
#~ "new_from_file     Redirects to HTML::TreeBuilder::new_from_file\n"
#~ "\n"
#~ "new_from_content     Redirects to HTML::TreeBuilder::new_from_content"
#~ msgstr ""
#~ "HTML-Tree は、 HTML ソースを解釈し、その解釈結果をツリー構造に仕立てること"
#~ "のできる Perl モジュール集です。このモジュール集は主に 2 つのモジュールか"
#~ "ら構成され、それぞれ HTML::TreeBuilder と HTML::Element という名称です。\n"
#~ "\n"
#~ "HTML::TreeBuilder は処理ツリーを構成するモジュールです (このモジュールは "
#~ "HTML::Parser を利用して、 HTML を部品ごとに分解しています) 。\n"
#~ "\n"
#~ "TreeBuilder におけるツリーは、複数の HTML::Element クラスのオブジェクトか"
#~ "ら構成されています。\n"
#~ "\n"
#~ "HTML::TreeBuilder や HTML::Element のドキュメンテーションを読んでもうまく"
#~ "理解できない場合、それはツリー型のデータ構造やオブジェクト指向の構造に慣れ"
#~ "ていないためであると思われます。 Sean Burke 氏は _The Perl Journal_ ('www."
#~ "tpj.com') 向けにいくつかの記事を作成していて、そこで詳しい解説を行なってい"
#~ "ます。この記事の全文は下記の配布物に含まれています:\n"
#~ "\n"
#~ "* HTML::Tree::AboutObjects\n"
#~ "\n"
#~ "  TPJ17: \"User's View of Object-Oriented Modules\" (オブジェクト指向のモ"
#~ "ジュールに関するユーザからの見た目)\n"
#~ "\n"
#~ "* HTML::Tree::AboutTrees\n"
#~ "\n"
#~ "  TPJ18: \"Trees\" (ツリー構造)\n"
#~ "\n"
#~ "* HTML::Tree::Scanning\n"
#~ "\n"
#~ "  TPJ19: \"Scanning HTML\" (HTML のスキャン)\n"
#~ "\n"
#~ "オブジェクト指向のモジュールやツリー構造のデータに慣れている場合は、最後の"
#~ "記事のみをお読みになるのがよいでしょう。慣れていない場合は最初の記事から順"
#~ "に読んでいくと良いでしょう。\n"
#~ "\n"
#~ "new     HTML::TreeBuilder::new へのリダイレクト\n"
#~ "\n"
#~ "new_from_file     HTML::TreeBuilder::new_from_file へのリダイレクト\n"
#~ "\n"
#~ "new_from_content     HTML::TreeBuilder::new_from_content へのリダイレクト"

#~ msgid ""
#~ "This class is for objects that represent a \"cookie jar\" -- that is, a "
#~ "database of all the HTTP cookies that a given LWP::UserAgent object knows "
#~ "about.\n"
#~ "\n"
#~ "Cookies are a general mechanism which server side connections can use to "
#~ "both store and retrieve information on the client side of the connection. "
#~ "For more information about cookies refer to <URL:http://curl.haxx.se/rfc/"
#~ "cookie_spec.html> and <URL:http://www.cookiecentral.com/>. This module "
#~ "also implements the new style cookies described in _RFC 2965_. The two "
#~ "variants of cookies are supposed to be able to coexist happily.\n"
#~ "\n"
#~ "Instances of the class _HTTP::Cookies_ are able to store a collection of "
#~ "Set-Cookie2: and Set-Cookie: headers and are able to use this information "
#~ "to initialize Cookie-headers in _HTTP::Request_ objects. The state of a "
#~ "_HTTP::Cookies_ object can be saved in and restored from files."
#~ msgstr ""
#~ "このクラスは \"cookie jar\" を表わすオブジェクト向けのものです。言い換えれ"
#~ "ば、すべての LWP::UserAgent オブジェクトが知っているすべての HTTP Cookie "
#~ "のデータベースです。\n"
#~ "\n"
#~ "Cookie とは接続とは独立した仕組みで、サーバ側の接続情報をクライアント側に"
#~ "保存したり、それを問い合わせたりするための仕組みです。 Cookie について、詳"
#~ "しくは<URL:http://curl.haxx.se/rfc/cookie_spec.html> と <URL:http://www."
#~ "cookiecentral.com/>をお読みください。また、このモジュールでは _RFC_2965_ "
#~ "で規定される新しいスタイルのCookie も実装しています。 Cookie に対する 2 つ"
#~ "の形式は問題なく共存可能です。\n"
#~ "\n"
#~ "また、 _HTTP::Cookies_ クラスのインスタンスは、 Set-Cookie2: や Set-"
#~ "Cookie: のヘッダを集めて保存することができるほか、この情報を利用して "
#~ "_HTTP::Request_ オブジェクト内の Cookie ヘッダを初期化することもできま"
#~ "す。 HTTP::Cookies_ オブジェクトの状態は、ファイルに保存したり、ファイルか"
#~ "ら復元したりすることもできます。"

#~ msgid "An 'HTTP::Message' object contains some headers and a content body."
#~ msgstr ""
#~ "'HTTP::Message' オブジェクトにはいくつかのヘッダとコンテンツが含まれていま"
#~ "す。"

#~ msgid ""
#~ "This is a simple standalone HTTP server. By default, it doesn't thread or "
#~ "fork. It does, however, act as a simple frontend which can be used to "
#~ "build a standalone web-based application or turn a CGI into one.\n"
#~ "\n"
#~ "It is possible to use the Net::Server manpage classes to create forking, "
#~ "pre-forking, and other types of more complicated servers; see the /"
#~ "net_server manpage.\n"
#~ "\n"
#~ "By default, the server traps a few signals:\n"
#~ "\n"
#~ "* HUP\n"
#~ "\n"
#~ "  When you 'kill -HUP' the server, it lets the current request finish "
#~ "being   processed, then uses the 'restart' method to re-exec itself. "
#~ "Please note   that in order to provide restart-on-SIGHUP, HTTP::Server::"
#~ "Simple sets a   SIGHUP handler during initialisation. If your request "
#~ "handling code forks   you need to make sure you reset this or unexpected "
#~ "things will happen if   somebody sends a HUP to all running processes "
#~ "spawned by your app (e.g.   by \"kill -HUP <script>\")\n"
#~ "\n"
#~ "* PIPE\n"
#~ "\n"
#~ "  If the server detects a broken pipe while writing output to the "
#~ "client,   it ignores the signal. Otherwise, a client closing the "
#~ "connection early   could kill the server."
#~ msgstr ""
#~ "これは単独で動作するシンプルな HTTP サーバです。既定ではスレッドを使用せ"
#~ "ず、かつ fork も行ないません。しかしながら、単独の Web ベースのアプリケー"
#~ "ションを構築したり、 CGI を利用したりするのに便利なフロントエンドです。\n"
#~ "\n"
#~ "fork や pre-fork のほか、よく複雑なサーバタイプを構築したい場合は、 Net::"
#~ "Server クラスを利用することもできます。詳しくは /net_server をお読みくださ"
#~ "い。\n"
#~ "\n"
#~ "既定では、サーバは下記のシグナルをトラップします:\n"
#~ "\n"
#~ "* HUP\n"
#~ "\n"
#~ "  サーバを 'kill -HUP' すると、現在処理中のリクエストを処理してから、再起"
#~ "動のために 'restart' メソッドが呼び出されます。ただし、 SIGHUP 時に再起動"
#~ "するために、 HTTP::Server::Simple では起動時にのみ SIGHUP ハンドラを設定し"
#~ "ています。お使いのリクエスト処理コードが fork を利用している場合は、これを"
#~ "リセットする必要があることに注意してください。リセットを行なわないと、誰か"
#~ "がスクリプトに対して SIGHUP を送った場合 (例: \"kill -HUP <script>\") に、"
#~ "予期しない結果が発生します。\n"
#~ "\n"
#~ "* PIPE\n"
#~ "\n"
#~ "  サーバからクライアントに対する出力で broken pipe を検出しても、シグナル"
#~ "は無視されます。無視しておかないと、接続を閉じるだけでサーバが終了してしま"
#~ "います。"

#~ msgid ""
#~ "This module allows you to calculate digests while reading or writing file "
#~ "handles. This avoids the case you need to reread the same content to "
#~ "compute the digests after written a file."
#~ msgstr ""
#~ "このモジュールは、ファイルハンドルに対する読み込みや書き込みの際にダイジェ"
#~ "スト値を計算することができるものです。このモジュールを利用することで、ファ"
#~ "イルへの書き込み後に再度読み出しを行なってダイジェスト値を計算したりする手"
#~ "間を省くことができます。"

#~ msgid ""
#~ "IO::HTML provides an easy way to open a file containing HTML while "
#~ "automatically determining its encoding. It uses the HTML5 encoding "
#~ "sniffing algorithm specified in section 8.2.2.1 of the draft standard.\n"
#~ "\n"
#~ "The algorithm as implemented here is:\n"
#~ "\n"
#~ "* 1.\n"
#~ "\n"
#~ "  If the file begins with a byte order mark indicating UTF-16LE, "
#~ "UTF-16BE,   or UTF-8, then that is the encoding.\n"
#~ "\n"
#~ "* 2.\n"
#~ "\n"
#~ "  If the first 1024 bytes of the file contain a '<meta>' tag that "
#~ "indicates   the charset, and Encode recognizes the specified charset "
#~ "name, then that   is the encoding. (This portion of the algorithm is "
#~ "implemented by   'find_charset_in'.)\n"
#~ "\n"
#~ "  The '<meta>' tag can be in one of two formats:\n"
#~ "\n"
#~ "    <meta charset=\"...\">     <meta http-equiv=\"Content-Type\" content="
#~ "\"...charset=...\">\n"
#~ "\n"
#~ "  The search is case-insensitive, and the order of attributes within "
#~ "the   tag is irrelevant. Any additional attributes of the tag are "
#~ "ignored. The   first matching tag with a recognized encoding ends the "
#~ "search.\n"
#~ "\n"
#~ "* 3.\n"
#~ "\n"
#~ "  If the first 1024 bytes of the file are valid UTF-8 (with at least 1   "
#~ "non-ASCII character), then the encoding is UTF-8.\n"
#~ "\n"
#~ "* 4.\n"
#~ "\n"
#~ "  If all else fails, use the default character encoding. The HTML5 "
#~ "standard   suggests the default encoding should be locale dependent, but "
#~ "currently   it is always 'cp1252' unless you set '$IO::HTML::"
#~ "default_encoding' to a   different value. Note: 'sniff_encoding' does not "
#~ "apply this step; only   'html_file' does that."
#~ msgstr ""
#~ "IO::HTML は HTML を含むファイルを開くための簡単な方法で、エンコード方式を"
#~ "自動的に判別することができます。 HTML5 のドラフト標準内のセクション "
#~ "8.2.2.1 で規定されたエンコード検出アルゴリズムを利用しています。\n"
#~ "\n"
#~ "アルゴリズムは下記のように実装されています:\n"
#~ "\n"
#~ "* 1.\n"
#~ "\n"
#~ "  ファイルの冒頭が UTF-16LE, UTF-16BE, UTF-8 の各バイトオーダーマークで"
#~ "あった場合は、そのエンコード方式を採用する。\n"
#~ "\n"
#~ "* 2.\n"
#~ "\n"
#~ "  ファイルの冒頭 1024 バイト内に '<meta>' タグが含まれていて、そこにキャラ"
#~ "クタセットと対応するエンコード方式が書かれている場合、そのエンコード方式を"
#~ "採用する (アルゴリズムのうち、この部分は 'find_charset_in' で実装していま"
#~ "す) 。\n"
#~ "\n"
#~ "  '<meta>' タグは下記の 2 つのうちのいずれかの形式であるものとする:\n"
#~ "\n"
#~ "    <meta charset=\"...\">     <meta http-equiv=\"Content-Type\" content="
#~ "\"...charset=...\">\n"
#~ "\n"
#~ "  検索時、大文字と小文字は区別しないほか、タグ内での属性出現順序は気にしな"
#~ "いものとする。また、タグに付けられたその他の属性は無視するものとする。エン"
#~ "コードを認識可能な最初のタグが見つかった場合は、その時点で検索を終了す"
#~ "る。\n"
#~ "\n"
#~ "* 3.\n"
#~ "\n"
#~ "  ファイルの冒頭 1024 バイトが UTF-8 として正当なものである (少なくとも 1 "
#~ "文字以上の非 ASCII 文字がある) 場合、エンコード方式を UTF-8 とする。\n"
#~ "\n"
#~ "* 4.\n"
#~ "\n"
#~ "  これまでの処理のすべてが失敗した場合は、既定の文字エンコード方式を利用す"
#~ "る。HTML5 標準では既定のエンコード方式はロケール依存であるが、 '$IO::"
#~ "HTML::default_encoding' で異なる値を指定していない限り、エンコード方式は常"
#~ "に 'cp1252' であるものとみなされる。注意: 'sniff_encoding' は上記までの手"
#~ "順を実施せず、'html_file' のみが上記の手順を実施することに注意すること。"

#~ msgid "Family-neutral IP socket supporting both IPv4 and IPv6"
#~ msgstr "IPv4, IPv6 の両方に対応したアドレスファミリに中立な IP ソケット"

#~ msgid ""
#~ "This module provides a protocol-independent way to use IPv4 and IPv6 "
#~ "sockets, intended as a replacement for the IO::Socket::INET manpage. Most "
#~ "constructor arguments and methods are provided in a backward-compatible "
#~ "way. For a list of known differences, see the 'IO::Socket::INET' "
#~ "INCOMPATIBILITES section below.\n"
#~ "\n"
#~ "It uses the 'getaddrinfo(3)' function to convert hostnames and service "
#~ "names or port numbers into sets of possible addresses to connect to or "
#~ "listen on. This allows it to work for IPv6 where the system supports it, "
#~ "while still falling back to IPv4-only on systems which don't."
#~ msgstr ""
#~ "このモジュールは、 IPv4 と IPv6 のソケットをプロトコルに依存しない方法で扱"
#~ "うことのできるモジュールです。 IO::Socket::INET に対する代替品として動作し"
#~ "ます。多くのコンストラクタのパラメータやメソッドは、後方互換性を維持するた"
#~ "めに提供されています。既知の違いについての一覧は、 'IO::Socket::INET' "
#~ "INCOMPATIBILITES セクションをご覧ください。\n"
#~ "\n"
#~ "また、ホスト名やサービス名、ポート番号などをアドレスに変換するにあたって"
#~ "は、 'getaddrinfo(3)' を使用しています。また、システム側で対応していれば "
#~ "IPv6 にも対応していますが、対応していなくても IPv4 のみにフォールバックす"
#~ "ることもできます。"

#~ msgid "Nearly transparent SSL encapsulation for IO::Socket::INET."
#~ msgstr "IO::Socket::INET に対するほぼ透過的な SSL カプセル化です。"

#~ msgid ""
#~ "This module provides an interface to SSL sockets, similar to other IO::"
#~ "Socket modules. Because of that, it can be used to make existing programs "
#~ "using IO::Socket::INET or similar modules to provide SSL encryption "
#~ "without much effort. IO::Socket::SSL supports all the extra features that "
#~ "one needs to write a full-featured SSL client or server application: "
#~ "multiple SSL contexts, cipher selection, certificate verification, Server "
#~ "Name Indication (SNI), Next Protocol Negotiation (NPN), SSL version "
#~ "selection and more.\n"
#~ "\n"
#~ "If you have never used SSL before, you should read the appendix labelled "
#~ "'Using SSL' before attempting to use this module.\n"
#~ "\n"
#~ "If you want to use SSL with non-blocking sockets and/or within an event "
#~ "loop please read very carefully the sections about non-blocking I/O and "
#~ "polling of SSL sockets.\n"
#~ "\n"
#~ "If you are trying to use it with threads see the BUGS section."
#~ msgstr ""
#~ "このモジュールは他の IO::Socket に似たモジュールで、 SSL ソケットに対する"
#~ "インターフェイスを提供します。このような構造であるため、 IO::Socket::INET "
#~ "や類似モジュールを使用する既存のプログラムをほとんどそのまま利用して、 "
#~ "SSL の暗号化を行なうことができるようになっています。 IO::Socket::SSL で"
#~ "は、完全機能の SSL クライアントやサーバアプリケーションに必要な、すべての"
#~ "追加機能を提供しています。たとえば複数の SSL コンテキストへの対応や暗号方"
#~ "式の選択、証明書の検証やサーバ名認識 (SNI) 、次世代プロトコルネゴシエー"
#~ "ション (NPN) や SSL バージョン選択などを行なうことができます。\n"
#~ "\n"
#~ "SSL を今まで使ったことがない場合は、このモジュールを使用する前に付録 "
#~ "'Using SSL' をお読みください。\n"
#~ "\n"
#~ "SSL で非ブロック型のソケットを使用したい場合、もしくはイベントループを利用"
#~ "したい場合は、 SSL ソケットの non-blocking I/O や polling に関する章を良く"
#~ "お読みください。\n"
#~ "\n"
#~ "また、スレッドと共に使用する場合は、 BUGS セクションをお読みください。"

#~ msgid ""
#~ "The IRI module provides an object representation for Internationalized "
#~ "Resource Identifiers (IRIs) as defined by http://www.ietf.org/rfc/rfc3987."
#~ "txt and supports their parsing, serializing, and base resolution."
#~ msgstr ""
#~ "IRI モジュールは、 http://www.ietf.org/rfc/rfc3987.txt で規定されている国"
#~ "際化資源識別子 (IRI) 向けのオブジェクト表記で、  IRI の処理やシリアライ"
#~ "ズ、および基本的な解決機能などを提供しています。"

#~ msgid ""
#~ "This module provide functions to extract various kinds of meta "
#~ "information from image files."
#~ msgstr ""
#~ "このモジュールは、画像ファイルから様々な種類のメタ情報を抽出する関数を提供"
#~ "します。"

#~ msgid ""
#~ " *************************** CAUTION "
#~ "**************************************  "
#~ "*                                                                        "
#~ "*  * INCOMPATIBLE CHANGE (JSON::XS version "
#~ "2.90)                            *  "
#~ "*                                                                        "
#~ "*  * JSON.pm had patched JSON::XS::Boolean and JSON::PP::Boolean "
#~ "internally *  * on loading time for making these modules inherit JSON::"
#~ "Boolean.        *  * But since JSON::XS v3.0 it use Types::Serialiser as "
#~ "boolean class.     *  * Then now JSON.pm breaks boolean classe overload "
#~ "features and           *  * -support_by_pp if JSON::XS v3.0 or later is "
#~ "installed.                 *  "
#~ "*                                                                        "
#~ "*  * JSON::true and JSON::false returned JSON::Boolean "
#~ "objects.             *  * For workaround, they return JSON::PP::Boolean "
#~ "objects in this version. *  "
#~ "*                                                                        "
#~ "*  *     isa_ok(JSON::true, 'JSON::PP::"
#~ "Boolean');                           *  "
#~ "*                                                                        "
#~ "*  * And it discards a "
#~ "feature:                                             *  "
#~ "*                                                                        "
#~ "*  *     ok(JSON::true eq "
#~ "'true');                                          *  "
#~ "*                                                                        "
#~ "*  * In other word, JSON::PP::Boolean overload numeric "
#~ "only.                *  "
#~ "*                                                                        "
#~ "*  *     ok( JSON::true == "
#~ "1 );                                             *  "
#~ "*                                                                        "
#~ "*  "
#~ "**************************************************************************\n"
#~ "\n"
#~ " ************************** CAUTION ********************************  * "
#~ "This is 'JSON module version 2' and there are many differences  *  * to "
#~ "version 1.xx                                                 *  * Please "
#~ "check your applications using old version.              *  *   See to "
#~ "'INCOMPATIBLE CHANGES TO OLD VERSION'                  *  "
#~ "*******************************************************************\n"
#~ "\n"
#~ "JSON (JavaScript Object Notation) is a simple data format. See to the "
#~ "http://www.json.org/ manpage and 'RFC4627'(the http://www.ietf.org/rfc/"
#~ "rfc4627.txt manpage).\n"
#~ "\n"
#~ "This module converts Perl data structures to JSON and vice versa using "
#~ "either the JSON::XS manpage or the JSON::PP manpage.\n"
#~ "\n"
#~ "JSON::XS is the fastest and most proper JSON module on CPAN which must be "
#~ "compiled and installed in your environment. JSON::PP is a pure-Perl "
#~ "module which is bundled in this distribution and has a strong "
#~ "compatibility to JSON::XS.\n"
#~ "\n"
#~ "This module try to use JSON::XS by default and fail to it, use JSON::PP "
#~ "instead. So its features completely depend on JSON::XS or JSON::PP.\n"
#~ "\n"
#~ "See to the BACKEND MODULE DECISION manpage.\n"
#~ "\n"
#~ "To distinguish the module name 'JSON' and the format type JSON, the "
#~ "former is quoted by C<> (its results vary with your using media), and the "
#~ "latter is left just as it is.\n"
#~ "\n"
#~ "Module name : 'JSON'\n"
#~ "\n"
#~ "Format type : JSON"
#~ msgstr ""
#~ " **************************** 注 意 "
#~ "***************************************  "
#~ "*                                                                        "
#~ "*  * 互換性の維持されない変更 (JSON::XS バージョン "
#~ "2.90)                    *  "
#~ "*                                                                        "
#~ "*  * JSON.pm では、その読み込み時に修正が適用された版の JSON::XS::"
#~ "Boolean   *  * と JSON::PP::Boolean を使用していて、これらは JSON::"
#~ "Boolean を継承する *  * ものになっています。しかし、 JSON::XS v3.0 から"
#~ "は、 boolean クラスに   *  * Types::Serialiser を使用しています。そのた"
#~ "め、 JSON::XS v3.0 または    *  * それ以降のバージョンをインストールした場"
#~ "合、 JSON.pm は boolean クラス *  * のオーバーロード機能と、 "
#~ "support_by_pp の機能を破壊します。            *  "
#~ "*                                                                        "
#~ "*  * JSON::Boolean は JSON::true と JSON::false のいずれかを返します"
#~ "が、    *  * 回避するには、このバージョンの JSON::PP::Boolean オブジェクト"
#~ "を返却    *  * してくださ"
#~ "い。                                                         *  "
#~ "*                                                                        "
#~ "*  *     isa_ok(JSON::true, 'JSON::PP::"
#~ "Boolean');                           *  "
#~ "*                                                                        "
#~ "*  * また、下記のようにして機能を無効化してくださ"
#~ "い:                        *  "
#~ "*                                                                        "
#~ "*  *     ok(JSON::true eq "
#~ "'true');                                          *  "
#~ "*                                                                        "
#~ "*  * JSON::PP::Boolean を数値でオーバーロードすることもできま"
#~ "す:            *  "
#~ "*                                                                        "
#~ "*  *     ok( JSON::true == "
#~ "1 );                                             *  "
#~ "*                                                                        "
#~ "*  "
#~ "**************************************************************************\n"
#~ "\n"
#~ " *************************** 注意 *********************************  * こ"
#~ "れは 'JSON モジュールバージョン 2' で、バージョン 1 と比べて *  * 多数の違"
#~ "いが存在します。                                       *  "
#~ "*                                                                *  * アプ"
#~ "リケーションが古いバージョンを利用している場合は、         *  * "
#~ "'INCOMPATIBLE CHANGES TO OLD VERSION' (互換性の維持されない    *  * 変更) "
#~ "をお読みください。                                       *  "
#~ "******************************************************************\n"
#~ "\n"
#~ "JSON (JavaScript Object Notation) はシンプルなデータフォーマットです。詳し"
#~ "くは http://www.json.org/ にあるマニュアルページ、もしくは "
#~ "'RFC4627' (http://www.ietf.org/rfc/rfc4627.txt) をお読みください。\n"
#~ "\n"
#~ "このモジュールは、 JSON::XS または JSON:PP のいずれかを利用して、 Perl の"
#~ "データ構造を JSON に変換したり、その逆の変換を行なったりします。\n"
#~ "\n"
#~ "JSON::XS は CPAN モジュールの中で最も高速で適切な JSON モジュールで、お使"
#~ "いの環境にコンパイルしてインストールしておくべきものです。 JSON:PP は純粋"
#~ "な Perl モジュールで、本ディストリビューションにバンドルされ、 JSON::XS と"
#~ "の強い互換性を維持しています。\n"
#~ "\n"
#~ "このモジュールは、既定では JSON::XS を使用しますが、これがうまく動作しない"
#~ "場合は JSON:PP を利用します。そのため、機能面は JSON::XS または JSON:PP に"
#~ "完全に依存した形になっています。\n"
#~ "\n"
#~ "詳しくはマニュアルページ内 BACKEND MODULE DECISION の項をお読みくださ"
#~ "い。\n"
#~ "\n"
#~ "モジュール名の 'JSON' とフォーマット形式の JSON を区別するため、前者につい"
#~ "ては C<> で括って表現し (お使いのメディアによっては表示形態が異なりま"
#~ "す) 、後者はそのまま表現しています。\n"
#~ "\n"
#~ "モジュール名 : 'JSON'\n"
#~ "\n"
#~ "フォーマットの種類 : JSON"

#~ msgid ""
#~ "This module first checks to see if either the Cpanel::JSON::XS manpage or "
#~ "the JSON::XS manpage is already loaded, in which case it uses that "
#~ "module. Otherwise it tries to load the Cpanel::JSON::XS manpage, then the "
#~ "JSON::XS manpage, then the JSON::PP manpage in order, and either uses the "
#~ "first module it finds or throws an error.\n"
#~ "\n"
#~ "It then exports the 'encode_json' and 'decode_json' functions from the "
#~ "loaded module, along with a 'JSON' constant that returns the class name "
#~ "for calling 'new' on.\n"
#~ "\n"
#~ "If you're writing fresh code rather than replacing JSON usage, you might "
#~ "want to pass options as constructor args rather than calling mutators, so "
#~ "we provide our own 'new' method that supports that."
#~ msgstr ""
#~ "このモジュールは、まず Cpanel::JSON::XS または JSON::XS がすでに読み込まれ"
#~ "ているかどうかをチェックし、いずれかのモジュールが読み込まれていればそれを"
#~ "使用します。どのモジュールも読み込まれていない場合は、 Cpanel::JSON::XS を"
#~ "読み込もうとしたあと、 JSON::XS および JSON::PP を読み込もうとし、見つかっ"
#~ "た最初のモジュールを使用するか、エラーを返します。\n"
#~ "\n"
#~ "モジュールが読み込まれると、そのモジュールから 'encode_json' と "
#~ "'decode_json' の関数、および 'JSON' 定数がそれぞれ公開されるようになりま"
#~ "す。定数は 'new' を呼び出す際のクラス名を含んでいます。\n"
#~ "\n"
#~ "既存の JSON コードではなく新規に作成しようとしている場合は、ミューテータで"
#~ "はなくコンストラクタのパラメータとしてパラメータを指定してください。これに"
#~ "対応するための独自の 'new' メソッドが提供されています。"

#~ msgid ""
#~ "*[_Note:_ This module is strictly in maintenance mode now. If you're "
#~ "mostly interested in singular/plural and a/an inflections, take a look at "
#~ "the newer Lingua::EN::Inflexion module, which offers a cleaner and more "
#~ "convenient interface, has many more features (including plural->singular "
#~ "inflexions), and is also much better tested.]*\n"
#~ "\n"
#~ "The exportable subroutines of Lingua::EN::Inflect provide plural "
#~ "inflections, \"a\"/\"an\" selection for English words, and manipulation "
#~ "of numbers as words\n"
#~ "\n"
#~ "Plural forms of all nouns, most verbs, and some adjectives are provided. "
#~ "Where appropriate, \"classical\" variants (for example: \"brother\" -> "
#~ "\"brethren\", \"dogma\" -> \"dogmata\", etc.) are also provided.\n"
#~ "\n"
#~ "Pronunciation-based \"a\"/\"an\" selection is provided for all English "
#~ "words, and most initialisms.\n"
#~ "\n"
#~ "It is also possible to inflect numerals (1,2,3) to ordinals (1st, 2nd, "
#~ "3rd) and to English words (\"one\", \"two\", \"three).\n"
#~ "\n"
#~ "In generating these inflections, Lingua::EN::Inflect follows the Oxford "
#~ "English Dictionary and the guidelines in Fowler's Modern English Usage, "
#~ "preferring the former where the two disagree.\n"
#~ "\n"
#~ "The module is built around standard British spelling, but is designed to "
#~ "cope with common American variants as well. Slang, jargon, and other "
#~ "English dialects are _not_ explicitly catered for.\n"
#~ "\n"
#~ "Where two or more inflected forms exist for a single word (typically a "
#~ "\"classical\" form and a \"modern\" form), Lingua::EN::Inflect prefers "
#~ "the more common form (typically the \"modern\" one), unless \"classical\" "
#~ "processing has been specified (see the \"MODERN VS CLASSICAL INFLECTIONS"
#~ "\" manpage)."
#~ msgstr ""
#~ "*[_注意:_ このモジュールは厳密にはメンテナンスモード下にあります。単数形と"
#~ "複数形の変換や a/an の反映について興味をお持ちの場合は、より新しい "
#~ "Lingua::EN::Inflexion モジュールをご覧ください。こちらのほうがよりクリーン"
#~ "で、かつ便利なインターフェイスを提供しているほか、多数の追加機能も用意され"
#~ "ています (単数形から複数形への変態など) し、テストもよりよく行なわれていま"
#~ "す。]*\n"
#~ "\n"
#~ "Lingua::EN::Inflect で公開されているサブルーチンでは、英語における複数形の"
#~ "変換や \"a\"/\"an\" の選択、および数値を言葉に変換する機能などが用意されて"
#~ "います。\n"
#~ "\n"
#~ "すべての名詞やほとんどの動詞、そしていくつかの形容詞に対する複数形が提供さ"
#~ "れています。また、存在すれば \"古い\" 形式にも対応しています (例: "
#~ "\"brother\" -> \"brethren\", \"dogma\" -> \"dogmata\" など) 。\n"
#~ "\n"
#~ "このほか、英単語に対する発音ベースの \"a\"/\"an\" の選択機能も当初から用意"
#~ "されています。\n"
#~ "\n"
#~ "また、数値 (1,2,3) を順序表記 (1st, 2nd, 3rd) や英単語 (\"one\", \"two\", "
#~ "\"three\") に変換する機能もあります。\n"
#~ "\n"
#~ "これらの変換機能の作成にあたっては、 Lingua::EN::Inflect は Oxford 社の英"
#~ "語辞書と Fowler's Modern English Usage 内のガイドラインに従っています。双"
#~ "方で異なる見解になってるものについては、前者のものを採用しています。\n"
#~ "\n"
#~ "このモジュールは標準的なイギリス英語のスペルを利用していますが、アメリカ英"
#~ "語への対応も行なわれています。ただし、スラングやジャーゴンなど、その他の方"
#~ "言については基本的に対応していません。\n"
#~ "\n"
#~ "なお、 1 つの単語に対して 2 つもしくはそれ以上の変化形が存在するような場"
#~ "合 (一般的には \"古い形式\" と \"新しい形式\" など) は、 \"classical\" (古"
#~ "い形式) を明示的に指定した場合を除いて、 Lingua::EN::Inflect はより一般的"
#~ "な形態 (通常は \"新しい形式\") を採用しています (詳しくは \"MODERN VS "
#~ "CLASSICAL INFLECTIONS\" をお読みください)。"

#~ msgid "Module for splitting text into sentences"
#~ msgstr "テキストを文章に分解するためのモジュール"

#~ msgid ""
#~ "The 'Lingua::EN::Sentence' module contains the function get_sentences, "
#~ "which splits text into its constituent sentences, based on a regular "
#~ "expression and a list of abbreviations (built in and given).\n"
#~ "\n"
#~ "Certain well know exceptions, such as abreviations, may cause incorrect "
#~ "segmentations. But some of them are already integrated into this code and "
#~ "are being taken care of. Still, if you see that there are words causing "
#~ "the get_sentences() to fail, you can add those to the module, so it "
#~ "notices them."
#~ msgstr ""
#~ "'Lingua::EN::Sentence' モジュールでは、 get_sentences と呼ばれる関数が提供"
#~ "されています。この関数は、正規表現と略称一覧 (内蔵のものを使用することがで"
#~ "きるほか、指定することもできます) を利用して、テキストを文章ごとに分割する"
#~ "ことができます。\n"
#~ "\n"
#~ "このようなモジュールは、略称などがあるとうまく動作せず、正しくない分割など"
#~ "が行なわれてしまうことが知られていますが、これらのうちのいくつかは既にコー"
#~ "ド内で対応済みで、配慮されるようになっています。ただし、場合によっては "
#~ "get_sentences()で失敗することがありますので、モジュールに対して追加するこ"
#~ "とで対応できるようになっています。"

#~ msgid "Combines List::Util and List::MoreUtils in one bite-sized package"
#~ msgstr ""
#~ "List::Util と List::MoreUtils を一齧りのサイズに組み合わせたパッケージ"

#~ msgid ""
#~ "Are you sick of trying to remember whether a particular helper is defined "
#~ "in 'List::Util' or 'List::MoreUtils'? I sure am. Now you don't have to "
#~ "remember. This module will export all of the functions that either of "
#~ "those two modules defines.\n"
#~ "\n"
#~ "Note that all function documentation has been shamelessly copied from the "
#~ "List::Util manpage and <List::MoreUtils>."
#~ msgstr ""
#~ "特定のヘルパーについて、 'List::Util' や 'List::MoreUtils' で定義されてい"
#~ "るかどうかを覚えるのが面倒だと感じたことはありませんか？私は面倒だと感じて"
#~ "います。このモジュールを使用すれば、もう覚える必要はありません。このモ"
#~ "ジュールは、両方のモジュールが定義している関数をすべて公開しています。\n"
#~ "\n"
#~ "なお、 List::Util と List::MoreUtils のドキュメンテーションについてもすべ"
#~ "ての関数をそのままつなげています。"

#~ msgid ""
#~ "Log::Dispatchouli is a thin layer above the Log::Dispatch manpage and "
#~ "meant to make it dead simple to add logging to a program without having "
#~ "to think much about categories, facilities, levels, or things like that. "
#~ "It is meant to make logging just configurable enough that you can find "
#~ "the logs you want and just easy enough that you will actually log "
#~ "things.\n"
#~ "\n"
#~ "Log::Dispatchouli can log to syslog (if you specify a facility), standard "
#~ "error or standard output, to a file, or to an array in memory. That last "
#~ "one is mostly useful for testing.\n"
#~ "\n"
#~ "In addition to providing as simple a way to get a handle for logging "
#~ "operations, Log::Dispatchouli uses the String::Flogger manpage to process "
#~ "the things to be logged, meaning you can easily log data structures. "
#~ "Basically: strings are logged as is, arrayrefs are taken as (sprintf "
#~ "format, args), and subroutines are called only if needed. For more "
#~ "information read the the String::Flogger manpage docs."
#~ msgstr ""
#~ "Log::Dispatchouli は Log::Dispatch に対する薄いレイヤで、プログラム内でカ"
#~ "テゴリやファシリティ、レベルなどの考慮を行なうことなく、ログの機能を簡単に"
#~ "追加できるようにしたモジュールです。必要なログをすぐに見つけることができる"
#~ "だけの十分な設定機能が用意されているほか、実際にログ出力させたい内容を単に"
#~ "与えるだけの簡単な構造になっています。\n"
#~ "\n"
#~ "Log::Dispatchouli は syslog (ファシリティを指定した場合) のほか、標準エ"
#~ "ラー出力や標準出力、ファイルやメモリ内の配列にそれぞれ出力することができま"
#~ "す。メモリ内の配列は、特にテスト用に便利な仕組みです。\n"
#~ "\n"
#~ "ログ操作を扱うためのシンプルな方法以外には、 Log::Dispatchouli では "
#~ "String::Flogger を利用してログ対象のオブジェクトを処理する機能も用意されて"
#~ "います。これにより、データ構造のログ出力を簡単に行なうことができるようにな"
#~ "ります。基本的には、文字列はそのまま、配列参照はその内容を (sprintf "
#~ "format, args) 、サブルーチンは必要な時にのみ呼び出されるしくみになっていま"
#~ "す。詳しくは String::Flogger をお読みください。"

#~ msgid ""
#~ "Log::Log4perl lets you remote-control and fine-tune the logging behaviour "
#~ "of your system from the outside. It implements the widely popular (Java-"
#~ "based) Log4j logging package in pure Perl.\n"
#~ "\n"
#~ "*For a detailed tutorial on Log::Log4perl usage, please read*\n"
#~ "\n"
#~ "    http://www.perl.com/pub/a/2002/09/11/log4perl.html\n"
#~ "\n"
#~ "Logging beats a debugger if you want to know what's going on in your code "
#~ "during runtime. However, traditional logging packages are too static and "
#~ "generate a flood of log messages in your log files that won't help you.\n"
#~ "\n"
#~ "'Log::Log4perl' is different. It allows you to control the number of "
#~ "logging messages generated at three different levels:\n"
#~ "\n"
#~ "* *\n"
#~ "\n"
#~ "  At a central location in your system (either in a configuration file "
#~ "or   in the startup code) you specify _which components_ (classes, "
#~ "functions)   of your system should generate logs.\n"
#~ "\n"
#~ "* *\n"
#~ "\n"
#~ "  You specify how detailed the logging of these components should be by   "
#~ "specifying logging _levels_.\n"
#~ "\n"
#~ "* *\n"
#~ "\n"
#~ "  You also specify which so-called _appenders_ you want to feed your "
#~ "log   messages to (\"Print it to the screen and also append it to /tmp/my."
#~ "log\")   and which format (\"Write the date first, then the file name and "
#~ "line   number, and then the log message\") they should be in.\n"
#~ "\n"
#~ "This is a very powerful and flexible mechanism. You can turn on and off "
#~ "your logs at any time, specify the level of detail and make that "
#~ "dependent on the subsystem that's currently executed.\n"
#~ "\n"
#~ "Let me give you an example: You might find out that your system has a "
#~ "problem in the 'MySystem::Helpers::ScanDir' component. Turning on "
#~ "detailed debugging logs all over the system would generate a flood of "
#~ "useless log messages and bog your system down beyond recognition. With "
#~ "'Log::Log4perl', however, you can tell the system: \"Continue to log only "
#~ "severe errors to the log file. Open a second log file, turn on full debug "
#~ "logs in the 'MySystem::Helpers::ScanDir' component and dump all messages "
#~ "originating from there into the new log file\". And all this is possible "
#~ "by just changing the parameters in a configuration file, which your "
#~ "system can re-read even while it's running!"
#~ msgstr ""
#~ "Log::Log4perl は、お使いのシステムにおけるログ動作を、ソースコードの外側か"
#~ "らリモート制御／調整することのできるモジュールです。よく知られた (Java "
#~ "ベースの)log4j ログパッケージを、純粋な Perl のみで作成したものといえま"
#~ "す。\n"
#~ "\n"
#~ "*Log::Log4perl の使用方法について、詳しくは下記をお読みください*\n"
#~ "\n"
#~ "    http://www.perl.com/pub/a/2002/09/11/log4perl.html\n"
#~ "\n"
#~ "ログ機能はデバッガにも匹敵する機能で、お使いのコードを実行する際、何が起"
#~ "こっているのかを知ることができる機能です。従来のログパッケージは、あまりに"
#~ "も柔軟性がなく、ログファイル内に大量のメッセージを出力してしまい、あまり助"
#~ "けにはなりませんでした。\n"
#~ "\n"
#~ "'Log::Log4perl' はこのようなものではありません。 3 種類のレベルを用意し、"
#~ "生成されるログメッセージの量を制御することができます。\n"
#~ "\n"
#~ "* *\n"
#~ "\n"
#~ "お使いのシステムにおける中枢となる場所 (設定ファイルまたは起動時のコード) "
#~ "で、どのコンポーネント (クラス、関数) からのログを記録するのかを設定するこ"
#~ "とができます。\n"
#~ "\n"
#~ "* *\n"
#~ "\n"
#~ "また、ログレベルを設定することで、これらのコンポーネントから、どれだけ詳細"
#~ "なログを出力するのかを指定することもできます。\n"
#~ "\n"
#~ "* *\n"
#~ "\n"
#~ "これ以外にも、アペンダと呼ばれる仕組みを指定することもできます。これはログ"
#~ "メッセージの出力先を指定する (\"画面に表示するのか、もしくは /tmp/my.log "
#~ "のようなファイルに追記するのかなど\") ほか、書式 (\"日付を先に書いて、ファ"
#~ "イル名と行番号、メッセージなどが続く\") を指定することもできます。\n"
#~ "\n"
#~ "これはとてもパワフルで柔軟な仕組みです。任意の時点でログ機能を有効／無効に"
#~ "切り替えることができるほか、ログの詳細さを指定したり、現在実行中のサブサブ"
#~ "システムを設定することもできます。\n"
#~ "\n"
#~ "たとえば下記のような例を考えてみます: お使いのシステムで、 'MySystem::"
#~ "Helpers::ScanDir' というコンポーネントに問題があるものの、詳細なログ機能を"
#~ "有効にしてしまうと、不要なログが大量に生成されてしまい、その問題について調"
#~ "べる前にシステムをダウンさせてしまうような状況です。 'Log::Log4perl' を使"
#~ "用すれば、システムに対して \"通常のログファイルには重大なエラーのみを記録"
#~ "するものとする。 2 つめのログファイルには、 'MySystem::Helpers::ScanDir'コ"
#~ "ンポーネントに関する完全なデバッグログを出力し、これを発生元とするメッセー"
#~ "ジはすべて新しいログファイルに書き込む\" のような指定を行なうことができま"
#~ "す。これらの設定はすべて設定ファイルから行なうことができるほか、設定ファイ"
#~ "ルは実行中でも読み込み直すように指示することができます。"

#~ msgid ""
#~ "The \"mro\" namespace provides several utilities for dealing with method "
#~ "resolution order and method caching in general in Perl 5.9.5 and higher.\n"
#~ "\n"
#~ "This module provides those interfaces for earlier versions of Perl (back "
#~ "to 5.6.0 anyways).\n"
#~ "\n"
#~ "It is a harmless no-op to use this module on 5.9.5+. That is to say, code "
#~ "which properly uses the MRO::Compat manpage will work unmodified on both "
#~ "older Perls and 5.9.5+.\n"
#~ "\n"
#~ "If you're writing a piece of software that would like to use the parts of "
#~ "5.9.5+'s mro:: interfaces that are supported here, and you want "
#~ "compatibility with older Perls, this is the module for you.\n"
#~ "\n"
#~ "Some parts of this code will work better and/or faster with the Class::"
#~ "C3::XS manpage installed (which is an optional prereq of the Class::C3 "
#~ "manpage, which is in turn a prereq of this package), but it's not a "
#~ "requirement.\n"
#~ "\n"
#~ "This module never exports any functions. All calls must be fully "
#~ "qualified with the 'mro::' prefix.\n"
#~ "\n"
#~ "The interface documentation here serves only as a quick reference of what "
#~ "the function basically does, and what differences between the MRO::Compat "
#~ "manpage and 5.9.5+ one should look out for. The main docs in 5.9.5's the "
#~ "mro manpage are the real interface docs, and contain a lot of other "
#~ "useful information."
#~ msgstr ""
#~ "\"mro\" ネームスペースは Perl 5.9.5 およびそれ以降のバージョンに対応し、メ"
#~ "ソッドの解決順序やメソッドのキャッシュ機構を扱うためのいくつかのユーティリ"
#~ "ティを提供しています。\n"
#~ "\n"
#~ "このモジュールには、古いバージョン (5.6.0 以降のバージョン) でそれらの機能"
#~ "に対応するための仕組みが含まれています。\n"
#~ "\n"
#~ "このモジュールを Perl 5.9.5 以降のバージョンで利用した場合は、特に悪影響も"
#~ "なく何も動作を行なわないモジュールになります。言い換えれば、 MRO::Compat "
#~ "モジュールを正しく使用することで、古いバージョンと 5.9.5 以降のバージョン"
#~ "の両方で動作する仕組みを作成することができます。\n"
#~ "\n"
#~ "Perl 5.9.5 以降で対応した mro:: インターフェイスを使用するソフトウエアを作"
#~ "成している場合で、古いバージョンの Perl でも動作させたいような場合に、有用"
#~ "な仕組みです。\n"
#~ "\n"
#~ "このコードのいくつかの部分は、 Class::C3::XS がインストールされていると、"
#~ "よりうまく、かつ高速に動作します (Class::C3 クラスからは任意指定の prereq "
#~ "として、逆にこのクラスからは通常の prereq として定義されています) が、必ず"
#~ "しも必要となるものではありません。\n"
#~ "\n"
#~ "このモジュールは、いかなる関数も公開していません。全ての機能は、完全修飾型"
#~ "の 'mro::' プレフィクス経由で利用します。\n"
#~ "\n"
#~ "インターフェイスのドキュメンテーションは、それぞれの関数がどのように動作す"
#~ "るのかを簡潔に示しただけのものであるほか、 MRO::Compat と Perl 5.9.5 以降"
#~ "のバージョンでの違いも示しています。 5.9.5 のメインのドキュメンテーション"
#~ "では、実際のインターフェイスに対するドキュメンテーションが書かれていて、そ"
#~ "こには多数の有用な情報が書かれています。"

#~ msgid ""
#~ "Mail::SPF is an object-oriented implementation of Sender Policy Framework "
#~ "(SPF). See http://www.openspf.org for more information about SPF.\n"
#~ "\n"
#~ "This class collection aims to fully conform to the SPF specification (RFC "
#~ "4408) so as to serve both as a production quality SPF implementation and "
#~ "as a reference for other developers of SPF implementations."
#~ msgstr ""
#~ "Mail::SPF は Sender Policy Framework (SPF) に対するオブジェクト指向の実装"
#~ "です。 SPF について、詳しくは http://www.openspf.org をお読みください。\n"
#~ "\n"
#~ "このクラス集は、 SPF 仕様 (RFC 4408) に完全準拠し、商用品質の SPF 実装とし"
#~ "て利用するだけでなく、他の開発者に対する SPF のリファレンス実装としても利"
#~ "用できるものです。"

#~ msgid "Module for Sending Mails with Attachments Through an Smtp Server"
#~ msgstr ""
#~ "SMTP サーバを介して添付ファイル付きのメールを送信するためのモジュール"

#~ msgid ""
#~ "Mail::Sender provides an object-oriented interface to sending mails. It "
#~ "directly connects to the mail server using IO::Socket.\n"
#~ "\n"
#~ "Mail::Sender is going away... well, not really, but it's being officially "
#~ "marked as \"out of favor\". Email::Sender is the go-to choice when you "
#~ "need to send Email from Perl. Go there, be happy!"
#~ msgstr ""
#~ "Mail::Sender はメールを送信するためのオブジェクト指向のインターフェイスを"
#~ "提供します。 IO::Socket を利用して、メールサーバに直接接続します。\n"
#~ "\n"
#~ "Mail::Sender は廃止予定のモジュールで、公式にも \"人気を失いつつある\" モ"
#~ "ジュールになっています。メールの送信機能を利用したい場合は、 Email::"
#~ "Sender モジュールをお使いください。"

#~ msgid "Simple DOM parser for Makefiles"
#~ msgstr "Makefile 向けのシンプルな DOM パーサ"

#~ msgid ""
#~ "This libary can serve as an advanced lexer for (GNU) makefiles. It parses "
#~ "makefiles as \"documents\" and the parsing is lossless. The results are "
#~ "data structures similar to DOM trees. The DOM trees hold every single bit "
#~ "of the information in the original input files, including white spaces, "
#~ "blank lines and makefile comments. That means it's possible to reproduce "
#~ "the original makefiles from the DOM trees. In addition, each node of the "
#~ "DOM trees is modifiable and so is the whole tree, just like the the PPI "
#~ "manpage module used for Perl source parsing and the the HTML::TreeBuilder "
#~ "manpage module used for parsing HTML source.\n"
#~ "\n"
#~ "If you're looking for a true GNU make parser that generates an AST, "
#~ "please see the Makefile::Parser::GmakeDB manpage instead.\n"
#~ "\n"
#~ "The interface of 'Makefile::DOM' mimics the API design of the PPI "
#~ "manpage. In fact, I've directly stolen the source code and POD "
#~ "documentation of the PPI::Node manpage, the PPI::Element manpage, and the "
#~ "PPI::Dumper manpage, with the full permission from the author of the PPI "
#~ "manpage, Adam Kennedy.\n"
#~ "\n"
#~ "'Makefile::DOM' tries to be independent of specific makefile's syntax. "
#~ "The same set of DOM node types is supposed to get shared by different "
#~ "makefile DOM generators. For example, the MDOM::Document::Gmake manpage "
#~ "parses GNU makefiles and returns an instance of the MDOM::Document "
#~ "manpage, i.e., the root of the DOM tree while the NMAKE makefile lexer in "
#~ "the future, 'MDOM::Document::Nmake', also returns instances of the the "
#~ "MDOM::Document manpage class. Later, I'll also consider adding support "
#~ "for dmake and bsdmake."
#~ msgstr ""
#~ "このライブラリは (GNU) Makefile に対する高度な文法処理モジュールです。 "
#~ "Makefile をすべての要素を失わずに \"文書\" として処理します。処理結果は "
#~ "DOM ツリーのようなデータ構造になります。 DOM ツリーには入力ファイル内の情"
#~ "報を断片として保持しており、ホワイトスペースや空行、 Makefile のコメントな"
#~ "ども保持しています。これにより、 DOM ツリーから元々の Makefile を正確に再"
#~ "現することができるようになっています。これに加えて、 Perl ソースを処理する"
#~ "際の PPI モジュールや、 HTML ソースを処理する際に利用する HTML::"
#~ "TreeBuilder のように、 DOM ツリーの各ノードはすべて変更可能です。\n"
#~ "\n"
#~ "AST を生成する本格的な GNU make パーサをお求めの場合は、 Makefile::"
#~ "Parser::GmakeDB をお使いください。\n"
#~ "\n"
#~ "'Makefile::DOM' のインターフェイス設計は PPI のものをまねて作られていま"
#~ "す。事実、ソースコードと POD のドキュメンテーションは PPI::Node, PPI::"
#~ "Element manpage, PPI::Dumper から直接借りて作られています。もちろんこの借"
#~ "用に際しては、 PPI の作者である Adam Kennedy 氏からの全面的な許可を得てあ"
#~ "ります。\n"
#~ "\n"
#~ "'Makefile::DOM' は特定の Makefile の文法に依存した作りにはならないようにし"
#~ "ています。 DOM ノードタイプが同じものであれば、異なる Makefile DOM 生成モ"
#~ "ジュールで共有することができます。たとえば MDOM::Document::Gmake は GNU "
#~ "Makefile を処理して MDOM::Document のインスタンスを返しますが、 NMAKE "
#~ "Makefile を処理する 'MDOM::Document::Nmake' の結果でも、 MDOM::Document を"
#~ "返します。なお、 dmake と bsdmake に対するサポートも追加される予定です。"

#~ msgid ""
#~ "Minion is a job queue for the at http://mojolicious.org real-time web "
#~ "framework, with support for multiple named queues, priorities, delayed "
#~ "jobs, job dependencies, job results, retries with backoff, statistics, "
#~ "distributed workers, parallel processing, autoscaling, resource leak "
#~ "protection and multiple backends (such as at http://www.postgresql.org).\n"
#~ "\n"
#~ "Job queues allow you to process time and/or computationally intensive "
#~ "tasks in background processes, outside of the request/response lifecycle. "
#~ "Among those tasks you'll commonly find image resizing, spam filtering, "
#~ "HTTP downloads, building tarballs, warming caches and basically "
#~ "everything else you can imagine that's not super fast.\n"
#~ "\n"
#~ "  use Mojolicious::Lite;\n"
#~ "\n"
#~ "  plugin Minion => {Pg => 'postgresql://sri:s3cret@localhost/test'};\n"
#~ "\n"
#~ "     app->minion->add_task(poke_mojo => sub {     my $job = shift;     "
#~ "$job->app->ua->get('mojolicious.org');     $job->app->log->debug('We have "
#~ "poked mojolicious.org for a visitor');   });\n"
#~ "\n"
#~ "     get '/' => sub {     my $c = shift;     $c->minion-"
#~ ">enqueue('poke_mojo');     $c->render(text => 'We will poke mojolicious."
#~ "org for you soon.');   };\n"
#~ "\n"
#~ "  app->start;\n"
#~ "\n"
#~ "Background worker processes are usually started with the command Minion::"
#~ "Command::minion::worker, which becomes automatically available when an "
#~ "application loads the plugin Mojolicious::Plugin::Minion.\n"
#~ "\n"
#~ "  $ ./myapp.pl minion worker\n"
#~ "\n"
#~ "Jobs can be managed right from the command line with Minion::Command::"
#~ "minion::job.\n"
#~ "\n"
#~ "  $ ./myapp.pl minion job\n"
#~ "\n"
#~ "Every job can fail or succeed, but not get lost, the system is eventually "
#~ "consistent and will preserve job results for as long as you like, "
#~ "depending on \"remove_after\". While individual workers can fail in the "
#~ "middle of processing a job, the system will detect this and ensure that "
#~ "no job is left in an uncertain state, depending on \"missing_after\"."
#~ msgstr ""
#~ "Minion は http://mojolicious.org で公開されているリアルタイム Web フレーム"
#~ "ワーク向けのジョブキューです。複数の名前付きキューに対応しているほか、優先"
#~ "順位や遅延ジョブ、ジョブの依存関係や実行結果、バックオフ無しでの再試行や統"
#~ "計情報、分散型ワーカーや並列処理、自動スケーリングや遠隔制御、リソースリー"
#~ "クの保護と複数バックエンド (例: http://www.postgresql.org) への対応などが"
#~ "行われています。\n"
#~ "\n"
#~ "ジョブキューの仕組みにより、計算量の多い処理を、リクエスト／レスポンスのラ"
#~ "イフサイクルからは切り離して、バックグラウンドプロセスとして実行することが"
#~ "できるようになります。このような処理にはたとえば、画像のサイズ変更や迷惑"
#~ "メールのフィルタリング、 HTTP のダウンロードや tar ボールの作成、キャッ"
#~ "シュの準備のほか、すぐに処理することのできない処理であればどのようなものに"
#~ "も適用することができます。\n"
#~ "\n"
#~ "  use Mojolicious::Lite;\n"
#~ "\n"
#~ "  plugin Minion => {Pg => 'postgresql://sri:s3cret@localhost/test'};\n"
#~ "\n"
#~ "     app->minion->add_task(poke_mojo => sub {     my $job = shift;     "
#~ "$job->app->ua->get('mojolicious.org');     $job->app->log->debug('We have "
#~ "poked mojolicious.org for a visitor');   });\n"
#~ "\n"
#~ "     get '/' => sub {     my $c = shift;     $c->minion-"
#~ ">enqueue('poke_mojo');     $c->render(text => 'We will poke mojolicious."
#~ "org for you soon.');   };\n"
#~ "\n"
#~ "  app->start;\n"
#~ "\n"
#~ "バックグラウンドのワーカープロセスは、通常 Minion::Command::minion::"
#~ "worker のコマンドで開始されますが、こちらはアプリケーションが "
#~ "Mojolicious::Plugin::Minion プラグインを読み込んだ段階で、自動的に利用でき"
#~ "るようになるものです。\n"
#~ "\n"
#~ "  $ ./myapp.pl minion worker\n"
#~ "\n"
#~ "ジョブは Minion::Command::minion::job をコマンドラインから利用して管理する"
#~ "ことができます。\n"
#~ "\n"
#~ "  $ ./myapp.pl minion job\n"
#~ "\n"
#~ "systemd でバッググラウンドのワーカープロセスを管理したい場合は、下記のよう"
#~ "なユニット設定ファイルをお使いください。\n"
#~ "\n"
#~ "  [Unit]   Description=My Mojolicious application workers   "
#~ "After=postgresql.service\n"
#~ "\n"
#~ "  [Service]   Type=simple   ExecStart=/home/sri/myapp/myapp.pl minion "
#~ "worker -m production   KillMode=process\n"
#~ "\n"
#~ "  [Install]   WantedBy=multi-user.target\n"
#~ "\n"
#~ "それぞれのジョブは成功する場合も失敗する場合もありますが、いずれにしても失"
#~ "われてしまうことはありません。システムは最終的に一貫性の保たれた状態になり"
#~ "ますし、ジョブの結果は必要なだけ保持します (\"remove_after\") 。個別のワー"
#~ "カーではジョブの処理途中で失敗する場合もありますが、システム側ではそれを検"
#~ "出して、不確定なジョブが残らないように動作します (\"missing_after\")。"

#~ msgid ""
#~ "Module::CPANfile is a tool to handle the cpanfile manpage format to load "
#~ "application specific dependencies, not just for CPAN distributions."
#~ msgstr ""
#~ "Module::CPANfile は cpanfile を処理するためのツールで、 CPAN 配布物だけで"
#~ "はなく、アプリケーション固有の依存関係の読み込みを行なうことができます。"

#~ msgid ""
#~ "*Module::Install* is a package for writing installers for CPAN (or CPAN-"
#~ "like) distributions that are clean, simple, minimalist, act in a strictly "
#~ "correct manner with the ExtUtils::MakeMaker manpage, and will run on any "
#~ "Perl installation version 5.005 or newer.\n"
#~ "\n"
#~ "The intent is to make it as easy as possible for CPAN authors (and "
#~ "especially for first-time CPAN authors) to have installers that follow "
#~ "all the best practices for distribution installation, but involve as much "
#~ "DWIM (Do What I Mean) as possible when writing them."
#~ msgstr ""
#~ "*Module::Install* は CPAN (または CPAN に似た) 配布物のインストーラを作成"
#~ "するためのモジュールです。クリーンでシンプルな仕組みで、余計なコードもな"
#~ "く、 ExtUtils::MakeMaker を利用して厳密に正しい動作をするようになっていま"
#~ "す。また、 Perl のバージョン 5.005 もしくはそれ以降のバージョンで動作しま"
#~ "す。\n"
#~ "\n"
#~ "このモジュールは、 CPAN の作者に対してできる限り簡単にインストーラを作成で"
#~ "きるようにするためのもので、各配布物に対して最適な方法に従いながら、できる"
#~ "限り DWIM (Do What I Mean; 意図したとおりにやる) の原則に従ってインストー"
#~ "ラが完成するように作られています。"

#~ msgid "Read the source of a module like perl does"
#~ msgstr "Perl のコードのようにモジュールのソースを読み込むモジュール"

#~ msgid ""
#~ "Reads the content of perl modules the same way perl does. This includes "
#~ "reading modules available only by perlfunc/require, or filtered through "
#~ "them."
#~ msgstr ""
#~ "Perl が実施するのと同じ方法で Perl のモジュールの内容を読み込みます。 "
#~ "perlfunc/require もしくはそれらのフィルタを介してのみ提供されているモ"
#~ "ジュールも読み込むことができます。"

#~ msgid ""
#~ "The functions exported by this module deal with runtime handling of Perl "
#~ "modules, which are normally handled at compile time. This module avoids "
#~ "using any other modules, so that it can be used in low-level "
#~ "infrastructure.\n"
#~ "\n"
#~ "The parts of this module that work with module names apply the same "
#~ "syntax that is used for barewords in Perl source. In principle this "
#~ "syntax can vary between versions of Perl, and this module applies the "
#~ "syntax of the Perl on which it is running. In practice the usable syntax "
#~ "hasn't changed yet, but there's a good chance of it changing in Perl "
#~ "5.18.\n"
#~ "\n"
#~ "The functions of this module whose purpose is to load modules include "
#~ "workarounds for three old Perl core bugs regarding 'require'. These "
#~ "workarounds are applied on any Perl version where the bugs exist, except "
#~ "for a case where one of the bugs cannot be adequately worked around in "
#~ "pure Perl."
#~ msgstr ""
#~ "このモジュールが提供する関数は、 Perl モジュールの実行時処理を取り扱うもの"
#~ "です。 Perl のモジュールは通常コンパイル時に処理されるもので、このモジュー"
#~ "ルは一切のモジュールと依存関係を持たない仕組みになっていることから、低レベ"
#~ "ルな構造になっています。\n"
#~ "\n"
#~ "本モジュール内の部品のうち、モジュール名での処理を行なうものは、 Perl ソー"
#~ "ス内で使用していた元々のものと同じ文法になっています。また、この文法は一般"
#~ "に、Perl のバージョン間で異なる構造になっているため、このモジュールでは実"
#~ "行中のPerl のバージョンに合わせて文法が変わる仕組みになっています。実際に"
#~ "使用する文法が変わったりしていることはありませんが、 Perl 5.18 は変更する"
#~ "のにちょうどよいタイミングであると考えています。\n"
#~ "\n"
#~ "このモジュールの機能は、古い Perl コアに存在していた 3 種類の 'require' ま"
#~ "わりのバグに回避策を設定してモジュールを読み込むことにあります。これらの回"
#~ "避策は、バグの存在する全てのバージョンに対して適用されますが、純粋な Perl "
#~ "では簡単に解決できないバグは除外されています。"

#~ msgid ""
#~ "This is the core module for Module::Starter. If you're not looking to "
#~ "extend or alter the behavior of this module, you probably want to look at "
#~ "the module-starter manpage instead.\n"
#~ "\n"
#~ "Module::Starter is used to create a skeletal CPAN distribution, including "
#~ "basic builder scripts, tests, documentation, and module code. This is "
#~ "done through just one method, 'create_distro'."
#~ msgstr ""
#~ "これは Module::Starter の中枢モジュールです。このモジュールの機能を追加し"
#~ "たり変更したりしたい場合でなければ、まず module-starter をお読みくださ"
#~ "い。\n"
#~ "\n"
#~ "Module::Starter は、基本的な構築スクリプトやテスト、ドキュメンテーションや"
#~ "モジュールのコードなど、 CPAN 配布物の骨格を作成するために使用するモジュー"
#~ "ルです。作業は 'create_distro' メソッドを呼び出すだけです。"

#~ msgid "adapted from MooseX::Types::Common::Numeric"
#~ msgstr "MooseX::Types::Common::Numeric から作られているものです。"

#~ msgid "Extend your attribute interfaces (deprecated)"
#~ msgstr "属性インターフェイスの拡張 (廃止予定)"

#~ msgid ""
#~ "*This distribution is deprecated. The features it provides have been "
#~ "added to the Moose core code as the Moose::Meta::Attribute::Native "
#~ "manpage. This distribution should not be used by any new code.*\n"
#~ "\n"
#~ "While the Moose manpage attributes provide you with a way to name your "
#~ "accessors, readers, writers, clearers and predicates, this library "
#~ "provides commonly used attribute helper methods for more specific types "
#~ "of data.\n"
#~ "\n"
#~ "As seen in the the /SYNOPSIS manpage, you specify the extension via the "
#~ "'metaclass' parameter. Available meta classes are:"
#~ msgstr ""
#~ "*この配布物は廃止予定のものです。このモジュールが提供している機能は Moose "
#~ "の中枢コード内に追加され、 Moose::Meta::Attribute::Native という名称で提供"
#~ "されています。この配布物は、新しいコードに対しては適用すべきではありませ"
#~ "ん。*\n"
#~ "\n"
#~ "Moose の属性はアクセサやリーダ、ライターやクリアラ、プレディケイドに対して"
#~ "名前を付ける機能を提供しますが、このライブラリでは一般的に使用される属性ヘ"
#~ "ルパーを利用して、データに対するより固有の型を設定することができます。\n"
#~ "\n"
#~ "また、 /SYNOPSIS にもあるとおり、 'metaclass' パラメータを介して拡張を指定"
#~ "することもできます。"

#~ msgid "Roles with Composition Parameters"
#~ msgstr "組成パラメータのある役割"

#~ msgid ""
#~ "Your parameterized role consists of two new things: parameter "
#~ "declarations and a 'role' block.\n"
#~ "\n"
#~ "Parameters are declared using the the /parameter manpage keyword which "
#~ "very much resembles the Moose/has manpage. You can use any option that "
#~ "the Moose/has manpage accepts. The default value for the 'is' option is "
#~ "'ro' as that's a very common case. Use 'is => 'bare'' if you want no "
#~ "accessor. These parameters will get their values when the consuming class "
#~ "(or role) uses the Moose/with manpage. A parameter object will be "
#~ "constructed with these values, and passed to the 'role' block.\n"
#~ "\n"
#~ "The 'role' block then uses the usual the Moose::Role manpage keywords to "
#~ "build up a role. You can shift off the parameter object to inspect what "
#~ "the consuming class provided as parameters. You use the parameters to "
#~ "customize your role however you wish.\n"
#~ "\n"
#~ "There are many possible implementations for parameterized roles "
#~ "(hopefully with a consistent enough API); I believe this to be the "
#~ "easiest and most flexible design. Coincidentally, Pugs originally had an "
#~ "eerily similar design.\n"
#~ "\n"
#~ "See the MooseX::Role::Parameterized::Extending manpage for some tips on "
#~ "how to extend this module."
#~ msgstr ""
#~ "パラメータ化した役割には、 2 つのものが含まれています。 1 つはパラメータの"
#~ "修飾子、もう 1 つは 'role' のブロックです。\n"
#~ "\n"
#~ "パラメータは parameter キーワードを利用して定義するもので、 Moose ととても"
#~ "似た仕組みです。ここでは Moose で利用可能な任意のオプションを使用すること"
#~ "ができます。 'is' に対する既定値は 'ro' であり、これは非常に一般的な場合を"
#~ "表しています。アクセサが無い場合は、 'is => 'bare'' を指定してください。こ"
#~ "れらのパラメータは、消費クラスが Moose を使用する際に値を取得します。パラ"
#~ "メータオブジェクトは、これらの値で構築され、 'role' ブロックに渡されま"
#~ "す。\n"
#~ "\n"
#~ "'role' ブロックでは、役割を構築するのに Moose::Role のキーワードを使用しま"
#~ "す。パラメータオブジェクトは、消費クラスがパラメータとして提供したものを検"
#~ "査します。役割をカスタマイズしたい場合は、パラメータを利用して実施してくだ"
#~ "さい。\n"
#~ "\n"
#~ "パラメータ化された役割の実装には多数の方法がありますが (十分に一貫性のあ"
#~ "る API であるものとして) 、この方法が最も簡単で柔軟な設計であるものと考え"
#~ "ております。偶然にも、 Pugs ではこれと似た設計になっています。\n"
#~ "\n"
#~ "このモジュールの拡張方法についてのヒントは、 MooseX::Role::Parameterized::"
#~ "Extending をお読みください。"

#~ msgid "turn your Moose class into a singleton"
#~ msgstr "Moose クラスをシングルトンにするモジュール"

#~ msgid ""
#~ "A singleton is a class that has only one instance in an application. "
#~ "'MooseX::Singleton' lets you easily upgrade (or downgrade, as it were) "
#~ "your the Moose manpage class to a singleton.\n"
#~ "\n"
#~ "All you should need to do to transform your class is to change 'use "
#~ "Moose' to 'use MooseX::Singleton'. This module uses metaclass roles to do "
#~ "its magic, so it should cooperate with most other 'MooseX' modules."
#~ msgstr ""
#~ "シングルトンとは、アプリケーション内で 1 つだけインスタンスを持つクラスの"
#~ "ことです。 'MooseX::Singleton' は、お使いの Moose クラスをシングルトンに"
#~ "アップグレード (もしくはダウングレード) することができます。\n"
#~ "\n"
#~ "お使いのクラスを修正するのは簡単で、 'use Moose' を 'use MooseX::"
#~ "Singleton' に変更するだけです。このモジュールはメタクラスの役割を利用する"
#~ "ことで、このような魔法を提供していますので、ほとんどの他の 'MooseX' モ"
#~ "ジュールとともに動作することができます。"

#~ msgid ""
#~ "This module provides the Path::Tiny manpage types for the Moose manpage. "
#~ "It handles two important types of coercion:\n"
#~ "\n"
#~ "* *\n"
#~ "\n"
#~ "  coercing objects with overloaded stringification\n"
#~ "\n"
#~ "* *\n"
#~ "\n"
#~ "  coercing to absolute paths\n"
#~ "\n"
#~ "It also can check to ensure that files or directories exist."
#~ msgstr ""
#~ "このモジュールは、 Moose に対して Path::Tiny の型を提供するものです。この"
#~ "モジュールは、下記 2 つの重要な強制型を処理します:\n"
#~ "\n"
#~ "* *\n"
#~ "\n"
#~ "  オブジェクトに対するオーバーロードされた署名の強制\n"
#~ "\n"
#~ "* *\n"
#~ "\n"
#~ "  絶対パスに対する強制\n"
#~ "\n"
#~ "また、ファイルやディレクトリが存在しているかどうかをチェックすることもでき"
#~ "ます。"

#~ msgid ""
#~ "The 'Net::HTTP' class is a low-level HTTP client. An instance of the "
#~ "'Net::HTTP' class represents a connection to an HTTP server. The HTTP "
#~ "protocol is described in RFC 2616. The 'Net::HTTP' class supports "
#~ "'HTTP/1.0' and 'HTTP/1.1'.\n"
#~ "\n"
#~ "'Net::HTTP' is a sub-class of 'IO::Socket::INET'. You can mix the methods "
#~ "described below with reading and writing from the socket directly. This "
#~ "is not necessary a good idea, unless you know what you are doing."
#~ msgstr ""
#~ "'Net::HTTP' クラスは低レベルの HTTP クライアントです。 'Net::HTTP' クラス"
#~ "のインスタンスは、 HTTP サーバへの接続を表すものになります。 HTTP プロトコ"
#~ "ルは RFC 2616 で規定されるもので、 'HTTP/1.0' と 'HTTP/1.1' にそれぞれ対応"
#~ "しています。\n"
#~ "\n"
#~ "'Net::HTTP' は 'IO::Socket::INET' のサブクラスです。そのため、ソケットに対"
#~ "して直接読み書きを行なうような処理を利用することもできます。これらの機能"
#~ "は、それが何を意味するのかをよく理解しない限り、使用しないことをお勧めしま"
#~ "す。"

#~ msgid ""
#~ "Net::XMPP is a convenient tool to use for any perl script that would like "
#~ "to utilize the XMPP Instant Messaging protocol.  While not a client in "
#~ "and of itself, it provides all of the necessary back-end functions to "
#~ "make a CGI client or command-line perl client feasible  and easy to use.  "
#~ "Net::XMPP is a wrapper around the rest of the  official Net::XMPP::xxxxxx "
#~ "packages."
#~ msgstr ""
#~ "Net::XMPP は XMPP インスタントメッセージングプロトコルを扱う  Perl スクリ"
#~ "プトを作成するためのツールです。 これ自身をクライアントとして使用してログ"
#~ "イン／ログオフすることができるだけでなく、 CGI クライアントやコマンドライ"
#~ "ン Perl クライアントを作成するのに必要な、 全てのバックエンド機能を備えた"
#~ "十分かつ使いやすいツールです。 Net::Jabber は、残りの公式 Net::XMPP::"
#~ "xxxxxx パッケージに 対するラッパーです。"

#~ msgid ""
#~ "This module lets you use special zip files, called *P*erl *Ar*chives, as "
#~ "libraries from which Perl modules can be loaded.\n"
#~ "\n"
#~ "It supports loading XS modules by overriding *DynaLoader* bootstrapping "
#~ "methods; it writes shared object file to a temporary file at the time it "
#~ "is needed.\n"
#~ "\n"
#~ "A _.par_ file is mostly a zip of the _blib/_ directory after the build "
#~ "process of a CPAN distribution. To generate a _.par_ file yourself, all "
#~ "you have to do is compress the modules under _arch/_ and _lib/_, e.g.:\n"
#~ "\n"
#~ "    % perl Makefile.PL     % make     % cd blib     % zip -r mymodule.par "
#~ "arch/ lib/\n"
#~ "\n"
#~ "Afterward, you can just use _mymodule.par_ anywhere in your '@INC', use\n"
#~ "*PAR*, and it will Just Work. Support for generating _.par_ files is "
#~ "going to be in the next (beyond 0.2805) release of Module::Build.\n"
#~ "\n"
#~ "For convenience, you can set the 'PERL5OPT' environment variable to '-"
#~ "MPAR' to enable 'PAR' processing globally (the overhead is small if not "
#~ "used); setting it to '-MPAR=/path/to/mylib.par' will load a specific PAR "
#~ "file. Alternatively, consider using the _par.pl_ utility bundled with the "
#~ "the PAR::Packer manpage distribution, or using the self-contained _parl_ "
#~ "utility which is also distributed with the PAR::Packer manpage on "
#~ "machines without PAR.pm installed.\n"
#~ "\n"
#~ "Note that self-containing scripts and executables created with _par.pl_ "
#~ "and _pp_ may also be used as _.par_ archives:\n"
#~ "\n"
#~ "    % pp -o packed.exe source.pl        # generate packed.exe (see PAR::"
#~ "Packer)     % perl -MPAR=packed.exe other.pl    # this also works     % "
#~ "perl -MPAR -Ipacked.exe other.pl  # ditto\n"
#~ "\n"
#~ "Please see the /SYNOPSIS manpage for most typical use cases."
#~ msgstr ""
#~ "このモジュールは、 Perl のアーカイブ形式である *par* という特殊な形式の "
#~ "zip ファイルを扱うためのモジュールです。このアーカイブには、 Perl モジュー"
#~ "ルを読み込むことのできるライブラリが含まれています。\n"
#~ "\n"
#~ "このモジュールは、 *Dynaloader* と呼ばれるブートストラップメソッドをオー"
#~ "バーライドすることによって、 XS モジュールの読み込みにも対応しています。共"
#~ "有オブジェクトファイルは必要になった際、一時ファイルに書き込んで使用しま"
#~ "す。\n"
#~ "\n"
#~ "_.par_ ファイルは CPAN 配布物から構築された後、 _blib/ ディレクトリ内を "
#~ "zip ファイルにまとめたものです。 _.par_ ファイルを独自に作成したい場合"
#~ "は、 _arch/_ と _lib/_ を下記のようにして圧縮するだけです:\n"
#~ "\n"
#~ "    % perl Makefile.PL     % make     % cd blib     % zip -r mymodule.par "
#~ "arch/ lib/\n"
#~ "\n"
#~ "上記を実施後、 '@INC' 内のどこかに _mymodule.par_ を配置して *PAR* モ"
#~ "ジュールを利用することで、必要なモジュールを読み込むことができるようになり"
#~ "ます。 _.par_ ファイルの生成機能への対応は、 Module::Build の次期リリース "
#~ "(0.2805 以降) で提供される予定です。\n"
#~ "\n"
#~ "また、利便性を確保する目的で、 'PERL5OPT' 環境変数内に '-MPAR' を指定する"
#~ "と、 'PAR' の処理をグローバルに行なうことができます (使用しなければオー"
#~ "バーヘッドは小さくなります) 。また、 '-MPAR=/path/to/mylib.par' のように指"
#~ "定すると、特定の PAR ファイルを読み込むようにすることもできます。このほ"
#~ "か、 PAR::Packer 配布物に同梱されている _par.pl_ ユーティリティや必要なも"
#~ "のがすべて含まれている _parl_ ユーティリティを使用することもできます。これ"
#~ "らは PAR.pm がインストールされていなくても動作します。\n"
#~ "\n"
#~ "なお、 _par.pl_ や _pp_ で作成されたスクリプトや実行ファイルは、 _.par_ "
#~ "アーカイブとしても使用することができます:\n"
#~ "\n"
#~ "    % pp -o packed.exe source.pl        # generate packed.exe (see PAR::"
#~ "Packer)     % perl -MPAR=packed.exe other.pl    # this also works     % "
#~ "perl -MPAR -Ipacked.exe other.pl  # ditto\n"
#~ "\n"
#~ "よくある使用例について、詳しくは SYNOPSIS をお読みください。"

#~ msgid "Parse META.yml and META.json CPAN metadata files"
#~ msgstr ""
#~ "META.yml および META.json として提供される CPAN メタデータファイルの処理"

#~ msgid ""
#~ "*Parse::CPAN::Meta* is a parser for _META.json_ and _META.yml_ files, "
#~ "using the JSON::PP manpage and/or the CPAN::Meta::YAML manpage.\n"
#~ "\n"
#~ "*Parse::CPAN::Meta* provides three methods: 'load_file', "
#~ "'load_json_string', and 'load_yaml_string'. These will read and "
#~ "deserialize CPAN metafiles, and are described below in detail.\n"
#~ "\n"
#~ "*Parse::CPAN::Meta* provides a legacy API of only two functions, based on "
#~ "the YAML functions of the same name. Wherever possible, identical calling "
#~ "semantics are used. These may only be used with YAML sources.\n"
#~ "\n"
#~ "All error reporting is done with exceptions (die'ing).\n"
#~ "\n"
#~ "Note that META files are expected to be in UTF-8 encoding, only. When "
#~ "converted string data, it must first be decoded from UTF-8."
#~ msgstr ""
#~ "*Parse::CPAN::Meta* は _META.json_ および _META.yml_ ファイル向けのパーサ"
#~ "で、 JSON::PP および CPAN::Meta::YAML をそれぞれ利用しています。\n"
#~ "\n"
#~ "*Parse::CPAN::Meta* は 3 種類のメソッド ('load_file', 'load_json_string', "
#~ "'load_yaml_string') を提供しています。これらは CPAN メタファイルの読み込み"
#~ "とデシリアライズなどを行ないます。\n"
#~ "\n"
#~ "*Parse::CPAN::Meta* は 2 種類の旧 API 関数を提供していますが、これらは同名"
#~ "の YAML 関数をベースにしています。これらの関数は、可能な限り同一のコールセ"
#~ "マンティックを使用します。また、 YAML ソースに対してしか使用することができ"
#~ "ません。\n"
#~ "\n"
#~ "エラー報告は例外として報告されます (つまり die します) 。\n"
#~ "\n"
#~ "なお、 META ファイルは UTF-8 エンコーディングであることを前提に強います。"
#~ "変換された文字列データを処理したい場合は、まず UTF-8 にデコードしてから実"
#~ "行してください。"

#~ msgid ""
#~ "This package is mostly a glue layer around Path::IsDev with a few "
#~ "directory walking tricks.\n"
#~ "\n"
#~ "    use Path::FindDev qw( find_dev );\n"
#~ "\n"
#~ "    if ( my $root = find_dev('/some/path/to/something/somewhere')) "
#~ "{         print \"development root = $root\";     } else {         print "
#~ "\"No development root :(\";     }"
#~ msgstr ""
#~ "このパッケージは Path::IsDev に対するグルーレイヤと呼ばれる仕組みで、いく"
#~ "つかのディレクトリに対するトリックを使用しています。\n"
#~ "\n"
#~ "    use Path::FindDev qw( find_dev );\n"
#~ "\n"
#~ "    if ( my $root = find_dev('/some/path/to/something/somewhere')) "
#~ "{         print \"development root = $root\";     } else {         print "
#~ "\"No development root :(\";     }"

#~ msgid ""
#~ "This module provides a small, fast utility for working with file paths. "
#~ "It is friendlier to use than File::Spec and provides easy access to "
#~ "functions from several other core file handling modules. It aims to be "
#~ "smaller and faster than many alternatives on CPAN, while helping people "
#~ "do many common things in consistent and less error-prone ways.\n"
#~ "\n"
#~ "Path::Tiny does not try to work for anything except Unix-like and Win32 "
#~ "platforms. Even then, it might break if you try something particularly "
#~ "obscure or tortuous. (Quick! What does this mean: '///../../..//./././a//"
#~ "b/.././c/././'? And how does it differ on Win32?)\n"
#~ "\n"
#~ "All paths are forced to have Unix-style forward slashes. Stringifying the "
#~ "object gives you back the path (after some clean up).\n"
#~ "\n"
#~ "File input/output methods 'flock' handles before reading or writing, as "
#~ "appropriate (if supported by the platform).\n"
#~ "\n"
#~ "The '*_utf8' methods ('slurp_utf8', 'lines_utf8', etc.) operate in raw "
#~ "mode. On Windows, that means they will not have CRLF translation from the "
#~ "':crlf' IO layer. Installing Unicode::UTF8 0.58 or later will speed up "
#~ "'*_utf8' situations in many cases and is highly recommended.\n"
#~ "\n"
#~ "This module depends heavily on PerlIO layers for correct operation and "
#~ "thus requires Perl 5.008001 or later."
#~ msgstr ""
#~ "このモジュールは、ファイルパスを扱うための小さくて高速なユーティリティを提"
#~ "供します。 File::Spec を利用するよりはフレンドリーな仕組みであり、他の中枢"
#~ "ファイルハンドルモジュールから簡単にアクセスするための関数も用意されていま"
#~ "す。また、 CPAN 内で公開されている多数の同系モジュールよりも小さくて高速に"
#~ "動作するように作られているため、よくある様々な作業を一貫性のある、エラーを"
#~ "避けやすい方法で行なうことができます。\n"
#~ "\n"
#~ "Path::Tiny は Unix と Win32 のプラットフォーム以外で動作するようには設計さ"
#~ "れていません。また、非常に分かりにくい表記や複雑な表記などは、うまく動作し"
#~ "ない場合もあります (例: '///../../..//./././a//b/.././c/././') 。\n"
#~ "\n"
#~ "すべてのパスは Unix スタイルで記述する必要があり、パスの区切りはスラッ"
#~ "シュ (/) で指定します。また、オブジェクトを文字列化すると、元のパスが返さ"
#~ "れます (ただしいくつかのクリーンアップ処理が施されます) 。\n"
#~ "\n"
#~ "ファイルの入出力のメソッドを実行する際には、読み書きの処理の前に (プラット"
#~ "フォーム側で対応していれば) 'flock' の処理が行なわれます。\n"
#~ "\n"
#~ "'*_utf8' メソッド ('slurp_utf8', 'lines_utf8' など) は RAW モードで動作す"
#~ "るメソッドです。 Windows の場合、 ':crlf' IO レイヤによる CRLF の処理が行"
#~ "なわれなくなります。 Unicode::UTF8 0.58 もしくはそれ以降のバージョンをイン"
#~ "ストールしている場合、これらのメソッドの処理は多くの場合において高速化され"
#~ "ます (そのため、インストールが推奨されます) 。このほか、 PerlIO::"
#~ "utf8_strict 0.003 もしくはそれ以降のバージョンをインストールしている場合、"
#~ "デフォルトの ':encoding(UTF-8)' の代わりに使用されるようにもなっていま"
#~ "す。\n"
#~ "\n"
#~ "このモジュールは正しい操作を PerlIO レイヤに多く依存しているため、 Perl "
#~ "5.008001 もしくはそれ以降のバージョンが必要となります。"

#~ msgid ""
#~ "Perl::Critic is an extensible framework for creating and applying coding "
#~ "standards to Perl source code. Essentially, it is a static source code "
#~ "analysis engine. Perl::Critic is distributed with a number of the Perl::"
#~ "Critic::Policy manpage modules that attempt to enforce various coding "
#~ "guidelines. Most Policy modules are based on Damian Conway's book *Perl "
#~ "Best Practices*. However, Perl::Critic is *not* limited to PBP and will "
#~ "even support Policies that contradict Conway. You can enable, disable, "
#~ "and customize those Polices through the Perl::Critic interface. You can "
#~ "also create new Policy modules that suit your own tastes.\n"
#~ "\n"
#~ "For a command-line interface to Perl::Critic, see the documentation for "
#~ "the perlcritic manpage. If you want to integrate Perl::Critic with your "
#~ "build process, the Test::Perl::Critic manpage provides an interface that "
#~ "is suitable for test programs. Also, the Test::Perl::Critic::Progressive "
#~ "manpage is useful for gradually applying coding standards to legacy code. "
#~ "For the ultimate convenience (at the expense of some flexibility) see the "
#~ "the criticism manpage pragma.\n"
#~ "\n"
#~ "If you'd like to try the Perl::Critic manpage without installing "
#~ "anything, there is a web-service available at the http://perlcritic.com "
#~ "manpage. The web-service does not yet support all the configuration "
#~ "features that are available in the native Perl::Critic API, but it should "
#~ "give you a good idea of what it does.\n"
#~ "\n"
#~ "Also, ActivePerl includes a very slick graphical interface to Perl-Critic "
#~ "called 'perlcritic-gui'. You can get a free community edition of "
#~ "ActivePerl from the http://www.activestate.com manpage."
#~ msgstr ""
#~ "Perl::Critic は拡張性のあるフレームワークで、 Perl のソースコードに対して"
#~ "コード標準を作成し、それを適用することができるモジュールです。本質的には、"
#~ "ソースコードの静的な分析エンジンです。 Perl::Critic には多数の Perl::"
#~ "Critic::Policy モジュールが用意されていて、様々なコーディングガイドライン"
#~ "を強制できるようになっています。多くのポリシーモジュールは Damian Conway "
#~ "氏の書籍 *Perl Best Practices* をベースにしています。しかしながら、 Perl::"
#~ "Critic は左記の書籍だけに限らず、この書籍に矛盾するポリシーにも対応してい"
#~ "ます。また、 Perl::Critic インターフェイスを介することで、これらのポリシー"
#~ "の有効／無効を切り替えたり、カスタマイズしたりすることもできます。このほ"
#~ "か、必要に応じて独自のポリシーモジュールを作成することもできます。\n"
#~ "\n"
#~ "Perl::Critic のコマンドラインインターフェイスについては、 perlcritic のド"
#~ "キュメンテーションをお読みください。また、構築プロセス内に Perl::Critic を"
#~ "組み込みたい場合は、 Test::Perl::Critic がプログラムをテストするためのイン"
#~ "ターフェイス機能を提供しています。このほか、 Test::Perl::Critic::"
#~ "Progressive では、古いコードに対して少しずつコード標準を適用していくための"
#~ "仕組みもあります。最大限の利便性をもたらしたい場合 (ただし柔軟性による負荷"
#~ "もあります) は、 criticism プラグマをご覧ください。\n"
#~ "\n"
#~ "どのモジュールもインストールせずに Perl::Critic を試したい場合は、 http://"
#~ "perlcritic.com にある Web サービスをご利用いただくこともできます。この "
#~ "Web サービスは、 Perl::Critic の API に用意されている設定機能には対応して"
#~ "いませんが、このモジュールがどのような動作をするのかを確かめるためのヒント"
#~ "にはなります。\n"
#~ "\n"
#~ "このほか、 ActivePerl には 'perlcritic-gui' と呼ばれる非常にわかりやすいグ"
#~ "ラフィカルインターフェイスも用意されています。 ActivePerl のコミュニティ版"
#~ "をダウンロードしたい場合は、 http://www.activestate.com をご覧ください。"

#~ msgid ""
#~ "Plack is a set of tools for using the PSGI stack. It contains middleware "
#~ "components, a reference server and utilities for Web application "
#~ "frameworks. Plack is like Ruby's Rack or Python's Paste for WSGI.\n"
#~ "\n"
#~ "See the PSGI manpage for the PSGI specification and the PSGI::FAQ manpage "
#~ "to know what PSGI and Plack are and why we need them."
#~ msgstr ""
#~ "Plack は PSGI スタックを使用するためのツール集です。ミドルウエアコンポーネ"
#~ "ントのほか、参照サーバや Web アプリケーションフレームワーク向けのユーティ"
#~ "リティが含まれています。 Plack は Ruby における Rack や、 Python における "
#~ "WSGI 用の Paste などのようなものです。\n"
#~ "\n"
#~ "PSGI の仕様については PSGI を、 PSGI と Plack が何物であるのかや、なぜ必要"
#~ "となるのかについては、 PSGI::FAQ をお読みください。"

#~ msgid ""
#~ "The *RPC::XML* package is an implementation of the *XML-RPC* standard.\n"
#~ "\n"
#~ "The package provides a set of classes for creating values to pass to the "
#~ "constructors for requests and responses. These are lightweight objects, "
#~ "most of which are implemented as tied scalars so as to associate specific "
#~ "type information with the value. Classes are also provided for requests, "
#~ "responses, faults (errors) and a parser based on the the XML::Parser "
#~ "manpage package from CPAN.\n"
#~ "\n"
#~ "This module does not actually provide any transport implementation or "
#~ "server basis. For these, see the RPC::XML::Client manpage and the RPC::"
#~ "XML::Server manpage, respectively."
#~ msgstr ""
#~ "*RPC::XML* パッケージは、 *XML-RPC* 標準の実装です。\n"
#~ "\n"
#~ "このパッケージは、リクエストや応答に対するコンストラクタに渡すための値を作"
#~ "成するクラス集です。これらは軽量なオブジェクトであるほか、これらのうちの多"
#~ "くはスカラー参照の bless として実装されているため、特定のタイプ情報を値に"
#~ "結び付けることができます。クラスはリクエストと要求のほか、失敗 (エラー) に"
#~ "対しても提供されています。\n"
#~ "\n"
#~ "このモジュールでは、実際の転送機能やサーバ機能の実装などは提供されていませ"
#~ "ん。これらの用途に対しては RPC::XML::Client や RPC::XML::Server のパッケー"
#~ "ジをお使いください。"

#~ msgid ""
#~ "By default, this module exports a single hash ('%RE') that stores or "
#~ "generates commonly needed regular expressions (see the \"List of "
#~ "available patterns\" manpage).\n"
#~ "\n"
#~ "There is an alternative, subroutine-based syntax described in the "
#~ "\"Subroutine-based interface\" manpage."
#~ msgstr ""
#~ "既定では、このモジュールは 1 つのハッシュ ('%RE') を公開しています。この"
#~ "ハッシュは一般的に必要とされる正規表現を保存したり生成したりするための仕組"
#~ "みです (詳しくは \"List of available patterns\" をご覧ください) 。\n"
#~ "\n"
#~ "このほか、サブルーチンベースの文法もご利用いただけます。詳しくは "
#~ "\"Subroutine-based interface\" をお読みください。"

#~ msgid ""
#~ "This module was inspired by the excellent the DBIx::Abstract manpage. "
#~ "However, in using that module I found that what I really wanted to do was "
#~ "generate SQL, but still retain complete control over my statement handles "
#~ "and use the DBI interface. So, I set out to create an abstract SQL "
#~ "generation module.\n"
#~ "\n"
#~ "While based on the concepts used by the DBIx::Abstract manpage, there are "
#~ "several important differences, especially when it comes to WHERE clauses. "
#~ "I have modified the concepts used to make the SQL easier to generate from "
#~ "Perl data structures and, IMO, more intuitive. The underlying idea is for "
#~ "this module to do what you mean, based on the data structures you provide "
#~ "it. The big advantage is that you don't have to modify your code every "
#~ "time your data changes, as this module figures it out.\n"
#~ "\n"
#~ "To begin with, an SQL INSERT is as easy as just specifying a hash of "
#~ "'key=value' pairs:\n"
#~ "\n"
#~ "    my %data = (         name => 'Jimbo Bobson',         phone => "
#~ "'123-456-7890',         address => '42 Sister Lane',         city => 'St. "
#~ "Louis',         state => 'Louisiana',     );\n"
#~ "\n"
#~ "The SQL can then be generated with this:\n"
#~ "\n"
#~ "    my($stmt, @bind) = $sql->insert('people', \\%data);\n"
#~ "\n"
#~ "Which would give you something like this:\n"
#~ "\n"
#~ "    $stmt = \"INSERT INTO people                     (address, city, "
#~ "name, phone, state)                     VALUES (?, ?, ?, ?, ?)\";     "
#~ "@bind = ('42 Sister Lane', 'St. Louis', 'Jimbo Bobson',              "
#~ "'123-456-7890', 'Louisiana');\n"
#~ "\n"
#~ "These are then used directly in your DBI code:\n"
#~ "\n"
#~ "    my $sth = $dbh->prepare($stmt);     $sth->execute(@bind);"
#~ msgstr ""
#~ "このモジュールは DBIx::Abstract という素晴らしいモジュールにヒントを得てい"
#~ "ます。しかしながら、本当にやるべきことは SQL を生成することでありながら、"
#~ "ステートメントハンドルの完璧な制御や DBI インターフェイスの使用なども行な"
#~ "わなければならない、ということに気が付いてしまいました。そのため、抽象的"
#~ "な SQL 生成モジュールが必要であると考え、これを作成したものです。\n"
#~ "\n"
#~ "DBIx::Abstract で使用されている考え方をベースにしながら、特に WHERE 句を使"
#~ "用する場合の重要な変更が加えられています。 Perl のデータ構造から SQL を簡"
#~ "単に (かつ直感的に) 生成しやすくするため、考え方を変えて対応しています。こ"
#~ "のモジュールにおけるベースとなる考え方は、提供したデータ構造をベースにし"
#~ "て、意図したとおりの動作を行なわせる、ということです。これの大きな利点とし"
#~ "ては、データを変更してもコードを変更する必要がなく、このモジュールが検出し"
#~ "たとおりに動作させることができるという点にあります。\n"
#~ "\n"
#~ "このモジュールを始めるにあたっては、まず SQL INSERT がわかりやすいでしょ"
#~ "う。 'キー = 値' の対をハッシュにして指定するだけで実現できます:\n"
#~ "\n"
#~ "    my %data = (         name => 'Jimbo Bobson',         phone => "
#~ "'123-456-7890',         address => '42 Sister Lane',         city => 'St. "
#~ "Louis',         state => 'Louisiana',     );\n"
#~ "\n"
#~ "上記で作成したハッシュから、 SQL は下記のようにして生成することができま"
#~ "す:\n"
#~ "\n"
#~ "    my($stmt, @bind) = $sql->insert('people', \\%data);\n"
#~ "\n"
#~ "生成される SQL は下記のようになります:\n"
#~ "\n"
#~ "    $stmt = \"INSERT INTO people                     (address, city, "
#~ "name, phone, state)                     VALUES (?, ?, ?, ?, ?)\";     "
#~ "@bind = ('42 Sister Lane', 'St. Louis', 'Jimbo Bobson',              "
#~ "'123-456-7890', 'Louisiana');\n"
#~ "\n"
#~ "生成された SQL は DBI コードに直接渡すことができます:\n"
#~ "\n"
#~ "    my $sth = $dbh->prepare($stmt);     $sth->execute(@bind);"

#~ msgid ""
#~ "How many times have you found yourself writing:\n"
#~ "\n"
#~ "  if ($obj->isa('Something')) {\n"
#~ "\n"
#~ "and then shortly afterwards cursing and changing it to:\n"
#~ "\n"
#~ "  if (Scalar::Util::blessed($obj) and $obj->isa('Something')) {\n"
#~ "\n"
#~ "Right. That's why this module exists.\n"
#~ "\n"
#~ "Since perl allows us to provide a subroutine reference or a method name "
#~ "to the -> operator when used as a method call, and a subroutine doesn't "
#~ "require the invocant to actually be an object, we can create safe "
#~ "versions of isa, can and friends by using a subroutine reference that "
#~ "only tries to call the method if it's used on an object. So:\n"
#~ "\n"
#~ "  my $isa_Foo = $maybe_an_object->$_call_if_object(isa => 'Foo');\n"
#~ "\n"
#~ "is equivalent to\n"
#~ "\n"
#~ "  my $isa_Foo = do {     if (Scalar::Util::blessed($maybe_an_object)) "
#~ "{       $maybe_an_object->isa('Foo');     } else "
#~ "{       undef;     }   };\n"
#~ "\n"
#~ "Note that we don't handle trying class names, because many things are "
#~ "valid class names that you might not want to treat as one (like say \"Matt"
#~ "\") - the 'is_module_name' function from the Module::Runtime manpage is a "
#~ "good way to check for something you might be able to call methods on if "
#~ "you want to do that."
#~ msgstr ""
#~ "今まで下記のような記述をどれだけ書いてきたでしょうか？:\n"
#~ "\n"
#~ "  if ($obj->isa('Something')) {\n"
#~ "\n"
#~ "上記のように記述しても、すぐに下記のようなわかりにくいコードに変える必要に"
#~ "迫られることもあります:\n"
#~ "\n"
#~ "  if (Scalar::Util::blessed($obj) and $obj->isa('Something')) {\n"
#~ "\n"
#~ "上記のようなコードを改善するために、このモジュールが存在します。\n"
#~ "\n"
#~ "Perl ではメソッドの呼び出しとして利用する際、 -> の演算子でサブルーチンの"
#~ "参照やメソッド名を指定することができます。また、さぶるーちんは実際にはオブ"
#~ "ジェクトでなくても構わない仕組みになっています。そのため、 isa の安全な版"
#~ "を作成して、オブジェクトとして使用された場合にのみメソッドを呼び出そうとす"
#~ "るようなサブルーチン参照を使用することができるようになります:\n"
#~ "\n"
#~ "  my $isa_Foo = $maybe_an_object->$_call_if_object(isa => 'Foo');\n"
#~ "\n"
#~ "上記は下記と同じ意味になります:\n"
#~ "\n"
#~ "  my $isa_Foo = do {     if (Scalar::Util::blessed($maybe_an_object)) "
#~ "{       $maybe_an_object->isa('Foo');     } else "
#~ "{       undef;     }   };\n"
#~ "\n"
#~ "ただし、クラス名に対しては様々なものが利用できてしまうことから、クラス名に"
#~ "関しては処理しようとしないことに注意してください。 Module::Runtime には "
#~ "'is_module_name' という関数がありますので、こちらを利用してクラスかどうか"
#~ "を判断してください。"

#~ msgid "a simple sprintf-like dialect"
#~ msgstr "シンプルな sprintf のような機能"

#~ msgid ""
#~ "String::Errf provides 'errf', a simple string formatter that works "
#~ "something like 'perlfunc/sprintf'. It is implemented using the String::"
#~ "Formatter manpage and the Sub::Exporter manpage. Their documentation may "
#~ "be useful in understanding or extending String::Errf. The 'errf' "
#~ "subroutine is only available when imported. Calling the String::Errf::"
#~ "errf manpage will not do what you want."
#~ msgstr ""
#~ "String::Errf は 'errf' と呼ばれるシンプルな文字列整形関数を提供します。こ"
#~ "れは 'sprintf' に似た仕組みで、 String::Formatter および Sub::Exporter を"
#~ "利用して実装されています。これらのドキュメンテーションを利用することで、 "
#~ "String::Errf を理解したり拡張したりすることができるようになります。 "
#~ "'errf' サブルーチンはインポートしたときにのみ利用できます。 String::Errf::"
#~ "errf を呼び出しても期待通りの動作にはなりません。"

#~ msgid ""
#~ "the Sub::Exporter manpage is an incredibly powerful module, but with that "
#~ "power comes great responsibility, er- as well as some runtime penalties. "
#~ "This module is a 'Sub::Exporter' wrapper that will let your users just "
#~ "use the Exporter manpage if all they are doing is picking exports, but "
#~ "use 'Sub::Exporter' if your users try to use 'Sub::Exporter''s more "
#~ "advanced features, like renaming exports, if they try to use them.\n"
#~ "\n"
#~ "Note that this module will export '@EXPORT', '@EXPORT_OK' and "
#~ "'%EXPORT_TAGS' package variables for 'Exporter' to work. Additionally, if "
#~ "your package uses advanced 'Sub::Exporter' features like currying, this "
#~ "module will only ever use 'Sub::Exporter', so you might as well use it "
#~ "directly."
#~ msgstr ""
#~ "Sub::Exporter は非常にパワフルなモジュールですが、このパワーには実行時の不"
#~ "利など、大きな代償が伴います。このモジュールはたとえば、単に関数の公開のみ"
#~ "を行ないたいような場合で、 'Sub::Exporter' に用意された高度な機能 (たとえ"
#~ "ば公開関数の名前変更など) を行ないたいような場合に役立つ、 'Sub::"
#~ "Exporter' に対するラッパーです。\n"
#~ "\n"
#~ "なお、このモジュールは '@EXPORT', '@EXPORT_OK', '%EXPORT_TAGS' の各パッ"
#~ "ケージを、 'Exporter' に対して公開して動作することに注意してください。ま"
#~ "た、お使いのパッケージで 'Sub::Exporter' でカリーイングなど高度な機能を利"
#~ "用している場合は、'Sub::Exporter' を直接利用したほうが適切です。"

#~ msgid "A switch statement for Perl"
#~ msgstr "Perl 向け switch ステートメント"

#~ msgid ""
#~ "The Switch.pm module implements a generalized case mechanism that covers "
#~ "most (but not all) of the numerous possible combinations of switch and "
#~ "case values described above.\n"
#~ "\n"
#~ "The module augments the standard Perl syntax with two new control "
#~ "statements: 'switch' and 'case'. The 'switch' statement takes a single "
#~ "scalar argument of any type, specified in parentheses. 'switch' stores "
#~ "this value as the current switch value in a (localized) control variable. "
#~ "The value is followed by a block which may contain one or more Perl "
#~ "statements (including the 'case' statement described below). The block is "
#~ "unconditionally executed once the switch value has been cached."
#~ msgstr ""
#~ "Switch.pm モジュールは一般化された case 機構を実装するもので、上述のとお"
#~ "り switch と case の考えうる組み合わせのほとんど (ただしすべてではない) に"
#~ "対応しています。\n"
#~ "\n"
#~ "このモジュールは標準の Perl の文法に対して、 2 種類の制御ステートメント "
#~ "('switch', 'case') を追加します。 'switch' ステートメントは 1 つのカッコで"
#~ "括ったスカラー値を受け入れます。 'switch' は (ローカライズされた) 制御変数"
#~ "内に現在の switch の値を保存します。また、値の後には 1 つまたは複数の "
#~ "Perl ステートメント (下記の 'case' ステートメントを含みます) を含むブロッ"
#~ "クを指定します。ブロック内では switch の値がキャッシュされるため、無条件に"
#~ "いずれか 1 つが実行されることになります。"

#~ msgid ""
#~ "Prior to version 5.8.0 perl implemented 'unsafe' signal handling. The "
#~ "reason it is consider unsafe, is that there is a risk that a signal will "
#~ "arrive, and be handled while perl is changing internal data structures. "
#~ "This can result in all kinds of subtle and not so subtle problems. For "
#~ "this reason it has always been recommended that one do as little as "
#~ "possible in a signal handler, and only variables that already exist be "
#~ "manipulated.\n"
#~ "\n"
#~ "Perl 5.8.0 and later versions implements 'safe' signal handling on "
#~ "platforms which support the POSIX sigaction() function. This is "
#~ "accomplished by having perl note that a signal has arrived, but deferring "
#~ "the execution of the signal handler until such time as it is safe to do "
#~ "so. Unfortunately these changes can break some existing scripts, if they "
#~ "depended on a system routine being interrupted by the signal's arrival. "
#~ "The perl 5.8.0 implementation was modified further in version 5.8.2.\n"
#~ "\n"
#~ "From the perl 5.8.2 *perlvar* man page:\n"
#~ "\n"
#~ "   The default delivery policy of signals changed in Perl 5.8.0    from "
#~ "immediate (also known as \"unsafe\") to deferred, also    known as \"safe "
#~ "signals\".\n"
#~ "\n"
#~ "The implementation of this changed the 'sa_flags' with which the signal "
#~ "handler is installed by perl, and it causes some system routines (like "
#~ "connect()) to return EINTR, instead of another error when the signal "
#~ "arrives. The problem comes when the code that made the system call sees "
#~ "the EINTR code and decides it's going to call it again before returning. "
#~ "Perl doesn't do this but some libraries do, including for instance, the "
#~ "Oracle OCI library.\n"
#~ "\n"
#~ "Thus the 'deferred signal' approach (as implemented by default in perl "
#~ "5.8 and later) results in some system calls being retried prior to the "
#~ "signal handler being called by perl. This breaks timeout logic for DBD-"
#~ "Oracle which works with earlier versions of perl. This can be "
#~ "particularly vexing, when, for instance, the host on which a database "
#~ "resides is not available: 'DBI->connect()' hangs for minutes before "
#~ "returning an error (and cannot even be interrupted with control-C, even "
#~ "when the intended timeout is only seconds). This is because SIGINT "
#~ "appears to be deferred as well."
#~ msgstr ""
#~ "バージョン 5.8.0 以前の Perl では、 '安全ではない' シグナル処理を実装して"
#~ "いました。安全ではないと判断される理由は、シグナルが届いたとき、 Perl がそ"
#~ "の内部データ構造を変更しようとしているときに処理が行なわれるため、それに"
#~ "よってリスクがありうることによるものです。これによって些細な問題が発生しう"
#~ "る可能性があります。このような理由により、シグナルハンドラ内はできる限り少"
#~ "ないコードで実装しておき、かつ既に存在する変数のみを操作することが推奨され"
#~ "ています。\n"
#~ "\n"
#~ "Perl 5.8.0 およびそれ以降のバージョンでは、 POSIX の sigaction() 関数に対"
#~ "応するプラットフォームにおいて、 '安全な' シグナル実装が実装されるようにな"
#~ "りました。これは Perl 側でシグナルが届いたときに、安全な状態になるまでシグ"
#~ "ナルハンドラの実行を遅らせることによって成り立っています。残念ながらこの変"
#~ "更は、シグナルの到着によって割り込まれるシステムルーチンに依存している場"
#~ "合、既存のスクリプトに影響があるものです。 Perl 5.8.0 の実装は、再度 "
#~ "5.8.2 でも変更されています。\n"
#~ "\n"
#~ "Perl 5.8.2 の *perlvar* マニュアルページでは、下記のように説明されていま"
#~ "す:\n"
#~ "\n"
#~ "Perl 5.8.0 では既定のシグナル配送ポリシーが変更され、即時 (\"安全ではない"
#~ "\" とされてきたもの) から遅延型に変更され、 \"安全なシグナル配送\" となる"
#~ "ようになりました。\n"
#~ "\n"
#~ "この実装は、 Perl によってどのシグナルハンドラがインストールされたのかを示"
#~ "す 'sa_flags' も変更され、これによってシグナルが到着した際、いくつかのシス"
#~ "テムルーチン (connect() など) がエラーではなく EINTR を返すようになってい"
#~ "ます。この問題は、システムコールを行なったコードが EINTR コードを見て、そ"
#~ "れが返される前に再び呼び出されると判断した際に発生します。 Perl 側ではこの"
#~ "ようなことは行なっていませんが、たとえば Oracle OCI ライブラリなど、いくつ"
#~ "かのライブラリでは実施しています。\n"
#~ "\n"
#~ "このような仕組みから、 '遅延型シグナル' のアプローチ (Perl 5.8 もしくはそ"
#~ "れ以降で既定で実装されているもの) によって、 Perl 側でシグナルハンドラが呼"
#~ "び出されるよりも前に、システムコールが再試行されることになります。これは古"
#~ "いバージョンの Perl で DBD-Oracle を利用する際、タイムアウトの仕組みの動作"
#~ "がうまくいかなくなってしまいます。これは、例えばデータベースが存在するホス"
#~ "トが利用不可能な状況になった場合、特に厄介なことになりえます: 'DBI-"
#~ ">connect()' はエラーを返す前にしばらくハングアップするようになります (希望"
#~ "するタイムアウトが数秒の指定であったとしても、 CTRL-C で中断させることがで"
#~ "きません) 。これは SIGINT も同様に遅延処理されることによります。"

#~ msgid "A Glimpse at an Enlightened Perl (Async)"
#~ msgstr "A Glimpse at an Enlightened Perl (非同期)"

#~ msgid "A Glimpse at an Enlightened Perl: Config Modules"
#~ msgstr "A Glimpse at an Enlightened Perl: 設定モジュール"

#~ msgid ""
#~ "From the http://en.wikipedia.org/wiki/Kensho manpage:\n"
#~ "\n"
#~ "    Kenshō (見性) (C. Wu) is a Japanese term for enlightenment "
#~ "experiences -     most commonly used within the confines of Zen Buddhism "
#~ "- literally     meaning \"seeing one's nature\"[1] or \"true self.\"[2] "
#~ "It generally     \"refers to the realization of nonduality of subject and "
#~ "object.\"[3]\n"
#~ "\n"
#~ "the Task::Kensho manpage is a list of recommended modules for Enlightened "
#~ "Perl development. CPAN is wonderful, but there are too many wheels and "
#~ "you have to pick and choose amongst the various competing technologies.\n"
#~ "\n"
#~ "The plan is for the Task::Kensho manpage to be a rough testing ground for "
#~ "ideas that go into among other things the Enlightened Perl Organisation "
#~ "Extended Core (EPO-EC).\n"
#~ "\n"
#~ "The modules that are bundled by the Task::Kensho manpage are broken down "
#~ "into several categories and are still being considered. They are all "
#~ "taken from various top 100 most used perl modules lists and from "
#~ "discussions with various subject matter experts in the Perl Community. "
#~ "That said, this bundle does _not_ follow the guidelines established for "
#~ "the EPO-EC for peer review via industry advisers.\n"
#~ "\n"
#~ "Starting in 2011, the Task::Kensho manpage split its sub-groups of "
#~ "modules into individually-installable tasks. Each the Task::Kensho "
#~ "manpage sub-task is listed at the beginning of its section in this "
#~ "documentation.\n"
#~ "\n"
#~ "When installing the Task::Kensho manpage itself, you will be asked to "
#~ "install each sub-task in turn, or you can install individual tasks "
#~ "separately. These individual tasks will always install all their modules "
#~ "by default. This facilitates the ease and simplicity the distribution "
#~ "aims to achieve."
#~ msgstr ""
#~ "https://ja.wikipedia.org/wiki/見性より:\n"
#~ "\n"
#~ "    見性（けんしょう）とは、仏教の禅において用いられる仏教用語。人間に本来"
#~ "そなわる、本性を徹見すること。禅の悟りの１つとされる。次の修行過程は修道。"
#~ "仏典には見性の語は多く現れるが、見（dṛṣti）と性（svabhāva）という字義通り"
#~ "の熟語（複合語）で、禅宗の用法と関係した記述はほとんど見られず（#見性成仏"
#~ "を参照）、これが禅の用語とされる理由となっている。\n"
#~ "\n"
#~ "Task::Kensho は Enlightened Perl の開発で使用する推奨モジュール集です。"
#~ "CPAN は素晴らしい仕組みですが、多数のモジュールが存在することから、様々な"
#~ "競合技術の間でどれを選択すべきかがわかりにくくなっています。\n"
#~ "\n"
#~ "Task::Kensho は、アイディアに対して大まかなテストグラウンドとなることを目"
#~ "指し、これによって Enlightened Perl Organisation Extended Core (EPO-EC) を"
#~ "構成しています。\n"
#~ "\n"
#~ "Task::Kensho に同梱されているモジュールは複数のカテゴリに分類されます。こ"
#~ "れらは 100 種類のもっともよく使用される Perl モジュールの一覧から取られた"
#~ "ものであるほか、 Perl のコミュニティ内で熟練者同士が議論を行なって決めたも"
#~ "のでもあります。つまり、この同梱物は技術的なアドバイザを介してピアレビュー"
#~ "を行ない、 EPO-EC 用に建てられたガイドラインには従って _いない_ ということ"
#~ "になります。\n"
#~ "\n"
#~ "2011 年以降、 Task::Kensho はモジュールのサブグループを個別に分割し、それ"
#~ "ぞれインストール可能なタスクとしました。各 Task::Kensho のサブタスクは、こ"
#~ "のドキュメンテーション内のセクションの冒頭に一覧で示されています。\n"
#~ "\n"
#~ "Task::Kensho 自身をインストールする場合、インストールするサブタスクを選択"
#~ "するように求められるほか、個別にタスクをインストールすることもできます。こ"
#~ "れらの個別のタスクは、既定では常にすべてのモジュールをインストールします。"
#~ "これにより、配布物を実現するのに簡単でシンプルな方法となっています。"

#~ msgid "A Glimpse at an Enlightened Perl: Date Modules"
#~ msgstr "A Glimpse at an Enlightened Perl: 日付モジュール"

#~ msgid "A Glimpse at an Enlightened Perl: Testing"
#~ msgstr "A Glimpse at an Enlightened Perl: テスト"

#~ msgid "provide a progress meter on a standard terminal"
#~ msgstr "標準の端末に対する進捗表示メーター"

#~ msgid ""
#~ "Term::ProgressBar provides a simple progress bar on the terminal, to let "
#~ "the user know that something is happening, roughly how much stuff has "
#~ "been done, and maybe an estimate at how long remains.\n"
#~ "\n"
#~ "A typical use sets up the progress bar with a number of items to do, and "
#~ "then calls \"update\" to update the bar whenever an item is processed.\n"
#~ "\n"
#~ "Often, this would involve updating the progress bar many times with no "
#~ "user-visible change. To avoid unnecessary work, the update method returns "
#~ "a value, being the update value at which the user will next see a change. "
#~ "By only calling update when the current value exceeds the next update "
#~ "value, the call overhead is reduced.\n"
#~ "\n"
#~ "Remember to call the '$progress->update($max_value)' when the job is done "
#~ "to get a nice 100% done bar.\n"
#~ "\n"
#~ "A progress bar by default is simple; it just goes from left-to-right, "
#~ "filling the bar with '=' characters. These are called *major* characters. "
#~ "For long-running jobs, this may be too slow, so two additional features "
#~ "are available: a linear completion time estimator, and/or a *minor* "
#~ "character: this is a character that _moves_ from left-to-right on the "
#~ "progress bar (it does not fill it as the major character does), "
#~ "traversing once for each major-character added. This exponentially "
#~ "increases the granularity of the bar for the same width."
#~ msgstr ""
#~ "Term::ProgressBar は端末に対してシンプルなプログレスバー (進捗表示バー) を"
#~ "提供するもので、ユーザに対してどのような処理を行なっているのかや、おおよそ"
#~ "どれだけの処理が完了していて、どれだけの時間で完了するのかの見積もりを知ら"
#~ "せることができます。\n"
#~ "\n"
#~ "一般的にはまずプログレスバーは作業項目数を指定してセットアップし、その後 "
#~ "\"update\" を実行してどれだけの項目が完了したのかを更新します。\n"
#~ "\n"
#~ "ただし、場合によってはユーザに対して目に見える変化がないまま、何度も更新さ"
#~ "れてしまうような動きになることもあります。このような不要な描画を避けるた"
#~ "め、 \"update\" メソッドは値を返す仕組みになっています。返される値は、ユー"
#~ "ザ側に目に見える変化を与えるための次の値で、この値を超えない限り \"update"
#~ "\" メソッドを呼び出さなければ、オーバーヘッドを軽減できるようになっていま"
#~ "す。\n"
#~ "\n"
#~ "なお、 100% の完了を示すため、すべての処理が完了した際には '$progress-"
#~ ">update($max_value)' を呼び出しておくことを忘れないでください。\n"
#~ "\n"
#~ "既定のプログレスバーはシンプルなもので、左から右に '=' の文字で示される"
#~ "バーが進んでいく仕組みです。これらは *メジャー* 文字と呼ばれるものです。長"
#~ "時間かかるような処理の場合は、進捗が進まずわかりにくいので、下記の 2 つの"
#~ "追加機能も提供されています: 線形で完了時間を予測する機能や、 *マイナー* 文"
#~ "字への対応です。マイナー文字とはメジャー文字と同様に左から右に移動していく"
#~ "文字ですが、各メジャー文字の進捗のたびにリセットされる仕組みです。これは"
#~ "バーの粒度を指数関数的に増加させる効果があります。"

#~ msgid ""
#~ "If you don't know anything about automated testing in Perl then you "
#~ "should probably read about Test::Simple and Test::More before preceding. "
#~ "Test::Deep uses the Test::Builder framework.\n"
#~ "\n"
#~ "Test::Deep gives you very flexible ways to check that the result you got "
#~ "is the result you were expecting. At it's simplest it compares two "
#~ "structures by going through each level, ensuring that the values match, "
#~ "that arrays and hashes have the same elements and that references are "
#~ "blessed into the correct class. It also handles circular data structures "
#~ "without getting caught in an infinite loop.\n"
#~ "\n"
#~ "Where it becomes more interesting is in allowing you to do something "
#~ "besides simple exact comparisons. With strings, the 'eq' operator checks "
#~ "that 2 strings are exactly equal but sometimes that's not what you want. "
#~ "When you don't know exactly what the string should be but you do know "
#~ "some things about how it should look, 'eq' is no good and you must use "
#~ "pattern matching instead. Test::Deep provides pattern matching for "
#~ "complex data structures"
#~ msgstr ""
#~ "Perl で自動化されたテストについてご存じない場合は、まず Test::Simple と "
#~ "Test::More をお読みになることをお勧めします。 Test::Deep は Test::Builder "
#~ "フレームワークを使用しています。\n"
#~ "\n"
#~ "Test::Deep は、取得した結果が期待通りのものであるかどうかをチェックするた"
#~ "めの、非常に柔軟な方法を提供しています。 2 つの構造体はそれぞれのレベルに"
#~ "対して行なわれるシンプルな仕組みであることから、値が等しいことや配列やハッ"
#~ "シュが同じ要素を持っているか、およびその参照が正しいクラスにブレスしている"
#~ "かどうかを調べることができます。また、無限ループを回避する仕組みを備えてい"
#~ "るため、循環構造でも問題なく動作します。\n"
#~ "\n"
#~ "より興味深い点としては、シンプルで正確な比較を行なうことができるという点が"
#~ "あります。文字列の場合、 'eq' 演算子を利用して 2 つの文字列が等しいことを"
#~ "確認しますが、場合によってはこれが期待するものではないことがあります。文字"
#~ "列が正確にどのような値であるべきかがわからない場合は、パターンマッチングを"
#~ "代わりに使用することができます。 Test::Deep では、複雑なデータ構造を比較す"
#~ "る際にパターンマッチングを使用することができます。"

#~ msgid "Test::Exception simplified ***DEPRECATED***"
#~ msgstr "Test::Exception をシンプルにしたもの ***廃止予定***"

#~ msgid ""
#~ "*** This is deprecated please do not use it ***\n"
#~ "\n"
#~ "An alternative to Test::Exception that is much simpler. This alternative "
#~ "does not use fancy stack tricks to hide itself. The idea here is to keep "
#~ "it simple. This also solves the Test::Exception bug where some dies will "
#~ "be hidden when a DESTROY method calls eval. If a DESTROY method masks $@ "
#~ "a warning will be generated as well."
#~ msgstr ""
#~ "*** これは廃止予定のものです。使用しないでください ***\n"
#~ "\n"
#~ "非常に単純化した Test::Exception に対する代替モジュールです。この代替モ"
#~ "ジュールは、自身のモジュールを隠蔽するための奇妙な方法を使用しておらず、シ"
#~ "ンプルであり続けるようになっています。また、このモジュールは DESTROY メ"
#~ "ソッドが eval を呼び出す際、いくつかの die が隠蔽されてしまう、という "
#~ "Test::Exception のバグも解決しています。また、 DESTROY メソッドが $@ をマ"
#~ "スクする場合、警告メッセージも出力されます。"

#~ msgid ""
#~ "This module is a subclass of the LWP::UserAgent manpage which overrides a "
#~ "few key low-level methods that are concerned with actually sending your "
#~ "request over the network, allowing an interception of that request and "
#~ "simulating a particular response. This greatly facilitates testing of "
#~ "client networking code where the server follows a known protocol.\n"
#~ "\n"
#~ "The synopsis describes a typical case where you want to test how your "
#~ "application reacts to various responses from the server. This module will "
#~ "let you send back various responses depending on the request, without "
#~ "having to set up a real server to test against. This can be invaluable "
#~ "when you need to test edge cases or error conditions that are not "
#~ "normally returned from the server.\n"
#~ "\n"
#~ "There are a lot of different ways you can set up the response mappings, "
#~ "and hook into this module; see the documentation for the individual "
#~ "interface methods.\n"
#~ "\n"
#~ "You can use a the PSGI manpage app to handle the requests - see _examples/"
#~ "call_psgi.t_ in this dist, and also the /register_psgi manpage below.\n"
#~ "\n"
#~ "OR, you can route some or all requests through the network as normal, but "
#~ "still gain the hooks provided by this class to test what was sent and "
#~ "received:\n"
#~ "\n"
#~ "    my $useragent = Test::LWP::UserAgent->new(network_fallback => 1);\n"
#~ "\n"
#~ "or:\n"
#~ "\n"
#~ "    $useragent->map_network_response(qr/real.network.host/);\n"
#~ "\n"
#~ "    \n"
#~ "\n"
#~ "         is(         $useragent->last_useragent->timeout,         "
#~ "180,         'timeout was overridden properly',     );     "
#~ "is(         $useragent->last_http_request_sent->uri,         'uri my code "
#~ "should have constructed',     );     is(         $useragent-"
#~ ">last_http_response_received->code,         '200',         'I should have "
#~ "gotten an OK response',     );"
#~ msgstr ""
#~ "このモジュールは LWP::UserAgent のサブクラスで、実際にネットワークを介して"
#~ "リクエストを送信するような主要な低レベルのメソッドに対してオーバーライドを"
#~ "行なうことで、リクエストの送信を傍受し、特定の応答を擬似します。これによ"
#~ "り、サーバ側が既知のプロトコルを使用している場合、クライアント側のネット"
#~ "ワークコードのテストを非常にやりやすくすることができます。\n"
#~ "\n"
#~ "synopsis には、アプリケーションがサーバからの様々な応答に反応する際の典型"
#~ "的なテストケースが示されています。このモジュールは、テスト先となる実際の"
#~ "サーバを用意することなく、要求に応じて様々な応答を返すことができます。この"
#~ "モジュールは、非常にまれなケースをテストしたり、通常はサーバから返されない"
#~ "ようなエラーをテストしたりしたい場合には、非常に価値のあるものになりま"
#~ "す。\n"
#~ "\n"
#~ "応答は様々な方法で設定することができますし、モジュール内のフックを設定する"
#~ "こともできます。個別のインターフェイスメソッドについて、詳しくはドキュメン"
#~ "テーションをお読みください。\n"
#~ "\n"
#~ "要求を処理する際、 PSGI アプリケーションを使用することもできます。詳しくは"
#~ "配布物内の _examples/call_psgi.t_ および /register_psgi をご覧ください。\n"
#~ "\n"
#~ "また、要求のうちのいくつか、もしくはそのすべてを通常通りネットワーク経由で"
#~ "送信することもできます。この場合、このクラスが提供するフックを利用して、送"
#~ "受信されるデータをテストすることもできます:\n"
#~ "\n"
#~ "    my $useragent = Test::LWP::UserAgent->new(network_fallback => 1);\n"
#~ "\n"
#~ "もしくは、下記のようにすることもできます:\n"
#~ "\n"
#~ "    $useragent->map_network_response(qr/real.network.host/);\n"
#~ "\n"
#~ "    \n"
#~ "\n"
#~ "         is(         $useragent->last_useragent->timeout,         "
#~ "180,         'timeout was overridden properly',     );     "
#~ "is(         $useragent->last_http_request_sent->uri,         'uri my code "
#~ "should have constructed',     );     is(         $useragent-"
#~ ">last_http_response_received->code,         '200',         'I should have "
#~ "gotten an OK response',     );"

#~ msgid "Most commonly needed test functions and features."
#~ msgstr "最も必要とされるテスト関数と機能"

#~ msgid ""
#~ "the Test::Most manpage exists to reduce boilerplate and to make your "
#~ "testing life easier. We provide \"one stop shopping\" for most commonly "
#~ "used testing modules. In fact, we often require the latest versions so "
#~ "that you get bug fixes through the Test::Most manpage and don't have to "
#~ "keep upgrading these modules separately.\n"
#~ "\n"
#~ "This module provides you with the most commonly used testing functions, "
#~ "along with automatically turning on strict and warning and gives you a "
#~ "bit more fine-grained control over your test suite.\n"
#~ "\n"
#~ "    use Test::Most tests => 4, 'die';\n"
#~ "\n"
#~ "    ok 1, 'Normal calls to ok() should succeed';     is 2, 2, '... as "
#~ "should all passing tests';     eq_or_diff [3], [4], '... but failing "
#~ "tests should die';     ok 4, '... will never get to here';\n"
#~ "\n"
#~ "As you can see, the 'eq_or_diff' test will fail. Because 'die' is in the "
#~ "import list, the test program will halt at that point.\n"
#~ "\n"
#~ "If you do not want strict and warnings enabled, you must explicitly "
#~ "disable them. Thus, you must be explicit about what you want and no "
#~ "longer need to worry about accidentally forgetting them.\n"
#~ "\n"
#~ "    use Test::Most tests => 4;     no strict;     no warnings;"
#~ msgstr ""
#~ "Test::Most は、よくあるお決まりのスクリプトの作成を避け、テストをよりやり"
#~ "やすくするための仕組みです。このモジュールは、最もよく使われるテストモ"
#~ "ジュールに対して \"ワンストップショッピング\" の仕組みを提供しています。事"
#~ "実、このモジュール自身もしばしば Test::Most の最新のバージョンを利用してバ"
#~ "グ修正を行なっているため、これらのモジュールを個別にアップグレードし続ける"
#~ "必要もなくなっています。\n"
#~ "\n"
#~ "このモジュールは最もよく使われるテスト関数を提供するほか、 strict や "
#~ "warning を自動的に有効化して、テストスイートに対する制御をよりうまく調整で"
#~ "きるようになっています。\n"
#~ "\n"
#~ "    use Test::Most tests => 4, 'die';\n"
#~ "\n"
#~ "    ok 1, 'Normal calls to ok() should succeed';     is 2, 2, '... as "
#~ "should all passing tests';     eq_or_diff [3], [4], '... but failing "
#~ "tests should die';     ok 4, '... will never get to here';\n"
#~ "\n"
#~ "ご覧のとおり、 'eq_or_diff' テストが失敗しています。それはインポートリスト"
#~ "内で 'die' しているためで、テストプログラムはその時点で停止しています。\n"
#~ "\n"
#~ "strict や warnings を有効化したくない場合は、それらは明示的に無効化するこ"
#~ "とができます。そのため、有効化することを忘れてしまうようなこともありませ"
#~ "ん。\n"
#~ "\n"
#~ "    use Test::Most tests => 4;     no strict;     no warnings;"

#~ msgid "Utilities to test STDOUT and STDERR messages."
#~ msgstr "STDOUT, STDERR のメッセージをテストするユーティリティ"

#~ msgid ""
#~ "Test::Output provides a simple interface for testing output sent to "
#~ "STDOUT or STDERR. A number of different utilities are included to try and "
#~ "be as flexible as possible to the tester.\n"
#~ "\n"
#~ "Originally this module was designed not to have external requirements, "
#~ "however, the features provided by the Sub::Exporter manpage over what the "
#~ "Exporter manpage provides is just to great to pass up.\n"
#~ "\n"
#~ "Likewise, Capture::Tiny provides a much more robust capture mechanism "
#~ "without than the original Test::Output::Tie."
#~ msgstr ""
#~ "Test::Output は STDOUT や STDERR に対するテスト出力のためのシンプルなイン"
#~ "ターフェイスを提供します。様々なユーティリティがテスターにとって、できる限"
#~ "り柔軟になるよう努力してきました。\n"
#~ "\n"
#~ "もともとこのモジュールは、外部の依存関係を不要にしていましたが、 Sub :: "
#~ "Exporterが提供する機能は、Exporterが提供する機能を超えて機能します。\n"
#~ "\n"
#~ "同様に、 Capture::Tiny はもともとの Test::Output::TIe 以上の高性能なキャプ"
#~ "チャ機構を提供します。"

#~ msgid "check for POD errors in files"
#~ msgstr "ファイル内の POD エラーの確認"

#~ msgid "Test::Pod::Coverage Perl module"
#~ msgstr "Test::Pod::Coverage Perl モジュール"

#~ msgid ""
#~ "The intent of this module is to provide a series of basic tests for 80% "
#~ "of the testing you will need to do for scripts in the script (or bin as "
#~ "is also commonly used) paths of your Perl distribution.\n"
#~ "\n"
#~ "Author:\n"
#~ "-------      Adam Kennedy <adamk@cpan.org>"
#~ msgstr ""
#~ "このモジュールの目的は、スクリプトに対するテスト要件のうち、 80% までを占"
#~ "める基礎テストの機能を提供することにあります。これらは、 Perl 配布物のパス"
#~ "内にあるスクリプト (またはよく使用されるバイナリ) を利用します。\n"
#~ "\n"
#~ "作者:\n"
#~ "-----      Adam Kennedy <adamk@cpan.org>"

#~ msgid "Basic utilities for writing tests."
#~ msgstr "テストを作成するための基本ユーティリティ"

#~ msgid ""
#~ "** If you are unfamiliar with testing *read Test::Tutorial* first! **\n"
#~ "\n"
#~ "This is an extremely simple, extremely basic module for writing tests "
#~ "suitable for CPAN modules and other pursuits. If you wish to do more "
#~ "complicated testing, use the Test::More module (a drop-in replacement for "
#~ "this one).\n"
#~ "\n"
#~ "The basic unit of Perl testing is the ok. For each thing you want to test "
#~ "your program will print out an \"ok\" or \"not ok\" to indicate pass or "
#~ "fail. You do this with the ok() function (see below).\n"
#~ "\n"
#~ "The only other constraint is you must pre-declare how many tests you plan "
#~ "to run. This is in case something goes horribly wrong during the test and "
#~ "your test program aborts, or skips a test or whatever. You do this like "
#~ "so:\n"
#~ "\n"
#~ "    use Test::Simple tests => 23;\n"
#~ "\n"
#~ "You must have a plan.\n"
#~ "\n"
#~ "* *ok*\n"
#~ "\n"
#~ "    ok( $foo eq $bar, $name );     ok( $foo eq $bar );\n"
#~ "\n"
#~ "  ok() is given an expression (in this case '$foo eq $bar'). If it's "
#~ "true,   the test passed. If it's false, it didn't. That's about it.\n"
#~ "\n"
#~ "  ok() prints out either \"ok\" or \"not ok\" along with a test number "
#~ "(it   keeps track of that for you).\n"
#~ "\n"
#~ "         ok( get_temperature($hell) > 0, 'Hell not yet frozen over' );\n"
#~ "\n"
#~ "  If you provide a $name, that will be printed along with the \"ok/not ok"
#~ "\"   to make it easier to find your test when if fails (just search for "
#~ "the   name). It also makes it easier for the next guy to understand what "
#~ "your   test is for. It's highly recommended you use test names.\n"
#~ "\n"
#~ "  All tests are run in scalar context. So this:\n"
#~ "\n"
#~ "      ok( @stuff, 'I have some stuff' );\n"
#~ "\n"
#~ "  will do what you mean (fail if stuff is empty)\n"
#~ "\n"
#~ "Test::Simple will start by printing number of tests run in the form \"1..M"
#~ "\" (so \"1..5\" means you're going to run 5 tests). This strange format "
#~ "lets Test::Harness know how many tests you plan on running in case "
#~ "something goes horribly wrong.\n"
#~ "\n"
#~ "If all your tests passed, Test::Simple will exit with zero (which is "
#~ "normal). If anything failed it will exit with how many failed. If you run "
#~ "less (or more) tests than you planned, the missing (or extras) will be "
#~ "considered failures. If no tests were ever run Test::Simple will throw a "
#~ "warning and exit with 255. If the test died, even after having "
#~ "successfully completed all its tests, it will still be considered a "
#~ "failure and will exit with 255.\n"
#~ "\n"
#~ "So the exit codes are...\n"
#~ "\n"
#~ "    0                   all tests successful     255                 test "
#~ "died or all passed but wrong # of tests run     any other number    how "
#~ "many failed (including missing or extras)\n"
#~ "\n"
#~ "If you fail more than 254 tests, it will be reported as 254.\n"
#~ "\n"
#~ "This module is by no means trying to be a complete testing system. It's "
#~ "just to get you started. Once you're off the ground its recommended you "
#~ "look at the Test::More manpage."
#~ msgstr ""
#~ "** テストについて詳しくない方は、まず *Test::Tutorial をお読みください* !"
#~ "**\n"
#~ "\n"
#~ "これは非常にシンプルで非常に基本的な、 CPAN モジュールその他に対してテスト"
#~ "を作成するためのモジュールです。より複雑なテストをご希望の場合は、 Test::"
#~ "More モジュールをお使いください (このモジュールとの間ではその場で置き換え"
#~ "が可能です) 。\n"
#~ "\n"
#~ "Perl のテストにおいて、基本的な単位は \"ok\" の出力です。お使いのプログラ"
#~ "ムをテストする際、各テストごとに \"ok\" または \"not ok\" が出力され、それ"
#~ "ぞれ成功と失敗を表します。テストの結果は ok() 関数を利用して設定します (下"
#~ "記をご覧ください) 。\n"
#~ "\n"
#~ "それ以外の唯一の制約事項としては、実行すべきテストの数を事前に定義する必要"
#~ "がある、ということです。これはテスト中に何かおかしな動作をして、プログラム"
#~ "が終了してしまったような場合や、テストを飛ばしたりした場合に注意する必要が"
#~ "あります。具体的には下記のようになります:\n"
#~ "\n"
#~ "    use Test::Simple tests => 23;\n"
#~ "\n"
#~ "* *ok*\n"
#~ "\n"
#~ "    ok( $foo eq $bar, $name );     ok( $foo eq $bar );\n"
#~ "\n"
#~ "  ok() には何らかの表現を指定します (上記の例では '$foo eq $bar') 。その表"
#~ "現の結果が true であった場合、テストは合格したものとされます。それ以外の場"
#~ "合 (つまり false) は、テストが失敗したものとなります。\n"
#~ "\n"
#~ "  ok() はテスト番号とともに \"ok\" または \"not ok\" を出力します (これに"
#~ "より、どのテストが失敗したのかを確認することができます) 。\n"
#~ "\n"
#~ "         ok( get_temperature($hell) > 0, 'Hell not yet frozen over' );\n"
#~ "\n"
#~ "$name を指定すると、その名前が \"ok/not ok\" とともに表示されます。これに"
#~ "より、テストが失敗した場合に、どのテストなのかを容易に判別できるようになり"
#~ "ます (検索する必要がなくなります) 。また、誰かからテストの結果を受け取る場"
#~ "合でも、名前が書かれていたほうがわかりやすいでしょう。テスト名の設定は強く"
#~ "推奨されます。\n"
#~ "\n"
#~ "すべてのテストはスカラーコンテキストで実行されます。そのため、下記を実行し"
#~ "た場合、 \"stuff\" が空であった場合にのみ失敗します:\n"
#~ "\n"
#~ "      ok( @stuff, 'I have some stuff' );\n"
#~ "\n"
#~ "Test::Simple は \"1..M\" のような形式 (例: \"1..5\" は 5 つのテストがある"
#~ "意味) で番号を出力します。このような奇妙な出力をするのは、全体のうちのどの"
#~ "テストなのかを明確にわかるようにするためです。\n"
#~ "\n"
#~ "すべてのテストに合格すると、 Test::Simple はゼロで終了します (通常終了) 。"
#~ "何か失敗したテストがあった場合は、その失敗数が返されます。計画したテスト数"
#~ "と実際の数が異なっていた場合も、失敗として扱われます。テストをまったく実行"
#~ "していない場合は、 Test::Simple は警告をスローして、 255 の返り値を返しま"
#~ "す。すべてのテストが失敗した後であっても、何らかの理由で die した場合は、"
#~ "失敗したものとみなされて終了コードが 255 になります。\n"
#~ "\n"
#~ "まとめると、終了コードは下記のようになります:\n"
#~ "\n"
#~ "    0                     すべてのテストが成功した\n"
#~ "    255                  テスト内で die したか、もしくはすべてのテストが成"
#~ "功したものの、実行した数が合わない\n"
#~ "    その他の数値  テストのうちの失敗した数 (存在しないテストや多すぎるテス"
#~ "トを含む)\n"
#~ "\n"
#~ "254 個以上のテストが失敗した場合は、返り値は 254 になります。\n"
#~ "\n"
#~ "このモジュールは、完全なテストシステムとなるようには作られておらず、テスト"
#~ "を始めるためのきっかけとなるように作られています。より正確なテストを実行し"
#~ "たい場合は、 Test::More をお使いください。"

#~ msgid "Ease testing test modules built with Test::Builder"
#~ msgstr "Test::Builder で構築されたテストモジュールの簡単なテスト"

#~ msgid ""
#~ "If you have written a test module based on Test::Builder then Test::"
#~ "Tester allows you to test it with the minimum of effort."
#~ msgstr ""
#~ "Test::Builder をベースにしてテストモジュールを作成した場合は、 Test::"
#~ "Tester を利用することで、最小限の手間でテストを実施することができます。"

#~ msgid "Alternative to Test::More::use_ok"
#~ msgstr "Test::More::use_ok に対する代替モジュール"

#~ msgid ""
#~ "According to the *Test::More* documentation, it is recommended to run "
#~ "'use_ok()' inside a 'BEGIN' block, so functions are exported at compile-"
#~ "time and prototypes are properly honored.\n"
#~ "\n"
#~ "That is, instead of writing this:\n"
#~ "\n"
#~ "    use_ok( 'Some::Module' );     use_ok( 'Other::Module' );\n"
#~ "\n"
#~ "One should write this:\n"
#~ "\n"
#~ "    BEGIN { use_ok( 'Some::Module' ); }     BEGIN { use_ok( 'Other::"
#~ "Module' ); }\n"
#~ "\n"
#~ "However, people often either forget to add 'BEGIN', or mistakenly group "
#~ "'use_ok' with other tests in a single 'BEGIN' block, which can create "
#~ "subtle differences in execution order.\n"
#~ "\n"
#~ "With this module, simply change all 'use_ok' in test scripts to 'use ok', "
#~ "and they will be executed at 'BEGIN' time. The explicit space after 'use' "
#~ "makes it clear that this is a single compile-time action."
#~ msgstr ""
#~ "*Test::More* のドキュメンテーションによると、 'BEGIN' ブロック内で "
#~ "'use_ok()' を実行するよう推奨されています。そのため、関数はコンパイルの時"
#~ "点で公開され、プロトタイプは適切に反映されるようになっています。\n"
#~ "\n"
#~ "言い換えると、下記のような形式は誤りです:\n"
#~ "\n"
#~ "    use_ok( 'Some::Module' );     use_ok( 'Other::Module' );\n"
#~ "\n"
#~ "上記は下記のようにすべきです:\n"
#~ "\n"
#~ "    BEGIN { use_ok( 'Some::Module' ); }     BEGIN { use_ok( 'Other::"
#~ "Module' ); }\n"
#~ "\n"
#~ "しかしながら、人によっては 'BEGIN' を追加するのを忘れてしまったり、 1 つ"
#~ "の 'BEGIN' ブロック内に複数の 'use_ok' を混在させてしまったりすることがあ"
#~ "ります。これにより、実行される順序が変わってしまいます。\n"
#~ "\n"
#~ "このモジュールを利用すると、テストスクリプト内のすべての 'use_ok' が単純"
#~ "に 'use ok' に書き換えられ、 'BEGIN' の時点で実行されるようになります。 "
#~ "'use' の後に明示的にスペースを入れることで、単一のコンパイル時動作として利"
#~ "用されるようになります。"

#~ msgid "Create a nice formatted table using ASCII characters"
#~ msgstr "アスキー文字を使用した見やすい表の作成"

#~ msgid ""
#~ "Pretty nifty if you want to output dynamic text to your console or other "
#~ "fixed-size-font displays, and at the same time it will display it in a "
#~ "nice human-readable, or \"cool\" way."
#~ msgstr ""
#~ "動的なテキストやその他の等幅フォントの表示をコンソールに出力したい場合に便"
#~ "利なモジュールです。また、このモジュールは人間にとって読みやすい \"クール"
#~ "な\" 出力をします。"

#~ msgid ""
#~ "Text::CSV provides facilities for the composition and decomposition of "
#~ "comma-separated values using the Text::CSV_XS manpage or its pure Perl "
#~ "version.\n"
#~ "\n"
#~ "An instance of the Text::CSV class can combine fields into a CSV string "
#~ "and parse a CSV string into fields.\n"
#~ "\n"
#~ "The module accepts either strings or files as input and can utilize any "
#~ "user-specified characters as delimiters, separators, and escapes so it is "
#~ "perhaps better called ASV (anything separated values) rather than just "
#~ "CSV."
#~ msgstr ""
#~ "Text::CSV は、カンマ区切りの値を組み立てたり分解したりすることができま"
#~ "す。 Text:CSV のインスタンスは、値を組み合わせて CSV 文字列を作成したり、 "
#~ "CSV 文字列を値に変換したりすることができます。\n"
#~ "\n"
#~ "Text::CSV クラスのインスタンスは、フィールドを組み合わせて CSV 文字列を作"
#~ "成したり、 CSV 文字列を解釈してフィールドに変換したりすることができま"
#~ "す。\n"
#~ "\n"
#~ "このモジュールは文字列やファイルを入力として受け取り、任意のユーザ指定の文"
#~ "字を区切り文字やエスケープ文字として設定できるため、 CSV というよりは ASV "
#~ "(anything separated values; 任意の文字で区切られた値) と表現したほうが正し"
#~ "いものになっています。"

#~ msgid ""
#~ "'diff()' provides a basic set of services akin to the GNU 'diff' utility. "
#~ "It is not anywhere near as feature complete as GNU 'diff', but it is "
#~ "better integrated with Perl and available on all platforms. It is often "
#~ "faster than shelling out to a system's 'diff' executable for small files, "
#~ "and generally slower on larger files.\n"
#~ "\n"
#~ "Relies on the Algorithm::Diff manpage for, well, the algorithm. This may "
#~ "not produce the same exact diff as a system's local 'diff' executable, "
#~ "but it will be a valid diff and comprehensible by 'patch'. We haven't "
#~ "seen any differences between Algorithm::Diff's logic and GNU diff's, but "
#~ "we have not examined them to make sure they are indeed identical."
#~ msgstr ""
#~ "\"diff()\" は GNU \"diff\" ユーティリティに似た仕組みを提供する基本サービ"
#~ "ス集です。 GNU \"diff\" との完全な機能互換はありませんが、 Perl との統合を"
#~ "より便利な仕組みで提供していて、全てのプラットフォームで動作します。また、"
#~ "システムの \"diff\" プログラムを実行する場合に比べて、小さなファイルの場合"
#~ "はより高速に、大きなファイルの場合は一般に遅く動作します。\n"
#~ "\n"
#~ "差分抽出の仕組みは Algorithm::Diff のものに依存しています。そのため、シス"
#~ "テム内に存在するローカルの \"diff\" プログラムとは、出力が完全に一致すると"
#~ "は限りませんが、 diff の形式としては正しく、 \"patch\" プログラムからも利"
#~ "用できる形式が出力できます。 Algorithm::Diff と GNU diff との違いを確認し"
#~ "ているわけではありませんが、確実に等価なものであるかどうかは確認されていな"
#~ "いことに注意してください。"

#~ msgid "Cycle through a list of values via a scalar."
#~ msgstr "スカラー値を介して値の一覧に順次アクセスするモジュール"

#~ msgid "A time object, with as little code as possible"
#~ msgstr "できる限り少ない行数で作成された時刻オブジェクト"

#~ msgid ""
#~ "*Time::Tiny* is a member of the the DateTime::Tiny manpage suite of time "
#~ "modules.\n"
#~ "\n"
#~ "It implements an extremely lightweight object that represents a time, "
#~ "without any time data.\n"
#~ "\n"
#~ "The Tiny Mandate     Many CPAN modules which provide the best "
#~ "implementation of a concept     can be very large. For some reason, this "
#~ "generally seems to be about 3     megabyte of ram usage to load the "
#~ "module.\n"
#~ "\n"
#~ "    For a lot of the situations in which these large and "
#~ "comprehensive     implementations exist, some people will only need a "
#~ "small fraction of     the functionality, or only need this functionality "
#~ "in an ancillary     role.\n"
#~ "\n"
#~ "    The aim of the Tiny modules is to implement an alternative to the "
#~ "large     module that implements a subset of the functionality, using as "
#~ "little     code as possible.\n"
#~ "\n"
#~ "    Typically, this means a module that implements between 50% and 80% "
#~ "of     the features of the larger module, but using only 100 kilobytes "
#~ "of     code, which is about 1/30th of the larger module.\n"
#~ "\n"
#~ "The Concept of Tiny Date and Time     Due to the inherent complexity, "
#~ "Date and Time is intrinsically very     difficult to implement properly.\n"
#~ "\n"
#~ "    The arguably *only* module to implement it completely correct is "
#~ "the     DateTime manpage. However, to implement it properly the "
#~ "DateTime     manpage is quite slow and requires 3-4 megabytes of memory "
#~ "to load.\n"
#~ "\n"
#~ "    The challenge in implementing a Tiny equivalent to DateTime is to do "
#~ "so     without making the functionality critically flawed, and to "
#~ "carefully     select the subset of functionality to implement.\n"
#~ "\n"
#~ "    If you look at where the main complexity and cost exists, you will "
#~ "find     that it is relatively cheap to represent a date or time as an "
#~ "object,     but much much more expensive to modify or convert the "
#~ "object.\n"
#~ "\n"
#~ "    As a result, *Time::Tiny* provides the functionality required to     "
#~ "represent a date as an object, to stringify the date and to parse it     "
#~ "back in, but does *not* allow you to modify the dates.\n"
#~ "\n"
#~ "    The purpose of this is to allow for date object representations "
#~ "in     situations like log parsing and fast real-time work.\n"
#~ "\n"
#~ "    The problem with this is that having no ability to modify date "
#~ "limits     the usefulness greatly.\n"
#~ "\n"
#~ "    To make up for this, *if* you have the DateTime manpage installed, "
#~ "any     *Time::Tiny* module can be inflated into the equivalent the "
#~ "DateTime     manpage as needing, loading the DateTime manpage on the fly "
#~ "if     necesary.\n"
#~ "\n"
#~ "    For the purposes of date/time logic, all *Time::Tiny* objects exist "
#~ "in     the \"C\" locale, and the \"floating\" time zone (although "
#~ "obviously in a     pure date context, the time zone largely doesn't "
#~ "matter).\n"
#~ "\n"
#~ "    When converting up to full the DateTime manpage objects, these "
#~ "local     and time zone settings will be applied (although an ability is "
#~ "provided     to override this).\n"
#~ "\n"
#~ "    In addition, the implementation is strictly correct and is intended "
#~ "to     be very easily to sub-class for specific purposes of your own."
#~ msgstr ""
#~ "*Time::Tiny* は時刻モジュールである DateTime::Tiny スイートの中でもっとも"
#~ "よく知られたメンバーです。\n"
#~ "\n"
#~ "タイムゾーン無しの時刻を表わす非常に軽量なオブジェクトを実装しています。\n"
#~ "\n"
#~ "CPAN モジュールには様々な日付モジュールがありますが、いずれも非常に大きい"
#~ "もので、モジュールを読み込むと一般に 3MB 程度のメモリを使用してしまいま"
#~ "す。\n"
#~ "\n"
#~ "このように巨大で広範囲をサポートする実装は多数あるものの、利用者によっては"
#~ "もっと簡易的で部分的なサポートのみを提供するものを必要とする方々がいまし"
#~ "た。\n"
#~ "\n"
#~ "Tiny モジュールの目的は、できる限り少ないコード量で、必要とされる主要な機"
#~ "能に対応した、巨大モジュールに対する代替品を作成することを目的にしていま"
#~ "す。\n"
#~ "\n"
#~ "一般的に、これは巨大なモジュールの 50% から 80% 程度を実装することになりま"
#~ "すが、コード量に関しては巨大モジュールと比較して 1/30 、つまり 100 キロバ"
#~ "イト程度で作成することを意味しています。\n"
#~ "\n"
#~ "日付と時刻の処理には固有の複雑さが存在することから、これを正しく実装するに"
#~ "はそれなりの困難が伴っています。\n"
#~ "\n"
#~ "そのため、日付と時刻を完全に正しく実装しているのは、本モジュールだけである"
#~ "と確信しています。ただし、日付と時刻を適切に処理すると、かなり重い処理に"
#~ "なってしまうほか、メモリも 3 から 4 メガバイト程度必要になってしまいま"
#~ "す。\n"
#~ "\n"
#~ "日付と時刻の簡易的な実装への挑戦としては、明らかに欠陥のある機能を残したり"
#~ "はせず、かつ価値の高い修正／操作／変換機能を提供することにあります。\n"
#~ "\n"
#~ "その結果、 *Time::Tiny* は、日付をオブジェクトとして表現するのに必要な機能"
#~ "を提供するほか、日付と文字列との相互変換の機能も提供していますが、日付の変"
#~ "更については対応 *していません* 。\n"
#~ "\n"
#~ "この機能を提供した理由は、ログの処理や高速でリアルタイムな型処理などを提供"
#~ "するためです。\n"
#~ "\n"
#~ "また、変更機能への未対応は、このオブジェクトの用途を大きく狭める結果になっ"
#~ "ています。\n"
#~ "\n"
#~ "このような問題から、 DateTime がインストールされている環境の場合、 *Time::"
#~ "Tiny* モジュールは必要に応じて DateTime と同等の機能を提供するようにするこ"
#~ "とができます。この場合、 DateTime は自動的に読み込まれます。\n"
#~ "\n"
#~ "このような仕組みは DateTime::LazyInit に似た仕組みですが、 *DateTime::"
#~ "Tiny* は修正できないという点が異なります。\n"
#~ "\n"
#~ "日付と時刻のロジックのため、すべての *Time::Tiny* オブジェクトは \"C\" ロ"
#~ "ケール内に存在していて、 \"浮動型\" のタイムゾーンを保持しています。これは"
#~ "将来的に、タイムゾーンに関する簡易的な処理方法が見つかり次第、改善される予"
#~ "定です。\n"
#~ "\n"
#~ "完全機能の DateTime オブジェクトに変換する場合、ローカルのタイムゾーン設定"
#~ "が適用されます (ただし上書きする機能もあります) 。\n"
#~ "\n"
#~ "これに加えて、実装は厳密に正しく、かつ独自のクラスを作成するためにサブクラ"
#~ "ス化することもできるようになっています。"

#~ msgid "Minimal Try/Catch with Proper Preservation of $@"
#~ msgstr "$@ を適切に保持する最小限の Try/Catch"

#~ msgid ""
#~ "the Type::Tiny manpage is a tiny class for creating Moose-like type "
#~ "constraint objects which are compatible with Moo, Moose and Mouse.\n"
#~ "\n"
#~ "Maybe now we won't need to have separate MooseX, MouseX and MooX versions "
#~ "of everything? We can but hope...\n"
#~ "\n"
#~ "This documents the internals of the Type::Tiny manpage. the Type::Tiny::"
#~ "Manual manpage is a better starting place if you're new."
#~ msgstr ""
#~ "Type::Tiny は Moo, Moose, Mouse と互換性のある Moose のような型制約オブ"
#~ "ジェクトを作成することのできる、簡易クラスです。\n"
#~ "\n"
#~ "これにより、 MooseX, MouseX, MooX 版の様々なものが不要になるはずです。たぶ"
#~ "ん・・\n"
#~ "\n"
#~ "この文書には Type::Tiny の内部説明が書かれています。はじめてお使いになる方"
#~ "の場合は、 Type::Tiny::Manual をお読みください。"

#~ msgid ""
#~ "This module implements the URI class. Objects of this class represent "
#~ "\"Uniform Resource Identifier references\" as specified in RFC 2396 (and "
#~ "updated by RFC 2732).\n"
#~ "\n"
#~ "URI objects can be used to access and manipulate the various components "
#~ "that make up these strings.  There are also methods to combine URIs in "
#~ "various ways."
#~ msgstr ""
#~ "このモジュールは URI クラスを実装しています。このクラスのオブジェクトは、 "
#~ "RFC 2396 (および RFC 2732 で更新された) \"Uniform Resource Identifier "
#~ "references\" を表します。\n"
#~ "\n"
#~ "URI オブジェクトは、これらの文字列を利用する様々なコンポーネントに対して、"
#~ "アクセスや操作の機能を提供します。様々な方法で URI を組み合わせるメソッド"
#~ "も用意されています。"

#~ msgid ""
#~ "This module does one thing: Finds URIs and URLs in plain text. It finds "
#~ "them quickly and it finds them *all* (or what URI.pm considers a URI to "
#~ "be.) It only finds URIs which include a scheme (http:// or the like), for "
#~ "something a bit less strict have a look at URI::Find::Schemeless.\n"
#~ "\n"
#~ "For a command-line interface, the urifind manpage is provided."
#~ msgstr ""
#~ "このモジュールは、テキスト内で URI や URL を検出するだけの機能を提供しま"
#~ "す。検索は素早く、かつ *すべて* のもの (URI.pm が URI であると認識できるも"
#~ "の) を取り出すことができます。ただし、本モジュールではスキーム (例: "
#~ "http://) を含む URI のみを検出します。スキームを含まないものなど、より緩い"
#~ "検索を行ないたい場合は、 URI::Find::Schemeless をご覧ください。\n"
#~ "\n"
#~ "コマンドラインインターフェイスとしては、 urifind が提供されています。"

#~ msgid "Perl module for building DOM Level 1 compliant document structures"
#~ msgstr "DOM レベル 1 準拠の文書構造を構築するための Perl モジュール"

#~ msgid ""
#~ "This module extends the XML::Parser module by Clark Cooper. The XML::"
#~ "Parser module is built on top of XML::Parser::Expat, which is a lower "
#~ "level interface to James Clark's expat library."
#~ msgstr ""
#~ "このモジュールは Clark Cooper 氏が作成した XML::Parser モジュールの拡張版"
#~ "です。 XML::Parser モジュールは XML::Parser::Expat 上に構築されたモジュー"
#~ "ルで、 James Clark 氏による expat ライブラリの低レベルインターフェイスを提"
#~ "供します。"

#~ msgid ""
#~ "This module has a very simple task - to be a base class for PerlSAX "
#~ "drivers and filters. Its default behavior is to pass the input directly "
#~ "to the output unchanged. It can be useful to use this module as a base "
#~ "class so you don't have to, for example, implement the characters() "
#~ "callback.\n"
#~ "\n"
#~ "The main advantages that it provides are easy dispatching of events the "
#~ "right way (i.e., it takes care for you of checking that the handler has "
#~ "implemented that method, or has defined an AUTOLOAD), and the guarantee "
#~ "that filters will pass along events that they aren't implementing to "
#~ "handlers downstream that might nevertheless be interested in them."
#~ msgstr ""
#~ "このモジュールでは非常にシンプルな作業を行ないます。それは、 PerlSAX ドラ"
#~ "イバやフィルタに対するベースクラスとして機能することです。既定の動作では、"
#~ "入力されたものを何も操作せず出力に流すだけですが、このモジュールをベースク"
#~ "ラスとして使用することで、たとえば文字入力のコールバックなどの機能を追加す"
#~ "ることができるようになります。\n"
#~ "\n"
#~ "このクラスの主な利点としては、イベントを正しい方法で (ハンドラがそのような"
#~ "メソッドを実装しているか、もしくは AUTOLOAD を定義しているかなどのチェック"
#~ "を実施して)簡単に発信できるという点があります。またフィルタ側で、必要であ"
#~ "るにも関わらずハンドラが実装されていないような場合にも、イベントを渡す保証"
#~ "を行ないます。"

#~ msgid ""
#~ "This is an implementation of a SAX2 driver sitting on top of Expat (XML::"
#~ "Parser) which Ken MacLeod posted to perl-xml and which I have updated.\n"
#~ "\n"
#~ "It is still incomplete, though most of the basic SAX2 events should be "
#~ "available. The SAX2 spec is currently available from http://cvs."
#~ "sourceforge.net/cgi-bin/viewcvs.cgi/~checkout~/perl-xml/libxml-p erl/doc/"
#~ "sax-2.0.html?rev=HEAD&content-type=text/html\n"
#~ "\n"
#~ "A more friendly URL as well as a PODification of the spec are in the "
#~ "works."
#~ msgstr ""
#~ "このモジュールは Expat (XML::Parser) 上で動作する SAX2 ドライバの実装で、 "
#~ "Ken MacLeod 氏が perl-xml に投稿し、その後更新されたモジュールです。\n"
#~ "\n"
#~ "このモジュールは今もなお不完全なものでありますが、 SAX2 の基本イベントにつ"
#~ "いては利用可能な状態にあります。 SAX2 の仕様は現在、 http://cvs."
#~ "sourceforge.net/cgi-bin/viewcvs.cgi/~checkout~/perl-xml/libxml-p erl/doc/"
#~ "sax-2.0.html?rev=HEAD&content-type=text/html のマニュアルページにありま"
#~ "す。\n"
#~ "\n"
#~ "よりわかりやすい URL と仕様の POD 文書は、現在準備中です。"

#~ msgid "SAX2 Writer"
#~ msgstr "SAX2 ライタ"

#~ msgid ""
#~ "Why yet another XML Writer ?\n"
#~ "\n"
#~ "A new XML Writer was needed to match the SAX2 effort because quite "
#~ "naturally no existing writer understood SAX2. My first intention had been "
#~ "to start patching XML::Handler::YAWriter as it had previously been my "
#~ "favourite writer in the SAX1 world.\n"
#~ "\n"
#~ "However the more I patched it the more I realised that what I thought was "
#~ "going to be a simple patch (mostly adding a few event handlers and "
#~ "changing the attribute syntax) was turning out to be a rewrite due to "
#~ "various ideas I`d been collecting along the way. Besides, I couldn`t find "
#~ "a way to elegantly make it work with SAX2 without breaking the SAX1 "
#~ "compatibility which people are probably still using. There are of course "
#~ "ways to do that, but most require user interaction which is something I "
#~ "wanted to avoid.\n"
#~ "\n"
#~ "So in the end there was a new writer. I think it`s in fact better this "
#~ "way as it helps keep SAX1 and SAX2 separated.\n"
#~ "\n"
#~ "  Author: Robin Berjon  <robin@knowscape.com>"
#~ msgstr ""
#~ "もう 1 つの XML ライターはいかがでしょうか？\n"
#~ "\n"
#~ "SAX2 を自然に理解する既存のライターが存在していなかったことから、 SAX2 の"
#~ "成果に従った新しい XML ライターが必要とされてきました。もともとは SAX1 の"
#~ "世界でお気に入りのライターであった、 XML::Handler::YAWrite に対する修正か"
#~ "ら始まったプロジェクトです。\n"
#~ "\n"
#~ "修正を実施していくごとに、私はこれがシンプルな修正 (いくつかのイベントハン"
#~ "ドラの追加や属性の文法の変更) だけで済むのかと疑問に思うようになり、様々な"
#~ "アイディアが思い浮かんでもいたことから、新たに書き直したい思いになってきま"
#~ "した。また、多くの人々が今も使用している SAX1 に対して、この互換性を維持し"
#~ "たまま、上品に SAX2 に対応させる方法が見つからなかったこともありました。こ"
#~ "れを解決する方法はあったものと思うのますが、ほとんどの場合においてユーザ側"
#~ "の対応が必要になってしまいます。\n"
#~ "\n"
#~ "そのため、最終的に新しいライターを作成することにしました。私が思う限りで"
#~ "は、 SAX1 と SAX 2 は分離したままのほうがよりよいものと考えているからで"
#~ "す。\n"
#~ "\n"
#~ "  作者: Robin Berjon  <robin@knowscape.com>"

#~ msgid "Perl extension for comparing XML documents."
#~ msgstr "XML ドキュメントを比較するための Perl 拡張です。"

#~ msgid "Easily read/write XML (esp config files)"
#~ msgstr "XML (特に設定ファイル) を読み書きするための簡易 API"

#~ msgid ""
#~ "The XML::Simple module provides a simple API layer on top of an "
#~ "underlying XML parsing module (either XML::Parser or one of the SAX2 "
#~ "parser modules). Two functions are exported: 'XMLin()' and 'XMLout()'. "
#~ "Note: you can explicity request the lower case versions of the function "
#~ "names: 'xml_in()' and 'xml_out()'.\n"
#~ "\n"
#~ "The simplest approach is to call these two functions directly, but an "
#~ "optional object oriented interface (see the \"OPTIONAL OO INTERFACE\" "
#~ "manpage below) allows them to be called as methods of an *XML::Simple* "
#~ "object. The object interface can also be used at either end of a SAX "
#~ "pipeline."
#~ msgstr ""
#~ "XML::Simple モジュールは、 XML 処理モジュール (XML::Partse もしくは SAX2 "
#~ "パーサモジュールのうちのいずれか) 上で動作する、シンプルな API レイヤで"
#~ "す。2 つの関数が公開されています: 'XMLin()' と 'XMLout()' 。注意: 小文字版"
#~ "の関数名を利用することもできます: 'xml_in()', 'xml_out()'\n"
#~ "\n"
#~ "これら 2 つの関数を直接呼び出すのが最もシンプルなアプローチですが、必要で"
#~ "あればオブジェクト指向のインターフェイス (マニュアルページ内の \"OPTIONAL "
#~ "OO INTERFACE\" をお読みください) を利用することで、 *XML::Simple* オブジェ"
#~ "クトのメソッドを呼び出すこともできます。オブジェクト指向のインターフェイス"
#~ "は、 SAX パイプラインの末尾でも利用することができます。"

#~ msgid "A perl module for processing huge XML documents in tree mode."
#~ msgstr ""
#~ "巨大な XML ドキュメントをツリーモードで処理するための Perl モジュール"

#~ msgid ""
#~ "This module provides a way to process XML documents. It is build on top "
#~ "of 'XML::Parser'.\n"
#~ "\n"
#~ "The module offers a tree interface to the document, while allowing you to "
#~ "output the parts of it that have been completely processed.\n"
#~ "\n"
#~ "It allows minimal resource (CPU and memory) usage by building the tree "
#~ "only for the parts of the documents that need actual processing, through "
#~ "the use of the 'the twig_roots manpage ' and 'the "
#~ "twig_print_outside_roots manpage ' options. The 'the finish manpage ' and "
#~ "'the finish_print manpage ' methods also help to increase performances.\n"
#~ "\n"
#~ "XML::Twig tries to make simple things easy so it tries its best to takes "
#~ "care of a lot of the (usually) annoying (but sometimes necessary) "
#~ "features that come with XML and XML::Parser."
#~ msgstr ""
#~ "このモジュールは、 XML ドキュメントを処理する機能を提供します。このモ"
#~ "ジュールは'XML::Parser' 上で構築されています。\n"
#~ "\n"
#~ "このモジュールは、ドキュメントに対するツリー構造のインターフェイスを提供し"
#~ "ます。これにより、処理済みの形式で各パーツにアクセスすることができます。\n"
#~ "\n"
#~ "このモジュールは、実際の処理作業に必要なドキュメントのパーツに対してのみツ"
#~ "リー構造を構築するため、最小限のリソース (CPU およびメモリ) で処理できるよ"
#~ "うになっています。それぞれ 'twig_roots' や 'twig_print_outside_roots' のオ"
#~ "プションをお読みください。また、 'finish' や 'finish_print' メソッドを利用"
#~ "することで、性能を高めることもできます。\n"
#~ "\n"
#~ "XML::Twig はできるかぎりシンプルな処理を行ない、 XML や XML::Parser が提供"
#~ "する各種の厄介な (だが時によっては必要な) 機能をうまく処理するようにしてい"
#~ "ます。"

#~ msgid "Perl extension for writing XML documents."
#~ msgstr "XML ドキュメントを書き込むための Perl 拡張です。"

#~ msgid ""
#~ "The YAML.pm module implements a YAML Loader and Dumper based on the YAML "
#~ "1.0 specification. the http://www.yaml.org/spec/ manpage\n"
#~ "\n"
#~ "YAML is a generic data serialization language that is optimized for human "
#~ "readability. It can be used to express the data structures of most modern "
#~ "programming languages. (Including Perl!!!)\n"
#~ "\n"
#~ "For information on the YAML syntax, please refer to the YAML "
#~ "specification."
#~ msgstr ""
#~ "YAML.pm は YAML 1.0 仕様をベースにした YML ローダ／ダンパーです。詳しくは"
#~ "http://www.yaml.org/spec/ をお読みください。\n"
#~ "\n"
#~ "YAML は人間の可読性に最適化されているデータ直列化言語です。 Perl を含む多"
#~ "くの近代的プログラミング言語のデータ構造を表現するのに使用することができま"
#~ "す。\n"
#~ "\n"
#~ "YAML の文法について、詳しくは YAML 仕様をお読みください。"

#~ msgid ""
#~ "*YAML::Tiny* is a perl class for reading and writing YAML-style files, "
#~ "written with as little code as possible, reducing load time and memory "
#~ "overhead.\n"
#~ "\n"
#~ "Most of the time it is accepted that Perl applications use a lot of "
#~ "memory and modules. The *::Tiny* family of modules is specifically "
#~ "intended to provide an ultralight and zero-dependency alternative to many "
#~ "more-thorough standard modules.\n"
#~ "\n"
#~ "This module is primarily for reading human-written files (like simple "
#~ "config files) and generating very simple human-readable files. Note that "
#~ "I said *human-readable* and not *geek-readable*. The sort of files that "
#~ "your average manager or secretary should be able to look at and make "
#~ "sense of.\n"
#~ "\n"
#~ "the YAML::Tiny manpage does not generate comments, it won't necessarily "
#~ "preserve the order of your hashes, and it will normalise if reading in "
#~ "and writing out again.\n"
#~ "\n"
#~ "It only supports a very basic subset of the full YAML specification.\n"
#~ "\n"
#~ "Usage is targeted at files like Perl's META.yml, for which a small and "
#~ "easily-embeddable module is extremely attractive.\n"
#~ "\n"
#~ "Features will only be added if they are human readable, and can be "
#~ "written in a few lines of code. Please don't be offended if your request "
#~ "is refused. Someone has to draw the line, and for YAML::Tiny that someone "
#~ "is me.\n"
#~ "\n"
#~ "If you need something with more power move up to the YAML manpage (7 "
#~ "megabytes of memory overhead) or the YAML::XS manpage (6 megabytes memory "
#~ "overhead and requires a C compiler).\n"
#~ "\n"
#~ "To restate, the YAML::Tiny manpage does *not* preserve your comments, "
#~ "whitespace, or the order of your YAML data. But it should round-trip from "
#~ "Perl structure to file and back again just fine."
#~ msgstr ""
#~ "*YAML::Tiny* は、できる限り少ないコード量で、負荷とメモリのオーバヘッドが"
#~ "少なくなるように開発された、 YAML ファイルを読み書きするための Perl のクラ"
#~ "スです。\n"
#~ "\n"
#~ "以前は Perl のアプリケーションは多くのメモリとモジュールを使用するのが当た"
#~ "り前でした。 *::Tiny* ファミリのモジュールは、特に軽量性と依存関係の少なさ"
#~ "を追求し、多数の標準的なモジュールの対抗となるように作られています。\n"
#~ "\n"
#~ "\n"
#~ "このモジュールは、主に人間が作成したファイル (シンプルな設定ファイル) を読"
#~ "み込み、非常にシンプルな人間にとって読みやすいファイルを生成する際に使用す"
#~ "ることを目的としています。ただし *人間にとって読みやすい* は、 *マニアに"
#~ "とって読みやすい* ではないことに注意してください。一般的には、管理職や事務"
#~ "官のような人々にとって、読みやすいものを目指しています。\n"
#~ "\n"
#~ "YAML::Tiny ではコメントを生成しませんし、ハッシュの順序についても維持する"
#~ "必要はないものと考えております。そのため、読み込んで書き込む際には、正規化"
#~ "が行なわれることになります。\n"
#~ "\n"
#~ "また、 YAML の完全仕様のうち、非常に基本的なサブセットのみに対応していま"
#~ "す。\n"
#~ "\n"
#~ "Perl の META.yml のようなファイルを扱うことを想定したつくりになっていて、"
#~ "小ささと使いやすさを持ちながら、非常に直感的に使えるようになっています。\n"
#~ "\n"
#~ "機能は人間にとって読みやすいものである場合にのみ追加され、数行程度のコード"
#~ "で記述できるものが必要です。リクエストが拒否されたからと言って怒らないでく"
#~ "ださい。度のモジュールであっても誰かが線引きをする必要があるのですが、 "
#~ "YAML::Tiny についてはそれが私であっただけの話です。\n"
#~ "\n"
#~ "より強力な機能をご希望の場合は、 YAML モジュール (7 MB ほどのメモリのオー"
#~ "バーヘッドがあります) または YAML::XS (6 MB ほどのメモリのオーバーヘッドが"
#~ "あり、 C コンパイラが必要です) をお使いください。\n"
#~ "\n"
#~ "再作成という意味では、 YAML::Tiny はコメントやホワイトスペース、データの順"
#~ "序などを保持しません。ただし Perl の構造体にいったん変換して、それを書き戻"
#~ "しても、問題なく動作します。"

#~ msgid "The World-Wide-Web library for Perl"
#~ msgstr "Perl 向け World-Wide Web ライブラリ"

#~ msgid ""
#~ "The libwww-perl collection is a set of Perl modules which provides a "
#~ "simple and consistent application programming interface to the World-Wide "
#~ "Web.  The main focus of the library is to provide classes and functions "
#~ "that allow you to write WWW clients. The library also contain modules "
#~ "that are of more general use and even classes that help you implement "
#~ "simple HTTP servers."
#~ msgstr ""
#~ "libwww-perl コレクションは、 World-Wide Web に対するシンプルで安定したアプ"
#~ "リケーションプログラミングインターフェイスを提供するための、 Perl モジュー"
#~ "ル集です。このライブラリは、 WWW クライアントを作成するためのクラスや関数"
#~ "を提供するために作成されています。また、このライブラリには汎用用途のモ"
#~ "ジュールも含まれていて、これらはシンプルな HTTP サーバを作成するのに便利で"
#~ "す。"

#~ msgid ""
#~ "Please see the Alien manpage for the manifesto of the Alien namespace.\n"
#~ "\n"
#~ "In short 'Alien::wxWidgets' can be used to detect and get configuration "
#~ "settings from an installed wxWidgets."
#~ msgstr ""
#~ "Alien ネームスペースのマニフェストについて、詳しくは Alien マニュアルペー"
#~ "ジをお読みください。\n"
#~ "\n"
#~ "'Alian::wxWidgets' を端的に言うと、インストールされている wxWidgets を検出"
#~ "して設定情報を取得する機能を提供します。"

#~ msgid ""
#~ "the AnyEvent manpage provides a uniform interface to various event loops. "
#~ "This allows module authors to use event loop functionality without "
#~ "forcing module users to use a specific event loop implementation (since "
#~ "more than one event loop cannot coexist peacefully).\n"
#~ "\n"
#~ "The interface itself is vaguely similar, but not identical to the the "
#~ "Event manpage module.\n"
#~ "\n"
#~ "During the first call of any watcher-creation method, the module tries to "
#~ "detect the currently loaded event loop by probing whether one of the "
#~ "following modules is already loaded: the EV manpage, the AnyEvent::Loop "
#~ "manpage, the Event manpage, the Glib manpage, the Tk manpage, the Event::"
#~ "Lib manpage, the Qt manpage, the POE manpage. The first one found is "
#~ "used. If none are detected, the module tries to load the first four "
#~ "modules in the order given; but note that if the EV manpage is not "
#~ "available, the pure-perl the AnyEvent::Loop manpage should always work, "
#~ "so the other two are not normally tried.\n"
#~ "\n"
#~ "Because AnyEvent first checks for modules that are already loaded, "
#~ "loading an event model explicitly before first using AnyEvent will likely "
#~ "make that model the default. For example:\n"
#~ "\n"
#~ "   use Tk;    use AnyEvent;\n"
#~ "\n"
#~ "   \n"
#~ "\n"
#~ "The _likely_ means that, if any module loads another event model and "
#~ "starts using it, all bets are off - this case should be very rare though, "
#~ "as very few modules hardcode event loops without announcing this very "
#~ "loudly.\n"
#~ "\n"
#~ "The pure-perl implementation of AnyEvent is called 'AnyEvent::Loop'. Like "
#~ "other event modules you can load it explicitly and enjoy the high "
#~ "availability of that event loop :)"
#~ msgstr ""
#~ "AnyEvent は様々なイベントループに対する統一的なインターフェイスを提供する"
#~ "仕組みです。これにより、モジュールを作成する際に、特定のイベントループの実"
#~ "装を強制することなく、その機能を利用できるようになります (もちろん複数のイ"
#~ "ベントループが共存してしまうようなこともありません) 。\n"
#~ "\n"
#~ "インターフェイスそれ自身はイベントモジュールと非常に似通った仕組みになって"
#~ "いますが、全く同一というわけではありません。\n"
#~ "\n"
#~ "任意の watcher-creation メソッドが最初に呼び出されると、モジュールは下記の"
#~ "モジュールの読み込み状況を確認して、現在読み込まれているイベントループを検"
#~ "出しようとします: EV, AnyEvent::Loop, Event, Glib, Tk, Event::Lib, Qt, "
#~ "POE 。このうち、最初に見つかったものを使用しようとします。いずれも検出され"
#~ "ない場合、モジュールは上記の順序で最初の 4 つのモジュールを読み込みます。"
#~ "なお、 EV が利用できない場合は、純粋な Perl モジュールとして作成された "
#~ "AnyEvent::Loop が使用されることになり、その他の 2 つは通常使われません。\n"
#~ "\n"
#~ "AnyEvent は最初に読み込まれているモジュールを確認するため、 AnyEvent を利"
#~ "用するよりも前にイベントモデルが明示的に読み込まれると、それが既定値として"
#~ "使用されるようになります。たとえば下記のようになります:\n"
#~ "\n"
#~ "   use Tk;     use AnyEvent;\n"
#~ "\n"
#~ "このような仕組みから、いずれかのモジュールで他のイベントモデルを読み込んで"
#~ "いて、それを使用し始めている場合、 AnyEvent の仕組みは意味がなくなってしま"
#~ "います。このような事態は非常に稀なものではありますが、モジュールによっては"
#~ "特にアナウンスされることなく、イベントループが使用されている場合もありま"
#~ "す。\n"
#~ "\n"
#~ "AnyEvent の純粋 Perl 実装は 'AnyEvent::Loop' と呼ばれています。その他のイ"
#~ "ベントモジュールと同様に、明示的に読み込んでイベントループの高可用性を用い"
#~ "ることもできます :)"

#~ msgid ""
#~ "This module provides a c api for XS modules to hook into the callbacks of "
#~ "'PL_check'.\n"
#~ "\n"
#~ "the ExtUtils::Depends manpage is used to export all functions for other "
#~ "XS modules to use. Include the following in your Makefile.PL:\n"
#~ "\n"
#~ "    my $pkg = ExtUtils::Depends->new('Your::XSModule', 'B::Hooks::OP::"
#~ "Check');     WriteMakefile(         ... # your normal makefile "
#~ "flags         $pkg->get_makefile_vars,     );\n"
#~ "\n"
#~ "Your XS module can now include 'hook_op_check.h'."
#~ msgstr ""
#~ "このモジュールは、 'PL_check' のコールバック内にフックを設置するため、 XS "
#~ "モジュール向けに C API を提供する仕組みです。\n"
#~ "\n"
#~ "ExtUtils::Depends では、他の XS モジュールに対して使用するすべての関数を公"
#~ "開する際に使用しています。下記のような記述を Makefile.PL に追加してくださ"
#~ "い:\n"
#~ "\n"
#~ "    my $pkg = ExtUtils::Depends->new('Your::XSModule', 'B::Hooks::OP::"
#~ "Check');     WriteMakefile(         ... # your normal makefile "
#~ "flags         $pkg->get_makefile_vars,     );\n"
#~ "\n"
#~ "これにより、 XS モジュールから 'hook_op_check.h' を含めることができるよう"
#~ "になります。"

#~ msgid ""
#~ "This module provides a c api for XS modules to hook into the execution of "
#~ "perl opcodes."
#~ msgstr ""
#~ "このモジュールは、 XS モジュールに対する C 言語 API を提供し、 Perl のオペ"
#~ "コードの実行に対してフックを設定することができます。"

#~ msgid ""
#~ "This contains XS performance enhancers for Class::C3 version 0.16 and "
#~ "higher. The main Class::C3 package will use this package automatically if "
#~ "it can find it. Do not use this package directly, use Class::C3 instead.\n"
#~ "\n"
#~ "This module won't do anything for you if you're running a version of "
#~ "Class::C3 older than 0.16. (It's not a dependency because it would be "
#~ "circular with the optional dep from that package to this one)."
#~ msgstr ""
#~ "このパッケージには、 Class::C3 バージョン 0.16 もしくはそれ以降のバージョ"
#~ "ンに対して、 XS の性能強化を提供します。メインクラスである Class::C3 は、"
#~ "このパッケージがあれば自動的に使用します。このパッケージは直接使用せず、 "
#~ "Class::C3 をお使いください。\n"
#~ "\n"
#~ "このモジュールは、 Class::C3 バージョン 0.16 以前を実行している環境に対し"
#~ "ては、何も行ないません (そのパッケージから依存関係を設定してしまうと、循環"
#~ "参照になりうるためです) 。"

#~ msgid ""
#~ "This module provides an XS implementation for portions of the Class::Load "
#~ "manpage. See the Class::Load manpage for API details."
#~ msgstr ""
#~ "このモジュールは、 Class::Load の一部分を XS 実装したものです。API の詳細"
#~ "について、詳しくは Class::Load のマニュアルページをお読みください。"

#~ msgid "Perl XS interface for a portable traditional crypt function"
#~ msgstr "可搬性のある従来型 crypt 関数に対する Perl XS インターフェイス"

#~ msgid ""
#~ "This module is needed to access ODBC databases from within Perl. The "
#~ "module uses the unixODBC manager to connect to the database."
#~ msgstr ""
#~ "このモジュールは、 Perl から ODBC データベースにアクセスするために必要とな"
#~ "るものです。 データベースへの接続にあたっては unixODBC マネージャを使用し"
#~ "ます。"

#~ msgid ""
#~ "DBD::mysql is the Perl5 Database Interface driver for the MySQL database. "
#~ "In other words: DBD::mysql is an interface between the Perl programming "
#~ "language and the MySQL programming API that comes with the MySQL "
#~ "relational database management system. Most functions provided by this "
#~ "programming API are supported. Some rarely used functions are missing, "
#~ "mainly because noone ever requested them. :-)"
#~ msgstr ""
#~ "DBD::mysql は、 MySQL データベース向けの Perl5 データベースインターフェイ"
#~ "スドライバです。言い換えれば、 DBD::mysql は Perl プログラミング言語と "
#~ "MySQL リレーショナルデータベース管理システムのプログラミング API の間に"
#~ "立って、仲介を行なうインターフェイスです。 MySQL 側の API で提供されている"
#~ "ほとんどの機能に対応してますが、ごく少数の未対応機能があります。これは主に"
#~ "必要とする人がいなかったことによるものです :-)"

#~ msgid ""
#~ "The DBI is a database access module for the Perl programming language. It "
#~ "defines a set of methods, variables, and conventions that provide a "
#~ "consistent database interface, independent of the actual database being "
#~ "used.\n"
#~ "\n"
#~ "It is important to remember that the DBI is just an interface. The DBI is "
#~ "a layer of \"glue\" between an application and one or more database "
#~ "_driver_ modules. It is the driver modules which do most of the real "
#~ "work. The DBI provides a standard interface and framework for the drivers "
#~ "to operate within.\n"
#~ "\n"
#~ "This document often uses terms like _references_, _objects_, _methods_. "
#~ "If you're not familiar with those terms then it would be a good idea to "
#~ "read at least the following perl manuals first: the perlreftut manpage, "
#~ "the perldsc manpage, the perllol manpage, and the perlboot manpage."
#~ msgstr ""
#~ "DBI は Perl プログラミング言語向けのデータベースアクセスモジュールです。複"
#~ "数のメソッドや変数、決まり事などを定義して、実際に使用するデータベースシス"
#~ "テムとは別に一貫したインターフェイスを提供します。\n"
#~ "\n"
#~ "DBI は単なるインターフェイスであることにご注意ください。 DBI はアプリケー"
#~ "ションと複数のデータベース _ドライバ_ モジュールとの間を仲介するものであ"
#~ "り、実際の処理のほとんどはドライバモジュール側で行ないます。 DBI は、ドラ"
#~ "イバに対して標準インターフェイスとフレームワークを提供し、内部処理を規定し"
#~ "ています。\n"
#~ "\n"
#~ "本文書では、 _参照_, _オブジェクト_, _メソッド_ などの用語をしばしば使用し"
#~ "ています。これらの用語に詳しくない場合は、まず下記に示す Perl マニュアルを"
#~ "お読みになることをお勧めします: perlreftut マニュアルページ, perldsc マ"
#~ "ニュアルページ, perllol マニュアルページ, perlboot マニュアルページ"

#~ msgid "Accurately serialize a data structure as Perl code."
#~ msgstr "Perl コードで正確にデータ構造をシリアライズするモジュール"

#~ msgid "A selection of utilities for data and data types"
#~ msgstr "データやデータ型に対する様々なユーティリティ集"

#~ msgid ""
#~ "This module provides utility functions for data and data types, including "
#~ "functions for subroutines and symbol table hashes (stashes).\n"
#~ "\n"
#~ "The implementation of this module is both Pure Perl and XS, so if you "
#~ "have a C compiler, all the functions this module provides are really "
#~ "faster.\n"
#~ "\n"
#~ "There are many benchmarks in the _DIST-DIR/benchmark/_ directory."
#~ msgstr ""
#~ "このモジュールはデータやデータ型に対するユーティリティ関数を提供するモ"
#~ "ジュールで、サブルーチンやシンボルテーブルハッシュ (stash) 向けの関数を提"
#~ "供しています。\n"
#~ "\n"
#~ "このモジュールの実装には純粋 Perl と XS の両方が用意されていて、 C コンパ"
#~ "イラが存在していれば、このモジュールのすべての機能が高速に動作するように"
#~ "なっています。\n"
#~ "\n"
#~ "_DIST-DIR/benchmark/_ ディレクトリには、多数のベンチマーク結果が記録されて"
#~ "います。"

#~ msgid "Perl Date-Calc Module"
#~ msgstr "Perl 日付計算モジュール"

#~ msgid ""
#~ "This package consists of a C library and a Perl module (which uses the C "
#~ "library, internally) for all kinds of date calculations based on the "
#~ "Gregorian calendar (the one used in all western countries today), thereby "
#~ "complying with all relevant norms and standards: ISO/R 2015-1971, DIN "
#~ "1355 and, to some extent, ISO 8601 (where applicable).\n"
#~ "\n"
#~ "(See also http://www.engelschall.com/u/sb/download/Date-Calc/DIN1355/ for "
#~ "a scan of part of the \"DIN 1355\" document (in German)).\n"
#~ "\n"
#~ "The module of course handles year numbers of 2000 and above correctly "
#~ "(\"Year 2000\" or \"Y2K\" compliance) -- actually all year numbers from 1 "
#~ "to the largest positive integer representable on your system (which is at "
#~ "least 32767) can be dealt with.\n"
#~ "\n"
#~ "Note that this package EXTRAPOLATES the Gregorian calendar BACK until the "
#~ "year 1 A.D. -- even though the Gregorian calendar was only adopted in "
#~ "1582 by most (not all) European countries, in obedience to the "
#~ "corresponding decree of catholic pope Gregor I in that year.\n"
#~ "\n"
#~ "Some (mainly protestant) countries continued to use the Julian calendar "
#~ "(used until then) until as late as the beginning of the 20th century.\n"
#~ "\n"
#~ "Finally, note that this package is not intended to do everything you "
#~ "could ever imagine automagically for you; it is rather intended to serve "
#~ "as a toolbox (in the best of UNIX spirit and traditions) which should, "
#~ "however, always get you where you want to go."
#~ msgstr ""
#~ "このパッケージは C ライブラリと Perl モジュール (内部的に C ライブラリを使"
#~ "用しています) から成り、グレゴリオ暦 (全ての西欧諸国で今日使用されていま"
#~ "す) をベースとした全種類の日付計算 に対応しています。 また、このパッケージ"
#~ "は関連する全ての標準や基準に対応しています: ISO/R 2015-1971, DIN 1355 とい"
#~ "くつかの拡張, ISO 8601 (適用可能であれば)\n"
#~ "\n"
#~ "(\"DIN 1355\" ドキュメント (ドイツ語) の一部分のスキャンについて、詳細は "
#~ "http://www.engelschall.com/u/sb/download/Date-Calc/DIN1355/ をお読みくださ"
#~ "い)\n"
#~ "\n"
#~ "もちろん、このモジュールは 2000 年以降に正しく対応しています (\"2000 年問"
#~ "題\" とか \"Y2K\" 準拠などとも呼ばれます) -- 実際には 1 より大きい年か"
#~ "ら、 お使いのシステムで利用可能な最大の整数まで (少なくとも 32767 年まで) "
#~ "を扱うことができます。\n"
#~ "\n"
#~ "なお、本パッケージはグレゴリオ暦で西暦 1 年までを推定しています\n"
#~ "-- ただし、グレゴリオ暦は多くの (全てではありませんが) ヨーロッパ諸国で "
#~ "1582 年に採用されたもので、その年のカトリック教皇 Gregor I の布告に 従うこ"
#~ "とで成立したものです。\n"
#~ "\n"
#~ "いくつかの (主にプロテスタント) 諸国は、遅くとも 20 世紀初頭まではユリウス"
#~ "歴を 使用していました。\n"
#~ "\n"
#~ "最後に、このパッケージは想像するほど魔法のような何かをしてくれるようなもの"
#~ "ではありません; これは主にツールボックス (UNIX の精神と伝統の最もよいもの"
#~ "ですが) となることを 目指しています。つまり、やりたいことをやれる、という"
#~ "意味です。"

#~ msgid ""
#~ "Date::Tiny is a member of the DateTime::Tiny suite of time modules.\n"
#~ "\n"
#~ "It implements an extremely lightweight object that represents a date, "
#~ "without any time data."
#~ msgstr ""
#~ "Date::Tiny は時刻モジュールの DateTime::Tiny スイートのメンバーです。\n"
#~ "\n"
#~ "時刻無しで日付だけを表わす、非常に軽量なオブジェクトを実装しています。"

#~ msgid ""
#~ "DateTime is a class for the representation of date/time combinations, and "
#~ "is part of the Perl DateTime project. For details on this project please "
#~ "see the http://datetime.perl.org/ manpage. The DateTime site has a FAQ "
#~ "which may help answer many \"how do I do X?\" questions. The FAQ is at "
#~ "the http://datetime.perl.org/wiki/datetime/page/FAQ manpage.\n"
#~ "\n"
#~ "It represents the Gregorian calendar, extended backwards in time before "
#~ "its creation (in 1582). This is sometimes known as the \"proleptic "
#~ "Gregorian calendar\". In this calendar, the first day of the calendar "
#~ "(the epoch), is the first day of year 1, which corresponds to the date "
#~ "which was (incorrectly) believed to be the birth of Jesus Christ.\n"
#~ "\n"
#~ "The calendar represented does have a year 0, and in that way differs from "
#~ "how dates are often written using \"BCE/CE\" or \"BC/AD\".\n"
#~ "\n"
#~ "For infinite datetimes, please see the DateTime::Infinite module."
#~ msgstr ""
#~ "DateTime は日付と時刻の組み合わせを表現するためのクラスで、 Perl の "
#~ "DateTime プロジェクトの一部です。このプロジェクトの詳細については、 "
#~ "http://datetime.perl.org/ をご覧ください。 DateTime のサイトには、 \"これ"
#~ "をやるにはどうすれば？\" のような質問を含む FAQ が公開されています。 FAQ "
#~ "は http://datetime.perl.org/wiki/datetime/page/FAQ にあります。\n"
#~ "\n"
#~ "このクラスはグレゴリオ暦を表しているものですが、その暦が作られる (1582 "
#~ "年) よりも前の日時も表現することができます。これは \"先発グレゴリオ暦\" と"
#~ "しても知られています。この暦では、カレンダーの最初の日は西暦 1 年の最初の"
#~ "日となり、これはイエスキリストの誕生日として (間違って) 信じられてきた日に"
#~ "あたります。\n"
#~ "\n"
#~ "なお、この暦には西暦 0 年も規定されていますが、 \"BCE/CE\" や \"BC/AD\" を"
#~ "利用した日付形式とは異なるものになります。\n"
#~ "\n"
#~ "無制限の日付表現については DateTime::Infinite モジュールをご覧ください。"

#~ msgid ""
#~ "the Devel::Declare manpage can install subroutines called declarators "
#~ "which locally take over Perl's parser, allowing the creation of new "
#~ "syntax.\n"
#~ "\n"
#~ "This document describes how to create a simple declarator."
#~ msgstr ""
#~ "Devel::Declare はローカルで Perl のパーサを乗っ取ることのできるデコレータ"
#~ "と呼ばれるサブルーチンをインストールすることで、新しい文法の作成を行なうこ"
#~ "とができるものです。\n"
#~ "\n"
#~ "この文書では、シンプルなデコレータについて作成方法を説明しています。"

#~ msgid ""
#~ "The intent of File::ShareDir is to provide a companion to Class::"
#~ "Inspector and File::HomeDir, modules that take a process that is well-"
#~ "known by advanced Perl developers but gets a little tricky, and make it "
#~ "more available to the larger Perl community.\n"
#~ "\n"
#~ "Quite often you want or need your Perl module (CPAN or otherwise) to have "
#~ "access to a large amount of read-only data that is stored on the file-"
#~ "system at run-time.\n"
#~ "\n"
#~ "On a linux-like system, this would be in a place such as /usr/share, "
#~ "however Perl runs on a wide variety of different systems, and so the use "
#~ "of any one location is unreliable.\n"
#~ "\n"
#~ "Perl provides a little-known method for doing this, but almost nobody is "
#~ "aware that it exists. As a result, module authors often go through some "
#~ "very strange ways to make the data available to their code.\n"
#~ "\n"
#~ "The most common of these is to dump the data out to an enormous Perl data "
#~ "structure and save it into the module itself. The result are enormous "
#~ "multi-megabyte .pm files that chew up a lot of memory needlessly.\n"
#~ "\n"
#~ "Author:\n"
#~ "-------     Adam Kennedy <adamk@cpan.org>"
#~ msgstr ""
#~ "File::ShareDir の目的は、 Class::Inspector や File::HomeDir に対する手引き"
#~ "となることです。これらのモジュールは Perl を利用する熟練した開発者がよく知"
#~ "るものですが、少し奇妙な仕組みであるため、より広い Perl のコミュニティに向"
#~ "けて作られています。\n"
#~ "\n"
#~ "ファイルシステム内に保存された巨大なデータファイルに対して、読み込みのみの"
#~ "高速なアクセスを行なう Perl モジュール (CPAN など) は、よく必要とされるも"
#~ "のです。\n"
#~ "\n"
#~ "Linux 系のシステムでは、これらは /usr/share などのディレクトリに配置されま"
#~ "すが、Perl は幅広いシステムで使用されるものであるため、このディレクトリを"
#~ "そのまま利用することはできません。\n"
#~ "\n"
#~ "Perl はこれを行なうために少し知られた機能を提供していますが、それが存在し"
#~ "ていることはあまり知られていません。結果として、モジュールの作者はコード内"
#~ "からそれらの共有データを使用する際、奇妙な方法を実装して実現している状況で"
#~ "す。\n"
#~ "\n"
#~ "よくあるやり方としてのは、主に巨大な Perl のデータ構造を出力し、モジュール"
#~ "内に保存するようなやり方です。出力結果は巨大な .pm ファイルになるため、不"
#~ "要なメモリを対象に消費することになってしまいます。\n"
#~ "\n"
#~ "作者:\n"
#~ "-----     Adam Kennedy <adamk@cpan.org>"

#~ msgid ""
#~ "Objects of the HTML::Parser class will recognize markup and separate it "
#~ "from plain text (alias data content) in HTML documents. As different "
#~ "kinds of markup and text are recognized, the corresponding event handlers "
#~ "are invoked.\n"
#~ "\n"
#~ "HTML::Parser is not a generic SGML parser. We have tried to make it able "
#~ "to deal with the HTML that is actually \"out there\", and it normally "
#~ "parses as closely as possible to the way the popular web browsers do it "
#~ "instead of strictly following one of the many HTML specifications from "
#~ "W3C. Where there is disagreement, there is often an option that you can "
#~ "enable to get the official behaviour.\n"
#~ "\n"
#~ "The document to be parsed may be supplied in arbitrary chunks. This makes "
#~ "on-the-fly parsing as documents are received from the network possible.\n"
#~ "\n"
#~ "If event driven parsing does not feel right for your application, you "
#~ "might want to use HTML::PullParser. This is an HTML::Parser subclass that "
#~ "allows a more conventional program structure."
#~ msgstr ""
#~ "HTML::Parser のクラスオブジェクトは、 HTML ドキュメント内に書かれている"
#~ "マークアップを認識して、それらを純粋なテキストデータに分割することができま"
#~ "す。複数種類のマークアップとテキストを解釈できるようにするため、それぞれ関"
#~ "連付けられたイベントハンドラを呼び出す形式になっています。\n"
#~ "\n"
#~ "HTML::Parser は汎用の SGML パーサーではありません。まさに \"向こう側\" の"
#~ "存在である HTML を取り扱うことができるようにするために努力を重ね、 W3C が"
#~ "提供する多数の HTML 仕様に厳密に準拠するのではなく、有名な Webブラウザが行"
#~ "なう方法にできる限り近い結果を出すようにしてあります。そのため各種の不適合"
#~ "性が存在しますが、それは本来の動作を行なうようにするオプションで提供してい"
#~ "ます。\n"
#~ "\n"
#~ "ドキュメントは任意の長さのブロックに分割されます。これにより、ネットワーク"
#~ "から受信してその場でドキュメントを解釈することもできる仕組みになっていま"
#~ "す。\n"
#~ "\n"
#~ "イベント駆動型の仕組みがお使いのアプリケーションには合わないとお感じの場合"
#~ "は、 HTML::PullParser をお使いください。これは HTML::Parser のサブクラス"
#~ "で、より便利なプログラム構造を提供しています。"

#~ msgid ""
#~ "This module provides routines for capturing STDOUT and STDERR from perl "
#~ "subroutines, forked system calls (e.g. system(), fork()) and from XS or C "
#~ "modules."
#~ msgstr ""
#~ "このモジュールは、 Perl のサブルーチンや fork されたシステムコール (例: "
#~ "'system()', 'fork()') のほか、 XS や C モジュールからの標準出力 (STDOUT) "
#~ "および標準エラー出力 (STDERR) をキャプチャするためのルーチンを提供します。"

#~ msgid "Log to files that archive/rotate themselves"
#~ msgstr "アーカイブ処理やローテート処理を行なうログ機能"

#~ msgid "Use the GMP library for Math::BigInt routines"
#~ msgstr "Math::BigInt ルーチンでの GMP ライブラリの使用"

#~ msgid "Perl interface to the Domain Name System"
#~ msgstr "ドメインネームシステムに対する Perl インターフェイス"

#~ msgid ""
#~ "Net::DNS is a collection of Perl modules that act as a Domain Name System "
#~ "(DNS) resolver. It allows the programmer to perform DNS queries that are "
#~ "beyond the capabilities of 'gethostbyname' and 'gethostbyaddr'.\n"
#~ "\n"
#~ "The programmer should be somewhat familiar with the format of a DNS "
#~ "packet and its various sections. See RFC 1035 or _DNS and BIND_ (Albitz & "
#~ "Liu) for details."
#~ msgstr ""
#~ "Net::DNS はドメインネームシステム (DNS) の解決器として動作する Perl モ"
#~ "ジュールです。プログラマに対して DNS の問い合わせ機能を提供し、 "
#~ "'gethostbyname' や 'gethostbyaddr' が提供する以上のことを行なうことができ"
#~ "ます。\n"
#~ "\n"
#~ "なお、プログラムを記述する際には DNS パケットの書式とセクションに関する幾"
#~ "分かの知識が必要となります。詳しくは RFC 1035 または _DNS and BIND_ "
#~ "(Albitz & Liu 著作) をお読みください。"

#~ msgid ""
#~ "There is a related module called Net::SSLeay::Handle included in this "
#~ "distribution that you might want to use instead. It has its own pod "
#~ "documentation."
#~ msgstr ""
#~ "この配布物には、 Net::SSLeay::Handle と呼ばれる代用のための関連モジュール"
#~ "が含まれています。詳しくは POD ドキュメンテーションをお読みください。"

#~ msgid ""
#~ "The Params::Validate module allows you to validate method or function "
#~ "call parameters to an arbitrary level of specificity. At the simplest "
#~ "level, it is capable of validating the required parameters were given and "
#~ "that no unspecified additional parameters were passed in.\n"
#~ "\n"
#~ "It is also capable of determining that a parameter is of a specific type, "
#~ "that it is an object of a certain class hierarchy, that it possesses "
#~ "certain methods, or applying validation callbacks to arguments."
#~ msgstr ""
#~ "Params::Validate モジュールは、任意のレベルで特性を設定できる、メソッドお"
#~ "よび関数の呼び出しパラメータ検証機能を提供します。もっともシンプルなレベル"
#~ "では、必要なパラメータが与えられているかどうかを検証し、不正な追加パラメー"
#~ "タが設定されていないかどうかを確認することができます。\n"
#~ "\n"
#~ "また、パラメータが正しい型であるかどうかを確認することもできます。たとえば"
#~ "それは特定のクラス階層であるかどうかや、特定のメソッドを保有しているかどう"
#~ "かを確認できるほか、検証コールバックをパラメータに対して適用することもでき"
#~ "ます。"

#~ msgid ""
#~ "Parse::Yapp (Yet Another Perl Parser compiler) is a collection of modules "
#~ "that let you generate and use yacc like thread safe (reentrant) parsers "
#~ "with perl object oriented interface."
#~ msgstr ""
#~ "Parse::Yapp (Yet Another Perl Parser compiler) は、 Perl のオブジェクト指"
#~ "向インターフェイスを 持つ yacc に似たスレッドセーフ (再入可能) なパーサを"
#~ "生成し使用することができる、 モジュール集です。"

#~ msgid ""
#~ "PlRPC (Perl RPC) is a package for implementing servers and clients that "
#~ "are entirely written in Perl. The name is borrowed from Sun's RPC (Remote "
#~ "Procedure Call), but it could as well be RMI like Java's Remote Method "
#~ "Interface, because PlRPC gives you the complete power of Perl's OO "
#~ "framework in a very simple manner."
#~ msgstr ""
#~ "PlRPC (Perl RPC) は、全てを Perl で記述することのできるサーバやクライアン"
#~ "トを実装するためのパッケージです。名称は Sun の RPC (Remote Procedure "
#~ "Call) から取られていますが、 PlRPC はとてもシンプルな方法で Perl のオブ"
#~ "ジェクト指向を用いた能力を発揮しますので、 Java の Remote Method "
#~ "Interface (RMI) としても動作することができます。"

#~ msgid ""
#~ "String::Approx lets you match and substitute strings approximately. With "
#~ "this you can emulate errors: typing errorrs, speling errors, closely "
#~ "related vocabularies (colour color), genetic mutations (GAG ACT), "
#~ "abbreviations (McScot, MacScot).\n"
#~ "\n"
#~ "NOTE: String::Approx suits the task of string matching, not string "
#~ "comparison, and it works for strings, not for text.\n"
#~ "\n"
#~ " Authors:\tJarkko Hietaniemi <jhi@iki.fi>"
#~ msgstr ""
#~ "String::Approx は文字列のマッチングと置換処理を曖昧に行ないます。これによ"
#~ "り、下記のようなエラーを疑似することができます: 入力ミス、スペルミス、近い"
#~ "表現 (colour と color など), 汎用ミューテーション (GAG と ACT など), 略称 "
#~ "(McScot と MacScot など) 。\n"
#~ "\n"
#~ "注意: String::Approx は文字列のマッチング処理にのみ適切な仕組みであり、比"
#~ "較には適しません。また、テキストではなく文字列に対してのみ動作します。\n"
#~ "\n"
#~ " Authors:Jarkko Hietaniemi <jhi@iki.fi>"

#~ msgid "(re)name a sub"
#~ msgstr "サブルーチンの名前 (変更)"

#~ msgid "Test strings and data structures and show differences if not ok."
#~ msgstr ""
#~ "文字列やデータ構造をテストして問題があれば差異を表示するモジュールです。"

#~ msgid "Interface to read and parse BibTeX files"
#~ msgstr "BibTeX ファイルの読み込みと処理のインターフェイス"

#~ msgid ""
#~ "The 'Text::BibTeX' module serves mainly as a high-level introduction to "
#~ "the 'Text::BibTeX' library, for both code and documentation purposes. The "
#~ "code loads the two fundamental modules for processing BibTeX files "
#~ "('Text::BibTeX::File' and 'Text::BibTeX::Entry'), and this documentation "
#~ "gives a broad overview of the whole library that isn't available in the "
#~ "documentation for the individual modules that comprise it.\n"
#~ "\n"
#~ "In addition, the 'Text::BibTeX' module provides a number of miscellaneous "
#~ "functions that are useful in processing BibTeX data (especially the kind "
#~ "that comes from bibliographies as defined by BibTeX 0.99, rather than "
#~ "generic database files). These functions don't generally fit in the "
#~ "object-oriented class hierarchy centred around the 'Text::BibTeX::Entry' "
#~ "class, mainly because they are specific to bibliographic data and operate "
#~ "on generic strings (rather than being tied to a particular BibTeX entry). "
#~ "These are also documented here, in the \"MISCELLANEOUS FUNCTIONS\" "
#~ "manpage.\n"
#~ "\n"
#~ "Note that every module described here begins with the 'Text::BibTeX' "
#~ "prefix. For brevity, I have dropped this prefix from most class and "
#~ "module names in the rest of this manual page (and in most of the other "
#~ "manual pages in the library)."
#~ msgstr ""
#~ "'Text::BibTeX' モジュールは主に、コード向けおよびドキュメンテーション向け"
#~ "のライブラリである 'Text::BigTeX' ライブラリに対して、高レベルな導入部とし"
#~ "て動作するものです。コードは BibTeX ファイルを処理するために 2 種類の基本"
#~ "モジュール ('Text::BibTeX::File' および 'Text::BibTeX::Entry') を読み込む"
#~ "仕組みで、このドキュメンテーションでは、含まれる個別のモジュールに対するド"
#~ "キュメンテーションには掲載されていないような、広範囲の概要を説明していま"
#~ "す。\n"
#~ "\n"
#~ "これに加えて、 'Text::BibTeX' モジュールは、 BibTeX データを処理する際に便"
#~ "利な多数の様々な関数 (汎用データベースファイルではなく、特に BibTeX 0.99 "
#~ "で定義されている文献情報からのもの)  も提供しています。これらの関数は、主"
#~ "に文献データ固有のものであったり、 (特定の BibTeX 項目に結びつくものではな"
#~ "く) 汎用の文字列に対して動作するものであることから、  'Text::BigTeX::"
#~ "Entry' クラスに代表されるようなオブジェクト指向のクラス構造にはうまく当て"
#~ "はまりません。これらも本ドキュメンテーションで記述しています。詳しくは "
#~ "\"MISCELLANEOUS FUNCTIONS\" をお読みください。\n"
#~ "\n"
#~ "なお、ここで説明している各モジュールは 'Text::BibTeX' の接頭辞で始まりま"
#~ "す。モジュール名を簡潔にする理由から、多くのクラスやモジュール名の説明 (お"
#~ "よびライブラリ内のマニュアルページ) ではこの接頭辞は省略してありますので、"
#~ "ご注意ください。"

#~ msgid "String of Unicode characters (UCS2/UTF16)"
#~ msgstr "Unicode 文字列 (UCS2/UTF16)"

#~ msgid ""
#~ "A Unicode::String object represents a sequence of Unicode characters. The "
#~ "Unicode Standard is a fixed-width, uniform encoding scheme for written "
#~ "characters and text. This encoding treats alphabetic characters, "
#~ "ideographic characters, and symbols identically, which means that they "
#~ "can be used in any mixture and with equal facility. Unicode is modeled on "
#~ "the ASCII character set, but uses a 16-bit encoding to support full "
#~ "multilingual text."
#~ msgstr ""
#~ "Unicode::String オブジェクトは、 Unicode 文字の並びを表わします。 Unicode "
#~ "標準は、その文字やテキストに対する固定幅で不変のコード体系を持っていま"
#~ "す。 このコード体系はアルファベットや表意文字、記号などの文字を扱います。 "
#~ "これにより、これらを混在させて 同一の手段で使うことができるようになりま"
#~ "す。 Unicode は ASCII キャラクタセットをモデルにしていますが、完全な多言語"
#~ "テキストに対応するのに 16 ビットエンコードを使用しています。"

#~ msgid ""
#~ "Magic is Perl's way of enhancing variables. This mechanism lets the user "
#~ "add extra data to any variable and hook syntactical operations (such as "
#~ "access, assignment or destruction) that can be applied to it. With this "
#~ "module, you can add your own magic to any variable without having to "
#~ "write a single line of XS.\n"
#~ "\n"
#~ "You'll realize that these magic variables look a lot like tied variables. "
#~ "It is not surprising, as tied variables are implemented as a special kind "
#~ "of magic, just like any 'irregular' Perl variable : scalars like '$!', "
#~ "'$(' or '$^W', the '%ENV' and '%SIG' hashes, the '@ISA' array, 'vec()' "
#~ "and 'substr()' lvalues, the threads::shared manpage variables... They all "
#~ "share the same underlying C API, and this module gives you direct access "
#~ "to it."
#~ msgstr ""
#~ "Magic とは変数を拡張するための Perl の仕組みです。これはユーザに対して、任"
#~ "意の変数内に追加データを設定し、スクリプト内での操作 (たとえばアクセスや代"
#~ "入、破壊など) をフックできるようになります。このモジュールを利用すること"
#~ "で、XS の単一行を記述したりすることなく、独自の Magic を任意の変数に設定す"
#~ "ることができます。\n"
#~ "\n"
#~ "これらの Magic 変数はタイ変数によく似た仕組みであることがわかるはずです。"
#~ "これは驚くようなことではありません。タイ変数も Magic の特殊系として実装さ"
#~ "れているからです。たとえば下記のような 'イレギュラー' な Perl 変数がありま"
#~ "す: '$!', '$(', '$^W' のようなスカラー変数や '%ENV' と '%SIG' のようなハッ"
#~ "シュ、 '@ISA' のような配列や 'vec()' と 'substr()' のような lvalue 、 "
#~ "threads::shared の変数など。これらはすべて同じ C 言語 API をベースにしてい"
#~ "て、このモジュールからそれらに直接アクセスできるようになります。"

#~ msgid "Perl extension interface for libcurl"
#~ msgstr "libcurl 向け Perl 拡張インターフェイス"

#~ msgid "WWW::Curl is a Perl extension interface for libcurl."
#~ msgstr "WWW::Curl は libcurl に対する Perl の拡張インターフェイスです。"

#~ msgid ""
#~ "This module implements a Perl interface to the Gnome libxml2 library "
#~ "which provides interfaces for parsing and manipulating XML files. This "
#~ "module allows Perl programmers to make use of the highly capable "
#~ "validating XML parser and the high performance DOM implementation."
#~ msgstr ""
#~ "このモジュールは、 XML ファイルを処理したり操作したりするためのインター"
#~ "フェイスを提供する、 GNOME libxml2 ライブラリに対する Perl のインターフェ"
#~ "イスを実装しています。このモジュールは Perl プログラマに対して、高度な検証"
#~ "機能や高性能な DOM 実装を持つ XML パーサを提供します。"

#~ msgid "A simple generic namespace support class"
#~ msgstr "シンプルな汎用ネームスペースサポートクラス"

#~ msgid ""
#~ "This module offers a simple way to process namespaced XML names (unames) "
#~ "from within any application that may need them. It also helps maintain a "
#~ "prefix to namespace URI map, and provides a number of basic checks."
#~ msgstr ""
#~ "このモジュールは、ネームスペースを必要とするアプリケーションから、 ネーム"
#~ "スペース付きの XML (unames) を処理するための シンプルな方法を提供します。"
#~ "プレフィクスからネームスペース URI への 変換を管理する機能や、いくつかの基"
#~ "本的なチェック機能も提供されています。"

#~ msgid ""
#~ "This module provides ways to parse XML documents. It is built on top of  "
#~ "XML::Parser::Expat, which is a lower level interface to James Clark's "
#~ "expat  library. Each call to one of the parsing methods creates a new "
#~ "instance of  XML::Parser::Expat which is then used to parse the document. "
#~ "Expat options may  be provided when the XML::Parser object is created. "
#~ "These options are then  passed on to the Expat object on each parse call. "
#~ "They can also be given as  extra arguments to the parse methods, in which "
#~ "case they override options  given at XML::Parser creation time.\n"
#~ "\n"
#~ "The behavior of the parser is controlled either by \"Style\" and/or "
#~ "\"Handlers\"  options, or by \"setHandlers\" method. These all provide "
#~ "mechanisms for  XML::Parser to set the handlers needed by XML::Parser::"
#~ "Expat. If neither  Style nor Handlers are specified, then parsing just "
#~ "checks the document  for being well-formed.\n"
#~ "\n"
#~ "When underlying handlers get called, they receive as their first "
#~ "parameter  the Expat object, not the Parser object.\n"
#~ "\n"
#~ "You will find examples in /usr/share/doc/packages/perl-XML-Parser/"
#~ "samples.  For documentation read the XML::Parser and XML::Parser::Expat "
#~ "man pages."
#~ msgstr ""
#~ "このモジュールは XML ドキュメントを処理する手段を提供しています。 XML::"
#~ "Parser::Expat と呼ばれる James Clark 氏が開発したexpat ライブラリをベース"
#~ "に作成されています。 XML の解析メソッドのうちのいずれかを呼び出すと XML::"
#~ "Parser::Expat に対する新しいインスタンスが作成され、そこからドキュメントの"
#~ "解析が始まります。 expat オプションは XML::Parser オブジェクトが作成された"
#~ "際に設定できるようになります。これらのオプションは各解析処理の呼び出しの際"
#~ "に、 expat オブジェクトに渡されます。オプションは解析メソッドのパラメータ"
#~ "として渡すこともでき、この際に渡したパラメータは XML::Parser のインスタン"
#~ "スを作成した際に指定したオプションを上書きします。\n"
#~ "\n"
#~ "解析処理の振る舞いは、それぞれ \"スタイル\" や \"ハンドラ\" と呼ばれるオプ"
#~ "ションで制御することができるほか、 \"setHandlers\"メソッドでも制御すること"
#~ "ができます。これらすべては XML::Parser に対してメカニズムを提供するもの"
#~ "で、 XML::Parser::Expat が必要とするハンドラを設定するためのものです。スタ"
#~ "イルやハンドラを何も指定しない場合は、ドキュメントが正しい形式になっている"
#~ "かどうかを単純にチェックするだけの動作をします。\n"
#~ "\n"
#~ "設定したハンドラが呼び出されると、ハンドラ側では最初のパラメータとして "
#~ "Parser のオブジェクトではなく、expat のオブジェクトを受け取ります。\n"
#~ "\n"
#~ "サンプルについては /usr/share/doc/packages/perl-XML-Parser/samples を、ド"
#~ "キュメンテーションについては XML::Parser, XML::Parser::Expat の各マニュア"
#~ "ルページをお読みください。"

#~ msgid ""
#~ "Provides a way to convert xml data into a predefined perl data structure "
#~ "and back to xml. Unlike with modules like XML::Simple it is an error if "
#~ "the xml data does not match the provided skeleton (the \"dtd\"). Another "
#~ "advantage is that the order of the attributes and elements is taken from "
#~ "the dtd when converting back to xml."
#~ msgstr ""
#~ "XML データと事前定義した Perl のデータ構造との間で、相互に変換するモジュー"
#~ "ルです。 XML::Simple 等とは異なり、 XML データが提示されたスケルトン "
#~ "(\"dtd\") と異なる場合は、エラーとして扱われます。このモジュールを利用する"
#~ "もう 1 つの利点としては、 XML に書き戻す際、属性や要素の順序が dtd から取"
#~ "られる点にあります。"

#~ msgid "A set of modules for parsing and evaluating XPath statements"
#~ msgstr "XPath ステートメントの処理と評価のモジュールセット"

#~ msgid ""
#~ "This module aims to comply exactly to the XPath specification at http://"
#~ "www.w3.org/TR/xpath and yet allow extensions to be added in the form of "
#~ "functions. Modules such as XSLT and XPointer may need to do this as they "
#~ "support functionality beyond XPath."
#~ msgstr ""
#~ "このモジュールは、 XPath 仕様 (http://www.w3.org/TR/xpath) に正しく準拠す"
#~ "ることを目指していて、関数の形態で拡張を追加することもできるようになってい"
#~ "ます。 XSLT や XPointer のようなモジュールは、 XPath を除く機能をサポート"
#~ "するにあたって、本モジュールが必要になる場合があります。"

#~ msgid "YAML::LibYAML Perl module"
#~ msgstr "YAML::LibYAML Perl モジュール"

#~ msgid ""
#~ "Kirill Siminov's libyaml is arguably the best YAML implementation. The C "
#~ "library is written precisely to the YAML 1.1 specification. It was "
#~ "originally bound to Python and was later bound to Ruby.\n"
#~ "\n"
#~ "This module is a Perl XS binding to libyaml which offers Perl the best "
#~ "YAML support to date.\n"
#~ "\n"
#~ "This module exports the functions Dump and Load. These functions are "
#~ "intended to work exactly like YAML.pm's corresponding functions."
#~ msgstr ""
#~ "Kirill Siminov 氏作成の libyaml は、 YAML の最適な実装です。 C 言語ライブ"
#~ "ラリは YAML 1.1 仕様を正確に記述しています。元々は Python にバインドするた"
#~ "めに作成されましたが、 Ruby にもバインドできるようになりました。\n"
#~ "\n"
#~ "このモジュールは Perl XS バインディングで、 Perl に対して最良かつ最新の "
#~ "YAML サポートを提供します。\n"
#~ "\n"
#~ "このモジュールは Dump, Load の各関数を公開しています。これらの関数は YAML."
#~ "pm で対応する関数のように正確に動作します。"

#~ msgid ""
#~ "The autobox pragma allows methods to be called on integers, floats, "
#~ "strings, arrays, hashes, and code references in exactly the same manner "
#~ "as blessed references.\n"
#~ "\n"
#~ "The autoboxing is transparent: boxed values are not blessed into their "
#~ "(user-defined) implementation class (unless the method elects to bestow "
#~ "such a blessing) - they simply use its methods as though they are.\n"
#~ "\n"
#~ "The classes (packages) into which the native types are boxed are fully "
#~ "configurable. By default, a method invoked on a non-object value is "
#~ "assumed to be defined in a class whose name corresponds to the 'ref()' "
#~ "type of that value - or SCALAR if the value is a non-reference."
#~ msgstr ""
#~ "autobox pragma は整数や浮動小数、文字列や配列、ハッシュやコード参照などを"
#~ "ブレスと全く同じやり方で呼び出すことができます。\n"
#~ "\n"
#~ "autobox は透過的に動作します: ボックス内の値はそれらの (ユーザ定義の) 実装"
#~ "クラス内にブレスされることはなく (メソッドがそのようなブレス処理を意図的に"
#~ "選択しない限り) 、単にメソッドを呼び出すだけの処理にすることができます。\n"
#~ "\n"
#~ "ネイティブな型がボックス化されているクラス (パッケージ) は、全てを設定する"
#~ "ことができます。既定では非オブジェクト値で実行されたメソッドは、その値の "
#~ "'ref()' 型の関係づけられた名前のクラスで定義されているものと判断します。そ"
#~ "れ以外の場合は、値は非参照のスカラとして呼び出されます。"

#~ msgid "Lexically disable autovivification."
#~ msgstr "autovivification を文法から無効化するモジュール"

#~ msgid "Message handling functions"
#~ msgstr "メッセージ処理関数"

#~ msgid ""
#~ "The gettext module permits access from perl to the gettext() family of "
#~ "functions for retrieving message strings from databases constructed to "
#~ "internationalize software.\n"
#~ "\n"
#~ "gettext(), dgettext(), and dcgettext() attempt to retrieve a string "
#~ "matching their 'msgid' parameter within the context of the current "
#~ "locale. dcgettext() takes the message's category and the text domain as "
#~ "parameters while dcgettext() defaults to the LC_MESSAGES category and "
#~ "gettext() defaults to LC_MESSAGES and uses the current text domain. If "
#~ "the string is not found in the database, then 'msgid' is returned.\n"
#~ "\n"
#~ "textdomain() sets the current text domain and returns the previously "
#~ "active domain.\n"
#~ "\n"
#~ "_bindtextdomain(domain, dirname)_ instructs the retrieval functions to "
#~ "look for the databases belonging to domain 'domain' in the directory "
#~ "'dirname'"
#~ msgstr ""
#~ "gettext モジュールは Perl のコードから gettext() ファミリの関数を呼び出"
#~ "し、国際化ソフトウエア向けに構築されたデータベースから文字列を取得する機能"
#~ "を提供します。\n"
#~ "\n"
#~ "gettext(), dgettext(), dcgettext() はいずれも、 'msgid' パラメータに該当す"
#~ "る文字列を現在のロケールに対して取得するためのものです。 dcgettext() は"
#~ "メッセージの分類とテキスト領域をパラメータとして受け取るもので、 "
#~ "dcgettext() は既定では LC_MESSAGESの分類を、 gettext() は LC_MESSAGES と現"
#~ "在のテキスト領域を対象にして取得します。データベース内に該当の文字列が見つ"
#~ "からない場合は、 'msgid' がそのまま返されます。\n"
#~ "\n"
#~ "textdomain() は現在のテキスト領域を設定し、それまで有効だった領域を返却し"
#~ "ます。\n"
#~ "\n"
#~ "_bindtextdomain(domain, dirname)_ は取得関数に対して、ディレクトリ "
#~ "'dirname'内の領域 'domain' に属するものを参照するように指定します。"

#~ msgid ""
#~ "When enabled, this pragma warns about indirect method calls that are "
#~ "present in your code.\n"
#~ "\n"
#~ "The indirect syntax is now considered harmful, since its parsing has many "
#~ "quirks and its use is error prone : when the subroutine 'foo' has not "
#~ "been declared in the current package, 'foo $x' actually compiles to '$x-"
#~ ">foo', and 'foo { key => 1 }' to ''key'->foo(1)'. Please refer to the "
#~ "the /REFERENCES manpage section for a more complete list of reasons for "
#~ "avoiding this construct.\n"
#~ "\n"
#~ "This pragma currently does not warn for core functions ('print', 'say', "
#~ "'exec' or 'system'). This may change in the future, or may be added as "
#~ "optional features that would be enabled by passing options to "
#~ "'unimport'.\n"
#~ "\n"
#~ "This module is *not* a source filter."
#~ msgstr ""
#~ "有効化すると、お使いのコード内に間接的なメソッド呼び出しが存在すると、この"
#~ "プラグマが警告を発するようになります。\n"
#~ "\n"
#~ "間接文法は現在、解釈が曖昧であったり、エラーを引き起こす元凶となってしまっ"
#~ "ていることから、有害なものとして扱われています: たとえばサブルーチン "
#~ "'foo' が現在のパッケージ内で定義されていない場合、 'foo $x' は '$x->foo' "
#~ "にコンパイルされますし、 'foo { key => 1}' は ''key'->foo(1)' にコンパイル"
#~ "されてしまいます。このような構造を避けるべき理由について、詳しくは "
#~ "REFERENCES をご覧ください。\n"
#~ "\n"
#~ "このプラグマでは、現在中枢関数 ('print', 'say', 'exec', 'system') に対して"
#~ "は警告を発さないように作られていますが、将来のバージョンで変更される可能性"
#~ "があるほか、 'unimport' にオプションを渡すことで有効化できるような、オプ"
#~ "ションの機能が追加される可能性があります。\n"
#~ "\n"
#~ "このモジュールはソースフィルタ *ではありません* 。"

#~ msgid "Internationalization Library for Perl"
#~ msgstr "Perl 向け国際化ライブラリ"

#~ msgid ""
#~ "This module provides a quick, convenient way of bootstrapping a user-"
#~ "local Perl module library located within the user's home directory. It "
#~ "also constructs and prints out for the user the list of environment "
#~ "variables using the syntax appropriate for the user's current shell (as "
#~ "specified by the 'SHELL' environment variable), suitable for directly "
#~ "adding to one's shell configuration file.\n"
#~ "\n"
#~ "More generally, local::lib allows for the bootstrapping and usage of a "
#~ "directory containing Perl modules outside of Perl's '@INC'. This makes it "
#~ "easier to ship an application with an app-specific copy of a Perl module, "
#~ "or collection of modules. Useful in cases like when an upstream "
#~ "maintainer hasn't applied a patch to a module of theirs that you need for "
#~ "your application."
#~ msgstr ""
#~ "このモジュールは、ユーザのホームディレクトリ内に配置されているローカルの "
#~ "Perl モジュールに対して、そのブートストラップを素早く簡単に行なうための仕"
#~ "組みです。そのほか、ユーザのカレントシェル ('SHELL' 環境変数で指定されてい"
#~ "るシェル) に対して適切な文法を利用して、環境変数の一覧を構築して出力する機"
#~ "能も用意されています。これはシェルの設定ファイルに直接追加できるようにする"
#~ "ための措置です。\n"
#~ "\n"
#~ "もっと一般的には、 local::lib は Perl の '@INC' 外にある Perl のモジュール"
#~ "用ディレクトリについて、そのブートストラップと使用を行なうための仕組みでも"
#~ "あります。これにより、アプリケーションが独自のバージョンの Perl モジュール"
#~ "のコピーを利用できるようになります。たとえばアップストリームのメンテナが、"
#~ "特定のモジュールに対するパッチを当てていないものの、そのパッチを当てないと"
#~ "アプリケーションがうまく動作しないような場合などに有用です。"

#~ msgid ""
#~ "'Module::Build' is a system for building, testing, and installing Perl "
#~ "modules. It is meant to be an alternative to 'ExtUtils::MakeMaker'. "
#~ "Developers may alter the behavior of the module through subclassing in a "
#~ "much more straightforward way than with 'MakeMaker'. It also does not "
#~ "require a 'make' on your system - most of the 'Module::Build' code is "
#~ "pure-perl and written in a very cross-platform way.\n"
#~ "\n"
#~ "See the \"MOTIVATIONS\" manpage for more comparisons between 'ExtUtils::"
#~ "MakeMaker' and 'Module::Build'.\n"
#~ "\n"
#~ "To install 'Module::Build', and any other module that uses 'Module::"
#~ "Build' for its installation process, do the following:\n"
#~ "\n"
#~ "  perl Build.PL       # 'Build.PL' script creates the 'Build' script   ./"
#~ "Build             # Need ./ to ensure we're using this \"Build\" "
#~ "script   ./Build test        # and not another one that happens to be in "
#~ "the PATH   ./Build install\n"
#~ "\n"
#~ "This illustrates initial configuration and the running of three "
#~ "'actions'. In this case the actions run are 'build' (the default action), "
#~ "'test', and 'install'. Other actions defined so far include:\n"
#~ "\n"
#~ "  build                          manifest   "
#~ "clean                          manifest_skip   "
#~ "code                           manpages   config_data                    "
#~ "pardist   diff                           ppd   "
#~ "dist                           ppmdist   distcheck                      "
#~ "prereq_data   distclean                      prereq_report   "
#~ "distdir                        pure_install   "
#~ "distinstall                    realclean   distmeta                       "
#~ "retest   distsign                       skipcheck   "
#~ "disttest                       test   docs                           "
#~ "testall   fakeinstall                    testcover   "
#~ "help                           testdb   html                           "
#~ "testpod   install                        testpodcoverage   "
#~ "installdeps                    versioninstall\n"
#~ "\n"
#~ "You can run the 'help' action for a complete list of actions."
#~ msgstr ""
#~ "'Module::Build' は Perl モジュールを構築し、テストし、インストールするため"
#~ "のシステムです。 'ExtUtils::MakeMaker' の代替となるべく開発されています。"
#~ "開発者は 'MakeMaker' よりもずっと直観的な方法で、モジュールの動作を変更す"
#~ "ることもできます。また、お使いのシステムには 'make' を必要としなくなりま"
#~ "す。それは、 'Module::Build' のほとんどのコードは純粋な Perl で作成されて"
#~ "いて、クロスプラットフォームな方法で書かれているためです。\n"
#~ "\n"
#~ "'ExtUtils::MakeMaker' と 'Module::Build' の比較について、詳しくは "
#~ "\"MOTIVATIONS\" のマニュアルページをお読みください。\n"
#~ "\n"
#~ "'Module::Build' やこれをインストール時に使用するモジュールをインストールす"
#~ "るには、下記のようにして行ないます:\n"
#~ "\n"
#~ "  perl Build.PL       # 'Build.PL' スクリプトが 'Build' スクリプトを作成し"
#~ "ます   ./Build             # カレントディレクトリにある \"Build\" スクリプ"
#~ "トを指定して実行します   ./Build test           ./Build install\n"
#~ "\n"
#~ "これは初期設定と 3 種類の 'アクション' を説明しているものです。この場合、 "
#~ "'build' (既定のアクション), 'test', 'install' の各処理を実行しています。そ"
#~ "の他のアクションには、下記のようなものがあります:\n"
#~ "\n"
#~ "  build                          manifest   "
#~ "clean                          manifest_skip   "
#~ "code                           manpages   config_data                    "
#~ "pardist   diff                           ppd   "
#~ "dist                           ppmdist   distcheck                      "
#~ "prereq_data   distclean                      prereq_report   "
#~ "distdir                        pure_install   "
#~ "distinstall                    realclean   distmeta                       "
#~ "retest   distsign                       skipcheck   "
#~ "disttest                       test   docs                           "
#~ "testall   fakeinstall                    testcover   "
#~ "help                           testdb   html                           "
#~ "testpod   install                        testpodcoverage   "
#~ "installdeps                    versioninstall\n"
#~ "\n"
#~ "動作の一覧について、詳しくは 'help' のセクションをお読みください。"

#, fuzzy
#~ msgid ""
#~ "'Path::Class' is a module for manipulation of file and directory "
#~ "specifications (strings describing their locations, like ''/home/ken/foo."
#~ "txt'' or ''C:\\Windows\\Foo.txt'') in a cross-platform manner. It "
#~ "supports pretty much every platform Perl runs on, including Unix, "
#~ "Windows, Mac, VMS, Epoc, Cygwin, OS/2, and NetWare.\n"
#~ "\n"
#~ "The well-known module the File::Spec manpage also provides this service, "
#~ "but it's sort of awkward to use well, so people sometimes avoid it, or "
#~ "use it in a way that won't actually work properly on platforms "
#~ "significantly different than the ones they've tested their code on.\n"
#~ "\n"
#~ "In fact, 'Path::Class' uses 'File::Spec' internally, wrapping all the "
#~ "unsightly details so you can concentrate on your application code. "
#~ "Whereas 'File::Spec' provides functions for some common path "
#~ "manipulations, 'Path::Class' provides an object-oriented model of the "
#~ "world of path specifications and their underlying semantics. 'File::Spec' "
#~ "doesn't create any objects, and its classes represent the different ways "
#~ "in which paths must be manipulated on various platforms (not a very "
#~ "intuitive concept). 'Path::Class' creates objects representing files and "
#~ "directories, and provides methods that relate them to each other. For "
#~ "instance, the following 'File::Spec' code:\n"
#~ "\n"
#~ " my $absolute = File::Spec-"
#~ ">file_name_is_absolute(                   File::Spec->catfile( @dirs, "
#~ "$file )                 );\n"
#~ "\n"
#~ "can be written using 'Path::Class' as\n"
#~ "\n"
#~ " my $absolute = Path::Class::File->new( @dirs, $file )->is_absolute;\n"
#~ "\n"
#~ "or even as\n"
#~ "\n"
#~ " my $absolute = file( @dirs, $file )->is_absolute;\n"
#~ "\n"
#~ "Similar readability improvements should happen all over the place when "
#~ "using 'Path::Class'.\n"
#~ "\n"
#~ "Using 'Path::Class' can help solve real problems in your code too - for "
#~ "instance, how many people actually take the \"volume\" (like 'C:' on "
#~ "Windows) into account when writing 'File::Spec'-using code? I thought "
#~ "not. But if you use 'Path::Class', your file and directory objects will "
#~ "know what volumes they refer to and do the right thing.\n"
#~ "\n"
#~ "The guts of the 'Path::Class' code live in the the Path::Class::File "
#~ "manpage and the Path::Class::Dir manpage modules, so please see those "
#~ "modules' documentation for more details about how to use them."
#~ msgstr ""
#~ "`Path::Class' は、ファイルやディレクトリの指定 (たとえば `'/home/ken/foo."
#~ "txt''  や `'C:\\Windows\\Foo.txt'' のようなそれらを指し示す文字列) につい"
#~ "て、プラットフォームに 依存しない仕様を提供するモジュールです。 Unix, "
#~ "Windows, Mac, VMS, Epoc, Cygwin, OS/2, NetWare など、 Perl の動作する環境"
#~ "であればどこでも動作します。\n"
#~ "\n"
#~ "よく知られた `File::Spec' モジュールでもこのサービスを提供していますが、 "
#~ "使用するには不便であるため、ユーザはこれらの使用を避けるか、もしくは作成し"
#~ "た 環境とは異なるプラットフォームでは動作しない方法を使ってしまいがちで"
#~ "す。\n"
#~ "\n"
#~ " 事実、 `Path::Class' は `File::Spec' を内部的に使用していますが、全ての見"
#~ "苦しい詳細は 隠蔽されるようになっていますので、アプリケーションコードの作"
#~ "成に集中することができます。 また、 `File::Spec' はいくつかのパス操作のた"
#~ "めの関数を提供していますが、 `Path::Class' は パス仕様とそれに伴う作業の分"
#~ "野についてオブジェクト指向のモデルを提供しています。 `File::Spec' はいかな"
#~ "るオブジェクトも作成しませんし、それらのクラスは 様々なプラットフォームで"
#~ "操作するにあたって別々の方法をとらなければなりません (あまり直感的とは言え"
#~ "ません) 。`Path::Class' はファイルやディレクトリを示す オブジェクトを作成"
#~ "し、それらから相対的に探るためのメソッドを提供しています。"

#~ msgid ""
#~ "*Apache::AuthCookie* allows you to intercept a user's first "
#~ "unauthenticated access to a protected document. The user will be "
#~ "presented with a custom form where they can enter authentication "
#~ "credentials. The credentials are posted to the server where AuthCookie "
#~ "verifies them and returns a session key.\n"
#~ "\n"
#~ "The session key is returned to the user's browser as a cookie. As a "
#~ "cookie, the browser will pass the session key on every subsequent "
#~ "accesses. AuthCookie will verify the session key and re-authenticate the "
#~ "user.\n"
#~ "\n"
#~ "All you have to do is write a custom module that inherits from "
#~ "AuthCookie. Your module is a class which implements two methods:\n"
#~ "\n"
#~ "* 'authen_cred()'\n"
#~ "\n"
#~ "  Verify the user-supplied credentials and return a session key. The   "
#~ "session key can be any string - often you'll use some string containing   "
#~ "username, timeout info, and any other information you need to determine   "
#~ "access to documents, and append a one-way hash of those values together   "
#~ "with some secret key.\n"
#~ "\n"
#~ "* 'authen_ses_key()'\n"
#~ "\n"
#~ "  Verify the session key (previously generated by 'authen_cred()', "
#~ "possibly   during a previous request) and return the user ID. This user "
#~ "ID will be   fed to '$r->connection->user()' to set Apache's idea of "
#~ "who's logged in.\n"
#~ "\n"
#~ "By using AuthCookie versus Apache's built-in AuthBasic you can design "
#~ "your own authentication system. There are several benefits.\n"
#~ "\n"
#~ "* 1.\n"
#~ "\n"
#~ "  The client doesn't *have* to pass the user credentials on every   "
#~ "subsequent access. If you're using passwords, this means that the   "
#~ "password can be sent on the first request only, and subsequent requests   "
#~ "don't need to send this (potentially sensitive) information. This is   "
#~ "known as \"ticket-based\" authentication.\n"
#~ "\n"
#~ "* 2.\n"
#~ "\n"
#~ "  When you determine that the client should stop using the   credentials/"
#~ "session key, the server can tell the client to delete the   cookie. "
#~ "Letting users \"log out\" is a notoriously impossible-to-solve   problem "
#~ "of AuthBasic.\n"
#~ "\n"
#~ "* 3.\n"
#~ "\n"
#~ "  AuthBasic dialog boxes are ugly. You can design your own HTML login "
#~ "forms   when you use AuthCookie.\n"
#~ "\n"
#~ "* 4.\n"
#~ "\n"
#~ "  You can specify the domain of a cookie using PerlSetVar commands. For   "
#~ "instance, if your AuthName is 'WhatEver', you can put the command\n"
#~ "\n"
#~ "   PerlSetVar WhatEverDomain .yourhost.com\n"
#~ "\n"
#~ "  into your server setup file and your access cookies will span all "
#~ "hosts   ending in '.yourhost.com'.\n"
#~ "\n"
#~ "* 5.\n"
#~ "\n"
#~ "  You can optionally specify the name of your cookie using the "
#~ "'CookieName'   directive. For instance, if your AuthName is 'WhatEver', "
#~ "you can put the   command\n"
#~ "\n"
#~ "   PerlSetVar WhatEverCookieName MyCustomName\n"
#~ "\n"
#~ "  into your server setup file and your cookies for this AuthCookie "
#~ "realm   will be named MyCustomName. Default is AuthType_AuthName.\n"
#~ "\n"
#~ "* 6.\n"
#~ "\n"
#~ "  By default users must satisfy ALL of the 'require' directives. If you   "
#~ "want authentication to succeed if ANY 'require' directives are met, use   "
#~ "the 'Satisfy' directive. For instance, if your AuthName is 'WhatEver',   "
#~ "you can put the command\n"
#~ "\n"
#~ "   PerlSetVar WhatEverSatisfy Any\n"
#~ "\n"
#~ "  into your server startup file and authentication for this realm will   "
#~ "succeed if ANY of the 'require' directives are met.\n"
#~ "\n"
#~ "This is the flow of the authentication handler, less the details of the "
#~ "redirects. Two REDIRECT's are used to keep the client from displaying the "
#~ "user's credentials in the Location field. They don't really change "
#~ "AuthCookie's model, but they do add another round-trip request to the "
#~ "client.\n"
#~ "\n"
#~ " (-----------------------)     +---------------------------------+  "
#~ "( Request a protected   )     | AuthCookie sets custom error    |  "
#~ "( page, but user hasn't )---->| document and returns            |  "
#~ "( authenticated (no     )     | FORBIDDEN. Apache abandons      |  "
#~ "( session key cookie)   )     | current request and creates sub |  "
#~ "(-----------------------)     | request for the error document. |<-"
#~ "+                                | Error document is a script that |  "
#~ "|                                | generates a form where the user |  "
#~ "|                  return        | enters authentication           |  "
#~ "|           ^------------------->| credentials (login & password). |  "
#~ "|          / \\      False        +---------------------------------+  "
#~ "|         /   \\                                   |                   "
#~ "|        /     \\                                  |                   "
#~ "|       /       \\                                 V                   "
#~ "|      /         \\               +---------------------------------+  "
#~ "|     /   Pass    \\              | User's client submits this form |  "
#~ "|    /   user's    \\             | to the LOGIN URL, which calls   |  "
#~ "|    | credentials |<------------| AuthCookie->login().            |  "
#~ "|    \\     to      /             +---------------------------------+  "
#~ "|     \\authen_cred/                                                   "
#~ "|      \\ function/                                                    "
#~ "|       \\       /                                                     "
#~ "|        \\     /                                                      "
#~ "|         \\   /            +------------------------------------+     "
#~ "|          \\ /   return    | Authen cred returns a session      |  +--"
#~ "+           V------------->| key which is opaque to AuthCookie.*|  "
#~ "|                 True     +------------------------------------+  "
#~ "|                                               |                  "
#~ "|                +--------------------+         |      +---------------"
#~ "+                |                    |         |      | If we had a   "
#~ "|                V                    |         V      | cookie, add   "
#~ "|   +----------------------------+  r |         ^      | a Set-Cookie  "
#~ "|   | If we didn't have a session|  e |T       / \\     | header to     "
#~ "|   | key cookie, add a          |  t |r      /   \\    | override the  "
#~ "|   | Set-Cookie header with this|  u |u     /     \\   | invalid "
#~ "cookie|   | session key. Client then   |  r |e    /       \\  "
#~ "+---------------+   | returns session key with   |  n |    /  pass   "
#~ "\\               ^   | successive requests        |    |   /  session  "
#~ "\\              |   +----------------------------+    |  /   key to    "
#~ "\\    return   |                |                    +-| "
#~ "authen_ses_key|------------+                V                       "
#~ "\\             /     False   +-----------------------------------+ "
#~ "\\           /   | Tell Apache to set Expires header,|  \\         /   | "
#~ "set user to user ID returned by   |   \\       /   | authen_ses_key, set "
#~ "authentication|    \\     /   | to our type (e.g. AuthCookie).    |     "
#~ "\\   /   +-----------------------------------+      "
#~ "\\ /                                               V          "
#~ "(---------------------)              ^          ( Request a "
#~ "protected )              |          ( page, user has a    )--------------"
#~ "+          ( session key cookie  )          (---------------------)\n"
#~ "\n"
#~ "  *  The session key that the client gets can be anything you want.  "
#~ "For     example, encrypted information about the user, a hash of the     "
#~ "username and password (similar in function to Digest     authentication), "
#~ "or the user name and password in plain text     (similar in function to "
#~ "HTTP Basic authentication).\n"
#~ "\n"
#~ "    The only requirement is that the authen_ses_key function that you     "
#~ "create must be able to determine if this session_key is valid and     map "
#~ "it back to the originally authenticated user ID."
#~ msgstr ""
#~ "*Apache::AuthCookie* は、アクセス認証の必要なドキュメントに最初にアクセス"
#~ "した際、そのアクセスに対する割り込み機能を提供します。ユーザ側には認証情報"
#~ "を入力することのできるカスタム名フォームが提示され、その認証情報がサーバ側"
#~ "に送信されると、 AuthCookie がそれを検証し、セッション鍵を返却します。\n"
#~ "\n"
#~ "セッション鍵はユーザ側のブラウザに対して、 Cookie として返されます。 "
#~ "Cookie はブラウザ側に保存され、後続のアクセスが行なわれるたびに送信される"
#~ "ことになります。AuthCookie ではそこで送信されるセッション鍵を検証し、必要"
#~ "であれば再認証を求める動作をします。\n"
#~ "\n"
#~ "アプリケーション側で行なうべきことは、 AuthCookie を継承したカスタムなモ"
#~ "ジュールを作成することだけです。そのモジュールは、 2 つのメソッドを実装し"
#~ "たクラスとなります:\n"
#~ "\n"
#~ "* 'authen_cred()'\n"
#~ "\n"
#~ "  ユーザ側が提示した認証情報を検証し、セッション鍵を返すメソッドです。セッ"
#~ "ション鍵には、任意の文字列を指定することができ、たとえばユーザ名やタイムア"
#~ "ウト、そしてドキュメントに対するアクセス権限などの情報が含まれます。また、"
#~ "機密鍵と一方向関数を利用したハッシュ文字列も追加すべきものです。\n"
#~ "\n"
#~ "* 'authen_ses_key()'\n"
#~ "\n"
#~ "  セッション鍵 ('authen_cred()' で以前に生成したもの。おそらくは直前のアク"
#~ "セスで取得したもの) を検証し、ユーザ ID を返却します。ユーザ ID は Apache "
#~ "側で、誰がログインしたのかを記録するのに使用します ('$r->connection-"
#~ ">user()') 。\n"
#~ "\n"
#~ "AuthCookie を使用することで、 Apache に内蔵された AuthBasic と同等の認証シ"
#~ "ステムを構築することができます。 AuthCookie にはいくつかの利点がありま"
#~ "す。\n"
#~ "\n"
#~ "* 1.\n"
#~ "\n"
#~ "  クライアント側から、それぞれのアクセスで認証情報を送信する必要が無くなり"
#~ "ます。たとえばパスワードについては、最初のリクエストの際にのみ送信され、そ"
#~ "の後のアクセスではそれら (潜在的な機密情報) を送信する必要がありません。こ"
#~ "れは \"チケットベース\"の認証としても知られた仕組みです。\n"
#~ "\n"
#~ "* 2.\n"
#~ "\n"
#~ "  認証情報／セッション鍵の使用終了時には、サーバ側で Cookie を削除するよう"
#~ "に指示することができます。ユーザの \"ログアウト\" は、 AuthBasic の実装で"
#~ "は実現不可能な仕組みです。\n"
#~ "\n"
#~ "* 3.\n"
#~ "\n"
#~ "  AuthBasic のダイアログボックスは非常に見にくく、 AuthCookie のように独自"
#~ "の HTML ログイン画面を設計できたほうが、デザイン上の自由度が高くなりま"
#~ "す。\n"
#~ "\n"
#~ "* 4.\n"
#~ "\n"
#~ "  PerlSetVar コマンドを利用して、 Cookie の適用範囲を指定できます。たとえ"
#~ "ば AuthName が 'WhatEver' であった場合、下記のコマンドをサーバの設定ファイ"
#~ "ル内に追加すると、 '.yourhost.com' で終わる全てのホストに対して、 Cookie "
#~ "を使い回すことができます。\n"
#~ "\n"
#~ "   PerlSetVar WhatEverDomain .yourhost.com\n"
#~ "\n"
#~ "* 5.\n"
#~ "\n"
#~ "  必要であれば、 'CookieName' ディレクティブを利用して Cookie の名前を指定"
#~ "することもできます。たとえば AuthName が 'WhatEver' であった場合、下記のコ"
#~ "マンドを指定して名前を設定することができます。\n"
#~ "\n"
#~ "   PerlSetVar WhatEverCookieName MyCustomName\n"
#~ "\n"
#~ "これをサーバの設定ファイルに追加すると、 AuthCookie の領域情報が "
#~ "MyCustomName という名前になります。既定値は AuthType_AuthName です。\n"
#~ "\n"
#~ "* 6.\n"
#~ "\n"
#~ "  規定では、ユーザは 'require' ディレクティブの全てを満たさなければなりま"
#~ "せん。'require' で書かれた条件のいずれかに該当することで認証を許可したい場"
#~ "合は、'Satisfy' ディレクティブを使用します。たとえば AuthName が "
#~ "'WhatEver' であった場合、下記のコマンドをサーバの設定ファイルに追加する"
#~ "と、 'require' ディレクティブのいずれかの条件を満たすことで、アクセスでき"
#~ "るようになります。\n"
#~ "\n"
#~ "   PerlSetVar WhatEverSatisfy Any\n"
#~ "\n"
#~ "下記は認証ハンドラのフローを示した図です。リダイレクトについては詳細を略し"
#~ "ています。 2 つの REDIRECT によって、 Location フィールドでのユーザ認証情"
#~ "報表示を制御しています。これらは AuthCookie の仕組みを変更するものではな"
#~ "く、クライアントに対してもう 1 つの要求／応答を追加しています。\n"
#~ "\n"
#~ " (-----------------------)     +---------------------------------+  "
#~ "( Request a protected   )     | AuthCookie sets custom error    |  "
#~ "( page, but user hasn't )---->| document and returns            |  "
#~ "( authenticated (no     )     | FORBIDDEN. Apache abandons      |  "
#~ "( session key cookie)   )     | current request and creates sub |  "
#~ "(-----------------------)     | request for the error document. |<-"
#~ "+                                | Error document is a script that |  "
#~ "|                                | generates a form where the user |  "
#~ "|                  return        | enters authentication           |  "
#~ "|           ^------------------->| credentials (login & password). |  "
#~ "|          / \\      False        +---------------------------------+  "
#~ "|         /   \\                                   |                   "
#~ "|        /     \\                                  |                   "
#~ "|       /       \\                                 V                   "
#~ "|      /         \\               +---------------------------------+  "
#~ "|     /   Pass    \\              | User's client submits this form |  "
#~ "|    /   user's    \\             | to the LOGIN URL, which calls   |  "
#~ "|    | credentials |<------------| AuthCookie->login().            |  "
#~ "|    \\     to      /             +---------------------------------+  "
#~ "|     \\authen_cred/                                                   "
#~ "|      \\ function/                                                    "
#~ "|       \\       /                                                     "
#~ "|        \\     /                                                      "
#~ "|         \\   /            +------------------------------------+     "
#~ "|          \\ /   return    | Authen cred returns a session      |  +--"
#~ "+           V------------->| key which is opaque to AuthCookie.*|  "
#~ "|                 True     +------------------------------------+  "
#~ "|                                               |                  "
#~ "|                +--------------------+         |      +---------------"
#~ "+                |                    |         |      | If we had a   "
#~ "|                V                    |         V      | cookie, add   "
#~ "|   +----------------------------+  r |         ^      | a Set-Cookie  "
#~ "|   | If we didn't have a session|  e |T       / \\     | header to     "
#~ "|   | key cookie, add a          |  t |r      /   \\    | override the  "
#~ "|   | Set-Cookie header with this|  u |u     /     \\   | invalid "
#~ "cookie|   | session key. Client then   |  r |e    /       \\  "
#~ "+---------------+   | returns session key with   |  n |    /  pass   "
#~ "\\               ^   | successive requests        |    |   /  session  "
#~ "\\              |   +----------------------------+    |  /   key to    "
#~ "\\    return   |                |                    +-| "
#~ "authen_ses_key|------------+                V                       "
#~ "\\             /     False   +-----------------------------------+ "
#~ "\\           /   | Tell Apache to set Expires header,|  \\         /   | "
#~ "set user to user ID returned by   |   \\       /   | authen_ses_key, set "
#~ "authentication|    \\     /   | to our type (e.g. AuthCookie).    |     "
#~ "\\   /   +-----------------------------------+      "
#~ "\\ /                                               V          "
#~ "(---------------------)              ^          ( Request a "
#~ "protected )              |          ( page, user has a    )--------------"
#~ "+          ( session key cookie  )          (---------------------)\n"
#~ "\n"
#~ "  * クライアントが取得するセッション鍵が全ての仕組みのベースになっていま"
#~ "す。セッション鍵は、たとえばユーザ情報を暗号化したものや、ユーザ名とパス"
#~ "ワードをハッシュ化 (Digest 認証のように) したもの、もしくはユーザ名とパス"
#~ "ワードをそのまま保存したもの (Basic 認証のように) さえもセッション鍵となり"
#~ "えます。\n"
#~ "\n"
#~ "    ただ 1 つの要件は、作成した authen_ses_key でセッション鍵の有効性を検"
#~ "証することができ、かつ元々のユーザ ID を割り出すことができることだけです。"

#~ msgid ""
#~ "*List::MoreUtils* provides some trivial but commonly needed functionality "
#~ "on lists which is not going to go into the List::Util manpage.\n"
#~ "\n"
#~ "All of the below functions are implementable in only a couple of lines of "
#~ "Perl code. Using the functions from this module however should give "
#~ "slightly better performance as everything is implemented in C. The pure-"
#~ "Perl implementation of these functions only serves as a fallback in case "
#~ "the C portions of this module couldn't be compiled on this machine."
#~ msgstr ""
#~ "*List::MoreUtils* は、リストに対する機能のうち List::Util には取り入れられ"
#~ "なかった、細かくも一般的に必要となるだろう機能が含まれています。\n"
#~ "\n"
#~ "下記に示す全ての機能は、複数行の Perl コードだけで実装可能なものですが、こ"
#~ "れらのモジュールが提供する機能は、全てを C 言語で実装した場合と同じくらい"
#~ "比較的高速に動作します。これらの機能の純粋な Perl 版は、このモジュールが対"
#~ "象のマシンでコンパイルできなかった場合のフォールバックとしてのみ動作しま"
#~ "す。"

#~ msgid ""
#~ "BinHex is a format used by Macintosh for transporting Mac files safely "
#~ "through electronic mail, as short-lined, 7-bit, semi-compressed data "
#~ "streams. This module provides a means of converting those data streams "
#~ "back into binary data."
#~ msgstr ""
#~ "BinHex は Macintosh で使用されるデータ形式で、電子メールを介して Mac の"
#~ "ファイルを安全にやりとりするためのものです。短い行で 7 ビットの、少し圧縮"
#~ "したデータストリームになっています。このモジュールは、これらのデータスト"
#~ "リームをバイナリデータに戻す処理を提供します。"

#~ msgid ""
#~ "CGI-Session is a Perl5 library that provides an easy, reliable and "
#~ "modular session management system across HTTP requests. Persistency is a "
#~ "key feature for such applications as shopping carts, login/authentication "
#~ "routines, and application that need to carry data across HTTP requests. "
#~ "CGI::Session does that and many more."
#~ msgstr ""
#~ "CGI-Session は簡易で信頼性のある、モジュール型の HTTP セッション管理システ"
#~ "ムです。 永続性とはショッピングカートやログイン／認証ルーチン、その他 "
#~ "HTTP リクエストをまたがって 情報をやりとりしなければならない様々なアプリ"
#~ "ケーション向けの中心的な機能です。 CGI::Session はこれを実現しているほか、"
#~ "様々な追加機能も備えています。"

#~ msgid ""
#~ "ExifTool is a customizable set of Perl modules plus a full-featured "
#~ "application for reading and writing meta information in a wide variety of "
#~ "files, including the maker note information of many digital cameras by "
#~ "various manufacturers such as Canon, Casio, FujiFilm, GE, HP, JVC/Victor, "
#~ "Kodak, Leaf, Minolta/Konica-Minolta, Nikon, Olympus/Epson, Panasonic/"
#~ "Leica, Pentax/Asahi, Reconyx, Ricoh, Samsung, Sanyo, Sigma/Foveon and "
#~ "Sony."
#~ msgstr ""
#~ "ExifTool はすべての機能が装備された、各種ファイル対応のメタデータを読み書"
#~ "きするアプリケーションです。デジタルカメラにおける製造元固有の情報にも対応"
#~ "していて、たとえばキヤノン, カシオ, 富士フイルム, GE, HP, JVC／ビクター, "
#~ "コダック, Leaf, ミノルタ／コニカミノルタ, ニコン, オリンパス／エプソン, パ"
#~ "ナソニック／ライカ, ペンタックス／旭光学, Reconyx, リコー, サムスン, サン"
#~ "ヨー, Sigma/Foveon, SONY などに対応しています。"

#~ msgid "Extract data from Macintosh BinHex files"
#~ msgstr "Macintosh BinHex ファイルからのデータ抽出"

#~ msgid ""
#~ "File::Which was created to be able to get the paths to executable "
#~ "programs on systems under which the `which' program wasn't implemented in "
#~ "the shell."
#~ msgstr ""
#~ "File::Which は `which' プログラムがシェル内に実装されていないシステムで、"
#~ "実行プログラムの絶対パスファイル名を取得するのに使用します。"

#~ msgid ""
#~ "Finance::Quote provides access to time-delayed stockquotes from a number "
#~ "of sources.  After you've installed the pacakage, try 'perldoc Finance::"
#~ "Quote' for full information.  Alternatively, you can 'perldoc lib/Finance/"
#~ "Quote.pm' before the install."
#~ msgstr ""
#~ "Finance::Quote は、複数の情報源から提供される遅延のある株価情報 にアクセス"
#~ "する手段を提供します。このパッケージをインストールしたあと、 'perldoc "
#~ "Finance::Quote' と入力することで完全なドキュメンテーションを参照することが"
#~ "できます。 また、インストール前であれば 'perldoc lib/Finance/Quote.pm' と"
#~ "入力しても参照できます。"

#~ msgid ""
#~ "Highly Customizable Perl App for Reading and Writing Meta Information in "
#~ "Files"
#~ msgstr ""
#~ "ファイル内のメタデータを読み書きするための、高度にカスタマイズ可能な Perl "
#~ "スクリプト"

#, fuzzy
#~ msgid "Interface to Url Shortening Sites"
#~ msgstr "Adobe フォントメトリックファイルへのインターフェイス"

#~ msgid ""
#~ "It often happens that you have non-Roman text data in Unicode, but you "
#~ "can't display it-- usually because you're trying to show it to a user via "
#~ "an application that doesn't support Unicode, or because the fonts you "
#~ "need aren't accessible. You could represent the Unicode characters as "
#~ "\"???????\" or \"\\15BA\\15A0\\1610...\", but that's nearly useless to "
#~ "the user who actually wants to read what the text says.\n"
#~ "\n"
#~ "What Text::Unidecode provides is a function, 'unidecode(...)' that takes "
#~ "Unicode data and tries to represent it in US-ASCII characters (i.e., the "
#~ "universally displayable characters between 0x00 and 0x7F). The "
#~ "representation is almost always an attempt at _transliteration_-- i.e., "
#~ "conveying, in Roman letters, the pronunciation expressed by the text in "
#~ "some other writing system. (See the example in the synopsis.)\n"
#~ "\n"
#~ "NOTE:\n"
#~ "\n"
#~ "To make sure your perldoc/Pod viewing setup for viewing this page is "
#~ "working: The six-letter word \"résumé\" should look like \"resume\" with "
#~ "an \"/\" accent on each \"e\".\n"
#~ "\n"
#~ "For further tests, and help if that doesn't work, see below, the /A POD "
#~ "ENCODING TEST manpage."
#~ msgstr ""
#~ "非ローマ文字のテキストデータが Unicode で記述されている場合、 Unicode に対"
#~ "応していないアプリケーションを利用していたり、対応するフォントをインストー"
#~ "ルしていないような場合には、それらを表示することができません。表示できな"
#~ "い Unicode 文字は \"???????\" や \"\\15BA\\15A0\\1610...\" のように表示さ"
#~ "れますが、テキストを読みたいユーザにとって、そのような表示は意味がありませ"
#~ "ん。\n"
#~ "\n"
#~ "Text::Unidecode は関数 'unidecode(...)' を提供しています。これは Unicode "
#~ "のデータを受け取って US-ASCII 文字 (0x00 から 0x7F までの一般的に表示可能"
#~ "な文字) で表そうとしてくれる関数です。表記は常にほとんど音訳の形で表され、"
#~ "そのテキストの発音に最も近いローマ文字になります (添付の例をお読みくださ"
#~ "い) 。\n"
#~ "\n"
#~ "注意:\n"
#~ "\n"
#~ "このページが正しく動作するかどうかお使いの perldoc/Pod の表示設定を確認し"
#~ "たい場合、 6 文字の単語 \"résumé\" が \"resume\" に似た表示になっているか"
#~ "どうかをご確認ください。 2, 6 文字目は \"e\" のアクセント表記です。\n"
#~ "\n"
#~ "さらに詳しいテストをしたい場合は、ヘルプではなく /A POD ENCODING TEST のマ"
#~ "ニュアルページをお読みください。"

#~ msgid ""
#~ "Module XBase provides access to XBase (dBase, Fox*) database files, "
#~ "namely dbf, dbt, fpt, ndx, ntx, mdx, idx and cdx."
#~ msgstr ""
#~ "XBase モジュールは、 XBase (dBase, Fox*) データベースファイルへのアクセス"
#~ "を 提供します。 dbf, dbt, fpt, ndx, ntx, mdx, idx, cdx などの名前が付けら"
#~ "れている場合もあります。"

#~ msgid "Mojolicious + http://getbootstrap.com/"
#~ msgstr "Mojolicious + http://getbootstrap.com/"

#~ msgid ""
#~ "Moose is an extension of the Perl 5 object system.\n"
#~ "\n"
#~ "The main goal of Moose is to make Perl 5 Object Oriented programming "
#~ "easier, more consistent, and less tedious. With Moose you can think more "
#~ "about what you want to do and less about the mechanics of OOP.\n"
#~ "\n"
#~ "Additionally, Moose is built on top of the Class::MOP manpage, which is a "
#~ "metaclass system for Perl 5. This means that Moose not only makes "
#~ "building normal Perl 5 objects better, but it provides the power of "
#~ "metaclass programming as well."
#~ msgstr ""
#~ "Moose は Perl 5 のオブジェクトシステムに対する拡張です。\n"
#~ "\n"
#~ "Moose の主な目的は、 Perl 5 のオブジェクト志向プログラミングを、よりわかり"
#~ "やすくより一貫した仕組みにし、つまらなさを排除することにあります。 Moose "
#~ "を利用することで、やりたいことを明確にし、 OOP の仕組みそのものに対して心"
#~ "配する必要がなくなります。\n"
#~ "\n"
#~ "これに加えて、 Moose は Class::MOP 上で構築されています。これは Perl 5 向"
#~ "けのメタクラスシステムで、 Moose は通常のオブジェクトを簡単に構築できるだ"
#~ "けでなく、メタクラスプログラミングの利点をも享受できることになります。"

#~ msgid "Persistent session data in CGI applications"
#~ msgstr "CGI アプリケーション内での永続セッションデータ"

#~ msgid "Portable implementation of the `which' utility"
#~ msgstr "`which' ユーティリティの可搬性のある実装"

#~ msgid "Provides Access to XBase Files"
#~ msgstr "XBase ファイルへのアクセス"

#~ msgid "Provides access to time-delayed stockquotes"
#~ msgstr "時間遅れの株価情報にアクセスするモジュール"

#~ msgid "Random Access Reads of Sequential File or Scalar"
#~ msgstr ""
#~ "シーケンシャル形式のファイルやスカラ値をランダムアクセスするモジュール"

#~ msgid ""
#~ "Readonly.pm provides a facility for creating non-modifiable scalars, "
#~ "arrays, and hashes.\n"
#~ "\n"
#~ "Authors:     Eric J. Roode, roode@cpan.org"
#~ msgstr ""
#~ "Readonly.pm は修正することのできないスカラー値や配列、ハッシュなどの仕組み"
#~ "を提供します。\n"
#~ "\n"
#~ "作者:        Eric J. Roode, roode@cpan.org"

#, fuzzy
#~ msgid "Run a subprocess with input/ouput redirection"
#~ msgstr "入出力の転送機能付きサブプロセス実行"

#~ msgid ""
#~ "SQLite is a public domain file-based relational database engine that you "
#~ "can find at the http://www.sqlite.org/ manpage.\n"
#~ "\n"
#~ "*DBD::SQLite* is a Perl DBI driver for SQLite, that includes the entire "
#~ "thing in the distribution. So in order to get a fast transaction capable "
#~ "RDBMS working for your perl project you simply have to install this "
#~ "module, and *nothing* else.\n"
#~ "\n"
#~ "SQLite supports the following features:\n"
#~ "\n"
#~ "* Implements a large subset of SQL92\n"
#~ "\n"
#~ "  See the http://www.sqlite.org/lang.html manpage for details.\n"
#~ "\n"
#~ "* A complete DB in a single disk file\n"
#~ "\n"
#~ "  Everything for your database is stored in a single disk file, making "
#~ "it   easier to move things around than with the DBD::CSV manpage.\n"
#~ "\n"
#~ "* Atomic commit and rollback\n"
#~ "\n"
#~ "  Yes, *DBD::SQLite* is small and light, but it supports full "
#~ "transactions!\n"
#~ "\n"
#~ "* Extensible\n"
#~ "\n"
#~ "  User-defined aggregate or regular functions can be registered with "
#~ "the   SQL parser.\n"
#~ "\n"
#~ "There's lots more to it, so please refer to the docs on the SQLite web "
#~ "page, listed above, for SQL details. Also refer to the DBI manpage for "
#~ "details on how to use DBI itself. The API works like every DBI module "
#~ "does. However, currently many statement attributes are not implemented or "
#~ "are limited by the typeless nature of the SQLite database."
#~ msgstr ""
#~ "SQLite (http://www.sqlite.org/) はパブリックドメインで公開されているファイ"
#~ "ルベースのリレーショナルデータベースエンジンです。\n"
#~ "\n"
#~ "*DBD::SQLite* は SQLite 向けの Perl DBI ドライバで、配布物のすべてが含まれ"
#~ "ていますので、このモジュールをインストールするだけで、お使いの Perl プロ"
#~ "ジェクトを高速でトランザクションにも対応する RDBMS を利用できるようになり"
#~ "ます。\n"
#~ "\n"
#~ "SQLIte には下記のような機能があります:\n"
#~ "\n"
#~ "* SQL92 のラージサブセットに対応\n"
#~ "\n"
#~ "  詳しくは http://www.sqlite.org/lang.html をお読みください。\n"
#~ "\n"
#~ "* 単一のディスクファイルによる完全な DB\n"
#~ "\n"
#~ "  データベースに必要な情報すべてが単一のディスクファイルに記録されます。こ"
#~ "れにより、 DBD::CSV などよりも簡単に扱うことができるようになります。\n"
#~ "\n"
#~ "* アトミックなコミットとロールバック\n"
#~ "\n"
#~ "  *DBD::SQLite* は小さくて軽量ですが、トランザクションに完全対応していま"
#~ "す！\n"
#~ "\n"
#~ "* 拡張可能性\n"
#~ "\n"
#~ "  ユーザ定義の集計関数または通常関数を SQL パーサに登録することができま"
#~ "す。\n"
#~ "\n"
#~ "上記以外にも SQLite には様々な機能が用意されています。 SQL の詳細につい"
#~ "て、詳しくは上述の SQLite の Web ページをご覧ください。また、 DBI の使用方"
#~ "法については、 DBI のマニュアルページをお読みください。 API は DBI が提供"
#~ "する機能それぞれに対応していますが、多くのステートメント属性は未実装のまま"
#~ "であるほか、 SQLite が型を持たない仕組みであることによる制限もあることにご"
#~ "注意ください。"

#~ msgid "Take a look at our excellent documentation in Mojolicious::Guides!"
#~ msgstr ""
#~ "Mojolicious::Guides 内にある素晴らしいドキュメンテーションをお読みくださ"
#~ "い！"

#~ msgid ""
#~ "The 'Devel::StackTrace' module contains two classes, C,Devel::StackTrace> "
#~ "and the Devel::StackTrace::Frame manpage. These objects encapsulate the "
#~ "information that can retrieved via Perl's 'caller()' function, as well as "
#~ "providing a simple interface to this data.\n"
#~ "\n"
#~ "The 'Devel::StackTrace' object contains a set of 'Devel::StackTrace::"
#~ "Frame' objects, one for each level of the stack. The frames contain all "
#~ "the data available from 'caller()'.\n"
#~ "\n"
#~ "This code was created to support my the Exception::Class::Base manpage "
#~ "class (part of the Exception::Class manpage) but may be useful in other "
#~ "contexts."
#~ msgstr ""
#~ "'Devel::StackTrace' モジュールには 2 つのクラスが含まれています。それぞれ "
#~ "Devel::StackTrace, Devel::StackTrace::Frame というクラスで、これらのオブ"
#~ "ジェクトは Perl の'caller()' 関数を介して取得することができる情報をカプセ"
#~ "ル化し、このデータに対するシンプルなインターフェイスを提供します。\n"
#~ "\n"
#~ "'Devel::StackTrace' オブジェクトには、各スタックのレベルに対応した "
#~ "'Devel::StackTrace::Frame' オブジェクトが複数個含まれています。フレーム内"
#~ "には、 'caller()' で提供されるすべてのデータが含まれています。\n"
#~ "\n"
#~ "このコードは、私が作成している Exception::Class::Base クラス (Exception::"
#~ "Class の一部) に対応するために作ったものですが、他の箇所でも便利に使用する"
#~ "ことができます。"

#~ msgid ""
#~ "The Archive::Zip module allows a Perl program to create, manipulate, "
#~ "read, and write Zip archive files.\n"
#~ "\n"
#~ "Zip archives can be created, or you can read from existing zip files.\n"
#~ "\n"
#~ "Once created, they can be written to files, streams, or strings. Members "
#~ "can be added, removed, extracted, replaced, rearranged, and enumerated. "
#~ "They can also be renamed or have their dates, comments, or other "
#~ "attributes queried or modified. Their data can be compressed or "
#~ "uncompressed as needed.\n"
#~ "\n"
#~ "Members can be created from members in existing Zip files, or from "
#~ "existing directories, files, or strings.\n"
#~ "\n"
#~ "This module uses the the Compress::Raw::Zlib manpage library to read and "
#~ "write the compressed streams inside the files.\n"
#~ "\n"
#~ "One can use the Archive::Zip::MemberRead manpage to read the zip file "
#~ "archive members as if they were files."
#~ msgstr ""
#~ "Archive::Zip モジュールは、 Perl プログラムから Zip 形式のアーカイブを作成"
#~ "したり、操作したり読み書きしたりすることができるものです。\n"
#~ "\n"
#~ "Zip アーカイブを作成することができるほか、既存の zip ファイルを読み込むこ"
#~ "ともできます。\n"
#~ "\n"
#~ "いったん Zip を作成すると、それらをファイルやストリーム、文字列などに書き"
#~ "込むことができます。内容を追加したり削除したり、取り出したり置き換えたり、"
#~ "再配置したり列挙したりすることもできます。それ以外にも、中身のファイル名を"
#~ "変更したり、日付やコメント、その他の属性を問い合わせたり修正したりすること"
#~ "もできます。また、 Zip は圧縮／非圧縮の両方に対応しています。\n"
#~ "\n"
#~ "メンバーは既存の Zip ファイルから作成することもできるほか、既存のディレク"
#~ "トリやファイル、文字列からも作成することができます。\n"
#~ "\n"
#~ "このモジュールは、ファイル内の圧縮ストリームを読み込むのに Compress::Raw::"
#~ "Zlibライブラリを使用しています。\n"
#~ "\n"
#~ "zip ファイルのアーカイブメンバーに対して、それらをファイルとして扱う場合"
#~ "は、Archive::Zip::MemberRead を使用することもできます。"

#~ msgid ""
#~ "The _Compress::Bzip2_ module provides a Perl interface to the *bzip2* "
#~ "compression library (see the /AUTHOR manpage for details about where to "
#~ "get _Bzip2_). A relevant subset of the functionality provided by _bzip2_ "
#~ "is available in _Compress::Bzip2_.\n"
#~ "\n"
#~ "All string parameters can either be a scalar or a scalar reference.\n"
#~ "\n"
#~ "The module can be split into two general areas of functionality, namely "
#~ "in-memory compression/decompression and read/write access to _bzip2_ "
#~ "files. Each of these areas will be discussed separately below.\n"
#~ "\n"
#~ "*NOTE*\n"
#~ "\n"
#~ "_Compress::Bzip2_ is just a simple _bzip2_ binding, comparable to the old "
#~ "the Compress::Zlib manpage library. It is not well integrated into "
#~ "PerlIO, use the preferred the IO::Compress::Bzip2 manpage instead."
#~ msgstr ""
#~ "_Compress::Bzip2_ モジュールは、 *bzip2* 圧縮ライブラリに対する Perl イン"
#~ "ターフェイスを提供しています (_Bzip2_ の取得方法についての詳細は、マニュア"
#~ "ルページ /AUTHOR をお読みください) 。 _bzip2_ で提供されているその他の機能"
#~ "についても、 _Compress::Bzip2_ で利用できます。\n"
#~ "\n"
#~ "全ての文字列パラメータは、スカラー値またはスカラー値の参照して指定すること"
#~ "ができます。\n"
#~ "\n"
#~ "このモジュールは、メモリ内での圧縮展開と _bzip2_ ファイルの読み書きアクセ"
#~ "スで大きく 2 つの機能に分けられます。それぞれの領域について、詳しくは説明"
#~ "文書をお読みください。\n"
#~ "\n"
#~ "*注意*\n"
#~ "\n"
#~ "_Compress::Bzip2_ はシンプルな _bzip2_ バインディングであり、古い "
#~ "Compress::Zlib ライブラリに似た仕組みです。 PerlIO とは十分に統合されてい"
#~ "ませんので、そのような目的の場合は IO::Compress::Bzip2 をお使いください。"

#~ msgid ""
#~ "This class is the base class for all time zone objects. A time zone is "
#~ "represented internally as a set of observances, each of which describes "
#~ "the offset from GMT for a given time period.\n"
#~ "\n"
#~ "Note that without the the DateTime manpage module, this module does not "
#~ "do much. It's primary interface is through a the DateTime manpage object, "
#~ "and most users will not need to directly use 'DateTime::TimeZone' methods."
#~ msgstr ""
#~ "このクラスはすべてのタイムゾーンオブジェクトに対するベースクラスです。タイ"
#~ "ムゾーンは内部的には慣例集として表されるもので、各時刻を GMT からのオフ"
#~ "セットとして表記しています。\n"
#~ "\n"
#~ "なお、 DateTime モジュールがない場合、本モジュールは多くのことを実現できま"
#~ "せん。主なインターフェイスは DateTime オブジェクトを通して利用する仕組みで"
#~ "あるため、多くのユーザは 'DateTime::TimeZone' のメソッドを直接使用する必要"
#~ "はないはずです。"

#~ msgid ""
#~ "This module adds the ability to quickly create new types of tie objects "
#~ "without creating a complete class. It does so in such a way as to try and "
#~ "make the programmers life easier when it comes to single-use ties.\n"
#~ "\n"
#~ "The 'Tie::Simple' package is actually a front-end to other classes which "
#~ "really do all the work once tied, but this package does the work to "
#~ "automatically figure out what you're trying to do."
#~ msgstr ""
#~ "このモジュールは、クラスを作成したりすることなく新しいタイプのタイ・オブ"
#~ "ジェクトを素早く作成するための機能を提供します。これにより単一使用のタイを"
#~ "作成することができるため、プログラマの手間を省くことができます。\n"
#~ "\n"
#~ "'Tie::Simple' パッケージは実際には tie された他のクラスに対するフロントエ"
#~ "ンドですが、このパッケージは自動的に何をするのかを検出することができます。"

#~ msgid ""
#~ "This module makes the functionality of the perltidy utility available to "
#~ "perl scripts. Any or all of the input parameters may be omitted, in which "
#~ "case the @ARGV array will be used to provide input parameters as "
#~ "described in the perltidy(1) man page.\n"
#~ "\n"
#~ "For example, the perltidy script is basically just this:\n"
#~ "\n"
#~ "    use Perl::Tidy;     Perl::Tidy::perltidy();\n"
#~ "\n"
#~ "The call to *perltidy* returns a scalar *$error_flag* which is TRUE if an "
#~ "error caused premature termination, and FALSE if the process ran to "
#~ "normal completion. Additional discuss of errors is contained below in the "
#~ "the ERROR HANDLING manpage section."
#~ msgstr ""
#~ "このモジュールは、 Perl スクリプトに対して提供されている perltidy ユーティ"
#~ "リティの機能を実装したものです。入力パラメータは自由に省略することができま"
#~ "すが、この場合は @ARGV 配列が入力パラメータを指すものとみなされます (詳し"
#~ "くは perltidy(1) のマニュアルページをお読みください。\n"
#~ "\n"
#~ "たとえば、 perltidy スクリプトは下記のようにして使用します:\n"
#~ "\n"
#~ "    use Perl::Tidy;     Perl::Tidy::perltidy();\n"
#~ "\n"
#~ "*perltidy* はスカラー値の *$error_flag* を返します。この値が TRUE の場合、"
#~ "何らかの問題が発生してエラーになったことを表し、 FALSE の場合は問題がな"
#~ "かったことを表します。エラーに対する処理について、詳しくはマニュアルページ"
#~ "の ERROR HANDLING セクションをお読みください。"

#~ msgid ""
#~ "This module offers a minimalist class construction kit in around 120 "
#~ "lines of code."
#~ msgstr ""
#~ "このモジュールは、 120 行のコードで作られた最小限のクラス構築キットです。"

#~ msgid ""
#~ "This module provides a few convenience methods for testing exception "
#~ "based code. It is built with the Test::Builder manpage and plays happily "
#~ "with the Test::More manpage and friends.\n"
#~ "\n"
#~ "If you are not already familiar with the Test::More manpage now would be "
#~ "the time to go take a look.\n"
#~ "\n"
#~ "You can specify the test plan when you 'use Test::Exception' in the same "
#~ "way as 'use Test::More'. See the Test::More manpage for details.\n"
#~ "\n"
#~ "NOTE: Test::Exception only checks for exceptions. It will ignore other "
#~ "methods of stopping program execution - including exit(). If you have an "
#~ "exit() in evalled code Test::Exception will not catch this with any of "
#~ "its testing functions.\n"
#~ "\n"
#~ "NOTE: This module uses the Sub::Uplevel manpage and relies on overriding "
#~ "'CORE::GLOBAL::caller' to hide your test blocks from the call stack. If "
#~ "this use of global overrides concerns you, the the Test::Fatal manpage "
#~ "module offers a more minimalist alternative.\n"
#~ "\n"
#~ "* *throws_ok*\n"
#~ "\n"
#~ "  Tests to see that a specific exception is thrown. throws_ok() has two   "
#~ "forms:\n"
#~ "\n"
#~ "    throws_ok BLOCK REGEX, TEST_DESCRIPTION     throws_ok BLOCK CLASS, "
#~ "TEST_DESCRIPTION\n"
#~ "\n"
#~ "  In the first form the test passes if the stringified exception "
#~ "matches   the give regular expression. For example:\n"
#~ "\n"
#~ "      throws_ok { read_file( 'unreadable' ) } qr/No file/, 'no file';\n"
#~ "\n"
#~ "  If your perl does not support 'qr//' you can also pass a regex-like   "
#~ "string, for example:\n"
#~ "\n"
#~ "      throws_ok { read_file( 'unreadable' ) } '/No file/', 'no file';\n"
#~ "\n"
#~ "  The second form of throws_ok() test passes if the exception is of the   "
#~ "same class as the one supplied, or a subclass of that class. For "
#~ "example:\n"
#~ "\n"
#~ "      throws_ok { $foo->bar } \"Error::Simple\", 'simple error';\n"
#~ "\n"
#~ "  Will only pass if the 'bar' method throws an Error::Simple exception, "
#~ "or   a subclass of an Error::Simple exception.\n"
#~ "\n"
#~ "  You can get the same effect by passing an instance of the exception "
#~ "you   want to look for. The following is equivalent to the previous "
#~ "example:\n"
#~ "\n"
#~ "      my $SIMPLE = Error::Simple->new;       throws_ok { $foo->bar } "
#~ "$SIMPLE, 'simple error';\n"
#~ "\n"
#~ "  Should a throws_ok() test fail it produces appropriate diagnostic   "
#~ "messages. For example:\n"
#~ "\n"
#~ "      not ok 3 - simple error                     \n"
#~ "\n"
#~ "  Like all other Test::Exception functions you can avoid prototypes by   "
#~ "passing a subroutine explicitly:\n"
#~ "\n"
#~ "      throws_ok( sub {$foo->bar}, \"Error::Simple\", 'simple error' );\n"
#~ "\n"
#~ "  A true value is returned if the test succeeds, false otherwise. On "
#~ "exit   $@ is guaranteed to be the cause of death (if any).\n"
#~ "\n"
#~ "  A description of the exception being checked is used if no optional "
#~ "test   description is passed.\n"
#~ "\n"
#~ "  NOTE: Remember when you 'die $string_without_a_trailing_newline' perl   "
#~ "will automatically add the current script line number, input line "
#~ "number   and a newline. This will form part of the string that throws_ok "
#~ "regular   expressions match against.\n"
#~ "\n"
#~ "* *dies_ok*\n"
#~ "\n"
#~ "  Checks that a piece of code dies, rather than returning normally. For   "
#~ "example:\n"
#~ "\n"
#~ "      sub div {           my ( $a, $b ) = @_;           return $a / "
#~ "$b;       };\n"
#~ "\n"
#~ "      dies_ok { div( 1, 0 ) } 'divide by zero detected';\n"
#~ "\n"
#~ "             dies_ok( sub { div( 1, 0 ) }, 'divide by zero detected' );\n"
#~ "\n"
#~ "  A true value is returned if the test succeeds, false otherwise. On "
#~ "exit   $@ is guaranteed to be the cause of death (if any).\n"
#~ "\n"
#~ "  Remember: This test will pass if the code dies for any reason. If you   "
#~ "care about the reason it might be more sensible to write a more "
#~ "specific   test using throws_ok().\n"
#~ "\n"
#~ "  The test description is optional, but recommended.\n"
#~ "\n"
#~ "* *lives_ok*\n"
#~ "\n"
#~ "  Checks that a piece of code doesn't die. This allows your test script "
#~ "to   continue, rather than aborting if you get an unexpected exception. "
#~ "For   example:\n"
#~ "\n"
#~ "      sub read_file {           my $file = shift;           local "
#~ "$/;           open my $fh, '<', $file or die \"open failed ($!)\\n"
#~ "\";           $file = <FILE>;           return $file;       };\n"
#~ "\n"
#~ "      my $file;       lives_ok { $file = read_file('test.txt') } 'file "
#~ "read';\n"
#~ "\n"
#~ "             lives_ok( sub { $file = read_file('test.txt') }, 'file "
#~ "read' );\n"
#~ "\n"
#~ "  Should a lives_ok() test fail it produces appropriate diagnostic   "
#~ "messages. For example:\n"
#~ "\n"
#~ "      not ok 1 - file read              \n"
#~ "\n"
#~ "  A true value is returned if the test succeeds, false otherwise. On "
#~ "exit   $@ is guaranteed to be the cause of death (if any).\n"
#~ "\n"
#~ "  The test description is optional, but recommended.\n"
#~ "\n"
#~ "* *lives_and*\n"
#~ "\n"
#~ "  Run a test that may throw an exception. For example, instead of doing:\n"
#~ "\n"
#~ "    my $file;     lives_ok { $file = read_file('answer.txt') } 'read_file "
#~ "worked';     is $file, \"42\", 'answer was 42';\n"
#~ "\n"
#~ "  You can use lives_and() like this:\n"
#~ "\n"
#~ "    lives_and { is read_file('answer.txt'), \"42\" } 'answer is "
#~ "42';          lives_and(sub {is read_file('answer.txt'), \"42\"}, 'answer "
#~ "is 42');\n"
#~ "\n"
#~ "  Which is the same as doing\n"
#~ "\n"
#~ "    is read_file('answer.txt'), \"42\\n\", 'answer is 42';\n"
#~ "\n"
#~ "  unless 'read_file('answer.txt')' dies, in which case you get the same   "
#~ "kind of error as lives_ok()\n"
#~ "\n"
#~ "    not ok 1 - answer is 42          \n"
#~ "\n"
#~ "  A true value is returned if the test succeeds, false otherwise. On "
#~ "exit   $@ is guaranteed to be the cause of death (if any).\n"
#~ "\n"
#~ "  The test description is optional, but recommended."
#~ msgstr ""
#~ "このモジュールは、例外ベースのコードをテストするのに便利なメソッドをいくつ"
#~ "か提供しています。 Test::Builder で構築され、 Test::More などのモジュール"
#~ "を併用しています。\\n\n"
#~ "\\n\n"
#~ "Test::More について詳しくない場合は、まず下記をお読みください。\\n\n"
#~ "\\n\n"
#~ "'use Test::More' と同じ方法で 'use Test::Exception' を利用して、テストプラ"
#~ "ンを指定します。詳しくは Test::More のマニュアルページをお読みくださ"
#~ "い。\\n\n"
#~ "\\n\n"
#~ "注意: Test::Exception は例外の身をチェックします。 exit() など、プログラム"
#~ "の実行を止める他の方法については、無視してしまいます。テスト対象のコード"
#~ "で exit() を利用している場合、 Test::Exception はこのようなテスト結果を捕"
#~ "捉することができません。\\n\n"
#~ "\\n\n"
#~ "注意: このモジュールは Sub::Uplevel を利用しているほか、コールスタックから"
#~ "テストブロックを隠ぺいするために 'CORE::GLOBAL::caller' をオーバーライドす"
#~ "る処理に依存しています。このようなグローバルオーバーライドの仕組みに問題が"
#~ "ある場合は、最小限の代替手段である Test::Fatal をお使いください。\\n\n"
#~ "\\n\n"
#~ "* *throws_ok*\\n\n"
#~ "\\n\n"
#~ "  指定した例外がスローされたかどうかをテストします。 throws_ok() は 2 種類"
#~ "の利用法があります:\\n\n"
#~ "\\n\n"
#~ "    throws_ok BLOCK REGEX, TEST_DESCRIPTION     throws_ok BLOCK CLASS, "
#~ "TEST_DESCRIPTION\\n\n"
#~ "\\n\n"
#~ "  1 つめの形式は、例外を文字列に変換した場合、指定した正規表現にマッチすれ"
#~ "ばテストが通るようになります。たとえば下記のようになります:\\n\n"
#~ "\\n\n"
#~ "      throws_ok { read_file( 'unreadable' ) } qr/No file/, 'no file';\\n\n"
#~ "\\n\n"
#~ "  お使いの Perl が 'qr//' に対応していない場合は、正規表現に似た形式を指定"
#~ "することもできます。たとえば下記のようになります:\\n\n"
#~ "\\n\n"
#~ "      throws_ok { read_file( 'unreadable' ) } '/No file/', 'no file';\\n\n"
#~ "\\n\n"
#~ "  throws_ok() の 2 つめの形式は、例外が指定したクラスと同じか、そのクラス"
#~ "のサブクラスであった場合にテストが通るようになります。たとえば下記のように"
#~ "なります:\\n\n"
#~ "\\n\n"
#~ "      throws_ok { $foo->bar } \\\"Error::Simple\\\", 'simple error';\\n\n"
#~ "\\n\n"
#~ "  上記の例では、 'bar' メソッドが Error:Simple もしくはそのサブクラスの例"
#~ "外を投げた場合にのみテストが通ります。\\n\n"
#~ "\\n\n"
#~ "  なお、スローさせたい例外のインスタンスを渡しても同じ効果になります。下記"
#~ "の例は、以前の例と同じ意味になります:\\n\n"
#~ "\\n\n"
#~ "      my $SIMPLE = Error::Simple->new;       throws_ok { $foo->bar } "
#~ "$SIMPLE, 'simple error';\\n\n"
#~ "\\n\n"
#~ "  テストが失敗した場合は、適切な診断メッセージを生成します。たとえば下記の"
#~ "ようになります:\\n\n"
#~ "\\n\n"
#~ "      not ok 3 - simple error                     \\n\n"
#~ "\\n\n"
#~ "  その他の Test::Exception 関数と同様に、サブルーチンを明示的に渡してプロ"
#~ "トタイプ化を防ぐこともできます:\\n\n"
#~ "\\n\n"
#~ "      throws_ok( sub {$foo->bar}, \\\"Error::Simple\\\", 'simple error' );"
#~ "\\n\n"
#~ "\\n\n"
#~ "  テストが成功した場合は true 値が返され、それ以外の場合は false 値が返さ"
#~ "れます。終了時、 $@ には失敗理由 (もしあれば) が必ず設定されます。\\n\n"
#~ "\\n\n"
#~ "  テストの説明を指定しない場合は、チェック対象の例外の説明が設定されま"
#~ "す。\\n\n"
#~ "\\n\n"
#~ "  注意: 'die $string_without_a_trailing_newline' で終了した場合、 Perl は"
#~ "現在のスクリプトの行番号と入力の行番号、および改行を自動的に追加します。こ"
#~ "れにより、 throws_ok() の正規表現がマッチした箇所を示します。\\n\n"
#~ "\\n\n"
#~ "* *dies_ok*\\n\n"
#~ "\\n\n"
#~ "  コードが die() するかどうかをテストします。たとえば下記のようになります:"
#~ "\\n\n"
#~ "\\n\n"
#~ "      sub div {           my ( $a, $b ) = @_;           return $a / "
#~ "$b;       };\\n\n"
#~ "\\n\n"
#~ "      dies_ok { div( 1, 0 ) } 'divide by zero detected';\\n\n"
#~ "\\n\n"
#~ "             dies_ok( sub { div( 1, 0 ) }, 'divide by zero detected' );"
#~ "\\n\n"
#~ "\\n\n"
#~ "  テストが成功すると true を、それ以外の場合は false を返します。終了時、 "
#~ "$@ には失敗理由 (もしあれば) が必ず設定されます。\\n\n"
#~ "\\n\n"
#~ "  注意: このテストは何らかの理由で die() した場合に通過するテストです。可"
#~ "能であれば throws_ok() を利用して、特定の例外時にのみテストが通るようにし"
#~ "たほうがよいでしょう。\\n\n"
#~ "\\n\n"
#~ "  テストの説明は省略可能ですが、できる限り設定しておくことをお勧めしま"
#~ "す。\\n\n"
#~ "\\n\n"
#~ "* *lives_ok*\\n\n"
#~ "\\n\n"
#~ "  コード内で die() しないことをテストします。これにより、テストスクリプト"
#~ "が不正な例外などで abort しないことを確認することができます。たとえば下記"
#~ "のようになります:\\n\n"
#~ "\\n\n"
#~ "      sub read_file {           my $file = shift;           local "
#~ "$/;           open my $fh, '<', $file or die \\\"open failed ($!)\\\\n\\"
#~ "\";           $file = <FILE>;           return $file;       };\\n\n"
#~ "\\n\n"
#~ "      my $file;       lives_ok { $file = read_file('test.txt') } 'file "
#~ "read';\\n\n"
#~ "\\n\n"
#~ "             lives_ok( sub { $file = read_file('test.txt') }, 'file "
#~ "read' );\\n\n"
#~ "\\n\n"
#~ "  何らかの診断メッセージが生成された場合、 lives_ok() は失敗します。たとえ"
#~ "ば下記のようになります:\\n\n"
#~ "\\n\n"
#~ "      not ok 1 - file read              \\n\n"
#~ "\\n\n"
#~ "  テストが成功すると true を、それ以外の場合は false を返します。終了時、 "
#~ "$@ には失敗理由 (もしあれば) が必ず設定されます。\\n\n"
#~ "\\n\n"
#~ "  テストの説明は省略可能ですが、できる限り設定しておくことをお勧めしま"
#~ "す。\\n\n"
#~ "\\n\n"
#~ "* *lives_and*\\n\n"
#~ "\\n\n"
#~ "  例外をスローする可能性のあるテストを実施することができます。たとえば下記"
#~ "のようなコードがあるものとします:\\n\n"
#~ "\\n\n"
#~ "    my $file;     lives_ok { $file = read_file('answer.txt') } 'read_file "
#~ "worked';     is $file, \\\"42\\\", 'answer was 42';\\n\n"
#~ "\\n\n"
#~ "  上記のコードは、 lives_and() を利用すると下記のようにすることができます:"
#~ "\\n\n"
#~ "\\n\n"
#~ "    lives_and { is read_file('answer.txt'), \\\"42\\\" } 'answer is "
#~ "42';          lives_and(sub {is read_file('answer.txt'), \\\"42\\\"}, "
#~ "'answer is 42');\\n\n"
#~ "\\n\n"
#~ "  これは 'read_file('answer.txt')' が die() しない場合は下記と同じ意味にな"
#~ "ります:\\n\n"
#~ "\\n\n"
#~ "    is read_file('answer.txt'), \\\"42\\\\n\\\", 'answer is 42';\\n\n"
#~ "\\n\n"
#~ "  'read_file('answer.txt')' が die() した場合は lives_ok() と同じ種類のエ"
#~ "ラーになります。\\n\n"
#~ "\\n\n"
#~ "    not ok 1 - answer is 42          \\n\n"
#~ "\\n\n"
#~ "  テストが成功すると true を、それ以外の場合は false を返します。終了時、 "
#~ "$@ には失敗理由 (もしあれば) が必ず設定されます。\\n\n"
#~ "\\n\n"
#~ "  テストの説明は省略可能ですが、できる限り設定しておくことをお勧めします。"

#~ msgid ""
#~ "This module provides bare bones 'try'/'catch'/'finally' statements that "
#~ "are designed to minimize common mistakes with eval blocks, and NOTHING "
#~ "else.\n"
#~ "\n"
#~ "This is unlike the TryCatch manpage which provides a nice syntax and "
#~ "avoids adding another call stack layer, and supports calling 'return' "
#~ "from the 'try' block to return from the parent subroutine. These extra "
#~ "features come at a cost of a few dependencies, namely the Devel::Declare "
#~ "manpage and the Scope::Upper manpage which are occasionally problematic, "
#~ "and the additional catch filtering uses the Moose manpage type "
#~ "constraints which may not be desirable either.\n"
#~ "\n"
#~ "The main focus of this module is to provide simple and reliable error "
#~ "handling for those having a hard time installing the TryCatch manpage, "
#~ "but who still want to write correct 'eval' blocks without 5 lines of "
#~ "boilerplate each time.\n"
#~ "\n"
#~ "It's designed to work as correctly as possible in light of the various "
#~ "pathological edge cases (see the /BACKGROUND manpage) and to be "
#~ "compatible with any style of error values (simple strings, references, "
#~ "objects, overloaded objects, etc).\n"
#~ "\n"
#~ "If the 'try' block dies, it returns the value of the last statement "
#~ "executed in the 'catch' block, if there is one. Otherwise, it returns "
#~ "'undef' in scalar context or the empty list in list context. The "
#~ "following examples all assign '\"bar\"' to '$x':\n"
#~ "\n"
#~ "  my $x = try { die \"foo\" } catch { \"bar\" };   my $x = try { die \"foo"
#~ "\" } || { \"bar\" };   my $x = (try { die \"foo\" }) // { \"bar\" };\n"
#~ "\n"
#~ "  my $x = eval { die \"foo\" } || \"bar\";\n"
#~ "\n"
#~ "You can add 'finally' blocks, yielding the following:\n"
#~ "\n"
#~ "  my $x;   try { die 'foo' } finally { $x = 'bar' };   try { die 'foo' } "
#~ "catch { warn \"Got a die: $_\" } finally { $x = 'bar' };\n"
#~ "\n"
#~ "'finally' blocks are always executed making them suitable for cleanup "
#~ "code which cannot be handled using local. You can add as many 'finally' "
#~ "blocks to a given 'try' block as you like."
#~ msgstr ""
#~ "このモジュールは、一般的な eval ブロックにおけるコーディングミスを排除する"
#~ "ため、'try'/'catch'/'finally' にあたるブロックの雛形を生成するだけの仕組み"
#~ "です。\n"
#~ "\n"
#~ "TryCatch のように見やすく、かつ他の呼び出し階層を追加したりすることもな"
#~ "く、'try' ブロック内からの 'return' や親サブルーチンからの return にも対応"
#~ "したTryCatch モジュールとは、異なる仕組みです。これらの追加機能は少ない依"
#~ "存関係で処理できる仕組みで、具体的には時々問題の元凶ともなりうる Devel::"
#~ "Declare と Scope::Upper を使用することになります。また、追加の catch フィ"
#~ "ルタリングを使用することで、あまり積極的には使われない Moose タイプ制約を"
#~ "使用することにもなります。\n"
#~ "\n"
#~ "このモジュールの主な目的は、 TryCatch をインストールするだけの手間暇をかけ"
#~ "ることはしたくないが、 'eval' で始まる 5 行の決まり文句を記述し続けたい人"
#~ "に対して、シンプルで信頼性の高いエラー処理機能を提供します。\n"
#~ "\n"
#~ "このモジュールは、様々な例外ケースをできる限り正しく処理できるように設計し"
#~ "ているもの (詳しくはマニュアルページ内の /BACKGROUND をお読みください) "
#~ "で、様々な形態のエラー値 (単純な文字列、参照、オブジェクト、オーバーロード"
#~ "されたオブジェクトなど) との互換性も確保されています。\n"
#~ "\n"
#~ "もしも 'try' ブロック内で何らかの例外 (die) が発生すると、 'catch' ブロッ"
#~ "ク内では最後に実行されたステートメントの値が返されます。例外が発生しない場"
#~ "合は、スカラーコンテキストの場合は 'undef' が、リストの場合は空のリストが"
#~ "返されます。下記の例は、いずれも '$x' に '\"bar\"' を代入します:\n"
#~ "\n"
#~ "  my $x = try { die \"foo\" } catch { \"bar\" };   my $x = try { die \"foo"
#~ "\" } || { \"bar\" };   my $x = (try { die \"foo\" }) // { \"bar\" };\n"
#~ "\n"
#~ "  my $x = eval { die \"foo\" } || \"bar\";\n"
#~ "\n"
#~ "下記のようにして 'finally' ブロックを追加することもできます。\n"
#~ "\n"
#~ "  my $x;   try { die 'foo' } finally { $x = 'bar' };   try { die 'foo' } "
#~ "catch { warn \"Got a die: $_\" } finally { $x = 'bar' };\n"
#~ "\n"
#~ "'finally' のブロックは、 local を利用して処理することのできない、後処理用"
#~ "のコードを作成するのに便利な仕組みです。必要に応じて複数の 'finally' ブ"
#~ "ロックを追加することもできます。"

#~ msgid ""
#~ "This module provides conflicts checking for the Module::Runtime manpage, "
#~ "which had a recent release that broke some versions of the Moose manpage. "
#~ "It is called from the Moose::Conflicts manpage and 'moose-outdated'."
#~ msgstr ""
#~ "このモジュールは、 Module::Runtime モジュールに対して矛盾チェックの機能を"
#~ "提供します。これは、 Moose のバージョンによっては依存関係を壊してしまうリ"
#~ "リースが存在していたことによるものです。 Moose::Conflicts および 'moose-"
#~ "outdated' から呼び出されます。"

#~ msgid ""
#~ "This module tries to make it easy to build Perl extensions that use "
#~ "functions and typemaps provided by other perl extensions. This means that "
#~ "a perl extension is treated like a shared library that provides also a C "
#~ "and an XS interface besides the perl one.\n"
#~ "\n"
#~ "This works as long as the base extension is loaded with the RTLD_GLOBAL "
#~ "flag (usually done with a\n"
#~ "\n"
#~ "\tsub dl_load_flags {0x01}\n"
#~ "\n"
#~ "in the main .pm file) if you need to use functions defined in the "
#~ "module.\n"
#~ "\n"
#~ "The basic scheme of operation is to collect information about a module in "
#~ "the instance, and then store that data in the Perl library where it may "
#~ "be retrieved later. The object can also reformat this information into "
#~ "the data structures required by ExtUtils::MakeMaker's WriteMakefile "
#~ "function.\n"
#~ "\n"
#~ "For information on how to make your module fit into this scheme, see the /"
#~ "\"hashref = ExtUtils::Depends::load (name)\" manpage.\n"
#~ "\n"
#~ "When creating a new Depends object, you give it a name, which is the name "
#~ "of the module you are building. You can also specify the names of modules "
#~ "on which this module depends. These dependencies will be loaded "
#~ "automatically, and their typemaps, header files, etc merged with your new "
#~ "object's stuff. When you store the data for your object, the list of "
#~ "dependencies are stored with it, so that another module depending on your "
#~ "needn't know on exactly which modules yours depends.\n"
#~ "\n"
#~ "For example:\n"
#~ "\n"
#~ "  Gtk2 depends on Glib\n"
#~ "\n"
#~ "  Gnome2::Canvas depends on Gtk2\n"
#~ "\n"
#~ "  ExtUtils::Depends->new ('Gnome2::Canvas', 'Gtk2');      this command "
#~ "automatically brings in all the stuff needed      for Glib, since Gtk2 "
#~ "depends on it.\n"
#~ "\n"
#~ "When the configuration information is saved, it also includes a class "
#~ "method called 'Inline', inheritable by your module. This allows you in "
#~ "your module to simply say at the top:\n"
#~ "\n"
#~ "  package Mymod;   use parent 'Mymod::Install::Files'; # to inherit "
#~ "'Inline' method\n"
#~ "\n"
#~ "And users of 'Mymod' who want to write inline code (using the Inline "
#~ "manpage) will simply be able to write:\n"
#~ "\n"
#~ "  use Inline with => 'Mymod';\n"
#~ "\n"
#~ "And all the necessary header files, defines, and libraries will be added "
#~ "for them.\n"
#~ "\n"
#~ "The 'Mymod::Install::Files' will also implement a 'deps' method, which "
#~ "will return a list of any modules that 'Mymod' depends on - you will not "
#~ "normally need to use this:\n"
#~ "\n"
#~ "  require Mymod::Install::Files;   @deps = Mymod::Install::Files->deps;"
#~ msgstr ""
#~ "このモジュールは、他の Perl 拡張が提供する関数やタイプマップを使用した新し"
#~ "い Perl 拡張の作成を支援するモジュールです。つまり、この Perl 拡張はC 言語"
#~ "で提供されているような共有ライブラリとして動作するもので、 Perl では XS イ"
#~ "ンターフェイスと呼ばれています。\n"
#~ "\n"
#~ "モジュール内で定義されている関数を使用したい場合、基本部分の拡張を "
#~ "RTLD_GLOBAL フラグ付きで読み込むこと(通常はメインの .pm ファイル内に\n"
#~ "\n"
#~ "\tsub dl_load_flags {0x01}\n"
#~ "\n"
#~ "を書き込んで行ないます) で動作します。\n"
#~ "\n"
#~ "基本的な動作としては、インスタンス内のモジュールに関する情報を収集し、"
#~ "Perl ライブラリ内のデータをあとから採取できるように、データを保存します。"
#~ "オブジェクト側ではこの情報を再度データ構造に書式化し、 ExtUtils::"
#~ "MakeMaker のWriteMakefile 関数で必要な形にします。\n"
#~ "\n"
#~ "お使いのモジュールをこのスキームに合わせる方法について、詳しくは /"
#~ "\"hashref = ExtUtils::Depends::load (name)\" のマニュアルページをお読みく"
#~ "ださい。\n"
#~ "\n"
#~ "新しい Depends オブジェクトを作成すると、構築するモジュールの名前を設定し"
#~ "ます。また、このモジュールが必要とするモジュールについても名前を設定しま"
#~ "す。これらの依存関係は自動的に読み込まれ、タイプマップやヘッダファイルなど"
#~ "は新しいオブジェクトの要素として組み込まれます。そのオブジェクトに対して"
#~ "データを保存すると依存関係の一覧が保存され、どのようなモジュールに依存して"
#~ "いるのかを知ることなく依存先のモジュールで作業を行なうことができます。\n"
#~ "\n"
#~ "例:\n"
#~ "\n"
#~ "  Gtk2 は Glib に依存しています。\n"
#~ "\n"
#~ "  Gnome2::Canvas は Gtk2 に依存しています。\n"
#~ "\n"
#~ "  ExtUtils::Depends->new ('Gnome2::Canvas', 'Gtk2'); このように実行する"
#~ "と、 Glib に対して必要なもの全てが自動的に組み込まれます。\n"
#~ "設定情報を保存すると、 'Inline' という名前のクラスメソッドを含めることにな"
#~ "ります。これはお使いのモジュールで継承可能な仕組みであるため、お使いのモ"
#~ "ジュールの冒頭部で、下記のように定義することができるようになります:\n"
#~ "\n"
#~ "  package Mymod;   use parent 'Mymod::Install::Files'; # 'Inline' メソッド"
#~ "の継承\n"
#~ "また、インラインのコードを (Inline で) 記述したい 'Mymod' のユーザは、下記"
#~ "のように記述することができます:\n"
#~ "\n"
#~ "  use Inline with => 'Mymod';\n"
#~ "\n"
#~ "上記のようにすることで、必要なヘッダファイルや定義、ライブラリなどが追加さ"
#~ "れるようになります。\n"
#~ "\n"
#~ "'Mymod::Install::Files' では 'deps' メソッドを実装することもできます。これ"
#~ "は 'Mymod' が依存する任意のモジュールのリストを帰すもので、通常は不要な仕"
#~ "組みです:\n"
#~ "\n"
#~ "  require Mymod::Install::Files;   @deps = Mymod::Install::Files->deps;"

#~ msgid "Variable ties made easier: much, much, much easier..."
#~ msgstr "変数の tie 機能をとてもとても簡単にするモジュール"

#, fuzzy
#~ msgid "a module to read Mozilla URL history files"
#~ msgstr "TNEF ファイルを読み込む Perl モジュール"

#~ msgid "allow easy manipulation of IPv4 and IPv6 addresses"
#~ msgstr "IPv4 および IPv6 アドレスの処理"

#~ msgid "build and scan parse-trees of HTML"
#~ msgstr "HTML ツリー構造の構築とスキャン"

#, fuzzy
#~ msgid "cpanfile support for EUMM"
#~ msgstr "SWP 向け OpenSSL サポート"

#, fuzzy
#~ msgid "lightweight exporting of functions and variables"
#~ msgstr "軽量 LXDE 端末"

#~ msgid ""
#~ "the Mojolicious::Plugin::Bootstrap3 manpage is used to include the http://"
#~ "getbootstrap.com/ manpage CSS and JavaScript files into your project.\n"
#~ "\n"
#~ "This is done with the help of the Mojolicious::Plugin::AssetPack manpage "
#~ "and http://sass-lang.com/.\n"
#~ "\n"
#~ "See the Mojolicious::Plugin::AssetPack::Preprocessor::Sass/DESCRIPTION "
#~ "manpage on how to intall Sass."
#~ msgstr ""
#~ "Mojolicious::Plugin::Bootstrap3 は http://getbootstrap.com/ の CSS と "
#~ "JavaScript ファイルをプロジェクト内に取り込むことができるモジュールで"
#~ "す。\n"
#~ "\n"
#~ "これは Mojolicious::Plugin::AssetPack と http://sass-lang.com/ の支援のも"
#~ "と行なわれています。\n"
#~ "\n"
#~ "Sass のインストール方法についての詳細は、 Mojolicious::Plugin::AssetPack::"
#~ "Preprocessor::Sass/DESCRIPTION をお読みください。"
