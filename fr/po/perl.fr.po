# This file was automatically generated
# Antoine Belvire <antoine.belvire@laposte.net>, 2016.
msgid ""
msgstr ""
"Project-Id-Version: opensuse-i 18n\n"
"POT-Creation-Date: 2022-02-28 18:22+0000\n"
"PO-Revision-Date: 2024-07-27 18:47+0000\n"
"Last-Translator: Olivier Belleux <o.g.m.belleux@gmail.com>\n"
"Language-Team: French <https://l10n.opensuse.org/projects/packages-i18n/"
"perl-master/fr/>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=n > 1;\n"
"X-Generator: Weblate 5.6.2\n"

#. leap-nonoss/perlref/summary
msgid "Perl 5 Reference Guide"
msgstr "Guide référence de Perl 5"

#. leap-nonoss/perlref/description
msgid "Perl 5 Reference Guide in PS and PDF format"
msgstr ""

#. leap/perl-Image-ExifTool/exiftool/summary
#, fuzzy
msgid "Customisable application to read and write meta information in files"
msgstr ""
"Un script Perl hautement configurable pour lire et modifier des méta-"
"informations dans des fichiers"

#. leap/perl-Image-ExifTool/exiftool/description
#, fuzzy
msgid ""
"ExifTool is a a full-featured application for reading and writing meta "
"information in a wide variety of files, including the maker note information "
"of many digital cameras by various manufacturers such as Canon, Casio, "
"FujiFilm, GE, HP, JVC/Victor, Kodak, Leaf, Minolta/Konica-Minolta, Nikon, "
"Olympus/Epson, Panasonic/Leica, Pentax/Asahi, Reconyx, Ricoh, Samsung, "
"Sanyo, Sigma/Foveon and Sony."
msgstr ""
"ExifTool est un module Perl fournissant applicatione en ligne de commande "
"pour lire et modifier les meta-informations de fichiers graphiques. Il "
"reconnait EXIF, GPS, IPTC, XMP, JFIF, GeoTIFF, ICC Profile, Photoshop IRB, "
"et ID3 ainsi que les balises propriétaires de la plupart des manufacturiers "
"d'appareils photo comme Canon, Casio, FujiFilm, Kodak, Leaf, Minolta/Konica-"
"Minolta, Nikon, Olympus/Epson, Panasonic/Leica, Pentax/Asahi, Ricoh, Sanyo, "
"et Sigma/Foveon."

#. leap/perl-File-Unpack/file-unpack/summary
msgid "Command line tool to unpack anything"
msgstr ""

#. leap/perl-File-Unpack/file-unpack/description
msgid ""
"/usr/bin/file-unpack is a trivial command line frontend that ships with the "
"File::Unpack perl module."
msgstr ""

#. leap/perl-Net-Pcap/pcapdump/summary
msgid "Dump packets from the network"
msgstr ""

#. leap/perl-Net-Pcap/pcapdump/description
msgid ""
"Command line tool to dump packets from the network.\n"
"\n"
"pcapdump mimics the very basic features of tcpdump(1) and provides a good "
"example of how to use Net::Pcap."
msgstr ""

#. leap/perl-Net-Pcap/pcapinfo/summary
msgid "Prints detailed information about the network devices"
msgstr ""

#. leap/perl-Net-Pcap/pcapinfo/description
msgid ""
"pcapinfo prints detailed information about the network devices and Pcap "
"library available on the current host."
msgstr ""

#. leap/perl/perl-32bit/summary
#. leap/perl/summary
#. leap/perl/perl-base-32bit/summary
#. leap/perl/perl-base/summary
#, fuzzy
msgid "The Perl interpreter"
msgstr "Interpréteur Perl"

#. leap/perl/perl-32bit/description
#. leap/perl/description
#, fuzzy
msgid ""
"perl - Practical Extraction and Report Language\n"
"\n"
"Perl is optimized for scanning arbitrary text files, extracting information "
"from those text files, and printing reports based on that information.  It "
"is also good for many system management tasks. Perl is intended to be "
"practical (easy to use, efficient, and complete) rather than beautiful "
"(tiny, elegant, and minimal).\n"
"\n"
"Some of the modules available on CPAN can be found in the \"perl\" series."
msgstr ""
"Attention: pour des raisons de sécurité, nous n'avons pas positionné le bit "
"suid pour /usr/bin/suidperl. Si cette fonctionnalité vous est nécessaire, "
"inscrivez la ligne suivante dans /etc/permissions.local et démarrez "
"SuSEconfig.\n"
"\n"
" /usr/bin/suidperl       root.root        4755"

#. leap/perl-Acme-Damn/summary
msgid "'Unbless' Perl objects"
msgstr ""

#. leap/perl-Acme-Damn/description
msgid ""
"*Acme::Damn* provides a single routine, *damn()*, which takes a blessed "
"reference (a Perl object), and _unblesses_ it, to return the original "
"reference."
msgstr ""

#. leap/perl-Algorithm-Annotate/summary
msgid "represent a series of changes in annotate form"
msgstr ""

#. leap/perl-Algorithm-Annotate/description
msgid ""
"Algorithm::Annotate generates a list that is useful for generating output "
"simliar to 'cvs annotate'."
msgstr ""

#. leap/perl-Algorithm-C3/summary
msgid "Module for merging hierarchies using the C3 algorithm"
msgstr ""

#. leap/perl-Algorithm-C3/description
msgid ""
"This module implements the C3 algorithm. I have broken this out into it's "
"own module because I found myself copying and pasting it way too often for "
"various needs. Most of the uses I have for C3 revolve around class building "
"and metamodels, but it could also be used for things like dependency "
"resolution as well since it tends to do such a nice job of preserving local "
"precedence orderings.\n"
"\n"
"Below is a brief explanation of C3 taken from the Class::C3 module. For more "
"detailed information, see the SEE ALSO section and the links there."
msgstr ""

#. leap/perl-Algorithm-CheckDigits/summary
#. leap/perl-Algorithm-CheckDigits/description
#, fuzzy
msgid "Perl extension to generate and test check digits"
msgstr "Interface Perl pour objets URI"

#. leap/perl-Algorithm-Combinatorics/summary
msgid "Efficient generation of combinatorial sequences"
msgstr ""

#. leap/perl-Algorithm-Combinatorics/description
msgid ""
"Algorithm::Combinatorics is an efficient generator of combinatorial "
"sequences. Algorithms are selected from the literature (work in progress, "
"see the /REFERENCES manpage). Iterators do not use recursion, nor stacks, "
"and are written in C.\n"
"\n"
"Tuples are generated in lexicographic order, except in 'subsets()'."
msgstr ""

#. leap/perl-Algorithm-Diff/summary
#. leap/perl-Algorithm-Diff/description
msgid "Compute `intelligent' differences between two files / lists"
msgstr ""

#. leap/perl-Alien-Build/summary
msgid "Build external dependencies for use in CPAN"
msgstr ""

#. leap/perl-Alien-Build/description
msgid ""
"This module provides tools for building external (non-CPAN) dependencies for "
"CPAN. It is mainly designed to be used at install time of a CPAN client, and "
"work closely with Alien::Base which is used at runtime."
msgstr ""

#. leap/perl-Alien-SDL/summary
msgid "Building, Finding and Using Sdl Binaries"
msgstr ""

#. leap/perl-Alien-SDL/description
msgid ""
"Please see the Alien manpage for the manifesto of the Alien namespace.\n"
"\n"
"In short 'Alien::SDL' can be used to detect and get configuration settings "
"from an installed SDL and related libraries. Based on your platform it "
"offers the possibility to download and install prebuilt binaries or to build "
"SDL & co. from source codes.\n"
"\n"
"The important facts: \n"
"* * The module does not modify in any way the already existing SDL   "
"installation on your system. \n"
"* * If you reinstall SDL libs on your system you do not need to   reinstall "
"Alien::SDL (providing that you use the same directory for   the new "
"installation). \n"
"* * The prebuild binaries and/or binaries built from sources are always   "
"installed into perl module's 'share' directory. \n"
"* * If you use prebuild binaries and/or binaries built from sources   it "
"happens that some of the dynamic libraries (*.so, *.dll) will not   "
"automaticly loadable as they will be stored somewhere under perl module's   "
"'share' directory. To handle this scenario Alien::SDL offers some special   "
"functionality (see below)."
msgstr ""

#. leap/perl-Alien-Tidyp/summary
#. leap/perl-Alien-Tidyp/description
msgid "Building, finding and using tidyp library - L<http://www.tidyp.com>"
msgstr ""

#. leap/perl-Alien-wxWidgets/summary
msgid "Building, finding and using wxWidgets binaries"
msgstr ""

#. leap/perl-Alien-wxWidgets/description
msgid ""
"Please see Alien for the manifesto of the Alien namespace.\n"
"\n"
"In short 'Alien::wxWidgets' can be used to detect and get configuration "
"settings from an installed wxWidgets."
msgstr ""

#. leap/perl-Any-Moose/summary
#. leap/perl-Any-Moose/description
msgid "(DEPRECATED) use Moo instead!"
msgstr ""

#. leap/perl-AnyEvent/summary
msgid "The DBI of event loop programming"
msgstr ""

#. leap/perl-AnyEvent/description
msgid ""
"AnyEvent provides a uniform interface to various event loops. This allows "
"module authors to use event loop functionality without forcing module users "
"to use a specific event loop implementation (since more than one event loop "
"cannot coexist peacefully).\n"
"\n"
"The interface itself is vaguely similar, but not identical to the Event "
"module.\n"
"\n"
"During the first call of any watcher-creation method, the module tries to "
"detect the currently loaded event loop by probing whether one of the "
"following modules is already loaded: EV, AnyEvent::Loop, Event, Glib, Tk, "
"Event::Lib, Qt, POE. The first one found is used. If none are detected, the "
"module tries to load the first four modules in the order given; but note "
"that if EV is not available, the pure-perl AnyEvent::Loop should always "
"work, so the other two are not normally tried.\n"
"\n"
"Because AnyEvent first checks for modules that are already loaded, loading "
"an event model explicitly before first using AnyEvent will likely make that "
"model the default. For example:\n"
"\n"
"   use Tk;    use AnyEvent;\n"
"\n"
"   \n"
"\n"
"The _likely_ means that, if any module loads another event model and starts "
"using it, all bets are off - this case should be very rare though, as very "
"few modules hardcode event loops without announcing this very loudly.\n"
"\n"
"The pure-perl implementation of AnyEvent is called 'AnyEvent::Loop'. Like "
"other event modules you can load it explicitly and enjoy the high "
"availability of that event loop :)"
msgstr ""

#. leap/perl-AnyEvent-HTTP/summary
msgid "Simple but non-blocking HTTP/HTTPS client"
msgstr ""

#. leap/perl-AnyEvent-HTTP/description
msgid ""
"This module is an AnyEvent user, you need to make sure that you use and run "
"a supported event loop.\n"
"\n"
"This module implements a simple, stateless and non-blocking HTTP client. It "
"supports GET, POST and other request methods, cookies and more, all on a "
"very low level. It can follow redirects, supports proxies, and automatically "
"limits the number of connections to the values specified in the RFC.\n"
"\n"
"It should generally be a \"good client\" that is enough for most HTTP tasks. "
"Simple tasks should be simple, but complex tasks should still be possible as "
"the user retains control over request and response headers.\n"
"\n"
"The caller is responsible for authentication management, cookies (if the "
"simplistic implementation in this module doesn't suffice), referer and other "
"high-level protocol details for which this module offers only limited "
"support."
msgstr ""

#. leap/perl-AnyEvent-I3/summary
msgid "Communicate with the I3 Window Manager"
msgstr ""

#. leap/perl-AnyEvent-I3/description
msgid "communicate with the i3 window manager"
msgstr ""

#. leap/perl-Apache-AuthCookie/summary
msgid "Perl Authentication and Authorization via cookies"
msgstr ""

#. leap/perl-Apache-AuthCookie/description
msgid ""
"*Apache::AuthCookie* allows you to intercept a user's first unauthenticated "
"access to a protected document. The user will be presented with a custom "
"form where they can enter authentication credentials. The credentials are "
"posted to the server where AuthCookie verifies them and returns a session "
"key.\n"
"\n"
"The session key is returned to the user's browser as a cookie. As a cookie, "
"the browser will pass the session key on every subsequent accesses. "
"AuthCookie will verify the session key and re-authenticate the user.\n"
"\n"
"All you have to do is write a custom module that inherits from AuthCookie. "
"Your module is a class which implements two methods: \n"
"* 'authen_cred()'\n"
"\n"
"Verify the user-supplied credentials and return a session key. The session "
"key can be any string - often you'll use some string containing username, "
"timeout info, and any other information you need to determine access to "
"documents, and append a one-way hash of those values together with some "
"secret key. \n"
"* 'authen_ses_key()'\n"
"\n"
"Verify the session key (previously generated by 'authen_cred()', possibly "
"during a previous request) and return the user ID. This user ID will be fed "
"to '$r->connection->user()' to set Apache's idea of who's logged in.\n"
"\n"
"By using AuthCookie versus Apache's built-in AuthBasic you can design your "
"own authentication system. There are several benefits. \n"
"* 1.\n"
"\n"
"The client doesn't *have* to pass the user credentials on every subsequent "
"access. If you're using passwords, this means that the password can be sent "
"on the first request only, and subsequent requests don't need to send this "
"(potentially sensitive) information. This is known as \"ticket-based\" "
"authentication. \n"
"* 2.\n"
"\n"
"When you determine that the client should stop using the credentials/session "
"key, the server can tell the client to delete the cookie. Letting users "
"\"log out\" is a notoriously impossible-to-solve problem of AuthBasic. \n"
"* 3.\n"
"\n"
"AuthBasic dialog boxes are ugly. You can design your own HTML login forms "
"when you use AuthCookie. \n"
"* 4.\n"
"\n"
"You can specify the domain of a cookie using PerlSetVar commands. For "
"instance, if your AuthName is 'WhatEver', you can put the command\n"
"\n"
" PerlSetVar WhatEverDomain .yourhost.com\n"
"\n"
"into your server setup file and your access cookies will span all hosts "
"ending in '.yourhost.com'. \n"
"* 5.\n"
"\n"
"You can optionally specify the name of your cookie using the 'CookieName' "
"directive. For instance, if your AuthName is 'WhatEver', you can put the "
"command\n"
"\n"
" PerlSetVar WhatEverCookieName MyCustomName\n"
"\n"
"into your server setup file and your cookies for this AuthCookie realm will "
"be named MyCustomName. Default is AuthType_AuthName. \n"
"* 6.\n"
"\n"
"By default users must satisfy ALL of the 'require' directives. If you want "
"authentication to succeed if ANY 'require' directives are met, use the "
"'Satisfy' directive. For instance, if your AuthName is 'WhatEver', you can "
"put the command\n"
"\n"
" PerlSetVar WhatEverSatisfy Any\n"
"\n"
"into your server startup file and authentication for this realm will succeed "
"if ANY of the 'require' directives are met.\n"
"\n"
"This is the flow of the authentication handler, less the details of the "
"redirects. Two REDIRECT's are used to keep the client from displaying the "
"user's credentials in the Location field. They don't really change "
"AuthCookie's model, but they do add another round-trip request to the "
"client.\n"
"\n"
" (-----------------------)     +---------------------------------+  "
"( Request a protected   )     | AuthCookie sets custom error    |  ( page, "
"but user hasn't )---->| document and returns            |  ( authenticated "
"(no     )     | FORBIDDEN. Apache abandons      |  ( session key "
"cookie)   )     | current request and creates sub |  "
"(-----------------------)     | request for the error document. |<-"
"+                                | Error document is a script that |  "
"|                                | generates a form where the user |  "
"|                  return        | enters authentication           |  "
"|           ^------------------->| credentials (login & password). |  "
"|          / \\      False        +---------------------------------+  "
"|         /   \\                                   |                   "
"|        /     \\                                  |                   "
"|       /       \\                                 V                   "
"|      /         \\               +---------------------------------+  "
"|     /   Pass    \\              | User's client submits this form |  "
"|    /   user's    \\             | to the LOGIN URL, which calls   |  |    "
"| credentials |<------------| AuthCookie->login().            |  |    \\     "
"to      /             +---------------------------------+  |     "
"\\authen_cred/                                                   |      \\ "
"function/                                                    |       "
"\\       /                                                     |        "
"\\     /                                                      |         "
"\\   /            +------------------------------------+     |          "
"\\ /   return    | Authen cred returns a session      |  +--+           "
"V------------->| key which is opaque to AuthCookie.*|  |                 "
"True     +------------------------------------+  "
"|                                               |                  "
"|                +--------------------+         |      +---------------"
"+                |                    |         |      | If we had a   "
"|                V                    |         V      | cookie, add   |   "
"+----------------------------+  r |         ^      | a Set-Cookie  |   | If "
"we didn't have a session|  e |T       / \\     | header to     |   | key "
"cookie, add a          |  t |r      /   \\    | override the  |   | Set-"
"Cookie header with this|  u |u     /     \\   | invalid cookie|   | session "
"key. Client then   |  r |e    /       \\  +---------------+   | returns "
"session key with   |  n |    /  pass   \\               ^   | successive "
"requests        |    |   /  session  \\              |   "
"+----------------------------+    |  /   key to    \\    return   "
"|                |                    +-| authen_ses_key|------------"
"+                V                       \\             /     False   "
"+-----------------------------------+ \\           /   | Tell Apache to set "
"Expires header,|  \\         /   | set user to user ID returned by   |   "
"\\       /   | authen_ses_key, set authentication|    \\     /   | to our "
"type (e.g. AuthCookie).    |     \\   /   "
"+-----------------------------------+      "
"\\ /                                               V          "
"(---------------------)              ^          ( Request a "
"protected )              |          ( page, user has a    )--------------"
"+          ( session key cookie  )          (---------------------)\n"
"\n"
"  *  The session key that the client gets can be anything you want.  For     "
"example, encrypted information about the user, a hash of the     username "
"and password (similar in function to Digest     authentication), or the user "
"name and password in plain text     (similar in function to HTTP Basic "
"authentication).\n"
"\n"
"    The only requirement is that the authen_ses_key function that you     "
"create must be able to determine if this session_key is valid and     map it "
"back to the originally authenticated user ID."
msgstr ""

#. leap/perl-Apache-DBI/summary
msgid "Initiate a persistent database connection"
msgstr ""

#. leap/perl-Apache-DBI/description
msgid ""
"This module initiates a persistent database connection.\n"
"\n"
"The database access uses Perl's DBI. For supported DBI drivers see:\n"
"\n"
" http://dbi.perl.org/\n"
"\n"
"When loading the DBI module (do not confuse this with the Apache::DBI "
"module) it checks if the environment variable 'MOD_PERL' has been set and if "
"the module Apache::DBI has been loaded. In this case every connect request "
"will be forwarded to the Apache::DBI module. This checks if a database "
"handle from a previous connect request is already stored and if this handle "
"is still valid using the ping method. If these two conditions are fulfilled "
"it just returns the database handle. The parameters defining the connection "
"have to be exactly the same, including the connect attributes! If there is "
"no appropriate database handle or if the ping method fails, a new connection "
"is established and the handle is stored for later re-use. There is no need "
"to remove the disconnect statements from your code. They won't do anything "
"because the Apache::DBI module overloads the disconnect method."
msgstr ""

#. leap/perl-Apache-Filter/summary
#, fuzzy
msgid "Alter the output of previous handlers"
msgstr "Perl Apache Filter"

#. leap/perl-Apache-Filter/description
msgid ""
"In basic operation, each of the handlers Filter1, Filter2, and Filter3 will "
"make a call to $r->filter_input(), which will return a filehandle.  For "
"Filter1, the filehandle points to the requested file. For Filter2, the "
"filehandle contains whatever Filter1 wrote to STDOUT. For Filter3, it "
"contains whatever Filter3 wrote to STDOUT. The output of Filter3 goes "
"directly to the browser.\n"
"\n"
"Note that the modules Filter1, Filter2, and Filter3 are listed in forward "
"order, in contrast to the reverse-order listing of Apache::OutputChain.\n"
"\n"
"When you've got this module, you can use the same handler both as a stand-"
"alone handler, and as an element in a chain. Just make sure that whenever "
"you're chaining, all the handlers in the chain are \"Filter- aware,\" i.e. "
"they each call $r->filter_register() exactly once, before they start "
"printing to STDOUT. There should be almost no overhead for doing this when "
"there's only one element in the chain."
msgstr ""

#. leap/perl-Apache-LogFormat-Compiler/summary
msgid "Compile a log format string to perl-code"
msgstr ""

#. leap/perl-Apache-LogFormat-Compiler/description
msgid ""
"Compile a log format string to perl-code. For faster generation of "
"access_log lines."
msgstr ""

#. leap/perl-Apache-Session/summary
#, fuzzy
msgid "Persistence framework for session data"
msgstr "Mémoire persistante pour arbitrage des données"

#. leap/perl-Apache-Session/description
msgid ""
"Apache::Session is a persistence framework which is particularly useful for "
"tracking session data between httpd requests. Apache::Session is designed to "
"work with Apache and mod_perl, but it should work under CGI and other web "
"servers, and it also works outside of a web server altogether.\n"
"\n"
"Apache::Session consists of five components: the interface, the object "
"store, the lock manager, the ID generator, and the serializer. The interface "
"is defined in Session.pm, which is meant to be easily subclassed. The object "
"store can be the filesystem, a Berkeley DB, a MySQL DB, an Oracle DB, a "
"Postgres DB, Sybase, or Informix. Locking is done by lock files, semaphores, "
"or the locking capabilities of the various databases. Serialization is done "
"via Storable, and optionally ASCII-fied via MIME or pack(). ID numbers are "
"generated via MD5. The reader is encouraged to extend these capabilities to "
"meet his own requirements.\n"
"\n"
"A derived class of Apache::Session is used to tie together the three "
"following components. The derived class inherits the interface from Apache::"
"Session, and specifies which store and locker classes to use. Apache::"
"Session::MySQL, for instance, uses the MySQL storage class and also the "
"MySQL locking class. You can easily plug in your own object store or locker "
"class."
msgstr ""

#. leap/perl-Apache-SessionX/summary
#, fuzzy
msgid "Persistent Storage for Arbitrary Data (for Embperl)"
msgstr "Mémoire persistante pour arbitrage des données"

#. leap/perl-Apache-SessionX/description
msgid ""
"Apache::SessionX extends Apache::Session. It was initially written to use "
"Apache::Session from inside of HTML::Embperl, but is seems to be useful "
"outside of Embperl as well, so here is it as standalone module."
msgstr ""

#. leap/perl-Apache2-AuthCookieDBI/summary
msgid "An AuthCookie module backed by a DBI database"
msgstr ""

#. leap/perl-Apache2-AuthCookieDBI/description
msgid ""
"This module is an authentication handler that uses the basic mechanism "
"provided by Apache2::AuthCookie with a DBI database for ticket-based "
"protection. It is based on two tokens being provided, a username and "
"password, which can be any strings (there are no illegal characters for "
"either). The username is used to set the remote user as if Basic "
"Authentication was used.\n"
"\n"
"On an attempt to access a protected location without a valid cookie being "
"provided, the module prints an HTML login form (produced by a CGI or any "
"other handler; this can be a static file if you want to always send people "
"to the same entry page when they log in). This login form has fields for "
"username and password. On submitting it, the username and password are "
"looked up in the DBI database. The supplied password is checked against the "
"password in the database; the password in the database can be plaintext, or "
"a crypt() or md5_hex() checksum of the password. If this succeeds, the user "
"is issued a ticket. This ticket contains the username, an issue time, an "
"expire time, and an MD5 checksum of those and a secret key for the server. "
"It can optionally be encrypted before returning it to the client in the "
"cookie; encryption is only useful for preventing the client from seeing the "
"expire time. If you wish to protect passwords in transport, use an SSL-"
"encrypted connection. The ticket is given in a cookie that the browser "
"stores.\n"
"\n"
"After a login the user is redirected to the location they originally wished "
"to view (or to a fixed page if the login \"script\" was really a static "
"file).\n"
"\n"
"On this access and any subsequent attempt to access a protected document, "
"the browser returns the ticket to the server. The server unencrypts it if "
"encrypted tickets are enabled, then extracts the username, issue time, "
"expire time and checksum. A new checksum is calculated of the username, "
"issue time, expire time and the secret key again; if it agrees with the "
"checksum that the client supplied, we know that the data has not been "
"tampered with. We next check that the expire time has not passed. If not, "
"the ticket is still good, so we set the username.\n"
"\n"
"Authorization checks then check that any \"require valid-user\" or \"require "
"user jacob\" settings are passed. Finally, if a \"require group foo\" "
"directive was given, the module will look up the username in a groups "
"database and check that the user is a member of one of the groups listed. If "
"all these checks pass, the document requested is displayed.\n"
"\n"
"If a ticket has expired or is otherwise invalid it is cleared in the browser "
"and the login form is shown again."
msgstr ""

#. leap/perl-App-CELL/summary
msgid "Configuration, Error-handling, Localization, and Logging"
msgstr ""

#. leap/perl-App-CELL/description
msgid ""
"This is the top-level module of App::CELL, the Configuration, Error-"
"handling, Localization, and Logging framework for applications (or scripts) "
"written in Perl.\n"
"\n"
"For details, read the POD in the App::CELL distro. For an introduction, read "
"App::CELL::Guide."
msgstr ""

#. leap/perl-App-CLI/summary
#, fuzzy
msgid "Dispatcher module for command line interface programs"
msgstr "automatisation de programmes interactifs"

#. leap/perl-App-CLI/description
msgid ""
"'App::CLI' dispatches CLI (command line interface) based commands into "
"command classes. It also supports subcommand and per-command options."
msgstr ""

#. leap/perl-App-Cmd/summary
msgid "Write command line apps with less suffering"
msgstr ""

#. leap/perl-App-Cmd/description
msgid ""
"App::Cmd is intended to make it easy to write complex command-line "
"applications without having to think about most of the annoying things "
"usually involved.\n"
"\n"
"For information on how to start using App::Cmd, see App::Cmd::Tutorial."
msgstr ""

#. leap/perl-App-Dochazka-CLI/summary
#, fuzzy
msgid "Dochazka command line client"
msgstr "Utilitaire pour caméra digitale"

#. leap/perl-App-Dochazka-CLI/description
msgid ""
"App::Dochazka::CLI is the Command Line Interface (CLI) component of the "
"Dochazka Attendance & Time Tracking system.\n"
"\n"
"In order to work, the CLI must be pointed at a running App::Dochazka::REST "
"(i.e., Dochazka REST server) instance by setting the 'MREST_CLI_URI_BASE' "
"meta configuration parameter.\n"
"\n"
"Detailed documentation covering configuration, deployment, and the commands "
"that can be used with the CLI can be found in App::Dochazka::CLI::Guide.\n"
"\n"
"This module is used to store some \"global\" package variables that are used "
"throughout the CLI code base."
msgstr ""

#. leap/perl-App-Dochazka-Common/summary
msgid "Dochazka Attendance and Time Tracking System shared modules"
msgstr ""

#. leap/perl-App-Dochazka-Common/description
msgid ""
"This distro contains modules that are used by both the server the App::"
"Dochazka::REST manpage and the command-line client the App::Dochazka::CLI "
"manpage."
msgstr ""

#. leap/perl-App-Dochazka-REST/summary
msgid "Dochazka REST server"
msgstr ""

#. leap/perl-App-Dochazka-REST/description
msgid ""
"This distribution, the App::Dochazka::REST manpage, including all the "
"modules in 'lib/', the scripts in 'bin/', and the configuration files in "
"'config/', constitutes the REST server (API) component of Dochazka, the open-"
"source Attendance/Time Tracking (ATT) system.\n"
"\n"
"Dochazka as a whole aims to be a convenient, open-source ATT solution."
msgstr ""

#. leap/perl-App-Dochazka-WWW/summary
msgid "Dochazka Attendance & Time Tracking system web client"
msgstr ""

#. leap/perl-App-Dochazka-WWW/description
msgid ""
"This is the web client of the Dochazka Attendance & Time Tracking system. "
"For more information see the App::Dochazka::REST manpage and the App::MFILE::"
"WWW manpage."
msgstr ""

#. leap/perl-App-FatPacker/summary
msgid "Pack Your Dependencies Onto Your Script File"
msgstr ""

#. leap/perl-App-FatPacker/description
msgid "pack your dependencies onto your script file"
msgstr ""

#. leap/perl-App-MFILE/summary
#, fuzzy
msgid "MFILE shared modules"
msgstr "Aucun nouveau module n'a été trouvé."

#. leap/perl-App-MFILE/description
msgid ""
"This distro consists of general, reusable modules. Currently, there is only "
"one module, App::MFILE::HTTP, which is used by App::MFILE::WWW, App::"
"Dochazka::WWW, and App::Dochazka::CLI."
msgstr ""

#. leap/perl-App-MFILE-WWW/summary
msgid "Web UI development toolkit with prototype demo app"
msgstr ""

#. leap/perl-App-MFILE-WWW/description
msgid ""
"This distro contains a foundation/framework/toolkit for developing the "
"\"front end\" portion of web applications.\n"
"\n"
"App::MFILE::WWW is a Plack application that provides a HTTP request-response "
"handler (based on Web::Machine), CSS and HTML source code for an in-browser "
"\"screen\", and JavaScript code for displaying various \"widgets\" (menus, "
"forms, etc.) in that screen and for processing user input from within those "
"widgets.\n"
"\n"
"In addition, infrastructure is included (but need not be used) for user "
"authentication, session management, and communication with a backend server "
"via AJAX calls.\n"
"\n"
"Front ends built with App::MFILE::WWW will typicaly be menu-driven, "
"consisting exclusively of fixed-width Unicode text, and capable of being "
"controlled from the keyboard, without the use of a mouse. The overall look-"
"and-feel is reminiscent of the text terminal era.\n"
"\n"
"The distro comes with a prototype (demo) application to illustrate how the "
"various widgets are used."
msgstr ""

#. leap/perl-App-Nopaste/summary
msgid "Easy access to any pastebin"
msgstr ""

#. leap/perl-App-Nopaste/description
msgid ""
"Pastebins (also known as nopaste sites) let you post text, usually code, for "
"public viewing. They're used a lot in IRC channels to show code that would "
"normally be too long to give directly in the channel (hence the name "
"nopaste).\n"
"\n"
"Each pastebin is slightly different. When one pastebin goes down (I'm "
"looking at you, http://paste.husk.org), then you have to find a new one. And "
"if you usually use a script to publish text, then it's too much hassle.\n"
"\n"
"This module aims to smooth out the differences between pastebins, and "
"provides redundancy: if one site doesn't work, it just tries a different "
"one.\n"
"\n"
"It's also modular: you only need to put on CPAN a App::Nopaste::Service::Foo "
"module and anyone can begin using it."
msgstr ""

#. leap/perl-App-Rad/summary
msgid "Framework to facilitate creation of command line applications"
msgstr ""

#. leap/perl-App-Rad/description
msgid ""
"App::Rad is a framework for developing command-line applications. It can "
"transform Perl _one-liners_ into subroutines than can be called by the user "
"of your program.\n"
"\n"
"It also provides an interface for common command-line tasks."
msgstr ""

#. leap/perl-App-Rad-Plugin-MoreHelp/summary
msgid "App::Rad plugin for providing extra help info"
msgstr ""

#. leap/perl-App-Rad-Plugin-MoreHelp/description
msgid ""
"This is an App::Rad manpage plugin for providing extra help info. It "
"provides a 'more_help' method which can be used to provide extra info that "
"will be appended to to bottom of the help message."
msgstr ""

#. leap/perl-App-cpanminus/summary
#, fuzzy
msgid "Get, unpack, build and install modules from CPAN"
msgstr "Modules Palm pilote perl"

#. leap/perl-App-cpanminus/description
msgid ""
"cpanminus is a script to get, unpack, build and install modules from CPAN "
"and does nothing else.\n"
"\n"
"It's dependency free (can bootstrap itself), requires zero configuration, "
"and stands alone. When running, it requires only 10MB of RAM."
msgstr ""

#. leap/perl-App-perlbrew/summary
#. leap/perl-App-perlbrew/description
msgid "Manage perl installations in your C<$HOME>"
msgstr ""

#. leap/perl-AppConfig/summary
#, fuzzy
msgid ""
"Perl5 module for reading configuration files and parsing command line ar[cut]"
msgstr "Un module pour lire les fichiers de configuration .ini"

#. leap/perl-AppConfig/description
#, fuzzy
msgid ""
"Perl5 module for reading configuration files and parsing command line "
"arguments."
msgstr "Un module pour lire les fichiers de configuration .ini"

#. leap/perl-Archive-Cpio/summary
msgid "Module for Manipulations of Cpio Archives"
msgstr ""

#. leap/perl-Archive-Cpio/description
msgid "Archive::Cpio provides a few functions to read and write cpio files."
msgstr ""

#. leap/perl-Archive-Extract/summary
msgid "Generic Archive Extracting Mechanism"
msgstr ""

#. leap/perl-Archive-Extract/description
msgid ""
"Archive::Extract is a generic archive extraction mechanism.\n"
"\n"
"It allows you to extract any archive file of the type .tar, .tar.gz, .gz, ."
"Z, tar.bz2, .tbz, .bz2, .zip, .xz,, .txz, .tar.xz or .lzma without having to "
"worry how it does so, or use different interfaces for each type by using "
"either perl modules, or commandline tools on your system.\n"
"\n"
"See the 'HOW IT WORKS' section further down for details."
msgstr ""

#. leap/perl-Archive-Peek/summary
msgid "Peek into archives without extracting them"
msgstr ""

#. leap/perl-Archive-Peek/description
msgid ""
"This module lets you peek into archives without extracting them. It "
"currently supports tar files and zip files. To support Bzip2- compressed "
"files, you should install IO::Uncompress::Bunzip2."
msgstr ""

#. leap/perl-Archive-Tar-Wrapper/summary
msgid "API wrapper around the 'tar' utility"
msgstr ""

#. leap/perl-Archive-Tar-Wrapper/description
msgid ""
"*Archive::Tar::Wrapper* is an API wrapper around the 'tar' command line "
"program. It never stores anything in memory, but works on temporary "
"directory structures on disk instead. It provides a mapping between the "
"logical paths in the tarball and the 'real' files in the temporary directory "
"on disk.\n"
"\n"
"It differs from Archive::Tar in two ways:\n"
"\n"
"  * *Archive::Tar::Wrapper* almost doesn't hold anything in memory (see "
"'write' method), instead using disk as storage.\n"
"\n"
"  * *Archive::Tar::Wrapper* is 100% compliant with the platform's 'tar' "
"utility because it uses it internally."
msgstr ""

#. leap/perl-Archive-Zip/summary
#, fuzzy
msgid "Provide an interface to ZIP archive files"
msgstr "Procure une pseudo interface tty"

#. leap/perl-Archive-Zip/description
msgid ""
"The Archive::Zip module allows a Perl program to create, manipulate, read, "
"and write Zip archive files.\n"
"\n"
"Zip archives can be created, or you can read from existing zip files.\n"
"\n"
"Once created, they can be written to files, streams, or strings. Members can "
"be added, removed, extracted, replaced, rearranged, and enumerated. They can "
"also be renamed or have their dates, comments, or other attributes queried "
"or modified. Their data can be compressed or uncompressed as needed.\n"
"\n"
"Members can be created from members in existing Zip files, or from existing "
"directories, files, or strings.\n"
"\n"
"This module uses the Compress::Raw::Zlib library to read and write the "
"compressed streams inside the files.\n"
"\n"
"One can use Archive::Zip::MemberRead to read the zip file archive members as "
"if they were files."
msgstr ""

#. leap/perl-Array-Unique/summary
msgid "Tie-able array that allows only unique values"
msgstr ""

#. leap/perl-Array-Unique/description
msgid ""
"This package lets you create an array which will allow only one occurrence "
"of any value.\n"
"\n"
"In other words no matter how many times you put in 42 it will keep only the "
"first occurrence and the rest will be dropped.\n"
"\n"
"You use the module via tie and once you tied your array to this module it "
"will behave correctly.\n"
"\n"
"Uniqueness is checked with the 'eq' operator so among other things it is "
"case sensitive.\n"
"\n"
"As a side effect the module does not allow undef as a value in the array."
msgstr ""

#. leap/perl-Audio-RPLD/summary
msgid "Module to control the RoarAudio PlayList Daemon (rpld)"
msgstr ""

#. leap/perl-Audio-RPLD/description
msgid ""
"Audio::RPLD is a Perl module to access the RoarAudio PlayList Daemon from "
"within any Perl application. It supports most commands supported by the "
"rpld. This included commands to control playback, the Main Queue, playlists "
"and pointer mangement."
msgstr ""

#. leap/perl-Authen-DecHpwd/summary
#, fuzzy
msgid "DEC VMS password hashing"
msgstr "Changeur de mot de passe KDE"

#. leap/perl-Authen-DecHpwd/description
msgid ""
"This module implements the 'SYS$HASH_PASSWORD' password hashing function "
"from VMS (also known as 'LGI$HPWD'), and some associated VMS username and "
"password handling functions.\n"
"\n"
"The password hashing function is implemented in XS, with a hideously slow "
"pure Perl backup version for systems that can't handle XS."
msgstr ""

#. leap/perl-Authen-Passphrase/summary
msgid "Hashed Passwords/Passphrases As Objects"
msgstr ""

#. leap/perl-Authen-Passphrase/description
msgid ""
"This is the base class for a system of objects that encapsulate passphrases. "
"An object of this type is a passphrase recogniser: its job is to recognise "
"whether an offered passphrase is the right one. For security, such "
"passphrase recognisers usually do not themselves know the passphrase they "
"are looking for; they can merely recognise it when they see it. There are "
"many schemes in use to achieve this effect, and the intent of this class is "
"to provide a consistent interface to them all, hiding the details.\n"
"\n"
"The CPAN package Authen-Passphrase contains implementations of several "
"specific passphrase schemes in addition to the base class. See the specific "
"classes for notes on the security properties of each scheme. In new systems, "
"if there is a choice of which passphrase algorithm to use, it is recommended "
"to use the Authen::Passphrase::SaltedDigest manpage or the Authen::"
"Passphrase::BlowfishCrypt manpage. Most other schemes are too weak for new "
"applications, and should be used only for backward compatibility."
msgstr ""

#. leap/perl-Authen-SASL/summary
msgid "SASL Authentication framework"
msgstr ""

#. leap/perl-Authen-SASL/description
msgid ""
"SASL is a generic mechanism for authentication used by several network "
"protocols. *Authen::SASL* provides an implementation framework that all "
"protocols should be able to share.\n"
"\n"
"The framework allows different implementations of the connection class to be "
"plugged in. At the time of writing there were two such plugins. \n"
"* Authen::SASL::Perl\n"
"\n"
"This module implements several mechanisms and is implemented entirely in "
"Perl. \n"
"* Authen::SASL::XS\n"
"\n"
"This module uses the Cyrus SASL C-library (both version 1 and 2 are "
"supported). \n"
"* Authen::SASL::Cyrus\n"
"\n"
"This module is the predecessor to Authen::SASL::XS. It is reccomended to use "
"Authen::SASL::XS\n"
"\n"
"By default the order in which these plugins are selected is Authen::SASL::"
"XS, Authen::SASL::Cyrus and then Authen::SASL::Perl.\n"
"\n"
"If you want to change it or want to specifically use one implementation only "
"simply do\n"
"\n"
" use Authen::SASL qw(Perl);\n"
"\n"
"or if you have another plugin module that supports the Authen::SASL API\n"
"\n"
" use Authen::SASL qw(My::SASL::Plugin);"
msgstr ""

#. leap/perl-Authen-SASL-Cyrus/summary
#, fuzzy
msgid "SASL Authentication Framework - Cyrus Plugin"
msgstr "Cyrus SASL"

#. leap/perl-Authen-SASL-Cyrus/description
msgid ""
"SASL is a generic mechanism for authentication used by several network "
"protocols.\n"
"\n"
"Authen::SASL::Cyrus is a plug-in for the Authen::SASL module and provides an "
"implementation framework that all protocols should be able to share.\n"
"\n"
"The XS framework makes calls to the existing libsasl.so shared library to "
"perform SASL client connection functionality, including loading existing "
"shared library mechanisms."
msgstr ""

#. leap/perl-B-COW/summary
msgid "B::COW additional B helpers to check COW status"
msgstr ""

#. leap/perl-B-COW/description
msgid ""
"B::COW provides some naive additional B helpers to check the COW status of "
"one SvPV."
msgstr ""

#. leap/perl-B-Debug/summary
msgid "Walk Perl syntax tree, printing debug info about ops"
msgstr ""

#. leap/perl-B-Debug/description
msgid "See _ext/B/README_ and the newer B::Concise."
msgstr ""

#. leap/perl-B-Hooks-EndOfScope/summary
msgid "Execute code after a scope finished compilation"
msgstr ""

#. leap/perl-B-Hooks-EndOfScope/description
msgid ""
"This module allows you to execute code when perl finished compiling the "
"surrounding scope."
msgstr ""

#. leap/perl-B-Hooks-OP-Annotation/summary
msgid "annotate and delegate hooked OPs"
msgstr ""

#. leap/perl-B-Hooks-OP-Annotation/description
msgid ""
"This module provides a way for XS code that hijacks OP 'op_ppaddr' functions "
"to delegate to (or restore) the previous functions, whether assigned by perl "
"or by another module. Typically this should be used in conjunction with B::"
"Hooks::OP::Check.\n"
"\n"
"'B::Hooks::OP::Annotation' makes its types and functions available to XS "
"code by means of ExtUtils::Depends. Modules that wish to use these exports "
"in their XS code should 'use B::OP::Hooks::Annotation' in the Perl module "
"that loads the XS, and include something like the following in their "
"Makefile.PL:\n"
"\n"
"    use ExtUtils::MakeMaker;     use ExtUtils::Depends;\n"
"\n"
"    our %XS_PREREQUISITES = (         'B::Hooks::OP::Annotation' => "
"'0.44',         'B::Hooks::OP::Check'      => '0.15',     );\n"
"\n"
"    our %XS_DEPENDENCIES = ExtUtils::Depends->new(         'Your::XS::"
"Module',          keys(%XS_PREREQUISITES)     )->get_makefile_vars();\n"
"\n"
"    WriteMakefile(         NAME          => 'Your::XS::Module',         "
"VERSION_FROM  => 'lib/Your/XS/Module.pm',         PREREQ_PM => "
"{             'B::Hooks::EndOfScope' => '0.07',             "
"%XS_PREREQUISITES         },         ($ExtUtils::MakeMaker::VERSION >= "
"6.46 ?             (META_MERGE => {                 configure_requires => "
"{                     'ExtUtils::Depends' => '0.301',                     "
"%XS_PREREQUISITES                 }})             : ()         ),         "
"%XS_DEPENDENCIES,              );"
msgstr ""

#. leap/perl-B-Hooks-OP-Check/summary
msgid "Wrap OP check callbacks"
msgstr ""

#. leap/perl-B-Hooks-OP-Check/description
msgid ""
"This module provides a C API for XS modules to hook into the callbacks of "
"'PL_check'.\n"
"\n"
"ExtUtils::Depends is used to export all functions for other XS modules to "
"use. Include the following in your Makefile.PL:\n"
"\n"
"    my $pkg = ExtUtils::Depends->new('Your::XSModule', 'B::Hooks::OP::"
"Check');     WriteMakefile(         ... # your normal makefile flags         "
"$pkg->get_makefile_vars,     );\n"
"\n"
"Your XS module can now include 'hook_op_check.h'."
msgstr ""

#. leap/perl-B-Hooks-OP-PPAddr/summary
msgid "Hook into opcode execution"
msgstr ""

#. leap/perl-B-Hooks-OP-PPAddr/description
msgid ""
"This module provides a C API for XS modules to hook into the execution of "
"perl opcodes.\n"
"\n"
"ExtUtils::Depends is used to export all functions for other XS modules to "
"use. Include the following in your _Makefile.PL_:\n"
"\n"
"    my $pkg = ExtUtils::Depends->new('Your::XSModule', 'B::Hooks::OP::"
"PPAddr');     WriteMakefile(         ... # your normal makefile "
"flags         $pkg->get_makefile_vars,     );\n"
"\n"
"Your XS module can now include 'hook_op_ppaddr.h'."
msgstr ""

#. leap/perl-B-Keywords/summary
msgid "Lists of reserved barewords and symbol names"
msgstr ""

#. leap/perl-B-Keywords/description
msgid ""
"'B::Keywords' supplies several arrays of exportable keywords: '@Scalars', "
"'@Arrays', '@Hashes', '@Filehandles', '@Symbols', '@Functions', "
"'@Barewords', '@BarewordsExtra', '@TieIOMethods', '@UNIVERSALMethods' and "
"'@ExporterSymbols'.\n"
"\n"
"The '@Symbols' array includes the contents of each of '@Scalars', '@Arrays', "
"'@Hashes', '@Functions' and '@Filehandles'.\n"
"\n"
"Similarly, '@Barewords' adds a few non-function keywords and operators to "
"the '@Functions' array.\n"
"\n"
"'@BarewordsExtra' adds a few barewords which are not in keywords.h.\n"
"\n"
"All additions and modifications are welcome.\n"
"\n"
"The perl parser uses a static list of keywords from _regen/keywords.pl_ "
"which constitutes the strict list of keywords @Functions and @Barewords, "
"though some @Functions are not functions in the strict sense. Several "
"library functions use more special symbols, handles and methods."
msgstr ""

#. leap/perl-B-Utils/summary
#. leap/perl-B-Utils/description
msgid "Helper functions for op tree manipulation"
msgstr ""

#. leap/perl-BIND-Conf_Parser/summary
msgid "Parser class for BIND configuration files"
msgstr ""

#. leap/perl-BIND-Conf_Parser/description
msgid ""
"This module implements a virtual base class for parsing BIND server version "
"8 configuration files (named.conf)."
msgstr ""

#. leap/perl-BSD-Resource/summary
#. leap/perl-BSD-Resource/description
msgid "BSD process resource limit and priority functions"
msgstr ""

#. leap/perl-Benchmark-Timer/summary
msgid "Benchmarking with statistical confidence"
msgstr ""

#. leap/perl-Benchmark-Timer/description
msgid ""
"The Benchmark::Timer class allows you to time portions of code conveniently, "
"as well as benchmark code by allowing timings of repeated trials. It is "
"perfect for when you need more precise information about the running time of "
"portions of your code than the Benchmark module will give you, but don't "
"want to go all out and profile your code.\n"
"\n"
"The methodology is simple; create a Benchmark::Timer object, and wrap "
"portions of code that you want to benchmark with 'start()' and 'stop()' "
"method calls. You can supply a tag to those methods if you plan to time "
"multiple portions of code. If you provide error and confidence values, you "
"can also use 'need_more_samples()' to determine, statistically, whether you "
"need to collect more data.\n"
"\n"
"After you have run your code, you can obtain information about the running "
"time by calling the 'results()' method, or get a descriptive benchmark "
"report by calling 'report()'. If you run your code over multiple trials, the "
"average time is reported. This is wonderful for benchmarking time-critical "
"portions of code in a rigorous way. You can also optionally choose to skip "
"any number of initial trials to cut down on initial case irregularities."
msgstr ""

#. leap/perl-BerkeleyDB/summary
#, fuzzy
msgid "Perl extension for Berkeley DB version 2, 3, 4 or 5"
msgstr "Interface Perl pour objets URI"

#. leap/perl-BerkeleyDB/description
msgid ""
"*NOTE: This document is still under construction. Expect it to be incomplete "
"in places.*\n"
"\n"
"This Perl module provides an interface to most of the functionality "
"available in Berkeley DB versions 2, 3, 5 and 6. In general it is safe to "
"assume that the interface provided here to be identical to the Berkeley DB "
"interface. The main changes have been to make the Berkeley DB API work in a "
"Perl way. Note that if you are using Berkeley DB 2.x, the new features "
"available in Berkeley DB 3.x or later are not available via this module.\n"
"\n"
"The reader is expected to be familiar with the Berkeley DB documentation. "
"Where the interface provided here is identical to the Berkeley DB library "
"and the... TODO\n"
"\n"
"The *db_appinit*, *db_cursor*, *db_open* and *db_txn* man pages are "
"particularly relevant.\n"
"\n"
"The interface to Berkeley DB is implemented with a number of Perl classes."
msgstr ""

#. leap/perl-Bit-Vector/summary
#. leap/perl-Bit-Vector/description
#, fuzzy
msgid "Bit::Vector Perl module"
msgstr "Net::SSLeay Perl Module"

#. leap/perl-Boost-Geometry-Utils/summary
#. leap/perl-Boost-Geometry-Utils/description
#, fuzzy
msgid "Bindings for the Boost Geometry library"
msgstr "Environnement de bureau KDE pour serveur"

#. leap/perl-Bootloader/summary
msgid "Library for Configuring Boot Loaders"
msgstr ""

#. leap/perl-Bootloader/description
msgid ""
"Perl modules for configuring various boot loaders.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Jiri Srain <jsrain@suse.cz>     Joachim Plack <jplack@suse."
"de>     Alexander Osthof <aosthof@suse.de>     Josef Reidinger "
"<jreidinger@suse.cz>"
msgstr ""

#. leap/perl-Bootloader/perl-Bootloader-YAML/summary
msgid "YAML interface for perl-Bootloader"
msgstr ""

#. leap/perl-Bootloader/perl-Bootloader-YAML/description
msgid ""
"A command line interface to perl-Bootloader using YAML files for input and "
"output."
msgstr ""

#. leap/perl-Browser-Open/summary
msgid "Open a browser in a given URL"
msgstr ""

#. leap/perl-Browser-Open/description
msgid ""
"The functions optionaly exported by this module allows you to open URLs in "
"the user browser.\n"
"\n"
"A set of known commands per OS-name is tested for presence, and the first "
"one found is executed. With an optional parameter, all known commands are "
"checked.\n"
"\n"
"The the \"open_browser\" manpage uses the 'system()' function to execute the "
"command. If you want more control, you can get the command with the the "
"\"open_browser_cmd\" manpage or the \"open_browser_cmd_all\" manpage "
"functions and then use whatever method you want to execute it."
msgstr ""

#. leap/perl-Business-ISBN/summary
msgid "Work with International Standard Book Numbers"
msgstr ""

#. leap/perl-Business-ISBN/description
msgid ""
"This modules handles International Standard Book Numbers, including ISBN-10 "
"and ISBN-13."
msgstr ""

#. leap/perl-Business-ISBN-Data/summary
msgid "Data Pack for Business::Isbn"
msgstr ""

#. leap/perl-Business-ISBN-Data/description
msgid ""
"You don't need to load this module yourself in most cases. 'Business::ISBN' "
"will load it when it loads.\n"
"\n"
"These data are generated from the _RangeMessage.xml_ file provided by the "
"ISBN Agency. You can retrieve this yourself at https://www.isbn-"
"international.org/range_file_generation. This file is included as part of "
"the distribution and should be installed at _~lib/Business/ISBN/Data/"
"RangeMessage.xml_.\n"
"\n"
"If you want to use a different _RangeMessage.xml_ file, you can set the "
"'ISBN_RANGE_MESSAGE' environment variable to the alternate location before "
"you load 'Business::ISBN'. This way, you can use the latest (or even "
"earlier) data without having to install something new or wait for an update "
"to this module.\n"
"\n"
"If the default _RangeMessage.xml_ or your alternate one is not available, "
"the module falls back to data included in _Data.pm_. However, that data is "
"likely to be older data. If it does not find that file, it looks for "
"_RangeMessage.xml_ in the current directory.\n"
"\n"
"The data are in '%Business::ISBN::country_data' (although the \"country\" "
"part is historical). If you want to see where the data are from, check "
"'$Business::ISBN::country_data{_source}'."
msgstr ""

#. leap/perl-Business-ISMN/summary
#, fuzzy
msgid "Work with International Standard Music Numbers"
msgstr "Interface Perl pour objets URI"

#. leap/perl-Business-ISMN/description
msgid "work with International Standard Music Numbers"
msgstr ""

#. leap/perl-Business-ISSN/summary
#, fuzzy
msgid "Perl extension for International Standard Serial Numbers"
msgstr "Interface Perl pour objets URI"

#. leap/perl-Business-ISSN/description
msgid ""
"* new($issn)\n"
"\n"
"  The constructor accepts a scalar representing the ISSN.\n"
"\n"
"  The string representing the ISSN may contain characters other than   "
"[0-9xX], although these will be removed in the internal representation.   "
"The resulting string must look like an ISSN - the first seven characters   "
"must be digits and the eighth character must be a digit, 'x', or 'X'.\n"
"\n"
"  The string passed as the ISSN need not be a valid ISSN as long as it   "
"superficially looks like one. This allows one to use the 'fix_checksum'   "
"method.\n"
"\n"
"  One should check the validity of the ISSN with 'is_valid()' rather than   "
"relying on the return value of the constructor.\n"
"\n"
"  If all one wants to do is check the validity of an ISSN, one can skip "
"the   object-oriented interface and use the c<is_valid_checksum()> "
"function   which is exportable on demand."
msgstr ""

#. leap/perl-CDDB_get/summary
msgid "Read the CDDB entry for an audio CD in your drive"
msgstr ""

#. leap/perl-CDDB_get/description
msgid ""
"This module/script gets the CDDB info for an audio cd. You need LINUX, SUNOS "
"or *BSD, a cdrom drive and an active internet connection in order to do that."
msgstr ""

#. leap/perl-CGI/summary
msgid "Handle Common Gateway Interface requests and responses"
msgstr ""

#. leap/perl-CGI/description
msgid ""
"CGI.pm is a stable, complete and mature solution for processing and "
"preparing HTTP requests and responses. Major features including processing "
"form submissions, file uploads, reading and writing cookies, query string "
"generation and manipulation, and processing and preparing HTTP headers.\n"
"\n"
"CGI.pm performs very well in a vanilla CGI.pm environment and also comes "
"with built-in support for mod_perl and mod_perl2 as well as FastCGI.\n"
"\n"
"It has the benefit of having developed and refined over 20 years with input "
"from dozens of contributors and being deployed on thousands of websites. CGI."
"pm was included in the perl distribution from perl v5.4 to v5.20, however is "
"has now been removed from the perl core..."
msgstr ""

#. leap/perl-CGI-Ajax/summary
msgid "A perl-specific System for writing Asynchronous web Apps"
msgstr ""

#. leap/perl-CGI-Ajax/description
msgid ""
"CGI::Ajax is an object-oriented module that provides a unique mechanism for "
"using perl code asynchronously from javascript- enhanced HTML pages. CGI::"
"Ajax unburdens the user from having to write extensive javascript, except "
"for associating an exported method with a document-defined event (such as "
"onClick, onKeyUp, etc). CGI::Ajax also mixes well with HTML containing more "
"complex javascript.\n"
"\n"
"CGI::Ajax supports methods that return single results or multiple results to "
"the web page, and supports returning values to multiple DIV elements on the "
"HTML page.\n"
"\n"
"Using CGI::Ajax, the URL for the HTTP GET/POST request is automatically "
"generated based on HTML layout and events, and the page is then dynamically "
"updated with the output from the perl function. Additionally, CGI::Ajax "
"supports mapping URL's to a CGI::Ajax function name, so you can separate "
"your code processing over multiple scripts.\n"
"\n"
"Other than using the Class::Accessor module to generate CGI::Ajax' accessor "
"methods, CGI::Ajax is completely self-contained - it does not require you to "
"install a larger package or a full Content Management System, etc.\n"
"\n"
"We have added _support_ for other CGI handler/decoder modules, like the CGI::"
"Simple manpage or the CGI::Minimal manpage, but we can't test these since we "
"run mod_perl2 only here. CGI::Ajax checks to see if a header() method is "
"available to the CGI object, and then uses it. If method() isn't available, "
"it creates it's own minimal header.\n"
"\n"
"A primary goal of CGI::Ajax is to keep the module streamlined and maximally "
"flexible. We are trying to keep the generated javascript code to a minimum, "
"but still provide users with a variety of methods for deploying CGI::Ajax. "
"And VERY little user javascript."
msgstr ""

#. leap/perl-CGI-Application/summary
msgid "Framework for building reusable web-applications"
msgstr ""

#. leap/perl-CGI-Application/description
msgid ""
"It is intended that your Application Module will be implemented as a sub-"
"class of CGI::Application. This is done simply as follows:\n"
"\n"
"    package My::App;     use base 'CGI::Application'; \n"
"*Notation and Conventions*\n"
"\n"
"For the purpose of this document, we will refer to the following "
"conventions:\n"
"\n"
"  WebApp.pm   The Perl module which implements your Application Module "
"class.   WebApp      Your Application Module class; a sub-class of CGI::"
"Application.   webapp.cgi  The Instance Script which implements your "
"Application Module.   $webapp     An instance (object) of your Application "
"Module class.   $c          Same as $webapp, used in instance methods to "
"pass around the               current object. (Sometimes referred as \"$self"
"\" in other code)"
msgstr ""

#. leap/perl-CGI-FastTemplate/summary
msgid ""
"Perl extension for managing templates, and performing variable interpolation"
msgstr ""

#. leap/perl-CGI-FastTemplate/description
msgid ""
"CGI::FastTemplate manages templates and parses templates replacing variable "
"names with values. It was designed for mid to large scale web applications "
"(CGI, mod_perl) where there are great benefits to separating the logic of an "
"application from the specific implementation details."
msgstr ""

#. leap/perl-CGI-FormBuilder/summary
msgid "Easily generate and process stateful forms"
msgstr ""

#. leap/perl-CGI-FormBuilder/description
msgid ""
"The goal of CGI::FormBuilder (FormBuilder) is to provide an easy way for you "
"to generate and process entire CGI form-based applications. Its main "
"features are:\n"
"\n"
"Field Abstraction   Viewing fields as entities (instead of just params), "
"where the   HTML representation, CGI values, validation, and so on are   "
"properties of each field.\n"
"\n"
"DWIMmery   Lots of built-in \"intelligence\" (such as automatic field "
"typing),   giving you about a 4:1 ratio of the code it generates versus "
"what   you have to write.\n"
"\n"
"Built-in Validation   Full-blown regex validation for fields, even "
"including   JavaScript code generation.\n"
"\n"
"Template Support  Pluggable support for external template engines,   such as "
"HTML::Template, Text::Template, Template Toolkit,   and CGI::FastTemplate.\n"
"\n"
"Plus, the native HTML generated is valid XHTML 1.0 Transitional."
msgstr ""

#. leap/perl-CGI-Session/summary
#, fuzzy
msgid "Persistent Session Data in Cgi Applications"
msgstr "Lancer une Application"

#. leap/perl-CGI-Session/description
msgid ""
"CGI::Session provides an easy, reliable and modular session management "
"system across HTTP requests."
msgstr ""

#. leap/perl-CGI-Simple/summary
msgid "Object-oriented CGI interface compliant to CGI.pm"
msgstr ""

#. leap/perl-CGI-Simple/description
msgid ""
"CGI::Simple provides a relatively lightweight drop in replacement for CGI."
"pm. It shares an identical OO interface to CGI.pm for parameter parsing, "
"file upload, cookie handling and header generation. This module is entirely "
"object oriented, however a complete functional interface is available by "
"using the CGI::Simple::Standard module.\n"
"\n"
"Essentially everything in CGI.pm that relates to the CGI (not HTML) side of "
"things is available. There are even a few new methods and additions to old "
"ones! If you are interested in what has gone on under the hood see the "
"Compatibility with CGI.pm section at the end.\n"
"\n"
"In practical testing this module loads and runs about twice as fast as CGI."
"pm depending on the precise task."
msgstr ""

#. leap/perl-CHI/summary
msgid "Unified cache handling interface"
msgstr ""

#. leap/perl-CHI/description
msgid ""
"CHI provides a unified caching API, designed to assist a developer in "
"persisting data for a specified period of time.\n"
"\n"
"The CHI interface is implemented by driver classes that support fetching, "
"storing and clearing of data. Driver classes exist or will exist for the "
"gamut of storage backends available to Perl, such as memory, plain files, "
"memory mapped files, memcached, and DBI.\n"
"\n"
"CHI is intended as an evolution of DeWitt Clinton's Cache::Cache package, "
"adhering to the basic Cache API but adding new features and addressing "
"limitations in the Cache::Cache implementation."
msgstr ""

#. leap/perl-CLASS/summary
msgid "Alias for __PACKAGE__"
msgstr ""

#. leap/perl-CLASS/description
msgid ""
"CLASS and $CLASS are both synonyms for __PACKAGE__. Easier to type.\n"
"\n"
"$CLASS has the additional benefit of working in strings."
msgstr ""

#. leap/perl-CPAN-Changes/summary
msgid "Read and write Changes files"
msgstr ""

#. leap/perl-CPAN-Changes/description
msgid ""
"It is standard practice to include a Changes file in your distribution. The "
"purpose the Changes file is to help a user figure out what has changed since "
"the last release.\n"
"\n"
"People have devised many ways to write the Changes file. A preliminary "
"specification has been created (the CPAN::Changes::Spec manpage) to "
"encourage module authors to write clear and concise Changes.\n"
"\n"
"This module will help users programmatically read and write Changes files "
"that conform to the specification."
msgstr ""

#. leap/perl-CPAN-DistnameInfo/summary
msgid "Extract distribution name and version from a distribution filename"
msgstr ""

#. leap/perl-CPAN-DistnameInfo/description
msgid ""
"Many online services that are centered around CPAN attempt to associate "
"multiple uploads by extracting a distribution name from the filename of the "
"upload. For most distributions this is easy as they have used ExtUtils::"
"MakeMaker or Module::Build to create the distribution, which results in a "
"uniform name. But sadly not all uploads are created in this way.\n"
"\n"
"'CPAN::DistnameInfo' uses heuristics that have been learnt by the http://"
"search.cpan.org/ manpage to extract the distribution name and version from "
"filenames and also report if the version is to be treated as a developer "
"release\n"
"\n"
"The constructor takes a single pathname, returning an object with the "
"following methods \n"
"* cpanid\n"
"\n"
"  If the path given looked like a CPAN authors directory path, then this   "
"will be the the CPAN id of the author. \n"
"* dist\n"
"\n"
"  The name of the distribution \n"
"* distvname\n"
"\n"
"  The file name with any suffix and leading directory names removed \n"
"* filename\n"
"\n"
"  If the path given looked like a CPAN authors directory path, then this   "
"will be the path to the file relative to the detected CPAN author   "
"directory. Otherwise it is the path that was passed in. \n"
"* maturity\n"
"\n"
"  The maturity of the distribution. This will be either 'released' or   "
"'developer' \n"
"* extension\n"
"\n"
"  The extension of the distribution, often used to denote the archive type   "
"(e.g. 'tar.gz') \n"
"* pathname\n"
"\n"
"  The pathname that was passed to the constructor when creating the "
"object. \n"
"* properties\n"
"\n"
"  This will return a list of key-value pairs, suitable for assigning to a   "
"hash, for the known properties. \n"
"* version\n"
"\n"
"  The extracted version"
msgstr ""

#. leap/perl-CPAN-Meta-Check/summary
msgid "Verify requirements in a CPAN::Meta object"
msgstr ""

#. leap/perl-CPAN-Meta-Check/description
msgid ""
"This module verifies if requirements described in a CPAN::Meta object are "
"present."
msgstr ""

#. leap/perl-CPAN-Meta-Requirements/summary
msgid "Set of Version Requirements for a Cpan Dist"
msgstr ""

#. leap/perl-CPAN-Meta-Requirements/description
msgid ""
"A CPAN::Meta::Requirements object models a set of version constraints like "
"those specified in the _META.yml_ or _META.json_ files in CPAN "
"distributions, and as defined by CPAN::Meta::Spec; It can be built up by "
"adding more and more constraints, and it will reduce them to the simplest "
"representation.\n"
"\n"
"Logically impossible constraints will be identified immediately by thrown "
"exceptions."
msgstr ""

#. leap/perl-CPAN-Mini/summary
msgid "Create a Minimal Mirror of Cpan"
msgstr ""

#. leap/perl-CPAN-Mini/description
msgid ""
"CPAN::Mini provides a simple mechanism to build and update a minimal mirror "
"of the CPAN on your local disk. It contains only those files needed to "
"install the newest version of every distribution. Those files are: \n"
"* *\n"
"\n"
"  01mailrc.txt.gz \n"
"* *\n"
"\n"
"  02packages.details.txt.gz \n"
"* *\n"
"\n"
"  03modlist.data.gz \n"
"* *\n"
"\n"
"  the last non-developer release of every dist for every author"
msgstr ""

#. leap/perl-CPAN-Perl-Releases/summary
msgid "Mapping Perl releases on CPAN to the location of the tarballs"
msgstr ""

#. leap/perl-CPAN-Perl-Releases/description
msgid ""
"CPAN::Perl::Releases is a module that contains the mappings of all 'perl' "
"releases that have been uploaded to CPAN to the 'authors/id/' path that the "
"tarballs reside in.\n"
"\n"
"This is static data, but newer versions of this module will be made "
"available as new releases of 'perl' are uploaded to CPAN."
msgstr ""

#. leap/perl-CPAN-Uploader/summary
msgid "Upload things to the CPAN"
msgstr ""

#. leap/perl-CPAN-Uploader/description
msgid "upload things to the CPAN"
msgstr ""

#. leap/perl-CSS-Minifier-XS/summary
msgid "XS based CSS minifier"
msgstr ""

#. leap/perl-CSS-Minifier-XS/description
msgid ""
"'CSS::Minifier::XS' is a CSS \"minifier\"; its designed to remove un-"
"necessary whitespace and comments from CSS files, while also *not* breaking "
"the CSS.\n"
"\n"
"'CSS::Minifier::XS' is similar in function to 'CSS::Minifier', but is "
"substantially faster as its written in XS and not just pure Perl."
msgstr ""

#. leap/perl-CSS-Tiny/summary
msgid "Read/Write .css files with as little code as possible"
msgstr ""

#. leap/perl-CSS-Tiny/description
msgid ""
"'CSS::Tiny' is a perl class to read and write .css stylesheets with as "
"little code as possible, reducing load time and memory overhead. CSS.pm "
"requires about 2.6 meg or ram to load, which is a large amount of overhead "
"if you only want to do trivial things. Memory usage is normally scoffed at "
"in Perl, but in my opinion should be at least kept in mind.\n"
"\n"
"This module is primarily for reading and writing simple files, and anything "
"we write shouldn't need to have documentation/comments. If you need "
"something with more power, move up to CSS.pm. With the increasing complexity "
"of CSS, this is becoming more common, but many situations can still live "
"with simple CSS files."
msgstr ""

#. leap/perl-Cache-Cache/summary
#, fuzzy
msgid "The Cache Interface"
msgstr "Interface noyau"

#. leap/perl-Cache-Cache/description
msgid ""
"The Cache modules are designed to assist a developer in persisting data for "
"a specified period of time. Often these modules are used in web applications "
"to store data locally to save repeated and redundant expensive calls to "
"remote machines or databases. People have also been known to use Cache::"
"Cache for its straightforward interface in sharing data between runs of an "
"application or invocations of a CGI-style script or simply as an easy to use "
"abstraction of the filesystem or shared memory.\n"
"\n"
"The Cache::Cache interface is implemented by classes that support the get, "
"set, remove, size, purge, and clear instance methods and their corresponding "
"static methods for persisting data across method calls."
msgstr ""

#. leap/perl-Cache-LRU/summary
msgid "Simple, Fast Implementation of Lru Cache in Pure Perl"
msgstr ""

#. leap/perl-Cache-LRU/description
msgid ""
"Cache::LRU is a simple, fast implementation of an in-memory LRU cache in "
"pure perl."
msgstr ""

#. leap/perl-Cache-Memcached/summary
msgid "Client Library for Memcached (Memory Cache Daemon)"
msgstr ""

#. leap/perl-Cache-Memcached/description
msgid ""
"This is the Perl API for memcached, a distributed memory cache daemon. More "
"information is available at:\n"
"\n"
"  http://www.danga.com/memcached/"
msgstr ""

#. leap/perl-Cairo/summary
#. leap/perl-Cairo/description
#, fuzzy
msgid "Perl interface to the cairo 2d vector graphics library"
msgstr "Interface Perl vers la bibliothèque UULib"

#. leap/perl-Cairo-GObject/summary
#. leap/perl-Cairo-GObject/description
msgid "Integrate Cairo into the Glib type system"
msgstr ""

#. leap/perl-Calendar-Simple/summary
#, fuzzy
msgid "Perl extension to create simple calendars"
msgstr "Extension perl"

#. leap/perl-Calendar-Simple/description
msgid "A very simple module that exports one function called 'calendar'."
msgstr ""

#. leap/perl-Canary-Stability/summary
msgid "Canary to Check Perl Compatibility for Schmorp's Modules"
msgstr ""

#. leap/perl-Canary-Stability/description
msgid ""
"This module is used by Schmorp's modules during configuration stage to test "
"the installed perl for compatibility with his modules.\n"
"\n"
"It's not, at this stage, meant as a tool for other module authors, although "
"in principle nothing prevents them from subscribing to the same ideas.\n"
"\n"
"See the _Makefile.PL_ in Coro or AnyEvent for usage examples."
msgstr ""

#. leap/perl-Capture-Tiny/summary
msgid "Capture STDOUT and STDERR from Perl, XS or external programs"
msgstr ""

#. leap/perl-Capture-Tiny/description
msgid ""
"Capture::Tiny provides a simple, portable way to capture almost anything "
"sent to STDOUT or STDERR, regardless of whether it comes from Perl, from XS "
"code or from an external program. Optionally, output can be teed so that it "
"is captured while being passed through to the original filehandles. Yes, it "
"even works on Windows (usually). Stop guessing which of a dozen capturing "
"modules to use in any particular situation and just use this one."
msgstr ""

#. leap/perl-Carp-Always/summary
msgid "Warns and dies noisily with stack backtraces"
msgstr ""

#. leap/perl-Carp-Always/description
msgid ""
"This module is meant as a debugging aid. It can be used to make a script "
"complain loudly with stack backtraces when warn()ing or die()ing.\n"
"\n"
"Here are how stack backtraces produced by this module looks:\n"
"\n"
"     $ perl -MCarp::Always -e 'sub f { die \"arghh\" }; sub g { f }; g'   "
"arghh at -e line 1           main::f() called at -e line 1           main::"
"g() called at -e line 1\n"
"\n"
"     $ perl -MCarp::Always -w -e 'sub f { $a = shift; @a = @$a };' "
"\\                            -e 'sub g { f(undef) }; g'   Use of "
"uninitialized value in array dereference at -e line 1           main::"
"f('undef') called at -e line 2           main::g() called at -e line 2\n"
"\n"
"In the implementation, the Carp module does the heavy work, through "
"'longmess()'. The actual implementation sets the signal hooks $SIG{__WARN__} "
"and $SIG{__DIE__} to emit the stack backtraces.\n"
"\n"
"Also, all uses of 'carp' and 'croak' are made verbose, behaving like 'cluck' "
"and 'confess'."
msgstr ""

#. leap/perl-Carp-Assert/summary
msgid "executable comments"
msgstr ""

#. leap/perl-Carp-Assert/description
msgid ""
"    \"We are ready for any unforseen event that may or may not     occur."
"\"         - Dan Quayle\n"
"\n"
"Carp::Assert is intended for a purpose like the ANSI C library http://en."
"wikipedia.org/wiki/Assert.h. If you're already familiar with assert.h, then "
"you can probably skip this and go straight to the FUNCTIONS section.\n"
"\n"
"Assertions are the explicit expressions of your assumptions about the "
"reality your program is expected to deal with, and a declaration of those "
"which it is not. They are used to prevent your program from blissfully "
"processing garbage inputs (garbage in, garbage out becomes garbage in, error "
"out) and to tell you when you've produced garbage output. (If I was going to "
"be a cynic about Perl and the user nature, I'd say there are no user inputs "
"but garbage, and Perl produces nothing but...)\n"
"\n"
"An assertion is used to prevent the impossible from being asked of your "
"code, or at least tell you when it does. For example:\n"
"\n"
"         sub my_sqrt {         my($num) = shift;\n"
"\n"
"                 assert($num >= 0);\n"
"\n"
"        return sqrt $num;     }\n"
"\n"
"The assertion will warn you if a negative number was handed to your "
"subroutine, a reality the routine has no intention of dealing with.\n"
"\n"
"An assertion should also be used as something of a reality check, to make "
"sure what your code just did really did happen:\n"
"\n"
"    open(FILE, $filename) || die $!;     @stuff = <FILE>;     @stuff = "
"do_something(@stuff);\n"
"\n"
"         assert(@stuff > 0);\n"
"\n"
"The assertion makes sure you have some @stuff at the end. Maybe the file was "
"empty, maybe do_something() returned an empty list... either way, the "
"assert() will give you a clue as to where the problem lies, rather than 50 "
"lines down at when you wonder why your program isn't printing anything.\n"
"\n"
"Since assertions are designed for debugging and will remove themelves from "
"production code, your assertions should be carefully crafted so as to not "
"have any side-effects, change any variables, or otherwise have any effect on "
"your program. Here is an example of a bad assertation:\n"
"\n"
"    assert($error = 1 if $king ne 'Henry');  # Bad!\n"
"\n"
"It sets an error flag which may then be used somewhere else in your program. "
"When you shut off your assertions with the $DEBUG flag, $error will no "
"longer be set.\n"
"\n"
"Here's another example of *bad* use:\n"
"\n"
"    assert($next_pres ne 'Dan Quayle' or goto Canada);  # Bad!\n"
"\n"
"This assertion has the side effect of moving to Canada should it fail. This "
"is a very bad assertion since error handling should not be placed in an "
"assertion, nor should it have side-effects.\n"
"\n"
"In short, an assertion is an executable comment. For instance, instead of "
"writing this\n"
"\n"
"         $life = begin_life();\n"
"\n"
"you'd replace the comment with an assertion which *enforces* the comment.\n"
"\n"
"    $life = begin_life();     assert( $life =~ /!$/ );"
msgstr ""

#. leap/perl-Carp-Assert-More/summary
msgid "Convenience assertions for common situations"
msgstr ""

#. leap/perl-Carp-Assert-More/description
msgid ""
"Carp::Assert::More is a convenient set of assertions to make the habit of "
"writing assertions even easier.\n"
"\n"
"Everything in here is effectively syntactic sugar. There's no technical "
"difference between calling one of these functions:\n"
"\n"
"    assert_datetime( $foo );     assert_isa( $foo, 'DateTime' );\n"
"\n"
"that are provided by Carp::Assert::More and calling these assertions from "
"Carp::Assert\n"
"\n"
"    assert( defined $foo );     assert( ref($foo) eq 'DateTime' );\n"
"\n"
"My intent here is to make common assertions easy so that we as programmers "
"have no excuse to not use them."
msgstr ""

#. leap/perl-Carp-Clan/summary
msgid "Report errors from perspective of caller of a \"clan\" of modules"
msgstr ""

#. leap/perl-Carp-Clan/description
msgid ""
"This module is based on \"'Carp.pm'\" from Perl 5.005_03. It has been "
"modified to skip all package names matching the pattern given in the \"use\" "
"statement inside the \"'qw()'\" term (or argument list).\n"
"\n"
"Suppose you have a family of modules or classes named \"Pack::A\", \"Pack::B"
"\" and so on, and each of them uses \"'Carp::Clan qw(^Pack::);'\" (or at "
"least the one in which the error or warning gets raised).\n"
"\n"
"Thus when for example your script \"tool.pl\" calls module \"Pack::A\", and "
"module \"Pack::A\" calls module \"Pack::B\", an exception raised in module "
"\"Pack::B\" will appear to have originated in \"tool.pl\" where \"Pack::A\" "
"was called, and not in \"Pack::A\" where \"Pack::B\" was called, as the "
"unmodified \"'Carp.pm'\" would try to make you believe ':-)'.\n"
"\n"
"This works similarly if \"Pack::B\" calls \"Pack::C\" where the exception is "
"raised, etcetera.\n"
"\n"
"In other words, this blames all errors in the \"'Pack::*'\" modules on the "
"user of these modules, i.e., on you. ';-)'\n"
"\n"
"The skipping of a clan (or family) of packages according to a pattern "
"describing its members is necessary in cases where these modules are not "
"classes derived from each other (and thus when examining '@ISA' - as in the "
"original \"'Carp.pm'\" module - doesn't help).\n"
"\n"
"The purpose and advantage of this is that a \"clan\" of modules can work "
"together (and call each other) and throw exceptions at various depths down "
"the calling hierarchy and still appear as a monolithic block (as though they "
"were a single module) from the perspective of the caller.\n"
"\n"
"In case you just want to ward off all error messages from the module in "
"which you \"'use Carp::Clan'\", i.e., if you want to make all error messages "
"or warnings to appear to originate from where your module was called (this "
"is what you usually used to \"'use Carp;'\" for ';-)'), instead of in your "
"module itself (which is what you can do with a \"die\" or \"warn\" anyway), "
"you do not need to provide a pattern, the module will automatically provide "
"the correct one for you.\n"
"\n"
"I.e., just \"'use Carp::Clan;'\" without any arguments and call \"carp\" or "
"\"croak\" as appropriate, and they will automatically defend your module "
"against all blames!\n"
"\n"
"In other words, a pattern is only necessary if you want to make several "
"modules (more than one) work together and appear as though they were only "
"one."
msgstr ""

#. leap/perl-Carton/summary
msgid "Perl module dependency manager (aka Bundler for Perl)"
msgstr ""

#. leap/perl-Carton/description
msgid ""
"carton is a command line tool to track the Perl module dependencies for your "
"Perl application. Dependencies are declared using cpanfile format, and the "
"managed dependencies are tracked in a _cpanfile.snapshot_ file, which is "
"meant to be version controlled, and the snapshot file allows other "
"developers of your application will have the exact same versions of the "
"modules.\n"
"\n"
"For 'cpanfile' syntax, see cpanfile documentation."
msgstr ""

#. leap/perl-Catalyst-Manual/summary
#. leap/perl-Catalyst-Manual/description
msgid "The Catalyst developer's manual"
msgstr ""

#. leap/perl-Chart/summary
#, fuzzy
msgid "Series of Charting Modules"
msgstr "Encryptage Blowfish"

#. leap/perl-Chart/description
msgid ""
"These man-pages give you the most important information about Chart. There "
"is also a complete documentation (Documentation.pdf) within the Chart "
"package. Look at it to get more information. This module is an attempt to "
"build a general purpose graphing module that is easily modified and "
"expanded. I borrowed most of the API from Martien Verbruggen's GIFgraph "
"module. I liked most of GIFgraph, but I thought it was to difficult to "
"modify, and it was missing a few things that I needed, most notably legends. "
"So I decided to write a new module from scratch, and I've designed it from "
"the bottom up to be easy to modify. Like GIFgraph, Chart uses Lincoln "
"Stein's GD module for all of its graphics primitives calls."
msgstr ""

#. leap/perl-Class-Accessor/summary
msgid "Automated accessor generation"
msgstr ""

#. leap/perl-Class-Accessor/description
msgid ""
"This module automagically generates accessors/mutators for your class.\n"
"\n"
"Most of the time, writing accessors is an exercise in cutting and pasting. "
"You usually wind up with a series of methods like this:\n"
"\n"
"    sub name {         my $self = shift;         if(@_) {             $self-"
">{name} = $_[0];         }         return $self->{name};     }\n"
"\n"
"    sub salary {         my $self = shift;         if(@_) "
"{             $self->{salary} = $_[0];         }         return $self-"
">{salary};     }\n"
"\n"
"  \n"
"\n"
"One for each piece of data in your object. While some will be unique, doing "
"value checks and special storage tricks, most will simply be exercises in "
"repetition. Not only is it Bad Style to have a bunch of repetitious code, "
"but it's also simply not lazy, which is the real tragedy.\n"
"\n"
"If you make your module a subclass of Class::Accessor and declare your "
"accessor fields with mk_accessors() then you'll find yourself with a set of "
"automatically generated accessors which can even be customized!\n"
"\n"
"The basic set up is very simple:\n"
"\n"
"    package Foo;     use base qw(Class::Accessor);     Foo-"
">mk_accessors( qw(far bar car) );\n"
"\n"
"Done. Foo now has simple far(), bar() and car() accessors defined.\n"
"\n"
"Alternatively, if you want to follow Damian's _best practice_ guidelines you "
"can use:\n"
"\n"
"    package Foo;     use base qw(Class::Accessor);     Foo-"
">follow_best_practice;     Foo->mk_accessors( qw(far bar car) ); \n"
"*Note:* you must call 'follow_best_practice' before calling 'mk_accessors'."
msgstr ""

#. leap/perl-Class-Accessor-Chained/summary
msgid "Make chained accessors"
msgstr ""

#. leap/perl-Class-Accessor-Chained/description
msgid ""
" A chained accessor is one that always returns the object when called with "
"parameters (to set), and the value of the field when called with no "
"arguments.\n"
"\n"
"This module subclasses Class::Accessor in order to provide the same "
"mk_accessors interface.\n"
"\n"
"  Authors:\tRichard Clamp <richardc@unixbeard.net>\n"
"-------------------------------------------------------------------------------"
msgstr ""

#. leap/perl-Class-Accessor-Grouped/summary
msgid "Lets you build groups of accessors"
msgstr ""

#. leap/perl-Class-Accessor-Grouped/description
msgid ""
"This class lets you build groups of accessors that will call different "
"getters and setters. The documentation of this module still requires a lot "
"of work (*volunteers welcome >.>*), but in the meantime you can refer to at "
"http://lo-f.at/glahn/2009/08/WritingPowerfulAccessorsForPerlClasses.html for "
"more information."
msgstr ""

#. leap/perl-Class-Accessor-Lite/summary
#, fuzzy
msgid "Minimalistic Variant of Class::Accessor"
msgstr "Lecteur multimedia"

#. leap/perl-Class-Accessor-Lite/description
msgid ""
"The module is a variant of 'Class::Accessor'. It is fast and requires less "
"typing, has no dependencies to other modules, and does not mess up the @ISA."
msgstr ""

#. leap/perl-Class-Adapter/summary
#, fuzzy
msgid "Perl implementation of the \"Adapter\" Design Pattern"
msgstr "Implémentation du démon d'identification RFC1413"

#. leap/perl-Class-Adapter/description
msgid ""
"The 'Class::Adapter' class is intended as an abstract base class for "
"creating any sort of class or object that follows the _Adapter_ pattern."
msgstr ""

#. leap/perl-Class-Autouse/summary
msgid "Run-time load a class the first time you call a method in it"
msgstr ""

#. leap/perl-Class-Autouse/description
msgid ""
"*Class::Autouse* is a runtime class loader that allows you to specify "
"classes that will only load when a method of that class is called.\n"
"\n"
"For large classes or class trees that might not be used during the running "
"of a program, such as Date::Manip, this can save you large amounts of "
"memory, and decrease the script load time a great deal. \n"
"*Class::Autouse* also provides a number of \"unsafe\" features for runtime "
"generation of classes and implementation of syntactic sugar. These features "
"make use of (evil) UNIVERSAL::AUTOLOAD hooking, and are implemented in this "
"class because these hooks can only be done by a one module, and Class::"
"Autouse serves as a useful place to centralise this kind of evil :)"
msgstr ""

#. leap/perl-Class-Base/summary
msgid "Useful Base Class for Deriving Other Modules"
msgstr ""

#. leap/perl-Class-Base/description
msgid ""
"Please consider using Badger::Base instead which is the successor of this "
"module.\n"
"\n"
"This module implements a simple base class from which other modules can be "
"derived, thereby inheriting a number of useful methods such as 'new()', "
"'init()', 'params()', 'clone()', 'error()' and 'debug()'.\n"
"\n"
"For a number of years, I found myself re-writing this module for practically "
"every Perl project of any significant size. Or rather, I would copy the "
"module from the last project and perform a global search and replace to "
"change the names. Each time it got a little more polished and eventually, I "
"decided to Do The Right Thing and release it as a module in it's own right.\n"
"\n"
"It doesn't pretend to be an all-encompassing solution for every kind of "
"object creation problem you might encounter. In fact, it only supports "
"blessed hash references that are created using the popular, but by no means "
"universal convention of calling 'new()' with a list or reference to a hash "
"array of named parameters. Constructor failure is indicated by returning "
"undef and setting the '$ERROR' package variable in the module's class to "
"contain a relevant message (which you can also fetch by calling 'error()' as "
"a class method).\n"
"\n"
"e.g.\n"
"\n"
"    my $object = My::Module->new( \tfile => 'myfile.html', \tmsg  => 'Hello "
"World'     ) || die $My::Module::ERROR;\n"
"\n"
"or:\n"
"\n"
"    my $object = My::Module->new({ \tfile => 'myfile.html', \tmsg  => 'Hello "
"World',     }) || die My::Module->error();\n"
"\n"
"The 'new()' method handles the conversion of a list of arguments into a hash "
"array and calls the 'init()' method to perform any initialisation. In many "
"cases, it is therefore sufficient to define a module like so:\n"
"\n"
"    package My::Module;     use Class::Base;     use base qw( Class::"
"Base );\n"
"\n"
"    sub init { \tmy ($self, $config) = @_; \t \t$self->params($config, "
"qw( FOO BAR )) || return undef; \treturn $self;     }\n"
"\n"
"    \n"
"\n"
"    1;\n"
"\n"
"Then you can go right ahead and use it like this:\n"
"\n"
"    use My::Module;\n"
"\n"
"    my $object = My::Module->new( FOO => 'the foo value', \t\t\t\t  BAR => "
"'the bar value' )         || die $My::Module::ERROR;\n"
"\n"
"Despite its limitations, Class::Base can be a surprisingly useful module to "
"have lying around for those times where you just want to create a regular "
"object based on a blessed hash reference and don't want to worry too much "
"about duplicating the same old code to bless a hash, define configuration "
"values, provide an error reporting mechanism, and so on. Simply derive your "
"module from 'Class::Base' and leave it to worry about most of the detail. "
"And don't forget, you can always redefine your own 'new()', 'error()', or "
"other method, if you don't like the way the Class::Base version works."
msgstr ""

#. leap/perl-Class-C3/summary
msgid "Pragma to use the C3 method resolution order algorithm"
msgstr ""

#. leap/perl-Class-C3/description
msgid ""
"This is pragma to change Perl 5's standard method resolution order from "
"depth-first left-to-right (a.k.a - pre-order) to the more sophisticated C3 "
"method resolution order. \n"
"*NOTE:* YOU SHOULD NOT USE THIS MODULE DIRECTLY - The feature provided is "
"integrated into perl version >= 5.9.5, and you should use MRO::Compat "
"instead, which will use the core implementation in newer perls, but fallback "
"to using this implementation on older perls."
msgstr ""

#. leap/perl-Class-C3-Adopt-NEXT/summary
msgid "Make Next Suck Less"
msgstr ""

#. leap/perl-Class-C3-Adopt-NEXT/description
msgid ""
"the NEXT manpage was a good solution a few years ago, but isn't any more. "
"It's slow, and the order in which it re-dispatches methods appears random at "
"times. It also encourages bad programming practices, as you end up with code "
"to re-dispatch methods when all you really wanted to do was run some code "
"before or after a method fired.\n"
"\n"
"However, if you have a large application, then weaning yourself off 'NEXT' "
"isn't easy.\n"
"\n"
"This module is intended as a drop-in replacement for NEXT, supporting the "
"same interface, but using the Class::C3 manpage to do the hard work. You can "
"then write new code without 'NEXT', and migrate individual source files to "
"use 'Class::C3' or method modifiers as appropriate, at whatever pace you're "
"comfortable with."
msgstr ""

#. leap/perl-Class-C3-Componentised/summary
msgid "Load mix-ins or components to your C3-based class"
msgstr ""

#. leap/perl-Class-C3-Componentised/description
msgid ""
"This will inject base classes to your module using the Class::C3 method "
"resolution order.\n"
"\n"
"Please note: these are not plugins that can take precedence over methods "
"declared in MyModule. If you want something like that, consider MooseX::"
"Object::Pluggable."
msgstr ""

#. leap/perl-Class-C3-XS/summary
msgid "XS speedups for Class::C3"
msgstr ""

#. leap/perl-Class-C3-XS/description
msgid ""
"This contains XS performance enhancers for Class::C3 version 0.16 and "
"higher. The main Class::C3 package will use this package automatically if it "
"can find it. Do not use this package directly, use Class::C3 instead.\n"
"\n"
"The test suite here is not complete, although it does verify a few basic "
"things. The best testing comes from running the Class::C3 test suite\n"
"*after* this module is installed.\n"
"\n"
"This module won't do anything for you if you're running a version of Class::"
"C3 older than 0.16. (It's not a dependency because it would be circular with "
"the optional dependency from that package to this one)."
msgstr ""

#. leap/perl-Class-Container/summary
msgid "Glues object frameworks together transparently"
msgstr ""

#. leap/perl-Class-Container/description
msgid ""
"This class facilitates building frameworks of several classes that inter-"
"operate. It was first designed and built for 'HTML::Mason', in which the "
"Compiler, Lexer, Interpreter, Resolver, Component, Buffer, and several other "
"objects must create each other transparently, passing the appropriate "
"parameters to the right class, possibly substituting other subclasses for "
"any of these objects.\n"
"\n"
"The main features of 'Class::Container' are:\n"
"\n"
"  * Explicit declaration of containment relationships (aggregation, factory "
"creation, etc.)\n"
"\n"
"  * Declaration of constructor parameters accepted by each member in a class "
"framework\n"
"\n"
"  * Transparent passing of constructor parameters to the class that needs "
"them\n"
"\n"
"  * Ability to create one (automatic) or many (manual) contained objects "
"automatically and transparently"
msgstr ""

#. leap/perl-Class-DBI/summary
#. leap/perl-Class-DBI/description
#, fuzzy
msgid "Simple Database Abstraction"
msgstr "Un interface client pour le serveur LDAP"

#. leap/perl-Class-Data-Inheritable/summary
msgid "Inheritable, overridable class data"
msgstr ""

#. leap/perl-Class-Data-Inheritable/description
msgid ""
"Class::Data::Inheritable is for creating accessor/mutators to class data. "
"That is, if you want to store something about your class as a whole (instead "
"of about a single object). This data is then inherited by your subclasses "
"and can be overriden.\n"
"\n"
"For example:\n"
"\n"
"  Pere::Ubu->mk_classdata('Suitcase');\n"
"\n"
"will generate the method Suitcase() in the class Pere::Ubu.\n"
"\n"
"This new method can be used to get and set a piece of class data.\n"
"\n"
"  Pere::Ubu->Suitcase('Red');   $suitcase = Pere::Ubu->Suitcase;\n"
"\n"
"The interesting part happens when a class inherits from Pere::Ubu:\n"
"\n"
"  package Raygun;   use base qw(Pere::Ubu);\n"
"\n"
"     $suitcase = Raygun->Suitcase;\n"
"\n"
"Raygun inherits its Suitcase class data from Pere::Ubu.\n"
"\n"
"Inheritance of class data works analogous to method inheritance. As long as "
"Raygun does not \"override\" its inherited class data (by using Suitcase() "
"to set a new value) it will continue to use whatever is set in Pere::Ubu and "
"inherit further changes:\n"
"\n"
"     Pere::Ubu->Suitcase('Blue');\n"
"\n"
"However, should Raygun decide to set its own Suitcase() it has now "
"\"overridden\" Pere::Ubu and is on its own, just like if it had overriden a "
"method:\n"
"\n"
"     Raygun->Suitcase('Orange');\n"
"\n"
"Now that Raygun has overridden Pere::Ubu futher changes by Pere::Ubu no "
"longer effect Raygun.\n"
"\n"
"     Pere::Ubu->Suitcase('Samsonite');\n"
"\n"
"Authors:\n"
"--------      Original code by Damian Conway.      Maintained by Michael G "
"Schwern until September 2005.      Now maintained by Tony Bowden."
msgstr ""

#. leap/perl-Class-Date/summary
msgid "Class for easy date and time manipulation"
msgstr ""

#. leap/perl-Class-Date/description
msgid ""
"This module is intended to provide a general-purpose date and datetime type "
"for perl. You have a Class::Date class for absolute date and datetime, and "
"have a Class::Date::Rel class for relative dates.\n"
"\n"
"You can use \"+\", \"-\", \"<\" and \">\" operators as with native perl data "
"types."
msgstr ""

#. leap/perl-Class-ErrorHandler/summary
msgid "Base class for error handling"
msgstr ""

#. leap/perl-Class-ErrorHandler/description
msgid ""
"_Class::ErrorHandler_ provides an error-handling mechanism that's generic "
"enough to be used as the base class for a variety of OO classes. Subclasses "
"inherit its two error-handling methods, _error_ and _errstr_, to communicate "
"error messages back to the calling program.\n"
"\n"
"On failure (for whatever reason), a subclass should call _error_ and return "
"to the caller; _error_ itself sets the error message internally, then "
"returns 'undef'. This has the effect of the method that failed returning "
"'undef' to the caller. The caller should check for errors by checking for a "
"return value of 'undef', and calling _errstr_ to get the value of the error "
"message on an error.\n"
"\n"
"As demonstrated in the the SYNOPSIS manpage, _error_ and _errstr_ work as "
"both class methods and object methods."
msgstr ""

#. leap/perl-Class-Factory-Util/summary
msgid "Provide utility methods for factory classes"
msgstr ""

#. leap/perl-Class-Factory-Util/description
msgid "This module exports a method that is useful for factory classes."
msgstr ""

#. leap/perl-Class-ISA/summary
msgid "report the search path for a class's ISA tree"
msgstr ""

#. leap/perl-Class-ISA/description
msgid ""
"Suppose you have a class (like Food::Fish::Fishstick) that is derived, via "
"its @ISA, from one or more superclasses (as Food::Fish::Fishstick is from "
"Food::Fish, Life::Fungus, and Chemicals), and some of those superclasses may "
"themselves each be derived, via its @ISA, from one or more superclasses (as "
"above).\n"
"\n"
"When, then, you call a method in that class ($fishstick->calories), Perl "
"first searches there for that method, but if it's not there, it goes "
"searching in its superclasses, and so on, in a depth-first (or maybe "
"\"height-first\" is the word) search. In the above example, it'd first look "
"in Food::Fish, then Food, then Matter, then Life::Fungus, then Life, then "
"Chemicals.\n"
"\n"
"This library, Class::ISA, provides functions that return that list -- the "
"list (in order) of names of classes Perl would search to find a method, with "
"no duplicates."
msgstr ""

#. leap/perl-Class-Inner/summary
msgid "A perlish implementation of Java like inner classes"
msgstr ""

#. leap/perl-Class-Inner/description
msgid ""
"Yet another implementation of an anonymous class with per object "
"overrideable methods, but with the added attraction of sort of working "
"dispatch to the parent class's method."
msgstr ""

#. leap/perl-Class-Inspector/summary
#, fuzzy
msgid "Get information about a class and its structure"
msgstr "Aucune information disponible."

#. leap/perl-Class-Inspector/description
msgid ""
"Class::Inspector allows you to get information about a loaded class. Most or "
"all of this information can be found in other ways, but they aren't always "
"very friendly, and usually involve a relatively high level of Perl wizardry, "
"or strange and unusual looking code. Class::Inspector attempts to provide an "
"easier, more friendly interface to this information."
msgstr ""

#. leap/perl-Class-Load/summary
msgid "Working (Require \"Class::Name\") and More"
msgstr ""

#. leap/perl-Class-Load/description
msgid ""
"'require EXPR' only accepts 'Class/Name.pm' style module names, not 'Class::"
"Name'. How frustrating! For that, we provide 'load_class 'Class::Name''.\n"
"\n"
"It's often useful to test whether a module can be loaded, instead of "
"throwing an error when it's not available. For that, we provide "
"'try_load_class 'Class::Name''.\n"
"\n"
"Finally, sometimes we need to know whether a particular class has been "
"loaded. Asking '%INC' is an option, but that will miss inner packages and "
"any class for which the filename does not correspond to the package name. "
"For that, we provide 'is_class_loaded 'Class::Name''."
msgstr ""

#. leap/perl-Class-Load-XS/summary
#, fuzzy
msgid "XS implementation of parts of Class::Load"
msgstr ""
"GNU JavaMail est une implantation libre de la spécification JavaMail API."

#. leap/perl-Class-Load-XS/description
msgid ""
"This module provides an XS implementation for portions of Class::Load. See "
"Class::Load for API details."
msgstr ""

#. leap/perl-Class-MakeMethods/summary
msgid "Generate common types of methods"
msgstr ""

#. leap/perl-Class-MakeMethods/description
msgid ""
"The Class::MakeMethods framework allows Perl class developers to quickly "
"define common types of methods. When a module uses Class::MakeMethods or one "
"of its subclasses, it can select from a variety of supported method types, "
"and specify a name for each method desired. The methods are dynamically "
"generated and installed in the calling package."
msgstr ""

#. leap/perl-Class-Method-Modifiers/summary
msgid "Provides Moose-like method modifiers"
msgstr ""

#. leap/perl-Class-Method-Modifiers/description
msgid ""
"Method modifiers are a convenient feature from the CLOS (Common Lisp Object "
"System) world.\n"
"\n"
"In its most basic form, a method modifier is just a method that calls '$self-"
">SUPER::foo(@_)'. I for one have trouble remembering that exact invocation, "
"so my classes seldom re-dispatch to their base classes. Very bad!\n"
"\n"
"'Class::Method::Modifiers' provides three modifiers: 'before', 'around', and "
"'after'. 'before' and 'after' are run just before and after the method they "
"modify, but can not really affect that original method. 'around' is run in "
"place of the original method, with a hook to easily call that original "
"method. See the 'MODIFIERS' section for more details on how the particular "
"modifiers work.\n"
"\n"
"One clear benefit of using 'Class::Method::Modifiers' is that you can define "
"multiple modifiers in a single namespace. These separate modifiers don't "
"need to know about each other. This makes top-down design easy. Have a base "
"class that provides the skeleton methods of each operation, and have plugins "
"modify those methods to flesh out the specifics.\n"
"\n"
"Parent classes need not know about 'Class::Method::Modifiers'. This means "
"you should be able to modify methods in _any_ subclass. See Term::VT102::"
"ZeroBased for an example of subclassing with 'Class::Method::Modifiers'.\n"
"\n"
"In short, 'Class::Method::Modifiers' solves the problem of making sure you "
"call '$self->SUPER::foo(@_)', and provides a cleaner interface for it.\n"
"\n"
"As of version 1.00, 'Class::Method::Modifiers' is faster in some cases than "
"Moose. See 'benchmark/method_modifiers.pl' in the Moose distribution.\n"
"\n"
"'Class::Method::Modifiers' also provides an additional \"modifier\" type, "
"'fresh'; see below."
msgstr ""

#. leap/perl-Class-Method-Modifiers-Fast/summary
msgid "Provides Moose-Like Method Modifiers"
msgstr ""

#. leap/perl-Class-Method-Modifiers-Fast/description
msgid ""
"Method modifiers are a powerful feature from the CLOS (Common Lisp Object "
"System) world.\n"
"\n"
"'Class::Method::Modifiers::Fast' provides three modifiers: 'before', "
"'around', and 'after'. 'before' and 'after' are run just before and after "
"the method they modify, but can not really affect that original method. "
"'around' is run in place of the original method, with a hook to easily call "
"that original method. See the 'MODIFIERS' section for more details on how "
"the particular modifiers work."
msgstr ""

#. leap/perl-Class-MethodMaker/summary
msgid "Create generic methods for OO Perl"
msgstr ""

#. leap/perl-Class-MethodMaker/description
msgid ""
"This module solves the problem of having to continually write accessor "
"methods for your objects that perform standard tasks.\n"
"\n"
"The argument to 'use' is an *arrayref*, as pairs whose \"keys\" are the "
"names of types of generic methods generated by MethodMaker and whose \"values"
"\" tell method maker what methods to make.\n"
"\n"
"To override any generated methods, it is sufficient to ensure that the "
"overriding method is defined when Class::MethodMaker is called. Note that "
"the 'use' keyword introduces a 'BEGIN' block, so you may need to define (or "
"at least declare) your overriding method in a 'BEGIN' block."
msgstr ""

#. leap/perl-Class-Mix/summary
msgid "Dynamic Class Mixing"
msgstr ""

#. leap/perl-Class-Mix/description
msgid ""
"The 'mix_class' function provided by this module dynamically generates "
"`anonymous' classes with specified inheritance."
msgstr ""

#. leap/perl-Class-Multimethods/summary
msgid "Support multimethods and function overloading in Perl"
msgstr ""

#. leap/perl-Class-Multimethods/description
msgid ""
"The Class:Multimethod module exports a subroutine (&multimethod) that can be "
"used to declare other subroutines that are dispatched using a algorithm "
"different from the normal Perl subroutine or method dispatch mechanism."
msgstr ""

#. leap/perl-Class-ReturnValue/summary
msgid "Return-Value Object That Lets You Treat It"
msgstr ""

#. leap/perl-Class-ReturnValue/description
msgid ""
"Class::ReturnValue is a \"clever\" return value object that can allow code "
"calling your routine to expect: a boolean value (did it fail) or a list "
"(what are the return values)"
msgstr ""

#. leap/perl-Class-Singleton/summary
msgid "Implementation of a \"Singleton\" class"
msgstr ""

#. leap/perl-Class-Singleton/description
msgid ""
"This is the 'Class::Singleton' module. A Singleton describes an object class "
"that can have only one instance in any system. An example of a Singleton "
"might be a print spooler or system registry. This module implements a "
"Singleton class from which other classes can be derived. By itself, the "
"'Class::Singleton' module does very little other than manage the "
"instantiation of a single object. In deriving a class from 'Class::"
"Singleton', your module will inherit the Singleton instantiation method and "
"can implement whatever specific functionality is required.\n"
"\n"
"For a description and discussion of the Singleton class, see \"Design "
"Patterns\", Gamma et al, Addison-Wesley, 1995, ISBN 0-201-63361-2."
msgstr ""

#. leap/perl-Class-Spiffy/summary
msgid "Spiffy Framework with No Source Filtering"
msgstr ""

#. leap/perl-Class-Spiffy/description
msgid ""
"\"Class::Spiffy\" is a framework and methodology for doing object oriented "
"(OO) programming in Perl. Class::Spiffy combines the best parts of Exporter."
"pm, base.pm, mixin.pm and SUPER.pm into one magic foundation class. It "
"attempts to fix all the nits and warts of traditional Perl OO, in a clean, "
"straightforward and (perhaps someday) standard way.\n"
"\n"
"Class::Spiffy borrows ideas from other OO languages like Python, Ruby, Java "
"and Perl 6. It also adds a few tricks of its own.\n"
"\n"
"If you take a look on CPAN, there are a ton of OO related modules. When "
"starting a new project, you need to pick the set of modules that makes most "
"sense, and then you need to use those modules in each of your classes. "
"Class::Spiffy, on the other hand, has everything you'll probably need in one "
"module, and you only need to use it once in one of your classes. If you make "
"Class::Spiffy the base class of the basest class in your project, Class::"
"Spiffy will automatically pass all of its magic to all of your subclasses. "
"You may eventually forget that you're even using it!"
msgstr ""

#. leap/perl-Class-Std/summary
msgid "Support for creating standard \"inside-out\" classes"
msgstr ""

#. leap/perl-Class-Std/description
msgid ""
"This module provides tools that help to implement the \"inside out object\" "
"class structure in a convenient and standard way.\n"
"\n"
"_Portions of the following code and documentation from \"Perl Best Practices"
"\" copyright (c) 2005 by O'Reilly Media, Inc. and reprinted with permission._"
msgstr ""

#. leap/perl-Class-Tiny/summary
#, fuzzy
msgid "Minimalist class construction"
msgstr "Les fonctions utiles pour Gtk"

#. leap/perl-Class-Tiny/description
msgid ""
"This module offers a minimalist class construction kit in around 120 lines "
"of code. Here is a list of features:\n"
"\n"
"  * defines attributes via import arguments\n"
"\n"
"  * generates read-write accessors\n"
"\n"
"  * supports lazy attribute defaults\n"
"\n"
"  * supports custom accessors\n"
"\n"
"  * superclass provides a standard 'new' constructor\n"
"\n"
"  * 'new' takes a hash reference or list of key/value pairs\n"
"\n"
"  * 'new' supports providing 'BUILDARGS' to customize constructor options\n"
"\n"
"  * 'new' calls 'BUILD' for each class from parent to child\n"
"\n"
"  * superclass provides a 'DESTROY' method\n"
"\n"
"  * 'DESTROY' calls 'DEMOLISH' for each class from child to parent\n"
"\n"
"Multiple-inheritance is possible, with superclass order determined via mro::"
"get_linear_isa.\n"
"\n"
"It uses no non-core modules for any recent Perl. On Perls older than v5.10 "
"it requires MRO::Compat. On Perls older than v5.14, it requires Devel::"
"GlobalDestruction."
msgstr ""

#. leap/perl-Class-Trigger/summary
msgid "Mixin to add / call inheritable triggers"
msgstr ""

#. leap/perl-Class-Trigger/description
msgid ""
"Class::Trigger is a mixin class to add / call triggers (or hooks) that get "
"called at some points you specify."
msgstr ""

#. leap/perl-Class-Unload/summary
#. leap/perl-Class-Unload/description
msgid "Unload a class"
msgstr ""

#. leap/perl-Class-WhiteHole/summary
msgid "Base class to treat unhandled method calls as errors"
msgstr ""

#. leap/perl-Class-WhiteHole/description
msgid ""
"It's possible to accidentally inherit an AUTOLOAD method. Often this will "
"happen if a class somewhere in the chain uses AutoLoader or defines one of "
"their own. This can lead to confusing error messages when method lookups "
"fail.\n"
"\n"
"Sometimes you want to avoid this accidental inheritance.  In that case, "
"inherit from Class::WhiteHole. All unhandled methods will produce normal "
"Perl error messages.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Michael G Schwern <schwern@pobox.com>"
msgstr ""

#. leap/perl-Class-XPath/summary
msgid "Adds xpath matching to object trees"
msgstr ""

#. leap/perl-Class-XPath/description
msgid ""
"This module adds XPath-style matching to your object trees. This means that "
"you can find nodes using an XPath-esque query with 'match()' from anywhere "
"in the tree. Also, the 'xpath()' method returns a unique path to a given "
"node which can be used as an identifier.\n"
"\n"
"To use this module you must already have an OO implementation of a tree. The "
"tree must be a true tree - all nodes have a single parent and the tree must "
"have a single root node. Also, the order of children within a node must be "
"stable. \n"
"*NOTE:* This module is not yet a complete XPath implementation. Over time I "
"expect the subset of XPath supported to grow. See the SYNTAX documentation "
"for details on the current level of support."
msgstr ""

#. leap/perl-Class-XSAccessor/summary
msgid "Generate fast XS accessors without runtime compilation"
msgstr ""

#. leap/perl-Class-XSAccessor/description
msgid ""
"Class::XSAccessor implements fast read, write and read/write accessors in "
"XS. Additionally, it can provide predicates such as 'has_foo()' for testing "
"whether the attribute 'foo' exists in the object (which is different from "
"\"is defined within the object\"). It only works with objects that are "
"implemented as ordinary hashes. the Class::XSAccessor::Array manpage "
"implements the same interface for objects that use arrays for their internal "
"representation.\n"
"\n"
"Since version 0.10, the module can also generate simple constructors "
"(implemented in XS). Simply supply the 'constructor => 'constructor_name'' "
"option or the 'constructors => ['new', 'create', 'spawn']' option. These "
"constructors do the equivalent of the following Perl code:\n"
"\n"
"  sub new {     my $class = shift;     return bless { @_ }, ref($class)||"
"$class;   }\n"
"\n"
"That means they can be called on objects and classes but will not clone "
"objects entirely. Parameters to 'new()' are added to the object.\n"
"\n"
"The XS accessor methods are between 3 and 4 times faster than typical pure-"
"Perl accessors in some simple benchmarking. The lower factor applies to the "
"potentially slightly obscure 'sub set_foo_pp {$_[0]->{foo} = $_[1]}', so if "
"you usually write clear code, a factor of 3.5 speed-up is a good estimate. "
"If in doubt, do your own benchmarking!\n"
"\n"
"The method names may be fully qualified. The example in the synopsis could "
"have been written as 'MyClass::get_foo' instead of 'get_foo'. This way, "
"methods can be installed in classes other than the current class. See also: "
"the 'class' option below.\n"
"\n"
"By default, the setters return the new value that was set, and the accessors "
"(mutators) do the same. This behaviour can be changed with the 'chained' "
"option - see below. The predicates return a boolean.\n"
"\n"
"Since version 1.01, 'Class::XSAccessor' can generate extremely simple "
"methods which just return true or false (and always do so). If that seems "
"like a really superfluous thing to you, then consider a large class "
"hierarchy with interfaces such as the PPI manpage. These methods are "
"provided by the 'true' and 'false' options - see the synopsis.\n"
"\n"
"'defined_predicates' check whether a given object attribute is defined. "
"'predicates' is an alias for 'defined_predicates' for compatibility with "
"older versions of 'Class::XSAccessor'. 'exists_predicates' checks whether "
"the given attribute exists in the object using 'exists'."
msgstr ""

#. leap/perl-Clone/summary
#. leap/perl-Clone-PP/summary
msgid "Recursively copy Perl datatypes"
msgstr ""

#. leap/perl-Clone/description
msgid ""
"This module provides a 'clone()' method which makes recursive copies of "
"nested hash, array, scalar and reference types, including tied variables and "
"objects.\n"
"\n"
"'clone()' takes a scalar argument and duplicates it. To duplicate lists, "
"arrays or hashes, pass them in by reference, e.g.\n"
"\n"
"    my $copy = clone (\\@array);\n"
"\n"
"    \n"
"\n"
"    my %copy = %;"
msgstr ""

#. leap/perl-Clone-Choose/summary
msgid "Choose appropriate clone utility"
msgstr ""

#. leap/perl-Clone-Choose/description
msgid ""
"'Clone::Choose' checks several different modules which provides a 'clone()' "
"function and selects an appropriate one. The default preference is\n"
"\n"
"  Clone   Storable   Clone::PP\n"
"\n"
"This list might evolve in future. Please see EXPORTS how to pick a "
"particular one."
msgstr ""

#. leap/perl-Clone-PP/description
msgid ""
"This module provides a general-purpose clone function to make deep copies of "
"Perl data structures. It calls itself recursively to copy nested hash, "
"array, scalar and reference types, including tied variables and objects.\n"
"\n"
"The clone() function takes a scalar argument to copy. To duplicate arrays or "
"hashes, pass them in by reference:\n"
"\n"
"  my $copy = clone(\\@array);    my @copy = @{ clone(\\@array) };   my $copy "
"= clone(\\%hash);     my %copy = %;\n"
"\n"
"The clone() function also accepts an optional second parameter that can be "
"used to limit the depth of the copy. If you pass a limit of 0, clone will "
"return the same value you supplied; for a limit of 1, a shallow copy is "
"constructed; for a limit of 2, two layers of copying are done, and so on.\n"
"\n"
"  my $shallow_copy = clone( $item, 1 );\n"
"\n"
"To allow objects to intervene in the way they are copied, the clone() "
"function checks for a couple of optional methods. If an object provides a "
"method named 'clone_self', it is called and the result returned without "
"further processing. Alternately, if an object provides a method named "
"'clone_init', it is called on the copied object before it is returned."
msgstr ""

#. leap/perl-Code-DRY/summary
msgid "Cut-and-Paste-Detector for Perl code"
msgstr ""

#. leap/perl-Code-DRY/description
msgid ""
"The module's main purpose is to report repeated text fragments (typically "
"Perl code) that could be considered for isolation and/or abstraction in "
"order to reduce multiple copies of the same code (aka cut and paste code)."
msgstr ""

#. leap/perl-Code-TidyAll/summary
msgid "Engine for tidyall, your all-in-one code tidier and validator"
msgstr ""

#. leap/perl-Code-TidyAll/description
msgid ""
"This is the engine used by tidyall - read that first to get an overview.\n"
"\n"
"You can call this API from your own program instead of executing 'tidyall'."
msgstr ""

#. leap/perl-CommonMark/summary
#, fuzzy
msgid "Interface to the CommonMark C library"
msgstr "Interface Perl vers la bibliothèque UULib"

#. leap/perl-CommonMark/description
msgid ""
"This module is a wrapper around the official CommonMark C library "
"_libcmark_. It closely follows the original API.\n"
"\n"
"The main module provides some entry points to parse documents and "
"convenience functions for node creation. The bulk of features is available "
"through CommonMark::Node objects of which the parse tree is made. "
"CommonMark::Iterator is a useful class to walk through the nodes in a tree. "
"CommonMark::Parser provides a push parser interface."
msgstr ""

#. leap/perl-Compress-Bzip2/summary
#, fuzzy
msgid "Interface to Bzip2 compression library"
msgstr ""
"Interface Perl donnant accès à une partie de la bibliothèque de compression "
"info-zip zlib"

#. leap/perl-Compress-Bzip2/description
msgid ""
"The _Compress::Bzip2_ module provides a Perl interface to the *bzip2* "
"compression library (see AUTHOR for details about where to get _Bzip2_). A "
"relevant subset of the functionality provided by _bzip2_ is available in "
"_Compress::Bzip2_.\n"
"\n"
"All string parameters can either be a scalar or a scalar reference.\n"
"\n"
"The module can be split into two general areas of functionality, namely in-"
"memory compression/decompression and read/write access to _bzip2_ files. "
"Each of these areas will be discussed separately below. \n"
"*NOTE*\n"
"\n"
"_Compress::Bzip2_ is just a simple _bzip2_ binding, comparable to the old "
"Compress::Zlib library. It is not well integrated into PerlIO, use the "
"preferred IO::Compress::Bzip2 instead."
msgstr ""

#. leap/perl-Compress-Raw-Lzma/summary
#, fuzzy
msgid "Low-Level Interface to lzma compression library"
msgstr ""
"Interface Perl donnant accès à une partie de la bibliothèque de compression "
"info-zip zlib"

#. leap/perl-Compress-Raw-Lzma/description
msgid ""
"'Compress::Raw::Lzma' provides an interface to the in-memory compression/"
"uncompression functions from the lzma compression library.\n"
"\n"
"Although the primary purpose for the existence of 'Compress::Raw::Lzma' is "
"for use by the 'IO::Compress::Lzma', 'IO::Uncompress::UnLzma', 'IO::"
"Compress::Xz' and 'IO::Uncompress::UnXz' modules, it can be used on its own "
"for simple compression/uncompression tasks.\n"
"\n"
"There are two functions, called 'code' and 'flush', used in all the "
"compression and uncompression interfaces defined in this module. By default "
"both of these functions overwrites any data stored in its output buffer "
"parameter. If you want to compress/uncompress to a single buffer, and have "
"'code' and 'flush' append to that buffer, enable the 'AppendOutput' option "
"when you create the compression/decompression object."
msgstr ""

#. leap/perl-Config-Any/summary
msgid "Load configuration from different file formats, transparently"
msgstr ""

#. leap/perl-Config-Any/description
msgid ""
"Config::Any provides a facility for Perl applications and libraries to load "
"configuration data from multiple different file formats. It supports XML, "
"YAML, JSON, Apache-style configuration, Windows INI files, and even Perl "
"code.\n"
"\n"
"The rationale for this module is as follows: Perl programs are deployed on "
"many different platforms and integrated with many different systems. Systems "
"administrators and end users may prefer different configuration formats than "
"the developers. The flexibility inherent in a multiple format configuration "
"loader allows different users to make different choices, without generating "
"extra work for the developers. As a developer you only need to learn a "
"single interface to be able to use the power of different configuration "
"formats."
msgstr ""

#. leap/perl-Config-Auto/summary
#, fuzzy
msgid "Magical config file parser"
msgstr "La configuration de %s a échoué."

#. leap/perl-Config-Auto/description
msgid ""
"This module was written after having to write Yet Another Config File Parser "
"for some variety of colon-separated config. I decided \"never again\".\n"
"\n"
"Config::Auto aims to be the most 'DWIM' config parser available, by "
"detecting configuration styles, include paths and even config filenames "
"automagically.\n"
"\n"
"See the the HOW IT WORKS manpage section below on implementation details."
msgstr ""

#. leap/perl-Config-AutoConf/summary
msgid "Module to Implement Some of Autoconf Macros in Pure Perl"
msgstr ""

#. leap/perl-Config-AutoConf/description
msgid ""
"Config::AutoConf is intended to provide the same opportunities to Perl "
"developers as at http://www.gnu.org/software/autoconf/ does for Shell "
"developers.\n"
"\n"
"As Perl is the second most deployed language (mind: every Unix comes with "
"Perl, several mini-computers have Perl and even lot's of Windows machines "
"run Perl software - which requires deployed Perl there, too), this gives "
"wider support than Shell based probes.\n"
"\n"
"The API is leaned against GNU Autoconf, but we try to make the API "
"(especially optional arguments) more Perl'ish than m4 abilities allow to the "
"original."
msgstr ""

#. leap/perl-Config-Crontab/summary
msgid "Read/Write Vixie compatible crontab(5) files"
msgstr ""

#. leap/perl-Config-Crontab/description
msgid ""
"*Config::Crontab* provides an object-oriented interface to Vixie-style "
"crontab(5) files for Perl.\n"
"\n"
"A *Config::Crontab* object allows you to manipulate an ordered set of\n"
"*Event*, *Env*, or *Comment* objects (also included with this package). "
"Descriptions of these packages may be found below.\n"
"\n"
"In short, *Config::Crontab* reads and writes crontab(5) files (and does a "
"little pretty-printing too) using objects. The general idea is that you "
"create a *Config::Crontab* object and associate it with a file (if "
"unassociated, it will work over a pipe to 'crontab -l'). From there, you can "
"add lines to your crontab object, change existing line attributes, and write "
"everything back to file.\n"
"\n"
"Now, to successfully navigate the module's ins and outs, we'll need a little "
"terminology lesson."
msgstr ""

#. leap/perl-Config-General/summary
#, fuzzy
msgid "Generic Config Module"
msgstr "Module de configuration générique"

#. leap/perl-Config-General/description
msgid ""
"This module opens a config file and parses its contents for you. The *new* "
"method requires one parameter which needs to be a filename. The method\n"
"*getall* returns a hash which contains all options and its associated values "
"of your config file.\n"
"\n"
"The format of config files supported by *Config::General* is inspired by the "
"well known Apache config format, in fact, this module is 100% compatible to "
"Apache configs, but you can also just use simple name/value pairs in your "
"config files.\n"
"\n"
"In addition to the capabilities of an Apache config file it supports some "
"enhancements such as here-documents, C-style comments or multiline options."
msgstr ""

#. leap/perl-Config-GitLike/summary
#, fuzzy
msgid "Git-compatible config file parsing"
msgstr "La configuration de %s a échoué."

#. leap/perl-Config-GitLike/description
msgid ""
"This module handles interaction with configuration files of the style used "
"by the version control system Git. It can both parse and modify these files, "
"as well as create entirely new ones.\n"
"\n"
"You only need to know a few things about the configuration format in order "
"to use this module. First, a configuration file is made up of key/value "
"pairs. Every key must be contained in a section. Sections can have "
"subsections, but they don't have to. For the purposes of setting and getting "
"configuration variables, we join the section name, subsection name, and "
"variable name together with dots to get a key name that looks like \"section."
"subsection.variable\". These are the strings that you'll be passing in to "
"'key' arguments.\n"
"\n"
"Configuration files inherit from each other. By default, 'Config::GitLike' "
"loads data from a system-wide configuration file, a per-user configuration "
"file, and a per-directory configuration file, but by subclassing and "
"overriding methods you can obtain any combination of configuration files. By "
"default, configuration files that don't exist are just skipped.\n"
"\n"
"See http://www.kernel.org/pub/software/scm/git/docs/git-config."
"html#_configurat ion_file for details on the syntax of git configuration "
"files. We won't waste pixels on the nitty gritty here.\n"
"\n"
"While the behavior of a couple of this module's methods differ slightly from "
"the 'git config' equivalents, this module can read any config file written "
"by git. The converse is usually true, but only if you don't take advantage "
"of this module's increased permissiveness when it comes to key names. (See "
"DIFFERENCES FROM GIT-CONFIG for details.)\n"
"\n"
"This is an object-oriented module using Moo. All subroutines are object "
"method calls.\n"
"\n"
"A few methods have parameters that are always used for the same purpose:"
msgstr ""

#. leap/perl-Config-Grammar/summary
msgid "Grammar-Based, User-Friendly Config Parser"
msgstr ""

#. leap/perl-Config-Grammar/description
msgid ""
"Config::Grammar is a module to parse configuration files. The optional "
"second parameter to the parse() method can be used to specify the file "
"encoding to use for opening the file (see documentation for Perl's use open "
"pragma).\n"
"\n"
"The configuration may consist of multiple-level sections with assignments "
"and tabular data. The parsed data will be returned as a hash containing the "
"whole configuration. Config::Grammar uses a grammar that is supplied upon "
"creation of a Config::Grammar object to parse the configuration file and "
"return helpful error messages in case of syntax errors. Using the *makepod* "
"method you can generate documentation of the configuration file format.\n"
"\n"
"The *maketmpl* method can generate a template configuration file. If your "
"grammar contains regexp matches, the template will not be all that helpful "
"as Config::Grammar is not smart enough to give you sensible template data "
"based in regular expressions. The related function *maketmplmin* generates a "
"minimal configuration template without examples, regexps or comments and "
"thus allows an experienced user to fill in the configuration data more "
"efficiently."
msgstr ""

#. leap/perl-Config-INI/summary
msgid "Simple .ini-file format"
msgstr ""

#. leap/perl-Config-INI/description
msgid "simple .ini-file format"
msgstr ""

#. leap/perl-Config-IniFiles/summary
#, fuzzy
msgid "Module for Reading .Ini-Style Configuration Files"
msgstr "Un module pour lire les fichiers de configuration .ini"

#. leap/perl-Config-IniFiles/description
msgid ""
"Config::IniFiles provides a way to have readable configuration files outside "
"your Perl script. Configurations can be imported (inherited, stacked,...), "
"sections can be grouped, and settings can be accessed from a tied hash."
msgstr ""

#. leap/perl-Config-MVP/summary
msgid "Multivalue-property package-oriented configuration"
msgstr ""

#. leap/perl-Config-MVP/description
msgid ""
"MVP is a mechanism for loading configuration (or other information) for "
"libraries. It doesn't read a file or a database. It's a helper for things "
"that do.\n"
"\n"
"The idea is that you end up with a Config::MVP::Sequence object, and that "
"you can use that object to fully configure your library or application. The "
"sequence will contain a bunch of Config::MVP::Section objects, each of which "
"is meant to provide configuration for a part of your program. Most of these "
"sections will be directly related to a Perl library that you'll use as a "
"plugin or helper. Each section will have a name, and every name in the "
"sequence will be unique.\n"
"\n"
"This is a pretty abstract set of behaviors, so we'll provide some more "
"concrete examples that should help explain how things work."
msgstr ""

#. leap/perl-Config-MVP-Reader-INI/summary
msgid "An MVP config reader for .ini files"
msgstr ""

#. leap/perl-Config-MVP-Reader-INI/description
msgid ""
"Config::MVP::Reader::INI reads _.ini_ files containing MVP-style "
"configuration."
msgstr ""

#. leap/perl-Config-MySQL/summary
#, fuzzy
msgid "Read and write MySQL-style configuration files"
msgstr "Un module pour lire les fichiers de configuration .ini"

#. leap/perl-Config-MySQL/description
msgid ""
"This module extends Config::INI to support reading and writing MySQL-style "
"configuration files. Although deceptively similar to standard '.INI' files, "
"they can include bare boolean options with no value assignment and "
"additional features like '!include' and '!includedir'."
msgstr ""

#. leap/perl-Config-Simple/summary
#, fuzzy
msgid "Simple configuration file class"
msgstr "Afficher la configuration gamma"

#. leap/perl-Config-Simple/description
msgid ""
"Reading and writing configuration files is one of the most frequent tasks of "
"any software design. Config::Simple is the library that helps you with it.\n"
"\n"
"Config::Simple is a class representing configuration file object. It "
"supports several configuration file syntax and tries to identify the file "
"syntax automatically. Library supports parsing, updating and creating "
"configuration files."
msgstr ""

#. leap/perl-Config-Std/summary
msgid "Load and save configuration files in a standard format"
msgstr ""

#. leap/perl-Config-Std/description
msgid ""
"This module implements yet another damn configuration-file system.\n"
"\n"
"The configuration language is deliberately simple and limited, and the "
"module works hard to preserve as much information (section order, comments, "
"etc.) as possible when a configuration file is updated.\n"
"\n"
"The whole point of Config::Std is to encourage use of one standard layout "
"and syntax in config files. Damian says \"I could have gotten away with it, "
"I would have only allowed one separator. But it proved impossible to choose "
"between ':' and '=' (half the people I asked wanted one, half wanted the "
"other).\" Providing round-trip file re-write is the spoonful of sugar to "
"help the medicine go down. The supported syntax is within the general INI "
"file family\n"
"\n"
"See Chapter 19 of \"Perl Best Practices\" (O'Reilly, 2005) for more detail "
"on the rationale for this approach."
msgstr ""

#. leap/perl-Config-Tiny/summary
msgid "Read/Write .ini style files with as little code as possible"
msgstr ""

#. leap/perl-Config-Tiny/description
msgid ""
"'Config::Tiny' is a Perl class to read and write .ini style configuration "
"files with as little code as possible, reducing load time and memory "
"overhead.\n"
"\n"
"Most of the time it is accepted that Perl applications use a lot of memory "
"and modules.\n"
"\n"
"The '*::Tiny' family of modules is specifically intended to provide an "
"ultralight alternative to the standard modules.\n"
"\n"
"This module is primarily for reading human written files, and anything we "
"write shouldn't need to have documentation/comments. If you need something "
"with more power move up to Config::Simple, Config::General or one of the "
"many other 'Config::*' modules.\n"
"\n"
"Lastly, Config::Tiny does *not* preserve your comments, whitespace, or the "
"order of your config file.\n"
"\n"
"See Config::Tiny::Ordered (and possibly others) for the preservation of the "
"order of the entries in the file."
msgstr ""

#. leap/perl-Const-Fast/summary
#. leap/perl-Const-Fast/description
msgid "Facility for creating read-only scalars, arrays, and hashes"
msgstr ""

#. leap/perl-Context-Preserve/summary
msgid ""
"Run code after a subroutine call, preserving the context the subroutine [cut]"
msgstr ""

#. leap/perl-Context-Preserve/description
msgid ""
"Sometimes you need to call a function, get the results, act on the results, "
"then return the result of the function. This is painful because of contexts; "
"the original function can behave different if it's called in void, scalar, "
"or list context. You can ignore the various cases and just pick one, but "
"that's fragile. To do things right, you need to see which case you're being "
"called in, and then call the function in that context. This results in 3 "
"code paths, which is a pain to type in (and maintain).\n"
"\n"
"This module automates the process. You provide a coderef that is the "
"\"original function\", and another coderef to run after the original runs. "
"You can modify the return value (aliased to @_) here, and do whatever else "
"you need to do. 'wantarray' is correct inside both coderefs; in \"after\", "
"though, the return value is ignored and the value 'wantarray' returns is "
"related to the context that the original function was called in."
msgstr ""

#. leap/perl-Contextual-Return/summary
msgid "Create context-sensitive return values"
msgstr ""

#. leap/perl-Contextual-Return/description
msgid ""
"Usually, when you need to create a subroutine that returns different values "
"in different contexts (list, scalar, or void), you write something like:\n"
"\n"
"    sub get_server_status {         my ($server_ID) = @_;\n"
"\n"
"                 my %server_data = _ascertain_server_status($server_ID);\n"
"\n"
"                          if (wantarray()) {             return "
"@server_data{ qw(name uptime load users) };         }         if (defined "
"wantarray()) {             return $server_data{load};         }         if (!"
"defined wantarray()) {             carp 'Useless use of get_server_status() "
"in void context';             return;         }         else "
"{             croak q{Bad context! No biscuit!};         }     }\n"
"\n"
"That works okay, but the code could certainly be more readable. In its "
"simplest usage, this module makes that code more readable by providing three "
"subroutines--'LIST()', 'SCALAR()', 'VOID()'--that are true only when the "
"current subroutine is called in the corresponding context:\n"
"\n"
"    use Contextual::Return;\n"
"\n"
"    sub get_server_status {         my ($server_ID) = @_;\n"
"\n"
"                 my %server_data = _ascertain_server_status($server_ID);\n"
"\n"
"                          if (LIST)   { return @server_data{ qw(name uptime "
"load users) } }         if (SCALAR) { return "
"$server_data{load}                         }         if (VOID)   { print "
"\"$server_data{load}\\n\"                      }         else        { croak "
"q{Bad context! No biscuit!}                 }     }"
msgstr ""

#. leap/perl-Convert-ASN1/summary
#, fuzzy
msgid "Asn.1 Encode/Decode Library"
msgstr "Utilitaires pour le système de fichiers ext2"

#. leap/perl-Convert-ASN1/description
msgid ""
"Convert::ASN1 encodes and decodes ASN.1 data structures using BER/DER rules."
msgstr ""

#. leap/perl-Convert-BER/summary
msgid "ASN.1 Basic Encoding Rules"
msgstr ""

#. leap/perl-Convert-BER/description
msgid ""
"Convert::BER is a Perl object class implementation for encoding and decoding "
"objects as described by ITU-T standard X.209 (ASN.1) using Basic Encoding "
"Rules (BER).\n"
"\n"
"WARNING this module is no longer supported, See Convert::ASN1"
msgstr ""

#. leap/perl-Convert-BinHex/summary
msgid "Extract Data From Macintosh Binhex Files"
msgstr ""

#. leap/perl-Convert-BinHex/description
msgid ""
"*BinHex* is a format used by Macintosh for transporting Mac files safely "
"through electronic mail, as short-lined, 7-bit, semi-compressed data "
"streams. Ths module provides a means of converting those data streams back "
"into into binary data."
msgstr ""

#. leap/perl-Convert-TNEF/summary
#, fuzzy
msgid "Perl module to read TNEF files"
msgstr "Module perl pour lire les fichier TNEF"

#. leap/perl-Convert-TNEF/description
msgid ""
" TNEF stands for Transport Neutral Encapsulation Format, and if you've  ever "
"been unfortunate enough to receive one of these files as an email  "
"attachment, you may want to use this module.\n"
"\n"
" read() takes as its first argument any file handle open  for reading. The "
"optional second argument is a hash reference  which contains one or more of "
"the following keys:\n"
"\n"
" output_dir - Path for storing TNEF attribute data kept in files  (default: "
"current directory).\n"
"\n"
" output_prefix - File prefix for TNEF attribute data kept in files  "
"(default: 'tnef').\n"
"\n"
" output_to_core - TNEF attribute data will be saved in core memory unless  "
"it is greater than this many bytes (default: 4096). May also be set to  "
"'NONE' to keep all data in files, or 'ALL' to keep all data in core.\n"
"\n"
" buffer_size - Buffer size for reading in the TNEF file (default: 1024).\n"
"\n"
" debug - If true, outputs all sorts of info about what the read() function  "
"is reading, including the raw ascii data along with the data converted  to "
"hex (default: false).\n"
"\n"
" display_after_err - If debug is true and an error is encountered,  reads "
"and displays this many bytes of data following the error  (default: 32).\n"
"\n"
" debug_max_display - If debug is true then read and display at most  this "
"many bytes of data for each TNEF attribute (default: 1024).\n"
"\n"
" debug_max_line_size - If debug is true then at most this many bytes of  "
"data will be displayed on each line for each TNEF attribute  (default: 64).\n"
"\n"
" ignore_checksum - If true, will ignore checksum errors while parsing  data "
"(default: false).\n"
"\n"
" read() returns an object containing the TNEF 'attributes' read from the  "
"file and the data for those attributes. If all you want are the  "
"attachments, then this is mostly garbage, but if you're interested then  you "
"can see all the garbage by turning on debugging. If the garbage  proves "
"useful to you, then let me know how I can maybe make it more  useful.\n"
"\n"
" If an error is encountered, an undefined value is returned and the  package "
"variable $errstr is set to some helpful message.\n"
"\n"
" read_in() is a convienient front end for read() which takes a filename  "
"instead of a handle.\n"
"\n"
" read_ent() is another convient front end for read() which can take a  MIME::"
"Entity object (or any object with like methods, specifically  open(\"r\"), "
"read($buff,$num_bytes), and close ).\n"
"\n"
" purge() deletes any on-disk data that may be in the attachments of  the "
"TNEF object.\n"
"\n"
" message() returns the message portion of the tnef object, if any.  The "
"thing it returns is like an attachment, but its not an attachment.  For "
"instance, it more than likely does not have a name or any  attachment data.\n"
"\n"
" attachments() returns a list of the attachments that the given TNEF  object "
"contains. Returns a list ref if not called in array context.\n"
"\n"
" data() takes a TNEF attribute name, and returns a string value for that  "
"attribute for that attachment. Its your own problem if the string is too  "
"big for memory. If no argument is given, then the 'AttachData' attribute  is "
"assumed, which is probably the attachment data you're looking for.\n"
"\n"
" name() is the same as data(), except the attribute 'AttachTitle' is  the "
"default, which returns the 8 character + 3 character extension name  of the "
"attachment.\n"
"\n"
" longname() returns the long filename and extension of an attachment. This  "
"is embedded within a MAPI property of the 'Attachment' attribute data, so  "
"we attempt to extract the name out of that.\n"
"\n"
" size() takes an TNEF attribute name, and returns the size in bytes for  the "
"data for that attachment attribute.\n"
"\n"
" datahandle() is a method for attachments which takes a TNEF attribute  "
"name, and returns the data for that attribute as a handle which is  the same "
"as a MIME::Body handle.  See MIME::Body for all the applicable  methods. If "
"no argument is given, then 'AttachData' is assumed."
msgstr ""

#. leap/perl-Convert-UUlib/summary
#, fuzzy
msgid "Perl interface to the uulib library"
msgstr "Interface Perl vers la bibliothèque UULib"

#. leap/perl-Convert-UUlib/description
#, fuzzy
msgid "A Perl interface to the uulib library"
msgstr "Interface Perl vers la bibliothèque UULib"

#. leap/perl-Cookie-Baker/summary
msgid "Cookie string generator / parser"
msgstr ""

#. leap/perl-Cookie-Baker/description
msgid "Cookie::Baker provides simple cookie string generator and parser."
msgstr ""

#. leap/perl-Cpanel-JSON-XS/summary
msgid "CPanel fork of JSON::XS, fast and correct serializing"
msgstr ""

#. leap/perl-Cpanel-JSON-XS/description
msgid ""
"This module converts Perl data structures to JSON and vice versa. Its "
"primary goal is to be _correct_ and its secondary goal is to be _fast_. To "
"reach the latter goal it was written in C.\n"
"\n"
"As this is the n-th-something JSON module on CPAN, what was the reason to "
"write yet another JSON module? While it seems there are many JSON modules, "
"none of them correctly handle all corner cases, and in most cases their "
"maintainers are unresponsive, gone missing, or not listening to bug reports "
"for other reasons.\n"
"\n"
"See below for the cPanel fork.\n"
"\n"
"See MAPPING, below, on how Cpanel::JSON::XS maps perl values to JSON values "
"and vice versa."
msgstr ""

#. leap/perl-Crypt-Blowfish/summary
#, fuzzy
msgid "Perl Blowfish encryption module"
msgstr "Encryptage Blowfish"

#. leap/perl-Crypt-Blowfish/description
msgid ""
"Blowfish is capable of strong encryption and can use key sizes up to 56 "
"bytes (a 448 bit key). You're encouraged to take advantage of the full key "
"size to ensure the strongest encryption possible from this module."
msgstr ""

#. leap/perl-Crypt-CBC/summary
msgid "Encrypt Data with Cipher Block Chaining Mode"
msgstr ""

#. leap/perl-Crypt-CBC/description
msgid ""
"This module is a Perl-only implementation of the cryptographic cipher block "
"chaining mode (CBC). In combination with a block cipher such as DES or IDEA, "
"you can encrypt and decrypt messages of arbitrarily long length. The "
"encrypted messages are compatible with the encryption format used by the\n"
"*OpenSSL* package.\n"
"\n"
"To use this module, you will first create a Crypt::CBC cipher object with "
"new(). At the time of cipher creation, you specify an encryption key to use "
"and, optionally, a block encryption algorithm. You will then call the "
"start() method to initialize the encryption or decryption process, crypt() "
"to encrypt or decrypt one or more blocks of data, and lastly finish(), to "
"pad and encrypt the final block. For your convenience, you can call the "
"encrypt() and decrypt() methods to operate on a whole data value at once."
msgstr ""

#. leap/perl-Crypt-DES/summary
#, fuzzy
msgid "Perl DES encryption module"
msgstr "Outil de chiffrement"

#. leap/perl-Crypt-DES/description
msgid ""
"The module implements the Crypt::CBC interface, which has the following "
"methods \n"
"* blocksize   =item keysize   =item encrypt   =item decrypt"
msgstr ""

#. leap/perl-Crypt-DH-GMP/summary
msgid "Crypt::DH Using GMP Directly"
msgstr ""

#. leap/perl-Crypt-DH-GMP/description
msgid ""
"Crypt::DH::GMP is a (somewhat) portable replacement to Crypt::DH, "
"implemented mostly in C."
msgstr ""

#. leap/perl-Crypt-Eksblowfish/summary
msgid "The Eksblowfish Block Cipher"
msgstr ""

#. leap/perl-Crypt-Eksblowfish/description
msgid ""
"An object of this type encapsulates a keyed instance of the Eksblowfish "
"block cipher, ready to encrypt and decrypt.\n"
"\n"
"Eksblowfish is a variant of the Blowfish cipher, modified to make the key "
"setup very expensive. (\"Eks\" stands for \"expensive key schedule\".) This "
"doesn't make it significantly cryptographically stronger, but is intended to "
"hinder brute-force attacks. It also makes it unsuitable for any application "
"requiring key agility. It was designed by Niels Provos and David Mazieres "
"for password hashing in OpenBSD. See the Crypt::Eksblowfish::Bcrypt manpage "
"for the hash algorithm. See the Crypt::Eksblowfish::Blowfish manpage for the "
"unmodified Blowfish cipher.\n"
"\n"
"Eksblowfish is a parameterised (family-keyed) cipher. It takes a cost "
"parameter that controls how expensive the key scheduling is. It also takes a "
"family key, known as the \"salt\". Cost and salt parameters together define "
"a cipher family. Within each family, a key determines an encryption function "
"in the usual way. See the Crypt::Eksblowfish::Family manpage for a way to "
"encapsulate an Eksblowfish cipher family."
msgstr ""

#. leap/perl-Crypt-MySQL/summary
msgid "Emulate the MySQL PASSWORD() function"
msgstr ""

#. leap/perl-Crypt-MySQL/description
msgid ""
"Crypt::MySQL emulates MySQL PASSWORD() SQL function, without libmysqlclient. "
"You can compare encrypted passwords, without real MySQL environment."
msgstr ""

#. leap/perl-Crypt-OpenSSL-Bignum/summary
msgid "OpenSSL's multiprecision integer arithmetic"
msgstr ""

#. leap/perl-Crypt-OpenSSL-Bignum/description
msgid ""
"Crypt::OpenSSL::Bignum provides access to OpenSSL multiprecision integer "
"arithmetic libraries. Presently, many though not all of the arithmetic "
"operations that OpenSSL provides are exposed to perl. In addition, this "
"module can be used to provide access to bignum values produced by other "
"OpenSSL modules, such as key parameters from Crypt::OpenSSL::RSA.\n"
"\n"
"_NOTE_: Many of the methods in this package can croak, so use eval, or Error."
"pm's try/catch mechanism to capture errors."
msgstr ""

#. leap/perl-Crypt-OpenSSL-Guess/summary
msgid "Guess OpenSSL include path"
msgstr ""

#. leap/perl-Crypt-OpenSSL-Guess/description
msgid ""
"Crypt::OpenSSL::Guess provides helpers to guess OpenSSL include path on any "
"platforms.\n"
"\n"
"Often macOS's homebrew OpenSSL cause a problem on installation due to "
"include path is not added. Some CPAN module provides to modify include path "
"with configure-args, but Carton or Module::CPANfile is not supported to pass "
"configure-args to each modules. Crypt::OpenSSL::* modules should use it on "
"your Makefile.PL.\n"
"\n"
"This module resolves the include path by Net::SSLeay's workaround. Original "
"code is taken from 'inc/Module/Install/PRIVATE/Net/SSLeay.pm' by Net::SSLeay."
msgstr ""

#. leap/perl-Crypt-OpenSSL-RSA/summary
msgid "RSA encoding and decoding, using the openSSL libraries"
msgstr ""

#. leap/perl-Crypt-OpenSSL-RSA/description
msgid ""
"Crypt::OpenSSL::RSA is an XS perl module designed to provide basic RSA "
"functionality.  It does this by providing a glue to the RSA functions in the "
"OpenSSL library."
msgstr ""

#. leap/perl-Crypt-OpenSSL-Random/summary
msgid "Routines for accessing the OpenSSL pseudo-random number generator"
msgstr ""

#. leap/perl-Crypt-OpenSSL-Random/description
msgid ""
"Crypt::OpenSSL::Random provides the ability to seed and query the OpenSSL "
"library's pseudo-random number generator."
msgstr ""

#. leap/perl-Crypt-PasswdMD5/summary
msgid "Provide interoperable MD5-based crypt() functions"
msgstr ""

#. leap/perl-Crypt-PasswdMD5/description
msgid ""
"'apache_md5_crypt()' provides a function compatible with Apache's '."
"htpasswd' files. This was contributed by Bryan Hart <bryan@eai.com>. This "
"function is exported by default.\n"
"\n"
"The 'unix_md5_crypt()' provides a crypt()-compatible interface to the rather "
"new MD5-based crypt() function found in modern operating systems. It's based "
"on the implementation found on FreeBSD 2.2.[56]-RELEASE. This function is "
"also exported by default.\n"
"\n"
"For both functions, if a salt value is not supplied, a random salt will be "
"generated, using the function random_md5_salt(). This function is not "
"exported by default."
msgstr ""

#. leap/perl-Crypt-RC4/summary
#, fuzzy
msgid "Perl implementation of the RC4 encryption algorithm"
msgstr "Implémentation du démon d'identification RFC1413"

#. leap/perl-Crypt-RC4/description
msgid ""
"A simple implementation of the RC4 algorithm, developed by RSA Security, "
"Inc. Here is the description from RSA's website:\n"
"\n"
"RC4 is a stream cipher designed by Rivest for RSA Data Security (now RSA "
"Security). It is a variable key-size stream cipher with byte-oriented "
"operations. The algorithm is based on the use of a random permutation. "
"Analysis shows that the period of the cipher is overwhelmingly likely to be "
"greater than 10100. Eight to sixteen machine operations are required per "
"output byte, and the cipher can be expected to run very quickly in software. "
"Independent analysts have scrutinized the algorithm and it is considered "
"secure."
msgstr ""

#. leap/perl-Crypt-Rijndael/summary
msgid "Crypt::CBC compliant Rijndael encryption module"
msgstr ""

#. leap/perl-Crypt-Rijndael/description
msgid ""
"This module implements the Rijndael cipher, which has just been selected as "
"the Advanced Encryption Standard. \n"
"* keysize\n"
"\n"
"  Returns the keysize, which is 32 (bytes). The Rijndael cipher actually   "
"supports keylengths of 16, 24 or 32 bytes, but there is no way to   "
"communicate this to 'Crypt::CBC'. \n"
"* blocksize\n"
"\n"
"  The blocksize for Rijndael is 16 bytes (128 bits), although the "
"algorithm   actually supports any blocksize that is any multiple of our "
"bytes. 128   bits, is however, the AES-specified block size, so this is all "
"we   support. \n"
"* $cipher = Crypt::Rijndael->new( $key [, $mode] )\n"
"\n"
"  Create a new 'Crypt::Rijndael' cipher object with the given key (which   "
"must be 128, 192 or 256 bits long). The additional '$mode' argument is   the "
"encryption mode, either 'MODE_ECB' (electronic codebook mode, the   "
"default), 'MODE_CBC' (cipher block chaining, the same that 'Crypt::CBC'   "
"does), 'MODE_CFB' (128-bit cipher feedback), 'MODE_OFB' (128-bit output   "
"feedback), or 'MODE_CTR' (counter mode).\n"
"\n"
"  ECB mode is very insecure (read a book on cryptography if you don't know   "
"why!), so you should probably use CBC mode. \n"
"* $cipher->set_iv($iv)\n"
"\n"
"  This allows you to change the initial value vector used by the chaining   "
"modes. It is not relevant for ECB mode. \n"
"* $cipher->encrypt($data)\n"
"\n"
"  Encrypt data. The size of '$data' must be a multiple of 'blocksize' (16   "
"bytes), otherwise this function will croak. Apart from that, it can be of   "
"(almost) any length. \n"
"* $cipher->decrypt($data)\n"
"\n"
"  Decrypts '$data'."
msgstr ""

#. leap/perl-Crypt-Rot13/summary
#, fuzzy
msgid "Rot13 (Caesar) encryption for perl"
msgstr "Encryptage Blowfish"

#. leap/perl-Crypt-Rot13/description
#, fuzzy
msgid "This package provides ROT13 Algorithm (Caesar) as a Perl module."
msgstr ""
"Samba est une suite de programmes qui fonctionnent en collaboration pour "
"permettre aux clients l'accès aux fichiers Unix et aux imprimantes par le "
"biais du protocole SMB (Server Message Block).\n"
"\n"
"Dans la pratique, cela signifie que l'on peut établir une communication "
"entre les lecteurs et imprimantes Unix et les lecteurs et imprimantes de "
"clients Lan Manager, de clients Windows for Workgroups 3.11, de clients "
"Windows'95, de clients Windows NT et de clients OS/2. Ce paquet fournit "
"également un programme client Unix permettant aux utilisateurs Unix "
"d'accéder aux lecteurs et imprimantes de n'importe quel serveur SMB au moyen "
"d'une interface similaire à l'interface FTP.\n"
"\n"
"Samba inclult les programmes et fichiers suivants:\n"
"\n"
"* smbd, le serveur SMB. Il gère les connexions à partir du client.\n"
"\n"
"* nmbd, le serveur de noms Netbios. Il aide les clients à localiser les "
"serveurs.\n"
"\n"
"* smbclient, le programme client sous Unix.\n"
"\n"
"* smbrun, un petit programme qui aide le serveur à faire tourner des "
"programmes externes.\n"
"\n"
"* testprns, un programme permettant de tester l'accès d'un serveur aux "
"imprimantes.\n"
"\n"
"* testparm, un programme permettant de vérifier si le fichier de "
"configuration Samba est correct.\n"
"\n"
"* smb.conf, le fichier de configuration Samba\n"
"\n"
"* smbprint, un script qui permet à un hôte Unix d'imprimer sur un serveur "
"SMB au moyen de smbclient.\n"
"\n"
" Les programmes sont fournis avec le texte source complet et sont soumis à "
"la GPL.\n"
"\n"
" Samba s'attend à trouver son fichier de configuration sous /etc/samba/smb."
"conf. Vous trouverez des exemples pour le fichier de configuration sous /usr/"
"share/doc/packages/samba/examples."

#. leap/perl-Crypt-SSLeay/summary
#, fuzzy
msgid "OpenSSL support for LWP"
msgstr "Support de ASM pour bsh2."

#. leap/perl-Crypt-SSLeay/description
msgid ""
"This Perl module provides support for the HTTPS protocol under LWP, to allow "
"an LWP::UserAgent object to perform GET, HEAD, and POST requests over "
"encrypted socket connections. Please see LWP for more information on POST "
"requests.\n"
"\n"
"The 'Crypt::SSLeay' package provides 'Net::SSL', which, if requested, is "
"loaded by 'LWP::Protocol::https' for https requests and provides the "
"necessary SSL glue."
msgstr ""

#. leap/perl-Crypt-SaltedHash/summary
#, fuzzy
msgid "Perl interface to functions that assist in working"
msgstr "Interface Perl vers la bibliothèque UULib"

#. leap/perl-Crypt-SaltedHash/description
msgid ""
"The 'Crypt::SaltedHash' module provides an object oriented interface to "
"create salted (or seeded) hashes of clear text data. The original "
"formalization of this concept comes from RFC-3112 and is extended by the use "
"of different digital agorithms."
msgstr ""

#. leap/perl-Crypt-SmbHash/summary
msgid "perl module Crypt::SmbHash"
msgstr ""

#. leap/perl-Crypt-SmbHash/description
msgid ""
"This module provides functions to generate LM/NT hashes as used by Samba"
msgstr ""

#. leap/perl-Crypt-UnixCrypt_XS/summary
#, fuzzy
msgid "Perl Xs Interface for a Portable Traditional"
msgstr "Interface Perl vers DNS Resolver"

#. leap/perl-Crypt-UnixCrypt_XS/description
msgid ""
"This module implements the DES-based Unix _crypt_ function. For those who "
"need to construct non-standard variants of _crypt_, the various building "
"blocks used in _crypt_ are also supplied separately."
msgstr ""

#. leap/perl-CryptX/summary
#, fuzzy
msgid "Cryptographic toolkit"
msgstr "Outil d'archivage pour KDE"

#. leap/perl-CryptX/description
msgid ""
"Perl modules providing a cryptography based on at https://github.com/libtom/"
"libtomcrypt library. \n"
"* * Symmetric ciphers - see Crypt::Cipher and related modules\n"
"\n"
"Crypt::Cipher::AES, Crypt::Cipher::Anubis, Crypt::Cipher::Blowfish, Crypt::"
"Cipher::Camellia, Crypt::Cipher::CAST5, Crypt::Cipher::DES, Crypt::Cipher::"
"DES_EDE, Crypt::Cipher::IDEA, Crypt::Cipher::KASUMI, Crypt::Cipher::Khazad, "
"Crypt::Cipher::MULTI2, Crypt::Cipher::Noekeon, Crypt::Cipher::RC2, Crypt::"
"Cipher::RC5, Crypt::Cipher::RC6, Crypt::Cipher::SAFERP, Crypt::Cipher::"
"SAFER_K128, Crypt::Cipher::SAFER_K64, Crypt::Cipher::SAFER_SK128, Crypt::"
"Cipher::SAFER_SK64, Crypt::Cipher::SEED, Crypt::Cipher::Serpent, Crypt::"
"Cipher::Skipjack, Crypt::Cipher::Twofish, Crypt::Cipher::XTEA \n"
"* * Block cipher modes\n"
"\n"
"Crypt::Mode::CBC, Crypt::Mode::CFB, Crypt::Mode::CTR, Crypt::Mode::ECB, "
"Crypt::Mode::OFB \n"
"* * Stream ciphers\n"
"\n"
"Crypt::Stream::RC4, Crypt::Stream::ChaCha, Crypt::Stream::Salsa20, Crypt::"
"Stream::Sober128, Crypt::Stream::Sosemanuk, Crypt::Stream::Rabbit \n"
"* * Authenticated encryption modes\n"
"\n"
"Crypt::AuthEnc::CCM, Crypt::AuthEnc::EAX, Crypt::AuthEnc::GCM, Crypt::"
"AuthEnc::OCB, Crypt::AuthEnc::ChaCha20Poly1305 \n"
"* * Hash Functions - see Crypt::Digest and related modules\n"
"\n"
"Crypt::Digest::BLAKE2b_160, Crypt::Digest::BLAKE2b_256, Crypt::Digest::"
"BLAKE2b_384, Crypt::Digest::BLAKE2b_512, Crypt::Digest::BLAKE2s_128, Crypt::"
"Digest::BLAKE2s_160, Crypt::Digest::BLAKE2s_224, Crypt::Digest::BLAKE2s_256, "
"Crypt::Digest::CHAES, Crypt::Digest::MD2, Crypt::Digest::MD4, Crypt::Digest::"
"MD5, Crypt::Digest::RIPEMD128, Crypt::Digest::RIPEMD160, Crypt::Digest::"
"RIPEMD256, Crypt::Digest::RIPEMD320, Crypt::Digest::SHA1, Crypt::Digest::"
"SHA224, Crypt::Digest::SHA256, Crypt::Digest::SHA384, Crypt::Digest::SHA512, "
"Crypt::Digest::SHA512_224, Crypt::Digest::SHA512_256, Crypt::Digest::"
"Tiger192, Crypt::Digest::Whirlpool, Crypt::Digest::Keccak224, Crypt::Digest::"
"Keccak256, Crypt::Digest::Keccak384, Crypt::Digest::Keccak512, Crypt::"
"Digest::SHA3_224, Crypt::Digest::SHA3_256, Crypt::Digest::SHA3_384, Crypt::"
"Digest::SHA3_512, Crypt::Digest::SHAKE \n"
"* * Checksums\n"
"\n"
"Crypt::Checksum::Adler32, Crypt::Checksum::CRC32 \n"
"* * Message Authentication Codes\n"
"\n"
"Crypt::Mac::BLAKE2b, Crypt::Mac::BLAKE2s, Crypt::Mac::F9, Crypt::Mac::HMAC, "
"Crypt::Mac::OMAC, Crypt::Mac::Pelican, Crypt::Mac::PMAC, Crypt::Mac::XCBC, "
"Crypt::Mac::Poly1305 \n"
"* * Public key cryptography\n"
"\n"
"Crypt::PK::RSA, Crypt::PK::DSA, Crypt::PK::ECC, Crypt::PK::DH, Crypt::PK::"
"Ed25519, Crypt::PK::X25519 \n"
"* * Cryptographically secure random number generators - see Crypt::PRNG "
"and   related modules\n"
"\n"
"Crypt::PRNG::Fortuna, Crypt::PRNG::Yarrow, Crypt::PRNG::RC4, Crypt::PRNG::"
"Sober128, Crypt::PRNG::ChaCha20 \n"
"* * Key derivation functions - PBKDF1, PBKDF2 and HKDF\n"
"\n"
"Crypt::KeyDerivation \n"
"* * Other handy functions related to cryptography\n"
"\n"
"Crypt::Misc"
msgstr ""

#. leap/perl-Curses/summary
msgid "Terminal screen handling and optimization"
msgstr ""

#. leap/perl-Curses/description
msgid ""
"'Curses' is the interface between Perl and your system's curses(3) library. "
"For descriptions on the usage of a given function, variable, or constant, "
"consult your system's documentation, as such information invariably varies "
"(:-) between different curses(3) libraries and operating systems. This "
"document describes the interface itself, and assumes that you already know "
"how your system's curses(3) library works."
msgstr ""

#. leap/perl-CursesWidgets/summary
#, fuzzy
msgid "CursesWidgets Perl module"
msgstr "Modules Palm pilote perl"

#. leap/perl-CursesWidgets/description
msgid ""
"NOTE:  This is **NOT** backwards compatible with the pre-1.99 "
"versions.        This is entirely OO-based, hence any older scripts relying "
"on the        old versions will need to be rewritten."
msgstr ""

#. leap/perl-Cwd-Guard/summary
msgid "Temporary changing working directory (chdir)"
msgstr ""

#. leap/perl-Cwd-Guard/description
msgid ""
"CORE::chdir Cwd:: Guard can change the current directory (chdir) using a "
"limited scope."
msgstr ""

#. leap/perl-DBD-CSV/summary
#, fuzzy
msgid "DBI driver for CSV files"
msgstr "Pilote ODBC pour PostgreSQL"

#. leap/perl-DBD-CSV/description
#, fuzzy
msgid ""
"The DBD::CSV module is yet another driver for the DBI (Database independent "
"interface for Perl). This one is based on the SQL \"engine\" SQL::Statement "
"and the abstract DBI driver DBD::File and implements access to so-called CSV "
"files (Comma Separated Values). Such files are often used for exporting MS "
"Access and MS Excel data.\n"
"\n"
"See DBI for details on DBI, SQL::Statement for details on SQL::Statement and "
"DBD::File for details on the base class DBD::File."
msgstr "BDI drivers pour les fichiers CSV"

#. leap/perl-DBD-ODBC/summary
#. leap/perl-DBD-ODBC/description
#, fuzzy
msgid "ODBC Driver for DBI"
msgstr "Pilote ODBC pour PostgreSQL"

#. leap/perl-DBD-Pg/summary
#, fuzzy
msgid "PostgreSQL database driver for the DBI module"
msgstr "Thème d'icône pour OpenOffice.org"

#. leap/perl-DBD-Pg/description
msgid ""
"DBD::Pg is a Perl module that works with the DBI module to provide access to "
"PostgreSQL databases."
msgstr ""

#. leap/perl-DBD-SQLite/summary
msgid "Self-contained RDBMS in a DBI Driver"
msgstr ""

#. leap/perl-DBD-SQLite/description
msgid ""
"SQLite is a public domain file-based relational database engine that you can "
"find at https://www.sqlite.org/. \n"
"*DBD::SQLite* is a Perl DBI driver for SQLite, that includes the entire "
"thing in the distribution. So in order to get a fast transaction capable "
"RDBMS working for your perl project you simply have to install this module, "
"and *nothing* else.\n"
"\n"
"SQLite supports the following features: \n"
"* Implements a large subset of SQL92\n"
"\n"
"See https://www.sqlite.org/lang.html for details. \n"
"* A complete DB in a single disk file\n"
"\n"
"Everything for your database is stored in a single disk file, making it "
"easier to move things around than with DBD::CSV. \n"
"* Atomic commit and rollback\n"
"\n"
"Yes, *DBD::SQLite* is small and light, but it supports full transactions! \n"
"* Extensible\n"
"\n"
"User-defined aggregate or regular functions can be registered with the SQL "
"parser.\n"
"\n"
"There's lots more to it, so please refer to the docs on the SQLite web page, "
"listed above, for SQL details. Also refer to DBI for details on how to use "
"DBI itself. The API works like every DBI module does. However, currently "
"many statement attributes are not implemented or are limited by the typeless "
"nature of the SQLite database."
msgstr ""

#. leap/perl-DBD-XBase/summary
msgid "Reads and writes XBase (dbf) files, includes DBI support"
msgstr ""

#. leap/perl-DBD-XBase/description
msgid ""
"DBI compliant driver for module XBase. Please refer to DBI(3) documentation "
"for how to actually use the module. In the *connect* call, specify the "
"directory containing the dbf files (and other, memo, etc.) as the third part "
"of the connect string. It defaults to the current directory.\n"
"\n"
"Note that with dbf, there is no database server that the driver would talk "
"to. This DBD::XBase calls methods from XBase.pm module to read and write the "
"files on the disk directly, so any limitations and features of XBase.pm "
"apply to DBD::XBase as well. DBD::XBase basically adds SQL, DBI compliant "
"interface to XBase.pm.\n"
"\n"
"The DBD::XBase doesn't make use of index files at the moment. If you really "
"need indexed access, check XBase(3) for notes about support for variour "
"index types."
msgstr ""

#. leap/perl-DBD-mysql/summary
#, fuzzy
msgid "MySQL driver for the Perl5 Database Interface (DBI)"
msgstr "Interface de bases de données Perl de Tim Bunce"

#. leap/perl-DBD-mysql/description
msgid ""
"*DBD::mysql* is the Perl5 Database Interface driver for the MySQL database. "
"In other words: DBD::mysql is an interface between the Perl programming "
"language and the MySQL programming API that comes with the MySQL relational "
"database management system. Most functions provided by this programming API "
"are supported. Some rarely used functions are missing, mainly because no-one "
"ever requested them. :-)"
msgstr ""

#. leap/perl-DBI/summary
msgid "Database independent interface for Perl"
msgstr ""

#. leap/perl-DBI/description
msgid ""
"The DBI is a database access module for the Perl programming language. It "
"defines a set of methods, variables, and conventions that provide a "
"consistent database interface, independent of the actual database being "
"used.\n"
"\n"
"It is important to remember that the DBI is just an interface. The DBI is a "
"layer of \"glue\" between an application and one or more database _driver_ "
"modules. It is the driver modules which do most of the real work. The DBI "
"provides a standard interface and framework for the drivers to operate "
"within.\n"
"\n"
"This document often uses terms like _references_, _objects_, _methods_. If "
"you're not familiar with those terms then it would be a good idea to read at "
"least the following perl manuals first: perlreftut, perldsc, perllol, and "
"perlboot."
msgstr ""

#. leap/perl-DBICx-TestDatabase/summary
msgid "Create a Temporary Database From a Dbix::Class::Schema"
msgstr ""

#. leap/perl-DBICx-TestDatabase/description
msgid ""
"This module creates a temporary SQLite database, deploys your DBIC schema, "
"and then connects to it. This lets you easily test your DBIC schema. Since "
"you have a fresh database for every test, you don't have to worry about "
"cleaning up after your tests, ordering of tests affecting failure, etc."
msgstr ""

#. leap/perl-DBIx-Class/summary
msgid "Extensible and flexible object <-> relational mapper"
msgstr ""

#. leap/perl-DBIx-Class/description
msgid ""
"This is an SQL to OO mapper with an object API inspired by Class::DBI (with "
"a compatibility layer as a springboard for porting) and a resultset API that "
"allows abstract encapsulation of database operations. It aims to make "
"representing queries in your code as perl-ish as possible while still "
"providing access to as many of the capabilities of the database as possible, "
"including retrieving related records from multiple tables in a single query, "
"'JOIN', 'LEFT JOIN', 'COUNT', 'DISTINCT', 'GROUP BY', 'ORDER BY' and "
"'HAVING' support.\n"
"\n"
"DBIx::Class can handle multi-column primary and foreign keys, complex "
"queries and database-level paging, and does its best to only query the "
"database in order to return something you've directly asked for. If a "
"resultset is used as an iterator it only fetches rows off the statement "
"handle as requested in order to minimise memory usage. It has auto-increment "
"support for SQLite, MySQL, PostgreSQL, Oracle, SQL Server and DB2 and is "
"known to be used in production on at least the first four, and is fork- and "
"thread-safe out of the box (although your DBD may not be).\n"
"\n"
"This project is still under rapid development, so large new features may be "
"marked *experimental* - such APIs are still usable but may have edge bugs. "
"Failing test cases are _always_ welcome and point releases are put out "
"rapidly as bugs are found and fixed.\n"
"\n"
"We do our best to maintain full backwards compatibility for published APIs, "
"since DBIx::Class is used in production in many organisations, and even "
"backwards incompatible changes to non-published APIs will be fixed if "
"they're reported and doing so doesn't cost the codebase anything.\n"
"\n"
"The test suite is quite substantial, and several developer releases are "
"generally made to CPAN before the branch for the next release is merged back "
"to trunk for a major release."
msgstr ""

#. leap/perl-DBIx-Class-DeploymentHandler/summary
msgid "Extensible DBIx::Class deployment"
msgstr ""

#. leap/perl-DBIx-Class-DeploymentHandler/description
msgid ""
"'DBIx::Class::DeploymentHandler' is, as its name suggests, a tool for "
"deploying and upgrading databases with DBIx::Class. It is designed to be "
"much more flexible than DBIx::Class::Schema::Versioned, hence the use of "
"Moose and lots of roles.\n"
"\n"
"'DBIx::Class::DeploymentHandler' itself is just a recommended set of roles "
"that we think will not only work well for everyone, but will also yield the "
"best overall mileage. Each role it uses has its own nuances and "
"documentation, so I won't describe all of them here, but here are a few of "
"the major benefits over how DBIx::Class::Schema::Versioned worked (and DBIx::"
"Class::DeploymentHandler::Deprecated tries to maintain compatibility with):\n"
"\n"
"  * Downgrades in addition to upgrades.\n"
"\n"
"  * Multiple sql files files per upgrade/downgrade/install.\n"
"\n"
"  * Perl scripts allowed for upgrade/downgrade/install.\n"
"\n"
"  * Just one set of files needed for upgrade, unlike before where one might "
"need to generate 'factorial(scalar @versions)', which is just silly.\n"
"\n"
"  * And much, much more!\n"
"\n"
"That's really just a taste of some of the differences. Check out each role "
"for all the details."
msgstr ""

#. leap/perl-DBIx-Class-DynamicDefault/summary
msgid "Automatically set and update fields"
msgstr ""

#. leap/perl-DBIx-Class-DynamicDefault/description
msgid "Automatically set and update fields with values calculated at runtime."
msgstr ""

#. leap/perl-DBIx-Class-Fixtures/summary
msgid "Dump data and repopulate a database using rules"
msgstr ""

#. leap/perl-DBIx-Class-Fixtures/description
msgid ""
"Dump fixtures from source database to filesystem then import to another "
"database (with same schema) at any time. Use as a constant dataset for "
"running tests against or for populating development databases when "
"impractical to use production clones. Describe fixture set using relations "
"and conditions based on your DBIx::Class schema."
msgstr ""

#. leap/perl-DBIx-Class-InflateColumn-FS/summary
msgid "Inflate/deflate columns to Path::Class::File objects"
msgstr ""

#. leap/perl-DBIx-Class-InflateColumn-FS/description
msgid ""
"Provides inflation to a Path::Class::File object allowing file system "
"storage of BLOBS.\n"
"\n"
"The storage path is specified with 'fs_column_path'. Each file receives a "
"unique name, so the storage for all FS columns can share the same path.\n"
"\n"
"Within the path specified by 'fs_column_path', files are stored in sub-"
"directories based on the first 2 characters of the unique file names. Up to "
"256 sub-directories will be created, as needed. Override '_fs_column_dirs' "
"in a derived class to change this behavior.\n"
"\n"
"'fs_new_on_update' will create a new file name if the file has been updated."
msgstr ""

#. leap/perl-DBIx-Class-IntrospectableM2M/summary
msgid "Introspect many-to-many shortcuts"
msgstr ""

#. leap/perl-DBIx-Class-IntrospectableM2M/description
msgid ""
"Because the many-to-many relationships are not real relationships, they can "
"not be introspected with DBIx::Class. Many-to-many relationships are "
"actually just a collection of convenience methods installed to bridge two "
"relationships. This DBIx::Class component can be used to store all relevant "
"information about these non-relationships so they can later be introspected "
"and examined."
msgstr ""

#. leap/perl-DBIx-Class-OptimisticLocking/summary
#. leap/perl-DBIx-Class-OptimisticLocking/description
msgid "Optimistic locking support for DBIx::Class"
msgstr ""

#. leap/perl-DBIx-Class-Schema-Config/summary
#, fuzzy
msgid "Credential Management for DBIx::Class"
msgstr "Gestion de catalogues"

#. leap/perl-DBIx-Class-Schema-Config/description
msgid ""
"DBIx::Class::Schema::Config is a subclass of DBIx::Class::Schema that allows "
"the loading of credentials & configuration from a file. The actual code "
"itself would only need to know about the name used in the configuration "
"file. This aims to make it simpler for operations teams to manage database "
"credentials.\n"
"\n"
"A simple tutorial that compliments this documentation and explains "
"converting an existing DBIx::Class Schema to use this software to manage "
"credentials can be found at http://www.symkat.com/credential-management-in-"
"dbix-class"
msgstr ""

#. leap/perl-DBIx-Class-Schema-Loader/summary
msgid "Create a DBIx::Class::Schema based on a database"
msgstr ""

#. leap/perl-DBIx-Class-Schema-Loader/description
msgid ""
"DBIx::Class::Schema::Loader automates the definition of a DBIx::Class::"
"Schema by scanning database table definitions and setting up the columns, "
"primary keys, unique constraints and relationships.\n"
"\n"
"See dbicdump for the 'dbicdump' utility.\n"
"\n"
"DBIx::Class::Schema::Loader currently supports only the DBI storage type. It "
"has explicit support for DBD::Pg, DBD::mysql, DBD::DB2, DBD::Firebird, DBD::"
"InterBase, DBD::Informix, DBD::SQLAnywhere, DBD::SQLite, DBD::Sybase (for "
"Sybase ASE and MSSSQL), DBD::ODBC (for MSSQL, MSAccess, Firebird and SQL "
"Anywhere) DBD::ADO (for MSSQL and MSAccess) and DBD::Oracle. Other DBI "
"drivers may function to a greater or lesser degree with this loader, "
"depending on how much of the DBI spec they implement, and how standard their "
"implementation is.\n"
"\n"
"Patches to make other DBDs work correctly welcome.\n"
"\n"
"See DBIx::Class::Schema::Loader::DBI::Writing for notes on writing your own "
"vendor-specific subclass for an unsupported DBD driver.\n"
"\n"
"This module requires DBIx::Class 0.08127 or later, and obsoletes the older "
"DBIx::Class::Loader.\n"
"\n"
"See DBIx::Class::Schema::Loader::Base for available options."
msgstr ""

#. leap/perl-DBIx-Class-UUIDColumns/summary
msgid "Implicit uuid columns"
msgstr ""

#. leap/perl-DBIx-Class-UUIDColumns/description
msgid ""
"This the DBIx::Class manpage component resembles the behaviour of the Class::"
"DBI::UUID manpage, to make some columns implicitly created as uuid.\n"
"\n"
"When loaded, 'UUIDColumns' will search for a suitable uuid generation module "
"from the following list of supported modules:\n"
"\n"
"  Data::UUID   APR::UUID*   UUID   Win32::Guidgen   Win32API::GUID\n"
"\n"
"If no supporting module can be found, an exception will be thrown. \n"
"*APR::UUID will not be loaded under OpenBSD due to an as yet unidentified XS "
"issue.\n"
"\n"
"If you would like to use a specific module, you can set the /uuid_class "
"manpage:\n"
"\n"
"  __PACKAGE__->uuid_class('::Data::UUID');   __PACKAGE__-"
">uuid_class('MyUUIDGenerator');"
msgstr ""

#. leap/perl-DBIx-Connector/summary
#. leap/perl-DBIx-Connector/description
msgid "Fast, safe DBI connection and transaction management"
msgstr ""

#. leap/perl-DBIx-ContextualFetch/summary
msgid "Add contextual fetches to DBI"
msgstr ""

#. leap/perl-DBIx-ContextualFetch/description
msgid ""
"It always struck me odd that DBI didn't take much advantage of Perl's "
"context sensitivity. DBIx::ContextualFetch redefines some of the various "
"fetch methods to fix this oversight. It also adds a few new methods for "
"convenience (though not necessarily efficiency)."
msgstr ""

#. leap/perl-DBIx-Simple/summary
msgid "Very complete easy-to-use OO interface to DBI"
msgstr ""

#. leap/perl-DBIx-Simple/description
msgid ""
"DBIx::Simple provides a simplified interface to DBI, Perl's powerful "
"database module.\n"
"\n"
"This module is aimed at rapid development and easy maintenance. Query "
"preparation and execution are combined in a single method, the result object "
"(which is a wrapper around the statement handle) provides easy row-by-row "
"and slurping methods.\n"
"\n"
"The 'query' method returns either a result object, or a dummy object. The "
"dummy object returns undef (or an empty list) for all methods and when used "
"in boolean context, is false. The dummy object lets you postpone (or skip) "
"error checking, but it also makes immediate error checking simply '$db-"
">query(...) or die $db->error'."
msgstr ""

#. leap/perl-DBIx-Transaction/summary
msgid "Allow transactions to be nested in DBI"
msgstr ""

#. leap/perl-DBIx-Transaction/description
msgid ""
"DBIx::Transaction is a wrapper around DBI that helps you manage your "
"database transactions.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Tyler \"Crackerjack\" MacDonald <japh@crackerjack.net>"
msgstr ""

#. leap/perl-DBM-Deep/summary
msgid "Pure Perl Multi-Level Hash/Array Dbm That Supports Transactions"
msgstr ""

#. leap/perl-DBM-Deep/description
msgid ""
"A unique flat-file database module, written in pure perl. True multi-level "
"hash/array support (unlike MLDBM, which is faked), hybrid OO / tie() "
"interface, cross-platform FTPable files, ACID transactions, and is quite "
"fast. Can handle millions of keys and unlimited levels without significant "
"slow-down. Written from the ground-up in pure perl -- this is NOT a wrapper "
"around a C-based DBM. Out-of-the-box compatibility with Unix, Mac OS X and "
"Windows."
msgstr ""

#. leap/perl-Daemon-Generic/summary
msgid "Framework to Provide Start/Stop/Reload for a Daemon"
msgstr ""

#. leap/perl-Daemon-Generic/description
msgid ""
"Daemon::Generic provides a framework for starting, stopping, reconfiguring "
"daemon-like programs. The framework provides for standard commands that work "
"for as init.d files and as apachectl-like commands.\n"
"\n"
"Programs that use Daemon::Generic subclass Daemon::Generic to override its "
"behavior. Almost everything that Genric::Daemon does can be overridden as "
"needed."
msgstr ""

#. leap/perl-Data-Clone/summary
msgid "Polymorphic data cloning"
msgstr ""

#. leap/perl-Data-Clone/description
msgid ""
"'Data::Clone' does data cloning, i.e. copies things recursively. This is "
"smart so that it works with not only non-blessed references, but also with "
"blessed references (i.e. objects). When 'clone()' finds an object, it calls "
"a 'clone' method of the object if the object has a 'clone', otherwise it "
"makes a surface copy of the object. That is, this module does polymorphic "
"data cloning.\n"
"\n"
"Although there are several modules on CPAN which can clone data, this module "
"has a different cloning policy from almost all of them. See Cloning policy "
"and Comparison to other cloning modules for details."
msgstr ""

#. leap/perl-Data-Compare/summary
msgid "Compare Perl Data Structures"
msgstr ""

#. leap/perl-Data-Compare/description
msgid ""
"Compare two perl data structures recursively. Returns 0 if the structures "
"differ, else returns 1.\n"
"\n"
"A few data types are treated as special cases: \n"
"* Scalar::Properties objects\n"
"\n"
"  This has been moved into a plugin, although functionality remains the   "
"same as with the previous version. Full documentation is in the   Data::"
"Compare::Plugins::Scalar::Properties manpage. \n"
"* Compiled regular expressions, eg qr/foo/\n"
"\n"
"  These are stringified before comparison, so the following will match:\n"
"\n"
"      $r = qr/abc/i;       $s = qr/abc/i;       Compare($r, $s);\n"
"\n"
"  and the following won't, despite them matching *exactly* the same text:\n"
"\n"
"      $r = qr/abc/i;       $s = qr/[aA][bB][cC]/;       Compare($r, $s);\n"
"\n"
"  Sorry, that's the best we can do. \n"
"* CODE and GLOB references\n"
"\n"
"  These are assumed not to match unless the references are identical - ie,   "
"both are references to the same thing.\n"
"\n"
"You may also customise how we compare structures by supplying options in a "
"hashref as a third parameter to the 'Compare()' function. This is not yet "
"available through the OO-ish interface. These options will be in force for "
"the *whole* of your comparison, so will apply to structures that are lurking "
"deep down in your data as well as at the top level, so beware! \n"
"* ignore_hash_keys\n"
"\n"
"  an arrayref of strings. When comparing two hashes, any keys mentioned in   "
"this list will be ignored."
msgstr ""

#. leap/perl-Data-Dump/summary
msgid "Pretty printing of data structures"
msgstr ""

#. leap/perl-Data-Dump/description
msgid ""
"This module provide a few functions that traverse their argument and "
"produces a string as its result. The string contains Perl code that, when "
"'eval'ed, produces a deep copy of the original arguments.\n"
"\n"
"The main feature of the module is that it strives to produce output that is "
"easy to read. Example:\n"
"\n"
"    @a = (1, [2, 3], {4 => 5});     dump(@a);\n"
"\n"
"Produces:\n"
"\n"
"    \"(1, [2, 3], { 4 => 5 })\"\n"
"\n"
"If you dump just a little data, it is output on a single line. If you dump "
"data that is more complex or there is a lot of it, line breaks are "
"automatically added to keep it easy to read.\n"
"\n"
"The following functions are provided (only the dd* functions are exported by "
"default): \n"
"* dump( ... ) \n"
"* pp( ... )\n"
"\n"
"  Returns a string containing a Perl expression. If you pass this string "
"to   Perl's built-in eval() function it should return a copy of the "
"arguments   you passed to dump().\n"
"\n"
"  If you call the function with multiple arguments then the output will be   "
"wrapped in parenthesis \"( ..., ... )\". If you call the function with a   "
"single argument the output will not have the wrapping. If you call the   "
"function with a single scalar (non-reference) argument it will just   return "
"the scalar quoted if needed, but never break it into multiple   lines. If "
"you pass multiple arguments or references to arrays of hashes   then the "
"return value might contain line breaks to format it for easier   reading. "
"The returned string will never be \"\\n\" terminated, even if   contains "
"multiple lines. This allows code like this to place the   semicolon in the "
"expected place:\n"
"\n"
"     print '$obj = ', dump($obj), \";\\n\";\n"
"\n"
"  If dump() is called in void context, then the dump is printed on STDERR   "
"and then \"\\n\" terminated. You might find this useful for quick debug   "
"printouts, but the dd*() functions might be better alternatives for this.\n"
"\n"
"  There is no difference between dump() and pp(), except that dump() "
"shares   its name with a not-so-useful perl builtin. Because of this some "
"might   want to avoid using that name. \n"
"* quote( $string )\n"
"\n"
"  Returns a quoted version of the provided string.\n"
"\n"
"  It differs from 'dump($string)' in that it will quote even numbers and   "
"not try to come up with clever expressions that might shorten the output.   "
"If a non-scalar argument is provided then it's just stringified instead   of "
"traversed. \n"
"* dd( ... ) \n"
"* ddx( ... )\n"
"\n"
"  These functions will call dump() on their argument and print the result   "
"to STDOUT (actually, it's the currently selected output handle, but   STDOUT "
"is the default for that).\n"
"\n"
"  The difference between them is only that ddx() will prefix the lines it   "
"prints with \"# \" and mark the first line with the file and line number   "
"where it was called. This is meant to be useful for debug printouts of   "
"state within programs. \n"
"* dumpf( ..., \\&filter )\n"
"\n"
"  Short hand for calling the dump_filtered() function of the   Data::Dump::"
"Filtered manpage. This works like dump(), but the last   argument should be "
"a filter callback function. As objects are visited the   filter callback is "
"invoked and it can modify how the objects are dumped."
msgstr ""

#. leap/perl-Data-Dump-Streamer/summary
msgid "Accurately serialize a data structure as Perl code"
msgstr ""

#. leap/perl-Data-Dump-Streamer/description
msgid ""
"Given a list of scalars or reference variables, writes out their contents in "
"perl syntax. The references can also be objects. The contents of each "
"variable is output using the least number of Perl statements as convenient, "
"usually only one. Self-referential structures, closures, and objects are "
"output correctly.\n"
"\n"
"The return value can be evaled to get back an identical copy of the original "
"reference structure. In some cases this may require the use of utility subs "
"that Data::Dump::Streamer will optionally export.\n"
"\n"
"This module is very similar in concept to the core module Data::Dumper, with "
"the major differences being that this module is designed to output to a "
"stream instead of constructing its output in memory (trading speed for "
"memory), and that the traversal over the data structure is effectively "
"breadth first versus the depth first traversal done by the others.\n"
"\n"
"In fact the data structure is scanned twice, first in breadth first mode to "
"perform structural analysis, and then in depth first mode to actually "
"produce the output, but obeying the depth relationships of the first pass."
msgstr ""

#. leap/perl-Data-Dumper-Concise/summary
msgid "Less indentation and newlines plus sub deparsing"
msgstr ""

#. leap/perl-Data-Dumper-Concise/description
msgid ""
"This module always exports a single function, Dumper, which can be called "
"with an array of values to dump those values.\n"
"\n"
"It exists, fundamentally, as a convenient way to reproduce a set of Dumper "
"options that we've found ourselves using across large numbers of "
"applications, primarily for debugging output.\n"
"\n"
"The principle guiding theme is \"all the concision you can get while still "
"having a useful dump and not doing anything cleverer than setting Data::"
"Dumper options\" - it's been pointed out to us that Data::Dump::Streamer can "
"produce shorter output with less lines of code. We know. This is simpler and "
"we've never seen it segfault. But for complex/weird structures, it generally "
"rocks. You should use it as well, when Concise is underkill. We do.\n"
"\n"
"Why is deparsing on when the aim is concision? Because you often want to "
"know what subroutine refs you have when debugging and because if you were "
"planning to eval this back in you probably wanted to remove subrefs first "
"and add them back in a custom way anyway. Note that this -does- force using "
"the pure perl Dumper rather than the XS one, but I've never in my life seen "
"Data::Dumper show up in a profile so \"who cares?\"."
msgstr ""

#. leap/perl-Data-Entropy/summary
msgid "Entropy (randomness) management"
msgstr ""

#. leap/perl-Data-Entropy/description
msgid ""
"This module maintains a concept of a current selection of entropy source. "
"Algorithms that require entropy, such as those in the Data::Entropy::"
"Algorithms manpage, can use the source nominated by this module, avoiding "
"the need for entropy source objects to be explicitly passed around. This is "
"convenient because usually one entropy source will be used for an entire "
"program run and so an explicit entropy source parameter would rarely vary. "
"There is also a default entropy source, avoiding the need to explicitly "
"configure a source at all.\n"
"\n"
"If nothing is done to set a source then it defaults to the use of Rijndael "
"(AES) in counter mode (see the Data::Entropy::RawSource::CryptCounter "
"manpage and the Crypt::Rijndael manpage), keyed using Perl's built-in 'rand' "
"function. This gives a data stream that looks like concentrated entropy, but "
"really only has at most the entropy of the 'rand' seed. Within a single run "
"it is cryptographically difficult to detect the correlation between parts of "
"the pseudo-entropy stream. If more true entropy is required then it is "
"necessary to configure a different entropy source."
msgstr ""

#. leap/perl-Data-Float/summary
msgid "Details of the Floating Point Data Type"
msgstr ""

#. leap/perl-Data-Float/description
msgid ""
"This module is about the native floating point numerical data type. A "
"floating point number is one of the types of datum that can appear in the "
"numeric part of a Perl scalar. This module supplies constants describing the "
"native floating point type, classification functions, and functions to "
"manipulate floating point values at a low level."
msgstr ""

#. leap/perl-Data-Hexify/summary
#, fuzzy
msgid "Perl extension for hexdumping arbitrary data"
msgstr "Interface Perl pour objets URI"

#. leap/perl-Data-Hexify/description
msgid ""
"This module exports one subroutine: 'Hexify'.\n"
"\n"
"'Hexify' formats arbitrary (possible binary) data into a format suitable for "
"hex dumps in the style of 'xd' or 'hexl'.\n"
"\n"
"The first, or only, argument to 'Hexify' contains the data, or a reference "
"to the data, to be hexified. Hexify will return a string that prints as "
"follows:\n"
"\n"
"  0000: 70 61 63 6b 61 67 65 20 44 61 74 61 3a 3a 48 65  package Data::He   "
"0010: 78 69 66 79 3b 0a 0a 75 73 65 20 35 2e 30 30 36  xify;..use 5.006\n"
"\n"
"and so on. At the left is the (hexadecimal) index of the data, then a number "
"of hex bytes, followed by the chunk of data with unprintables replaced by "
"periods.\n"
"\n"
"The optional second argument to 'Hexify' must be a hash or a hash reference, "
"containing values for any of the following parameters: \n"
"* first\n"
"\n"
"  The first byte of the data to be processed. Default is to start from the   "
"beginning of the data. \n"
"* length\n"
"\n"
"  The number of bytes to be processed. Default is to proceed all data. \n"
"* chunk\n"
"\n"
"  The number of bytes to be processed per line of output. Default is 16. \n"
"* group\n"
"\n"
"  The number of bytes to be grouped together. Default is 1 (no grouping).   "
"If used, it must be a divisor of the chunk size. \n"
"* duplicates\n"
"\n"
"  When set, duplicate lines of output are suppressed and replaced by a   "
"single line reading '**SAME**'.\n"
"\n"
"  Duplicate suppression is enabled by default. \n"
"* showdata\n"
"\n"
"  A reference to a subroutine that is used to produce a printable string   "
"from a chunk of data. By default, a subroutine is used that replaces   "
"unwanted bytes by periods.\n"
"\n"
"  The subroutine gets the chunk of data passed as argument, and should   "
"return a printable string of at most 'chunksize' characters. \n"
"* align\n"
"\n"
"  Align the result to 'chunksize' bytes. This is relevant only when   "
"processing data not from the beginning. For example, when 'first' is 10,   "
"the result would become:\n"
"\n"
"    0000:                ...    74 61 3a 3a 48 65            ta::He     "
"0010: 78 69 66 79 3b ... 65 20 35 2e 30 30 36  xify;..use 5.006     ... and "
"so on ...\n"
"\n"
"  Alignment is on by default. Without alignment, the result would be:\n"
"\n"
"    000a: 74 61 3a 3a 48 ... 79 3b 0a 0a 75 73 65  ta::Hexify;..use     "
"001a: 20 35 2e 30 30 ... 73 65 20 73 74 72 69   5.006;.use stri     ... and "
"so on ... \n"
"* start\n"
"\n"
"  Pretend that the data started at this byte (while in reality it starts "
"at   byte 'first'). The above example, with 'start => 0', becomes:\n"
"\n"
"    0000: 74 61 3a 3a 48 ... 79 3b 0a 0a 75 73 65  ta::Hexify;..use     "
"0010: 20 35 2e 30 30 ... 73 65 20 73 74 72 69   5.006;.use stri     ... and "
"so on ..."
msgstr ""

#. leap/perl-Data-Hierarchy/summary
#, fuzzy
msgid "Handle data in a hierarchical structure"
msgstr "Gestion hiérarchique des notices"

#. leap/perl-Data-Hierarchy/description
msgid ""
"the Data::Hierarchy manpage provides a simple interface for manipulating "
"inheritable data attached to a hierarchical environment (like a "
"filesystem).\n"
"\n"
"One use of the Data::Hierarchy manpage is to allow an application to "
"annotate paths in a real filesystem in a single compact data structure. "
"However, the hierarchy does not actually need to correspond to an actual "
"filesystem.\n"
"\n"
"Paths in a hierarchy are referred to in a Unix-like syntax; '\"/\"' is the "
"root \"directory\". (You can specify a different separator character than "
"the slash when you construct a Data::Hierarchy object.) With the exception "
"of the root path, paths should never contain trailing slashes. You can "
"associate properties, which are arbitrary name/value pairs, with any path. "
"(Properties cannot contain the undefined value.) By default, properties are "
"inherited by child paths: thus, if you store some data at '/some/path':\n"
"\n"
"    $tree->store('/some/path', {color => 'red'});\n"
"\n"
"you can fetch it again at a '/some/path/below/that':\n"
"\n"
"    print $tree->get('/some/path/below/that')->{'color'};     \n"
"\n"
"On the other hand, properties whose names begin with dots are uninherited, "
"or \"sticky\":\n"
"\n"
"    $tree->store('/some/path', {'.color' => 'blue'});     print $tree->get('/"
"some/path')->{'.color'};            # prints blue     print $tree->get('/"
"some/path/below/that')->{'.color'}; # undefined\n"
"\n"
"Note that you do not need to (and in fact, cannot) explicitly add \"files\" "
"or \"directories\" to the hierarchy; you simply add and delete properties to "
"paths."
msgstr ""

#. leap/perl-Data-Integer/summary
msgid "Details of the Native Integer Data Type"
msgstr ""

#. leap/perl-Data-Integer/description
msgid ""
"This module is about the native integer numerical data type. A native "
"integer is one of the types of datum that can appear in the numeric part of "
"a Perl scalar. This module supplies constants describing the native integer "
"type.\n"
"\n"
"There are actually two native integer representations: signed and unsigned. "
"Both are handled by this module."
msgstr ""

#. leap/perl-Data-ObjectDriver/summary
msgid "Simple, transparent data interface, with caching"
msgstr ""

#. leap/perl-Data-ObjectDriver/description
msgid ""
"_Data::ObjectDriver_ is an object relational mapper, meaning that it maps "
"object-oriented design concepts onto a relational database.\n"
"\n"
"It's inspired by, and descended from, the _MT::ObjectDriver_ classes in Six "
"Apart's Movable Type and TypePad weblogging products. But it adds in caching "
"and partitioning layers, allowing you to spread data across multiple "
"physical databases, without your application code needing to know where the "
"data is stored."
msgstr ""

#. leap/perl-Data-OptList/summary
msgid "Parse and validate simple name/value option pairs"
msgstr ""

#. leap/perl-Data-OptList/description
msgid ""
"Hashes are great for storing named data, but if you want more than one entry "
"for a name, you have to use a list of pairs. Even then, this is really "
"boring to write:\n"
"\n"
"  $values = [     foo => undef,     bar => undef,     baz => undef,     xyz "
"=> { ... },   ];\n"
"\n"
"Just look at all those undefs! Don't worry, we can get rid of those:\n"
"\n"
"  $values = [     map { $_ => undef } qw(foo bar baz),     xyz => "
"{ ... },   ];\n"
"\n"
"Aaaauuugh! We've saved a little typing, but now it requires thought to read, "
"and thinking is even worse than typing... and it's got a bug! It looked "
"right, didn't it? Well, the 'xyz => { ... }' gets consumed by the map, and "
"we don't get the data we wanted.\n"
"\n"
"With Data::OptList, you can do this instead:\n"
"\n"
"  $values = Data::OptList::mkopt([     qw(foo bar baz),     xyz => "
"{ ... },   ]);\n"
"\n"
"This works by assuming that any defined scalar is a name and any reference "
"following a name is its value."
msgstr ""

#. leap/perl-Data-Page/summary
msgid "Help when paging through sets of results"
msgstr ""

#. leap/perl-Data-Page/description
msgid ""
"When searching through large amounts of data, it is often the case that a "
"result set is returned that is larger than we want to display on one page. "
"This results in wanting to page through various pages of data. The maths "
"behind this is unfortunately fiddly, hence this module.\n"
"\n"
"The main concept is that you pass in the number of total entries, the number "
"of entries per page, and the current page number. You can then call methods "
"to find out how many pages of information there are, and what number the "
"first and last entries on the current page really are.\n"
"\n"
"For example, say we wished to page through the integers from 1 to 100 with "
"20 entries per page. The first page would consist of 1-20, the second page "
"from 21-40, the third page from 41-60, the fourth page from 61-80 and the "
"fifth page from 81-100. This module would help you work this out."
msgstr ""

#. leap/perl-Data-Peek/summary
#, fuzzy
msgid "Collection of low-level debug facilities"
msgstr "Les HOWTO du Projet de Documentation Linux (en anglais, ASCII)"

#. leap/perl-Data-Peek/description
msgid ""
"Data::Peek started off as 'DDumper' being a wrapper module over Data::"
"Dumper, but grew out to be a set of low-level data introspection utilities "
"that no other module provided yet, using the lowest level of the perl "
"internals API as possible."
msgstr ""

#. leap/perl-Data-Perl/summary
msgid "Base classes wrapping fundamental Perl data types"
msgstr ""

#. leap/perl-Data-Perl/description
msgid ""
"Data::Perl is a collection of classes that wrap fundamental data types that "
"exist in Perl. These classes and methods as they exist today are an attempt "
"to mirror functionality provided by Moose's Native Traits. One important "
"thing to note is all classes currently do no validation on constructor "
"input.\n"
"\n"
"Data::Perl is a container class for the following classes: \n"
"* * Data::Perl::Collection::Hash \n"
"* * Data::Perl::Collection::Array \n"
"* * Data::Perl::String \n"
"* * Data::Perl::Number \n"
"* * Data::Perl::Counter \n"
"* * Data::Perl::Bool \n"
"* * Data::Perl::Code"
msgstr ""

#. leap/perl-Data-Printer/summary
msgid ""
"Colored & full-featured pretty print of Perl data structures and objects"
msgstr ""

#. leap/perl-Data-Printer/description
msgid ""
"The ever-popular Data::Dumper is a fantastic tool, meant to stringify data "
"structures in a way they are suitable for being \"eval\"'ed back in. The "
"thing is, a lot of people keep using it (and similar ones, like Data::Dump) "
"to print data structures and objects on screen for inspection and debugging, "
"and while you _can_ use those modules for that, it doesn't mean you "
"_should_.\n"
"\n"
"This is where Data::Printer comes in. It is meant to do one thing and one "
"thing only:\n"
"\n"
"_format Perl variables and objects to be inspected by a human_\n"
"\n"
"If you want to serialize/store/restore Perl data structures, this module "
"will NOT help you. Try Storable, Data::Dumper, JSON, or whatever. CPAN is "
"full of such solutions!\n"
"\n"
"Whenever you type 'use Data::Printer' or 'use DDP', we export two functions "
"to your namespace:"
msgstr ""

#. leap/perl-Data-Random/summary
#, fuzzy
msgid "Perl module to generate random data"
msgstr "Module perl pour lire les fichier TNEF"

#. leap/perl-Data-Random/description
msgid "A module used to generate random data. Useful mostly for test programs."
msgstr ""

#. leap/perl-Data-Section/summary
msgid "Read Multiple Hunks of Data Out of Your Data Section"
msgstr ""

#. leap/perl-Data-Section/description
msgid ""
"Data::Section provides an easy way to access multiple named chunks of line-"
"oriented data in your module's DATA section. It was written to allow modules "
"to store their own templates, but probably has other uses."
msgstr ""

#. leap/perl-Data-Section-Simple/summary
msgid "Read data from __DATA__"
msgstr ""

#. leap/perl-Data-Section-Simple/description
msgid ""
"Data::Section::Simple is a simple module to extract data from '__DATA__' "
"section of the file."
msgstr ""

#. leap/perl-Data-ShowTable/summary
msgid "routines to display tabular data in several formats."
msgstr ""

#. leap/perl-Data-ShowTable/description
msgid ""
"The *ShowTable* module provides subroutines to display tabular data, "
"typially from a database, in nicely formatted columns, in several formats. "
"Its arguments can either be given in a fixed order, or, as a single, "
"anonymous hash-array.\n"
"\n"
"The output format for any one invocation can be one of four possible "
"styles: \n"
"* Box\n"
"\n"
"  A tabular format, with the column titles and the entire table surrounded   "
"by a \"box\" of \"'+'\", \"'-'\", and \"'|'\" characters. See the "
"\"ShowBoxTable\"   manpage for details. \n"
"* Table\n"
"\n"
"  A simple tabular format, with columns automatically aligned, with column   "
"titles. See the \"ShowSimpleTable\" manpage. \n"
"* List\n"
"\n"
"  A _list_ style, where columns of data are listed as a _name_:_value_   "
"pair, one pair per line, with rows being one or more column values,   "
"separated by an empty line. See the \"ShowListTable\" manpage. \n"
"* HTML\n"
"\n"
"  The data is output as an HTML _TABLE_, suitable for display through a   "
"_Web_-client. See the \"ShowHTMLTable\" manpage. Input can either be plain   "
"ASCII text, or text with embedded HTML elements, depending upon an   "
"argument or global parameter.\n"
"\n"
"The subroutines which perform these displays are listed below."
msgstr ""

#. leap/perl-Data-Structure-Util/summary
#, fuzzy
msgid "Change nature of data within a structure"
msgstr "Gestion hiérarchique des notices"

#. leap/perl-Data-Structure-Util/description
msgid ""
"'Data::Structure::Util' is a toolbox to manipulate the data inside a data "
"structure. It can process an entire tree and perform the operation requested "
"on each appropriate element.\n"
"\n"
"For example: It can transform all strings within a data structure to utf8 or "
"transform any utf8 string back to the default encoding. It can remove the "
"blessing on any reference. It can collect all the objects or detect if there "
"is a circular reference.\n"
"\n"
"It is written in C for decent speed."
msgstr ""

#. leap/perl-Data-Tumbler/summary
msgid "Dynamic generation of nested combinations of variants"
msgstr ""

#. leap/perl-Data-Tumbler/description
msgid ""
"NOTE: This is alpha code and liable to change while it and Test::"
"WriteVariants mature.\n"
"\n"
"The tumble() method calls a sequence of 'provider' code references each of "
"which returns a hash. The first provider is called and then, for each hash "
"item it returns, the tumble() method recurses to call the next provider.\n"
"\n"
"The recursion continues until there are no more providers to call, at which "
"point the consumer code reference is called. Effectively the providers "
"create a tree of combinations and the consumer is called at the leafs of the "
"tree.\n"
"\n"
"If a provider returns no items then that part of the tree is pruned. Further "
"providers, if any, are not called and the consumer is not called.\n"
"\n"
"During a call to tumble() three values are passed down through the tree and "
"into the consumer: path, context, and payload.\n"
"\n"
"The path and context are derived from the names and values of the hashes "
"returned by the providers. Typically the path define the current \"path\" "
"through the tree of combinations.\n"
"\n"
"The providers are passed the current path, context, and payload. The payload "
"is cloned at each level of recursion so that any changes made to it by "
"providers are only visible within the scope of the generated sub-tree.\n"
"\n"
"Note that although the example above shows the path, context and payload as "
"array references, the tumbler code makes no assumptions about them. They can "
"be any kinds of values.\n"
"\n"
"See Test::WriteVariants for a practical example use."
msgstr ""

#. leap/perl-Data-Uniqid/summary
#, fuzzy
msgid "Perl extension for simple genrating of unique id's"
msgstr "Interface Perl pour objets URI"

#. leap/perl-Data-Uniqid/description
msgid ""
"Data::Uniqid provides three simple routines for generating unique ids. These "
"ids are coded with a Base62 systen to make them short and handy (e.g. to use "
"it as part of a URL).\n"
"\n"
"  suinqid     genrates a very short id valid only for the localhost and with "
"a     liftime of 1 day\n"
"\n"
"  uniqid     generates a short id valid on the local host\n"
"\n"
"  luniqid     generates a long id valid everywhere and ever"
msgstr ""

#. leap/perl-Data-Util/summary
#, fuzzy
msgid "Selection of Utilities for Data and Data Types"
msgstr "Environnement de bureau KDE"

#. leap/perl-Data-Util/description
msgid ""
"This module provides utility functions for data and data types, including "
"functions for subroutines and symbol table hashes (stashes).\n"
"\n"
"This module makes for a pure Perl and XS implementation.\n"
"\n"
"However, if you want to use the full capacity of it, we recommend you to opt "
"for the XS backend.\n"
"\n"
"There are many benchmarks in the _DIST-DIR/benchmark/_ directory."
msgstr ""

#. leap/perl-Data-Validate-Domain/summary
msgid "Domain and host name validation"
msgstr ""

#. leap/perl-Data-Validate-Domain/description
msgid ""
"This module offers a few subroutines for validating domain and host names."
msgstr ""

#. leap/perl-Data-Validate-IP/summary
msgid "IPv4 and IPv6 validation methods"
msgstr ""

#. leap/perl-Data-Validate-IP/description
msgid ""
"This module provides a number IP address validation subs that both validate "
"and untaint their input. This includes both basic validation ('is_ipv4()' "
"and 'is_ipv6()') and special cases like checking whether an address belongs "
"to a specific network or whether an address is public or private (reserved)."
msgstr ""

#. leap/perl-Data-Visitor/summary
msgid "Visitor style traversal of Perl data structures"
msgstr ""

#. leap/perl-Data-Visitor/description
msgid ""
"This module is a simple visitor implementation for Perl values.\n"
"\n"
"It has a main dispatcher method, 'visit', which takes a single perl value "
"and then calls the methods appropriate for that value.\n"
"\n"
"It can recursively map (cloning as necessary) or just traverse most "
"structures, with support for per object behavior, circular structures, "
"visiting tied structures, and all ref types (hashes, arrays, scalars, code, "
"globs).\n"
"\n"
"Data::Visitor is meant to be subclassed, but also ships with a callback "
"driven subclass, Data::Visitor::Callback."
msgstr ""

#. leap/perl-Date-Calc/summary
#, fuzzy
msgid "Gregorian calendar date calculations"
msgstr "Module perl pour calculer des temps et des dates"

#. leap/perl-Date-Calc/description
msgid ""
"* *\n"
"\n"
"  'use Date::Calc qw( Days_in_Year Days_in_Month ... );' \n"
"* *"
msgstr ""

#. leap/perl-Date-Holidays-CZ/summary
msgid "Determine Czech holidays"
msgstr ""

#. leap/perl-Date-Holidays-CZ/description
msgid ""
"This module exports a single function named *holidays()* which returns a "
"list of Czech holidays in a given year."
msgstr ""

#. leap/perl-Date-Manip/summary
#, fuzzy
msgid "Date manipulation routines"
msgstr "Routines de manipulation de dates"

#. leap/perl-Date-Manip/description
msgid ""
"Date::Manip is a series of modules designed to make any common date/time "
"operation easy to do. Operations such as comparing two times, determining a "
"date a given amount of time from another, or parsing international times are "
"all easily done. It deals with time as it is used in the Gregorian calendar "
"(the one currently in use) with full support for time changes due to "
"daylight saving time.\n"
"\n"
"From the very beginning, the main focus of Date::Manip has been to be able "
"to do ANY desired date/time operation easily. Many other modules exist which "
"may do a subset of these operations quicker or more efficiently, but no "
"other module can do all of the operations available in Date::Manip.\n"
"\n"
"Date::Manip has functionality to work with several fundamental types of "
"data. \n"
"* *dates*\n"
"\n"
"The word date is used extensively here and is somewhat misleading. In Date::"
"Manip, a date consists of three pieces of information: a calendar date "
"(year, month, day), a time of day (hour, minute, second), and time zone "
"information. Calendar dates and times are fully handled. Time zones are "
"handled as well, but depending on how you use Date::Manip, there may be some "
"limitations as discussed below. \n"
"* *delta*\n"
"\n"
"A delta is an amount of time (i.e. the amount of time between two different "
"dates). Think of it as the duration of an event or the amount of time "
"between two dates.\n"
"\n"
"A delta refers only to an amount of time. It includes no information about a "
"starting or ending date/time. Most people will think of a delta as an amount "
"of time, but the term 'time' is already used so much in this module that I "
"didn't want to use it here in order to avoid confusion. \n"
"* *recurrence*\n"
"\n"
"A recurring event is something which occurs on a regular recurring basis. \n"
"* *holidays* and *events*\n"
"\n"
"Holidays and events are basically named dates or recurrences.\n"
"\n"
"Among other things, Date::Manip allow you to: \n"
"* ***\n"
"\n"
"Enter a date in practically any format you choose. \n"
"* ***\n"
"\n"
"Compare two dates, entered in widely different formats to determine which is "
"earlier. \n"
"* ***\n"
"\n"
"Extract any information you want from a date using a format string similar "
"to the Unix date command. \n"
"* ***\n"
"\n"
"Determine the amount of time between two dates, or add an amount of time (a "
"delta) to a date to get a second date. \n"
"* ***\n"
"\n"
"Work with dates with dates using international formats (foreign month names, "
"12/10/95 referring to October rather than December, etc.). \n"
"* ***\n"
"\n"
"Convert dates from one timezone to another. \n"
"* ***\n"
"\n"
"To find a list of dates where a recurring event happens.\n"
"\n"
"Each of these tasks is trivial (one or two lines at most) with this package."
msgstr ""

#. leap/perl-Date-Simple/summary
msgid "a simple date object"
msgstr ""

#. leap/perl-Date-Simple/description
msgid ""
"Dates are complex enough without times and timezones. This module may be "
"used to create simple date objects. It handles: \n"
"* Validation.\n"
"\n"
"  Reject 1999-02-29 but accept 2000-02-29. \n"
"* Interval arithmetic.\n"
"\n"
"  How many days were between two given dates? What date comes N days after   "
"today? \n"
"* Day-of-week calculation.\n"
"\n"
"  What day of the week is a given date? \n"
"* Transparent date formatting.\n"
"\n"
"  How should a date object be formatted.\n"
"\n"
"It does *not* deal with hours, minutes, seconds, and time zones.\n"
"\n"
"A date is uniquely identified by year, month, and day integers within valid "
"ranges. This module will not allow the creation of objects for invalid "
"dates. Attempting to create an invalid date will return undef. Month "
"numbering starts at 1 for January, unlike in C and Java. Years are 4-digit.\n"
"\n"
"Gregorian dates up to year 9999 are handled correctly, but we rely on Perl's "
"builtin 'localtime' function when the current date is requested. On some "
"platforms, 'localtime' may be vulnerable to rollovers such as the Unix "
"'time_t' wraparound of 18 January 2038.\n"
"\n"
"Overloading is used so you can compare or subtract two dates using standard "
"numeric operators such as '==', and the sum of a date object and an integer "
"is another date object.\n"
"\n"
"Date::Simple objects are immutable. After assigning '$date1' to '$date2', no "
"change to '$date1' can affect '$date2'. This means, for example, that there "
"is nothing like a 'set_year' operation, and '$date++' assigns a new object "
"to '$date'.\n"
"\n"
"This module contains various undocumented functions. They may not be "
"available on all platforms and are likely to change or disappear in future "
"releases. Please let the author know if you think any of them should be "
"public."
msgstr ""

#. leap/perl-Date-Tiny/summary
#. leap/perl-DateTime-Tiny/summary
msgid "Date Object, with As Little Code As Possible"
msgstr ""

#. leap/perl-Date-Tiny/description
msgid ""
"*Date::Tiny* is a member of the DateTime::Tiny suite of time modules.\n"
"\n"
"It implements an extremely lightweight object that represents a date, "
"without any time data."
msgstr ""

#. leap/perl-DateTime/summary
msgid "Date and Time Object for Perl"
msgstr ""

#. leap/perl-DateTime/description
msgid ""
"DateTime is a class for the representation of date/time combinations, and is "
"part of the Perl DateTime project. For details on this project please see "
"http://datetime.perl.org/. The DateTime site has a FAQ which may help answer "
"many \"how do I do X?\" questions. The FAQ is at http://datetime.perl.org/"
"wiki/datetime/page/FAQ.\n"
"\n"
"It represents the Gregorian calendar, extended backwards in time before its "
"creation (in 1582). This is sometimes known as the \"proleptic Gregorian "
"calendar\". In this calendar, the first day of the calendar (the epoch), is "
"the first day of year 1, which corresponds to the date which was "
"(incorrectly) believed to be the birth of Jesus Christ.\n"
"\n"
"The calendar represented does have a year 0, and in that way differs from "
"how dates are often written using \"BCE/CE\" or \"BC/AD\".\n"
"\n"
"For infinite datetimes, please see the DateTime::Infinite module."
msgstr ""

#. leap/perl-DateTime-Calendar-Julian/summary
msgid "Dates in the Julian calendar"
msgstr ""

#. leap/perl-DateTime-Calendar-Julian/description
msgid ""
"DateTime::Calendar::Julian implements the Julian Calendar. This module "
"implements all methods of DateTime; see the DateTime(3) manpage for all "
"methods."
msgstr ""

#. leap/perl-DateTime-Calendar-Mayan/summary
msgid "The Mayan Long Count, Haab, and Tzolkin calendars"
msgstr ""

#. leap/perl-DateTime-Calendar-Mayan/description
msgid ""
"An implementation of the Mayan Long Count, Haab, and Tzolkin calendars as "
"defined in \"Calendrical Calculations The Millennium Edition\". Supplemented "
"by \"Frequently Asked Questions about Calendars\".\n"
"\n"
"Author:\n"
"-------     Joshua Hoblitt <jhoblitt@cpan.org>"
msgstr ""

#. leap/perl-DateTime-Format-Builder/summary
msgid "Create DateTime parser classes and objects."
msgstr ""

#. leap/perl-DateTime-Format-Builder/description
msgid ""
"DateTime::Format::Builder creates DateTime parsers. Many string formats of "
"dates and times are simple and just require a basic regular expression to "
"extract the relevant information. Builder provides a simple way to do this "
"without writing reams of structural code.\n"
"\n"
"Builder provides a number of methods, most of which you'll never need, or at "
"least rarely need. They're provided more for exposing of the module's "
"innards to any subclasses, or for when you need to do something slightly "
"beyond what I expected.\n"
"\n"
"This creates the end methods. Coderefs die on bad parses, return 'DateTime' "
"objects on good parse."
msgstr ""

#. leap/perl-DateTime-Format-DateParse/summary
msgid "Parses Date::Parse compatible formats"
msgstr ""

#. leap/perl-DateTime-Format-DateParse/description
msgid ""
"This module is a compatibility wrapper around Date::Parse.\n"
"\n"
"  Author:\tJoshua Hoblitt (JHOBLITT) <jhoblitt@cpan.org>"
msgstr ""

#. leap/perl-DateTime-Format-Flexible/summary
msgid ""
"DateTime::Format::Flexible - Flexibly parse strings and turn them into D[cut]"
msgstr ""

#. leap/perl-DateTime-Format-Flexible/description
msgid ""
"If you have ever had to use a program that made you type in the date a "
"certain way and thought \"Why can't the computer just figure out what date I "
"wanted?\", this module is for you.\n"
"\n"
"_DateTime::Format::Flexible_ attempts to take any string you give it and "
"parse it into a DateTime object."
msgstr ""

#. leap/perl-DateTime-Format-ISO8601/summary
msgid "Parses ISO8601 formats"
msgstr ""

#. leap/perl-DateTime-Format-ISO8601/description
msgid ""
"Parses almost all ISO8601 date and time formats. ISO8601 time-intervals will "
"be supported in a later release."
msgstr ""

#. leap/perl-DateTime-Format-Mail/summary
msgid "Convert between DateTime and RFC2822/822 formats"
msgstr ""

#. leap/perl-DateTime-Format-Mail/description
msgid ""
"RFCs 2822 and 822 specify date formats to be used by email. This module "
"parses and emits such dates.\n"
"\n"
"RFC2822 (April 2001) introduces a slightly different format of date than "
"that used by RFC822 (August 1982). The main correction is that the preferred "
"format is more limited, and thus easier to parse programmatically.\n"
"\n"
"Despite the ease of generating and parsing perfectly valid RFC822 and "
"RFC2822 people still get it wrong. So this module provides four things for "
"those handling mail dates: \n"
"* 1\n"
"\n"
"A strict parser that will only accept RFC2822 dates, so you can see where "
"you're right. \n"
"* 2\n"
"\n"
"A strict formatter, so you can generate the right stuff to begin with. \n"
"* 3\n"
"\n"
"A _loose_ parser, so you can take the misbegotten output from other programs "
"and turn it into something useful. This includes various minor errors as "
"well as some somewhat more bizarre mistakes. The file _t/sample_dates_ in "
"this module's distribution should give you an idea of what's valid, while _t/"
"invalid.t_ should do the same for what's not. Those regarded as invalid are "
"just a bit *too* strange to allow. \n"
"* 4\n"
"\n"
"Interoperation with the rest of the DateTime suite. These are a collection "
"of modules to handle dates in a modern and accurate fashion. In particular, "
"they make it trivial to parse, manipulate and then format dates. Shifting "
"timezones is a doddle, and converting between formats is a cinch.\n"
"\n"
"As a future direction, I'm contemplating an even stricter parser that will "
"only accept dates with no obsolete elements."
msgstr ""

#. leap/perl-DateTime-Format-MySQL/summary
msgid "Parse and format MySQL dates and times"
msgstr ""

#. leap/perl-DateTime-Format-MySQL/description
msgid ""
"This module understands the formats used by MySQL for its DATE, DATETIME, "
"TIME, and TIMESTAMP data types. It can be used to parse these formats in "
"order to create DateTime objects, and it can take a DateTime object and "
"produce a string representing it in the MySQL format."
msgstr ""

#. leap/perl-DateTime-Format-Pg/summary
msgid "Parse and format PostgreSQL dates and times"
msgstr ""

#. leap/perl-DateTime-Format-Pg/description
msgid ""
"This module understands the formats used by PostgreSQL for its DATE, TIME, "
"TIMESTAMP, and INTERVAL data types. It can be used to parse these formats in "
"order to create 'DateTime' or 'DateTime::Duration' objects, and it can take "
"a 'DateTime' or 'DateTime::Duration' object and produce a string "
"representing it in a format accepted by PostgreSQL."
msgstr ""

#. leap/perl-DateTime-Format-SQLite/summary
msgid "Parse and format SQLite dates and times"
msgstr ""

#. leap/perl-DateTime-Format-SQLite/description
msgid ""
"This module understands the formats used by SQLite for its 'date', "
"'datetime' and 'time' functions. It can be used to parse these formats in "
"order to create the DateTime manpage objects, and it can take a DateTime "
"object and produce a timestring accepted by SQLite. \n"
"*NOTE:* SQLite does not have real date/time types but stores everything as "
"strings. This module deals with the date/time strings as understood/returned "
"by SQLite's 'date', 'time', 'datetime', 'julianday' and 'strftime' SQL "
"functions. You will usually want to store your dates in one of these formats."
msgstr ""

#. leap/perl-DateTime-Format-Strptime/summary
msgid "Parse and format strp and strf time patterns"
msgstr ""

#. leap/perl-DateTime-Format-Strptime/description
msgid ""
"This module implements most of 'strptime(3)', the POSIX function that is the "
"reverse of 'strftime(3)', for 'DateTime'. While 'strftime' takes a "
"'DateTime' and a pattern and returns a string, 'strptime' takes a string and "
"a pattern and returns the 'DateTime' object associated."
msgstr ""

#. leap/perl-DateTime-Format-W3CDTF/summary
msgid "Parse and format W3CDTF datetime strings"
msgstr ""

#. leap/perl-DateTime-Format-W3CDTF/description
msgid ""
"This module understands the W3CDTF date/time format, an ISO 8601 profile, "
"defined at http://www.w3.org/TR/NOTE-datetime. This format as the native "
"date format of RSS 1.0.\n"
"\n"
"It can be used to parse these formats in order to create the appropriate "
"objects."
msgstr ""

#. leap/perl-DateTime-Locale/summary
msgid "Localization support for DateTime.pm"
msgstr ""

#. leap/perl-DateTime-Locale/description
msgid ""
"DateTime::Locale is primarily a factory for the various locale subclasses. "
"It also provides some functions for getting information on all the available "
"locales.\n"
"\n"
"If you want to know what methods are available for locale objects, then "
"please read the 'DateTime::Locale::FromData' documentation."
msgstr ""

#. leap/perl-DateTime-TimeZone/summary
msgid "Time zone object base class and factory"
msgstr ""

#. leap/perl-DateTime-TimeZone/description
msgid ""
"This class is the base class for all time zone objects. A time zone is "
"represented internally as a set of observances, each of which describes the "
"offset from GMT for a given time period.\n"
"\n"
"Note that without the DateTime module, this module does not do much. It's "
"primary interface is through a DateTime object, and most users will not need "
"to directly use 'DateTime::TimeZone' methods."
msgstr ""

#. leap/perl-DateTime-Tiny/description
msgid ""
"*DateTime::Tiny* is a most prominent member of the DateTime::Tiny suite of "
"time modules.\n"
"\n"
"It implements an extremely lightweight object that represents a datetime."
msgstr ""

#. leap/perl-Debug-Trace/summary
#, fuzzy
msgid "Perl extension to trace subroutine calls"
msgstr "Interface Perl pour objets URI"

#. leap/perl-Debug-Trace/description
msgid ""
"Debug::Trace instruments subroutines to provide tracing information upon "
"every call and return.\n"
"\n"
"Using Debug::Trace does not require any changes to your sources. Most often, "
"it will be used from the command line:\n"
"\n"
"  perl -MDebug::Trace=foo,bar yourprogram.pl\n"
"\n"
"This will have your subroutines foo() and bar() printing call and return "
"information.\n"
"\n"
"Subroutine names may be fully qualified to denote subroutines in other "
"packages than the default main::.\n"
"\n"
"By default, the trace information is output using the standard warn() "
"function."
msgstr ""

#. leap/perl-Declare-Constraints-Simple/summary
msgid "Declarative Validation of Data Structures"
msgstr ""

#. leap/perl-Declare-Constraints-Simple/description
msgid ""
"The main purpose of this module is to provide an easy way to build a profile "
"to validate a data structure. It does this by giving you a set of "
"declarative keywords in the importing namespace."
msgstr ""

#. leap/perl-Devel-Caller/summary
#, fuzzy
msgid "meatier versions of C<caller>"
msgstr "Version KDE de xdialog"

#. leap/perl-Devel-Caller/description
msgid ""
"* caller_cv($level)\n"
"\n"
"  'caller_cv' gives you the coderef of the subroutine being invoked at the   "
"call frame indicated by the value of $level \n"
"* caller_args($level)\n"
"\n"
"  Returns the arguments passed into the caller at level $level \n"
"* caller_vars( $level, $names )   =item called_with($level, $names)\n"
"\n"
"  'called_with' returns a list of references to the original arguments to   "
"the subroutine at $level. if $names is true, the names of the variables   "
"will be returned instead\n"
"\n"
"  constants are returned as 'undef' in both cases \n"
"* called_as_method($level)\n"
"\n"
"  'called_as_method' returns true if the subroutine at $level was called "
"as   a method."
msgstr ""

#. leap/perl-Devel-CheckBin/summary
msgid "Check That a Command Is Available"
msgstr ""

#. leap/perl-Devel-CheckBin/description
msgid ""
"Devel::CheckBin is a perl module that checks whether a particular command is "
"available."
msgstr ""

#. leap/perl-Devel-CheckCompiler/summary
msgid "Check the compiler's availability"
msgstr ""

#. leap/perl-Devel-CheckCompiler/description
msgid "Devel::CheckCompiler is checker for compiler's availability."
msgstr ""

#. leap/perl-Devel-CheckLib/summary
msgid "Check That a Library Is Available"
msgstr ""

#. leap/perl-Devel-CheckLib/description
msgid ""
"Devel::CheckLib is a perl module that checks whether a particular C library "
"and its headers are available."
msgstr ""

#. leap/perl-Devel-CheckOS/summary
msgid "Check what OS we're running on"
msgstr ""

#. leap/perl-Devel-CheckOS/description
msgid ""
"A learned sage once wrote on IRC:\n"
"\n"
"   $^O is stupid and ugly, it wears its pants as a hat\n"
"\n"
"Devel::CheckOS provides a more friendly interface to $^O, and also lets you "
"check for various OS \"families\" such as \"Unix\", which includes things "
"like Linux, Solaris, AIX etc.\n"
"\n"
"It spares perl the embarrassment of wearing its pants on its head by "
"covering them with a splendid Fedora."
msgstr ""

#. leap/perl-Devel-Confess/summary
msgid "Include stack traces on all warnings and errors"
msgstr ""

#. leap/perl-Devel-Confess/description
msgid ""
"This module is meant as a debugging aid. It can be used to make a script "
"complain loudly with stack backtraces when 'warn()'ing or 'die()'ing. Unlike "
"other similar modules (e.g. Carp::Always), stack traces will also be "
"included when exception objects are thrown.\n"
"\n"
"The stack traces are generated using Carp, and will work for all types of "
"errors. Carp's 'carp' and 'croak' functions will also be made to include "
"stack traces.\n"
"\n"
"     $ perl -d:Confess -e 'sub f { die \"arghh\" }; sub g { f }; g'   arghh "
"at -e line 1.           main::f() called at -e line 1           main::g() "
"called at -e line 1\n"
"\n"
"     $ perl -d:Confess -w -e 'sub f { $a = shift; @a = @$a };' "
"\\                                         -e 'sub g { f(undef) }; g'   Use "
"of uninitialized value $a in array dereference at -e line 1.           main::"
"f(undef) called at -e line 2           main::g() called at -e line 2\n"
"\n"
"Internally, this is implemented with $SIG{__WARN__} and $SIG{__DIE__} "
"hooks.\n"
"\n"
"Stack traces are also included if raw non-object references are thrown.\n"
"\n"
"This module is compatible with all perl versions back to 5.6.2, without "
"additional prerequisites. It contains workarounds for a number of bugs in "
"the perl interpreter, some of which effect comparatively simpler modules, "
"like Carp::Always."
msgstr ""

#. leap/perl-Devel-CoreStack/summary
msgid "try to generate a stack dump from a core file"
msgstr ""

#. leap/perl-Devel-CoreStack/description
msgid ""
"This module attempts to generate a stack dump from a core file by locating "
"the best available debugger (if any) and running it with the appropriate "
"arguments and command script.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Alligator Descartes <descarte@hermetica.com>     Tim Bunce"
msgstr ""

#. leap/perl-Devel-Cover/summary
msgid "Code coverage metrics for Perl"
msgstr ""

#. leap/perl-Devel-Cover/description
msgid ""
"This module provides code coverage metrics for Perl. Code coverage metrics "
"describe how thoroughly tests exercise code. By using Devel::Cover you can "
"discover areas of code not exercised by your tests and determine which tests "
"to create to increase coverage. Code coverage can be considered an indirect "
"measure of quality.\n"
"\n"
"Although it is still being developed, Devel::Cover is now quite stable and "
"provides many of the features to be expected in a useful coverage tool.\n"
"\n"
"Statement, branch, condition, subroutine, and pod coverage information is "
"reported. Statement and subroutine coverage data should be accurate. Branch "
"and condition coverage data should be mostly accurate too, although not "
"always what one might initially expect. Pod coverage comes from Pod::"
"Coverage. If Pod::Coverage::CountParents is available it will be used "
"instead. Coverage data for other criteria are not yet collected.\n"
"\n"
"The _cover_ program can be used to generate coverage reports. Devel::Cover "
"ships with a number of reports including various types of HTML output, "
"textual reports, a report to display missing coverage in the same format as "
"compilation errors and a report to display coverage information within the "
"Vim editor.\n"
"\n"
"It is possible to add annotations to reports, for example you can add a "
"column to an HTML report showing who last changed a line, as determined by "
"git blame. Some annotation modules are shipped with Devel::Cover and you can "
"easily create your own.\n"
"\n"
"The _gcov2perl_ program can be used to convert gcov files to 'Devel::Cover' "
"databases. This allows you to display your C or XS code coverage together "
"with your Perl coverage, or to use any of the Devel::Cover reports to "
"display your C coverage data.\n"
"\n"
"Code coverage data are collected by replacing perl ops with functions which "
"count how many times the ops are executed. These data are then mapped back "
"to reality using the B compiler modules. There is also a statement profiling "
"facility which should not be relied on. For proper profiling use Devel::"
"NYTProf. Previous versions of Devel::Cover collected coverage data by "
"replacing perl's runops function. It is still possible to switch to that "
"mode of operation, but this now gets little testing and will probably be "
"removed soon. You probably don't care about any of this.\n"
"\n"
"The most appropriate mailing list on which to discuss this module would be "
"perl-qa. See http://lists.perl.org/list/perl-qa.html.\n"
"\n"
"The Devel::Cover repository can be found at http://github.com/pjcj/Devel--"
"Cover. This is also where problems should be reported."
msgstr ""

#. leap/perl-Devel-Cover-Report-Codecov/summary
msgid "Backend for Codecov reporting of coverage statistics"
msgstr ""

#. leap/perl-Devel-Cover-Report-Codecov/description
msgid ""
"Devel::Cover::Report::Codecov is coverage reporter for at https://codecov.io."
msgstr ""

#. leap/perl-Devel-Cover-Report-Codecovbash/summary
msgid "Generate a JSON file to be uploaded with the codecov bash script"
msgstr ""

#. leap/perl-Devel-Cover-Report-Codecovbash/description
msgid ""
"This is a coverage reporter for Codecov. It generates a JSON file that can "
"be uploaded with the bash script provided by codecov. See https://docs."
"codecov.io/docs/about-the-codecov-bash-uploader for details.\n"
"\n"
"The generated file will be named _codecov.json_ and will be in the "
"_cover_db_ directory by default.\n"
"\n"
"Nearly all of the code in this distribution was simply copied from Pine "
"Mizune's at https://metacpan.org/release/Devel-Cover-Report-Codecov "
"distribution."
msgstr ""

#. leap/perl-Devel-Cycle/summary
msgid "Find memory cycles in objects"
msgstr ""

#. leap/perl-Devel-Cycle/description
msgid ""
"This is a simple developer's tool for finding circular references in objects "
"and other types of references. Because of Perl's reference-count based "
"memory management, circular references will cause memory leaks."
msgstr ""

#. leap/perl-Devel-Declare/summary
msgid "Adding keywords to perl, in perl"
msgstr ""

#. leap/perl-Devel-Declare/description
msgid ""
"Devel::Declare can install subroutines called declarators which locally take "
"over Perl's parser, allowing the creation of new syntax.\n"
"\n"
"This document describes how to create a simple declarator."
msgstr ""

#. leap/perl-Devel-FindPerl/summary
msgid "Find the path to your perl"
msgstr ""

#. leap/perl-Devel-FindPerl/description
#, fuzzy
msgid ""
"This module tries to find the path to the currently running perl. It "
"(optionally) exports the following functions:"
msgstr "Aucune information disponible."

#. leap/perl-Devel-GlobalDestruction/summary
msgid "Provides function returning the equivalent of"
msgstr ""

#. leap/perl-Devel-GlobalDestruction/description
msgid ""
"Perl's global destruction is a little tricky to deal with WRT finalizers "
"because it's not ordered and objects can sometimes disappear.\n"
"\n"
"Writing defensive destructors is hard and annoying, and usually if global "
"destruction is happening you only need the destructors that free up non "
"process local resources to actually execute.\n"
"\n"
"For these constructors you can avoid the mess by simply bailing out if "
"global destruction is in effect."
msgstr ""

#. leap/perl-Devel-GlobalPhase/summary
msgid "Detect perl's global phase on older perls"
msgstr ""

#. leap/perl-Devel-GlobalPhase/description
msgid ""
"This gives access to ${^GLOBAL_PHASE} in versions of perl that don't provide "
"it. The built in variable will be used if it is available.\n"
"\n"
"If all that is needed is detecting global destruction, Devel::"
"GlobalDestruction should be used instead of this module."
msgstr ""

#. leap/perl-Devel-Hide/summary
msgid "Forces the unavailability of specified Perl modules (for testing)"
msgstr ""

#. leap/perl-Devel-Hide/description
msgid ""
"Given a list of Perl modules/filenames, this module makes 'require' and "
"'use' statements fail (no matter the specified files/modules are installed "
"or not).\n"
"\n"
"They _die_ with a message like:\n"
"\n"
"    Can't locate Module/ToHide.pm in @INC (hidden)\n"
"\n"
"The original intent of this module is to allow Perl developers to test for "
"alternative behavior when some modules are not available. In a Perl "
"installation, where many modules are already installed, there is a chance to "
"screw things up because you take for granted things that may not be there in "
"other machines.\n"
"\n"
"For example, to test if your distribution does the right thing when a module "
"is missing, you can do\n"
"\n"
"    perl -MDevel::Hide=Test::Pod Makefile.PL\n"
"\n"
"forcing 'Test::Pod' to not be found (whether it is installed or not).\n"
"\n"
"Another use case is to force a module which can choose between two "
"requisites to use the one which is not the default. For example, 'XML::"
"Simple' needs a parser module and may use 'XML::Parser' or 'XML::"
"SAX' (preferring the latter). If you have both of them installed, it will "
"always try 'XML::SAX'. But you can say:\n"
"\n"
"    perl -MDevel::Hide=XML::SAX script_which_uses_xml_simple.pl\n"
"\n"
"NOTE. This module does not use Carp. As said before, denial _dies_.\n"
"\n"
"This module is pretty trivial. It uses a code reference in @INC to get rid "
"of specific modules during require - denying they can be successfully loaded "
"and stopping the search before they have a chance to be found.\n"
"\n"
"There are three alternative ways to include modules in the hidden list: \n"
"* import()\n"
"\n"
"this is probably the most commonly used method, called automagically when "
"you do this:\n"
"\n"
"    use Devel::Hide qw(Foo Bar::Baz);\n"
"\n"
"or\n"
"\n"
"    perl -MDevel::Hide=... \n"
"* setting @Devel::Hide::HIDDEN \n"
"* environment variable DEVEL_HIDE_PM\n"
"\n"
"both of these two only support 'global' hiding, whereas 'import()' supports "
"lexical hiding as well.\n"
"\n"
"Optionally, you can provide some arguments *before* the list of modules: \n"
"* -from:children\n"
"\n"
"propagate the list of hidden modules to your process' child processes. This "
"works by populating 'PERL5OPT', and is incompatible with Taint mode, as "
"explained in perlrun. Of course, this is unnecessary if your child processes "
"are just forks of the current one. \n"
"* -lexically\n"
"\n"
"This is only available on perl 5.10.0 and later. It is a fatal error to try "
"to use it on an older perl.\n"
"\n"
"Everything following this will only have effect until the end of the current "
"scope. Yes, that includes '-quiet'. \n"
"* -quiet\n"
"\n"
"suppresses diagnostic output. You will still get told about errors. This is "
"passed to child processes if -from:children is in effect."
msgstr ""

#. leap/perl-Devel-Leak/summary
msgid "Utility for looking for perl objects that are not reclaimed"
msgstr ""

#. leap/perl-Devel-Leak/description
msgid ""
"  Devel-Leak module for perl   Devel::Leak has two functions NoteSV and "
"CheckSV.   NoteSV walks the perl internal table of allocated SVs (scalar "
"values)    - (which actually contains arrays and hashes too),    and records "
"their addresses in a table. It returns a count of these \"things\",    and "
"stores a pointer to the table (which is obtained from the heap    using "
"malloc()) in its argument.   CheckSV is passed argument which holds a "
"pointer to a table created by NoteSV.    It re-walks the perl-internals and "
"calls sv_dump() for any \"things\"    which did not exist when NoteSV was "
"called.    It returns a count of the number of \"things\" now allocated.   "
"Author:\tNick Ing-Simmons <nick@ni-s.u-net.com>"
msgstr ""

#. leap/perl-Devel-LexAlias/summary
msgid "alias lexical variables"
msgstr ""

#. leap/perl-Devel-LexAlias/description
msgid ""
"Devel::LexAlias provides the ability to alias a lexical variable in a "
"subroutines scope to one of your choosing.\n"
"\n"
"If you don't know why you'd want to do this, I'd suggest that you skip this "
"module. If you think you have a use for it, I'd insist on it.\n"
"\n"
"Still here? \n"
"* lexalias( $where, $name, $variable )\n"
"\n"
"  '$where' refers to the subroutine in which to alias the lexical, it can   "
"be a coderef or a call level such that you'd give to 'caller'\n"
"\n"
"  '$name' is the name of the lexical within that subroutine\n"
"\n"
"  '$variable' is a reference to the variable to install at that location"
msgstr ""

#. leap/perl-Devel-NYTProf/summary
msgid "Powerful fast feature-rich Perl source code profiler"
msgstr ""

#. leap/perl-Devel-NYTProf/description
msgid ""
"Devel::NYTProf is a powerful, fast, feature-rich perl source code profiler.\n"
"\n"
"  * Performs per-line statement profiling for fine detail\n"
"\n"
"  * Performs per-subroutine statement profiling for overview\n"
"\n"
"  * Performs per-opcode profiling for slow perl builtins\n"
"\n"
"  * Performs per-block statement profiling (the first profiler to do so)\n"
"\n"
"  * Accounts correctly for time spent after calls return\n"
"\n"
"  * Performs inclusive and exclusive timing of subroutines\n"
"\n"
"  * Subroutine times are per calling location (a powerful feature)\n"
"\n"
"  * Can profile compile-time activity, just run-time, or just END time\n"
"\n"
"  * Uses novel techniques for efficient profiling\n"
"\n"
"  * Sub-microsecond (100ns) resolution on supported systems\n"
"\n"
"  * Very fast - the fastest statement and subroutine profilers for perl\n"
"\n"
"  * Handles applications that fork, with no performance cost\n"
"\n"
"  * Immune from noise caused by profiling overheads and I/O\n"
"\n"
"  * Program being profiled can stop/start the profiler\n"
"\n"
"  * Generates richly annotated and cross-linked html reports\n"
"\n"
"  * Captures source code, including string evals, for stable results\n"
"\n"
"  * Trivial to use with mod_perl - add one line to httpd.conf\n"
"\n"
"  * Includes an extensive test suite\n"
"\n"
"  * Tested on very large codebases\n"
"\n"
"NYTProf is effectively two profilers in one: a statement profiler, and a "
"subroutine profiler."
msgstr ""

#. leap/perl-Devel-OverloadInfo/summary
msgid "Introspect Overloaded Operators"
msgstr ""

#. leap/perl-Devel-OverloadInfo/description
msgid ""
"Devel::OverloadInfo returns information about overloaded operators for a "
"given class (or object), including where in the inheritance hierarchy the "
"overloads are declared and where the code implementing them is."
msgstr ""

#. leap/perl-Devel-PPPort/summary
msgid "Perl/Pollution/Portability"
msgstr ""

#. leap/perl-Devel-PPPort/description
msgid ""
"Perl's API has changed over time, gaining new features, new functions, "
"increasing its flexibility, and reducing the impact on the C namespace "
"environment (reduced pollution). The header file written by this module, "
"typically _ppport.h_, attempts to bring some of the newer Perl API features "
"to older versions of Perl, so that you can worry less about keeping track of "
"old releases, but users can still reap the benefit.\n"
"\n"
"'Devel::PPPort' contains two functions, 'WriteFile' and 'GetFileContents'. "
"'WriteFile''s only purpose is to write the _ppport.h_ C header file. This "
"file contains a series of macros and, if explicitly requested, functions "
"that allow XS modules to be built using older versions of Perl. Currently, "
"Perl versions from 5.003 to 5.20 are supported.\n"
"\n"
"'GetFileContents' can be used to retrieve the file contents rather than "
"writing it out.\n"
"\n"
"This module is used by 'h2xs' to write the file _ppport.h_."
msgstr ""

#. leap/perl-Devel-PartialDump/summary
msgid "Partial dumping of data structures, optimized for argument printing"
msgstr ""

#. leap/perl-Devel-PartialDump/description
msgid ""
"This module is a data dumper optimized for logging of arbitrary parameters.\n"
"\n"
"It attempts to truncate overly verbose data, in a way that is hopefully more "
"useful for diagnostics warnings than\n"
"\n"
"    warn Dumper(@stuff);\n"
"\n"
"Unlike other data dumping modules there are no attempts at correctness or "
"cross referencing, this is only meant to provide a slightly deeper look into "
"the data in question.\n"
"\n"
"There is a default recursion limit, and a default truncation of long lists, "
"and the dump is formatted on one line (new lines in strings are escaped), to "
"aid in readability.\n"
"\n"
"You can enable it temporarily by importing functions like 'warn', 'croak' "
"etc to get more informative errors during development, or even use it as:\n"
"\n"
"    BEGIN { local $@; eval \"use Devel::PartialDump qw(...)\" }\n"
"\n"
"to get DWIM formatting only if it's installed, without introducing a "
"dependency."
msgstr ""

#. leap/perl-Devel-PatchPerl/summary
msgid "Patch perl source a la Devel::PPPort's buildperl.pl"
msgstr ""

#. leap/perl-Devel-PatchPerl/description
msgid ""
"Devel::PatchPerl is a modularisation of the patching code contained in "
"Devel::PPPort's 'buildperl.pl'.\n"
"\n"
"It does not build perls, it merely provides an interface to the source "
"patching functionality."
msgstr ""

#. leap/perl-Devel-REPL/summary
msgid "Modern Perl Interactive Shell"
msgstr ""

#. leap/perl-Devel-REPL/description
msgid ""
"This is an interactive shell for Perl, commonly known as a REPL - Read, "
"Evaluate, Print, Loop. The shell provides for rapid development or testing "
"of code without the need to create a temporary source code file.\n"
"\n"
"Through a plugin system, many features are available on demand. You can also "
"tailor the environment through the use of profiles and run control files, "
"for example to pre-load certain Perl modules when working on a particular "
"project."
msgstr ""

#. leap/perl-Devel-StackTrace/summary
msgid "An object representing a stack trace"
msgstr ""

#. leap/perl-Devel-StackTrace/description
msgid ""
"The 'Devel::StackTrace' module contains two classes, 'Devel::StackTrace' and "
"Devel::StackTrace::Frame. These objects encapsulate the information that can "
"retrieved via Perl's 'caller' function, as well as providing a simple "
"interface to this data.\n"
"\n"
"The 'Devel::StackTrace' object contains a set of 'Devel::StackTrace::Frame' "
"objects, one for each level of the stack. The frames contain all the data "
"available from 'caller'.\n"
"\n"
"This code was created to support my Exception::Class::Base class (part of "
"Exception::Class) but may be useful in other contexts."
msgstr ""

#. leap/perl-Devel-StackTrace-AsHTML/summary
msgid "Displays stack trace in HTML"
msgstr ""

#. leap/perl-Devel-StackTrace-AsHTML/description
msgid ""
"Devel::StackTrace::AsHTML adds 'as_html' method to Devel::StackTrace which "
"displays the stack trace in beautiful HTML, with code snippet context and "
"function parameters. If you call it on an instance of Devel::StackTrace::"
"WithLexicals, you even get to see the lexical variables of each stack frame."
msgstr ""

#. leap/perl-Devel-Symdump/summary
msgid "Dump Symbol Names or the Symbol Table"
msgstr ""

#. leap/perl-Devel-Symdump/description
msgid "This little package serves to access the symbol table of perl."
msgstr ""

#. leap/perl-Devel-TakeHashArgs/summary
msgid ""
"Make a Hash From @_ and Set Defaults in Subs While Checking That All Man[cut]"
msgstr ""

#. leap/perl-Devel-TakeHashArgs/description
msgid ""
"The module is a short utility I made after being sick and tired of writing "
"redundant code to make a hash out of args when they are passed as key/value "
"pairs including setting their defaults and checking for mandatory arguments."
msgstr ""

#. leap/perl-Devel-Trace/summary
msgid "Print out each line before it is executed (like C<sh -x>)"
msgstr ""

#. leap/perl-Devel-Trace/description
msgid ""
"If you run your program with 'perl -d:Trace program', this module will print "
"a message to standard error just before each line is executed. For example, "
"if your program looks like this:\n"
"\n"
"        \n"
"\n"
"         print \"Statement 1 at line 4\\n\";         print \"Statement 2 at "
"line 5\\n\";         print \"Call to sub x returns \", &x(), \" at line 6.\\n"
"\";\n"
"\n"
"        exit 0;\n"
"\n"
"         sub x {           print \"In sub x at line 12.\\n\";           "
"return 13;         }\n"
"\n"
"Then the 'Trace' output will look like this:\n"
"\n"
"        >> ./test:4: print \"Statement 1 at line 4\\n\";         >> ./"
"test:5: print \"Statement 2 at line 5\\n\";         >> ./test:6: print "
"\"Call to sub x returns \", &x(), \" at line 6.\\n\";         >> ./"
"test:12:   print \"In sub x at line 12.\\n\";         >> ./test:13:   return "
"13;         >> ./test:8: exit 0;\n"
"\n"
"This is something like the shell's '-x' option."
msgstr ""

#. leap/perl-Device-SerialPort/summary
msgid "Linux/POSIX emulation of Win32::SerialPort functions"
msgstr ""

#. leap/perl-Device-SerialPort/description
msgid ""
"This module provides an object-based user interface essentially identical to "
"the one provided by the Win32::SerialPort module."
msgstr ""

#. leap/perl-Device-Yeelight/summary
#. leap/perl-Device-Yeelight/description
msgid "Controller for Yeelight smart devices"
msgstr ""

#. leap/perl-Digest-CRC/summary
msgid "Generic CRC functions"
msgstr ""

#. leap/perl-Digest-CRC/description
msgid ""
"The *Digest::CRC* module calculates CRC sums of all sorts. It contains "
"wrapper functions with the correct parameters for CRC-CCITT, CRC-16, CRC-32 "
"and CRC-64, as well as the CRC used in OpenPGP's ASCII-armored checksum."
msgstr ""

#. leap/perl-Digest-HMAC/summary
msgid "Keyed-Hashing for Message Authentication"
msgstr ""

#. leap/perl-Digest-HMAC/description
msgid ""
"HMAC is used for message integrity checks between two parties that share a "
"secret key, and works in combination with some other Digest algorithm, "
"usually MD5 or SHA-1. The HMAC mechanism is described in RFC 2104.\n"
"\n"
"HMAC follow the common 'Digest::' interface, but the constructor takes the "
"secret key and the name of some other simple 'Digest::' as argument.\n"
"\n"
"Authors:\n"
"--------     Graham Barr <gbarr@ti.com>     Gisle Aas <gisle@aas.no>"
msgstr ""

#. leap/perl-Digest-JHash/summary
msgid "Perl extension for 32 bit Jenkins Hashing Algorithm"
msgstr ""

#. leap/perl-Digest-JHash/description
msgid ""
"The 'Digest::JHash' module allows you to use the fast JHash hashing "
"algorithm developed by Bob Jenkins from within Perl programs. The algorithm "
"takes as input a message of arbitrary length and produces as output a 32-bit "
"\"message digest\" of the input in the form of an unsigned long integer.\n"
"\n"
"Call it a low calorie version of MD5 if you like.\n"
"\n"
"See http://burtleburtle.net/bob/hash/doobs.html for more information."
msgstr ""

#. leap/perl-Digest-MD4/summary
msgid "Perl interface to the MD4 Algorithm"
msgstr ""

#. leap/perl-Digest-MD4/description
msgid ""
"The 'Digest::MD4' module allows you to use the RSA Data Security Inc. MD4 "
"Message Digest algorithm from within Perl programs. The algorithm takes as "
"input a message of arbitrary length and produces as output a 128-bit "
"\"fingerprint\" or \"message digest\" of the input.\n"
"\n"
"The 'Digest::MD4' module provides a procedural interface for simple use, as "
"well as an object oriented interface that can handle messages of arbitrary "
"length and which can read files directly."
msgstr ""

#. leap/perl-Digest-MD5/summary
msgid "Perl interface to the MD5 Algorithm"
msgstr ""

#. leap/perl-Digest-MD5/description
msgid ""
"The 'Digest::MD5' module allows you to use the RSA Data Security Inc. MD5 "
"Message Digest algorithm from within Perl programs. The algorithm takes as "
"input a message of arbitrary length and produces as output a 128-bit "
"\"fingerprint\" or \"message digest\" of the input.\n"
"\n"
"Note that the MD5 algorithm is not as strong as it used to be. It has since "
"2005 been easy to generate different messages that produce the same MD5 "
"digest. It still seems hard to generate messages that produce a given "
"digest, but it is probably wise to move to stronger algorithms for "
"applications that depend on the digest to uniquely identify a message.\n"
"\n"
"The 'Digest::MD5' module provide a procedural interface for simple use, as "
"well as an object oriented interface that can handle messages of arbitrary "
"length and which can read files directly."
msgstr ""

#. leap/perl-Digest-Perl-MD5/summary
#, fuzzy
msgid "Perl implementation of Ron Rivests MD5 Algorithm"
msgstr "Interface Perl vers DNS Resolver"

#. leap/perl-Digest-Perl-MD5/description
msgid ""
"This modules has the same interface as the much faster 'Digest::MD5'. So you "
"can easily exchange them, e.g.\n"
"\n"
"\tBEGIN { \t  eval { \t    require Digest::MD5; \t    import Digest::MD5 "
"'md5_hex' \t  }; \t  if ($@) { # ups, no Digest::MD5 \t    require Digest::"
"Perl::MD5; \t    import Digest::Perl::MD5 'md5_hex' \t  } \t}\n"
"\n"
"If the 'Digest::MD5' module is available it is used and if not you take "
"'Digest::Perl::MD5'.\n"
"\n"
"You can also install the Perl part of Digest::MD5 together with Digest::"
"Perl::MD5 and use Digest::MD5 as normal, it falls back to Digest::Perl::MD5 "
"if it cannot load its object files.\n"
"\n"
"For a detailed Documentation see the 'Digest::MD5' module."
msgstr ""

#. leap/perl-Digest-SHA1/summary
msgid "Perl Interface to the SHA-1 Algorithm"
msgstr ""

#. leap/perl-Digest-SHA1/description
msgid ""
"  Digest-SHA1 module for perl   The Digest::SHA1 module allows the use of "
"the NIST SHA-1 message digest   algorithm from within Perl programs. The "
"algorithm takes a message of   arbitrary length as input and produces a 160-"
"bit fingerprint or message   digest of the input as output.   Authors: \t"
"\tPeter C. Gutmann, \t\tUwe Hollerbach <uh@alumni.caltech.edu>, \t\tGisle "
"Aas <gisle@aas.no>"
msgstr ""

#. leap/perl-Dist-CheckConflicts/summary
msgid "declare version conflicts for your dist"
msgstr ""

#. leap/perl-Dist-CheckConflicts/description
msgid ""
"One shortcoming of the CPAN clients that currently exist is that they have "
"no way of specifying conflicting downstream dependencies of modules. This "
"module attempts to work around this issue by allowing you to specify "
"conflicting versions of modules separately, and deal with them after the "
"module is done installing.\n"
"\n"
"For instance, say you have a module 'Foo', and some other module 'Bar' uses "
"'Foo'. If 'Foo' were to change its API in a non-backwards-compatible way, "
"this would cause 'Bar' to break until it is updated to use the new API. "
"'Foo' can't just depend on the fixed version of 'Bar', because this will "
"cause a circular dependency (because 'Bar' is already depending on 'Foo'), "
"and this doesn't express intent properly anyway - 'Foo' doesn't use 'Bar' at "
"all. The ideal solution would be for there to be a way to specify "
"conflicting versions of modules in a way that would let CPAN clients update "
"conflicting modules automatically after an existing module is upgraded, but "
"until that happens, this module will allow users to do this manually.\n"
"\n"
"This module accepts a hash of options passed to its 'use' statement, with "
"these keys being valid: \n"
"* -conflicts\n"
"\n"
"  A hashref of conflict specifications, where keys are module names, and   "
"values are the last broken version - any version greater than the   "
"specified version should work. \n"
"* -also\n"
"\n"
"  Additional modules to get conflicts from (potentially recursively). This   "
"should generally be a list of modules which use Dist::CheckConflicts,   "
"which correspond to the dists that your dist depends on. (In an ideal   "
"world, this would be intuited directly from your dependency list, but the   "
"dependency list isn't available outside of build time). \n"
"* -dist\n"
"\n"
"  The name of the distribution, to make the error message from   "
"check_conflicts more user-friendly.\n"
"\n"
"The methods listed below are exported by this module into the module that "
"uses it, so you should call these methods on your module, not Dist::"
"CheckConflicts.\n"
"\n"
"As an example, this command line can be used to update your modules, after "
"installing the 'Foo' dist (assuming that 'Foo::Conflicts' is the module in "
"the 'Foo' dist which uses Dist::CheckConflicts):\n"
"\n"
"    perl -MFoo::Conflicts -e'print \"$_\\n\"         for map { $_-"
">{package} } Foo::Conflicts->calculate_conflicts' | cpanm\n"
"\n"
"As an added bonus, loading your conflicts module will provide warnings at "
"runtime if conflicting modules are detected (regardless of whether they are "
"loaded before or afterwards)."
msgstr ""

#. leap/perl-Dist-Zilla/summary
msgid "Distribution Builder; Installer Not Included!"
msgstr ""

#. leap/perl-Dist-Zilla/description
msgid ""
"Dist::Zilla builds distributions of code to be uploaded to the CPAN. In this "
"respect, it is like ExtUtils::MakeMaker, Module::Build, or Module::Install. "
"Unlike those tools, however, it is not also a system for installing code "
"that has been downloaded from the CPAN. Since it's only run by authors, and "
"is meant to be run on a repository checkout rather than on published, "
"released code, it can do much more than those tools, and is free to make "
"much more ludicrous demands in terms of prerequisites.\n"
"\n"
"If you have access to the web, you can learn more and find an interactive "
"tutorial at *at http://dzil.org/*. If not, try Dist::Zilla::Tutorial."
msgstr ""

#. leap/perl-Dumbbench/summary
msgid "More reliable benchmarking with the least amount of thinking"
msgstr ""

#. leap/perl-Dumbbench/description
msgid ""
"This module attempts to implement reasonably robust benchmarking with little "
"extra effort and expertise required from the user. That is to say, "
"benchmarking using this module is likely an improvement over\n"
"\n"
"  time some-command --to --benchmark\n"
"\n"
"or\n"
"\n"
"  use Benchmark qw/timethis/;   timethis(1000, 'system(\"some-command"
"\", ...)');\n"
"\n"
"The module currently works similar to the former command line, except (in "
"layman terms) it will run the command many times, estimate the uncertainty "
"of the result and keep iterating until a certain user-defined precision has "
"been reached. Then, it calculates the resulting uncertainty and goes through "
"some pain to discard bad runs and subtract overhead from the timings. The "
"reported timing includes an uncertainty, so that multiple benchmarks can "
"more easily be compared.\n"
"\n"
"Please note that 'Dumbbench' works entirely with wallclock time as reported "
"by 'Time::HiRes'' 'time()' function."
msgstr ""

#. leap/perl-Email-Abstract/summary
#, fuzzy
msgid "Unified interface to mail representations"
msgstr "Pour l'encodage et le décodage de messages MIME."

#. leap/perl-Email-Abstract/description
msgid ""
"'Email::Abstract' provides module writers with the ability to write simple, "
"representation-independent mail handling code. For instance, in the cases of "
"'Mail::Thread' or 'Mail::ListDetector', a key part of the code involves "
"reading the headers from a mail object. Where previously one would either "
"have to specify the mail class required, or to build a new object from "
"scratch, 'Email::Abstract' can be used to perform certain simple operations "
"on an object regardless of its underlying representation.\n"
"\n"
"'Email::Abstract' currently supports 'Mail::Internet', 'MIME::Entity', "
"'Mail::Message', 'Email::Simple', 'Email::MIME', and 'Courriel'. Other "
"representations are encouraged to create their own 'Email::Abstract::*' "
"class by copying 'Email::Abstract::EmailSimple'. All modules installed under "
"the 'Email::Abstract' hierarchy will be automatically picked up and used."
msgstr ""

#. leap/perl-Email-Address/summary
msgid "RFC 2822 Address Parsing and Creation"
msgstr ""

#. leap/perl-Email-Address/description
msgid ""
"This class implements a regex-based RFC 2822 parser that locates email "
"addresses in strings and returns a list of 'Email::Address' objects found. "
"Alternatively you may construct objects manually. The goal of this software "
"is to be correct, and very very fast.\n"
"\n"
"Version 1.909 and earlier of this module had vulnerabilies (at https://cve."
"mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-7686) and (at https://cve.mitre."
"org/cgi-bin/cvename.cgi?name=CVE-2018-12558) which allowed specially "
"constructed email to cause a denial of service. The reported vulnerabilities "
"and some other pathalogical cases (meaning they really shouldn't occur in "
"normal email) have been addressed in version 1.910 and newer. If you're "
"running version 1.909 or older, you should update!\n"
"\n"
"Alternatively, you could switch to *Email::Address::XS* which has a backward "
"compatible API."
msgstr ""

#. leap/perl-Email-Address-XS/summary
msgid "Parse and format RFC 5322 email addresses and groups"
msgstr ""

#. leap/perl-Email-Address-XS/description
msgid ""
"This module implements at https://tools.ietf.org/html/rfc5322 parser and "
"formatter of email addresses and groups. It parses an input string from "
"email headers which contain a list of email addresses or a groups of email "
"addresses (like From, To, Cc, Bcc, Reply-To, Sender, ...). Also it can "
"generate a string value for those headers from a list of email addresses "
"objects. Module is backward compatible with at https://tools.ietf.org/html/"
"rfc2822 and at https://tools.ietf.org/html/rfc822.\n"
"\n"
"Parser and formatter functionality is implemented in XS and uses shared code "
"from Dovecot IMAP server.\n"
"\n"
"It is a drop-in replacement for the Email::Address module which has several "
"security issues. E.g. issue at https://cve.mitre.org/cgi-bin/cvename.cgi?"
"name=CVE-2015-7686, which allows remote attackers to cause denial of "
"service, is still present in Email::Address version 1.908.\n"
"\n"
"Email::Address::XS module was created to finally fix CVE-2015-7686.\n"
"\n"
"Existing applications that use Email::Address module could be easily "
"switched to Email::Address::XS module. In most cases only changing 'use "
"Email::Address' to 'use Email::Address::XS' and replacing every 'Email::"
"Address' occurrence with 'Email::Address::XS' is sufficient.\n"
"\n"
"So unlike Email::Address, this module does not use regular expressions for "
"parsing but instead native XS implementation parses input string "
"sequentially according to RFC 5322 grammar.\n"
"\n"
"Additionally it has support also for named groups and so can be use instead "
"of the Email::Address::List module.\n"
"\n"
"If you are looking for the module which provides object representation for "
"the list of email addresses suitable for the MIME email headers, see Email::"
"MIME::Header::AddressList."
msgstr ""

#. leap/perl-Email-Date-Format/summary
#, fuzzy
msgid "Produce RFC 2822 date strings"
msgstr "Procure une pseudo interface tty"

#. leap/perl-Email-Date-Format/description
msgid ""
"This module provides a simple means for generating an RFC 2822 compliant "
"datetime string. (In case you care, they're not RFC 822 dates, because they "
"use a four digit year, which is not allowed in RFC 822.)"
msgstr ""

#. leap/perl-Email-MIME/summary
msgid "Easy MIME message handling"
msgstr ""

#. leap/perl-Email-MIME/description
msgid ""
"This is an extension of the Email::Simple module, to handle MIME encoded "
"messages. It takes a message as a string, splits it up into its constituent "
"parts, and allows you access to various parts of the message. Headers are "
"decoded from MIME encoding."
msgstr ""

#. leap/perl-Email-MIME-ContentType/summary
#. leap/perl-Email-MIME-ContentType/description
msgid "Parse and build a MIME Content-Type or Content-Disposition Header"
msgstr ""

#. leap/perl-Email-MIME-Encodings/summary
#, fuzzy
msgid "A unified interface to MIME encoding and decoding"
msgstr "Pour l'encodage et le décodage de messages MIME."

#. leap/perl-Email-MIME-Encodings/description
msgid ""
"This module simply wraps 'MIME::Base64' and 'MIME::QuotedPrint' so that you "
"can throw the contents of a 'Content-Transfer-Encoding' header at some text "
"and have the right thing happen.\n"
"\n"
"'MIME::Base64', 'MIME::QuotedPrint', 'Email::MIME'."
msgstr ""

#. leap/perl-Email-MessageID/summary
msgid "Generate world unique message-ids"
msgstr ""

#. leap/perl-Email-MessageID/description
msgid ""
"Message-ids are optional, but highly recommended, headers that identify a "
"message uniquely. This software generates a unique message-id."
msgstr ""

#. leap/perl-Email-Reply/summary
msgid "Reply to an Email Message"
msgstr ""

#. leap/perl-Email-Reply/description
msgid ""
"This software takes the hard out of generating replies to email messages."
msgstr ""

#. leap/perl-Email-Send/summary
msgid "Simply Sending Email"
msgstr ""

#. leap/perl-Email-Send/description
msgid ""
"This module provides a very simple, very clean, very specific interface to "
"multiple Email mailers. The goal of this software is to be small and simple, "
"easy to use, and easy to extend."
msgstr ""

#. leap/perl-Email-Sender/summary
msgid "Library for sending email"
msgstr ""

#. leap/perl-Email-Sender/description
msgid ""
"Email::Sender replaces the old and sometimes problematic Email::Send "
"library, which did a decent job at handling very simple email sending tasks, "
"but was not suitable for serious use, for a variety of reasons.\n"
"\n"
"Most users will be able to use Email::Sender::Simple to send mail. Users "
"with more specific needs should look at the available Email::Sender::"
"Transport classes.\n"
"\n"
"Documentation may be found in Email::Sender::Manual, and new users should "
"start with Email::Sender::Manual::QuickStart."
msgstr ""

#. leap/perl-Email-Simple/summary
msgid "Simple Parsing of Rfc2822 Message Format and Headers"
msgstr ""

#. leap/perl-Email-Simple/description
msgid ""
"The Email:: namespace was begun as a reaction against the increasing "
"complexity and bugginess of Perl's existing email modules. 'Email::*' "
"modules are meant to be simple to use and to maintain, pared to the bone, "
"fast, minimal in their external dependencies, and correct."
msgstr ""

#. leap/perl-Email-Valid/summary
msgid "Check validity of Internet email addresses"
msgstr ""

#. leap/perl-Email-Valid/description
msgid ""
"This module determines whether an email address is well-formed, and "
"optionally, whether a mail host exists for the domain.\n"
"\n"
"Please note that there is no way to determine whether an address is "
"deliverable without attempting delivery (for details, see at http://perldoc."
"perl.org/perlfaq9.html#How-do-I-check-a-valid-mail-address)."
msgstr ""

#. leap/perl-Encode/summary
msgid "Character encodings in Perl"
msgstr ""

#. leap/perl-Encode/description
msgid ""
"The 'Encode' module provides the interface between Perl strings and the rest "
"of the system. Perl strings are sequences of _characters_.\n"
"\n"
"The repertoire of characters that Perl can represent is a superset of those "
"defined by the Unicode Consortium. On most platforms the ordinal values of a "
"character as returned by 'ord(_S_)' is the _Unicode codepoint_ for that "
"character. The exceptions are platforms where the legacy encoding is some "
"variant of EBCDIC rather than a superset of ASCII; see perlebcdic.\n"
"\n"
"During recent history, data is moved around a computer in 8-bit chunks, "
"often called \"bytes\" but also known as \"octets\" in standards documents. "
"Perl is widely used to manipulate data of many types: not only strings of "
"characters representing human or computer languages, but also \"binary\" "
"data, being the machine's representation of numbers, pixels in an image, or "
"just about anything.\n"
"\n"
"When Perl is processing \"binary data\", the programmer wants Perl to "
"process \"sequences of bytes\". This is not a problem for Perl: because a "
"byte has 256 possible values, it easily fits in Perl's much larger \"logical "
"character\".\n"
"\n"
"This document mostly explains the _how_. perlunitut and perlunifaq explain "
"the _why_."
msgstr ""

#. leap/perl-Encode-Detect/summary
msgid "An Encode::Encoding subclass that detects the encoding of data"
msgstr ""

#. leap/perl-Encode-Detect/description
msgid ""
"This Perl module is an Encode::Encoding subclass that uses Encode::Detect::"
"Detector to determine the charset of the input data and then decodes it "
"using the encoder of the detected charset.\n"
"\n"
"It is similar to Encode::Guess, but does not require the configuration of a "
"set of expected encodings. Like Encode::Guess, it only supports decoding--it "
"cannot encode.\n"
"\n"
"Authors:\n"
"--------     John Gardiner Myers <jgmyers@proofpoint.com>"
msgstr ""

#. leap/perl-Encode-EUCJPASCII/summary
msgid "An eucJP-open mapping"
msgstr ""

#. leap/perl-Encode-EUCJPASCII/description
msgid ""
"This module provides eucJP-ascii, one of eucJP-open mappings, and its "
"derivative. Following encodings are supported.\n"
"\n"
"  Canonical    Alias                           Description   "
"--------------------------------------------------------------   eucJP-"
"ascii                                  eucJP-ascii                qr/\\beuc-?"
"jp(-?open)?(-?19970715)?-?ascii$/i   x-iso2022jp-"
"ascii                            7-bit counterpart                qr/\\b(x-)?"
"iso-?2022-?jp-?ascii$/i   "
"-------------------------------------------------------------- \n"
"*Note*: 'x-iso2022jp-ascii' is unofficial encoding name: It had never been "
"registered by any standards bodies."
msgstr ""

#. leap/perl-Encode-HanExtra/summary
msgid "Extra sets of Chinese encodings"
msgstr ""

#. leap/perl-Encode-HanExtra/description
msgid ""
"Perl 5.7.3 and later ships with an adequate set of Chinese encodings, "
"including the most used CP950, CP936 (also known as GBK), Big5, Big5-HKSCS, "
"EUC-CN, HZ, and ISO-IR-165.\n"
"\n"
"However, the numbers of Chinese encodings are staggering, and a complete "
"coverage will easily increase the size of perl distribution by several "
"megabytes; hence, this CPAN module tries to provide the rest of them."
msgstr ""

#. leap/perl-Encode-JIS2K/summary
msgid "JIS X 0212 (aka JIS 2000) Encodings"
msgstr ""

#. leap/perl-Encode-JIS2K/description
msgid ""
"This module implements encodings that covers JIS X 0213 charset (AKA JIS "
"2000, hence the module name).\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Dan Kogai <dankogai@dan.co.jp>"
msgstr ""

#. leap/perl-Encode-Locale/summary
msgid "Determine the locale encoding"
msgstr ""

#. leap/perl-Encode-Locale/description
msgid ""
"In many applications it's wise to let Perl use Unicode for the strings it "
"processes. Most of the interfaces Perl has to the outside world are still "
"byte based. Programs therefore need to decode byte strings that enter the "
"program from the outside and encode them again on the way out.\n"
"\n"
"The POSIX locale system is used to specify both the language conventions "
"requested by the user and the preferred character set to consume and output. "
"The 'Encode::Locale' module looks up the charset and encoding (called a "
"CODESET in the locale jargon) and arranges for the the Encode manpage module "
"to know this encoding under the name \"locale\". It means bytes obtained "
"from the environment can be converted to Unicode strings by calling 'Encode::"
"encode(locale => $bytes)' and converted back again with 'Encode::"
"decode(locale => $string)'.\n"
"\n"
"Where file systems interfaces pass file names in and out of the program we "
"also need care. The trend is for operating systems to use a fixed file "
"encoding that don't actually depend on the locale; and this module "
"determines the most appropriate encoding for file names. The the Encode "
"manpage module will know this encoding under the name \"locale_fs\". For "
"traditional Unix systems this will be an alias to the same encoding as "
"\"locale\".\n"
"\n"
"For programs running in a terminal window (called a \"Console\" on some "
"systems) the \"locale\" encoding is usually a good choice for what to expect "
"as input and output. Some systems allows us to query the encoding set for "
"the terminal and 'Encode::Locale' will do that if available and make these "
"encodings known under the 'Encode' aliases \"console_in\" and \"console_out"
"\". For systems where we can't determine the terminal encoding these will be "
"aliased as the same encoding as \"locale\". The advice is to use \"console_in"
"\" for input known to come from the terminal and \"console_out\" for output "
"to the terminal.\n"
"\n"
"In addition to arranging for various Encode aliases the following functions "
"and variables are provided: \n"
"* decode_argv( ) \n"
"* decode_argv( Encode::FB_CROAK )\n"
"\n"
"  This will decode the command line arguments to perl (the '@ARGV' array)   "
"in-place.\n"
"\n"
"  The function will by default replace characters that can't be decoded by   "
"\"\\x{FFFD}\", the Unicode replacement character.\n"
"\n"
"  Any argument provided is passed as CHECK to underlying Encode::decode()   "
"call. Pass the value 'Encode::FB_CROAK' to have the decoding croak if not   "
"all the command line arguments can be decoded. See the Encode/\"Handling   "
"Malformed Data\" manpage for details on other options for CHECK. \n"
"* env( $uni_key ) \n"
"* env( $uni_key => $uni_value )\n"
"\n"
"  Interface to get/set environment variables. Returns the current value as   "
"a Unicode string. The $uni_key and $uni_value arguments are expected to   be "
"Unicode strings as well. Passing 'undef' as $uni_value deletes the   "
"environment variable named $uni_key.\n"
"\n"
"  The returned value will have the characters that can't be decoded   "
"replaced by \"\\x{FFFD}\", the Unicode replacement character.\n"
"\n"
"  There is no interface to request alternative CHECK behavior as for   "
"decode_argv(). If you need that you need to call encode/decode yourself.   "
"For example:\n"
"\n"
"      my $key = Encode::encode(locale => $uni_key, Encode::FB_CROAK);       "
"my $uni_value = Encode::decode(locale => $ENV{$key}, Encode::FB_CROAK); \n"
"* reinit( ) \n"
"* reinit( $encoding )\n"
"\n"
"  Reinitialize the encodings from the locale. You want to call this   "
"function if you changed anything in the environment that might influence   "
"the locale.\n"
"\n"
"  This function will croak if the determined encoding isn't recognized by   "
"the Encode module.\n"
"\n"
"  With argument force $ENCODING_... variables to set to the given value. \n"
"* $ENCODING_LOCALE\n"
"\n"
"  The encoding name determined to be suitable for the current locale. the   "
"Encode manpage know this encoding as \"locale\". \n"
"* $ENCODING_LOCALE_FS\n"
"\n"
"  The encoding name determined to be suitable for file system interfaces   "
"involving file names. the Encode manpage know this encoding as   \"locale_fs"
"\". \n"
"* $ENCODING_CONSOLE_IN \n"
"* $ENCODING_CONSOLE_OUT\n"
"\n"
"  The encodings to be used for reading and writing output to the a "
"console.   the Encode manpage know these encodings as \"console_in\" and   "
"\"console_out\"."
msgstr ""

#. leap/perl-Error/summary
msgid "Error/exception handling in an OO-ish way"
msgstr ""

#. leap/perl-Error/description
msgid ""
"The 'Error' package provides two interfaces. Firstly 'Error' provides a "
"procedural interface to exception handling. Secondly 'Error' is a base class "
"for errors/exceptions that can either be thrown, for subsequent catch, or "
"can simply be recorded.\n"
"\n"
"Errors in the class 'Error' should not be thrown directly, but the user "
"should throw errors from a sub-class of 'Error'."
msgstr ""

#. leap/perl-Eval-Closure/summary
msgid "Safely and Cleanly Create Closures Via String Eval"
msgstr ""

#. leap/perl-Eval-Closure/description
msgid ""
"String eval is often used for dynamic code generation. For instance, 'Moose' "
"uses it heavily, to generate inlined versions of accessors and constructors, "
"which speeds code up at runtime by a significant amount. String eval is not "
"without its issues however - it's difficult to control the scope it's used "
"in (which determines which variables are in scope inside the eval), and it's "
"easy to miss compilation errors, since eval catches them and sticks them in "
"$@ instead.\n"
"\n"
"This module attempts to solve these problems. It provides an 'eval_closure' "
"function, which evals a string in a clean environment, other than a fixed "
"list of specified variables. Compilation errors are rethrown automatically."
msgstr ""

#. leap/perl-Eval-LineNumbers/summary
msgid "Add line numbers to heredoc blocks that contain perl source code"
msgstr ""

#. leap/perl-Eval-LineNumbers/description
msgid ""
"Add a '#line \"this-file\" 392' comment to heredoc/hereis text that is going "
"to be eval'ed so that error messages will point back to the right place.\n"
"\n"
"Please note: when you embed '\\n' in your code, it gets expanded in double-"
"quote hereis documents so it will mess up your line numbering. Use '\\\\n' "
"instead when you can."
msgstr ""

#. leap/perl-Event/summary
msgid "Event loop processing"
msgstr ""

#. leap/perl-Event/description
msgid ""
"ALERT: Marc Lehmann may have taken over the future of event loops in Perl. "
"Check out his libev library and EV Perl module. 25 Aug 2009\n"
"\n"
"The Event module provide a central facility to watch for various types of "
"events and invoke a callback when these events occur. The idea is to delay "
"the handling of events so that they may be dispatched in priority order when "
"it is safe for callbacks to execute.\n"
"\n"
"Events (in the ordinary sense of the word) are detected by *watchers*, which "
"reify them as *events* (in the special Event module sense). For clarity, the "
"former type of events may be called \"source events\", and the latter "
"\"target events\". Source events, such as signals arriving, happen whether "
"or not they are being watched. If a source event occurs which a watcher is "
"actively watching then the watcher generates a corresponding target event. "
"Target events are only created by watchers. If several watchers are "
"interested in the same source event then each will generate their own target "
"event. Hence, any particular source event may result in zero, one, two, or "
"any number of target events: the same as the number of watchers which were "
"actively watching for it.\n"
"\n"
"Target events are queued to be processed in priority order (priority being "
"determined by the creating watcher) and in FIFO order among events of the "
"same priority. Queued (\"pending\") events can, in some cases, be cancelled "
"before being processed. A queued event is processed by being passed to the "
"callback function (or method on a particular object or class) which was "
"specified to the watcher.\n"
"\n"
"A watcher, once created, operates autonomously without the Event user having "
"to retain any reference to it. However, keeping a reference makes it "
"possible to modify most of the watcher's characteristics. A watcher can be "
"switched between active and inactive states. When inactive, it does not "
"generate target events.\n"
"\n"
"Some types of source event are not reified as target events immediately. "
"Signals received, for example, are counted initially. The counted signals "
"are reified at certain execution points. Hence, signal events may be "
"processed out of order, and if handled carelessly, on the wrong side of a "
"state change in event handling. A useful way to view this is that occurrence "
"of the source event is not actually the arrival of the signal but is "
"triggered by the counting of the signal.\n"
"\n"
"Reification can be forced when necessary. The schedule on which some other "
"events are created is non-obvious. This is especially the case with watchers "
"that watch for a condition rather than an event. In some cases, target "
"events are generated on a schedule that depends on the operation of the "
"event loop."
msgstr ""

#. leap/perl-Exception-Base/summary
#, fuzzy
msgid "Lightweight exceptions"
msgstr "Langage de scripts basé sur Java"

#. leap/perl-Exception-Base/description
msgid ""
"This class implements a fully OO exception mechanism similar to Exception::"
"Class or Class::Throwable. It provides a simple interface allowing "
"programmers to declare exception classes. These classes can be thrown and "
"caught. Each uncaught exception prints full stack trace if the default "
"verbosity is increased for debugging purposes.\n"
"\n"
"The features of 'Exception::Base':\n"
"\n"
"  * fast implementation of the exception class\n"
"\n"
"  * fully OO without closures and source code filtering\n"
"\n"
"  * does not mess with '$SIG{__DIE__}' and '$SIG{__WARN__}'\n"
"\n"
"  * no external run-time modules dependencies, requires core Perl modules "
"only\n"
"\n"
"  * the default behavior of exception class can be changed globally or just "
"for the thrown exception\n"
"\n"
"  * matching the exception by class, message or other attributes\n"
"\n"
"  * matching with string, regex or closure function\n"
"\n"
"  * creating automatically the derived exception classes (perlfunc/use "
"interface)\n"
"\n"
"  * easily expendable, see Exception::System class for example\n"
"\n"
"  * prints just an error message or dumps full stack trace\n"
"\n"
"  * can propagate (rethrow) an exception\n"
"\n"
"  * can ignore some packages for stack trace output\n"
"\n"
"  * some defaults (i.e. verbosity) can be different for different exceptions"
msgstr ""

#. leap/perl-Exception-Class/summary
msgid "Module That Allows You to Declare Real Exception Classes in Perl"
msgstr ""

#. leap/perl-Exception-Class/description
msgid ""
"*RECOMMENDATION 1*: If you are writing modern Perl code with Moose or Moo I "
"highly recommend using Throwable instead of this module. \n"
"*RECOMMENDATION 2*: Whether or not you use Throwable, you should use Try::"
"Tiny.\n"
"\n"
"Exception::Class allows you to declare exception hierarchies in your modules "
"in a \"Java-esque\" manner.\n"
"\n"
"It features a simple interface allowing programmers to 'declare' exception "
"classes at compile time. It also has a base exception class, Exception::"
"Class::Base, that can be easily extended.\n"
"\n"
"It is designed to make structured exception handling simpler and better by "
"encouraging people to use hierarchies of exceptions in their applications, "
"as opposed to a single catch-all exception class.\n"
"\n"
"This module does not implement any try/catch syntax. Please see the \"OTHER "
"EXCEPTION MODULES (try/catch syntax)\" section for more information on how "
"to get this syntax.\n"
"\n"
"You will also want to look at the documentation for Exception::Class::Base, "
"which is the default base class for all exception objects created by this "
"module."
msgstr ""

#. leap/perl-Expect/summary
msgid ""
"Automate Interactions with Command Line Programs That Expose a Text Term[cut]"
msgstr ""

#. leap/perl-Expect/description
msgid ""
"See an explanation of at http://code-maven.com/expect\n"
"\n"
"The Expect module is a successor of Comm.pl and a descendent of Chat.pl. It "
"more closely resembles the Tcl Expect language than its predecessors. It "
"does not contain any of the networking code found in Comm.pl. I suspect this "
"would be obsolete anyway given the advent of IO::Socket and external tools "
"such as netcat.\n"
"\n"
"Expect.pm is an attempt to have more of a switch() & case feeling to make "
"decision processing more fluid. Three separate types of debugging have been "
"implemented to make code production easier.\n"
"\n"
"It is possible to interconnect multiple file handles (and processes) much "
"like Tcl's Expect. An attempt was made to enable all the features of Tcl's "
"Expect without forcing Tcl on the victim programmer :-) .\n"
"\n"
"Please, before you consider using Expect, read the FAQs about \"I want to "
"automate password entry for su/ssh/scp/rsh/...\" and \"I want to use Expect "
"to automate [anything with a buzzword]...\""
msgstr ""

#. leap/perl-Export-Attrs/summary
msgid "The Perl 6 'is export(...)' trait as a Perl 5 attribute"
msgstr ""

#. leap/perl-Export-Attrs/description
msgid ""
"*NOTE:* This module is a fork of Perl6::Export::Attrs created to restore "
"compatibility with Perl6::Export::Attrs version 0.0.3.\n"
"\n"
"Implements a Perl 5 native version of what the Perl 6 symbol export "
"mechanism will look like (with some unavoidable restrictions).\n"
"\n"
"It's very straightforward:\n"
"\n"
"  * If you want a subroutine or package variable to be capable of being "
"exported (when explicitly requested in the 'use' arguments), you mark it "
"with the ':Export' attribute.\n"
"\n"
"  * If you want a subroutine or package variable to be automatically "
"exported when the module is used (without specific overriding arguments), "
"you mark it with the ':Export(:DEFAULT)' attribute.\n"
"\n"
"  * If you want a subroutine or package variable to be automatically "
"exported when the module is used (even if the user specifies overriding "
"arguments), you mark it with the ':Export(:MANDATORY)' attribute.\n"
"\n"
"  * If the subroutine or package variable should also be exported when "
"particular export groups are requested, you add the names of those export "
"groups to the attribute's argument list.\n"
"\n"
"That's it."
msgstr ""

#. leap/perl-Exporter-Declare/summary
msgid "Exporting done right"
msgstr ""

#. leap/perl-Exporter-Declare/description
msgid ""
"Exporter::Declare is a meta-driven exporting tool. Exporter::Declare tries "
"to adopt all the good features of other exporting tools, while throwing away "
"horrible interfaces. Exporter::Declare also provides hooks that allow you to "
"add options and arguments for import. Finally, Exporter::Declare's meta-"
"driven system allows for top-notch introspection."
msgstr ""

#. leap/perl-Exporter-Lite/summary
msgid "Lightweight Exporting of Functions and Variables"
msgstr ""

#. leap/perl-Exporter-Lite/description
msgid ""
"Exporter::Lite is an alternative to Exporter, intended to provide a "
"lightweight subset of the most commonly-used functionality. It supports "
"'import()', '@EXPORT' and '@EXPORT_OK' and not a whole lot else.\n"
"\n"
"Unlike Exporter, it is not necessary to inherit from Exporter::Lite; Ie you "
"don't need to write:\n"
"\n"
" @ISA = qw(Exporter::Lite);\n"
"\n"
"Exporter::Lite simply exports its import() function into your namespace. "
"This might be called a \"mix-in\" or a \"role\".\n"
"\n"
"Setting up a module to export its variables and functions is simple:\n"
"\n"
"    package My::Module;     use Exporter::Lite;\n"
"\n"
"    our @EXPORT = qw($Foo bar);\n"
"\n"
"Functions and variables listed in the '@EXPORT' package variable are "
"automatically exported if you use the module and don't explicitly list any "
"imports. Now, when you 'use My::Module', '$Foo' and 'bar()' will show up.\n"
"\n"
"Optional exports are listed in the '@EXPORT_OK' package variable:\n"
"\n"
"    package My::Module;     use Exporter::Lite;\n"
"\n"
"    our @EXPORT_OK = qw($Foo bar);\n"
"\n"
"When My::Module is used, '$Foo' and 'bar()' will _not_ show up, unless you "
"explicitly ask for them:\n"
"\n"
"    use My::Module qw($Foo bar);\n"
"\n"
"Note that when you specify one or more functions or variables to import, "
"then you must also explicitly list any of the default symbols you want to "
"use. So if you have an exporting module:\n"
"\n"
"    package Games;     our @EXPORT    = qw/ pacman defender  /;     our "
"@EXPORT_OK = qw/ galaga centipede /;\n"
"\n"
"Then if you want to use both 'pacman' and 'galaga', then you'd write:\n"
"\n"
"    use Games qw/ pacman galaga /;"
msgstr ""

#. leap/perl-Exporter-Tidy/summary
msgid "Another way of exporting symbols"
msgstr ""

#. leap/perl-Exporter-Tidy/description
msgid ""
"This module serves as an easy, clean alternative to Exporter. Unlike "
"Exporter, it is not subclassed, but it simply exports a custom import() into "
"your namespace.\n"
"\n"
"With Exporter::Tidy, you don't need to use any package global in your "
"module. Even the subs you export can be lexically scoped."
msgstr ""

#. leap/perl-Exporter-Tiny/summary
msgid ""
"An Exporter with the Features of Sub::Exporter but Only Core Dependencies"
msgstr ""

#. leap/perl-Exporter-Tiny/description
msgid ""
"Exporter::Tiny supports many of Sub::Exporter's external-facing features "
"including renaming imported functions with the '-as', '-prefix' and '-"
"suffix' options; explicit destinations with the 'into' option; and "
"alternative installers with the 'installer' option. But it's written in only "
"about 40% as many lines of code and with zero non-core dependencies.\n"
"\n"
"Its internal-facing interface is closer to Exporter.pm, with configuration "
"done through the '@EXPORT', '@EXPORT_OK' and '%EXPORT_TAGS' package "
"variables.\n"
"\n"
"If you are trying to *write* a module that inherits from Exporter::Tiny, "
"then look at:\n"
"\n"
"  * Exporter::Tiny::Manual::QuickStart\n"
"\n"
"  * Exporter::Tiny::Manual::Exporting\n"
"\n"
"If you are trying to *use* a module that inherits from Exporter::Tiny, then "
"look at:\n"
"\n"
"  * Exporter::Tiny::Manual::Importing"
msgstr ""

#. leap/perl-ExtUtils-CBuilder/summary
#, fuzzy
msgid "Compile and link C code for Perl modules"
msgstr "Modules Palm pilote perl"

#. leap/perl-ExtUtils-CBuilder/description
msgid ""
"This module can build the C portions of Perl modules by invoking the "
"appropriate compilers and linkers in a cross-platform manner. It was "
"motivated by the 'Module::Build' project, but may be useful for other "
"purposes as well. However, it is _not_ intended as a general cross-platform "
"interface to all your C building needs. That would have been a much more "
"ambitious goal!"
msgstr ""

#. leap/perl-ExtUtils-CChecker/summary
#, fuzzy
msgid "Configure-time utilities for using C headers,"
msgstr "Programme de configuration pour Window Maker"

#. leap/perl-ExtUtils-CChecker/description
msgid ""
"Often Perl modules are written to wrap functionality found in existing C "
"headers, libraries, or to use OS-specific features. It is useful in the "
"_Build.PL_ or _Makefile.PL_ file to check for the existance of these "
"requirements before attempting to actually build the module.\n"
"\n"
"Objects in this class provide an extension around ExtUtils::CBuilder to "
"simplify the creation of a _.c_ file, compiling, linking and running it, to "
"test if a certain feature is present.\n"
"\n"
"It may also be necessary to search for the correct library to link against, "
"or for the right include directories to find header files in. This class "
"also provides assistance here."
msgstr ""

#. leap/perl-ExtUtils-Config/summary
#, fuzzy
msgid "A wrapper for perl's configuration"
msgstr "yast2-trans-inst-general"

#. leap/perl-ExtUtils-Config/description
msgid ""
"ExtUtils::Config is an abstraction around the %Config hash. By itself it is "
"not a particularly interesting module by any measure, however it ties "
"together a family of modern toolchain modules."
msgstr ""

#. leap/perl-ExtUtils-CppGuess/summary
msgid "Guess C++ Compiler and Flags"
msgstr ""

#. leap/perl-ExtUtils-CppGuess/description
msgid ""
"'ExtUtils::CppGuess' attempts to guess the system's C++ compiler that is "
"compatible with the C compiler that your perl was built with.\n"
"\n"
"It can generate the necessary options to the Module::Build constructor or to "
"ExtUtils::MakeMaker's 'WriteMakefile' function."
msgstr ""

#. leap/perl-ExtUtils-Depends/summary
msgid "Easily build XS extensions that depend on XS extensions"
msgstr ""

#. leap/perl-ExtUtils-Depends/description
msgid ""
"This module tries to make it easy to build Perl extensions that use "
"functions and typemaps provided by other perl extensions. This means that a "
"perl extension is treated like a shared library that provides also a C and "
"an XS interface besides the perl one.\n"
"\n"
"This works as long as the base extension is loaded with the RTLD_GLOBAL flag "
"(usually done with a\n"
"\n"
"\tsub dl_load_flags {0x01}\n"
"\n"
"in the main .pm file) if you need to use functions defined in the module.\n"
"\n"
"The basic scheme of operation is to collect information about a module in "
"the instance, and then store that data in the Perl library where it may be "
"retrieved later. The object can also reformat this information into the data "
"structures required by ExtUtils::MakeMaker's WriteMakefile function.\n"
"\n"
"For information on how to make your module fit into this scheme, see "
"\"hashref = ExtUtils::Depends::load (name)\".\n"
"\n"
"When creating a new Depends object, you give it a name, which is the name of "
"the module you are building. You can also specify the names of modules on "
"which this module depends. These dependencies will be loaded automatically, "
"and their typemaps, header files, etc merged with your new object's stuff. "
"When you store the data for your object, the list of dependencies are stored "
"with it, so that another module depending on your needn't know on exactly "
"which modules yours depends.\n"
"\n"
"For example:\n"
"\n"
"  Gtk2 depends on Glib\n"
"\n"
"  Gnome2::Canvas depends on Gtk2\n"
"\n"
"  ExtUtils::Depends->new ('Gnome2::Canvas', 'Gtk2');      this command "
"automatically brings in all the stuff needed      for Glib, since Gtk2 "
"depends on it.\n"
"\n"
"When the configuration information is saved, it also includes a class method "
"called 'Inline', inheritable by your module. This allows you in your module "
"to simply say at the top:\n"
"\n"
"  package Mymod;   use parent 'Mymod::Install::Files'; # to inherit 'Inline' "
"method\n"
"\n"
"And users of 'Mymod' who want to write inline code (using Inline) will "
"simply be able to write:\n"
"\n"
"  use Inline with => 'Mymod';\n"
"\n"
"And all the necessary header files, defines, and libraries will be added for "
"them.\n"
"\n"
"The 'Mymod::Install::Files' will also implement a 'deps' method, which will "
"return a list of any modules that 'Mymod' depends on - you will not normally "
"need to use this:\n"
"\n"
"  require Mymod::Install::Files;   @deps = Mymod::Install::Files->deps;"
msgstr ""

#. leap/perl-ExtUtils-F77/summary
#, fuzzy
msgid "Simple interface to F77 libs"
msgstr "Interface à sélectionner lors du démarrage :"

#. leap/perl-ExtUtils-F77/description
msgid ""
"This module tries to figure out how to link C programs with Fortran "
"subroutines on your system. Basically one must add a list of Fortran runtime "
"libraries. The problem is their location and name varies with each OS/"
"compiler combination! It was originally developed to make building and "
"installation of the PGPLOT module easier, which links to the pgplot Fortran "
"graphics library. It is now used by a number of perl modules.\n"
"\n"
"This module tries to implement a simple 'rule-of-thumb' database for various "
"flavours of UNIX systems. A simple self-documenting Perl database of "
"knowledge/code for figuring out how to link for various combinations of OS "
"and compiler is embedded in the modules Perl code. Please help save the "
"world by submitted patches for new database entries for your system at "
"https://github.com/PDLPorters/extutils-f77\n"
"\n"
"Note the default on most systems is now to search for a generic 'GNU' "
"compiler which can be gfortran, g77, g95 or fort77 (in that order based on "
"usage) and then find the appropriate link libraries automatically. (This is "
"the 'Generic' 'GNU' database entry in the code.)\n"
"\n"
"The target compiler can be explicitly overriden by setting the environment "
"variable F77, e.g.\n"
"\n"
" % setenv F77 \"x86_64-pc-linux-gnu-gfortran\"  % perl -MExtUtils::F77 -e "
"'print ExtUtils::F77->compiler, \"\\n\"'\n"
"\n"
"The library list which the module returns can be explicitly overridden by "
"setting the environment variable F77LIBS, e.g.\n"
"\n"
"  % setenv F77LIBS \"-lfoo -lbar\"   % perl -MExtUtils::F77 -e 'print "
"ExtUtils::F77->runtime, \"\\n\"'   ..."
msgstr ""

#. leap/perl-ExtUtils-Helpers/summary
msgid "Various portability utilities for module builders"
msgstr ""

#. leap/perl-ExtUtils-Helpers/description
msgid ""
"This module provides various portable helper functions for module building "
"modules."
msgstr ""

#. leap/perl-ExtUtils-InstallPaths/summary
msgid "Build.PL install path logic made easy"
msgstr ""

#. leap/perl-ExtUtils-InstallPaths/description
msgid ""
"This module tries to make install path resolution as easy as possible.\n"
"\n"
"When you want to install a module, it needs to figure out where to install "
"things. The nutshell version of how this works is that default installation "
"locations are determined from the ExtUtils::Config manpage, and they may be "
"individually overridden by using the 'install_path' attribute. An "
"'install_base' attribute lets you specify an alternative installation root "
"like _/home/foo_ and 'prefix' does something similar in a rather different "
"(and more complicated) way. 'destdir' lets you specify a temporary "
"installation directory like _/tmp/install_ in case you want to create "
"bundled-up installable packages.\n"
"\n"
"The following types are supported by default. \n"
"* * lib\n"
"\n"
"  Usually pure-Perl module files ending in _.pm_ or _.pod_. \n"
"* * arch\n"
"\n"
"  \"Architecture-dependent\" module files, usually produced by compiling "
"XS,   the Inline manpage, or similar code. \n"
"* * script\n"
"\n"
"  Programs written in pure Perl. In order to improve reuse, you may want "
"to   make these as small as possible - put the code into modules whenever   "
"possible. \n"
"* * bin\n"
"\n"
"  \"Architecture-dependent\" executable programs, i.e. compiled C code or   "
"something. Pretty rare to see this in a perl distribution, but it   "
"happens. \n"
"* * bindoc\n"
"\n"
"  Documentation for the stuff in 'script' and 'bin'. Usually generated "
"from   the POD in those files. Under Unix, these are manual pages belonging "
"to   the 'man1' category. Unless explicitly set, this is only available on   "
"platforms supporting manpages. \n"
"* * libdoc\n"
"\n"
"  Documentation for the stuff in 'lib' and 'arch'. This is usually   "
"generated from the POD in _.pm_ and _.pod_ files. Under Unix, these are   "
"manual pages belonging to the 'man3' category. Unless explicitly set,   this "
"is only available on platforms supporting manpages. \n"
"* * binhtml\n"
"\n"
"  This is the same as 'bindoc' above, but applies to HTML documents. "
"Unless   explicitly set, this is only available when perl was configured to "
"do so. \n"
"* * libhtml\n"
"\n"
"  This is the same as 'libdoc' above, but applies to HTML documents. "
"Unless   explicitly set, this is only available when perl was configured to "
"do so."
msgstr ""

#. leap/perl-ExtUtils-LibBuilder/summary
#, fuzzy
msgid "Tool to Build C Libraries"
msgstr "Outil pour la création de bibliothèques partagées"

#. leap/perl-ExtUtils-LibBuilder/description
#, fuzzy
msgid "A tool to build C libraries."
msgstr "Outil pour la création de bibliothèques partagées"

#. leap/perl-ExtUtils-MakeMaker/summary
msgid "Create a module Makefile"
msgstr ""

#. leap/perl-ExtUtils-MakeMaker/description
msgid ""
"This utility is designed to write a Makefile for an extension module from a "
"Makefile.PL. It is based on the Makefile.SH model provided by Andy Dougherty "
"and the perl5-porters.\n"
"\n"
"It splits the task of generating the Makefile into several subroutines that "
"can be individually overridden. Each subroutine returns the text it wishes "
"to have written to the Makefile.\n"
"\n"
"As there are various Make programs with incompatible syntax, which use "
"operating system shells, again with incompatible syntax, it is important for "
"users of this module to know which flavour of Make a Makefile has been "
"written for so they'll use the correct one and won't have to face the "
"possibly bewildering errors resulting from using the wrong one.\n"
"\n"
"On POSIX systems, that program will likely be GNU Make; on Microsoft "
"Windows, it will be either Microsoft NMake, DMake or GNU Make. See the "
"section on the L</\"MAKE\"> parameter for details.\n"
"\n"
"ExtUtils::MakeMaker (EUMM) is object oriented. Each directory below the "
"current directory that contains a Makefile.PL is treated as a separate "
"object. This makes it possible to write an unlimited number of Makefiles "
"with a single invocation of WriteMakefile().\n"
"\n"
"All inputs to WriteMakefile are Unicode characters, not just octets. EUMM "
"seeks to handle all of these correctly. It is currently still not possible "
"to portably use Unicode characters in module names, because this requires "
"Perl to handle Unicode filenames, which is not yet the case on Windows.\n"
"\n"
"See L<ExtUtils::MakeMaker::FAQ> for details of the design and usage."
msgstr ""

#. leap/perl-ExtUtils-MakeMaker-CPANfile/summary
msgid "Cpanfile Support for Eumm"
msgstr ""

#. leap/perl-ExtUtils-MakeMaker-CPANfile/description
msgid ""
"ExtUtils::MakeMaker::CPANfile loads 'cpanfile' in your distribution and "
"modifies parameters for 'WriteMakefile' in your Makefile.PL. Just use it "
"instead of ExtUtils::MakeMaker (which should be loaded internally), and "
"prepare 'cpanfile'.\n"
"\n"
"As of version 0.03, ExtUtils::MakeMaker::CPANfile also removes WriteMakefile "
"parameters that the installed version of ExtUtils::MakeMaker doesn't know, "
"to avoid warnings."
msgstr ""

#. leap/perl-ExtUtils-Manifest/summary
msgid "Utilities to write and check a MANIFEST file"
msgstr ""

#. leap/perl-ExtUtils-Manifest/description
msgid "..."
msgstr ""

#. leap/perl-ExtUtils-PkgConfig/summary
#, fuzzy
msgid "Simplistic Interface to Pkg-Config"
msgstr "Interface à sélectionner lors du démarrage :"

#. leap/perl-ExtUtils-PkgConfig/description
msgid ""
"The pkg-config program retrieves information about installed libraries, "
"usually for the purposes of compiling against and linking to them.\n"
"\n"
"ExtUtils::PkgConfig is a very simplistic interface to this utility, intended "
"for use in the Makefile.PL of perl extensions which bind libraries that pkg-"
"config knows. It is really just boilerplate code that you would've written "
"yourself."
msgstr ""

#. leap/perl-ExtUtils-Typemaps-Default/summary
msgid "A set of useful typemaps"
msgstr ""

#. leap/perl-ExtUtils-Typemaps-Default/description
msgid ""
"'ExtUtils::Typemaps::Default' is an 'ExtUtils::Typemaps' subclass that "
"provides a set of default mappings (in addition to what perl itself "
"provides). These default mappings are currently defined as the combination "
"of the mappings provided by the following typemap classes which are provided "
"in this distribution:\n"
"\n"
"the ExtUtils::Typemaps::ObjectMap manpage, the ExtUtils::Typemaps::STL "
"manpage, the ExtUtils::Typemaps::Basic manpage"
msgstr ""

#. leap/perl-ExtUtils-XSpp/summary
msgid "XS for C++"
msgstr ""

#. leap/perl-ExtUtils-XSpp/description
msgid ""
"Anything that does not look like a XS++ directive or a class declaration is "
"passed verbatim to XS. If you want XS++ to ignore code that looks like a XS+"
"+ directive or class declaration, simply surround it with a raw block "
"delimiter like this:\n"
"\n"
"  %{   XS++ won't interpret this   %}"
msgstr ""

#. leap/perl-FFI-CheckLib/summary
msgid "Check that a library is available for FFI"
msgstr ""

#. leap/perl-FFI-CheckLib/description
msgid ""
"This module checks whether a particular dynamic library is available for FFI "
"to use. It is modeled heavily on Devel::CheckLib, but will find dynamic "
"libraries even when development packages are not installed. It also provides "
"a find_lib function that will return the full path to the found dynamic "
"library, which can be feed directly into FFI::Platypus or another FFI system."
msgstr ""

#. leap/perl-Feed-Find/summary
msgid "Syndication feed auto-discovery"
msgstr ""

#. leap/perl-Feed-Find/description
msgid ""
"_Feed::Find_ implements feed auto-discovery for finding syndication feeds, "
"given a URI. It (currently) passes all of the auto-discovery tests at "
"_http://diveintomark.org/tests/client/autodiscovery/_.\n"
"\n"
"_Feed::Find_ will discover the following feed formats: \n"
"* * RSS 0.91 \n"
"* * RSS 1.0 \n"
"* * RSS 2.0 \n"
"* * Atom"
msgstr ""

#. leap/perl-Fennec-Lite/summary
msgid "Minimalist Fennec, the commonly used bits."
msgstr ""

#. leap/perl-Fennec-Lite/description
msgid ""
"the Fennec manpage does a ton, but it may be hard to adopt it all at once. "
"It also is a large project, and has not yet been fully split into component "
"projects. Fennec::Lite takes a minimalist approach to do for Fennec what "
"Mouse does for Moose.\n"
"\n"
"Fennec::Lite is a single module file with no non-core dependencies. It can "
"easily be used by any project, either directly, or by copying it into your "
"project. The file itself is less than 300 lines of code at the time of this "
"writing, that includes whitespace.\n"
"\n"
"This module does not cover any of the more advanced features such as result "
"capturing or SPEC workflows. This module only covers test grouping and group "
"randomization. You can also use the FENNEC_ITEM variable with a group name "
"or line number to run a specific test group only. Test::Builder is used "
"under the hood for TAP output."
msgstr ""

#. leap/perl-File-BaseDir/summary
msgid "Use the Freedesktop.org base directory specification"
msgstr ""

#. leap/perl-File-BaseDir/description
msgid ""
"This module can be used to find directories and files as specified by the "
"Freedesktop.org Base Directory Specification. This specifications gives a "
"mechanism to locate directories for configuration, application data and "
"cache data. It is suggested that desktop applications for e.g. the GNOME, "
"KDE or Xfce platforms follow this layout. However, the same layout can just "
"as well be used for non-GUI applications.\n"
"\n"
"This module forked from File::MimeInfo.\n"
"\n"
"This module follows version 0.6 of BaseDir specification."
msgstr ""

#. leap/perl-File-Basename-Object/summary
msgid "Object-oriented syntax sugar for File::Basename"
msgstr ""

#. leap/perl-File-Basename-Object/description
msgid ""
"File::Basename::Object is an object-oriented wrapper around File::Basename. "
"The goal is to allow pathnames to be presented and manipulated easily.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Tyler \"Crackerjack\" MacDonald <japh@crackerjack.net>"
msgstr ""

#. leap/perl-File-Comments/summary
msgid "Recognizes file formats and extracts format-specific comments"
msgstr ""

#. leap/perl-File-Comments/description
msgid ""
"File::Comments guesses the type of a given file, determines the format used "
"for comments, extracts all comments, and returns them as a reference to an "
"array of chunks. Alternatively, it strips all comments from a file.\n"
"\n"
"Currently supported are Perl scripts, C/C++ programs, Java, makefiles, "
"JavaScript, Python and PHP.\n"
"\n"
"The plugin architecture used by File::Comments makes it easy to add new "
"formats. To support a new format, a new plugin module has to be installed. "
"No modifications to the File::Comments codebase are necessary, new plugins "
"will be picked up automatically.\n"
"\n"
"File::Comments can also be used to simply guess a file's type. It it "
"somewhat more flexible than File::MMagic and File::Type. File types in File::"
"Comments are typically based on file name suffixes (*.c, *.pl, etc.). If no "
"suffix is available, or a given suffix is ambiguous (e.g. if several plugins "
"have registered a handler for the same suffix), then the file's content is "
"used to narrow down the possibilities and arrive at a decision.\n"
"\n"
"WARNING: THIS MODULE IS UNDER DEVELOPMENT, QUALITY IS ALPHA. IF YOU FIND "
"BUGS, OR WANT TO CONTRIBUTE PLUGINS, PLEASE SEND THEM MY WAY."
msgstr ""

#. leap/perl-File-Copy-Recursive/summary
#, fuzzy
msgid "Perl extension for recursively copying files and directories"
msgstr "Interface Perl pour objets URI"

#. leap/perl-File-Copy-Recursive/description
msgid ""
"This module copies and moves directories recursively (or single files, "
"well... singley) to an optional depth and attempts to preserve each file or "
"directory's mode."
msgstr ""

#. leap/perl-File-Copy-Recursive-Reduced/summary
#, fuzzy
msgid "Recursive copying of files and directories within Perl 5 toolchain"
msgstr "Interface Perl pour objets URI"

#. leap/perl-File-Copy-Recursive-Reduced/description
msgid ""
"This library is intended as a not-quite-drop-in replacement for certain "
"functionality provided by CPAN distribution File-Copy-Recursive|http://"
"search.cpan.org/dist/File-Copy-Recursive/. The library provides methods "
"similar enough to that distribution's 'fcopy()', 'dircopy()' and 'rcopy()' "
"functions to be usable in those CPAN distributions often described as being "
"part of the Perl toolchain."
msgstr ""

#. leap/perl-File-DesktopEntry/summary
msgid "Object to handle .desktop files"
msgstr ""

#. leap/perl-File-DesktopEntry/description
msgid ""
"This module is designed to work with _.desktop_ files. The format of these "
"files is specified by the freedesktop \"Desktop Entry\" specification. This "
"module can parse these files but also knows how to run the applications "
"defined by these files.\n"
"\n"
"For this module version 1.0 of the specification was used.\n"
"\n"
"This module was written to support File::MimeInfo::Applications.\n"
"\n"
"Please remember: case is significant for the names of Desktop Entry keys."
msgstr ""

#. leap/perl-File-FcntlLock/summary
msgid "File locking with L<fcntl(2)>"
msgstr ""

#. leap/perl-File-FcntlLock/description
msgid ""
"File locking in Perl is usually done using the 'flock' function. "
"Unfortunately, this only allows locks on whole files and is often "
"implemented in terms of the the flock(2) manpage system function which has "
"some shortcomings (especially concerning locks on remotely mounted file "
"systems) and slightly different behaviour than the fcntl(2) manpage.\n"
"\n"
"Using this module file locking via the fcntl(2) manpage can be done "
"(obviously, this restricts the use of the module to systems that have a the "
"fcntl(2) manpage system call). Before a file (or parts of a file) can be "
"locked, an object simulating a flock structure, containing information in a "
"binary format to be passed to the fcntl(2) manpage for locking requests, "
"must be created and its properties set. Afterwards, by calling the the "
"lock() manpage method a lock can be set and removed or it can be determined "
"if and which process currently holds the lock.\n"
"\n"
"File::FcntlLock (or its alias File::FcntlLock::XS) uses a shared library, "
"build during installation, to call the the fcntl(2) manpage system function "
"directly. If this is unsuitable there are two alternatives, File::FcntlLock::"
"Pure and File::FcntlLock::Inline. Both call the Perl 'fcntl' function "
"instead and use Perl code to assemble and disassemble the structure. For "
"this at some time the (system-dependent) binary layout of the flock "
"structure must have been determined via a program written in C. The "
"difference between File::FcntlLock::Pure and File::FcntlLock::Inline is that "
"for the former this happened when the package is installed while for the "
"latter it is done each time the package is loaded (e.g., with 'use'). Thus, "
"for File::FcntlLock::Inline to work a C compiler must be available. There "
"are some minor differences in the functionality and the behaviour on passing "
"the method for locking invalid arguments to be described below."
msgstr ""

#. leap/perl-File-Find-Rule/summary
msgid "Alternative interface to File::Find"
msgstr ""

#. leap/perl-File-Find-Rule/description
msgid ""
"File::Find::Rule is a friendlier interface to File::Find. It allows you to "
"build rules which specify the desired files and directories."
msgstr ""

#. leap/perl-File-Find-Rule-Perl/summary
msgid "Common rules for searching for Perl things"
msgstr ""

#. leap/perl-File-Find-Rule-Perl/description
msgid ""
"I write a lot of things that muck with Perl files. And it always annoyed me "
"that finding \"perl files\" requires a moderately complex the File::Find::"
"Rule manpage pattern. \n"
"*File::Find::Rule::Perl* provides methods for finding various types Perl-"
"related files, or replicating search queries run on a distribution in "
"various parts of the CPAN ecosystem."
msgstr ""

#. leap/perl-File-Finder/summary
msgid "nice wrapper for File::Find ala find(1)"
msgstr ""

#. leap/perl-File-Finder/description
msgid ""
"'File::Find' is great, but constructing the 'wanted' routine can sometimes "
"be a pain. This module provides a 'wanted'-writer, using syntax that is "
"directly mappable to the _find_ command's syntax.\n"
"\n"
"Also, I find myself (heh) frequently just wanting the list of names that "
"match. With 'File::Find', I have to write a little accumulator, and then "
"access that from a closure. But with 'File::Finder', I can turn the problem "
"inside out.\n"
"\n"
"A 'File::Finder' object contains a hash of 'File::Find' options, and a "
"series of steps that mimic _find_'s predicates. Initially, a 'File::Finder' "
"object has no steps. Each step method clones the previous object's options "
"and steps, and then adds the new step, returning the new object. In this "
"manner, an object can be grown, step by step, by chaining method calls. "
"Furthermore, a partial sequence can be created and held, and used as the "
"head of many different sequences.\n"
"\n"
"For example, a step sequence that finds only files looks like:\n"
"\n"
"  my $files = File::Finder->type('f');\n"
"\n"
"Here, 'type' is acting as a class method and thus a constructor. An instance "
"of 'File::Finder' is returned, containing the one step to verify that only "
"files are selected. We could use this immediately as a 'File::Find::find' "
"wanted routine, although it'd be uninteresting:\n"
"\n"
"  use File::Find;   find($files, \"/tmp\");\n"
"\n"
"Calling a step method on an existing object adds the step, returning the new "
"object:\n"
"\n"
"  my $files_print = $files->print;\n"
"\n"
"And now if we use this with 'find', we get a nice display:\n"
"\n"
"  find($files_print, \"/tmp\");\n"
"\n"
"Of course, we didn't really need that second object: we could have generated "
"it on the fly:\n"
"\n"
"  find($files->print, \"/tmp\");\n"
"\n"
"'File::Find' supports options to modify behavior, such as depth-first "
"searching. The 'depth' step flags this in the options as well:\n"
"\n"
"  my $files_depth_print = $files->depth->print;\n"
"\n"
"However, the 'File::Finder' object needs to be told explictly to generate an "
"options hash for 'File::Find::find' to pass this information along:\n"
"\n"
"  find($files_depth_print->as_options, \"/tmp\");\n"
"\n"
"A 'File::Finder' object, like the _find_ command, supports AND, OR, NOT, and "
"parenthesized sub-expressions. AND binds tighter than OR, and is also "
"implied everywhere that it makes sense. Like _find_, the predicates are "
"computed in a \"short-circuit\" fashion, so that a false to the left of the "
"(implied) AND keeps the right side from being evaluated, including entire "
"parenthesized subexpressions. Similarly, if the left side of an OR is false, "
"the right side is evaluated, and if the left side of the OR is true, the "
"right side is skipped. Nested parens are handled properly. Parens are "
"indicated with the rather ugly 'left' and 'right' methods:\n"
"\n"
"  my $big_or_old_files = $files->left->size(\"+50\")->or->atime(\"+30\")-"
">right;\n"
"\n"
"The parens here correspond directly to the parens in:\n"
"\n"
"  find somewhere -type f '(' -size +50 -o -atime +30 ')'\n"
"\n"
"and are needed so that the OR and the implied ANDs have the right nesting.\n"
"\n"
"Besides passing the constructed 'File::Finder' object to 'File::Finder::"
"find' directly as a 'wanted' routine or an options hash, you can also call "
"'find' implictly, with 'in'. 'in' provides a list of starting points, and "
"returns all filenames that match the criteria.\n"
"\n"
"For example, a list of all names in /tmp can be generated simply with:\n"
"\n"
" my @names = File::Finder->in(\"/tmp\");\n"
"\n"
"For more flexibility, use 'collect' to execute an arbitrary block in a list "
"context, concatenating all the results (similar to 'map'):\n"
"\n"
"  my %sizes = File::Finder     ->collect(sub { $File::Find::name => -s _ }, "
"\"/tmp\");\n"
"\n"
"That's all I can think of for now. The rest is in the detailed reference "
"below."
msgstr ""

#. leap/perl-File-Flock/summary
msgid "File Locking with Flock"
msgstr ""

#. leap/perl-File-Flock/description
msgid ""
"Lock files using the flock() call. If the file to be locked does not exist, "
"then the file is created. If the file was created then it will be removed "
"when it is unlocked assuming it's still an empty file.\n"
"\n"
"Locks can be created by new'ing a *File::Flock* object. Such locks are "
"automatically removed when the object goes out of scope. The *unlock()* "
"method may also be used. \n"
"*lock_rename()* is used to tell File::Flock when a file has been renamed "
"(and thus the internal locking data that is stored based on the filename "
"should be moved to a new name). *unlock()* the new name rather than the "
"original name.\n"
"\n"
"Locks are released on process exit when the process that created the lock "
"exits. Subprocesses that exit do not remove locks. Use forget_locks() or "
"POSIX::_exit() to prevent unlocking on process exit."
msgstr ""

#. leap/perl-File-HomeDir/summary
#, fuzzy
msgid "Find your home and other directories on any platform"
msgstr "Kfind permet de rechercher des dossiers et des fichiers"

#. leap/perl-File-HomeDir/description
msgid ""
"*File::HomeDir* is a module for locating the directories that are \"owned\" "
"by a user (typicaly your user) and to solve the various issues that arise "
"trying to find them consistently across a wide variety of platforms.\n"
"\n"
"The end result is a single API that can find your resources on any platform, "
"making it relatively trivial to create Perl software that works elegantly "
"and correctly no matter where you run it.\n"
"\n"
"This module provides two main interfaces.\n"
"\n"
"The first is a modern File::Spec-style interface with a consistent OO API "
"and different implementation modules to support various platforms. You are\n"
"*strongly* recommended to use this interface.\n"
"\n"
"The second interface is for legacy support of the original 0.07 interface "
"that exported a 'home()' function by default and tied the '%~' variable.\n"
"\n"
"It is generally not recommended that you use this interface, but due to back-"
"compatibility reasons they will remain supported until at least 2010.\n"
"\n"
"The '%~' interface has been deprecated. Documentation was removed in 2009, "
"Unit test were removed in 2011, usage will issue warnings from 2012, and the "
"interface will be removed entirely in 2015 (in line with the general Perl "
"toolchain convention of a 10 year support period for legacy APIs that are "
"potentially or actually in common use)."
msgstr ""

#. leap/perl-File-LibMagic/summary
msgid "Determine MIME types of data or files using libmagic"
msgstr ""

#. leap/perl-File-LibMagic/description
msgid ""
"The 'File::LibMagic' module is a simple perl interface to libmagic from the "
"file package (version 4.x or 5.x). You will need both the library (_libmagic."
"so_) and the header file (_magic.h_) to build this Perl module."
msgstr ""

#. leap/perl-File-Listing/summary
msgid "parse directory listing"
msgstr ""

#. leap/perl-File-Listing/description
msgid ""
"This module exports a single function called parse_dir(), which can be used "
"to parse directory listings.\n"
"\n"
"The first parameter to parse_dir() is the directory listing to parse. It can "
"be a scalar, a reference to an array of directory lines or a glob "
"representing a filehandle to read the directory listing from.\n"
"\n"
"The second parameter is the time zone to use when parsing time stamps in the "
"listing. If this value is undefined, then the local time zone is assumed.\n"
"\n"
"The third parameter is the type of listing to assume. Currently supported "
"formats are 'unix', 'apache' and 'dosftp'. The default value is 'unix'. "
"Ideally, the listing type should be determined automatically.\n"
"\n"
"The fourth parameter specifies how unparseable lines should be treated. "
"Values can be 'ignore', 'warn' or a code reference. Warn means that the perl "
"warn() function will be called. If a code reference is passed, then this "
"routine will be called and the return value from it will be incorporated in "
"the listing. The default is 'ignore'.\n"
"\n"
"Only the first parameter is mandatory.\n"
"\n"
"The return value from parse_dir() is a list of directory entries. In a "
"scalar context the return value is a reference to the list. The directory "
"entries are represented by an array consisting of [ $filename, $filetype, "
"$filesize, $filetime, $filemode ]. The $filetype value is one of the letters "
"'f', 'd', 'l' or '?'. The $filetime value is the seconds since Jan 1, 1970. "
"The $filemode is a bitmask like the mode returned by stat()."
msgstr ""

#. leap/perl-File-MMagic/summary
msgid "Guess file type"
msgstr ""

#. leap/perl-File-MMagic/description
msgid ""
"checktype_filename(), checktype_filehandle() and checktype_contents returns "
"string contains file type with MIME mediatype format."
msgstr ""

#. leap/perl-File-Map/summary
msgid "Memory mapping made simple and safe"
msgstr ""

#. leap/perl-File-Map/description
msgid "File::Map maps files or anonymous memory into perl variables."
msgstr ""

#. leap/perl-File-MimeInfo/summary
msgid "Determine file type from the file name"
msgstr ""

#. leap/perl-File-MimeInfo/description
msgid ""
"This module can be used to determine the mime type of a file. It tries to "
"implement the freedesktop specification for a shared MIME database.\n"
"\n"
"For this module shared-mime-info-spec 0.13 was used.\n"
"\n"
"This package only uses the globs file. No real magic checking is used. The "
"File::MimeInfo::Magic package is provided for magic typing.\n"
"\n"
"If you want to determine the mimetype of data in a memory buffer you should "
"use File::MimeInfo::Magic in combination with IO::Scalar.\n"
"\n"
"This module loads the various data files when needed. If you want to hash "
"data earlier see the 'rehash' methods below."
msgstr ""

#. leap/perl-File-Mork/summary
msgid "Module to Read Mozilla Url History Files"
msgstr ""

#. leap/perl-File-Mork/description
msgid ""
"This is a module that can read the Mozilla URL history file -- normally "
"$HOME/.mozilla/default/*.slt/history.dat -- and extract the id, url, name, "
"hostname, first visted dat, last visited date and visit count.\n"
"\n"
"To find your history file it might be worth using *Mozilla::Backup* which "
"has some platform-independent code for finding the profiles of various "
"Mozilla-isms (including Firefox, Camino, K-Meleon, etc.)."
msgstr ""

#. leap/perl-File-Next/summary
#. leap/perl-File-Next/description
msgid "File-finding iterator"
msgstr ""

#. leap/perl-File-Path/summary
#, fuzzy
msgid "Create or remove directory trees"
msgstr "Examine et optimise les interfaces réseau Ethernet"

#. leap/perl-File-Path/description
msgid ""
"This module provides a convenient way to create directories of arbitrary "
"depth and to delete an entire directory subtree from the filesystem."
msgstr ""

#. leap/perl-File-Path-Tiny/summary
msgid ""
"Recursive versions of mkdir() and rmdir() without as much overhead as Fi[cut]"
msgstr ""

#. leap/perl-File-Path-Tiny/description
msgid ""
"The goal here is simply to provide recursive versions of mkdir() and rmdir() "
"with as little code and overhead as possible.\n"
"\n"
"This module is in no way meant to derogate File::Path and is in no way an "
"endorsement to go out and replace all use of File::Path with File::Path::"
"Tiny.\n"
"\n"
"File::Path is very good at what it does but there's simply a lot happening "
"that we can do without much of the time.\n"
"\n"
"Here are some things File::Path has/does that this module attempts to do "
"without: \n"
"* * multiple interfaces\n"
"\n"
"Backwards compatibility brings in a lot of code and logic that we don't need "
"from here on out. \n"
"* * chdir()s\n"
"\n"
"It forces a ton of chdir()s which could leave you somewhere you're not "
"planning on being and requires much more overhead to do.\n"
"\n"
"This module provides a way to disable that if you know it is safe to do so "
"in your circumstance. \n"
"* * can croak not allowing you to detect and handle failure\n"
"\n"
"Just let me handle errors how I want. Don't make my entire app die or have "
"to wrap it in an eval\n"
"\n"
"The exception here is the security checks can croak, which is what you want. "
"See DIAGNOSTICS for more info. \n"
"* * A well intentioned output system\n"
"\n"
"Just let me do the output how I want. (Nothing, As HTML, print to a "
"filehandle, etc...) \n"
"* * A well intentioned and experimental (IE subject to change) error   "
"handling system.\n"
"\n"
"Just keep it simple and detect failure via a boolean check and do what I "
"want with the error. See \"How can I make/remove multiple paths?\" \n"
"* * According to its POD, removing a tree is apparently not safe unless "
"you   tell it to be with the ‘safe’ or 'keep_root' attributes.\n"
"\n"
"Seems like that should just happen, I don't want to worry about accidentally "
"removing / when I pass it /tmp"
msgstr ""

#. leap/perl-Image-ExifTool/perl-File-RandomAccess/summary
msgid "Random access reads of sequential file or scalar"
msgstr ""

#. leap/perl-Image-ExifTool/perl-File-RandomAccess/description
msgid ""
"Allows random access to sequential file by buffering the file if necessary. "
"Also allows access to data in memory to be accessed as if it were a file."
msgstr ""

#. leap/perl-File-ReadBackwards/summary
msgid "Read a file backwards by lines"
msgstr ""

#. leap/perl-File-ReadBackwards/description
msgid ""
"This module reads a file backwards line by line. It is simple to use, memory "
"efficient and fast. It supports both an object and a tied handle interface.\n"
"\n"
"It is intended for processing log and other similar text files which "
"typically have their newest entries appended to them. By default files are "
"assumed to be plain text and have a line ending appropriate to the OS. But "
"you can set the input record separator string on a per file basis."
msgstr ""

#. leap/perl-File-Remove/summary
#, fuzzy
msgid "Remove files and directories"
msgstr "Fichiers en-têtes et bibliothèques pour EB."

#. leap/perl-File-Remove/description
msgid ""
"*File::Remove::remove* removes files and directories. It acts like\n"
"*/bin/rm*, for the most part. Although 'unlink' can be given a list of "
"files, it will not remove directories; this module remedies that. It also "
"accepts wildcards, * and ?, as arguments for filenames. \n"
"*File::Remove::trash* accepts the same arguments as *remove*, with the "
"addition of an optional, infrequently used \"other platforms\" hashref."
msgstr ""

#. leap/perl-File-Rsync/summary
msgid "Perl Module Interface to Rsync(1) F<Http://Rsync.Samba.Org/Rsync/>"
msgstr ""

#. leap/perl-File-Rsync/description
msgid ""
"Perl Convenience wrapper for the rsync(1) program. Written for _rsync-2.3.2_ "
"and updated for _rsync-3.1.1_ but should perform properly with most recent "
"versions."
msgstr ""

#. leap/perl-File-ShareDir/summary
msgid "Locate per-dist and per-module shared files"
msgstr ""

#. leap/perl-File-ShareDir/description
msgid ""
"The intent of File::ShareDir is to provide a companion to Class::Inspector "
"and File::HomeDir, modules that take a process that is well-known by "
"advanced Perl developers but gets a little tricky, and make it more "
"available to the larger Perl community.\n"
"\n"
"Quite often you want or need your Perl module (CPAN or otherwise) to have "
"access to a large amount of read-only data that is stored on the file-system "
"at run-time.\n"
"\n"
"On a linux-like system, this would be in a place such as /usr/share, however "
"Perl runs on a wide variety of different systems, and so the use of any one "
"location is unreliable.\n"
"\n"
"Perl provides a little-known method for doing this, but almost nobody is "
"aware that it exists. As a result, module authors often go through some very "
"strange ways to make the data available to their code.\n"
"\n"
"The most common of these is to dump the data out to an enormous Perl data "
"structure and save it into the module itself. The result are enormous multi-"
"megabyte .pm files that chew up a lot of memory needlessly.\n"
"\n"
"Another method is to put the data \"file\" after the __DATA__ compiler tag "
"and limit yourself to access as a filehandle.\n"
"\n"
"The problem to solve is really quite simple.\n"
"\n"
"  1. Write the data files to the system at install time.\n"
"\n"
"  2. Know where you put them at run-time.\n"
"\n"
"Perl's install system creates an \"auto\" directory for both every "
"distribution and for every module file.\n"
"\n"
"These are used by a couple of different auto-loading systems to store code "
"fragments generated at install time, and various other modules written by "
"the Perl \"ancient masters\".\n"
"\n"
"But the same mechanism is available to any dist or module to store any sort "
"of data."
msgstr ""

#. leap/perl-File-ShareDir-Install/summary
msgid "Install shared files"
msgstr ""

#. leap/perl-File-ShareDir-Install/description
msgid ""
"File::ShareDir::Install allows you to install read-only data files from a "
"distribution. It is a companion module to File::ShareDir, which allows you "
"to locate these files after installation.\n"
"\n"
"It is a port of Module::Install::Share to ExtUtils::MakeMaker with the "
"improvement of only installing the files you want; '.svn', '.git' and other "
"source-control junk will be ignored.\n"
"\n"
"Please note that this module installs read-only data files; empty "
"directories will be ignored."
msgstr ""

#. leap/perl-File-ShareDir-ProjectDistDir/summary
#. leap/perl-File-ShareDir-ProjectDistDir/description
msgid ""
"Simple set-and-forget using of a '/share' directory in your projects root"
msgstr ""

#. leap/perl-File-Slurp/summary
msgid "Simple and Efficient Reading/Writing of Complete Files"
msgstr ""

#. leap/perl-File-Slurp/description
msgid ""
"This module provides subs that allow you to read or write entire files with "
"one simple call. They are designed to be simple to use, have flexible ways "
"to pass in or get the file contents and to be very efficient. There is also "
"a sub to read in all the files in a directory other than '.' and '..'\n"
"\n"
"These slurp/spew subs work for files, pipes and sockets, stdio, pseudo-"
"files, and the DATA handle. Read more about why slurping files is a good "
"thing in the file 'slurp_article.pod' in the extras/ directory.\n"
"\n"
"If you are interested in how fast these calls work, check out the "
"slurp_bench.pl program in the extras/ directory. It compares many different "
"forms of slurping. You can select the I/O direction, context and file sizes. "
"Use the --help option to see how to run it."
msgstr ""

#. leap/perl-File-Slurp-Tiny/summary
msgid "Simple, Sane and Efficient File Slurper [Discouraged]"
msgstr ""

#. leap/perl-File-Slurp-Tiny/description
msgid ""
"This module provides functions for fast and correct slurping and spewing. "
"All functions are optionally exported."
msgstr ""

#. leap/perl-File-Slurp-Unicode/summary
msgid "Reading/Writing of Complete Files with Character Encoding Support"
msgstr ""

#. leap/perl-File-Slurp-Unicode/description
msgid ""
"This module wraps the File::Slurp manpage and adds character encoding "
"support through the *'encoding'* parameter. It exports the same functions "
"which take all the same parameters as File::Slurp. Please see the the File::"
"Slurp manpage documentation for basic usage; only the differences are "
"described from here on out."
msgstr ""

#. leap/perl-File-Slurper/summary
msgid "Simple, Sane and Efficient Module to Slurp a File"
msgstr ""

#. leap/perl-File-Slurper/description
msgid ""
"This module provides functions for fast and correct slurping and spewing. "
"All functions are optionally exported. All functions throw exceptions on "
"errors, write functions don't return any meaningful value."
msgstr ""

#. leap/perl-File-Sync/summary
msgid "Perl access to fsync() and sync() function calls"
msgstr ""

#. leap/perl-File-Sync/description
msgid ""
"The fsync() function takes a Perl file handle as its only argument, and "
"passes its fileno() to the C function fsync(). It returns _undef_ on "
"failure, or _true_ on success.\n"
"\n"
"The fsync_fd() function is used internally by fsync(); it takes a file "
"descriptor as its only argument.\n"
"\n"
"The sync() function is identical to the C function sync().\n"
"\n"
"This module does *not* export any methods by default, but fsync() is made "
"available as a method of the _FileHandle_ and _IO::Handle_ classes."
msgstr ""

#. leap/perl-File-Tail/summary
#, fuzzy
msgid "Perl extension for reading from continously updated files"
msgstr "Interface Perl pour objets URI"

#. leap/perl-File-Tail/description
msgid ""
"The primary purpose of File::Tail is reading and analysing log files while "
"they are being written, which is especialy usefull if you are monitoring the "
"logging process with a tool like Tobias Oetiker's MRTG.\n"
"\n"
"The module tries very hard NOT to \"busy-wait\" on a file that has little "
"traffic. Any time it reads new data from the file, it counts the number of "
"new lines, and divides that number by the time that passed since data were "
"last written to the file before that. That is considered the average time "
"before new data will be written. When there is no new data to read, 'File::"
"Tail' sleeps for that number of seconds. Thereafter, the waiting time is "
"recomputed dynamicaly. Note that 'File::Tail' never sleeps for more than the "
"number of seconds set by 'maxinterval'.\n"
"\n"
"If the file does not get altered for a while, 'File::Tail' gets suspicious "
"and startschecking if the file was truncated, or moved and recreated. If "
"anything like that had happened, 'File::Tail' will quietly reopen the file, "
"and continue reading. The only way to affect what happens on reopen is by "
"setting the reset_tail parameter (see below). The effect of this is that the "
"scripts need not be aware when the logfiles were rotated, they will just "
"quietly work on.\n"
"\n"
"Note that the sleep and time used are from Time::HiRes, so this module "
"should do the right thing even if the time to sleep is less than one "
"second.\n"
"\n"
"The logwatch script (also included) demonstrates several ways of calling the "
"methods."
msgstr ""

#. leap/perl-File-Temp/summary
msgid "Return name and handle of a temporary file safely"
msgstr ""

#. leap/perl-File-Temp/description
msgid ""
"'File::Temp' can be used to create and open temporary files in a safe way. "
"There is both a function interface and an object-oriented interface. The "
"File::Temp constructor or the tempfile() function can be used to return the "
"name and the open filehandle of a temporary file. The tempdir() function can "
"be used to create a temporary directory.\n"
"\n"
"The security aspect of temporary file creation is emphasized such that a "
"filehandle and filename are returned together. This helps guarantee that a "
"race condition can not occur where the temporary file is created by another "
"process between checking for the existence of the file and its opening. "
"Additional security levels are provided to check, for example, that the "
"sticky bit is set on world writable directories. See the \"safe_level\" "
"manpage for more information.\n"
"\n"
"For compatibility with popular C library functions, Perl implementations of "
"the mkstemp() family of functions are provided. These are, mkstemp(), "
"mkstemps(), mkdtemp() and mktemp().\n"
"\n"
"Additionally, implementations of the standard POSIX tmpnam() and tmpfile() "
"functions are provided if required.\n"
"\n"
"Implementations of mktemp(), tmpnam(), and tempnam() are provided, but "
"should be used with caution since they return only a filename that was valid "
"when function was called, so cannot guarantee that the file will not exist "
"by the time the caller opens the filename.\n"
"\n"
"Filehandles returned by these functions support the seekable methods."
msgstr ""

#. leap/perl-File-Touch/summary
msgid ""
"Update File Access and Modification Times, Optionally Creating Files If "
"Needed"
msgstr ""

#. leap/perl-File-Touch/description
msgid ""
"Here's a list of arguments that can be used with the object-oriented "
"contruction: \n"
"* atime_only => [0|1]\n"
"\n"
"If nonzero, change only the access time of files. Default is zero. \n"
"* mtime_only => [0|1]\n"
"\n"
"If nonzero, change only the modification time of files. Default is zero. \n"
"* no_create => [0|1]\n"
"\n"
"If nonzero, do not create new files. Default is zero. \n"
"* reference => $reference_file\n"
"\n"
"If defined, use timestamps from this file instead of current time. The "
"timestamps are read from the reference file when the object is created, not "
"when '<-'touch>> is invoked. Default is undefined. \n"
"* time => $time\n"
"\n"
"If defined, then this value will be used for both access time and "
"modification time, whichever of those are set. This time is overridden by "
"the 'atime' and 'mtime' arguments, if you use them. \n"
"* atime => $time\n"
"\n"
"If defined, use this time (in epoch seconds) instead of current time for "
"access time. \n"
"* mtime => $time\n"
"\n"
"If defined, use this time (in epoch seconds) instead of current time for "
"modification time."
msgstr ""

#. leap/perl-File-Type/summary
msgid "determine file type using magic"
msgstr ""

#. leap/perl-File-Type/description
msgid ""
"File::Type uses magic numbers (typically at the start of a file) to "
"determine the MIME type of that file.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Paul Mison <pmison at fotango dot com>"
msgstr ""

#. leap/perl-File-Unpack/summary
msgid "An strong archive file unpacker, based on mime-types"
msgstr ""

#. leap/perl-File-Unpack/description
msgid ""
"File::Unpack is an unpacker for archives and files (bz2/gz/zip/tar/cpio/iso/"
"rpm/deb/cab/lzma/7z/rar/...).  We call it strong, because it is not fooled "
"by file suffixes, or multiply wrapped packages. It reliably detects mime-"
"types and recursivly descends into each archive found until it finally "
"exposes all unpackable payload contents. A precise logfile can be written, "
"describing mimetypes and unpack actions. Most of the known archive file "
"formats are supported. Shell-script-style plugins can be added to support "
"additinal formats."
msgstr ""

#. leap/perl-File-Which/summary
#, fuzzy
msgid "Perl implementation of the which utility as an API"
msgstr "Une implémentation portable de MPI"

#. leap/perl-File-Which/description
msgid ""
"File::Which finds the full or relative paths to executable programs on the "
"system. This is normally the function of 'which' utility. 'which' is "
"typically implemented as either a program or a built in shell command. On "
"some platforms, such as Microsoft Windows it is not provided as part of the "
"core operating system. This module provides a consistent API to this "
"functionality regardless of the underlying platform.\n"
"\n"
"The focus of this module is correctness and portability. As a consequence "
"platforms where the current directory is implicitly part of the search path "
"such as Microsoft Windows will find executables in the current directory, "
"whereas on platforms such as UNIX where this is not the case executables in "
"the current directory will only be found if the current directory is "
"explicitly added to the path.\n"
"\n"
"If you need a portable 'which' on the command line in an environment that "
"does not provide it, install App::pwhich which provides a command line "
"interface to this API."
msgstr ""

#. leap/perl-File-chdir/summary
#, fuzzy
msgid "More sensible way to change directories"
msgstr "Un module pour lire les fichiers de configuration .ini"

#. leap/perl-File-chdir/description
msgid ""
"Perl's 'chdir()' has the unfortunate problem of being very, very, very "
"global. If any part of your program calls 'chdir()' or if any library you "
"use calls 'chdir()', it changes the current working directory for the\n"
"*whole* program.\n"
"\n"
"This sucks.\n"
"\n"
"File::chdir gives you an alternative, '$CWD' and '@CWD'. These two variables "
"combine all the power of 'chdir()', File::Spec and Cwd."
msgstr ""

#. leap/perl-File-pushd/summary
msgid "Change Directory Temporarily for a Limited Scope"
msgstr ""

#. leap/perl-File-pushd/description
msgid ""
"File::pushd does a temporary 'chdir' that is easily and automatically "
"reverted, similar to 'pushd' in some Unix command shells. It works by "
"creating an object that caches the original working directory. When the "
"object is destroyed, the destructor calls 'chdir' to revert to the original "
"working directory. By storing the object in a lexical variable with a "
"limited scope, this happens automatically at the end of the scope.\n"
"\n"
"This is very handy when working with temporary directories for tasks like "
"testing; a function is provided to streamline getting a temporary directory "
"from File::Temp.\n"
"\n"
"For convenience, the object stringifies as the canonical form of the "
"absolute pathname of the directory entered. \n"
"*Warning*: if you create multiple 'pushd' objects in the same lexical scope, "
"their destruction order is not guaranteed and you might not wind up in the "
"directory you expect."
msgstr ""

#. leap/perl-FileHandle-Unget/summary
msgid "FileHandle which supports multi-byte unget"
msgstr ""

#. leap/perl-FileHandle-Unget/description
msgid ""
"FileHandle::Unget operates exactly the same as FileHandle, except that it "
"provides a version of ungetc that allows you to unget more than one "
"character. It also provides ungets to unget a string.\n"
"\n"
"This module is useful if the filehandle refers to a stream for which you "
"can't just 'seek()' backwards. Some operating systems support multi-byte "
"'ungetc()', but this is not guaranteed. Use this module if you want a "
"portable solution. In addition, on some operating systems, eof() will not be "
"reset if you ungetc after having read to the end of the file.\n"
"\n"
"NOTE: Using 'sysread()' with 'ungetc()' and other buffering functions is "
"still a bad idea."
msgstr ""

#. leap/perl-Filesys-Df/summary
#, fuzzy
msgid "Perl extension for filesystem disk space information"
msgstr "Extension perl"

#. leap/perl-Filesys-Df/description
msgid ""
"This module provides a way to obtain filesystem disk space information. This "
"is a Unix only distribution. If you want to gather this information for Unix "
"and Windows, use Filesys::DfPortable. The only major benefit of using "
"Filesys::Df over Filesys::DfPortable, is that Filesys::Df supports the use "
"of open filehandles as arguments.\n"
"\n"
"Authors:     Ian Guthrie <IGuthrie@aol.com>"
msgstr ""

#. leap/perl-Filesys-Notify-Simple/summary
#, fuzzy
msgid "Simple and dumb file system watcher"
msgstr "Gestionnaire de fichiers simple"

#. leap/perl-Filesys-Notify-Simple/description
msgid ""
"Filesys::Notify::Simple is a simple but unified interface to get "
"notifications of changes to a given filesystem path. It utilizes inotify2 on "
"Linux, fsevents on OS X, kqueue on FreeBSD and FindFirstChangeNotification "
"on Windows if they're installed, with a fallback to the full directory scan "
"if they're not available.\n"
"\n"
"There are some limitations in this module. If you don't like it, use File::"
"ChangeNotify.\n"
"\n"
"  * There is no file name based filter. Do it in your own code.\n"
"\n"
"  * You can not get types of events (created, updated, deleted).\n"
"\n"
"  * Currently 'wait' method blocks.\n"
"\n"
"In return, this module doesn't depend on any non-core modules. Platform "
"specific optimizations with Linux::Inotify2, Mac::FSEvents, Filesys::Notify::"
"KQueue and Win32::ChangeNotify are truely optional.\n"
"\n"
"NOTE: Using Win32::ChangeNotify may put additional limitations.\n"
"\n"
"  * Win32::ChangeNotify uses FindFirstChangeNotificationA so that Unicode "
"characters can not be handled. On cygwin (1.7 or later), Unicode characters "
"should be able to be handled when Win32::ChangeNotify is not used.\n"
"\n"
"  * If more than 64 directories are included under the specified paths, an "
"error occurrs."
msgstr ""

#. leap/perl-Filesys-Statvfs/summary
#, fuzzy
msgid "Perl extension for statvfs() and fstatvfs()"
msgstr "Interface Perl pour objets URI"

#. leap/perl-Filesys-Statvfs/description
msgid ""
"Interface for statvfs() and fstatvfs()\n"
"\n"
"Unless you need access to the bsize, flag, and namemax values, you should "
"probably look at using Filesys::DfPortable or Filesys::Df instead. They will "
"generally provide you with more functionality and portability.\n"
"\n"
"The module should work with all flavors of Unix that implement the "
"'statvfs()' and 'fstatvfs()' calls. This would include Linux, *BSD, HP-UX, "
"AIX, Solaris, Mac OS X, Irix, Cygwin, etc ...\n"
"\n"
"The 'statvfs()' and 'fstatvfs()' functions will return a list of values, or "
"will return 'undef' and set '$!' if there was an error.\n"
"\n"
"The values returned are described in the statvfs/fstatvfs header or the "
"'statvfs()/fstatvfs()' man page.\n"
"\n"
"The module assumes that if you have 'statvfs()', 'fstatvfs()' will also be "
"available."
msgstr ""

#. leap/perl-Finance-Quote/summary
msgid "Get stock and mutual fund quotes from various exchanges"
msgstr ""

#. leap/perl-Finance-Quote/description
msgid ""
"This module gets stock quotes from various internet sources, including "
"Yahoo! Finance, Fidelity Investments, and the Australian Stock Exchange. "
"There are two methods of using this module -- a functional interface that is "
"deprecated, and an object-orientated method that provides greater "
"flexibility and stability.\n"
"\n"
"With the exception of straight currency exchange rates, all information is "
"returned as a two-dimensional hash (or a reference to such a hash, if called "
"in a scalar context). For example:\n"
"\n"
"    %info = $q->fetch(\"australia\",\"CML\");     print \"The price of CML "
"is \".$info{\"CML\",\"price\"};\n"
"\n"
"The first part of the hash (eg, \"CML\") is referred to as the stock. The "
"second part (in this case, \"price\") is referred to as the label."
msgstr ""

#. leap/perl-FindBin-Real/summary
msgid "Locate directory of original perl script"
msgstr ""

#. leap/perl-FindBin-Real/description
msgid ""
"Locates the full path to the script bin directory to allow the use of paths "
"relative to the bin directory.\n"
"\n"
"This allows a user to setup a directory tree for some software with "
"directories <root>/bin and <root>/lib and then the above example will allow "
"the use of modules in the lib directory without knowing where the software "
"tree is installed.\n"
"\n"
"If perl is invoked using the *-e* option or the perl script is read from "
"'STDIN' then FindBin sets both 'Bin()' and 'RealBin()' return values to the "
"current directory."
msgstr ""

#. leap/perl-Font-AFM/summary
#, fuzzy
msgid "Interface to Adobe Font Metrics Files"
msgstr "Dscription de caratères accentués pour les polices Adobe AFM."

#. leap/perl-Font-AFM/description
msgid ""
"This module implements the Font::AFM class. Objects of this class are "
"initialized from an AFM file and allow you to obtain information about the "
"font and the metrics of the various glyphs in the font.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Gisle Aas <gisle@aas.no>"
msgstr ""

#. leap/perl-Font-FreeType/summary
msgid "Read Font Files and Render Glyphs From Perl Using Freetype2"
msgstr ""

#. leap/perl-Font-FreeType/description
msgid ""
"This module allows Perl programs to conveniently read information from font "
"files. All the font access is done through the FreeType2 library, which "
"supports many formats. It can render images of characters with high-quality "
"hinting and antialiasing, extract metrics information, and extract the "
"outlines of characters in scalable formats like TrueType.\n"
"\n"
"Warning: this module is currently in 'beta' stage. It'll be another release "
"or two before it stabilizes. The API may change in ways that break programs "
"based on it, but I don't think it will change much. Some of the values "
"returned may be wrong, or not scaled correctly. See the _TODO_ file to get a "
"handle on how far along this work is. Contributions welcome, particularly if "
"you know more than I do (which isn't much) about fonts and the FreeType2 "
"library."
msgstr ""

#. leap/perl-Font-TTF/summary
msgid "Perl module for TrueType Font hacking"
msgstr ""

#. leap/perl-Font-TTF/description
msgid ""
"This module allows you to do almost anything to a TrueType/OpenType Font "
"including modify and inspect nearly all tables."
msgstr ""

#. leap/perl-FreezeThaw/summary
msgid "Converting Perl structures to strings and back"
msgstr ""

#. leap/perl-FreezeThaw/description
msgid ""
"Converts data to/from stringified form, appropriate for saving-to/reading-"
"from permanent storage.\n"
"\n"
"Deals with objects, circular lists, repeated appearence of the same refence. "
"Does not deal with overloaded stringify operator yet.\n"
"\n"
"  Author:\tIlya Zakharevich"
msgstr ""

#. leap/perl-Furl/summary
msgid "Lightning-fast URL fetcher"
msgstr ""

#. leap/perl-Furl/description
msgid ""
"Furl is yet another HTTP client library. LWP is the de facto standard HTTP "
"client for Perl 5, but it is too slow for some critical jobs, and too "
"complex for weekend hacking. Furl resolves these issues. Enjoy it!"
msgstr ""

#. leap/perl-Fuse/summary
msgid "Write filesystems in Perl using FUSE"
msgstr ""

#. leap/perl-Fuse/description
msgid ""
"This lets you implement filesystems in perl, through the FUSE (Filesystem in "
"USErspace) kernel/lib interface."
msgstr ""

#. leap/perl-Future/summary
msgid "Represent an operation awaiting completion"
msgstr ""

#. leap/perl-Future/description
msgid ""
"A 'Future' object represents an operation that is currently in progress, or "
"has recently completed. It can be used in a variety of ways to manage the "
"flow of control, and data, through an asynchronous program.\n"
"\n"
"Some futures represent a single operation and are explicitly marked as ready "
"by calling the 'done' or 'fail' methods. These are called \"leaf\" futures "
"here, and are returned by the 'new' constructor.\n"
"\n"
"Other futures represent a collection of sub-tasks, and are implicitly marked "
"as ready depending on the readiness of their component futures as required. "
"These are called \"convergent\" futures here as they converge control and "
"data-flow back into one place. These are the ones returned by the various "
"'wait_*' and 'need_*' constructors.\n"
"\n"
"It is intended that library functions that perform asynchronous operations "
"would use future objects to represent outstanding operations, and allow "
"their calling programs to control or wait for these operations to complete. "
"The implementation and the user of such an interface would typically make "
"use of different methods on the class. The methods below are documented in "
"two sections; those of interest to each side of the interface.\n"
"\n"
"It should be noted however, that this module does not in any way provide an "
"actual mechanism for performing this asynchronous activity; it merely "
"provides a way to create objects that can be used for control and data flow "
"around those operations. It allows such code to be written in a neater, "
"forward-reading manner, and simplifies many common patterns that are often "
"involved in such situations.\n"
"\n"
"See also Future::Utils which contains useful loop-constructing functions, to "
"run a future-returning function repeatedly in a loop.\n"
"\n"
"Unless otherwise noted, the following methods require at least version "
"_0.08_."
msgstr ""

#. leap/perl-GD/summary
#, fuzzy
msgid "Interface to Gd Graphics Library"
msgstr "Interface python pourla bibliothèque gdbm"

#. leap/perl-GD/description
msgid ""
"*GD.pm* is a Perl interface to Thomas Boutell's gd graphics library (version "
"2.01 or higher; see below). GD allows you to create color drawings using a "
"large number of graphics primitives, and emit the drawings as PNG files."
msgstr ""

#. leap/perl-GD-Barcode/summary
msgid "Create barcode image with GD"
msgstr ""

#. leap/perl-GD-Barcode/description
msgid ""
"GD::Barcode is a subclass of GD and allows you to create barcode image with "
"GD. This module based on \"Generate Barcode Ver 1.02 By Shisei Hanai "
"97/08/22\".\n"
"\n"
"From 1.14, you can use this module even if no GD (except plot method)."
msgstr ""

#. leap/perl-GD-Graph3d/summary
#, fuzzy
msgid "3d extension for perl-GDGraph"
msgstr "Outils de visualisation de Graphiques"

#. leap/perl-GD-Graph3d/description
msgid ""
"This is the GD::Graph3d extensions module. It provides 3D graphs for the GD::"
"Graph module by Martien Verbruggen, which in turn generates graph using "
"Lincoln Stein's GD.pm."
msgstr ""

#. leap/perl-GDGraph/summary
#. leap/perl-GDGraph/description
msgid "Produces charts with GD"
msgstr ""

#. leap/perl-GDTextUtil/summary
#. leap/perl-GDTextUtil/description
#, fuzzy
msgid "GDTextUtil Perl module"
msgstr "Modules Palm pilote perl"

#. leap/perl-GStreamer1/summary
msgid "Perl interface to the GStreamer library"
msgstr ""

#. leap/perl-GStreamer1/description
msgid ""
"This package provides perl bindings for GStreamer 1.x. GStreamer is a "
"library for constructing graphs of media-handling components. The "
"applications it supports range from simple OGG Vorbis playback, audio/video "
"streaming to complex audio (mixing) and video (non-linear editing) "
"processing."
msgstr ""

#. leap/perl-Geo-Coordinates-UTM/summary
#, fuzzy
msgid "Perl extension for Latitude Longitude conversions"
msgstr "Interface Perl pour objets URI"

#. leap/perl-Geo-Coordinates-UTM/description
msgid ""
"This module will translate latitude longitude coordinates to Universal "
"Transverse Mercator(UTM) coordinates and vice versa."
msgstr ""

#. leap/perl-Geography-Countries/summary
msgid "2-letter, 3-letter, and numerical codes for countries"
msgstr ""

#. leap/perl-Geography-Countries/description
msgid ""
"This module maps country names, and their 2-letter, 3-letter and numerical "
"codes, as defined by the ISO-3166 maintenance agency [1], and defined by the "
"UNSD."
msgstr ""

#. leap/perl-Getopt-ArgvFile/summary
msgid "Perl Module to interpolate Script Options from Files into @ARGV"
msgstr ""

#. leap/perl-Getopt-ArgvFile/description
msgid ""
"This module simply interpolates option file hints in @ARGV by the contents "
"of the pointed files. This enables option reading from files instead of or "
"additional to the usual reading from the command line.\n"
"\n"
"Alternatively, you can process any array instead of @ARGV which is used by "
"default and mentioned mostly in this manual.\n"
"\n"
"The interpolated @ARGV could be subsequently processed by the usual option "
"handling, e.g. by a Getopt::xxx module. Getopt::ArgvFile does not perform "
"any option handling itself, it only prepares the array @ARGV."
msgstr ""

#. leap/perl-Getopt-Long-Descriptive/summary
msgid "Getopt::Long, but simpler and more powerful"
msgstr ""

#. leap/perl-Getopt-Long-Descriptive/description
msgid ""
"Getopt::Long::Descriptive is yet another Getopt library. It's built atop "
"Getopt::Long, and gets a lot of its features, but tries to avoid making you "
"think about its huge array of options.\n"
"\n"
"It also provides usage (help) messages, data validation, and a few other "
"useful features."
msgstr ""

#. leap/perl-Getopt-Tabular/summary
msgid "table-driven argument parsing for Perl 5"
msgstr ""

#. leap/perl-Getopt-Tabular/description
msgid ""
"*Getopt::Tabular* is a Perl 5 module for table-driven argument parsing, "
"vaguely inspired by John Ousterhout's Tk_ParseArgv. All you really need to "
"do to use the package is set up a table describing all your command-line "
"options, and call &GetOptions with three arguments: a reference to your "
"option table, a reference to '@ARGV' (or something like it), and an optional "
"third array reference (say, to '@newARGV'). &GetOptions will process all "
"arguments in '@ARGV', and copy any leftover arguments (i.e. those that are "
"not options or arguments to some option) to the '@newARGV' array. (If the "
"'@newARGV' argument is not supplied, 'GetOptions' will replace '@ARGV' with "
"the stripped-down argument list.) If there are any invalid options, "
"'GetOptions' will print an error message and return 0.\n"
"\n"
"Before I tell you all about why Getopt::Tabular is a wonderful thing, let me "
"explain some of the terminology that will keep popping up here. \n"
"* argument\n"
"\n"
"  any single word appearing on the command-line, i.e. one element of the   "
"'@ARGV' array. \n"
"* option\n"
"\n"
"  an argument that starts with a certain sequence of characters; the   "
"default is \"-\". (If you like GNU-style options, you can change this to   "
"\"--\".) In most Getopt::Tabular-based applications, options can come   "
"anywhere on the command line, and their order is unimportant (unless one   "
"option overrides a previous option). Also, Getopt::Tabular will allow any   "
"non-ambiguous abbreviation of options. \n"
"* option argument\n"
"\n"
"  (or _value_) an argument that immediately follows certain types of   "
"options. For instance, if '-foo' is a scalar-valued integer option, and   '-"
"foo 3' appears on the command line, then '3' will be the argument to   '-"
"foo'. \n"
"* option type\n"
"\n"
"  controls how 'GetOptions' deals with an option and the arguments that   "
"follow it. (Actually, for most option types, the type interacts with the   "
"'num_values' field, which determines whether the option is scalar- or   "
"vector-valued. This will be fully explained in due course.)"
msgstr ""

#. leap/perl-Git-Version-Compare/summary
msgid "Functions to compare Git versions"
msgstr ""

#. leap/perl-Git-Version-Compare/description
msgid ""
"Git::Version::Compare contains a selection of subroutines that make dealing "
"with Git-related things (like versions) a little bit easier.\n"
"\n"
"The strings to compare can be version numbers, tags from 'git.git' or the "
"output of 'git version' or 'git describe'.\n"
"\n"
"These routines collect the knowledge about Git versions that was accumulated "
"while developing Git::Repository."
msgstr ""

#. leap/perl-Glib/summary
#, fuzzy
msgid "Perl wrappers for the GLib utility and Object libraries"
msgstr "Fichiers de développement pour les bibliothèques libdat et libapl."

#. leap/perl-Glib/description
msgid ""
"This wrapper attempts to provide a perlish interface while remaining as true "
"as possible to the underlying C API, so that any reference materials you can "
"find on using GLib may still apply to using the libraries from perl. This "
"module also provides facilities for creating wrappers for other GObject-"
"based libraries. The SEE ALSO section contains pointers to all sorts of good "
"information."
msgstr ""

#. leap/perl-Glib-Object-Introspection/summary
#. leap/perl-Glib-Object-Introspection/description
msgid "Dynamically create Perl language bindings"
msgstr ""

#. leap/perl-Gnome2/summary
#, fuzzy
msgid "Perl interface to the 2.x series of the GNOME libraries"
msgstr ""
"Interface Perl donnant accès à une partie de la bibliothèque de compression "
"info-zip zlib"

#. leap/perl-Gnome2/description
msgid ""
"Since this module tries to stick very closely to the C API, the "
"documentation found at\n"
"\n"
"  http://developer.gnome.org/libgnome\n"
"\n"
"and\n"
"\n"
"  http://developer.gnome.org/libgnomeui\n"
"\n"
"is the canonical reference.\n"
"\n"
"In addition to that, there's also the automatically generated API "
"documentation: Gnome2::index(3pm).\n"
"\n"
"The mapping described in Gtk2::api(3pm) also applies to this module.\n"
"\n"
"To discuss this module, ask questions and flame/praise the authors, join gtk-"
"perl-list@gnome.org at lists.gnome.org."
msgstr ""

#. leap/perl-Gnome2-Canvas/summary
#, fuzzy
msgid "Gnome2-Canvas Perl module"
msgstr "Modules Palm pilote perl"

#. leap/perl-Gnome2-Canvas/description
msgid ""
"The Gnome2::Canvas module allows a perl developer to use the GnomeCanvas "
"widget with Gtk2-Perl.  Find out more about Gnome+ at http://www.gnome.org.\n"
"\n"
"Like the Gtk2 module on which it depends, Gnome2::Canvas follows the C API "
"of libgnomecanvas-2.0 as closely as possible while still being perlish. "
"Thus, the C API reference remains the canonical documentation.\n"
"\n"
"To discuss gtk2-perl, ask questions and flame/praise the authors, join gtk-"
"perl-list@gnome.org at lists.gnome.org.\n"
"\n"
"Also have a look at the gtk2-perl website and sourceforge project page, "
"http://gtk2-perl.sourceforge.net"
msgstr ""

#. leap/perl-Gnome2-GConf/summary
msgid "Perl wrappers for the GConf configuration engine"
msgstr ""

#. leap/perl-Gnome2-GConf/description
msgid ""
"Perl bindings to the 2.x series of the Gnome widget set.  This module allows "
"you to write graphical user interfaces in a perlish and object-oriented way, "
"freeing you from the casting and memory management in C, yet remaining very "
"close in spirit to original API."
msgstr ""

#. leap/perl-Gnome2-VFS/summary
msgid "Perl interface to the 2.x series of the GNOME VFS library"
msgstr ""

#. leap/perl-Gnome2-VFS/description
msgid ""
"Since this module tries to stick very closely to the C API, the "
"documentation found at\n"
"\n"
"  L<http://developer.gnome.org/doc/API/2.0/gnome-vfs-2.0/>\n"
"\n"
"is the canonical reference.\n"
"\n"
"In addition to that, there's also the automatically generated API "
"documentation: the Gnome2::VFS::index manpage.\n"
"\n"
"The mapping described in the Gtk2::api manpage also applies to this module.\n"
"\n"
"To discuss this module, ask questions and flame/praise the authors, join gtk-"
"perl-list@gnome.org at lists.gnome.org."
msgstr ""

#. leap/perl-Gnome2-Wnck/summary
#, fuzzy
msgid "Perl interface to the Window Navigator Construction Kit"
msgstr "Interface Perl vers DNS Resolver"

#. leap/perl-Gnome2-Wnck/description
msgid ""
"This module allows you to use the Window Navigator Construction Kit library "
"(libwnck for short) from Perl.\n"
"\n"
"The index of the automatically generated API documentation can be accessed "
"with:\n"
"\n"
"  perldoc Gnome2::Wnck::index"
msgstr ""

#. leap/perl-GnuPG-Interface/summary
#, fuzzy
msgid "Perl interface to GnuPG"
msgstr "Interface Perl vers DNS Resolver"

#. leap/perl-GnuPG-Interface/description
msgid ""
"GnuPG::Interface and its associated modules are designed to provide an "
"object-oriented method for interacting with GnuPG, being able to perform "
"functions such as but not limited to encrypting, signing, decryption, "
"verification, and key-listing parsing."
msgstr ""

#. leap/perl-Goo-Canvas/summary
#. leap/perl-Goo-Canvas/description
#, fuzzy
msgid "Goo::Canvas Perl module"
msgstr "Modules Palm pilote perl"

#. leap/perl-Graph/summary
msgid "Graph Data Structures and Algorithms"
msgstr ""

#. leap/perl-Graph/description
msgid "graph data structures and algorithms"
msgstr ""

#. leap/perl-GraphViz/summary
msgid "Interface to AT&T's GraphViz. Deprecated. See GraphViz2"
msgstr ""

#. leap/perl-GraphViz/description
msgid ""
"This module provides an interface to layout and image generation of directed "
"and undirected graphs in a variety of formats (PostScript, PNG, etc.) using "
"the \"dot\", \"neato\", \"twopi\", \"circo\" and \"fdp\" programs from the "
"Graphviz project (http://www.graphviz.org/ or http://www.research.att.com/sw/"
"tools/graphviz/).\n"
"\n"
"GraphViz is deprecated in favour of GraphViz2."
msgstr ""

#. leap/perl-Graphics-ColorUtils/summary
msgid "Easy-to-use color space conversions and more"
msgstr ""

#. leap/perl-Graphics-ColorUtils/description
msgid ""
"This modules provides some utility functions to handle colors and color "
"space conversions.\n"
"\n"
"The interface has been kept simple, so that most functions can be called "
"\"inline\" when making calls to graphics libraries such as GD, Tk, or when "
"generating HTML/CSS. (E.g. for GD: '$c = $img->colorAllocate( hsv2rgb( 270, "
"0.5, 0.3 ) );'.)\n"
"\n"
"Features: \n"
"* Color Space Conversions\n"
"\n"
"  Color space conversions, in particular between the \"intuitive\" color   "
"spaces HSV (Hue/Saturation/Value) and HLS (Hue/Lightness/Saturation) to   "
"and from RGB (Red/Green/Blue). \n"
"* Color Lookup\n"
"\n"
"  Color lookup by name for three standard sets of colors: WWW/CSS, SVG, "
"and   X11. \n"
"* Color Gradients\n"
"\n"
"  Management of color gradients, which can be indexed by a floating point   "
"number in the range 0..1. (Mostly intended for false-color data   "
"visualization.)"
msgstr ""

#. leap/perl-Gravatar-URL/summary
msgid "Make URLs for Gravatars from an email address"
msgstr ""

#. leap/perl-Gravatar-URL/description
msgid ""
"A Gravatar is a Globally Recognized Avatar for a given email address. This "
"allows you to have a global picture associated with your email address. You "
"can look up the Gravatar for any email address by constructing a URL to get "
"the image from gravatar.com. This module does that.\n"
"\n"
"Examples of use include the author faces on http://search.cpan.org.\n"
"\n"
"See http://gravatar.com for more info."
msgstr ""

#. leap/perl-Growl-GNTP/summary
#, fuzzy
msgid "Perl implementation of GNTP Protocol (Client Part)"
msgstr "Module Perl pour la création et la manipulation de fichiers tar"

#. leap/perl-Growl-GNTP/description
#, fuzzy
msgid "Growl::GNTP is Perl implementation of GNTP Protocol (Client Part)"
msgstr "Module Perl pour la création et la manipulation de fichiers tar"

#. leap/perl-Gtk2/summary
#, fuzzy
msgid "Perl interface to the 2.x series of the Gimp Toolkit library"
msgstr ""
"Interface Perl donnant accès à une partie de la bibliothèque de compression "
"info-zip zlib"

#. leap/perl-Gtk2/description
msgid ""
"The Gtk2 module allows a Perl developer to use the Gtk+ graphical user "
"interface library. Find out more about Gtk+ at http://www.gtk.org.\n"
"\n"
"The GTK+ Reference Manual is also a handy companion when writing Gtk "
"programs in any language. http://developer.gnome.org/doc/API/2.0/gtk/ The "
"Perl bindings follow the C API very closely, and the C reference "
"documentation should be considered the canonical source.\n"
"\n"
"To discuss gtk2-perl, ask questions and flame/praise the authors, join gtk-"
"perl-list@gnome.org at lists.gnome.org.\n"
"\n"
"Also have a look at the gtk2-perl website and sourceforge project page, "
"http://gtk2-perl.sourceforge.net"
msgstr ""

#. leap/perl-Gtk2-AppIndicator/summary
msgid "Perl interface to the libappindicator"
msgstr ""

#. leap/perl-Gtk2-AppIndicator/description
msgid ""
"This package provides perl bindings for libappindicator. libappindicator is "
"a library which provides a tray icon in desktop environments via "
"StatusNotifierItem implementation."
msgstr ""

#. leap/perl-Gtk2-ImageView/summary
msgid "Perl bindings to the GtkImageView image viewer widget"
msgstr ""

#. leap/perl-Gtk2-ImageView/description
msgid ""
"The Gtk2::ImageView module allows a Perl developer to use the GtkImageView "
"image viewer widget. Find out more about GtkImageView at http://trac.bjourne."
"webfactional.com/.\n"
"\n"
"To discuss Gtk2::ImageView or gtk2-perl, ask questions and flame/praise the "
"authors, join gtk-perl-list@gnome.org at lists.gnome.org."
msgstr ""

#. leap/perl-Gtk2-Unique/summary
#, fuzzy
msgid "Perl bindings for the C library \"libunique\""
msgstr "Environnement de bureau KDE pour serveur"

#. leap/perl-Gtk2-Unique/description
msgid ""
"Perl bindings for the C library \"libunique\" that provides a mechanism for "
"writing single instance applications. If you launch a single instance "
"application twice, the second instance will either just quit or will send a "
"message to the running instance."
msgstr ""

#. leap/perl-Gtk3/summary
#, fuzzy
msgid "Perl interface to the 3.x series of the gtk+ toolkit"
msgstr ""
"Interface Perl donnant accès à une partie de la bibliothèque de compression "
"info-zip zlib"

#. leap/perl-Gtk3/description
msgid ""
"The 'Gtk3' module allows a Perl developer to use the gtk+ graphical user "
"interface library. Find out more about gtk+ at http://www.gtk.org.\n"
"\n"
"The gtk+ reference manual is also a handy companion when writing 'Gtk3' "
"programs in Perl: http://developer.gnome.org/gtk3/stable/. The Perl bindings "
"follow the C API very closely, and the C reference documentation should be "
"considered the canonical source. The principles underlying the mapping from "
"C to Perl are explained in the documentation of Glib::Object::Introspection, "
"on which 'Gtk3' is based.\n"
"\n"
"Glib::Object::Introspection also comes with the 'perli11ndoc' program which "
"displays the API reference documentation of all installed libraries "
"organized in accordance with these principles."
msgstr ""

#. leap/perl-Guard/summary
msgid "Safe Cleanup Blocks"
msgstr ""

#. leap/perl-Guard/description
msgid ""
"This module implements so-called \"guards\". A guard is something (usually "
"an object) that \"guards\" a resource, ensuring that it is cleaned up when "
"expected.\n"
"\n"
"Specifically, this module supports two different types of guards: guard "
"objects, which execute a given code block when destroyed, and scoped guards, "
"which are tied to the scope exit."
msgstr ""

#. leap/perl-HTML-Clean/summary
#, fuzzy
msgid "Cleans up HTML code for web browsers, not humans"
msgstr "Nettoye le code HTML"

#. leap/perl-HTML-Clean/description
msgid ""
"The HTML::Clean module encapsulates a number of common techniques for "
"minimizing the size of HTML files. You can typically save between 10% and "
"50% of the size of a HTML file using these methods. It provides the "
"following features: \n"
"* Remove unneeded whitespace (beginning of line, etc) \n"
"* Remove unneeded META elements. \n"
"* Remove HTML comments (except for styles, javascript and SSI) \n"
"* Replace tags with equivalent shorter tags (<strong> --> <b>) \n"
"* etc.\n"
"\n"
"The entire process is configurable, so you can pick and choose what you want "
"to clean."
msgstr ""

#. leap/perl-HTML-Element-Extended/summary
#, fuzzy
msgid "Extension for HTML::Element"
msgstr "Extensions pour MediaWiki."

#. leap/perl-HTML-Element-Extended/description
msgid ""
"HTML-Element-Extended is a package of several enhanced HTML::Element "
"classes, most of which arose during the effort to implement an HTML::Element "
"based table class.\n"
"\n"
"The modules are:         HTML::ElementTable         HTML::"
"ElementSuper         HTML::ElementGlob         HTML::ElementRaw\n"
"\n"
"The resulting functionality enables:         tables         element "
"globs         element coordinates         content replacement         "
"content wrapping         element cloning         raw HTML string adoption"
msgstr ""

#. leap/perl-HTML-Encoding/summary
msgid "Determine the encoding of HTML/XML/XHTML documents"
msgstr ""

#. leap/perl-HTML-Encoding/description
msgid ""
"HTML::Encoding helps to determine the encoding of HTML and XML/XHTML "
"documents."
msgstr ""

#. leap/perl-HTML-FillInForm/summary
msgid "Populates HTML Forms with data"
msgstr ""

#. leap/perl-HTML-FillInForm/description
msgid ""
"This module fills in an HTML form with data from a Perl data structure, "
"allowing you to keep the HTML and Perl separate.\n"
"\n"
"Here are two common use cases:\n"
"\n"
"1. A user submits an HTML form without filling out a required field. You "
"want to redisplay the form with all the previous data in it, to make it easy "
"for the user to see and correct the error.\n"
"\n"
"2. You have just retrieved a record from a database and need to display it "
"in an HTML form."
msgstr ""

#. leap/perl-HTML-Form/summary
msgid "Class that represents an HTML form element"
msgstr ""

#. leap/perl-HTML-Form/description
msgid ""
"Objects of the 'HTML::Form' class represents a single HTML '<form> ... </"
"form>' instance. A form consists of a sequence of inputs that usually have "
"names, and which can take on various values. The state of a form can be "
"tweaked and it can then be asked to provide 'HTTP::Request' objects that can "
"be passed to the request() method of 'LWP::UserAgent'."
msgstr ""

#. leap/perl-HTML-FormHandler/summary
msgid "HTML forms using Moose"
msgstr ""

#. leap/perl-HTML-FormHandler/description
msgid ""
"*** Although documentation in this file provides some overview, it is mainly "
"intended for API documentation. See HTML::FormHandler::Manual::Intro for an "
"introduction, with links to other documentation.\n"
"\n"
"HTML::FormHandler maintains a clean separation between form construction and "
"form rendering. It allows you to define your forms and fields in a number of "
"flexible ways. Although it provides renderers for HTML, you can define "
"custom renderers for any kind of presentation.\n"
"\n"
"HTML::FormHandler allows you to define form fields and validators. It can be "
"used for both database and non-database forms, and will automatically update "
"or create rows in a database. It can be used to process structured data that "
"doesn't come from an HTML form.\n"
"\n"
"One of its goals is to keep the controller/application program interface as "
"simple as possible, and to minimize the duplication of code. In most cases, "
"interfacing your controller to your form is only a few lines of code.\n"
"\n"
"With FormHandler you shouldn't have to spend hours trying to figure out how "
"to make a simple HTML change that would take one minute by hand. Because you "
"_can_ do it by hand. Or you can automate HTML generation as much as you "
"want, with template widgets or pure Perl rendering classes, and stay "
"completely in control of what, where, and how much is done automatically. "
"You can define custom renderers and display your rendered forms however you "
"want.\n"
"\n"
"You can split the pieces of your forms up into logical parts and compose "
"complete forms from FormHandler classes, roles, fields, collections of "
"validations, transformations and Moose type constraints. You can write "
"custom methods to process forms, add any attribute you like, and use Moose "
"method modifiers. FormHandler forms are Perl classes, so there's a lot of "
"flexibility in what you can do.\n"
"\n"
"HTML::FormHandler provides rendering through roles which are applied to form "
"and field classes (although there's no reason you couldn't write a renderer "
"as an external object either). There are currently two flavors: all-in-one "
"solutions like HTML::FormHandler::Render::Simple and HTML::FormHandler::"
"Render::Table that contain methods for rendering field widget classes, and "
"the HTML::FormHandler::Widget roles, which are more atomic roles which are "
"automatically applied to fields and form. See HTML::FormHandler::Manual::"
"Rendering for more details. (And you can easily use hand-built forms - "
"FormHandler doesn't care.)\n"
"\n"
"The typical application for FormHandler would be in a Catalyst, DBIx::Class, "
"Template Toolkit web application, but use is not limited to that. "
"FormHandler can be used in any Perl application.\n"
"\n"
"More Formhandler documentation and a tutorial can be found in the manual at "
"HTML::FormHandler::Manual."
msgstr ""

#. leap/perl-HTML-Format/summary
#. leap/perl-HTML-Format/description
msgid "Base class for HTML formatters"
msgstr ""

#. leap/perl-HTML-FormatText-WithLinks/summary
msgid "HTML to text conversion with links as footnotes"
msgstr ""

#. leap/perl-HTML-FormatText-WithLinks/description
msgid ""
"HTML::FormatText::WithLinks takes HTML and turns it into plain text but "
"prints all the links in the HTML as footnotes. By default, it attempts to "
"mimic the format of the lynx text based web browser's --dump option."
msgstr ""

#. leap/perl-HTML-Parser/summary
msgid "HTML parser class"
msgstr ""

#. leap/perl-HTML-Parser/description
msgid ""
"Objects of the 'HTML::Parser' class will recognize markup and separate it "
"from plain text (alias data content) in HTML documents. As different kinds "
"of markup and text are recognized, the corresponding event handlers are "
"invoked.\n"
"\n"
"'HTML::Parser' is not a generic SGML parser. We have tried to make it able "
"to deal with the HTML that is actually \"out there\", and it normally parses "
"as closely as possible to the way the popular web browsers do it instead of "
"strictly following one of the many HTML specifications from W3C. Where there "
"is disagreement, there is often an option that you can enable to get the "
"official behaviour.\n"
"\n"
"The document to be parsed may be supplied in arbitrary chunks. This makes on-"
"the-fly parsing as documents are received from the network possible.\n"
"\n"
"If event driven parsing does not feel right for your application, you might "
"want to use 'HTML::PullParser'. This is an 'HTML::Parser' subclass that "
"allows a more conventional program structure."
msgstr ""

#. leap/perl-HTML-RewriteAttributes/summary
msgid "Concise Attribute Rewriting"
msgstr ""

#. leap/perl-HTML-RewriteAttributes/description
msgid ""
"'HTML::RewriteAttributes' is designed for simple yet powerful HTML attribute "
"rewriting.\n"
"\n"
"You simply specify a callback to run for each attribute and we do the rest "
"for you.\n"
"\n"
"This module is designed to be subclassable to make handling special cases "
"eaiser. See the source for methods you can override."
msgstr ""

#. leap/perl-HTML-Scrubber/summary
#, fuzzy
msgid "Perl extension for scrubbing/sanitizing HTML"
msgstr "Interface Perl pour objets URI"

#. leap/perl-HTML-Scrubber/description
msgid ""
"If you want to \"scrub\" or \"sanitize\" html input in a reliable and "
"flexible fashion, then this module is for you.\n"
"\n"
"I wasn't satisfied with HTML::Sanitizer because it is based on HTML::"
"TreeBuilder, so I thought I'd write something similar that works directly "
"with HTML::Parser."
msgstr ""

#. leap/perl-HTML-SimpleParse/summary
#, fuzzy
msgid "a bare-bones HTML parser"
msgstr "un programme d'analyse syntaxique de HTML"

#. leap/perl-HTML-SimpleParse/description
msgid ""
"This is the HTML::SimpleParse module.  It is a bare-bones HTML parser, "
"similar to HTML::Parser, but with a couple important distinctions:\n"
"\n"
"First, HTML::Parser knows which tags can contain other tags, which start "
"tags have corresponding end tags, which tags can exist only in the <HEAD> "
"portion of the document, and so forth.  HTML::SimpleParse does not know any "
"of these things.  It just finds tags and text in the HTML you give it, it "
"does not care about the specific content of these tags (though it does "
"distiguish between different _types_ of tags, such as comments, starting "
"tags like <b>, ending tags like </b>, and so on).\n"
"\n"
"Second, HTML::SimpleParse does not create a hierarchical tree of HTML "
"content, but rather a simple linear list.  It does not pay any attention to "
"balancing start tags with corresponding end tags, or which pairs of tags are "
"inside other pairs of tags.\n"
"\n"
"Because of these characteristics, you can make a very effective HTML filter "
"by sub-classing HTML::SimpleParse.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Ken Williams <ken@forum.swarthmore.edu>"
msgstr ""

#. leap/perl-HTML-Stream/summary
msgid "HTML output stream class, and some markup utilities"
msgstr ""

#. leap/perl-HTML-Stream/description
msgid ""
"The *HTML::Stream* module provides you with an object-oriented (and "
"subclassable) way of outputting HTML. Basically, you open up an \"HTML stream"
"\" on an existing filehandle, and then do all of your output to the HTML "
"stream. You can intermix HTML-stream-output and ordinary-print-output, if "
"you like.\n"
"\n"
"There's even a small built-in subclass, *HTML::Stream::Latin1*, which can "
"handle Latin-1 input right out of the box. But all in good time..."
msgstr ""

#. leap/perl-HTML-TableExtract/summary
msgid ""
"Perl module for extracting the content contained in tables within an HTM[cut]"
msgstr ""

#. leap/perl-HTML-TableExtract/description
msgid ""
"HTML::TableExtract is a subclass of HTML::Parser that serves to extract the "
"information from tables of interest contained within an HTML document. The "
"information from each extracted table is stored in table objects. Tables can "
"be extracted as text, HTML, or HTML::ElementTable structures (for in-place "
"editing or manipulation).\n"
"\n"
"There are currently four constraints available to specify which tables you "
"would like to extract from a document: _Headers_, _Depth_, _Count_, and "
"_Attributes_.\n"
"\n"
"_Headers_, the most flexible and adaptive of the techniques, involves "
"specifying text in an array that you expect to appear above the data in the "
"tables of interest. Once all headers have been located in a row of that "
"table, all further cells beneath the columns that matched your headers are "
"extracted. All other columns are ignored: think of it as vertical slices "
"through a table. In addition, TableExtract automatically rearranges each row "
"in the same order as the headers you provided. If you would like to disable "
"this, set _automap_ to 0 during object creation, and instead rely on the "
"column_map() method to find out the order in which the headers were found. "
"Furthermore, TableExtract will automatically compensate for cell span issues "
"so that columns are really the same columns as you would visually see in a "
"browser. This behavior can be disabled by setting the _gridmap_ parameter to "
"0. HTML is stripped from the entire textual content of a cell before header "
"matches are attempted -- unless the _keep_html_ parameter was enabled.\n"
"\n"
"_Depth_ and _Count_ are more specific ways to specify tables in relation to "
"one another. _Depth_ represents how deeply a table resides in other tables. "
"The depth of a top-level table in the document is 0. A table within a top-"
"level table has a depth of 1, and so on. Each depth can be thought of as a "
"layer; tables sharing the same depth are on the same layer. Within each of "
"these layers, _Count_ represents the order in which a table was seen at that "
"depth, starting with 0. Providing both a _depth_ and a _count_ will uniquely "
"specify a table within a document.\n"
"\n"
"_Attributes_ match based on the attributes of the html <table> tag, for "
"example, border widths or background color.\n"
"\n"
"Each of the _Headers_, _Depth_, _Count_, and _Attributes_ specifications are "
"cumulative in their effect on the overall extraction. For instance, if you "
"specify only a _Depth_, then you get all tables at that depth (note that "
"these could very well reside in separate higher- level tables throughout the "
"document since depth extends across tables). If you specify only a _Count_, "
"then the tables at that _Count_ from all depths are returned (i.e., the "
"_n_th occurrence of a table at each depth). If you only specify _Headers_, "
"then you get all tables in the document containing those column headers. If "
"you have specified multiple constraints of _Headers_, _Depth_, _Count_, and "
"_Attributes_, then each constraint has veto power over whether a particular "
"table is extracted.\n"
"\n"
"If no _Headers_, _Depth_, _Count_, or _Attributes_ are specified, then all "
"tables match.\n"
"\n"
"When extracting only text from tables, the text is decoded with HTML::"
"Entities by default; this can be disabled by setting the _decode_ parameter "
"to 0."
msgstr ""

#. leap/perl-HTML-Tagset/summary
msgid "Data tables useful in parsing HTML"
msgstr ""

#. leap/perl-HTML-Tagset/description
msgid ""
"This module contains several data tables useful in various kinds of HTML "
"parsing operations.\n"
"\n"
"Note that all tag names used are lowercase.\n"
"\n"
"In the following documentation, a \"hashset\" is a hash being used as a set\n"
"-- the hash conveys that its keys are there, and the actual values "
"associated with the keys are not significant. (But what values are there, "
"are always true.)"
msgstr ""

#. leap/perl-HTML-Template/summary
#, fuzzy
msgid "Perl module to use HTML-like templating language"
msgstr "Applet de choix de langue"

#. leap/perl-HTML-Template/description
msgid ""
"This module attempts to make using HTML templates simple and natural. It "
"extends standard HTML with a few new HTML-esque tags - '<TMPL_VAR>' "
"'<TMPL_LOOP>', '<TMPL_INCLUDE>', '<TMPL_IF>', '<TMPL_ELSE>' and "
"'<TMPL_UNLESS>'. The file written with HTML and these new tags is called a "
"template. It is usually saved separate from your script - possibly even "
"created by someone else! Using this module you fill in the values for the "
"variables, loops and branches declared in the template. This allows you to "
"separate design - the HTML - from the data, which you generate in the Perl "
"script.\n"
"\n"
"This module is licensed under the same terms as Perl. See the LICENSE "
"section below for more details."
msgstr ""

#. leap/perl-HTML-Tidy/summary
msgid "(X)HTML validation in a Perl object"
msgstr ""

#. leap/perl-HTML-Tidy/description
msgid ""
"'HTML::Tidy' is an HTML checker in a handy dandy object. It's meant as a "
"replacement for HTML::Lint. If you're currently an HTML::Lint user looking "
"to migrate, see the section Converting from HTML::Lint."
msgstr ""

#. leap/perl-HTML-TokeParser-Simple/summary
msgid "Easy to use C<HTML::TokeParser> interface"
msgstr ""

#. leap/perl-HTML-TokeParser-Simple/description
msgid ""
"'HTML::TokeParser' is an excellent module that's often used for parsing "
"HTML. However, the tokens returned are not exactly intuitive to parse:\n"
"\n"
" [\"S\",  $tag, $attr, $attrseq, $text]  [\"E\",  $tag, $text]  [\"T\",  "
"$text, $is_data]  [\"C\",  $text]  [\"D\",  $text]  [\"PI\", $token0, "
"$text]\n"
"\n"
"To simplify this, 'HTML::TokeParser::Simple' allows the user ask more "
"intuitive (read: more self-documenting) questions about the tokens "
"returned.\n"
"\n"
"You can also rebuild some tags on the fly. Frequently, the attributes "
"associated with start tags need to be altered, added to, or deleted. This "
"functionality is built in.\n"
"\n"
"Since this is a subclass of 'HTML::TokeParser', all 'HTML::TokeParser' "
"methods are available. To truly appreciate the power of this module, please "
"read the documentation for 'HTML::TokeParser' and 'HTML::Parser'."
msgstr ""

#. leap/perl-HTML-Tree/summary
msgid "Build and Scan Parse-Trees of Html"
msgstr ""

#. leap/perl-HTML-Tree/description
msgid ""
"HTML-Tree is a suite of Perl modules for making parse trees out of HTML "
"source. It consists of mainly two modules, whose documentation you should "
"refer to: HTML::TreeBuilder and HTML::Element.\n"
"\n"
"HTML::TreeBuilder is the module that builds the parse trees. (It uses HTML::"
"Parser to do the work of breaking the HTML up into tokens.)\n"
"\n"
"The tree that TreeBuilder builds for you is made up of objects of the class "
"HTML::Element.\n"
"\n"
"If you find that you do not properly understand the documentation for HTML::"
"TreeBuilder and HTML::Element, it may be because you are unfamiliar with "
"tree-shaped data structures, or with object-oriented modules in general. "
"Sean Burke has written some articles for _The Perl Journal_ ('www.tpj.com') "
"that seek to provide that background. The full text of those articles is "
"contained in this distribution, as: \n"
"* HTML::Tree::AboutObjects\n"
"\n"
"\"User's View of Object-Oriented Modules\" from TPJ17. \n"
"* HTML::Tree::AboutTrees\n"
"\n"
"\"Trees\" from TPJ18 \n"
"* HTML::Tree::Scanning\n"
"\n"
"\"Scanning HTML\" from TPJ19\n"
"\n"
"Readers already familiar with object-oriented modules and tree-shaped data "
"structures should read just the last article. Readers without that "
"background should read the first, then the second, and then the third."
msgstr ""

#. leap/perl-HTTP-Body/summary
msgid "HTTP Body Parser"
msgstr ""

#. leap/perl-HTTP-Body/description
msgid ""
"HTTP::Body parses chunks of HTTP POST data and supports application/octet-"
"stream, application/json, application/x-www-form-urlencoded, and multipart/"
"form-data.\n"
"\n"
"Chunked bodies are supported by not passing a length value to new().\n"
"\n"
"It is currently used by the Catalyst manpage to parse POST bodies."
msgstr ""

#. leap/perl-HTTP-Cookies/summary
msgid "HTTP cookie jars"
msgstr ""

#. leap/perl-HTTP-Cookies/description
msgid ""
"This class is for objects that represent a \"cookie jar\" -- that is, a "
"database of all the HTTP cookies that a given LWP::UserAgent object knows "
"about.\n"
"\n"
"Cookies are a general mechanism which server side connections can use to "
"both store and retrieve information on the client side of the connection. "
"For more information about cookies refer to <URL:http://curl.haxx.se/rfc/"
"cookie_spec.html> and <URL:http://www.cookiecentral.com/>. This module also "
"implements the new style cookies described in at https://tools.ietf.org/html/"
"rfc2965. The two variants of cookies are supposed to be able to coexist "
"happily.\n"
"\n"
"Instances of the class _HTTP::Cookies_ are able to store a collection of Set-"
"Cookie2: and Set-Cookie: headers and are able to use this information to "
"initialize Cookie-headers in _HTTP::Request_ objects. The state of a _HTTP::"
"Cookies_ object can be saved in and restored from files."
msgstr ""

#. leap/perl-HTTP-DAV/summary
#, fuzzy
msgid "WebDAV client library for Perl5"
msgstr "Utilitaire pour caméra digitale"

#. leap/perl-HTTP-DAV/description
msgid ""
"HTTP::DAV is a Perl API for interacting with and modifying content on "
"webservers using the WebDAV protocol. Now you can LOCK, DELETE and PUT files "
"and much more on a DAV-enabled webserver."
msgstr ""

#. leap/perl-HTTP-Daemon/summary
msgid "a simple http server class"
msgstr ""

#. leap/perl-HTTP-Daemon/description
msgid ""
"Instances of the 'HTTP::Daemon' class are HTTP/1.1 servers that listen on a "
"socket for incoming requests. The 'HTTP::Daemon' is a subclass of 'IO::"
"Socket::INET', so you can perform socket operations directly on it too.\n"
"\n"
"The accept() method will return when a connection from a client is "
"available. The returned value will be an 'HTTP::Daemon::ClientConn' object "
"which is another 'IO::Socket::INET' subclass. Calling the get_request() "
"method on this object will read data from the client and return an 'HTTP::"
"Request' object. The ClientConn object also provide methods to send back "
"various responses."
msgstr ""

#. leap/perl-HTTP-Date/summary
msgid "Date conversion routines"
msgstr ""

#. leap/perl-HTTP-Date/description
msgid ""
"This module provides functions that deal the date formats used by the HTTP "
"protocol (and then some more). Only the first two functions, time2str() and "
"str2time(), are exported by default."
msgstr ""

#. leap/perl-HTTP-Entity-Parser/summary
msgid "PSGI compliant HTTP Entity Parser"
msgstr ""

#. leap/perl-HTTP-Entity-Parser/description
msgid ""
"HTTP::Entity::Parser is a PSGI-compliant HTTP Entity parser. This module "
"also is compatible with HTTP::Body. Unlike HTTP::Body, HTTP::Entity::Parser "
"reads HTTP entities from PSGI's environment '$env->{'psgi.input'}' and "
"parses it. This module supports application/x-www-form-urlencoded, multipart/"
"form-data and application/json."
msgstr ""

#. leap/perl-HTTP-Headers-ActionPack/summary
msgid "HTTP Action, Adventure and Excitement"
msgstr ""

#. leap/perl-HTTP-Headers-ActionPack/description
msgid ""
"This is a module to handle the inflation and deflation of complex HTTP "
"header types. In many cases header values are simple strings, but in some "
"cases they are complex values with a lot of information encoded in them. The "
"goal of this module is to make the parsing and analysis of these headers as "
"easy as calling 'inflate' on a compatible object (see below for a list).\n"
"\n"
"This top-level class is basically a Factory for creating instances of the "
"other classes in this module. It contains a number of convenience methods to "
"help make common cases easy to write."
msgstr ""

#. leap/perl-HTTP-Headers-Fast/summary
#, fuzzy
msgid "Faster Implementation of Http::Headers"
msgstr "Une implémentation portable de MPI"

#. leap/perl-HTTP-Headers-Fast/description
msgid ""
"HTTP::Headers::Fast is a perl class for parsing/writing HTTP headers.\n"
"\n"
"The interface is same as HTTP::Headers."
msgstr ""

#. leap/perl-HTTP-Lite/summary
#, fuzzy
msgid "Lightweight HTTP implementation"
msgstr "Implantation Java de getopt"

#. leap/perl-HTTP-Lite/description
msgid ""
"*Note:* you should look at the HTTP::Tiny manpage or the LWP manpage before "
"using this module.\n"
"\n"
"HTTP::Lite is a stand-alone lightweight HTTP/1.1 implementation for perl. It "
"is not intended as a replacement for the fully-featured LWP module. Instead, "
"it is intended for use in situations where it is desirable to install the "
"minimal number of modules to achieve HTTP support, or where LWP is not a "
"good candidate due to CPU overhead, such as slower processors. HTTP::Lite is "
"also significantly faster than LWP.\n"
"\n"
"HTTP::Lite is ideal for CGI (or mod_perl) programs or for bundling for "
"redistribution with larger packages where only HTTP GET and POST "
"functionality are necessary.\n"
"\n"
"HTTP::Lite supports basic POST and GET operations only. As of 0.2.1, HTTP::"
"Lite supports HTTP/1.1 and is compliant with the Host header, necessary for "
"name based virtual hosting. Additionally, HTTP::Lite now supports Proxies.\n"
"\n"
"As of 2.0.0 HTTP::Lite now supports a callback to allow processing of "
"request data as it arrives. This is useful for handling very large files "
"without consuming memory.\n"
"\n"
"If you require more functionality, such as FTP or HTTPS, please see "
"libwwwperl (LWP). LWP is a significantly better and more comprehensive "
"package than HTTP::Lite, and should be used instead of HTTP::Lite whenever "
"possible."
msgstr ""

#. leap/perl-HTTP-Message/summary
msgid "HTTP style message (base class)"
msgstr ""

#. leap/perl-HTTP-Message/description
msgid ""
"An 'HTTP::Message' object contains some headers and a content body. The "
"following methods are available: \n"
"* $mess = HTTP::Message->new \n"
"* $mess = HTTP::Message->new( $headers ) \n"
"* $mess = HTTP::Message->new( $headers, $content )\n"
"\n"
"This constructs a new message object. Normally you would want construct "
"'HTTP::Request' or 'HTTP::Response' objects instead.\n"
"\n"
"The optional $header argument should be a reference to an 'HTTP::Headers' "
"object or a plain array reference of key/value pairs. If an 'HTTP::Headers' "
"object is provided then a copy of it will be embedded into the constructed "
"message, i.e. it will not be owned and can be modified afterwards without "
"affecting the message.\n"
"\n"
"The optional $content argument should be a string of bytes. \n"
"* $mess = HTTP::Message->parse( $str )\n"
"\n"
"This constructs a new message object by parsing the given string. \n"
"* $mess->headers\n"
"\n"
"Returns the embedded 'HTTP::Headers' object. \n"
"* $mess->headers_as_string \n"
"* $mess->headers_as_string( $eol )\n"
"\n"
"Call the as_string() method for the headers in the message. This will be the "
"same as\n"
"\n"
"    $mess->headers->as_string\n"
"\n"
"but it will make your program a whole character shorter :-) \n"
"* $mess->content \n"
"* $mess->content( $bytes )\n"
"\n"
"The content() method sets the raw content if an argument is given. If no "
"argument is given the content is not touched. In either case the original "
"raw content is returned.\n"
"\n"
"If the 'undef' argument is given, the content is reset to its default value, "
"which is an empty string.\n"
"\n"
"Note that the content should be a string of bytes. Strings in perl can "
"contain characters outside the range of a byte. The 'Encode' module can be "
"used to turn such strings into a string of bytes. \n"
"* $mess->add_content( $bytes )\n"
"\n"
"The add_content() methods appends more data bytes to the end of the current "
"content buffer. \n"
"* $mess->add_content_utf8( $string )\n"
"\n"
"The add_content_utf8() method appends the UTF-8 bytes representing the "
"string to the end of the current content buffer. \n"
"* $mess->content_ref \n"
"* $mess->content_ref( \\$bytes )\n"
"\n"
"The content_ref() method will return a reference to content buffer string. "
"It can be more efficient to access the content this way if the content is "
"huge, and it can even be used for direct manipulation of the content, for "
"instance:\n"
"\n"
"  ${$res->content_ref} =~ s/\\bfoo\\b/bar/g;\n"
"\n"
"This example would modify the content buffer in-place.\n"
"\n"
"If an argument is passed it will setup the content to reference some "
"external source. The content() and add_content() methods will automatically "
"dereference scalar references passed this way. For other references "
"content() will return the reference itself and add_content() will refuse to "
"do anything. \n"
"* $mess->content_charset\n"
"\n"
"This returns the charset used by the content in the message. The charset is "
"either found as the charset attribute of the 'Content-Type' header or by "
"guessing.\n"
"\n"
"See http://www.w3.org/TR/REC-html40/charset.html#spec-char-encoding for "
"details about how charset is determined. \n"
"* $mess->decoded_content( %options )\n"
"\n"
"Returns the content with any 'Content-Encoding' undone and for textual "
"content the raw content encoded to Perl's Unicode strings. If the 'Content-"
"Encoding' or 'charset' of the message is unknown this method will fail by "
"returning 'undef'.\n"
"\n"
"The following options can be specified.\n"
"\n"
"  * 'charset'\n"
"\n"
"This override the charset parameter for text content. The value 'none' can "
"used to suppress decoding of the charset.\n"
"\n"
"  * 'default_charset'\n"
"\n"
"This override the default charset guessed by content_charset() or if that "
"fails \"ISO-8859-1\".\n"
"\n"
"  * 'alt_charset'\n"
"\n"
"If decoding fails because the charset specified in the Content-Type header "
"isn't recognized by Perl's Encode module, then try decoding using this "
"charset instead of failing. The 'alt_charset' might be specified as 'none' "
"to simply return the string without any decoding of charset as alternative.\n"
"\n"
"  * 'charset_strict'\n"
"\n"
"Abort decoding if malformed characters is found in the content. By default "
"you get the substitution character (\"\\x{FFFD}\") in place of malformed "
"characters.\n"
"\n"
"  * 'raise_error'\n"
"\n"
"If TRUE then raise an exception if not able to decode content. Reason might "
"be that the specified 'Content-Encoding' or 'charset' is not supported. If "
"this option is FALSE, then decoded_content() will return 'undef' on errors, "
"but will still set $@.\n"
"\n"
"  * 'ref'\n"
"\n"
"If TRUE then a reference to decoded content is returned. This might be more "
"efficient in cases where the decoded content is identical to the raw content "
"as no data copying is required in this case. \n"
"* $mess->decodable \n"
"* HTTP::Message::decodable()\n"
"\n"
"This returns the encoding identifiers that decoded_content() can process. In "
"scalar context returns a comma separated string of identifiers.\n"
"\n"
"This value is suitable for initializing the 'Accept-Encoding' request header "
"field. \n"
"* $mess->decode\n"
"\n"
"This method tries to replace the content of the message with the decoded "
"version and removes the 'Content-Encoding' header. Returns TRUE if "
"successful and FALSE if not.\n"
"\n"
"If the message does not have a 'Content-Encoding' header this method does "
"nothing and returns TRUE.\n"
"\n"
"Note that the content of the message is still bytes after this method has "
"been called and you still need to call decoded_content() if you want to "
"process its content as a string. \n"
"* $mess->encode( $encoding, ... )\n"
"\n"
"Apply the given encodings to the content of the message. Returns TRUE if "
"successful. The \"identity\" (non-)encoding is always supported; other "
"currently supported encodings, subject to availability of required "
"additional modules, are \"gzip\", \"deflate\", \"x-bzip2\" and \"base64\".\n"
"\n"
"A successful call to this function will set the 'Content-Encoding' header.\n"
"\n"
"Note that 'multipart/*' or 'message/*' messages can't be encoded and this "
"method will croak if you try. \n"
"* $mess->parts \n"
"* $mess->parts( @parts ) \n"
"* $mess->parts( \\@parts )\n"
"\n"
"Messages can be composite, i.e. contain other messages. The composite "
"messages have a content type of 'multipart/*' or 'message/*'. This method "
"give access to the contained messages.\n"
"\n"
"The argumentless form will return a list of 'HTTP::Message' objects. If the "
"content type of $msg is not 'multipart/*' or 'message/*' then this will "
"return the empty list. In scalar context only the first object is returned. "
"The returned message parts should be regarded as read-only (future versions "
"of this library might make it possible to modify the parent by modifying the "
"parts).\n"
"\n"
"If the content type of $msg is 'message/*' then there will only be one part "
"returned.\n"
"\n"
"If the content type is 'message/http', then the return value will be either "
"an 'HTTP::Request' or an 'HTTP::Response' object.\n"
"\n"
"If a @parts argument is given, then the content of the message will be "
"modified. The array reference form is provided so that an empty list can be "
"provided. The @parts array should contain 'HTTP::Message' objects. The "
"@parts objects are owned by $mess after this call and should not be modified "
"or made part of other messages.\n"
"\n"
"When updating the message with this method and the old content type of $mess "
"is not 'multipart/*' or 'message/*', then the content type is set to "
"'multipart/mixed' and all other content headers are cleared.\n"
"\n"
"This method will croak if the content type is 'message/*' and more than one "
"part is provided. \n"
"* $mess->add_part( $part )\n"
"\n"
"This will add a part to a message. The $part argument should be another "
"'HTTP::Message' object. If the previous content type of $mess is not "
"'multipart/*' then the old content (together with all content headers) will "
"be made part #1 and the content type made 'multipart/mixed' before the new "
"part is added. The $part object is owned by $mess after this call and should "
"not be modified or made part of other messages.\n"
"\n"
"There is no return value. \n"
"* $mess->clear\n"
"\n"
"Will clear the headers and set the content to the empty string. There is no "
"return value \n"
"* $mess->protocol \n"
"* $mess->protocol( $proto )\n"
"\n"
"Sets the HTTP protocol used for the message. The protocol() is a string like "
"'HTTP/1.0' or 'HTTP/1.1'. \n"
"* $mess->clone\n"
"\n"
"Returns a copy of the message object. \n"
"* $mess->as_string \n"
"* $mess->as_string( $eol )\n"
"\n"
"Returns the message formatted as a single string.\n"
"\n"
"The optional $eol parameter specifies the line ending sequence to use. The "
"default is \"\\n\". If no $eol is given then as_string will ensure that the "
"returned string is newline terminated (even when the message content is "
"not). No extra newline is appended if an explicit $eol is passed. \n"
"* $mess->dump( %opt )\n"
"\n"
"Returns the message formatted as a string. In void context print the "
"string.\n"
"\n"
"This differs from '$mess->as_string' in that it escapes the bytes of the "
"content so that it's safe to print them and it limits how much content to "
"print. The escapes syntax used is the same as for Perl's double quoted "
"strings. If there is no content the string \"(no content)\" is shown in its "
"place.\n"
"\n"
"Options to influence the output can be passed as key/value pairs. The "
"following options are recognized:\n"
"\n"
"  * maxlength => $num\n"
"\n"
"How much of the content to show. The default is 512. Set this to 0 for "
"unlimited.\n"
"\n"
"If the content is longer then the string is chopped at the limit and the "
"string \"...\\n(### more bytes not shown)\" appended.\n"
"\n"
"  * no_content => $str\n"
"\n"
"Replaces the \"(no content)\" marker.\n"
"\n"
"  * prefix => $str\n"
"\n"
"A string that will be prefixed to each line of the dump.\n"
"\n"
"All methods unknown to 'HTTP::Message' itself are delegated to the 'HTTP::"
"Headers' object that is part of every message. This allows convenient access "
"to these methods. Refer to HTTP::Headers for details of these methods:\n"
"\n"
"    $mess->header( $field => $val )     $mess->push_header( $field => "
"$val )     $mess->init_header( $field => $val )     $mess-"
">remove_header( $field )     $mess->remove_content_headers     $mess-"
">header_field_names     $mess->scan( \\&doit )\n"
"\n"
"    $mess->date     $mess->expires     $mess->if_modified_since     $mess-"
">if_unmodified_since     $mess->last_modified     $mess->content_type     "
"$mess->content_encoding     $mess->content_length     $mess-"
">content_language     $mess->title     $mess->user_agent     $mess-"
">server     $mess->from     $mess->referer     $mess->www_authenticate     "
"$mess->authorization     $mess->proxy_authorization     $mess-"
">authorization_basic     $mess->proxy_authorization_basic"
msgstr ""

#. leap/perl-HTTP-MultiPartParser/summary
msgid "HTTP MultiPart Parser"
msgstr ""

#. leap/perl-HTTP-MultiPartParser/description
msgid ""
"This class provides a low-level API for processing MultiPart MIME data "
"streams conforming to MultiPart types as defined in at http://tools.ietf.org/"
"html/rfc2616#section-3.7.2."
msgstr ""

#. leap/perl-HTTP-Negotiate/summary
msgid "choose a variant to serve"
msgstr ""

#. leap/perl-HTTP-Negotiate/description
msgid ""
"This module provides a complete implementation of the HTTP content "
"negotiation algorithm specified in _draft-ietf-http-v11-spec-00.ps_ chapter "
"12. Content negotiation allows for the selection of a preferred content "
"representation based upon attributes of the negotiable variants and the "
"value of the various Accept* header fields in the request.\n"
"\n"
"The variants are ordered by preference by calling the function choose().\n"
"\n"
"The first parameter is reference to an array of the variants to choose "
"among. Each element in this array is an array with the values [$id, $qs, "
"$content_type, $content_encoding, $charset, $content_language, "
"$content_length] whose meanings are described below. The $content_encoding "
"and $content_language can be either a single scalar value or an array "
"reference if there are several values.\n"
"\n"
"The second optional parameter is either a HTTP::Headers or a HTTP::Request "
"object which is searched for \"Accept*\" headers. If this parameter is "
"missing, then the accept specification is initialized from the CGI "
"environment variables HTTP_ACCEPT, HTTP_ACCEPT_CHARSET, HTTP_ACCEPT_ENCODING "
"and HTTP_ACCEPT_LANGUAGE.\n"
"\n"
"In an array context, choose() returns a list of [variant identifier, "
"calculated quality, size] tuples. The values are sorted by quality, highest "
"quality first. If the calculated quality is the same for two variants, then "
"they are sorted by size (smallest first). _E.g._:\n"
"\n"
"  (['var1', 1, 2000], ['var2', 0.3, 512], ['var3', 0.3, 1024]);\n"
"\n"
"Note that also zero quality variants are included in the return list even if "
"these should never be served to the client.\n"
"\n"
"In a scalar context, it returns the identifier of the variant with the "
"highest score or 'undef' if none have non-zero quality.\n"
"\n"
"If the $HTTP::Negotiate::DEBUG variable is set to TRUE, then a lot of noise "
"is generated on STDOUT during evaluation of choose()."
msgstr ""

#. leap/perl-HTTP-Parser-XS/summary
msgid "Fast, Primitive Http Request Parser"
msgstr ""

#. leap/perl-HTTP-Parser-XS/description
msgid ""
"HTTP::Parser::XS is a fast, primitive HTTP request/response parser.\n"
"\n"
"The request parser can be used either for writing a synchronous HTTP server "
"or a event-driven server.\n"
"\n"
"The response parser can be used for writing HTTP clients.\n"
"\n"
"Note that even if this distribution name ends '::XS', *pure Perl* "
"implementation is supported, so you can use this module on compiler-less "
"environments."
msgstr ""

#. leap/perl-HTTP-Request-AsCGI/summary
msgid "Set up a CGI environment from an HTTP::Request"
msgstr ""

#. leap/perl-HTTP-Request-AsCGI/description
msgid ""
"Provides a convenient way of setting up an CGI environment from an HTTP::"
"Request."
msgstr ""

#. leap/perl-HTTP-Server-Simple/summary
msgid "Lightweight HTTP server"
msgstr ""

#. leap/perl-HTTP-Server-Simple/description
msgid ""
"This is a simple standalone HTTP server. By default, it doesn't thread or "
"fork. It does, however, act as a simple frontend which can be used to build "
"a standalone web-based application or turn a CGI into one.\n"
"\n"
"It is possible to use Net::Server classes to create forking, pre-forking, "
"and other types of more complicated servers; see net_server.\n"
"\n"
"By default, the server traps a few signals: \n"
"* HUP\n"
"\n"
"When you 'kill -HUP' the server, it lets the current request finish being "
"processed, then uses the 'restart' method to re-exec itself. Please note "
"that in order to provide restart-on-SIGHUP, HTTP::Server::Simple sets a "
"SIGHUP handler during initialisation. If your request handling code forks "
"you need to make sure you reset this or unexpected things will happen if "
"somebody sends a HUP to all running processes spawned by your app (e.g. by "
"\"kill -HUP <script>\") \n"
"* PIPE\n"
"\n"
"If the server detects a broken pipe while writing output to the client, it "
"ignores the signal. Otherwise, a client closing the connection early could "
"kill the server."
msgstr ""

#. leap/perl-HTTP-Thin/summary
msgid "A Thin Wrapper around HTTP::Tiny to play nice with HTTP::Message"
msgstr ""

#. leap/perl-HTTP-Thin/description
msgid ""
"WARNING: This module is untested beyond the very basics. The implementation "
"is simple enough that it shouldn't do evil things but, yeah it's still not "
"approved for use by small children.\n"
"\n"
"'HTTP::Thin' is a thin wrapper around the HTTP::Tiny manpage adding the "
"ability to pass in the HTTP::Request manpage objects and get back the HTTP::"
"Response manpage objects. The maintainers of the HTTP::Tiny manpage, "
"justifiably, don't want to have to maintain compatibility but many other "
"projects already consume the the HTTP::Message manpage objects. This is just "
"glue code doing what it does best."
msgstr ""

#. leap/perl-HTTP-Tiny/summary
msgid "Small, Simple, Correct Http/1.1 Client"
msgstr ""

#. leap/perl-HTTP-Tiny/description
msgid ""
"This is a very simple HTTP/1.1 client, designed for doing simple requests "
"without the overhead of a large framework like LWP::UserAgent.\n"
"\n"
"It is more correct and more complete than HTTP::Lite. It supports proxies "
"and redirection. It also correctly resumes after EINTR.\n"
"\n"
"If IO::Socket::IP 0.25 or later is installed, HTTP::Tiny will use it instead "
"of IO::Socket::INET for transparent support for both IPv4 and IPv6.\n"
"\n"
"Cookie support requires HTTP::CookieJar or an equivalent class."
msgstr ""

#. leap/perl-HTTPS-Daemon/summary
#, fuzzy
msgid "a simple http server class with SSL support"
msgstr "Serveur Web simple"

#. leap/perl-HTTPS-Daemon/description
msgid ""
"HTTP::Daemon::SSL is a descendant of HTTP::Daemon that uses SSL sockets (via "
"IO::Socket::SSL) instead of cleartext sockets.  It also handles SSL-specific "
"problems, such as dealing with HTTP clients that attempt to connect to it "
"without using SSL."
msgstr ""

#. leap/perl-Hash-Merge/summary
msgid "Merges arbitrarily deep hashes into a single hash"
msgstr ""

#. leap/perl-Hash-Merge/description
msgid ""
"Hash::Merge merges two arbitrarily deep hashes into a single hash. That is, "
"at any level, it will add non-conflicting key-value pairs from one hash to "
"the other, and follows a set of specific rules when there are key value "
"conflicts (as outlined below). The hash is followed recursively, so that "
"deeply nested hashes that are at the same level will be merged when the "
"parent hashes are merged. *Please note that self-referencing hashes, or "
"recursive references, are not handled well by this method.*\n"
"\n"
"Values in hashes are considered to be either ARRAY references, HASH "
"references, or otherwise are treated as SCALARs. By default, the data passed "
"to the merge function will be cloned using the Clone module; however, if "
"necessary, this behavior can be changed to use as many of the original "
"values as possible. (See 'set_clone_behavior')."
msgstr ""

#. leap/perl-Hash-Merge-Simple/summary
msgid "Recursively merge two or more hashes, simply"
msgstr ""

#. leap/perl-Hash-Merge-Simple/description
msgid ""
"Hash::Merge::Simple will recursively merge two or more hashes and return the "
"result as a new hash reference. The merge function will descend and merge "
"hashes that exist under the same node in both the left and right hash, but "
"doesn't attempt to combine arrays, objects, scalars, or anything else. The "
"rightmost hash also takes precedence, replacing whatever was in the left "
"hash if a conflict occurs.\n"
"\n"
"This code was pretty much taken straight from the Catalyst::Utils manpage, "
"and modified to handle more than 2 hashes at the same time."
msgstr ""

#. leap/perl-Hash-MoreUtils/summary
msgid "Provide the stuff missing in Hash::Util"
msgstr ""

#. leap/perl-Hash-MoreUtils/description
msgid ""
"Similar to List::MoreUtils, 'Hash::MoreUtils' contains trivial but commonly-"
"used functionality for hashes. The primary focus for the moment is providing "
"a common API - speeding up by XS is far away at the moment."
msgstr ""

#. leap/perl-Hash-MultiValue/summary
msgid "Store multiple values per key"
msgstr ""

#. leap/perl-Hash-MultiValue/description
msgid ""
"Hash::MultiValue is an object (and a plain hash reference) that may contain "
"multiple values per key, inspired by MultiDict of WebOb."
msgstr ""

#. leap/perl-Hash-Util-FieldHash-Compat/summary
msgid "Use Hash::Util::FieldHash or ties, depending on availability"
msgstr ""

#. leap/perl-Hash-Util-FieldHash-Compat/description
msgid ""
"Under older perls this module provides a drop-in compatible API to Hash::"
"Util::FieldHash using perltie. When Hash::Util::FieldHash is available it "
"will use that instead.\n"
"\n"
"This way code requiring field hashes can benefit from fast, robust field "
"hashes on Perl 5.10 and newer, but still run on older perls that don't ship "
"with that module.\n"
"\n"
"See Hash::Util::FieldHash for all the details of the API."
msgstr ""

#. leap/perl-Hook-LexWrap/summary
msgid "Lexically scoped subroutine wrappers"
msgstr ""

#. leap/perl-Hook-LexWrap/description
msgid ""
"Hook::LexWrap allows you to install a pre- or post-wrapper (or both) around "
"an existing subroutine. Unlike other modules that provide this capacity (e."
"g. Hook::PreAndPost and Hook::WrapSub), Hook::LexWrap implements wrappers in "
"such a way that the standard 'caller' function works correctly within the "
"wrapped subroutine.\n"
"\n"
"To install a prewrappers, you write:\n"
"\n"
"        use Hook::LexWrap;\n"
"\n"
"        wrap 'subroutine_name', pre => \\&some_other_sub;\n"
"\n"
"   \n"
"\n"
"The first argument to 'wrap' is a string containing the name of the "
"subroutine to be wrapped (or the typeglob containing it, or a reference to "
"it). The subroutine name may be qualified, and the subroutine must already "
"be defined. The second argument indicates the type of wrapper being applied "
"and must be either ''pre'' or ''post''. The third argument must be a "
"reference to a subroutine that implements the wrapper.\n"
"\n"
"To install a post-wrapper, you write:\n"
"\n"
"        wrap 'subroutine_name', post => \\&yet_another_sub;\n"
"\n"
"   \n"
"\n"
"To install both at once:\n"
"\n"
"        wrap 'subroutine_name',              pre  => "
"\\&some_other_sub,              post => \\&yet_another_sub;\n"
"\n"
"or:\n"
"\n"
"        wrap *subroutine_name,              post => \\&yet_another_sub,  # "
"order in which wrappers are              pre  => \\&some_other_sub;   # "
"specified doesn't matter\n"
"\n"
"Once they are installed, the pre- and post-wrappers will be called before "
"and after the subroutine itself, and will be passed the same argument list.\n"
"\n"
"The pre- and post-wrappers and the original subroutine also all see the same "
"(correct!) values from 'caller' and 'wantarray'."
msgstr ""

#. leap/perl-IO-All/summary
msgid "IO::All to Larry Wall!"
msgstr ""

#. leap/perl-IO-All/description
msgid ""
"IO::All combines all of the best Perl IO modules into a single nifty object "
"oriented interface to greatly simplify your everyday Perl IO idioms. It "
"exports a single function called 'io', which returns a new IO::All object. "
"And that object can do it all!\n"
"\n"
"The IO::All object is a proxy for IO::File, IO::Dir, IO::Socket, Tie::File, "
"File::Spec, File::Path, File::MimeInfo and File::ReadBackwards; as well as "
"all the DBM and MLDBM modules. You can use most of the methods found in "
"these classes and in IO::Handle (which they inherit from). IO::All adds "
"dozens of other helpful idiomatic methods including file stat and "
"manipulation functions.\n"
"\n"
"IO::All is pluggable, and modules like IO::All::LWP and IO::All::Mailto add "
"even more functionality. Optionally, every IO::All object can be tied to "
"itself. This means that you can use most perl IO builtins on it: readline, "
"'<>', getc, print, printf, syswrite, sysread, close.\n"
"\n"
"The distinguishing magic of IO::All is that it will automatically open (and "
"close) files, directories, sockets and other IO things for you. You never "
"need to specify the mode ('<', '>>', etc), since it is determined by the "
"usage context. That means you can replace this:\n"
"\n"
"    open STUFF, '<', './mystuff'       or die \"Can't open './mystuff' for "
"input:\\n$!\";     local $/;     my $stuff = <STUFF>;     close STUFF;\n"
"\n"
"with this:\n"
"\n"
"    my $stuff < io './mystuff';\n"
"\n"
"And that is a *good thing*!"
msgstr ""

#. leap/perl-IO-Async/summary
msgid "Asynchronous event-driven programming"
msgstr ""

#. leap/perl-IO-Async/description
msgid ""
"This collection of modules allows programs to be written that perform "
"asynchronous filehandle IO operations. A typical program using them would "
"consist of a single subclass of the IO::Async::Loop manpage to act as a "
"container of other objects, which perform the actual IO work required by the "
"program. As well as IO handles, the loop also supports timers and signal "
"handlers, and includes more higher-level functionality built on top of these "
"basic parts.\n"
"\n"
"Because there are a lot of classes in this collection, the following "
"overview gives a brief description of each."
msgstr ""

#. leap/perl-IO-CaptureOutput/summary
msgid "Capture STDOUT and STDERR from Perl code, subprocesses or XS"
msgstr ""

#. leap/perl-IO-CaptureOutput/description
msgid ""
"*This module is no longer recommended by the maintainer* - see the Capture::"
"Tiny manpage instead.\n"
"\n"
"This module provides routines for capturing STDOUT and STDERR from perl "
"subroutines, forked system calls (e.g. 'system()', 'fork()') and from XS or "
"C modules."
msgstr ""

#. leap/perl-IO-Event/summary
msgid "Tied Filehandles for Nonblocking IO with Object Callbacks"
msgstr ""

#. leap/perl-IO-Event/description
msgid ""
"IO::Event provides a object-based callback system for handling nonblocking "
"IO. The design goal is to provide a system that just does the right thing w/"
"o the user needing to think about it much.\n"
"\n"
"All APIs are kept as simple as possible yet at the same time, all "
"functionality is accesible if needed. Simple things are easy. Hard things "
"are possible.\n"
"\n"
"Most of the time file handling syntax will work fine: '<$filehandle>' and "
"'print $filehandle 'stuff''.\n"
"\n"
"IO::Event provides automatic buffering of output (with a callback to "
"throttle). It provides automatic line-at-a-time input.\n"
"\n"
"After initial setup, call 'IO::Event::loop()'.\n"
"\n"
"IO::Event was originally written to use the Event manpage. IO::Event still "
"defaults to using the Event manpage but it can now use the AnyEvent manpage "
"or its own event loop."
msgstr ""

#. leap/perl-IO-HTML/summary
msgid "Open an HTML file with automatic charset detection"
msgstr ""

#. leap/perl-IO-HTML/description
msgid ""
"IO::HTML provides an easy way to open a file containing HTML while "
"automatically determining its encoding. It uses the HTML5 encoding sniffing "
"algorithm specified in section 8.2.2.2 of the draft standard.\n"
"\n"
"The algorithm as implemented here is: \n"
"* 1.\n"
"\n"
"  If the file begins with a byte order mark indicating UTF-16LE, UTF-16BE,   "
"or UTF-8, then that is the encoding. \n"
"* 2.\n"
"\n"
"  If the first 1024 bytes of the file contain a '<meta>' tag that "
"indicates   the charset, and Encode recognizes the specified charset name, "
"then that   is the encoding. (This portion of the algorithm is implemented "
"by   'find_charset_in'.)\n"
"\n"
"  The '<meta>' tag can be in one of two formats:\n"
"\n"
"    <meta charset=\"...\">     <meta http-equiv=\"Content-Type\" content="
"\"...charset=...\">\n"
"\n"
"  The search is case-insensitive, and the order of attributes within the   "
"tag is irrelevant. Any additional attributes of the tag are ignored. The   "
"first matching tag with a recognized encoding ends the search. \n"
"* 3.\n"
"\n"
"  If the first 1024 bytes of the file are valid UTF-8 (with at least 1   non-"
"ASCII character), then the encoding is UTF-8. \n"
"* 4.\n"
"\n"
"  If all else fails, use the default character encoding. The HTML5 "
"standard   suggests the default encoding should be locale dependent, but "
"currently   it is always 'cp1252' unless you set '$IO::HTML::"
"default_encoding' to a   different value. Note: 'sniff_encoding' does not "
"apply this step; only   'html_file' does that."
msgstr ""

#. leap/perl-IO-Handle-Util/summary
msgid "Functions for working with L<IO::Handle> like objects"
msgstr ""

#. leap/perl-IO-Handle-Util/description
msgid ""
"This module provides a number of helpful routines to manipulate or create "
"the IO::Handle manpage like objects."
msgstr ""

#. leap/perl-IO-Interactive/summary
#, fuzzy
msgid "Utilities for interactive I/O"
msgstr "GNOME-Audio"

#. leap/perl-IO-Interactive/description
msgid ""
"This module provides three utility subroutines that make it easier to "
"develop interactive applications.\n"
"\n"
"The 'ARGV' filehandle, the one that '<>' or an empty 'readline()' uses, has "
"various magic associated with it. It's not actually opened until you try to "
"read from it. Checking '-t ARGV' before you've tried to read from it might "
"give you the wrong answer. Not only that, you might not read from 'ARGV'. If "
"the value in '@ARGV' is the magic filename '-' (a convention to mean the "
"standard filehandle for input or output), 'ARGV' might actually be 'STDIN'. "
"You don't want to think about all of this. This module is discussed in _Perl "
"Best Practices_ on page 218. Also see the 'ARGV' entry in perlvar and the "
"'readline' entry in perlfunc. \n"
"* 'is_interactive()'\n"
"\n"
"This subroutine returns true if '*ARGV' and the currently selected "
"filehandle (usually '*STDOUT') are connected to the terminal. The test is "
"considerably more sophisticated than:\n"
"\n"
"    -t *ARGV && -t *STDOUT\n"
"\n"
"as it takes into account the magic behaviour of '*ARGV'.\n"
"\n"
"You can also pass 'is_interactive' a writable filehandle, in which case it "
"requires that filehandle be connected to a terminal (instead of the "
"currently selected). The usual suspect here is '*STDERR':\n"
"\n"
"    if ( is_interactive(*STDERR) ) {         carp $warning;     } \n"
"* 'interactive()'\n"
"\n"
"This subroutine returns '*STDOUT' if 'is_interactive' is true. If "
"'is_interactive()' is false, 'interactive' returns a filehandle that does "
"not print.\n"
"\n"
"This makes it easy to create applications that print out only when the "
"application is interactive:\n"
"\n"
"    print {interactive} \"Please enter a value: \";     my $value = <>;\n"
"\n"
"You can also pass 'interactive' a writable filehandle, in which case it "
"writes to that filehandle if it is connected to a terminal (instead of "
"writing to '*STDOUT'). Once again, the usual suspect is '*STDERR':\n"
"\n"
"    print {interactive(*STDERR)} $warning; \n"
"* 'busy {...}'\n"
"\n"
"This subroutine takes a block as its single argument and executes that "
"block. Whilst the block is executed, '*ARGV' is temporarily replaced by a "
"closed filehandle. That is, no input from '*ARGV' is possible in a 'busy' "
"block. Furthermore, any attempts to send input into the 'busy' block through "
"'*ARGV' is intercepted and a warning message is printed to '*STDERR'. The "
"'busy' call returns a filehandle that contains the intercepted input.\n"
"\n"
"A 'busy' block is therefore useful to prevent attempts at input when the "
"program is busy at some non-interactive task."
msgstr ""

#. leap/perl-IO-Interface/summary
msgid "Perl extension for access to network card configuration information"
msgstr ""

#. leap/perl-IO-Interface/description
msgid ""
"IO::Interface adds methods to IO::Socket objects that allows them to be used "
"to retrieve and change information about the network interfaces on your "
"system. In addition to the object-oriented access methods, you can use a "
"function-oriented style.\n"
"\n"
"THIS API IS DEPRECATED. Please see IO::Interface::Simple for the preferred "
"way to get and set interface configuration information."
msgstr ""

#. leap/perl-IO-Multiplex/summary
msgid "Manage IO on many file handles"
msgstr ""

#. leap/perl-IO-Multiplex/description
msgid ""
"It is object oriented in design, and will notify you of significant events "
"by calling methods on an object that you supply. If you are not using "
"objects, you can simply supply '__PACKAGE__' instead of an object "
"reference.\n"
"\n"
"You may have one callback object registered for each file handle, or one "
"global one. Possibly both -- the per-file handle callback object will be "
"used instead of the global one.\n"
"\n"
"Each file handle may also have a timer associated with it. A callback "
"function is called when the timer expires."
msgstr ""

#. leap/perl-IO-Pager/summary
msgid "Select a pager (possibly perl-based) & pipe it text if a TTY"
msgstr ""

#. leap/perl-IO-Pager/description
msgid ""
"IO::Pager can be used to locate an available pager and set the _PAGER_ "
"environment variable (see NOTES). It is also a factory for creating I/O "
"objects such as IO::Pager::Buffered and IO::Pager::Unbuffered.\n"
"\n"
"IO::Pager subclasses are designed to programmatically decide whether or not "
"to pipe a filehandle's output to a program specified in _PAGER_. Subclasses "
"may implement only the IO handle methods desired and inherit the remainder "
"of those outlined below from IO::Pager. For anything else, YMMV. See the "
"appropriate subclass for implementation specific details."
msgstr ""

#. leap/perl-IO-Pipely/summary
msgid "Portably create pipe() or pipe-like handles, one way or another."
msgstr ""

#. leap/perl-IO-Pipely/description
msgid ""
"Pipes are troublesome beasts because there are a few different, incompatible "
"ways to create them. Not all platforms support all ways, and some platforms "
"may have hidden difficulties like incomplete or buggy support.\n"
"\n"
"IO::Pipely provides a couple functions to portably create one- and two-way "
"pipes and pipe-like socket pairs. It acknowledges and works around known "
"platform issues so you don't have to.\n"
"\n"
"On the other hand, it doesn't work around unknown issues, so please report "
"any problems early and often.\n"
"\n"
"IO::Pipely currently understands pipe(), UNIX-domain socketpair() and "
"regular IPv4 localhost sockets. This covers every platform tested so far, "
"but it's hardly complete. Please help support other mechanisms, such as INET-"
"domain socketpair() and IPv6 localhost sockets.\n"
"\n"
"IO::Pipely will use different kinds of pipes or sockets depending on the "
"operating system's capabilities and the number of directions requested. The "
"autodetection may be overridden by specifying a particular pipe type."
msgstr ""

#. leap/perl-IO-SessionData/summary
#, fuzzy
msgid "Supporting module for SOAP::Lite"
msgstr "Modules du noyau pour Omnibooks"

#. leap/perl-IO-SessionData/description
msgid "supporting module for SOAP::Lite"
msgstr ""

#. leap/perl-IO-Socket-INET6/summary
msgid "Object interface for AF_INET/AF_INET6 domain sockets"
msgstr ""

#. leap/perl-IO-Socket-INET6/description
msgid ""
"IO::Socket::INET6 provides an object interface to creating and using    "
"sockets in either AF_INET or AF_INET6 domains. It is built upon the    IO::"
"Socket interface and inherits all the methods defined by IO::Socket."
msgstr ""

#. leap/perl-IO-Socket-Multicast/summary
msgid "Send and receive multicast messages"
msgstr ""

#. leap/perl-IO-Socket-Multicast/description
msgid ""
"The IO::Socket::Multicast module subclasses IO::Socket::INET to enable you "
"to manipulate multicast groups. With this module (and an operating system "
"that supports multicasting), you will be able to receive incoming multicast "
"transmissions and generate your own outgoing multicast packets.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Lincoln Stein <lstein@cshl.org>"
msgstr ""

#. leap/perl-IO-Socket-PortState/summary
msgid "Perl extension for checking the open or closed status of a port."
msgstr ""

#. leap/perl-IO-Socket-PortState/description
msgid ""
"You can use it to check if a port is open or closed for a given host and "
"protocol."
msgstr ""

#. leap/perl-IO-Socket-SSL/summary
msgid "Nearly transparent SSL encapsulation for IO::Socket::INET"
msgstr ""

#. leap/perl-IO-Socket-SSL/description
msgid ""
"IO::Socket::SSL makes using SSL/TLS much easier by wrapping the necessary "
"functionality into the familiar IO::Socket interface and providing secure "
"defaults whenever possible. This way, existing applications can be made SSL-"
"aware without much effort, at least if you do blocking I/O and don't use "
"select or poll.\n"
"\n"
"But, under the hood, SSL is a complex beast. So there are lots of methods to "
"make it do what you need if the default behavior is not adequate. Because it "
"is easy to inadvertently introduce critical security bugs or just hard to "
"debug problems, I would recommend studying the following documentation "
"carefully.\n"
"\n"
"The documentation consists of the following parts: \n"
"* * \"Essential Information About SSL/TLS\" \n"
"* * \"Basic SSL Client\" \n"
"* * \"Basic SSL Server\" \n"
"* * \"Common Usage Errors\" \n"
"* * \"Common Problems with SSL\" \n"
"* * \"Using Non-Blocking Sockets\" \n"
"* * \"Advanced Usage\" \n"
"* * \"Integration Into Own Modules\" \n"
"* * \"Description Of Methods\"\n"
"\n"
"Additional documentation can be found in \n"
"* * IO::Socket::SSL::Intercept - Doing Man-In-The-Middle with SSL \n"
"* * IO::Socket::SSL::Utils - Useful functions for certificates etc"
msgstr ""

#. leap/perl-IO-Socket-Timeout/summary
msgid "IO::Socket with read/write timeout"
msgstr ""

#. leap/perl-IO-Socket-Timeout/description
msgid ""
"'IO::Socket' provides a way to set a timeout on the socket, but the timeout "
"will be used only for connection, not for reading / writing operations.\n"
"\n"
"This module provides a way to set a timeout on read / write operations on an "
"'IO::Socket' instance, or any 'IO::Socket::*' modules, like 'IO::Socket::"
"INET'."
msgstr ""

#. leap/perl-IO-String/summary
#, fuzzy
msgid "Perl IO/String interface"
msgstr "Interface Perl vers Syslog"

#. leap/perl-IO-String/description
msgid ""
"IO::String is an IO::File (and IO::Handle) compatible class that reads or "
"writes data from in-core strings.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Gisle Aas.  <gisle@aas.no>"
msgstr ""

#. leap/perl-IO-Stty/summary
msgid "Change and print terminal line settings"
msgstr ""

#. leap/perl-IO-Stty/description
msgid "This is the PERL POSIX compliant stty."
msgstr ""

#. leap/perl-IO-Tee/summary
#, fuzzy
msgid "Multiplex output to multiple output handles"
msgstr "Perl Apache Filter"

#. leap/perl-IO-Tee/description
msgid ""
"'IO::Tee' objects can be used to multiplex input and output in two different "
"ways. The first way is to multiplex output to zero or more output handles. "
"The 'IO::Tee' constructor, given a list of output handles, returns a tied "
"handle that can be written to. When written to (using print or printf), the "
"'IO::Tee' object multiplexes the output to the list of handles originally "
"passed to the constructor. As a shortcut, you can also directly pass a "
"string or an array reference to the constructor, in which case 'IO::File::"
"new' is called for you with the specified argument or arguments.\n"
"\n"
"The second way is to multiplex input from one input handle to zero or more "
"output handles as it is being read. The 'IO::Tee' constructor, given an "
"input handle followed by a list of output handles, returns a tied handle "
"that can be read from as well as written to. When written to, the 'IO::Tee' "
"object multiplexes the output to all handles passed to the constructor, as "
"described in the previous paragraph. When read from, the 'IO::Tee' object "
"reads from the input handle given as the first argument to the 'IO::Tee' "
"constructor, then writes any data read to the output handles given as the "
"remaining arguments to the constructor.\n"
"\n"
"The 'IO::Tee' class supports certain 'IO::Handle' and 'IO::File' methods "
"related to input and output. In particular, the following methods will "
"iterate themselves over all handles associated with the 'IO::Tee' object, "
"and return TRUE indicating success if and only if all associated handles "
"returned TRUE indicating success: \n"
"* close \n"
"* truncate \n"
"* write \n"
"* syswrite \n"
"* format_write \n"
"* formline \n"
"* fcntl \n"
"* ioctl \n"
"* flush \n"
"* clearerr \n"
"* seek\n"
"\n"
"The following methods perform input multiplexing as described above: \n"
"* read \n"
"* sysread \n"
"* readline \n"
"* getc \n"
"* gets \n"
"* eof \n"
"* getline \n"
"* getlines\n"
"\n"
"The following methods can be used to set (but not retrieve) the current "
"values of output-related state variables on all associated handles: \n"
"* autoflush \n"
"* output_field_separator \n"
"* output_record_separator \n"
"* format_page_number \n"
"* format_lines_per_page \n"
"* format_lines_left \n"
"* format_name \n"
"* format_top_name \n"
"* format_line_break_characters \n"
"* format_formfeed\n"
"\n"
"The following methods are directly passed on to the input handle given as "
"the first argument to the 'IO::Tee' constructor: \n"
"* input_record_separator \n"
"* input_line_number\n"
"\n"
"Note that the return value of input multiplexing methods (such as 'print') "
"is always the return value of the input action, not the return value of "
"subsequent output actions. In particular, no error is indicated by the "
"return value if the input action itself succeeds but subsequent output "
"multiplexing fails."
msgstr ""

#. leap/perl-IO-TieCombine/summary
msgid "Produce Tied (and Other) Separate but Combined Variables"
msgstr ""

#. leap/perl-IO-TieCombine/description
msgid "produce tied (and other) separate but combined variables"
msgstr ""

#. leap/perl-IO-Tty/summary
msgid "Low-level allocate a pseudo-Tty, import constants."
msgstr ""

#. leap/perl-IO-Tty/description
msgid ""
"'IO::Tty' is used internally by 'IO::Pty' to create a pseudo-tty. You "
"wouldn't want to use it directly except to import constants, use 'IO::Pty'. "
"For a list of importable constants, see the IO::Tty::Constant manpage.\n"
"\n"
"Windows is now supported, but ONLY under the Cygwin environment, see the "
"http://sources.redhat.com/cygwin/ manpage.\n"
"\n"
"Please note that pty creation is very system-dependend. From my experience, "
"any modern POSIX system should be fine. Find below a list of systems that "
"'IO::Tty' should work on. A more detailed table (which is slowly getting out-"
"of-date) is available from the project pages document manager at SourceForge "
"the http://sourceforge.net/projects/expectperl/ manpage.\n"
"\n"
"If you have problems on your system and your system is listed in the "
"\"verified\" list, you probably have some non-standard setup, e.g. you "
"compiled your Linux-kernel yourself and disabled ptys (bummer!). Please ask "
"your friendly sysadmin for help.\n"
"\n"
"If your system is not listed, unpack the latest version of 'IO::Tty', do a "
"''perl Makefile.PL; make; make test; uname -a'' and send me (_RGiersig@cpan."
"org_) the results and I'll see what I can deduce from that. There are "
"chances that it will work right out-of-the-box...\n"
"\n"
"If it's working on your system, please send me a short note with details "
"(version number, distribution, etc. 'uname -a' and 'perl -V' is a good "
"start; also, the output from \"perl Makefile.PL\" contains a lot of "
"interesting info, so please include that as well) so I can get an overview. "
"Thanks!"
msgstr ""

#. leap/perl-IO-stringy/summary
#. leap/perl-IO-stringy/description
#, fuzzy
msgid "IO::stringy Perl module"
msgstr "IO::Socket::SSL Perl Module"

#. leap/perl-IP-Country/summary
msgid "Fast Lookup of Country Codes From Ip Addresses"
msgstr ""

#. leap/perl-IP-Country/description
msgid ""
"Finding the home country of a client using only the IP address can be "
"difficult. Looking up the domain name associated with that address can "
"provide some help, but many IP address are not reverse mapped to any useful "
"domain, and the most common domain (.com) offers no help when looking for "
"country.\n"
"\n"
"This module comes bundled with a database of countries where various IP "
"addresses have been assigned. Although the country of assignment will "
"probably be the country associated with a large ISP rather than the client "
"herself, this is probably good enough for most log analysis applications, "
"and under test has proved to be as accurate as reverse-DNS and WHOIS lookup."
msgstr ""

#. leap/perl-IPC-Run/summary
msgid "System() and background procs w/ piping, redirs, ptys (Unix, Win32)"
msgstr ""

#. leap/perl-IPC-Run/description
msgid ""
"IPC::Run allows you to run and interact with child processes using files, "
"pipes, and pseudo-ttys. Both system()-style and scripted usages are "
"supported and may be mixed. Likewise, functional and OO API styles are both "
"supported and may be mixed.\n"
"\n"
"Various redirection operators reminiscent of those seen on common Unix and "
"DOS command lines are provided."
msgstr ""

#. leap/perl-IPC-Run3/summary
msgid "Run a Subprocess with Input/Ouput Redirection"
msgstr ""

#. leap/perl-IPC-Run3/description
msgid ""
"This module allows you to run a subprocess and redirect stdin, stdout, and/"
"or stderr to files and perl data structures. It aims to satisfy 99% of the "
"need for using 'system', 'qx', and 'open3' with a simple, extremely Perlish "
"API.\n"
"\n"
"Speed, simplicity, and portability are paramount. (That's speed of Perl "
"code; which is often much slower than the kind of buffered I/O that this "
"module uses to spool input to and output from the child command.)"
msgstr ""

#. leap/perl-IPC-ShareLite/summary
msgid "Lightweight interface to shared memory"
msgstr ""

#. leap/perl-IPC-ShareLite/description
msgid ""
"IPC::ShareLite provides a simple interface to shared memory, allowing data "
"to be efficiently communicated between processes. Your operating system must "
"support SysV IPC (shared memory and semaphores) in order to use this "
"module.\n"
"\n"
"IPC::ShareLite provides an abstraction of the shared memory and semaphore "
"facilities of SysV IPC, allowing the storage of arbitrarily large data; the "
"module automatically acquires and removes shared memory segments as needed. "
"Storage and retrieval of data is atomic, and locking functions are provided "
"for higher-level synchronization.\n"
"\n"
"In many respects, this module is similar to IPC::Shareable. However, IPC::"
"ShareLite does not provide a tied interface, does not (automatically) allow "
"the storage of variables, and is written in C for additional speed.\n"
"\n"
"Construct an IPC::ShareLite object by calling its constructor:\n"
"\n"
"    my $share = IPC::ShareLite->new(         -key     => 1971,         -"
"create  => 'yes',         -destroy => 'no'     ) or die $!;\n"
"\n"
"Once an instance has been created, data can be written to shared memory by "
"calling the store() method:\n"
"\n"
"\t$share->store(\"This is going in shared memory\");\n"
"\n"
"Retrieve the data by calling the fetch() method:\n"
"\n"
"\tmy $str = $share->fetch();\n"
"\n"
"The store() and fetch() methods are atomic; any processes attempting to read "
"or write to the memory are blocked until these calls finish. However, in "
"certain situations, you'll want to perform multiple operations atomically. "
"Advisory locking methods are available for this purpose.\n"
"\n"
"An exclusive lock is obtained by calling the lock() method:\n"
"\n"
"\t$share->lock();\n"
"\n"
"Happily, the lock() method also accepts all of the flags recognized by the "
"flock() system call. So, for example, you can obtain a shared lock like "
"this:\n"
"\n"
"\t$share->lock( LOCK_SH );\n"
"\n"
"Or, you can make either type of lock non-blocking:\n"
"\n"
"\t$share->lock( LOCK_EX|LOCK_NB );\n"
"\n"
"Release the lock by calling the unlock() method:\n"
"\n"
"\t$share->unlock;"
msgstr ""

#. leap/perl-IPC-System-Simple/summary
msgid "Run commands simply, with detailed diagnostics"
msgstr ""

#. leap/perl-IPC-System-Simple/description
msgid ""
"Calling Perl's in-built 'system()' function is easy, determining if it was "
"successful is _hard_. Let's face it, '$?' isn't the nicest variable in the "
"world to play with, and even if you _do_ check it, producing a well-"
"formatted error string takes a lot of work.\n"
"\n"
"'IPC::System::Simple' takes the hard work out of calling external commands. "
"In fact, if you want to be really lazy, you can just write:\n"
"\n"
"    use IPC::System::Simple qw(system);\n"
"\n"
"and all of your 'system' commands will either succeed (run to completion and "
"return a zero exit value), or die with rich diagnostic messages.\n"
"\n"
"The 'IPC::System::Simple' module also provides a simple replacement to "
"Perl's backticks operator. Simply write:\n"
"\n"
"    use IPC::System::Simple qw(capture);\n"
"\n"
"and then use the the /capture() manpage command just like you'd use "
"backticks. If there's an error, it will die with a detailed description of "
"what went wrong. Better still, you can even use 'capturex()' to run the "
"equivalent of backticks, but without the shell:\n"
"\n"
"    use IPC::System::Simple qw(capturex);\n"
"\n"
"    my $result = capturex($command, @args);\n"
"\n"
"If you want more power than the basic interface, including the ability to "
"specify which exit values are acceptable, trap errors, or process "
"diagnostics, then read on!"
msgstr ""

#. leap/perl-IRI/summary
#, fuzzy
msgid "Internationalized Resource Identifiers"
msgstr "Outils de traçage"

#. leap/perl-IRI/description
msgid ""
"The IRI module provides an object representation for Internationalized "
"Resource Identifiers (IRIs) as defined by at http://www.ietf.org/rfc/rfc3987."
"txt and supports their parsing, serializing, and base resolution."
msgstr ""

#. leap/perl-Ima-DBI/summary
msgid "Database connection caching and organization"
msgstr ""

#. leap/perl-Ima-DBI/description
msgid ""
"Ima::DBI attempts to organize and facilitate caching and more efficient use "
"of database connections and statement handles by storing DBI and SQL "
"information with your class (instead of as seperate objects). This allows "
"you to pass around just one object without worrying about a trail of DBI "
"handles behind it.\n"
"\n"
"One of the things I always found annoying about writing large programs with "
"DBI was making sure that I didn't have duplicate database handles open. I "
"was also annoyed by the somewhat wasteful nature of the prepare/execute/"
"finish route I'd tend to go through in my subroutines. The new DBI-"
">connect_cached and DBI->prepare_cached helped a lot, but I still had to "
"throw around global datasource, username and password information.\n"
"\n"
"So, after a while I grew a small library of DBI helper routines and "
"techniques. Ima::DBI is the culmination of all this, put into a nice(?), "
"clean(?) class to be inherited from."
msgstr ""

#. leap/perl-Image-ExifTool/summary
#, fuzzy
msgid "Read and write meta information"
msgstr "Module perl pour lire les fichier TNEF"

#. leap/perl-Image-ExifTool/description
#, fuzzy
msgid ""
"Reads and writes meta information in a wide variety of files, including the "
"maker notes of many digital cameras by various manufacturers such as Canon, "
"Casio, DJI, FLIR, FujiFilm, GE, GoPro, HP, JVC/Victor, Kodak, Leaf, Minolta/"
"Konica-Minolta, Nikon, Nintendo, Olympus/Epson, Panasonic/Leica, Pentax/"
"Asahi, Phase One, Reconyx, Ricoh, Samsung, Sanyo, Sigma/Foveon and Sony."
msgstr ""
"ExifTool est un module Perl fournissant applicatione en ligne de commande "
"pour lire et modifier les meta-informations de fichiers graphiques. Il "
"reconnait EXIF, GPS, IPTC, XMP, JFIF, GeoTIFF, ICC Profile, Photoshop IRB, "
"et ID3 ainsi que les balises propriétaires de la plupart des manufacturiers "
"d'appareils photo comme Canon, Casio, FujiFilm, Kodak, Leaf, Minolta/Konica-"
"Minolta, Nikon, Olympus/Epson, Panasonic/Leica, Pentax/Asahi, Ricoh, Sanyo, "
"et Sigma/Foveon."

#. leap/perl-Image-Info/summary
msgid "Extract meta information from image files"
msgstr ""

#. leap/perl-Image-Info/description
msgid ""
"This module provides functions to extract various kinds of meta information "
"from image files."
msgstr ""

#. leap/perl-Image-Sane/summary
msgid "Perl extension for the SANE (Scanner Access Now Easy)"
msgstr ""

#. leap/perl-Image-Sane/description
msgid ""
"These Perl bindings for the SANE (Scanner Access Now Easy) Project allow you "
"to access SANE-compatible scanners in a Perlish and object-oriented way, "
"freeing you from the casting and memory management in C, yet remaining very "
"close in spirit to original API.\n"
"\n"
"Find out more about SANE at http://www.sane-project.org."
msgstr ""

#. leap/perl-Image-Size/summary
msgid "Read the dimensions of an image in several popular formats"
msgstr ""

#. leap/perl-Image-Size/description
msgid ""
"The *Image::Size* library is based upon the 'wwwis' script written by Alex "
"Knowles _(alex@ed.ac.uk)_, a tool to examine HTML and add 'width' and "
"'height' parameters to image tags. The sizes are cached internally based on "
"file name, so multiple calls on the same file name (such as images used in "
"bulleted lists, for example) do not result in repeated computations."
msgstr ""

#. leap/perl-Import-Into/summary
#, fuzzy
msgid "Import packages into other packages"
msgstr "Paquet de base kdeartwork"

#. leap/perl-Import-Into/description
msgid ""
"Writing exporters is a pain. Some use the Exporter manpage, some use the "
"Sub::Exporter manpage, some use the Moose::Exporter manpage, some use the "
"Exporter::Declare manpage ... and some things are pragmas.\n"
"\n"
"Exporting on someone else's behalf is harder. The exporters don't provide a "
"consistent API for this, and pragmas need to have their import method called "
"directly, since they effect the current unit of compilation.\n"
"\n"
"'Import::Into' provides global methods to make this painless."
msgstr ""

#. leap/perl-Importer/summary
msgid "Alternative but compatible interface to modules that export symbols"
msgstr ""

#. leap/perl-Importer/description
msgid ""
"This module acts as a layer between Exporter and modules which consume "
"exports. It is feature-compatible with Exporter, plus some much needed "
"extras. You can use this to import symbols from any exporter that follows "
"Exporters specification. The exporter modules themselves do not need to use "
"or inherit from the Exporter module, they just need to set '@EXPORT' and/or "
"other variables."
msgstr ""

#. leap/perl-Inline/summary
msgid "Write Perl Subroutines in Other Programming Languages"
msgstr ""

#. leap/perl-Inline/description
msgid ""
"The Inline module allows you to put source code from other programming "
"languages directly \"inline\" in a Perl script or module. The code is "
"automatically compiled as needed, and then loaded for immediate access from "
"Perl.\n"
"\n"
"Inline saves you from the hassle of having to write and compile your own "
"glue code using facilities like XS or SWIG. Simply type the code where you "
"want it and run your Perl as normal. All the hairy details are handled for "
"you. The compilation and installation of your code chunks all happen "
"transparently; all you will notice is the delay of compilation on the first "
"run.\n"
"\n"
"The Inline code only gets compiled the first time you run it (or whenever it "
"is modified) so you only take the performance hit once. Code that is Inlined "
"into distributed modules (like on the CPAN) will get compiled when the "
"module is installed, so the end user will never notice the compilation "
"time.\n"
"\n"
"Best of all, it works the same on both Unix and Microsoft Windows. See "
"Inline- Support for support information."
msgstr ""

#. leap/perl-Inline-Python/summary
msgid "Write Perl subs and classes in Python"
msgstr ""

#. leap/perl-Inline-Python/description
msgid ""
"The 'Inline::Python' module allows you to put Python source code directly "
"\"inline\" in a Perl script or module. It sets up an in-process Python "
"interpreter, runs your code, and then examines Python's symbol table for "
"things to bind to Perl. The process of interrogating the Python interpreter "
"for globals only occurs the first time you run your Python code. The "
"namespace is cached, and subsequent calls use the cached version.\n"
"\n"
"This document describes 'Inline::Python', the Perl package which gives you "
"access to a Python interpreter. For lack of a better place to keep it, it "
"also gives you instructions on how to use 'perlmodule', the Python package "
"which gives you access to the Perl interpreter."
msgstr ""

#. leap/perl-Iterator/summary
msgid "A general-purpose iterator class"
msgstr ""

#. leap/perl-Iterator/description
msgid ""
"This module is meant to be the definitive implementation of iterators, as "
"popularized by Mark Jason Dominus's lectures and recent book (_Higher Order "
"Perl_, Morgan Kauffman, 2005).\n"
"\n"
"An \"iterator\" is an object, represented as a code block that generates the "
"\"next value\" of a sequence, and generally implemented as a closure. When "
"you need a value to operate on, you pull it from the iterator. If it depends "
"on other iterators, it pulls values from them when it needs to. Iterators "
"can be chained together (see the Iterator::Util manpage for functions that "
"help you do just that), queueing up work to be done but _not actually doing "
"it_ until a value is needed at the front end of the chain. At that time, one "
"data value is pulled through the chain.\n"
"\n"
"Contrast this with ordinary array processing, where you load or compute all "
"of the input values at once, then loop over them in memory. It's analogous "
"to the difference between looping over a file one line at a time, and "
"reading the entire file into an array of lines before operating on it.\n"
"\n"
"Iterator.pm provides a class that simplifies creation and use of these "
"iterator objects. Other 'Iterator::' modules (see the /\"SEE ALSO\" manpage) "
"provide many general-purpose and special-purpose iterator functions.\n"
"\n"
"Some iterators are infinite (that is, they generate infinite sequences), and "
"some are finite. When the end of a finite sequence is reached, the iterator "
"code block should throw an exception of the type 'Iterator::X::"
"Am_Now_Exhausted'; this is usually done via the the /is_done manpage "
"function.. This will signal the Iterator class to mark the object as "
"exhausted. The the /is_exhausted manpage method will then return true, and "
"the the /isnt_exhausted manpage method will return false. Any further calls "
"to the the /value manpage method will throw an exception of the type "
"'Iterator::X::Exhausted'. See the /DIAGNOSTICS manpage.\n"
"\n"
"Note that in many, many cases, you will not need to explicitly create an "
"iterator; there are plenty of iterator generation and manipulation functions "
"in the other associated modules. You can just plug them together like "
"building blocks."
msgstr ""

#. leap/perl-Iterator-Util/summary
msgid "Essential utilities for the Iterator class"
msgstr ""

#. leap/perl-Iterator-Util/description
msgid ""
"This module implements many useful functions for creating and manipulating "
"iterator objects.\n"
"\n"
"An \"iterator\" is an object, represented as a code block that generates the "
"\"next value\" of a sequence, and generally implemented as a closure. For "
"further information, including a tutorial on using iterator objects, see the "
"the Iterator manpage documentation."
msgstr ""

#. leap/perl-JSON/summary
msgid "JSON (JavaScript Object Notation) encoder/decoder"
msgstr ""

#. leap/perl-JSON/description
msgid ""
"This module is a thin wrapper for JSON::XS-compatible modules with a few "
"additional features. All the backend modules convert a Perl data structure "
"to a JSON text as of RFC4627 (which we know is obsolete but we still stick "
"to; see below for an option to support part of RFC7159) and vice versa. This "
"module uses JSON::XS by default, and when JSON::XS is not available, this "
"module falls back on JSON::PP, which is in the Perl core since 5.14. If "
"JSON::PP is not available either, this module then falls back on JSON::"
"backportPP (which is actually JSON::PP in a different .pm file) bundled in "
"the same distribution as this module. You can also explicitly specify to use "
"Cpanel::JSON::XS, a fork of JSON::XS by Reini Urban.\n"
"\n"
"All these backend modules have slight incompatibilities between them, "
"including extra features that other modules don't support, but as long as "
"you use only common features (most important ones are described below), "
"migration from backend to backend should be reasonably easy. For details, "
"see each backend module you use."
msgstr ""

#. leap/perl-JSON-Any/summary
msgid "(DEPRECATED) Wrapper Class for the various JSON classes"
msgstr ""

#. leap/perl-JSON-Any/description
msgid ""
"This module tries to provide a coherent API to bring together the various "
"JSON modules currently on CPAN. This module will allow you to code to any "
"JSON API and have it work regardless of which JSON module is actually "
"installed.\n"
"\n"
"    use JSON::Any;\n"
"\n"
"    my $j = JSON::Any->new;\n"
"\n"
"    $json = $j->objToJson({foo=>'bar', baz=>'quux'});     $obj = $j-"
">jsonToObj($json);\n"
"\n"
"or\n"
"\n"
"    $json = $j->encode({foo=>'bar', baz=>'quux'});     $obj = $j-"
">decode($json);\n"
"\n"
"or\n"
"\n"
"    $json = $j->Dump({foo=>'bar', baz=>'quux'});     $obj = $j-"
">Load($json);\n"
"\n"
"or\n"
"\n"
"    $json = $j->to_json({foo=>'bar', baz=>'quux'});     $obj = $j-"
">from_json($json);\n"
"\n"
"or without creating an object:\n"
"\n"
"    $json = JSON::Any->objToJson({foo=>'bar', baz=>'quux'});     $obj = "
"JSON::Any->jsonToObj($json);\n"
"\n"
"On load, JSON::Any will find a valid JSON module in your @INC by looking for "
"them in this order:\n"
"\n"
"    Cpanel::JSON::XS     JSON::XS     JSON::PP     JSON     JSON::DWIW\n"
"\n"
"And loading the first one it finds.\n"
"\n"
"You may change the order by specifying it on the 'use JSON::Any' line:\n"
"\n"
"    use JSON::Any qw(DWIW XS CPANEL JSON PP);\n"
"\n"
"Specifying an order that is missing modules will prevent those module from "
"being used:\n"
"\n"
"    use JSON::Any qw(CPANEL PP); # same as JSON::MaybeXS\n"
"\n"
"This will check in that order, and will never attempt to load the JSON::XS "
"manpage, the JSON.pm/JSON manpage, or the JSON::DWIW manpage. This can also "
"be set via the '$ENV{JSON_ANY_ORDER}' environment variable.\n"
"\n"
"the JSON::Syck manpage has been deprecated by its author, but in the attempt "
"to still stay relevant as a \"Compatibility Layer\" JSON::Any still supports "
"it. This support however has been made optional starting with JSON::Any "
"1.19. In deference to a bug request starting with JSON 1.20, the JSON::Syck "
"manpage and other deprecated modules will still be installed, but only as a "
"last resort and will now include a warning.\n"
"\n"
"    use JSON::Any qw(Syck XS JSON);\n"
"\n"
"or\n"
"\n"
"    $ENV{JSON_ANY_ORDER} = 'Syck XS JSON';\n"
"\n"
"At install time, JSON::Any will attempt to install the JSON::PP manpage as a "
"reasonable fallback if you do not appear have *any* backends installed on "
"your system.\n"
"\n"
"WARNING: If you call JSON::Any with an empty list\n"
"\n"
"    use JSON::Any ();\n"
"\n"
"It will skip the JSON package detection routines and will die loudly that it "
"couldn't find a package."
msgstr ""

#. leap/perl-JSON-DWIW/summary
msgid "JSON converter that Does What I Want"
msgstr ""

#. leap/perl-JSON-DWIW/description
msgid ""
"Other JSON modules require setting several parameters before calling the "
"conversion methods to do what I want. This module does things by default "
"that I think should be done when working with JSON in Perl. This module also "
"encodes and decodes faster than the JSON manpage.pm and the JSON::Syck "
"manpage in my benchmarks.\n"
"\n"
"This means that any piece of data in Perl (assuming it's valid unicode) will "
"get converted to something in JSON instead of throwing an exception. It also "
"means that output will be strict JSON, while accepted input will be "
"flexible, without having to set any options.\n"
"\n"
"For a list of changes in recent versions, see the documentation for the "
"JSON::DWIW::Changes manpage.\n"
"\n"
"This module can be downloaded from the http://www.cpan.org/authors/id/D/DO/"
"DOWENS/ manpage."
msgstr ""

#. leap/perl-JSON-MaybeXS/summary
msgid "Use L<Cpanel::JSON::XS> with a fallback to L<JSON::XS> and L<JSON::PP>"
msgstr ""

#. leap/perl-JSON-MaybeXS/description
msgid ""
"This module first checks to see if either Cpanel::JSON::XS or JSON::XS is "
"already loaded, in which case it uses that module. Otherwise it tries to "
"load Cpanel::JSON::XS, then JSON::XS, then JSON::PP in order, and either "
"uses the first module it finds or throws an error.\n"
"\n"
"It then exports the 'encode_json' and 'decode_json' functions from the "
"loaded module, along with a 'JSON' constant that returns the class name for "
"calling 'new' on.\n"
"\n"
"If you're writing fresh code rather than replacing JSON.pm usage, you might "
"want to pass options as constructor args rather than calling mutators, so we "
"provide our own 'new' method that supports that."
msgstr ""

#. leap/perl-JSON-RPC/summary
#, fuzzy
msgid "JSON RPC 2.0 Server Implementation"
msgstr "Gestion des préférences"

#. leap/perl-JSON-RPC/description
msgid ""
"JSON::RPC is a set of modules that implement JSON RPC 2.0 protocol.\n"
"\n"
"    If you are using old JSON::RPC code (up to 0.96), DO NOT EXPECT     YOUR "
"CODE TO WORK WITH THIS VERSION. THIS VERSION IS     ****BACKWARDS "
"INCOMPATIBLE****"
msgstr ""

#. leap/perl-JSON-Validator/summary
msgid "Validate data against a JSON schema"
msgstr ""

#. leap/perl-JSON-Validator/description
msgid ""
"JSON::Validator is a data structure validation library based around at "
"https://json-schema.org/. This module can be used directly with a JSON "
"schema or you can use the elegant DSL schema-builder JSON::Validator::Joi to "
"define the schema programmatically."
msgstr ""

#. leap/perl-JSON-XS/summary
msgid "JSON serialising/deserialising, done correctly and fast"
msgstr ""

#. leap/perl-JSON-XS/description
msgid ""
"This module converts Perl data structures to JSON and vice versa. Its "
"primary goal is to be _correct_ and its secondary goal is to be _fast_. To "
"reach the latter goal it was written in C.\n"
"\n"
"Beginning with version 2.0 of the JSON module, when both JSON and JSON::XS "
"are installed, then JSON will fall back on JSON::XS (this can be overridden) "
"with no overhead due to emulation (by inheriting constructor and methods). "
"If JSON::XS is not available, it will fall back to the compatible JSON::PP "
"module as backend, so using JSON instead of JSON::XS gives you a portable "
"JSON API that can be fast when you need it and doesn't require a C compiler "
"when that is a problem.\n"
"\n"
"As this is the n-th-something JSON module on CPAN, what was the reason to "
"write yet another JSON module? While it seems there are many JSON modules, "
"none of them correctly handle all corner cases, and in most cases their "
"maintainers are unresponsive, gone missing, or not listening to bug reports "
"for other reasons.\n"
"\n"
"See MAPPING, below, on how JSON::XS maps perl values to JSON values and vice "
"versa."
msgstr ""

#. leap/perl-JavaScript-Minifier-XS/summary
msgid "XS based JavaScript minifier"
msgstr ""

#. leap/perl-JavaScript-Minifier-XS/description
msgid ""
"'JavaScript::Minifier::XS' is a JavaScript \"minifier\"; its designed to "
"remove un-necessary whitespace and comments from JavaScript files, which "
"also *not* breaking the JavaScript.\n"
"\n"
"'JavaScript::Minifier::XS' is similar in function to 'JavaScript::Minifier', "
"but is substantially faster as its written in XS and not just pure Perl."
msgstr ""

#. leap/perl-LWP-MediaTypes/summary
msgid "guess media type for a file or a URL"
msgstr ""

#. leap/perl-LWP-MediaTypes/description
msgid ""
"This module provides functions for handling media (also known as MIME) types "
"and encodings. The mapping from file extensions to media types is defined by "
"the _media.types_ file. If the _~/.media.types_ file exists it is used "
"instead. For backwards compatibility we will also look for _~/.mime.types_.\n"
"\n"
"The following functions are exported by default: \n"
"* guess_media_type( $filename ) \n"
"* guess_media_type( $uri ) \n"
"* guess_media_type( $filename_or_uri, $header_to_modify )\n"
"\n"
"  This function tries to guess media type and encoding for a file or a "
"URI.   It returns the content type, which is a string like '\"text/html\"'. "
"In   array context it also returns any content encodings applied (in the "
"order   used to encode the file). You can pass a URI object reference, "
"instead of   the file name.\n"
"\n"
"  If the type can not be deduced from looking at the file name, then   "
"guess_media_type() will let the '-T' Perl operator take a look. If this   "
"works (and '-T' returns a TRUE value) then we return _text/plain_ as the   "
"type, otherwise we return _application/octet-stream_ as the type.\n"
"\n"
"  The optional second argument should be a reference to a HTTP::Headers   "
"object or any object that implements the $obj->header method in a similar   "
"way. When it is present the values of the 'Content-Type' and   'Content-"
"Encoding' will be set for this header. \n"
"* media_suffix( $type, ... )\n"
"\n"
"  This function will return all suffixes that can be used to denote the   "
"specified media type(s). Wildcard types can be used. In a scalar context   "
"it will return the first suffix found. Examples:\n"
"\n"
"    @suffixes = media_suffix('image/*', 'audio/basic');     $suffix = "
"media_suffix('text/html');\n"
"\n"
"The following functions are only exported by explicit request: \n"
"* add_type( $type, @exts )\n"
"\n"
"  Associate a list of file extensions with the given media type. Example:\n"
"\n"
"      add_type(\"x-world/x-vrml\" => qw(wrl vrml)); \n"
"* add_encoding( $type, @ext )\n"
"\n"
"  Associate a list of file extensions with an encoding type. Example:\n"
"\n"
"   add_encoding(\"x-gzip\" => \"gz\"); \n"
"* read_media_types( @files )\n"
"\n"
"  Parse media types files and add the type mappings found there. Example:\n"
"\n"
"      read_media_types(\"conf/mime.types\");"
msgstr ""

#. leap/perl-LWP-Online/summary
msgid "Does your process have access to the web"
msgstr ""

#. leap/perl-LWP-Online/description
msgid ""
"This module attempts to answer, as accurately as it can, one of the nastiest "
"technical questions there is. \n"
"*Am I on the internet?*\n"
"\n"
"The answer is useful in a wide range of decisions. For example...\n"
"\n"
"_Should my test scripts run the online portion of the tests or just skip "
"them?_\n"
"\n"
"_Do I try to fetch fresh data from the server?_\n"
"\n"
"_If my request to the server breaks, is it because I'm offline, or because "
"the server is offline?_\n"
"\n"
"And so on, and so forth.\n"
"\n"
"But a host of networking and security issues make this problem very "
"difficult. There are firewalls, proxies (both well behaved and badly "
"behaved). We might not have DNS. We might not have a network card at all!\n"
"\n"
"You might have network access, but only to a for-money wireless network that "
"responds to ever HTTP request with a page asking you to enter your credit "
"card details for paid access. Which means you don't \"REALLY\" have access.\n"
"\n"
"The mere nature of the question makes it practically unsolvable.\n"
"\n"
"But with the answer being so useful, and the only other alternative being to "
"ask the user \"duh... are you online?\" (when you might not have a user at "
"all) it's my gut feeling that it is worthwhile at least making an attempt to "
"solve the problem, if only in a limited way."
msgstr ""

#. leap/perl-LWP-Protocol-https/summary
msgid "Provide https support for LWP::UserAgent"
msgstr ""

#. leap/perl-LWP-Protocol-https/description
msgid ""
"The LWP::Protocol::https module provides support for using https schemed "
"URLs with LWP. This module is a plug-in to the LWP protocol handling, so you "
"don't use it directly. Once the module is installed LWP is able to access "
"sites using HTTP over SSL/TLS.\n"
"\n"
"If hostname verification is requested by LWP::UserAgent's 'ssl_opts', and "
"neither 'SSL_ca_file' nor 'SSL_ca_path' is set, then 'SSL_ca_file' is "
"implied to be the one provided by Mozilla::CA. If the Mozilla::CA module "
"isn't available SSL requests will fail. Either install this module, set up "
"an alternative 'SSL_ca_file' or disable hostname verification.\n"
"\n"
"This module used to be bundled with the libwww-perl, but it was unbundled in "
"v6.02 in order to be able to declare its dependencies properly for the CPAN "
"tool-chain. Applications that need https support can just declare their "
"dependency on LWP::Protocol::https and will no longer need to know what "
"underlying modules to install."
msgstr ""

#. leap/perl-Lexical-Persistence/summary
#, fuzzy
msgid "Persistent lexical variable values for arbitrary calls."
msgstr "Mémoire persistante pour arbitrage des données"

#. leap/perl-Lexical-Persistence/description
msgid ""
"Lexical::Persistence does a few things, all related. Note that all the "
"behaviors listed here are the defaults. Subclasses can override nearly every "
"aspect of Lexical::Persistence's behavior.\n"
"\n"
"Lexical::Persistence lets your code access persistent data through lexical "
"variables. This example prints \"some value\" because the value of $x "
"persists in the $lp object between setter() and getter().\n"
"\n"
"\tuse Lexical::Persistence;\n"
"\n"
"\tmy $lp = Lexical::Persistence->new(); \t$lp->call(\\&setter); \t$lp-"
">call(\\&getter);\n"
"\n"
"\tsub setter { my $x = \"some value\" } \tsub getter { print my $x, \"\\n"
"\" }\n"
"\n"
"Lexicals with leading underscores are not persistent.\n"
"\n"
"By default, Lexical::Persistence supports accessing data from multiple "
"sources through the use of variable prefixes. The set_context() member sets "
"each data source. It takes a prefix name and a hash of key/value pairs. By "
"default, the keys must have sigils representing their variable types.\n"
"\n"
"\tuse Lexical::Persistence;\n"
"\n"
"\tmy $lp = Lexical::Persistence->new(); \t$lp->set_context( pi => "
"{ '$member' => 3.141 } ); \t$lp->set_context( e => { '@member' => [ 2, '.', "
"7, 1, 8 ] } ); \t$lp->set_context( \t\tanimal => { \t\t\t'%member' => { cat "
"=> \"meow\", dog => \"woof\" } \t\t} \t);\n"
"\n"
"\t$lp->call(\\&display);\n"
"\n"
"\tsub display { \t\tmy ($pi_member, @e_member, %animal_member);\n"
"\n"
"\t\tprint \"pi = $pi_member\\n\"; \t\tprint \"e = @e_member\\n\"; \t\twhile "
"(my ($animal, $sound) = each %animal_member) { \t\t\tprint \"The $animal "
"goes... $sound!\\n\"; \t\t} \t}\n"
"\n"
"And the corresponding output:\n"
"\n"
"\tpi = 3.141 \te = 2 . 7 1 8 \tThe cat goes... meow! \tThe dog goes... "
"woof!\n"
"\n"
"By default, call() takes a single subroutine reference and an optional list "
"of named arguments. The arguments will be passed directly to the called "
"subroutine, but Lexical::Persistence also makes the values available from "
"the \"arg\" prefix.\n"
"\n"
"\tuse Lexical::Persistence;\n"
"\n"
"\tmy %animals = ( \t\tsnake => \"hiss\", \t\tplane => \"I'm Cartesian\", "
"\t);\n"
"\n"
"\tmy $lp = Lexical::Persistence->new(); \twhile (my ($animal, $sound) = each "
"%animals) { \t\t$lp->call(\\&display, animal => $animal, sound => $sound); "
"\t}\n"
"\n"
"\tsub display { \t\tmy ($arg_animal, $arg_sound); \t\tprint \"The "
"$arg_animal goes... $arg_sound!\\n\"; \t}\n"
"\n"
"And the corresponding output:\n"
"\n"
"\tThe plane goes... I'm Cartesian! \tThe snake goes... hiss!\n"
"\n"
"Sometimes you want to call functions normally. The wrap() method will wrap "
"your function in a small thunk that does the call() for you, returning a "
"coderef.\n"
"\n"
"\tuse Lexical::Persistence;\n"
"\n"
"\tmy $lp = Lexical::Persistence->new(); \tmy $thunk = $lp-"
">wrap(\\&display);\n"
"\n"
"\t$thunk->(animal => \"squirrel\", sound => \"nuts\");\n"
"\n"
"\tsub display { \t\tmy ($arg_animal, $arg_sound); \t\tprint \"The "
"$arg_animal goes... $arg_sound!\\n\"; \t}\n"
"\n"
"And the corresponding output:\n"
"\n"
"\tThe squirrel goes... nuts!\n"
"\n"
"Prefixes are the characters leading up to the first underscore in a lexical "
"variable's name. However, there's also a default context named underscore. "
"It's literally \"_\" because the underscore is not legal in a context name "
"by default. Variables without prefixes, or with prefixes that have not been "
"previously defined by set_context(), are stored in that context.\n"
"\n"
"The get_context() member returns a hash for a named context. This allows "
"your code to manipulate the values within a persistent context.\n"
"\n"
"\tuse Lexical::Persistence;\n"
"\n"
"\tmy $lp = Lexical::Persistence->new(); \t$lp->set_context( \t\t_ => { \t\t"
"\t'@mind' => [qw(My mind is going. I can feel it.)] \t\t} \t);\n"
"\n"
"\twhile (1) { \t\t$lp->call(\\&display); \t\tmy $mind = $lp->get_context(\"_"
"\")->{'@mind'}; \t\tsplice @$mind, rand(@$mind), 1; \t\tlast unless @$mind; "
"\t}\n"
"\n"
"\tsub display { \t\tmy @mind; \t\tprint \"@mind\\n\"; \t}\n"
"\n"
"Displays something like:\n"
"\n"
"\tMy mind is going. I can feel it. \tMy is going. I can feel it. \tMy is "
"going. I feel it. \tMy going. I feel it. \tMy going. I feel \tMy I feel \tMy "
"I \tMy\n"
"\n"
"It's possible to create multiple Lexical::Persistence objects, each with a "
"unique state.\n"
"\n"
"\tuse Lexical::Persistence;\n"
"\n"
"\tmy $lp_1 = Lexical::Persistence->new(); \t$lp_1->set_context( _ => "
"{ '$foo' => \"context 1's foo\" } );\n"
"\n"
"\tmy $lp_2 = Lexical::Persistence->new(); \t$lp_2->set_context( _ => "
"{ '$foo' => \"the foo in context 2\" } );\n"
"\n"
"\t$lp_1->call(\\&display); \t$lp_2->call(\\&display);\n"
"\n"
"\tsub display { \t\tprint my $foo, \"\\n\"; \t}\n"
"\n"
"Gets you this output:\n"
"\n"
"\tcontext 1's foo \tthe foo in context 2\n"
"\n"
"You can also compile and execute perl code contained in plain strings in a a "
"lexical environment that already contains the persisted variables.\n"
"\n"
"\tuse Lexical::Persistence;\n"
"\n"
"\tmy $lp = Lexical::Persistence->new();\n"
"\n"
"\t$lp->do( 'my $message = \"Hello, world\" );\n"
"\n"
"\t$lp->do( 'print \"$message\\n\"' );\n"
"\n"
"Which gives the output:\n"
"\n"
"\tHello, world\n"
"\n"
"If you come up with other fun uses, let us know."
msgstr ""

#. leap/perl-Lexical-SealRequireHints/summary
msgid "Prevent Leakage of Lexical Hints"
msgstr ""

#. leap/perl-Lexical-SealRequireHints/description
msgid ""
"This module works around two historical bugs in Perl's handling of the "
"'%^H' (lexical hints) variable. One bug causes lexical state in one file to "
"leak into another that is 'require'd/'use'd from it. This bug, [perl\n"
"\n"
"The second bug causes lexical state (normally a blank '%^H' once the first "
"bug is fixed) to leak outwards from 'utf8.pm', if it is automatically loaded "
"during Unicode regular expression matching, into whatever source is "
"compiling at the time of the regexp match. This bug, [perl #73174], was "
"present from Perl 5.8.7 up to Perl 5.11.5, fixed in Perl 5.12.0.\n"
"\n"
"Both of these bugs seriously damage the usability of any module relying on "
"'%^H' for lexical scoping, on the affected Perl versions. It is in practice "
"essential to work around these bugs when using such modules. On versions of "
"Perl that require such a workaround, this module globally changes the "
"behaviour of 'require', including 'use' and the implicit 'require' performed "
"in Unicode regular expression matching, so that it no longer exhibits these "
"bugs.\n"
"\n"
"The workaround supplied by this module takes effect the first time its "
"'import' method is called. Typically this will be done by means of a 'use' "
"statement. This should be done as early as possible, because it only affects "
"'require'/'use' statements that are compiled after the workaround goes into "
"effect. For 'use' statements, and 'require' statements that are executed "
"immediately and only once, it suffices to invoke the workaround when loading "
"the first module that will set up vulnerable lexical state. Delayed-action "
"'require' statements, however, are more troublesome, and can require the "
"workaround to be loaded much earlier. Ultimately, an affected Perl program "
"may need to load the workaround as very nearly its first action. Invoking "
"this module multiple times, from multiple modules, is not a problem: the "
"workaround is only applied once, and applies to everything subsequently "
"compiled.\n"
"\n"
"This module is implemented in XS, with a pure Perl backup version for "
"systems that can't handle XS modules. The XS version has a better chance of "
"playing nicely with other modules that modify 'require' handling. The pure "
"Perl version can't work at all on some Perl versions; users of those "
"versions must use the XS. On all Perl versions suffering the underlying hint "
"leakage bug, pure Perl hooking of 'require' breaks the use of 'require' "
"without an explicit parameter (implicitly using '$_')."
msgstr ""

#. leap/perl-Lingua-EN-FindNumber/summary
msgid "Locate (written) numbers in English text"
msgstr ""

#. leap/perl-Lingua-EN-FindNumber/description
msgid ""
"This module provides a regular expression for finding numbers in English "
"text. It also provides functions for extracting and manipulating such "
"numbers."
msgstr ""

#. leap/perl-Lingua-EN-Inflect/summary
msgid "Convert singular to plural. Select \"a\" or \"an\""
msgstr ""

#. leap/perl-Lingua-EN-Inflect/description
msgid ""
"*[_Note:_ This module is strictly in maintenance mode now. Take a look at "
"the newer Lingua::EN::Inflexion module, which offers a cleaner and more "
"convenient interface, has many more features (including plural->singular "
"inflexions), and is also much better tested. If you have existing code that "
"relies on Lingua::EN::Inflect, see the section of the documentation entitled "
"\"CONVERTING FROM LINGUA::EN::INFLECT\". ]*\n"
"\n"
"The exportable subroutines of Lingua::EN::Inflect provide plural "
"inflections, \"a\"/\"an\" selection for English words, and manipulation of "
"numbers as words\n"
"\n"
"Plural forms of all nouns, most verbs, and some adjectives are provided. "
"Where appropriate, \"classical\" variants (for example: \"brother\" -> "
"\"brethren\", \"dogma\" -> \"dogmata\", etc.) are also provided.\n"
"\n"
"Pronunciation-based \"a\"/\"an\" selection is provided for all English "
"words, and most initialisms.\n"
"\n"
"It is also possible to inflect numerals (1,2,3) to ordinals (1st, 2nd, 3rd) "
"and to English words (\"one\", \"two\", \"three).\n"
"\n"
"In generating these inflections, Lingua::EN::Inflect follows the Oxford "
"English Dictionary and the guidelines in Fowler's Modern English Usage, "
"preferring the former where the two disagree.\n"
"\n"
"The module is built around standard British spelling, but is designed to "
"cope with common American variants as well. Slang, jargon, and other English "
"dialects are _not_ explicitly catered for.\n"
"\n"
"Where two or more inflected forms exist for a single word (typically a "
"\"classical\" form and a \"modern\" form), Lingua::EN::Inflect prefers the "
"more common form (typically the \"modern\" one), unless \"classical\" "
"processing has been specified (see \"MODERN VS CLASSICAL INFLECTIONS\")."
msgstr ""

#. leap/perl-Lingua-EN-Inflect-Number/summary
msgid "Force number of words to singular or plural"
msgstr ""

#. leap/perl-Lingua-EN-Inflect-Number/description
msgid ""
"This module extends the functionality of Lingua::EN::Inflect with three new "
"functions available for export:"
msgstr ""

#. leap/perl-Lingua-EN-Inflect-Phrase/summary
msgid "Inflect short English Phrases"
msgstr ""

#. leap/perl-Lingua-EN-Inflect-Phrase/description
msgid ""
"Attempts to pluralize or singularize short English phrases.\n"
"\n"
"Does not throw exceptions at present, if you attempt to pluralize an already "
"pluralized phrase, it will leave it unchanged (and vice versa.)\n"
"\n"
"The behavior of this module is subject to change as I tweak the heuristics, "
"as some things get fixed others might regress. The processing of natural "
"language is a messy business.\n"
"\n"
"If it doesn't work, please email or submit to RT the example you tried, and "
"I'll try to fix it."
msgstr ""

#. leap/perl-Lingua-EN-Number-IsOrdinal/summary
msgid "detect if English number is ordinal or cardinal"
msgstr ""

#. leap/perl-Lingua-EN-Number-IsOrdinal/description
msgid ""
"This module will tell you if a number, either in words or as digits, is a "
"cardinal or the ordinal number|http://www.ego4u.com/en/cram-up/vocabulary/"
"numbers/ordinal manpage.\n"
"\n"
"This is useful if you e.g. want to distinguish these types of numbers found "
"with the Lingua::EN::FindNumber manpage and take different actions."
msgstr ""

#. leap/perl-Lingua-EN-Sentence/summary
msgid "Split Text Into Sentences"
msgstr ""

#. leap/perl-Lingua-EN-Sentence/description
msgid ""
"The 'Lingua::EN::Sentence' module contains the function get_sentences, which "
"splits text into its constituent sentences, based on a regular expression "
"and a list of abbreviations (built in and given).\n"
"\n"
"Certain well know exceptions, such as abbreviations, may cause incorrect "
"segmentations. But some of them are already integrated into this code and "
"are being taken care of. Still, if you see that there are words causing the "
"get_sentences function to fail, you can add those to the module, so it "
"notices them."
msgstr ""

#. leap/perl-Lingua-EN-Tagger/summary
msgid "Part-of-speech tagger for English natural language processing"
msgstr ""

#. leap/perl-Lingua-EN-Tagger/description
msgid ""
"The module is a probability based, corpus-trained tagger that assigns POS "
"tags to English text based on a lookup dictionary and a set of probability "
"values. The tagger assigns appropriate tags based on conditional "
"probabilities - it examines the preceding tag to determine the appropriate "
"tag for the current word. Unknown words are classified according to word "
"morphology or can be set to be treated as nouns or other parts of speech.\n"
"\n"
"The tagger also extracts as many nouns and noun phrases as it can, using a "
"set of regular expressions."
msgstr ""

#. leap/perl-Lingua-EN-Words2Nums/summary
#, fuzzy
msgid "convert English text to numbers"
msgstr "Dictionnaire esperanto pour ispell"

#. leap/perl-Lingua-EN-Words2Nums/description
msgid ""
"This module converts English text into numbers. It supports both ordinal and "
"cardinal numbers, negative numbers, and very large numbers.\n"
"\n"
"The main subroutine, which is exported by default, is words2nums(). This "
"subroutine, when fed a string, will attempt to convert it into a number. If "
"it succeeds, the number will be returned. If it fails, it returns undef."
msgstr ""

#. leap/perl-Lingua-PT-Stemmer/summary
msgid "Portuguese language stemming"
msgstr ""

#. leap/perl-Lingua-PT-Stemmer/description
msgid ""
"This module implements a Portuguese stemming algorithm proposed in the paper "
"*A Stemming Algorithm for the Portuguese Language* by *Moreira, V.* and "
"*Huyck, C.*\n"
"\n"
"The eight steps of stemming algorithm are listed as follows: \n"
"* * Plural Reduction \n"
"* * Feminine Reduction \n"
"* * Adverb Reduction \n"
"* * Augmentative/Diminutive Reduction \n"
"* * Noun Suffix Reduction \n"
"* * Verb Suffix Reduction \n"
"* * Vowel Reduction \n"
"* * Accents Removal"
msgstr ""

#. leap/perl-Lingua-Stem/summary
msgid "Stemming of words"
msgstr ""

#. leap/perl-Lingua-Stem/description
msgid ""
"This routine applies stemming algorithms to its parameters, returning the "
"stemmed words as appropriate to the selected locale.\n"
"\n"
"You can import some or all of the class methods.\n"
"\n"
"use Lingua::Stem qw (stem clear_stem_cache stem_caching add_exceptions "
"delete_exceptions get_exceptions set_locale get_locale :all :locale :"
"exceptions :stem :caching);\n"
"\n"
" :all        - imports  stem add_exceptions delete_exceptions "
"get_exceptions                set_locale get_locale  :stem       - imports  "
"stem  :caching    - imports  stem_caching clear_stem_cache  :locale     - "
"imports  set_locale get_locale  :exceptions - imports  add_exceptions "
"delete_exceptions get_exceptions\n"
"\n"
"Currently supported locales are:\n"
"\n"
"      DA          - Danish       DE          - German       EN          - "
"English (also EN-US and EN-UK)       FR          - French       GL          "
"- Galician       IT          - Italian       NO          - Norwegian       "
"PT          - Portuguese       RU          - Russian (also RU-RU and RU-RU."
"KOI8-R)       SV          - Swedish\n"
"\n"
"If you have the memory and lots of stemming to do, I *strongly* suggest "
"using cache level 2 and processing lists in 'big chunks' (long lists) for "
"best performance."
msgstr ""

#. leap/perl-Lingua-Stem-Fr/summary
msgid "Perl French Stemming"
msgstr ""

#. leap/perl-Lingua-Stem-Fr/description
msgid ""
"This module use the a modified version of the Porter Stemming Algorithm to "
"return a stemmed words."
msgstr ""

#. leap/perl-Lingua-Stem-It/summary
msgid "Porter's stemming algorithm for Italian"
msgstr ""

#. leap/perl-Lingua-Stem-It/description
msgid ""
"This module applies the Porter Stemming Algorithm to its parameters, "
"returning the stemmed words.\n"
"\n"
"The algorithm is implemented exactly (I hope :-) as described in:\n"
"\n"
"    http://snowball.tartarus.org/algorithms/italian/stemmer.html\n"
"\n"
"The code is carefully crafted to work in conjunction with the the Lingua::"
"Stem manpage module by Benjamin Franz, from which I've also borrowed some "
"functionalities (caching and exception list)."
msgstr ""

#. leap/perl-Lingua-Stem-Ru/summary
msgid "Porter's stemming algorithm for Russian (KOI8-R only)"
msgstr ""

#. leap/perl-Lingua-Stem-Ru/description
msgid ""
"This module applies the Porter Stemming Algorithm to its parameters, "
"returning the stemmed words.\n"
"\n"
"The algorithm is implemented exactly as described in:\n"
"\n"
"    http://snowball.tartarus.org/algorithms/russian/stemmer.html\n"
"\n"
"The code is carefully crafted to work in conjunction with the Lingua::Stem "
"module by Benjamin Franz. This stemmer is also based on the work of Aldo "
"Capini, see Lingua::Stem::It."
msgstr ""

#. leap/perl-Lingua-Stem-Snowball/summary
msgid "Perl interface to Snowball stemmers"
msgstr ""

#. leap/perl-Lingua-Stem-Snowball/description
msgid ""
"Stemming reduces related words to a common root form -- for instance, \"horse"
"\", \"horses\", and \"horsing\" all become \"hors\". Most commonly, stemming "
"is deployed as part of a search application, allowing searches for a given "
"term to match documents which contain other forms of that term.\n"
"\n"
"Authors:\n"
"--------     Oleg Bartunov, <oleg at sai dot msu dot su>     Teodor Sigaev, "
"<teodor at stack dot net>     Marvin Humphrey <marvin at rectangular dot com>"
msgstr ""

#. leap/perl-Lingua-Stem-Snowball-Da/summary
msgid "Porters stemming algorithm for Denmark"
msgstr ""

#. leap/perl-Lingua-Stem-Snowball-Da/description
msgid ""
"The stem function takes a scalar as a parameter and stems the word according "
"to Martin Porters Danish stemming algorithm, which can be found at the "
"Snowball website: http://snowball.tartarus.org/."
msgstr ""

#. leap/perl-Lingua-Translit/summary
msgid "Transliterates Text Between Writing Systems"
msgstr ""

#. leap/perl-Lingua-Translit/description
msgid ""
"Lingua::Translit can be used to convert text from one writing system to "
"another, based on national or international transliteration tables. Where "
"possible a reverse transliteration is supported.\n"
"\n"
"The term 'transliteration' describes the conversion of text from one writing "
"system or alphabet to another one. The conversion is ideally unique, mapping "
"one character to exactly one character, so the original spelling can be "
"reconstructed. Practically this is not always the case and one single letter "
"of the original alphabet can be transcribed as two, three or even more "
"letters.\n"
"\n"
"Furthermore there is more than one transliteration scheme for one writing "
"system. Therefore it is an important and necessary information, which scheme "
"will be or has been used to transliterate a text, to work integrative and be "
"able to reconstruct the original data.\n"
"\n"
"Reconstruction is a problem though for non-unique transliterations, if no "
"language specific knowledge is available as the resulting clusters of "
"letters may be ambiguous. For example, the Greek character \"PSI\" maps to "
"\"ps\", but \"ps\" could also result from the sequence \"PI\", \"SIGMA\" "
"since \"PI\" maps to \"p\" and \"SIGMA\" maps to s. If a transliteration "
"table leads to ambiguous conversions, the provided table cannot be used "
"reverse.\n"
"\n"
"Otherwise the table can be used in both directions, if appreciated. So if "
"ISO 9 is originally created to convert Cyrillic letters to the Latin "
"alphabet, the reverse transliteration will transform Latin letters to "
"Cyrillic."
msgstr ""

#. leap/perl-Linux-DesktopFiles/summary
msgid "Fast parsing of the Linux desktop files"
msgstr ""

#. leap/perl-Linux-DesktopFiles/description
msgid ""
"The 'Linux::DesktopFiles', a very fast and simple way to parse the Linux "
"desktop files."
msgstr ""

#. leap/perl-Linux-Inotify2/summary
msgid "Scalable directory/file change notification"
msgstr ""

#. leap/perl-Linux-Inotify2/description
msgid ""
"This module implements an interface to the Linux 2.6.13 and later Inotify "
"file/directory change notification system.\n"
"\n"
"It has a number of advantages over the Linux::Inotify module:\n"
"\n"
"   - it is portable (Linux::Inotify only works on x86)    - the equivalent "
"of fullname works correctly    - it is better documented    - it has "
"callback-style interface, which is better suited for      integration.\n"
"\n"
"As for the inotify API itself - it is a very tricky, and somewhat unreliable "
"API. For a good overview of the challenges you might run into, see this LWN "
"article: https://lwn.net/Articles/605128/."
msgstr ""

#. leap/perl-Linux-Pid/summary
msgid "Get the native PID and the PPID on Linux"
msgstr ""

#. leap/perl-Linux-Pid/description
msgid ""
"Why should one use a module to get the PID and the PPID of a process where "
"there are the '$$' variable and the 'getppid()' builtin ? (Not mentioning "
"the equivalent 'POSIX::getpid()' and 'POSIX::getppid()' functions.)\n"
"\n"
"In fact, this is useful on Linux, with multithreaded programs. Linux' C "
"library, using the linux thread model, returns different values of the PID "
"and the PPID from different threads. (Other thread models such as NPTL don't "
"have the same behaviour). This module forces perl to call the underlying C "
"functions 'getpid()' and 'getppid()'."
msgstr ""

#. leap/perl-List-AllUtils/summary
msgid ""
"Combines List::Util, List::SomeUtils and List::UtilsBy in one bite-sized[cut]"
msgstr ""

#. leap/perl-List-AllUtils/description
msgid ""
"Are you sick of trying to remember whether a particular helper is defined in "
"List::Util, List::SomeUtils or List::UtilsBy? I sure am. Now you don't have "
"to remember. This module will export all of the functions that either of "
"those three modules defines.\n"
"\n"
"Note that all function documentation has been shamelessly copied from List::"
"Util, List::SomeUtils and List::UtilsBy."
msgstr ""

#. leap/perl-List-BinarySearch-XS/summary
msgid "Binary Search a sorted array with XS routines."
msgstr ""

#. leap/perl-List-BinarySearch-XS/description
msgid ""
"A binary search searches _sorted_ lists using a divide and conquer "
"technique. On each iteration the search domain is cut in half, until the "
"result is found. The computational complexity of a binary search is O(log "
"n).\n"
"\n"
"This module implements several Binary Search algorithms using XS code for "
"optimal performance. You are free to use this module directly, or as a "
"plugin for the more general List::BinarySearch.\n"
"\n"
"The binary search algorithm implemented in this module is known as a "
"_Deferred Detection_ Binary Search. Deferred Detection provides *stable "
"searches*. Stable binary search algorithms have the following "
"characteristics, contrasted with their unstable binary search cousins: \n"
"* * In the case of non-unique keys, a stable binary search will always   "
"return the lowest-indexed matching element.  An unstable binary search   "
"would   return the first one found, which may not be the chronological "
"first. \n"
"* * Best and worst case time complexity is always O(log n).  Unstable   "
"searches may stop once the target is found, but in the worst case are   "
"still   O(log n).  In practical terms, this difference is usually not "
"meaningful. \n"
"* * Stable binary searches only require one relational comparison of a   "
"given pair of data elements per iteration, where unstable binary searches   "
"require two comparisons per iteration. \n"
"* * The net result is that although an unstable binary search might have   "
"better \"best case\" performance, the fact that a stable binary search "
"gets   away   with fewer comparisons per iteration gives it better "
"performance in the   worst   case, and approximately equal performance in "
"the average case. By trading   away   slightly better \"best case\" "
"performance, the stable search gains the   guarantee   that the element "
"found will always be the lowest-indexed element in a   range of   non-unique "
"keys."
msgstr ""

#. leap/perl-List-Compare/summary
#. leap/perl-List-Compare/description
msgid "Compare elements of two or more lists"
msgstr ""

#. leap/perl-List-MoreUtils/summary
#. leap/perl-List-SomeUtils/summary
msgid "Provide the stuff missing in List::Util"
msgstr ""

#. leap/perl-List-MoreUtils/description
msgid ""
"*List::MoreUtils* provides some trivial but commonly needed functionality on "
"lists which is not going to go into List::Util.\n"
"\n"
"All of the below functions are implementable in only a couple of lines of "
"Perl code. Using the functions from this module however should give slightly "
"better performance as everything is implemented in C. The pure-Perl "
"implementation of these functions only serves as a fallback in case the C "
"portions of this module couldn't be compiled on this machine."
msgstr ""

#. leap/perl-List-MoreUtils-XS/summary
msgid "Provide compiled List::MoreUtils functions"
msgstr ""

#. leap/perl-List-MoreUtils-XS/description
msgid ""
"List::MoreUtils::XS is a backend for List::MoreUtils. Even if it's possible "
"(because of user wishes) to have it practically independent from List::"
"MoreUtils, it technically depend on 'List::MoreUtils'. Since it's only a "
"backend, the API is not public and can change without any warning."
msgstr ""

#. leap/perl-List-SomeUtils/description
msgid ""
"*List::SomeUtils* provides some trivial but commonly needed functionality on "
"lists which is not going to go into List::Util.\n"
"\n"
"All of the below functions are implementable in only a couple of lines of "
"Perl code. Using the functions from this module however should give slightly "
"better performance as everything is implemented in C. The pure-Perl "
"implementation of these functions only serves as a fallback in case the C "
"portions of this module couldn't be compiled on this machine."
msgstr ""

#. leap/perl-List-SomeUtils-XS/summary
#, fuzzy
msgid "XS implementation for List::SomeUtils"
msgstr "7.0 Documentation"

#. leap/perl-List-SomeUtils-XS/description
msgid ""
"There are no user-facing parts here. See List::SomeUtils for API details.\n"
"\n"
"You shouldn't have to install this module directly. When you install List::"
"SomeUtils, it checks whether your system has a compiler. If it does, then it "
"adds a dependency on this module so that it gets installed and you have the "
"faster XS implementation.\n"
"\n"
"This distribution requires List::SomeUtils but to avoid a circular "
"dependency, that dependency is explicitly left out from the this "
"distribution's metadata. However, without LSU already installed this module "
"cannot function."
msgstr ""

#. leap/perl-List-UtilsBy/summary
#, fuzzy
msgid "Higher-Order List Utility Functions"
msgstr "Les fonctions utiles pour Gtk"

#. leap/perl-List-UtilsBy/description
msgid ""
"This module provides a number of list utility functions, all of which take "
"an initial code block to control their behaviour. They are variations on "
"similar core perl or 'List::Util' functions of similar names, but which use "
"the block to control their behaviour. For example, the core Perl function "
"'sort' takes a list of values and returns them, sorted into order by their "
"string value. The 'sort_by' function sorts them according to the string "
"value returned by the extra function, when given each value.\n"
"\n"
" my @names_sorted = sort @names;\n"
"\n"
" my @people_sorted = sort_by { $_->name } @people;"
msgstr ""

#. leap/perl-Locale-Maketext-Gettext/summary
msgid "Joins the gettext and Maketext frameworks"
msgstr ""

#. leap/perl-Locale-Maketext-Gettext/description
msgid ""
"Locale::Maketext::Gettext joins the GNU gettext and Maketext frameworks. It "
"is a subclass of Locale::Maketext(3) that follows the way GNU gettext works. "
"It works seamlessly, _both in the sense of GNU gettext and Maketext_. As a "
"result, you _enjoy both their advantages, and get rid of both their "
"problems, too._\n"
"\n"
"You start as a usual GNU gettext localization project: Work on PO files with "
"the help of translators, reviewers and Emacs. Turn them into MO files with "
"_msgfmt_. Copy them into the appropriate locale directory, such as _/usr/"
"share/locale/de/LC_MESSAGES/myapp.mo_.\n"
"\n"
"Then, build your Maketext localization class, with your base class changed "
"from Locale::Maketext(3) to Locale::Maketext::Gettext. That is all."
msgstr ""

#. leap/perl-Locale-Maketext-Lexicon/summary
msgid "Use other catalog formats in Maketext"
msgstr ""

#. leap/perl-Locale-Maketext-Lexicon/description
msgid ""
"This module provides lexicon-handling modules to read from other "
"localization formats, such as _Gettext_, _Msgcat_, and so on.\n"
"\n"
"If you are unfamiliar with the concept of lexicon modules, please consult "
"the Locale::Maketext manpage and the 'webl10n' HTML files in the 'docs/' "
"directory of this module.\n"
"\n"
"A command-line utility the xgettext.pl manpage is also installed with this "
"module, for extracting translatable strings from source files."
msgstr ""

#. leap/perl-Locale-Msgfmt/summary
#. leap/perl-Locale-Msgfmt/description
msgid "Compile .po files to .mo files"
msgstr ""

#. leap/perl-Locale-US/summary
msgid ""
"Two letter codes for state identification in the United States and vice versa"
msgstr ""

#. leap/perl-Locale-US/description
msgid ""
"Two letter codes for state identification in the United States and vice "
"versa."
msgstr ""

#. leap/perl-LockFile-Simple/summary
msgid "Simple file locking scheme"
msgstr ""

#. leap/perl-LockFile-Simple/description
msgid ""
"This simple locking scheme is not based on any file locking system calls "
"such as 'flock()' or 'lockf()' but rather relies on basic file system "
"primitives and properties, such as the atomicity of the 'write()' system "
"call. It is not meant to be exempt from all race conditions, especially over "
"NFS. The algorithm used is described below in the *ALGORITHM* section.\n"
"\n"
"It is possible to customize the locking operations to attempt locking once "
"every 5 seconds for 30 times, or delete stale locks (files that are deemed "
"too ancient) before attempting the locking."
msgstr ""

#. leap/perl-Log-Any/summary
msgid "Bringing loggers and listeners together"
msgstr ""

#. leap/perl-Log-Any/description
msgid ""
"'Log::Any' provides a standard log production API for modules. Log::Any::"
"Adapter allows applications to choose the mechanism for log consumption, "
"whether screen, file or another logging mechanism like Log::Dispatch or Log::"
"Log4perl.\n"
"\n"
"Many modules have something interesting to say. Unfortunately there is no "
"standard way for them to say it - some output to STDERR, others to 'warn', "
"others to custom file logs. And there is no standard way to get a module to "
"start talking - sometimes you must call a uniquely named method, other times "
"set a package variable.\n"
"\n"
"This being Perl, there are many logging mechanisms available on CPAN. Each "
"has their pros and cons. Unfortunately, the existence of so many mechanisms "
"makes it difficult for a CPAN author to commit his/her users to one of them. "
"This may be why many CPAN modules invent their own logging or choose not to "
"log at all.\n"
"\n"
"To untangle this situation, we must separate the two parts of a logging API. "
"The first, _log production_, includes methods to output logs (like '$log-"
">debug') and methods to inspect whether a log level is activated (like '$log-"
">is_debug'). This is generally all that CPAN modules care about. The second, "
"_log consumption_, includes a way to configure where logging goes (a file, "
"the screen, etc.) and the code to send it there. This choice generally "
"belongs to the application.\n"
"\n"
"A CPAN module uses 'Log::Any' to get a log producer object. An application, "
"in turn, may choose one or more logging mechanisms via Log::Any::Adapter, or "
"none at all.\n"
"\n"
"'Log::Any' has a very tiny footprint and no dependencies beyond Perl 5.8.1, "
"which makes it appropriate for even small CPAN modules to use. It defaults "
"to 'null' logging activity, so a module can safely log without worrying "
"about whether the application has chosen (or will ever choose) a logging "
"mechanism.\n"
"\n"
"See http://www.openswartz.com/2007/09/06/standard-logging-api/ for the "
"original post proposing this module."
msgstr ""

#. leap/perl-Log-Contextual/summary
msgid "Simple logging interface with a contextual log"
msgstr ""

#. leap/perl-Log-Contextual/description
msgid ""
"Major benefits: \n"
"* * Efficient\n"
"\n"
"The default logging functions take blocks, so if a log level is disabled, "
"the block will not run:\n"
"\n"
"   log_debug { \"the new count in the database is \" . $rs->count };\n"
"\n"
"Similarly, the 'D' prefixed methods only 'Dumper' the input if the level is "
"enabled. \n"
"* * Handy\n"
"\n"
"The logging functions return their arguments, so you can stick them in the "
"middle of expressions:\n"
"\n"
" for (log_debug { \"downloading:\\n\" . join qq(\\n), @_ } @urls) { ... } \n"
"* * Generic\n"
"\n"
"'Log::Contextual' is an interface for all major loggers. If you log through "
"'Log::Contextual' you will be able to swap underlying loggers later. \n"
"* * Powerful\n"
"\n"
"'Log::Contextual' chooses which logger to use based on user defined "
"'CodeRef's. Normally you don't need to know this, but you can take advantage "
"of it when you need to later. \n"
"* * Scalable\n"
"\n"
"If you just want to add logging to your basic application, start with Log::"
"Contextual::SimpleLogger and then as your needs grow you can switch to Log::"
"Dispatchouli or Log::Dispatch or Log::Log4perl or whatever else.\n"
"\n"
"This module is a simple interface to extensible logging. It exists to "
"abstract your logging interface so that logging is as painless as possible, "
"while still allowing you to switch from one logger to another.\n"
"\n"
"It is bundled with a really basic logger, Log::Contextual::SimpleLogger, but "
"in general you should use a real logger instead. For something more serious "
"but not overly complicated, try Log::Dispatchouli (see SYNOPSIS for example.)"
msgstr ""

#. leap/perl-Log-Dispatch/summary
msgid "Dispatches messages to one or more outputs"
msgstr ""

#. leap/perl-Log-Dispatch/description
msgid ""
"This module manages a set of Log::Dispatch::* output objects that can be "
"logged to via a unified interface.\n"
"\n"
"The idea is that you create a Log::Dispatch object and then add various "
"logging objects to it (such as a file logger or screen logger). Then you "
"call the 'log' method of the dispatch object, which passes the message to "
"each of the objects, which in turn decide whether or not to accept the "
"message and what to do with it.\n"
"\n"
"This makes it possible to call single method and send a message to a log "
"file, via email, to the screen, and anywhere else, all with very little code "
"needed on your part, once the dispatching object has been created."
msgstr ""

#. leap/perl-Log-Dispatch-Array/summary
msgid "log events to an array (reference)"
msgstr ""

#. leap/perl-Log-Dispatch-Array/description
msgid ""
"This provides a Log::Dispatch log output system that appends logged events "
"to an array reference. This is probably only useful for testing the logging "
"of your code."
msgstr ""

#. leap/perl-Log-Dispatch-Config/summary
#, fuzzy
msgid "Log4j for Perl"
msgstr "7.0 Documentation"

#. leap/perl-Log-Dispatch-Config/description
msgid ""
"Log::Dispatch::Config is a subclass of Log::Dispatch and provides a way to "
"configure Log::Dispatch object with configulation file (default, in "
"AppConfig format). I mean, this is log4j for Perl, not with all API "
"compatibility though."
msgstr ""

#. leap/perl-Log-Dispatch-FileRotate/summary
msgid "Log to Files that Archive/Rotate Themselves"
msgstr ""

#. leap/perl-Log-Dispatch-FileRotate/description
msgid ""
"This module extends the base class Log::Dispatch::Output to provides a "
"simple object for logging to files under the Log::Dispatch::* system, and "
"automatically rotating them according to different constraints. This is "
"basically a Log::Dispatch::File wrapper with additions."
msgstr ""

#. leap/perl-Log-Dispatchouli/summary
msgid "Simple wrapper around Log::Dispatch"
msgstr ""

#. leap/perl-Log-Dispatchouli/description
msgid ""
"Log::Dispatchouli is a thin layer above Log::Dispatch and meant to make it "
"dead simple to add logging to a program without having to think much about "
"categories, facilities, levels, or things like that. It is meant to make "
"logging just configurable enough that you can find the logs you want and "
"just easy enough that you will actually log things.\n"
"\n"
"Log::Dispatchouli can log to syslog (if you specify a facility), standard "
"error or standard output, to a file, or to an array in memory. That last one "
"is mostly useful for testing.\n"
"\n"
"In addition to providing as simple a way to get a handle for logging "
"operations, Log::Dispatchouli uses String::Flogger to process the things to "
"be logged, meaning you can easily log data structures. Basically: strings "
"are logged as is, arrayrefs are taken as (sprintf format, args), and "
"subroutines are called only if needed. For more information read the String::"
"Flogger docs."
msgstr ""

#. leap/perl-Log-Log4perl/summary
#, fuzzy
msgid "Log4j implementation for Perl"
msgstr "7.0 Documentation"

#. leap/perl-Log-Log4perl/description
msgid ""
"Log::Log4perl lets you remote-control and fine-tune the logging behaviour of "
"your system from the outside. It implements the widely popular (Java-based) "
"Log4j logging package in pure Perl. \n"
"*For a detailed tutorial on Log::Log4perl usage, please read*\n"
"\n"
"http://www.perl.com/pub/a/2002/09/11/log4perl.html\n"
"\n"
"Logging beats a debugger if you want to know what's going on in your code "
"during runtime. However, traditional logging packages are too static and "
"generate a flood of log messages in your log files that won't help you.\n"
"\n"
"'Log::Log4perl' is different. It allows you to control the number of logging "
"messages generated at three different levels:\n"
"\n"
"  * At a central location in your system (either in a configuration file or "
"in the startup code) you specify _which components_ (classes, functions) of "
"your system should generate logs.\n"
"\n"
"  * You specify how detailed the logging of these components should be by "
"specifying logging _levels_.\n"
"\n"
"  * You also specify which so-called _appenders_ you want to feed your log "
"messages to (\"Print it to the screen and also append it to /tmp/my.log\") "
"and which format (\"Write the date first, then the file name and line "
"number, and then the log message\") they should be in.\n"
"\n"
"This is a very powerful and flexible mechanism. You can turn on and off your "
"logs at any time, specify the level of detail and make that dependent on the "
"subsystem that's currently executed.\n"
"\n"
"Let me give you an example: You might find out that your system has a "
"problem in the 'MySystem::Helpers::ScanDir' component. Turning on detailed "
"debugging logs all over the system would generate a flood of useless log "
"messages and bog your system down beyond recognition. With 'Log::Log4perl', "
"however, you can tell the system: \"Continue to log only severe errors to "
"the log file. Open a second log file, turn on full debug logs in the "
"'MySystem::Helpers::ScanDir' component and dump all messages originating "
"from there into the new log file\". And all this is possible by just "
"changing the parameters in a configuration file, which your system can re-"
"read even while it's running!"
msgstr ""

#. leap/perl-Log-Message/summary
msgid "A generic message storing mechanism"
msgstr ""

#. leap/perl-Log-Message/description
msgid ""
"Log::Message is a generic message storage mechanism. It allows you to store "
"messages on a stack -- either shared or private -- and assign meta-data to "
"it. Some meta-data will automatically be added for you, like a timestamp and "
"a stack trace, but some can be filled in by the user, like a tag by which to "
"identify it or group it, and a level at which to handle the message (for "
"example, log it, or die with it)\n"
"\n"
"Log::Message also provides a powerful way of searching through items by "
"regexes on messages, tags and level."
msgstr ""

#. leap/perl-Log-Message-Simple/summary
#, fuzzy
msgid "Simplified interface to Log::Message"
msgstr "Interface à sélectionner lors du démarrage :"

#. leap/perl-Log-Message-Simple/description
msgid ""
"This module provides standardized logging facilities using the 'Log::"
"Message' module."
msgstr ""

#. leap/perl-MCE/summary
msgid "Many-Core Engine for Perl providing parallel processing capabilities"
msgstr ""

#. leap/perl-MCE/description
msgid ""
"MCE spawns a pool of workers and therefore does not fork a new process per "
"each element of data. Instead, MCE follows a bank queuing model. Imagine the "
"line being the data and bank-tellers the parallel workers. MCE enhances that "
"model by adding the ability to chunk the next n elements from the input "
"stream to the next available worker."
msgstr ""

#. leap/perl-MIME-Charset/summary
#, fuzzy
msgid "Charset Information for MIME"
msgstr "Applet d'information réseau pour GNOME"

#. leap/perl-MIME-Charset/description
msgid ""
"MIME::Charset provides information about character sets used for MIME "
"messages on Internet."
msgstr ""

#. leap/perl-MIME-EncWords/summary
msgid "deal with RFC 2047 encoded words (improved)"
msgstr ""

#. leap/perl-MIME-EncWords/description
msgid ""
"Fellow Americans, you probably won't know what the hell this module is for. "
"Europeans, Russians, et al, you probably do. ':-)'.\n"
"\n"
"For example, here's a valid MIME header you might get:\n"
"\n"
"      From: =?US-ASCII?Q?Keith_Moore?= <moore@cs.utk.edu>       To: =?"
"ISO-8859-1?Q?Keld_J=F8rn_Simonsen?= <keld@dkuug.dk>       CC: =?ISO-8859-1?Q?"
"Andr=E9_?= Pirard <PIRARD@vm1.ulg.ac.be>       Subject: =?ISO-8859-1?B?"
"SWYgeW91IGNhbiByZWFkIHRoaXMgeW8=?=        =?ISO-8859-2?B?"
"dSB1bmRlcnN0YW5kIHRoZSBleGFtcGxlLg==?=        =?US-ASCII?Q?.._cool!?=\n"
"\n"
"The fields basically decode to (sorry, I can only approximate the Latin "
"characters with 7 bit sequences /o and 'e):\n"
"\n"
"      From: Keith Moore <moore@cs.utk.edu>       To: Keld J/orn Simonsen "
"<keld@dkuug.dk>       CC: Andr'e  Pirard <PIRARD@vm1.ulg.ac.be>       "
"Subject: If you can read this you understand the example... cool! \n"
"*Supplement*: Fellow Americans, Europeans, you probably won't know what the "
"hell this module is for. East Asians, et al, you probably do. '(^_^)'.\n"
"\n"
"For example, here's a valid MIME header you might get:\n"
"\n"
"      Subject: =?EUC-KR?B?sNTAuLinKGxhemluZXNzKSwgwvzB9ri7seIoaW1w?=        "
"=?EUC-KR?B?YXRpZW5jZSksILGzuLgoaHVicmlzKQ==?=\n"
"\n"
"The fields basically decode to (sorry, I cannot approximate the non-Latin "
"multibyte characters with any 7 bit sequences):\n"
"\n"
"      Subject: ???(laziness), ????(impatience), ??(hubris)"
msgstr ""

#. leap/perl-MIME-Lite/summary
msgid "Low-calorie MIME generator"
msgstr ""

#. leap/perl-MIME-Lite/description
msgid ""
"In the never-ending quest for great taste with fewer calories, we proudly "
"present: _MIME::Lite_.\n"
"\n"
"MIME::Lite is intended as a simple, standalone module for generating (not "
"parsing!) MIME messages... specifically, it allows you to output a simple, "
"decent single- or multi-part message with text or binary attachments. It "
"does not require that you have the Mail:: or MIME:: modules installed, but "
"will work with them if they are.\n"
"\n"
"You can specify each message part as either the literal data itself (in a "
"scalar or array), or as a string which can be given to open() to get a "
"readable filehandle (e.g., \"<filename\" or \"somecommand|\").\n"
"\n"
"You don't need to worry about encoding your message data: this module will "
"do that for you. It handles the 5 standard MIME encodings."
msgstr ""

#. leap/perl-MIME-Types/summary
#, fuzzy
msgid "Definition of MIME types"
msgstr "Une calculatrice GNOME"

#. leap/perl-MIME-Types/description
msgid ""
"MIME types are used in many applications (for instance as part of e-mail and "
"HTTP traffic) to indicate the type of content which is transmitted. or "
"expected. See RFC2045 at _https://www.ietf.org/rfc/rfc2045.txt_\n"
"\n"
"Sometimes detailed knowledge about a mime-type is need, however this module "
"only knows about the file-name extensions which relate to some filetype. It "
"can also be used to produce the right format: types which are not registered "
"at IANA need to use 'x-' prefixes.\n"
"\n"
"This object administers a huge list of known mime-types, combined from "
"various sources. For instance, it contains *all IANA* types and the "
"knowledge of Apache. Probably the most complete table on the net!"
msgstr ""

#. leap/perl-MIME-tools/summary
#. leap/perl-MIME-tools/description
#, fuzzy
msgid "Tools to manipulate MIME messages"
msgstr "Module pour créer des entites MIME"

#. leap/perl-MLDBM/summary
#, fuzzy
msgid "store multi-level Perl hash structure in single level tied hash"
msgstr "Stock des données dans des tables de hashage mutidimmentionnelles"

#. leap/perl-MLDBM/description
msgid ""
"This module can serve as a transparent interface to any TIEHASH package that "
"is required to store arbitrary perl data, including nested references. Thus, "
"this module can be used for storing references and other arbitrary data "
"within DBM databases.\n"
"\n"
"It works by serializing the references in the hash into a single string. In "
"the underlying TIEHASH package (usually a DBM database), it is this string "
"that gets stored. When the value is fetched again, the string is "
"deserialized to reconstruct the data structure into memory.\n"
"\n"
"For historical and practical reasons, it requires the *Data::Dumper* "
"package, available at any CPAN site. *Data::Dumper* gives you really nice-"
"looking dumps of your data structures, in case you wish to look at them on "
"the screen, and it was the only serializing engine before version 2.00. "
"However, as of version 2.00, you can use any of *Data::Dumper*,\n"
"*FreezeThaw* or *Storable* to perform the underlying serialization, as "
"hinted at by the the SYNOPSIS manpage overview above. Using *Storable* is "
"usually much faster than the other methods.\n"
"\n"
"See the the BUGS manpage section for important limitations."
msgstr ""

#. leap/perl-MLDBM-Sync/summary
msgid "Perl module for safe concurrent access to MLDBM databases"
msgstr ""

#. leap/perl-MLDBM-Sync/description
msgid ""
"This module wraps around the MLDBM interface, by handling concurrent access "
"to MLDBM databases with file locking, and flushes i/o explicity per lock/"
"unlock. The new [Read]Lock()/UnLock() API can be used to serialize requests "
"logically and improve performance for bundled reads & writes."
msgstr ""

#. leap/perl-MRO-Compat/summary
msgid "Mro::* Interface Compatibility for Perls < 5.9.5"
msgstr ""

#. leap/perl-MRO-Compat/description
msgid ""
"The \"mro\" namespace provides several utilities for dealing with method "
"resolution order and method caching in general in Perl 5.9.5 and higher.\n"
"\n"
"This module provides those interfaces for earlier versions of Perl (back to "
"5.6.0 anyways).\n"
"\n"
"It is a harmless no-op to use this module on 5.9.5+. That is to say, code "
"which properly uses MRO::Compat will work unmodified on both older Perls and "
"5.9.5+.\n"
"\n"
"If you're writing a piece of software that would like to use the parts of "
"5.9.5+'s mro:: interfaces that are supported here, and you want "
"compatibility with older Perls, this is the module for you.\n"
"\n"
"Some parts of this code will work better and/or faster with Class::C3::XS "
"installed (which is an optional prereq of Class::C3, which is in turn a "
"prereq of this package), but it's not a requirement.\n"
"\n"
"This module never exports any functions. All calls must be fully qualified "
"with the 'mro::' prefix.\n"
"\n"
"The interface documentation here serves only as a quick reference of what "
"the function basically does, and what differences between MRO::Compat and "
"5.9.5+ one should look out for. The main docs in 5.9.5's mro are the real "
"interface docs, and contain a lot of other useful information."
msgstr ""

#. leap/perl-Mac-PropertyList/summary
msgid "Work with Mac plists at a low level"
msgstr ""

#. leap/perl-Mac-PropertyList/description
msgid ""
"This module is a low-level interface to the Mac OS X Property List (plist) "
"format in either XML or binary. You probably shouldn't use this in "
"applications–build interfaces on top of this so you don't have to put all "
"the heinous multi-level object stuff where people have to look at it.\n"
"\n"
"You can parse a plist file and get back a data structure. You can take that "
"data structure and get back the plist as XML. If you want to change the "
"structure inbetween that's your business. :)\n"
"\n"
"You don't need to be on Mac OS X to use this. It simply parses and "
"manipulates a text format that Mac OS X uses.\n"
"\n"
"If you need to work with the old ASCII or newer JSON formet, you can use the "
"*plutil* tool that comes with MacOS X:\n"
"\n"
"\t% plutil -convert xml1 -o ExampleBinary.xml.plist ExampleBinary.plist\n"
"\n"
"Or, you can extend this module to handle those formats (and send a pull "
"request)."
msgstr ""

#. leap/perl-Mail-DKIM/summary
msgid "Signs/verifies Internet mail with DKIM/DomainKey signatures"
msgstr ""

#. leap/perl-Mail-DKIM/description
msgid ""
"This module implements the various components of the DKIM and DomainKeys "
"message-signing and verifying standards for Internet mail. It currently "
"tries to implement these specifications: \n"
"* RFC4871, for DKIM \n"
"* RFC4870, for DomainKeys\n"
"\n"
"The module uses an object-oriented interface. You use one of two different "
"classes, depending on whether you are signing or verifying a message. To "
"sign, use the the Mail::DKIM::Signer manpage class. To verify, use the the "
"Mail::DKIM::Verifier manpage class. Simple, eh?"
msgstr ""

#. leap/perl-Mail-IMAPClient/summary
msgid "An IMAP Client API"
msgstr ""

#. leap/perl-Mail-IMAPClient/description
msgid ""
"This module provides methods implementing the IMAP protocol to support "
"interacting with IMAP message stores.\n"
"\n"
"The module is used by constructing or instantiating a new IMAPClient object "
"via the new constructor method. Once the object has been instantiated, the "
"connect method is either implicitly or explicitly called. At that point "
"methods are available that implement the IMAP client commands as specified "
"in *RFC3501*. When processing is complete, the logout object method should "
"be called.\n"
"\n"
"This documentation is not meant to be a replacement for RFC3501 nor any "
"other IMAP related RFCs.\n"
"\n"
"Note that this documentation uses the term _folder_ in place of RFC3501's "
"use of _mailbox_. This documentation reserves the use of the term _mailbox_ "
"to refer to the set of folders owned by a specific IMAP id."
msgstr ""

#. leap/perl-Mail-Mbox-MessageParser/summary
msgid "Fast and Simple Mbox Folder Reader"
msgstr ""

#. leap/perl-Mail-Mbox-MessageParser/description
msgid ""
"This module implements a fast but simple mbox folder reader. One of three "
"implementations (Cache, Grep, Perl) will be used depending on the wishes of "
"the user and the system configuration. The first implementation is a cached-"
"based one which stores email information about mailboxes on the file system. "
"Subsequent accesses will be faster because no analysis of the mailbox will "
"be needed. The second implementation is one based on GNU grep, and is "
"significantly faster than the Perl version for mailboxes which contain very "
"large (10MB) emails. The final implementation is a fast Perl-based one which "
"should always be applicable.\n"
"\n"
"The Cache implementation is about 6 times faster than the standard Perl "
"implementation. The Grep implementation is about 4 times faster than the "
"standard Perl implementation. If you have GNU grep, it's best to enable both "
"the Cache and Grep implementations. If the cache information is available, "
"you'll get very fast speeds. Otherwise, you'll take about a 1/3 performance "
"hit when the Grep version is used instead.\n"
"\n"
"The overriding requirement for this module is speed. If you wish more "
"sophisticated parsing, use Mail::MboxParser (which is based on this module) "
"or Mail::Box."
msgstr ""

#. leap/perl-Mail-SPF/summary
msgid "An object-oriented implementation of Sender Policy Framework"
msgstr ""

#. leap/perl-Mail-SPF/description
msgid ""
"*Mail::SPF* is an object-oriented implementation of Sender Policy Framework "
"(SPF). See the http://www.openspf.org manpage for more information about "
"SPF.\n"
"\n"
"This class collection aims to fully conform to the SPF specification (RFC "
"4408) so as to serve both as a production quality SPF implementation and as "
"a reference for other developers of SPF implementations."
msgstr ""

#. leap/perl-Mail-SPF-Test/summary
#, fuzzy
msgid "SPF test-suite class"
msgstr "Un système de bases de données SQL multiutilisateur, multi-thread"

#. leap/perl-Mail-SPF-Test/description
msgid ""
"  *Mail::SPF::Test* is a class for reading and manipulating SPF test-suite   "
"data."
msgstr ""

#. leap/perl-Mail-Sender/summary
msgid ""
"(DEPRECATED) module for sending mails with attachments through an SMTP server"
msgstr ""

#. leap/perl-Mail-Sender/description
msgid ""
"Mail::Sender is deprecated. Email::Sender is the go-to choice when you need "
"to send Email from Perl. Go there, be happy!\n"
"\n"
"Mail::Sender provides an object-oriented interface to sending mails. It "
"directly connects to the mail server using IO::Socket."
msgstr ""

#. leap/perl-Mail-Sendmail/summary
msgid "Simple platform independent mailer"
msgstr ""

#. leap/perl-Mail-Sendmail/description
msgid ""
"Simple platform independent e-mail from your perl script. Only requires Perl "
"5 and a network connection.\n"
"\n"
"Mail::Sendmail takes a hash with the message to send and sends it to your "
"mail server. It is intended to be very easy to setup and use. See also "
"\"FEATURES\" below, and as usual, read this documentation.\n"
"\n"
"There is also a FAQ (see \"NOTES\")."
msgstr ""

#. leap/perl-MailTools/summary
msgid "Bundle of Ancient Email Modules"
msgstr ""

#. leap/perl-MailTools/description
msgid ""
"MailTools is a bundle: an ancient form of combining packages into one "
"distribution. Gladly, it can be distributed as if it is a normal "
"distribution as well. \n"
"*Be warned:* The code you find here is very old. It works for simple emails, "
"but when you start with new code then please use more sofisticated "
"libraries. The main reason that you still find this code on CPAN, is because "
"many books use it as example."
msgstr ""

#. leap/perl-Mason/summary
msgid "Powerful, high-performance templating for the web and beyond"
msgstr ""

#. leap/perl-Mason/description
msgid ""
"Mason is a powerful Perl-based templating system, designed to generate "
"dynamic content of all kinds.\n"
"\n"
"Unlike many templating systems, Mason does not attempt to invent an "
"alternate, \"easier\" syntax for templates. It provides a set of syntax and "
"features specific to template creation, but underneath it is still clearly "
"and proudly recognizable as Perl.\n"
"\n"
"Mason is most often used for generating web pages. It has a companion web "
"framework, Poet, designed to take maximum advantage of its routing and "
"content generation features. It can also be used as the templating layer for "
"web frameworks such as Catalyst::View::Mason2 and Dancer::Template::Mason2.\n"
"\n"
"All documentation is indexed at the Mason::Manual manpage.\n"
"\n"
"The previous major version of Mason (1.x) is available under the name the "
"HTML::Mason manpage."
msgstr ""

#. leap/perl-Math-Base-Convert/summary
msgid "Very Fast Base to Base Conversion"
msgstr ""

#. leap/perl-Math-Base-Convert/description
msgid ""
"This module provides fast functions and methods to convert between arbitrary "
"number bases from 2 (binary) thru 65535.\n"
"\n"
"This module is pure Perl, has no external dependencies, and is backward "
"compatible with old versions of Perl 5."
msgstr ""

#. leap/perl-Math-BigInt/summary
msgid "Arbitrary size integer/float math package"
msgstr ""

#. leap/perl-Math-BigInt/description
msgid ""
"Math::BigInt provides support for arbitrary precision integers. Overloading "
"is also provided for Perl operators."
msgstr ""

#. leap/perl-Math-BigInt-GMP/summary
msgid "Backend library for Math::BigInt etc. based on GMP"
msgstr ""

#. leap/perl-Math-BigInt-GMP/description
msgid ""
"Math::BigInt::GMP is a replacement library for Math::BigInt::Calc that "
"reimplements some of the Math::BigInt::Calc functions in XS. It can be used "
"via:\n"
"\n"
"    use Math::BigInt lib => 'GMP';\n"
"\n"
"This package contains a replacement (drop-in) module for Math::BigInt's "
"core, Math::BigInt::Calc.pm."
msgstr ""

#. leap/perl-Math-Calc-Units/summary
msgid "Human-readable unit-aware calculator"
msgstr ""

#. leap/perl-Math-Calc-Units/description
msgid ""
"Math::Calc::Units is a simple calculator that keeps track of units. It "
"currently handles combinations of byte sizes and duration only, although "
"adding any other multiplicative types is easy. Any unknown type is treated "
"as a unique user type (with some effort to map English plurals to their "
"singular forms).\n"
"\n"
"The primary intended use is via the ucalc script that prints out all of the "
"\"readable\" variants of a value. For example, \"3 bytes\" will only produce "
"\"3 byte\", but \"3 byte / sec\" produces the original along with \"180 "
"byte / minute\", \"10.55 kilobyte / hour\", etc."
msgstr ""

#. leap/perl-Math-Clipper/summary
msgid "Polygon clipping in 2D"
msgstr ""

#. leap/perl-Math-Clipper/description
msgid ""
"'Clipper' is a C++ (and Delphi) library that implements polygon clipping."
msgstr ""

#. leap/perl-Math-ConvexHull/summary
msgid "Calculate convex hulls using Graham's scan (n*log(n))"
msgstr ""

#. leap/perl-Math-ConvexHull/description
msgid ""
"'Math::ConvexHull' is a simple module that calculates convex hulls from a "
"set of points in 2D space. It is a straightforward implementation of the "
"algorithm known as Graham's scan which, with complexity of O(n*log(n)), is "
"the fastest known method of finding the convex hull of an arbitrary set of "
"points. There are some methods of eliminating points that cannot be part of "
"the convex hull. These may or may not be implemented in a future version.\n"
"\n"
"The implementation cannot deal with duplicate points. Therefore, points "
"which are very, very close (think floating point close) to the previous "
"point are dropped since version 1.02 of the module. However, if you pass in "
"randomly ordered data which contains duplicate points, this safety measure "
"might not help you. In that case, you will have to remove duplicates "
"yourself."
msgstr ""

#. leap/perl-Math-ConvexHull-MonotoneChain/summary
msgid "Andrew's monotone chain algorithm for finding a convex hull in 2D"
msgstr ""

#. leap/perl-Math-ConvexHull-MonotoneChain/description
msgid ""
"This is somewhat experimental still.\n"
"\n"
"This (XS) module optionally exports a single function 'convex_hull' which "
"calculates the convex hull of the input points and returns it. The algorithm "
"is 'O(n log n)' due to having to sort the input list, but should be somewhat "
"faster than a plain Graham's scan (also 'O(n log n)') in practice since it "
"avoids polar coordinates."
msgstr ""

#. leap/perl-Math-Geometry-Voronoi/summary
msgid "compute Voronoi diagrams from sets of points"
msgstr ""

#. leap/perl-Math-Geometry-Voronoi/description
msgid ""
"This module computes Voronoi diagrams from a set of input points. Info on "
"Voronoi diagrams can be found here:\n"
"\n"
"  http://en.wikipedia.org/wiki/Voronoi_diagram\n"
"\n"
"This module is a wrapper around a C implementation found here:\n"
"\n"
"  http://www.derekbradley.ca/voronoi.html\n"
"\n"
"Which is itself a modification of code by Steve Fortune, the inventor of the "
"algorithm used (Fortune's algorithm):\n"
"\n"
"  http://cm.bell-labs.com/who/sjf/\n"
"\n"
"I made changes to the C code to allow reading input and writing output to/"
"from Perl data-structures. I also modified the memory allocation code to use "
"Perl's memory allocator. Finally, I changed all floats to doubles to provide "
"better precision and to match Perl's NVs."
msgstr ""

#. leap/perl-Math-Libm/summary
#, fuzzy
msgid "Perl extension for the C math library, libm"
msgstr "Extension perl"

#. leap/perl-Math-Libm/description
msgid ""
"This module is a translation of the C _math.h_ file. It exports the "
"following selected constants and functions."
msgstr ""

#. leap/perl-Math-PlanePath/summary
msgid "Points on a path through the 2-D plane"
msgstr ""

#. leap/perl-Math-PlanePath/description
msgid ""
"This is a base class for some mathematical paths which map an integer "
"position '$n' to and from coordinates '$x,$y' in the 2D plane.\n"
"\n"
"The current classes include the following. The intention is that any 'Math::"
"PlanePath::Something' is a PlanePath, and supporting base classes or related "
"things are further down like 'Math::PlanePath::Base::Xyzzy'.\n"
"\n"
"    SquareSpiral           four-sided spiral     PyramidSpiral          "
"square base pyramid     TriangleSpiral         equilateral triangle "
"spiral     TriangleSpiralSkewed   equilateral skewed for compactness     "
"DiamondSpiral          four-sided spiral, looping faster     "
"PentSpiral             five-sided spiral     PentSpiralSkewed       five-"
"sided spiral, compact     HexSpiral              six-sided spiral     "
"HexSpiralSkewed        six-sided spiral skewed for compactness     "
"HeptSpiralSkewed       seven-sided spiral, compact     "
"AnvilSpiral            anvil shape     OctagramSpiral         eight pointed "
"star     KnightSpiral           an infinite knight's tour     "
"CretanLabyrinth        7-circuit extended infinitely\n"
"\n"
"    SquareArms             four-arm square spiral     DiamondArms            "
"four-arm diamond spiral     AztecDiamondRings      four-sided rings     "
"HexArms                six-arm hexagonal spiral     GreekKeySpiral         "
"square spiral with Greek key motif     MPeaks                 \"M\" shape "
"layers\n"
"\n"
"    SacksSpiral            quadratic on an Archimedean spiral     "
"VogelFloret            seeds in a sunflower     TheodorusSpiral        unit "
"steps at right angles     ArchimedeanChords      unit chords on an "
"Archimedean spiral     MultipleRings          concentric circles     "
"PixelRings             concentric rings of midpoint pixels     "
"FilledRings            concentric rings of pixels     Hypot                  "
"points by distance     HypotOctant            first octant points by "
"distance     TriangularHypot        points by triangular distance     "
"PythagoreanTree        X^2+Y^2=Z^2 by trees\n"
"\n"
"    PeanoCurve             3x3 self-similar quadrant     "
"PeanoDiagonals         across unit squares     WunderlichSerpentine   "
"transpose parts of PeanoCurve     HilbertCurve           2x2 self-similar "
"quadrant     HilbertSides           along sides of unit squares     "
"HilbertSpiral          2x2 self-similar whole-plane     "
"ZOrderCurve            replicating Z shapes     GrayCode               Gray "
"code splits     WunderlichMeander      3x3 \"R\" pattern quadrant     "
"BetaOmega              2x2 self-similar half-plane     "
"AR2W2Curve             2x2 self-similar of four parts     "
"KochelCurve            3x3 self-similar of two parts     "
"DekkingCurve           5x5 self-similar, edges     DekkingCentres         "
"5x5 self-similar, centres     CincoCurve             5x5 self-similar\n"
"\n"
"    ImaginaryBase          replicate in four directions     "
"ImaginaryHalf          half-plane replicate three directions     "
"CubicBase              replicate in three directions     "
"SquareReplicate        3x3 replicating squares     CornerReplicate        "
"2x2 replicating \"U\"     LTiling                self-similar L shapes     "
"DigitGroups            digits grouped by zeros     FibonacciWordFractal   "
"turns by Fibonacci word bits\n"
"\n"
"    Flowsnake              self-similar hexagonal tile traversal     "
"FlowsnakeCentres         likewise but centres of hexagons     "
"GosperReplicate        self-similar hexagonal tiling     "
"GosperIslands          concentric island rings     GosperSide             "
"single side or radial\n"
"\n"
"    QuintetCurve           self-similar \"+\" traversal     "
"QuintetCentres           likewise but centres of squares     "
"QuintetReplicate       self-similar \"+\" tiling\n"
"\n"
"    DragonCurve            paper folding     DragonRounded          paper "
"folding rounded corners     DragonMidpoint         paper folding segment "
"midpoints     AlternatePaper         alternating direction folding     "
"AlternatePaperMidpoint alternating direction folding, midpoints     "
"TerdragonCurve         ternary dragon     TerdragonRounded       ternary "
"dragon rounded corners     TerdragonMidpoint      ternary dragon segment "
"midpoints     AlternateTerdragon     alternate ternary dragon     "
"R5DragonCurve          radix-5 dragon curve     R5DragonMidpoint       "
"radix-5 dragon curve midpoints     CCurve                 \"C\" curve     "
"ComplexPlus            base i+realpart     ComplexMinus           base i-"
"realpart, including twindragon     ComplexRevolving       revolving base i"
"+1\n"
"\n"
"    SierpinskiCurve        self-similar right-triangles     "
"SierpinskiCurveStair   self-similar right-triangles, stair-step     "
"HIndexing              self-similar right-triangles, squared up\n"
"\n"
"    KochCurve              replicating triangular notches     "
"KochPeaks              two replicating notches     KochSnowflakes         "
"concentric notched 3-sided rings     KochSquareflakes       concentric "
"notched 4-sided rings     QuadricCurve           eight segment zig-zag     "
"QuadricIslands           rings of those zig-zags     SierpinskiTriangle     "
"self-similar triangle by rows     SierpinskiArrowhead    self-similar "
"triangle connectedly     SierpinskiArrowheadCentres  likewise but centres of "
"triangles\n"
"\n"
"    Rows                   fixed-width rows     Columns                fixed-"
"height columns     Diagonals              diagonals between X and Y axes     "
"DiagonalsAlternating   diagonals Y to X and back again     "
"DiagonalsOctant        diagonals between Y axis and X=Y centre     "
"Staircase              stairs down from the Y to X axes     "
"StaircaseAlternating   stairs Y to X and back again     "
"Corner                 expanding stripes around a corner     "
"CornerAlternating      expanding up and down around a corner     "
"PyramidRows            expanding stacked rows pyramid     "
"PyramidSides           along the sides of a 45-degree pyramid     "
"CellularRule           cellular automaton by rule number     "
"CellularRule54         cellular automaton rows pattern     "
"CellularRule57         cellular automaton (rule 99 mirror too)     "
"CellularRule190        cellular automaton (rule 246 mirror too)     "
"UlamWarburton          cellular automaton diamonds     "
"UlamWarburtonQuarter   cellular automaton quarter-plane\n"
"\n"
"    DiagonalRationals      rationals X/Y by diagonals     "
"FactorRationals        rationals X/Y by prime factorization     "
"GcdRationals           rationals X/Y by rows with GCD integer     "
"RationalsTree          rationals X/Y by tree     FractionsTree          "
"fractions 0<X/Y<1 by tree     ChanTree               rationals X/Y multi-"
"child tree     CfracDigits            continued fraction 0<X/Y<1 by "
"digits     CoprimeColumns         coprime X,Y     DivisibleColumns       X "
"divisible by Y     WythoffArray           Fibonacci recurrences     "
"WythoffPreliminaryTriangle     PowerArray             powers in rows     "
"File                   points from a disk file\n"
"\n"
"And in the separate Math-PlanePath-Toothpick distribution\n"
"\n"
"    ToothpickTree          pattern of toothpicks     ToothpickReplicate     "
"same by replication rather than tree     ToothpickUpist         toothpicks "
"only growing upwards     ToothpickSpiral        toothpicks around the "
"origin\n"
"\n"
"    LCornerTree            L-shape corner growth     LCornerReplicate       "
"same by replication rather than tree     OneOfEight     "
"HTree                  H shapes replicated\n"
"\n"
"The paths are object oriented to allow parameters, though many have none. "
"See 'examples/numbers.pl' in the Math-PlanePath sources for a sample "
"printout of numbers from selected paths or all paths."
msgstr ""

#. leap/perl-Math-Random-ISAAC/summary
#, fuzzy
msgid "Perl interface to the ISAAC PRNG algorithm"
msgstr "Interface Perl vers la bibliothèque UULib"

#. leap/perl-Math-Random-ISAAC/description
msgid ""
"As with other Pseudo-Random Number Generator (PRNG) algorithms like the "
"Mersenne Twister (see Math::Random::MT), this algorithm is designed to take "
"some seed information and produce seemingly random results as output. "
"However, ISAAC (Indirection, Shift, Accumulate, Add, and Count) has "
"different goals than these commonly used algorithms. In particular, it's "
"really fast - on average, it requires only 18.75 machine cycles to generate "
"a 32-bit value. This makes it suitable for applications where a significant "
"amount of random data needs to be produced quickly, such solving using the "
"Monte Carlo method or for games. The results are uniformly distributed, "
"unbiased, and unpredictable unless you know the seed. The algorithm was "
"published by Bob Jenkins in the late 90s and despite the best efforts of "
"many security researchers, no feasible attacks have been found to date."
msgstr ""

#. leap/perl-Math-Round/summary
#, fuzzy
msgid "Perl extension for rounding numbers"
msgstr "Interface Perl pour objets URI"

#. leap/perl-Math-Round/description
msgid ""
"*Math::Round* supplies functions that will round numbers in different ways. "
"The functions *round* and *nearest* are exported by default; others are "
"available as described below. \"use ... qw(:all)\" exports all functions."
msgstr ""

#. leap/perl-Memoize-ExpireLRU/summary
msgid "Expiry plug-in for Memoize that adds LRU cache expiration"
msgstr ""

#. leap/perl-Memoize-ExpireLRU/description
msgid ""
"For the theory of Memoization, please see the Memoize module documentation. "
"This module implements an expiry policy for Memoize that follows LRU "
"semantics, that is, the last n results, where n is specified as the argument "
"to the 'CACHESIZE' parameter, will be cached."
msgstr ""

#. leap/perl-Meta-Builder/summary
msgid "Tools for creating Meta objects to track custom metrics"
msgstr ""

#. leap/perl-Meta-Builder/description
msgid ""
"Meta programming is becoming more and more popular. The popularity of Meta "
"programming comes from the fact that many problems are made significantly "
"easier. There are a few specialized Meta tools out there, for instance Class:"
"MOP which is used by Moose to track class metadata.\n"
"\n"
"Meta::Builder is designed to be a generic tool for writing Meta objects. "
"Unlike specialized tools, Meta::Builder makes no assumptions about what "
"metrics you will care about. Meta::Builder also makes it simple for others "
"to extend your meta-object based tools by providing hooks for other packages "
"to add metrics to your meta object.\n"
"\n"
"If a specialized Meta object tool is available to meet your needs please use "
"it. However if you need a simple Meta object to track a couple metrics, use "
"Meta::Builder.\n"
"\n"
"Meta::Builder is also low-sugar and low-dep. In most cases you will not want "
"a class that needs a meta object to use your meta-object class directly. "
"Rather you will usually want to create a sugar class that exports enhanced "
"API functions that manipulate the meta object."
msgstr ""

#. leap/perl-Method-Signatures/summary
msgid "Method and Function Declarations with Signatures and No Source Filter"
msgstr ""

#. leap/perl-Method-Signatures/description
msgid ""
"Provides two new keywords, 'func' and 'method', so that you can write "
"subroutines with signatures instead of having to spell out 'my $self = "
"shift; my($thing) = @_'\n"
"\n"
"'func' is like 'sub' but takes a signature where the prototype would "
"normally go. This takes the place of 'my($foo, $bar) = @_' and does a whole "
"lot more.\n"
"\n"
"'method' is like 'func' but specifically for making methods. It will "
"automatically provide the invocant as '$self' (by default). No more 'my "
"$self = shift'."
msgstr ""

#. leap/perl-Method-Signatures-Simple/summary
#. leap/perl-Method-Signatures-Simple/description
msgid "Basic method declarations with signatures, without source filters"
msgstr ""

#. leap/perl-Minion/summary
msgid "Job queue"
msgstr ""

#. leap/perl-Minion/description
msgid ""
"Minion is a high performance job queue for the Perl programming language, "
"with support for multiple named queues, priorities, high priority fast lane, "
"delayed jobs, job dependencies, job progress, job results, retries with "
"backoff, rate limiting, unique jobs, expiring jobs, statistics, distributed "
"workers, parallel processing, autoscaling, remote control, at https://"
"mojolicious.org admin ui, resource leak protection and multiple backends "
"(such as at https://www.postgresql.org).\n"
"\n"
"Job queues allow you to process time and/or computationally intensive tasks "
"in background processes, outside of the request/response lifecycle of web "
"applications. Among those tasks you'll commonly find image resizing, spam "
"filtering, HTTP downloads, building tarballs, warming caches and basically "
"everything else you can imagine that's not super fast.\n"
"\n"
"Take a look at our excellent documentation in Minion::Guide!"
msgstr ""

#. leap/perl-Minion-Backend-SQLite/summary
msgid "SQLite backend for Minion job queue"
msgstr ""

#. leap/perl-Minion-Backend-SQLite/description
msgid ""
"Minion::Backend::SQLite is a backend for Minion based on Mojo::SQLite. All "
"necessary tables will be created automatically with a set of migrations "
"named 'minion'. If no connection string or ':temp:' is provided, the "
"database will be created in a temporary directory."
msgstr ""

#. leap/perl-Mixin-Linewise/summary
msgid "Write your linewise code for handles; this does the rest"
msgstr ""

#. leap/perl-Mixin-Linewise/description
msgid ""
"It's boring to deal with opening files for IO, converting strings to handle-"
"like objects, and all that. With Mixin::Linewise::Readers and Mixin::"
"Linewise::Writers, you can just write a method to handle handles, and "
"methods for handling strings and filenames are added for you."
msgstr ""

#. leap/perl-Mo/summary
msgid "Micro Objects. Mo is less"
msgstr ""

#. leap/perl-Mo/description
msgid "Micro Objects. Mo is less."
msgstr ""

#. leap/perl-Mock-Config/summary
msgid "Temporarily Set Config or Xsconfig Values"
msgstr ""

#. leap/perl-Mock-Config/description
msgid "temporarily set Config or XSConfig values"
msgstr ""

#. leap/perl-Mock-Quick/summary
msgid "Quickly mock objects and classes, even temporarily replace them,"
msgstr ""

#. leap/perl-Mock-Quick/description
msgid ""
"Mock-Quick is here to solve the current problems with Mocking libraries.\n"
"\n"
"There are a couple Mocking libraries available on CPAN. The primary problems "
"with these libraries include verbose syntax, and most importantly side-"
"effects. Some Mocking libraries expect you to mock a specific class, and "
"will unload it then redefine it. This is particularly a problem if you only "
"want to override a class on a lexical level.\n"
"\n"
"Mock-Quick provides a declarative mocking interface that results in a very "
"concise, but clear syntax. There are separate facilities for mocking object "
"instances, and classes. You can quickly create an instance of an object with "
"custom attributes and methods. You can also quickly create an anonymous "
"class, optionally inheriting from another, with whatever methods you "
"desire.\n"
"\n"
"Mock-Quick also provides a tool that provides an OO interface to overriding "
"methods in existing classes. This tool also allows for the restoration of "
"the original class methods. Best of all this is a localized tool, when your "
"control object falls out of scope the original class is restored."
msgstr ""

#. leap/perl-Modern-Perl/summary
msgid "Enable all of the features of Modern Perl with one import"
msgstr ""

#. leap/perl-Modern-Perl/description
msgid "enable all of the features of Modern Perl with one import"
msgstr ""

#. leap/perl-Module-Build/summary
#, fuzzy
msgid "Build and install Perl modules"
msgstr "Modules Palm pilote perl"

#. leap/perl-Module-Build/description
msgid ""
"'Module::Build' is a system for building, testing, and installing Perl "
"modules. It is meant to be an alternative to 'ExtUtils::MakeMaker'. "
"Developers may alter the behavior of the module through subclassing in a "
"much more straightforward way than with 'MakeMaker'. It also does not "
"require a 'make' on your system - most of the 'Module::Build' code is pure-"
"perl and written in a very cross-platform way.\n"
"\n"
"See \"MOTIVATIONS\" for more comparisons between 'ExtUtils::MakeMaker' and "
"'Module::Build'.\n"
"\n"
"To install 'Module::Build', and any other module that uses 'Module::Build' "
"for its installation process, do the following:\n"
"\n"
"  perl Build.PL       # 'Build.PL' script creates the 'Build' script   ./"
"Build             # Need ./ to ensure we're using this \"Build\" script   ./"
"Build test        # and not another one that happens to be in the PATH   ./"
"Build install\n"
"\n"
"This illustrates initial configuration and the running of three 'actions'. "
"In this case the actions run are 'build' (the default action), 'test', and "
"'install'. Other actions defined so far include:\n"
"\n"
"  build                          manifest   clean                          "
"manifest_skip   code                           manpages   "
"config_data                    pardist   diff                           "
"ppd   dist                           ppmdist   "
"distcheck                      prereq_data   distclean                      "
"prereq_report   distdir                        pure_install   "
"distinstall                    realclean   distmeta                       "
"retest   distsign                       skipcheck   "
"disttest                       test   docs                           "
"testall   fakeinstall                    testcover   "
"help                           testdb   html                           "
"testpod   install                        testpodcoverage   "
"installdeps                    versioninstall\n"
"\n"
"You can run the 'help' action for a complete list of actions."
msgstr ""

#. leap/perl-Module-Build-Deprecated/summary
msgid "Collection of Modules Removed From Module-Build"
msgstr ""

#. leap/perl-Module-Build-Deprecated/description
msgid ""
"This module contains a number of module that have been removed from Module-"
"Build: \n"
"* * Module::Build::ModuleInfo\n"
"\n"
"This has been superceded by Module::Metadata \n"
"* * Module::Build::Version\n"
"\n"
"This has been replaced by version \n"
"* * Module::Build::YAML\n"
"\n"
"This has been replaced by CPAN::Meta::YAML"
msgstr ""

#. leap/perl-Module-Build-Tiny/summary
#, fuzzy
msgid "A tiny replacement for Module::Build"
msgstr "Remplacement réussi pour \"%s\". "

#. leap/perl-Module-Build-Tiny/description
msgid ""
"Many Perl distributions use a Build.PL file instead of a Makefile.PL file to "
"drive distribution configuration, build, test and installation. "
"Traditionally, Build.PL uses Module::Build as the underlying build system. "
"This module provides a simple, lightweight, drop-in replacement.\n"
"\n"
"Whereas Module::Build has over 6,700 lines of code; this module has less "
"than 120, yet supports the features needed by most distributions."
msgstr ""

#. leap/perl-Module-Build-WithXSpp/summary
#, fuzzy
msgid "XS++ enhanced flavour of Module::Build"
msgstr "Remplacement réussi pour \"%s\". "

#. leap/perl-Module-Build-WithXSpp/description
msgid ""
"This subclass of the Module::Build manpage adds some tools and processes to "
"make it easier to use for wrapping C++ using XS++ (the ExtUtils::XSpp "
"manpage).\n"
"\n"
"There are a few minor differences from using 'Module::Build' for an ordinary "
"XS module and a few conventions that you should be aware of as an XS++ "
"module author. They are documented in the the /\"FEATURES AND CONVENTIONS\" "
"manpage section below. But if you can't be bothered to read all that, you "
"may choose skip it and blindly follow the advice in the /\"JUMP START FOR "
"THE IMPATIENT\" manpage.\n"
"\n"
"An example of a full distribution based on this build tool can be found in "
"the the ExtUtils::XSpp manpage distribution under _examples/XSpp-Example_. "
"Using that example as the basis for your 'Module::Build::WithXSpp'-based "
"distribution is probably a good idea."
msgstr ""

#. leap/perl-Module-Build-XSUtil/summary
msgid "Module::Build class for building XS modules"
msgstr ""

#. leap/perl-Module-Build-XSUtil/description
msgid ""
"Module::Build::XSUtil is subclass of Module::Build for support building XS "
"modules.\n"
"\n"
"This is a list of a new parameters in the Module::Build::new method: \n"
"* needs_compiler_c99\n"
"\n"
"This option checks C99 compiler's availability. If it's not available, Build."
"PL exits by 0. \n"
"* needs_compiler_cpp\n"
"\n"
"This option checks C++ compiler's availability. If it's not available, Build."
"PL exits by 0.\n"
"\n"
"In addition, append 'extra_compiler_flags' and 'extra_linker_flags' for C+"
"+. \n"
"* generate_ppport_h\n"
"\n"
"Genereate ppport.h by Devel::PPPort. \n"
"* generate_xshelper_h\n"
"\n"
"Genereate xshelper.h which is a helper header file to include EXTERN.h, perl."
"h, XSUB.h and ppport.h, and defines some portability stuff which are not "
"supported by ppport.h.\n"
"\n"
"It is porting from Module::Install::XSUtil. \n"
"* cc_warnings\n"
"\n"
"Enable compiler warnings flag. It is enable by default. \n"
"* -g options\n"
"\n"
"If invoke Build.PL with '-g' option, It will build with debug options."
msgstr ""

#. leap/perl-Module-CPANfile/summary
msgid "Parse cpanfile"
msgstr ""

#. leap/perl-Module-CPANfile/description
msgid ""
"Module::CPANfile is a tool to handle cpanfile format to load application "
"specific dependencies, not just for CPAN distributions."
msgstr ""

#. leap/perl-Module-Depends/summary
#, fuzzy
msgid "Identify the Dependencies of a Distribution"
msgstr "Dépendances du moteur d'exécution des applications KDE3"

#. leap/perl-Module-Depends/description
msgid ""
"Module::Depends extracts module dependencies from an unpacked distribution "
"tree.\n"
"\n"
"Module::Depends only evaluates the META.yml shipped with a distribution. "
"This won't be effective until all distributions ship META.yml files, so we "
"suggest you take your life in your hands and look at Module::Depends::"
"Intrusive."
msgstr ""

#. leap/perl-Module-Find/summary
msgid "Find and use installed modules in a (sub)category"
msgstr ""

#. leap/perl-Module-Find/description
msgid ""
"Module::Find lets you find and use modules in categories. This can be very "
"useful for auto-detecting driver or plugin modules. You can differentiate "
"between looking in the category itself or in all subcategories.\n"
"\n"
"If you want Module::Find to search in a certain directory on your harddisk "
"(such as the plugins directory of your software installation), make sure you "
"modify '@INC' before you call the Module::Find functions."
msgstr ""

#. leap/perl-Module-Implementation/summary
msgid "Loads one of several alternate underlying implementations for a module"
msgstr ""

#. leap/perl-Module-Implementation/description
msgid ""
"This module abstracts out the process of choosing one of several underlying "
"implementations for a module. This can be used to provide XS and pure Perl "
"implementations of a module, or it could be used to load an implementation "
"for a given OS or any other case of needing to provide multiple "
"implementations.\n"
"\n"
"This module is only useful when you know all the implementations ahead of "
"time. If you want to load arbitrary implementations then you probably want "
"something like a plugin system, not this module."
msgstr ""

#. leap/perl-Module-Info/summary
#, fuzzy
msgid "Information about Perl modules"
msgstr "Aucune information disponible."

#. leap/perl-Module-Info/description
msgid ""
"Module::Info gives you information about Perl modules *without actually "
"loading the module*. It actually isn't specific to modules and should work "
"on any perl code."
msgstr ""

#. leap/perl-Module-Install/summary
msgid "Standalone, extensible Perl module installer"
msgstr ""

#. leap/perl-Module-Install/description
msgid ""
"*Module::Install* is a package for writing installers for CPAN (or CPAN-"
"like) distributions that are clean, simple, minimalist, act in a strictly "
"correct manner with ExtUtils::MakeMaker, and will run on any Perl "
"installation version 5.005 or newer.\n"
"\n"
"The intent is to make it as easy as possible for CPAN authors (and "
"especially for first-time CPAN authors) to have installers that follow all "
"the best practices for distribution installation, but involve as much DWIM "
"(Do What I Mean) as possible when writing them."
msgstr ""

#. leap/perl-Module-Install-AuthorTests/summary
msgid "Designate Tests Only Run by Module Authors"
msgstr ""

#. leap/perl-Module-Install-AuthorTests/description
msgid "designate tests only run by module authors"
msgstr ""

#. leap/perl-Module-Install-ExtraTests/summary
msgid "Contextual Tests That the Harness Can Ignore"
msgstr ""

#. leap/perl-Module-Install-ExtraTests/description
msgid "contextual tests that the harness can ignore"
msgstr ""

#. leap/perl-Module-Load-Conditional/summary
msgid "Looking up module information / loading at runtime"
msgstr ""

#. leap/perl-Module-Load-Conditional/description
msgid ""
"Module::Load::Conditional provides simple ways to query and possibly load "
"any of the modules you have installed on your system during runtime.\n"
"\n"
"It is able to load multiple modules at once or none at all if one of them "
"was not able to load. It also takes care of any error checking and so forth."
msgstr ""

#. leap/perl-Module-Metadata/summary
msgid "Gather package and POD information from perl module files"
msgstr ""

#. leap/perl-Module-Metadata/description
msgid ""
"This module provides a standard way to gather metadata about a .pm file "
"through (mostly) static analysis and (some) code execution. When determining "
"the version of a module, the '$VERSION' assignment is 'eval'ed, as is "
"traditional in the CPAN toolchain."
msgstr ""

#. leap/perl-Module-Path/summary
msgid "get the full path to a locally installed module"
msgstr ""

#. leap/perl-Module-Path/description
msgid ""
"This module provides a single function, 'module_path()', which takes a "
"module name and finds the first directory in your '@INC' path where the "
"module is installed locally. It returns the full path to that file, "
"resolving any symlinks. It is portable and only depends on core modules.\n"
"\n"
"It works by looking in all the directories in '@INC' for an appropriately "
"named file:\n"
"\n"
"I wrote this module because I couldn't find an alternative which dealt with "
"the points listed above, and didn't pull in what seemed like too many "
"dependencies to me.\n"
"\n"
"The distribution for 'Module::Path' includes the 'mpath' script, which lets "
"you get the path for a module from the command-line:\n"
"\n"
" % mpath Module::Path\n"
"\n"
"The 'module_path()' function will also cope if the module name includes '."
"pm'; this means you can pass a partial path, such as used as the keys in "
"'%INC':\n"
"\n"
"  module_path('Test/More.pm') eq $INC{'Test/More.pm'}\n"
"\n"
"The above is the basis for one of the tests."
msgstr ""

#. leap/perl-Module-Pluggable/summary
msgid "Automatically Give Your Module the Ability to Have Plugins"
msgstr ""

#. leap/perl-Module-Pluggable/description
msgid ""
"Provides a simple but, hopefully, extensible way of having 'plugins' for "
"your module. Obviously this isn't going to be the be all and end all of "
"solutions but it works for me.\n"
"\n"
"Essentially all it does is export a method into your namespace that looks "
"through a search path for .pm files and turn those into class names.\n"
"\n"
"Optionally it instantiates those classes for you."
msgstr ""

#. leap/perl-Module-Reader/summary
msgid "Find and read perl modules like perl does"
msgstr ""

#. leap/perl-Module-Reader/description
msgid ""
"This module finds modules in '@INC' using the same algorithm perl does. From "
"that, it will give you the source content of a module, the file name (where "
"available), and how it was found. Searches (and content) are based on the "
"same internal rules that perl uses for _require|perlfunc/require_ and _do|"
"perlfunc/do_."
msgstr ""

#. leap/perl-Module-Refresh/summary
msgid "Refresh %INC files when updated on disk"
msgstr ""

#. leap/perl-Module-Refresh/description
msgid ""
"This module is a generalization of the functionality provided by Apache::"
"StatINC and Apache::Reload. It's designed to make it easy to do simple "
"iterative development when working in a persistent environment.\n"
"\n"
"It does not require mod_perl."
msgstr ""

#. leap/perl-Module-Runtime/summary
msgid "Runtime Module Handling"
msgstr ""

#. leap/perl-Module-Runtime/description
msgid ""
"The functions exported by this module deal with runtime handling of Perl "
"modules, which are normally handled at compile time. This module avoids "
"using any other modules, so that it can be used in low-level "
"infrastructure.\n"
"\n"
"The parts of this module that work with module names apply the same syntax "
"that is used for barewords in Perl source. In principle this syntax can vary "
"between versions of Perl, and this module applies the syntax of the Perl on "
"which it is running. In practice the usable syntax hasn't changed yet. "
"There's some intent for Unicode module names to be supported in the future, "
"but this hasn't yet amounted to any consistent facility.\n"
"\n"
"The functions of this module whose purpose is to load modules include "
"workarounds for three old Perl core bugs regarding 'require'. These "
"workarounds are applied on any Perl version where the bugs exist, except for "
"a case where one of the bugs cannot be adequately worked around in pure Perl."
msgstr ""

#. leap/perl-Module-Runtime-Conflicts/summary
msgid "Provide information on conflicts for Module::Runtime"
msgstr ""

#. leap/perl-Module-Runtime-Conflicts/description
msgid ""
"This module provides conflicts checking for Module::Runtime, which had a "
"recent release that broke some versions of Moose. It is called from Moose::"
"Conflicts and 'moose-outdated'."
msgstr ""

#. leap/perl-Module-ScanDeps/summary
msgid "Recursively scan Perl code for dependencies"
msgstr ""

#. leap/perl-Module-ScanDeps/description
msgid ""
"This module scans potential modules used by perl programs, and returns a "
"hash reference; its keys are the module names as appears in '%INC' (e.g. "
"'Test/More.pm'); the values are hash references with this structure:\n"
"\n"
"    {         file    => '/usr/local/lib/perl5/5.8.0/Test/More.pm',         "
"key     => 'Test/More.pm',         type    => 'module',    # or 'autoload', "
"'data', 'shared'         used_by => [ 'Test/Simple.pm', ... ],         "
"uses    => [ 'Test/Other.pm', ... ],     }\n"
"\n"
"One function, 'scan_deps', is exported by default. Other functions such as "
"('scan_line', 'scan_chunk', 'add_deps', 'path_to_inc_name') are exported "
"upon request.\n"
"\n"
"Users of *App::Packer* may also use this module as the dependency-checking "
"frontend, by tweaking their _p2e.pl_ like below:\n"
"\n"
"    use Module::ScanDeps;     ...     my $packer = App::Packer-"
">new( frontend => 'Module::ScanDeps' );     ...\n"
"\n"
"Please see App::Packer::Frontend for detailed explanation on the structure "
"returned by 'get_files'."
msgstr ""

#. leap/perl-Module-Signature/summary
msgid "Module signature file manipulation"
msgstr ""

#. leap/perl-Module-Signature/description
msgid ""
"*Module::Signature* adds cryptographic authentications to CPAN "
"distributions, via the special _SIGNATURE_ file.\n"
"\n"
"If you are a module user, all you have to do is to remember to run 'cpansign "
"-v' (or just 'cpansign') before issuing 'perl Makefile.PL' or 'perl Build."
"PL'; that will ensure the distribution has not been tampered with.\n"
"\n"
"Module authors can easily add the _SIGNATURE_ file to the distribution "
"tarball; see NOTES below for how to do it as part of 'make dist'.\n"
"\n"
"If you _really_ want to sign a distribution manually, simply add 'SIGNATURE' "
"to _MANIFEST_, then type 'cpansign -s' immediately before 'make dist'. Be "
"sure to delete the _SIGNATURE_ file afterwards.\n"
"\n"
"Please also see NOTES about _MANIFEST.SKIP_ issues, especially if you are "
"using *Module::Build* or writing your own _MANIFEST.SKIP_.\n"
"\n"
"Signatures made with Module::Signature prior to version 0.82 used the SHA1 "
"algorithm by default. SHA1 is now considered broken, and therefore module "
"authors are strongly encouraged to regenerate their _SIGNATURE_ files. Users "
"verifying old SHA1 signature files will receive a warning."
msgstr ""

#. leap/perl-Module-Starter/summary
msgid "Simple starter kit for any module"
msgstr ""

#. leap/perl-Module-Starter/description
msgid ""
"This is the core module for Module::Starter. If you're not looking to extend "
"or alter the behavior of this module, you probably want to look at module-"
"starter instead.\n"
"\n"
"Module::Starter is used to create a skeletal CPAN distribution, including "
"basic builder scripts, tests, documentation, and module code. This is done "
"through just one method, 'create_distro'."
msgstr ""

#. leap/perl-Module-Util/summary
#, fuzzy
msgid "Module name tools and transformations"
msgstr "Module perl pour lire les fichier TNEF"

#. leap/perl-Module-Util/description
msgid ""
"This module provides a few useful functions for manipulating module names. "
"Its main aim is to centralise some of the functions commonly used by modules "
"that manipulate other modules in some way, like converting module names to "
"relative paths."
msgstr ""

#. leap/perl-Mojo-DOM58/summary
msgid "Minimalistic HTML/XML DOM parser with CSS selectors"
msgstr ""

#. leap/perl-Mojo-DOM58/description
msgid ""
"Mojo::DOM58 is a minimalistic and relaxed pure-perl HTML/XML DOM parser "
"based on Mojo::DOM. It supports the at https://html.spec.whatwg.org/ and at "
"https://www.w3.org/TR/xml/, and matching based on at https://www.w3.org/TR/"
"selectors/. It will even try to interpret broken HTML and XML, so you should "
"not use it for validation."
msgstr ""

#. leap/perl-Mojo-IOLoop-ReadWriteProcess/summary
msgid "Execute external programs or internal code blocks as separate process"
msgstr ""

#. leap/perl-Mojo-IOLoop-ReadWriteProcess/description
msgid "Mojo::IOLoop::ReadWriteProcess is yet another process manager."
msgstr ""

#. leap/perl-Mojo-Pg/summary
msgid "Wrapper around DBD::Pg for using PostgreSql with Mojolicious"
msgstr ""

#. leap/perl-Mojo-Pg/description
msgid ""
"Mojo::Pg is a tiny wrapper around DBD::Pg that makes at http://www."
"postgresql.org a lot of fun to use with the at https://mojolicious.org real-"
"time web framework. Perform queries blocking and non-blocking, use all at "
"https://www.postgresql.org/docs/current/static/sql.html PostgreSQL has to "
"offer, generate CRUD queries from data structures, manage your database "
"schema with migrations and build scalable real-time web applications with "
"the publish/subscribe pattern."
msgstr ""

#. leap/perl-Mojo-RabbitMQ-Client/summary
msgid "Mojo::IOLoop based RabbitMQ client"
msgstr ""

#. leap/perl-Mojo-RabbitMQ-Client/description
msgid ""
"Mojo::RabbitMQ::Client is a rewrite of AnyEvent::RabbitMQ to work on top of "
"Mojo::IOLoop."
msgstr ""

#. leap/perl-Mojo-SQLite/summary
msgid "Tiny Mojolicious wrapper for SQLite"
msgstr ""

#. leap/perl-Mojo-SQLite/description
msgid ""
"Mojo::SQLite is a tiny wrapper around DBD::SQLite that makes at https://www."
"sqlite.org/ a lot of fun to use with the at https://mojolico.us real-time "
"web framework. Use all at http://sqlite.org/lang.html SQLite has to offer, "
"generate CRUD queries from data structures, and manage your database schema "
"with migrations."
msgstr ""

#. leap/perl-Mojolicious/summary
#, fuzzy
msgid "Real-time web framework"
msgstr "Paquets trouvés"

#. leap/perl-Mojolicious/description
msgid ""
"An amazing real-time web framework built on top of the powerful Mojo web "
"development toolkit. With support for RESTful routes, plugins, commands, "
"Perl-ish templates, content negotiation, session management, form "
"validation, testing framework, static file server, 'CGI'/'PSGI' detection, "
"first class Unicode support and much more for you to discover.\n"
"\n"
"Take a look at our excellent documentation in Mojolicious::Guides!"
msgstr ""

#. leap/perl-Mojolicious-Plugin-AssetPack/summary
msgid "Compress and convert CSS, Less, Sass, JavaScript and CoffeeScript files"
msgstr ""

#. leap/perl-Mojolicious-Plugin-AssetPack/description
msgid ""
"Mojolicious::Plugin::AssetPack is a Mojolicious plugin for processing static "
"assets. The idea is that JavaScript and CSS files should be served as one "
"minified file to save bandwidth and roundtrip time to the server.\n"
"\n"
"There are many external tools for doing this, but integrating them with "
"Mojolicious can be a struggle: You want to serve the source files directly "
"while developing, but a minified version in production. This assetpack "
"plugin will handle all of that automatically for you.\n"
"\n"
"Your application creates and refers to an asset by its topic (virtual asset "
"name). The process of building actual assets from their components is "
"delegated to \"pipe objects\"."
msgstr ""

#. leap/perl-Mojolicious-Plugin-CHI/summary
msgid "Use CHI Caches in Mojolicious"
msgstr ""

#. leap/perl-Mojolicious-Plugin-CHI/description
msgid ""
"Mojolicious::Plugin::CHI is a simple plugin to work with CHI caches within "
"Mojolicious."
msgstr ""

#. leap/perl-Mojolicious-Plugin-NYTProf/summary
msgid "Auto handling of Devel::NYTProf in your Mojolicious app"
msgstr ""

#. leap/perl-Mojolicious-Plugin-NYTProf/description
msgid ""
"This plugin enables Mojolicious to automatically generate Devel::NYTProf "
"profiles and routes for your app, it has been inspired by Dancer::Plugin::"
"NYTProf"
msgstr ""

#. leap/perl-Mojolicious-Plugin-OAuth2/summary
msgid "Auth against OAuth2 APIs including OpenID Connect"
msgstr ""

#. leap/perl-Mojolicious-Plugin-OAuth2/description
msgid ""
"This Mojolicious plugin allows you to easily authenticate against a at "
"http://oauth.net or at https://openid.net/connect/ provider. It includes "
"configurations for a few popular providers, but you can add your own as "
"well.\n"
"\n"
"See register for a full list of bundled providers."
msgstr ""

#. leap/perl-Mojolicious-Plugin-RenderFile/summary
msgid "\"render_file\" helper for Mojolicious"
msgstr ""

#. leap/perl-Mojolicious-Plugin-RenderFile/description
msgid ""
"Mojolicious::Plugin::RenderFile is a Mojolicious plugin that adds "
"\"render_file\" helper. It does not read file in memory and just streaming "
"it to a client."
msgstr ""

#. leap/perl-Monitoring-Plugin/summary
msgid "Family of Perl modules to streamline writing Nagios compatible plugins"
msgstr ""

#. leap/perl-Monitoring-Plugin/description
msgid ""
"Monitoring::Plugin and its associated Monitoring::Plugin::* modules are a "
"family of perl modules to streamline writing Monitoring plugins. The main "
"end user modules are Monitoring::Plugin, providing an object-oriented "
"interface to the entire Monitoring::Plugin::* collection, and Monitoring::"
"Plugin::Functions, providing a simpler functional interface to a useful "
"subset of the available functionality.\n"
"\n"
"The purpose of the collection is to make it as simple as possible for "
"developers to create plugins that conform the Monitoring Plugin guidelines "
"(https://www.monitoring-plugins.org/doc/guidelines.html)."
msgstr ""

#. leap/perl-Moo/summary
msgid "Minimalist Object Orientation (with Moose compatibility)"
msgstr ""

#. leap/perl-Moo/description
msgid ""
"'Moo' is an extremely light-weight Object Orientation system. It allows one "
"to concisely define objects and roles with a convenient syntax that avoids "
"the details of Perl's object system. 'Moo' contains a subset of Moose and is "
"optimised for rapid startup.\n"
"\n"
"'Moo' avoids depending on any XS modules to allow for simple deployments. "
"The name 'Moo' is based on the idea that it provides almost -- but not quite "
"-- two thirds of Moose.\n"
"\n"
"Unlike Mouse this module does not aim at full compatibility with Moose's "
"surface syntax, preferring instead to provide full interoperability via the "
"metaclass inflation capabilities described in MOO AND MOOSE.\n"
"\n"
"For a full list of the minor differences between Moose and Moo's surface "
"syntax, see INCOMPATIBILITIES WITH MOOSE."
msgstr ""

#. leap/perl-MooX-HandlesVia/summary
msgid "NativeTrait-like behavior for Moo"
msgstr ""

#. leap/perl-MooX-HandlesVia/description
msgid ""
"MooX::HandlesVia is an extension of Moo's 'handles' attribute functionality. "
"It provides a means of proxying functionality from an external class to the "
"given atttribute. This is most commonly used as a way to emulate 'Native "
"Trait' behavior that has become commonplace in Moose code, for which there "
"was no Moo alternative."
msgstr ""

#. leap/perl-MooX-Types-MooseLike/summary
msgid "Some Moosish Types and a Type Builder"
msgstr ""

#. leap/perl-MooX-Types-MooseLike/description
msgid ""
"This module provides a possibility to build your own set of Moose-like "
"types. These custom types can then be used to describe fields in Moo-based "
"classes.\n"
"\n"
"See the MooX::Types::MooseLike::Base manpage for a list of available base "
"types. Its source also provides an example of how to build base types, along "
"with both parameterizable and non-parameterizable."
msgstr ""

#. leap/perl-MooX-Types-MooseLike-Numeric/summary
msgid "Moo types for numbers"
msgstr ""

#. leap/perl-MooX-Types-MooseLike-Numeric/description
msgid ""
"A set of numeric types to be used in Moo-based classes. Adapted from MooseX::"
"Types::Common::Numeric"
msgstr ""

#. leap/perl-MooX-late/summary
msgid "easily translate Moose code to Moo"
msgstr ""

#. leap/perl-MooX-late/description
msgid ""
"the Moo manpage is a light-weight object oriented programming framework "
"which aims to be compatible with the Moose manpage. It does this by "
"detecting when Moose has been loaded, and automatically \"inflating\" its "
"classes and roles to full Moose classes and roles. This way, Moo classes can "
"consume Moose roles, Moose classes can extend Moo classes, and so forth.\n"
"\n"
"However, the surface syntax of Moo differs somewhat from Moose. For example "
"the 'isa' option when defining attributes in Moose must be either a string "
"or a blessed the Moose::Meta::TypeConstraint manpage object; but in Moo must "
"be a coderef. These differences in surface syntax make porting code from "
"Moose to Moo potentially tricky. the MooX::late manpage provides some "
"assistance by enabling a slightly more Moosey surface syntax.\n"
"\n"
"MooX::late does the following: \n"
"* 1.\n"
"\n"
"  Supports 'isa => $stringytype'. \n"
"* 2.\n"
"\n"
"  Supports 'does => $rolename' . \n"
"* 3.\n"
"\n"
"  Supports 'lazy_build => 1'. \n"
"* 4.\n"
"\n"
"  Exports 'blessed' and 'confess' functions to your namespace. \n"
"* 5.\n"
"\n"
"  Handles certain attribute traits. Currently 'Hash', 'Array' and 'Code'   "
"are supported. This feature requires the MooX::HandlesVia manpage.\n"
"\n"
"  'String', 'Number', 'Counter' and 'Bool' are unlikely to ever be   "
"supported because of internal implementation details of Moo. If you need   "
"another attribute trait to be supported, let me know and I will consider   "
"it.\n"
"\n"
"Five features. It is not the aim of 'MooX::late' to make every aspect of Moo "
"behave exactly identically to Moose. It's just going after the low-hanging "
"fruit. So it does five things right now, and I promise that future versions "
"will never do more than seven.\n"
"\n"
"Previous releases of MooX::late added support for 'coerce => 1' and 'default "
"=> $nonref'. These features have now been added to Moo itself, so MooX::late "
"no longer has to deal with them."
msgstr ""

#. leap/perl-Moose/summary
msgid "Postmodern Object System for Perl 5"
msgstr ""

#. leap/perl-Moose/description
msgid ""
"Moose is an extension of the Perl 5 object system.\n"
"\n"
"The main goal of Moose is to make Perl 5 Object Oriented programming easier, "
"more consistent, and less tedious. With Moose you can think more about what "
"you want to do and less about the mechanics of OOP.\n"
"\n"
"Additionally, Moose is built on top of Class::MOP, which is a metaclass "
"system for Perl 5. This means that Moose not only makes building normal Perl "
"5 objects better, but it provides the power of metaclass programming as well."
msgstr ""

#. leap/perl-Moose-Autobox/summary
msgid "Autoboxed wrappers for Native Perl datatypes"
msgstr ""

#. leap/perl-Moose-Autobox/description
msgid ""
"Moose::Autobox provides an implementation of SCALAR, ARRAY, HASH & CODE for "
"use with autobox. It does this using a hierarchy of roles in a manner "
"similar to what Perl 6 _might_ do. This module, like Class::MOP and Moose, "
"was inspired by my work on the Perl 6 Object Space, and the 'core types' "
"implemented there."
msgstr ""

#. leap/perl-MooseX-Aliases/summary
msgid "easy aliasing of methods and attributes in Moose"
msgstr ""

#. leap/perl-MooseX-Aliases/description
msgid ""
"The MooseX::Aliases module will allow you to quickly alias methods in Moose. "
"It provides an alias parameter for 'has()' to generate aliased accessors as "
"well as the standard ones. Attributes can also be initialized in the "
"constructor via their aliased names.\n"
"\n"
"You can create more than one alias at once by passing a arrayref:\n"
"\n"
"    has ip_addr => (         alias => [ qw(ipAddr ip) ],     );"
msgstr ""

#. leap/perl-MooseX-App-Cmd/summary
msgid "Mashes up MooseX::Getopt and App::Cmd"
msgstr ""

#. leap/perl-MooseX-App-Cmd/description
msgid ""
"This module marries App::Cmd with MooseX::Getopt.\n"
"\n"
"Use it like App::Cmd advises (especially see App::Cmd::Tutorial), swapping "
"App::Cmd::Command for MooseX::App::Cmd::Command.\n"
"\n"
"Then you can write your moose commands as Moose classes, with MooseX::Getopt "
"defining the options for you instead of 'opt_spec' returning a Getopt::Long::"
"Descriptive spec."
msgstr ""

#. leap/perl-MooseX-ArrayRef/summary
msgid "blessed arrayrefs with Moose"
msgstr ""

#. leap/perl-MooseX-ArrayRef/description
msgid ""
"Objects implemented with arrayrefs rather than hashrefs are often faster "
"than those implemented with hashrefs. Moose's default object implementation "
"is hashref based. Can we go faster?\n"
"\n"
"Simply 'use MooseX::ArrayRef' instead of 'use Moose', but note the "
"limitations in the section below.\n"
"\n"
"The current implementation is mostly a proof of concept, but it does mostly "
"seem to work."
msgstr ""

#. leap/perl-MooseX-Attribute-ENV/summary
msgid "Set default of an attribute to a value from %ENV"
msgstr ""

#. leap/perl-MooseX-Attribute-ENV/description
msgid ""
"This is a Moose attribute trait that you use when you want the default value "
"for an attribute to be populated from the %ENV hash. So, for example if you "
"have set the environment variable USERNAME = 'John' you can do:\n"
"\n"
"\tpackage MyApp::MyClass;\n"
"\n"
"\tuse Moose; \tuse MooseX::Attribute::ENV;\n"
"\n"
"\thas 'username' => (is=>'ro', traits=>['ENV']);\n"
"\n"
"\tpackage main;\n"
"\n"
"\tmy $myclass = MyApp::MyClass->new();\n"
"\n"
"\tprint $myclass->username; # STDOUT => 'John';\n"
"\n"
"This is basically similar functionality to something like:\n"
"\n"
"\thas 'attr' => ( \t\tis=>'ro', \t\tdefault=> sub { \t\t\t$ENV{uc 'attr'}; \t"
"\t}, \t);\n"
"\n"
"but this module has a few other features that offer merit, as well as being "
"a simple enough attribute trait that I hope it can serve as a learning "
"tool.\n"
"\n"
"If the named key isn't found in %ENV, then defaults will execute as normal."
msgstr ""

#. leap/perl-MooseX-AttributeHelpers/summary
msgid "(DEPRECATED) Extend your attribute interfaces"
msgstr ""

#. leap/perl-MooseX-AttributeHelpers/description
msgid ""
"*This distribution is deprecated. The features it provides have been added "
"to the Moose core code as Moose::Meta::Attribute::Native. This distribution "
"should not be used by any new code.*\n"
"\n"
"While Moose attributes provide you with a way to name your accessors, "
"readers, writers, clearers and predicates, this library provides commonly "
"used attribute helper methods for more specific types of data.\n"
"\n"
"As seen in the SYNOPSIS, you specify the extension via the 'metaclass' "
"parameter. Available meta classes are:"
msgstr ""

#. leap/perl-MooseX-AuthorizedMethods/summary
msgid "Syntax sugar for authorized methods"
msgstr ""

#. leap/perl-MooseX-AuthorizedMethods/description
msgid ""
"This method exports the \"authorized\" declarator that makes a verification "
"if the user has the required permissions before the acual invocation. The "
"default verification method will take the \"user\" method result and call "
"\"roles\" to list the roles given to that user."
msgstr ""

#. leap/perl-MooseX-ClassAttribute/summary
msgid "Declare class attributes Moose-style"
msgstr ""

#. leap/perl-MooseX-ClassAttribute/description
msgid ""
"This module allows you to declare class attributes in exactly the same way "
"as object attributes, using 'class_has()' instead of 'has()'.\n"
"\n"
"You can use any feature of Moose's attribute declarations, including "
"overriding a parent's attributes, delegation ('handles'), attribute traits, "
"etc. All features should just work. The one exception is the \"required\" "
"flag, which is not allowed for class attributes.\n"
"\n"
"The accessor methods for class attribute may be called on the class "
"directly, or on objects of that class. Passing a class attribute to the "
"constructor will not set that attribute."
msgstr ""

#. leap/perl-MooseX-Clone/summary
msgid "Fine-grained cloning support for Moose objects"
msgstr ""

#. leap/perl-MooseX-Clone/description
msgid ""
"Out of the box the Moose manpage only provides very barebones cloning "
"support in order to maximize flexibility.\n"
"\n"
"This role provides a 'clone' method that makes use of the low level cloning "
"support already in the Moose manpage and adds selective deep cloning based "
"on introspection on top of that. Attributes with the 'Clone' trait will "
"handle cloning of data within the object, typically delegating to the "
"attribute value's own 'clone' method."
msgstr ""

#. leap/perl-MooseX-ConfigFromFile/summary
msgid "An abstract Moose role for setting attributes from a configfile"
msgstr ""

#. leap/perl-MooseX-ConfigFromFile/description
msgid ""
"This is an abstract role which provides an alternate constructor for "
"creating objects using parameters passed in from a configuration file. The "
"actual implementation of reading the configuration file is left to concrete "
"sub-roles.\n"
"\n"
"It declares an attribute 'configfile' and a class method 'new_with_config', "
"and requires that concrete roles derived from it implement the class method "
"'get_config_from_file'.\n"
"\n"
"Attributes specified directly as arguments to 'new_with_config' supersede "
"those in the configfile.\n"
"\n"
"the MooseX::Getopt manpage knows about this abstract role, and will use it "
"if available to load attributes from the file specified by the command line "
"flag '--configfile' during its normal 'new_with_options'."
msgstr ""

#. leap/perl-MooseX-Daemonize/summary
#, fuzzy
msgid "Role for daemonizing your Moose based application"
msgstr "fichiers de développement d'applications CommonC++"

#. leap/perl-MooseX-Daemonize/description
msgid ""
"Often you want to write a persistent daemon that has a pid file, and "
"responds appropriately to Signals. This module provides a set of basic roles "
"as an infrastructure to do that."
msgstr ""

#. leap/perl-MooseX-Declare/summary
msgid "(DEPRECATED) Declarative syntax for Moose"
msgstr ""

#. leap/perl-MooseX-Declare/description
msgid ""
"This module provides syntactic sugar for Moose, the postmodern object system "
"for Perl 5. When used, it sets up the 'class' and 'role' keywords. \n"
"*Note:* Please see the the /WARNING manpage section below!"
msgstr ""

#. leap/perl-MooseX-Getopt/summary
msgid "Moose role for processing command line options"
msgstr ""

#. leap/perl-MooseX-Getopt/description
msgid ""
"This is a role which provides an alternate constructor for creating objects "
"using parameters passed in from the command line."
msgstr ""

#. leap/perl-MooseX-GlobRef/summary
msgid "Store a Moose object in glob reference"
msgstr ""

#. leap/perl-MooseX-GlobRef/description
msgid ""
"This module allows to store Moose object in glob reference of file handle. "
"The class attributes will be stored in hash slot associated with glob "
"reference. It allows to create a Moose version of the IO::Handle manpage.\n"
"\n"
"The attributes can be accessed directly with following expression:\n"
"\n"
"  my $hashref = \\%{*$self};   print $hashref->{key};\n"
"\n"
"or shorter:\n"
"\n"
"  print *$self->{key};\n"
"\n"
"but the standard accessors should be used instead:\n"
"\n"
"  print $self->key;"
msgstr ""

#. leap/perl-MooseX-Has-Options/summary
msgid "Succinct options for Moose"
msgstr ""

#. leap/perl-MooseX-Has-Options/description
msgid ""
"This module provides a succinct syntax for declaring options for the Moose "
"manpage attributes."
msgstr ""

#. leap/perl-MooseX-HasDefaults/summary
msgid "Default \"Is\" to \"Ro\" or \"Rw\" for All Attributes"
msgstr ""

#. leap/perl-MooseX-HasDefaults/description
msgid ""
"The module MooseX::HasDefaults::RO defaults 'is' to 'ro'.\n"
"\n"
"The module MooseX::HasDefaults::RW defaults 'is' to 'rw'.\n"
"\n"
"If you pass a specific value to any 'has''s 'is', that overrides the "
"default. If you do not want an accessor, pass 'is => undef'."
msgstr ""

#. leap/perl-MooseX-InsideOut/summary
msgid "inside-out objects with Moose"
msgstr ""

#. leap/perl-MooseX-InsideOut/description
msgid ""
"MooseX::InsideOut provides metaroles for inside-out objects. That is, it "
"sets up attribute slot storage somewhere other than inside '$self'. This "
"means that you can extend non-Moose classes, whose internals you either "
"don't want to care about or aren't hash-based."
msgstr ""

#. leap/perl-MooseX-Iterator/summary
#, fuzzy
msgid "Iterate over collections"
msgstr "Librairie Mathématique C++"

#. leap/perl-MooseX-Iterator/description
msgid ""
"This is an attempt to add smalltalk-like streams to Moose. It currently "
"works with ArrayRefs and HashRefs. \n"
"* next\n"
"\n"
"The next method provides the next item in the colletion.\n"
"\n"
"  For arrays it returns the element of the array\n"
"\n"
"  For hashs it returns a pair as a hashref with the keys: key and value \n"
"* has_next\n"
"\n"
"The has_next method is a boolean method that is true if there is another "
"item in the colletion after the current item. and falue if there isn't. \n"
"* peek\n"
"\n"
"The peek method returns the next item without moving the state of the "
"iterator forward. It returns undef if it is at the end of the collection. \n"
"* reset\n"
"\n"
"Resets the cursor, so you can iterate through the elements again."
msgstr ""

#. leap/perl-MooseX-LazyLogDispatch/summary
#. leap/perl-MooseX-LogDispatch/summary
msgid "Logging Role for Moose"
msgstr ""

#. leap/perl-MooseX-LazyLogDispatch/description
#. leap/perl-MooseX-LogDispatch/description
msgid "Log::Dispatch role for use with your Moose classes."
msgstr ""

#. leap/perl-MooseX-LazyRequire/summary
msgid "Required attributes which fail only when trying to use them"
msgstr ""

#. leap/perl-MooseX-LazyRequire/description
msgid ""
"This module adds a 'lazy_required' option to Moose attribute declarations.\n"
"\n"
"The reader methods for all attributes with that option will throw an "
"exception unless a value for the attributes was provided earlier by a "
"constructor parameter or through a writer method."
msgstr ""

#. leap/perl-MooseX-Log-Log4perl/summary
msgid "Logging Role for Moose based on Log::Log4perl"
msgstr ""

#. leap/perl-MooseX-Log-Log4perl/description
msgid ""
"A logging role building a very lightweight wrapper to Log::Log4perl for use "
"with your Moose or Moo classes. The initialization of the Log4perl instance "
"must be performed prior to logging the first log message. Otherwise the "
"default initialization will happen, probably not doing the things you "
"expect.\n"
"\n"
"For compatibility the 'logger' attribute can be accessed to use a common "
"interface for application logging.\n"
"\n"
"Using the logger within a class is as simple as consuming a role:\n"
"\n"
"    package MyClass;     use Moose;     with 'MooseX::Log::Log4perl';\n"
"\n"
"    sub dummy {         my $self = shift;         $self->log->info(\"Dummy "
"log entry\");     }\n"
"\n"
"The logger needs to be setup before using the logger, which could happen in "
"the main application:\n"
"\n"
"    package main;     use Log::Log4perl qw(:easy);     use MyClass;\n"
"\n"
"    BEGIN { Log::Log4perl->easy_init() };\n"
"\n"
"    my $myclass = MyClass->new();     $myclass->log->info(\"In my class\"); "
"# Access the log of the object     $myclass->dummy;                    # "
"Will log \"Dummy log entry\""
msgstr ""

#. leap/perl-MooseX-MarkAsMethods/summary
msgid "Mark overload code symbols as methods"
msgstr ""

#. leap/perl-MooseX-MarkAsMethods/description
msgid ""
"MooseX::MarkAsMethods allows one to easily mark certain functions as Moose "
"methods. This will allow other packages such as the namespace::autoclean "
"manpage to operate without blowing away your overloads. After using MooseX::"
"MarkAsMethods your overloads will be recognized by the Class::MOP manpage as "
"being methods, and class extension as well as composition from roles with "
"overloads will \"just work\".\n"
"\n"
"By default we check for overloads, and mark those functions as methods.\n"
"\n"
"If 'autoclean =&gt; 1' is passed to import on using this module, we will "
"invoke namespace::autoclean to clear out non-methods."
msgstr ""

#. leap/perl-MooseX-Meta-TypeConstraint-ForceCoercion/summary
msgid "Force coercion when validating type constraints"
msgstr ""

#. leap/perl-MooseX-Meta-TypeConstraint-ForceCoercion/description
msgid ""
"This class allows to wrap any \"Moose::Meta::TypeConstraint\" in a way that "
"will force coercion of the value when checking or validating a value against "
"it."
msgstr ""

#. leap/perl-MooseX-Method-Signatures/summary
msgid ""
"(DEPRECATED) Method declarations with type constraints and no source filter"
msgstr ""

#. leap/perl-MooseX-Method-Signatures/description
msgid ""
"Provides a proper method keyword, like \"sub\" but specifically for making "
"methods and validating their arguments against Moose type constraints."
msgstr ""

#. leap/perl-MooseX-MultiInitArg/summary
msgid "Attributes with aliases for constructor arguments"
msgstr ""

#. leap/perl-MooseX-MultiInitArg/description
msgid ""
"If you've ever wanted to be able to call an attribute any number of things "
"while you're passing arguments to your object constructor, Now You Can.\n"
"\n"
"The primary motivator is that I have some attributes that were named "
"inconsistently, and I wanted to rename them without breaking backwards "
"compatibility with my existing API."
msgstr ""

#. leap/perl-MooseX-NonMoose/summary
msgid "easy subclassing of non-Moose classes"
msgstr ""

#. leap/perl-MooseX-NonMoose/description
msgid ""
"'MooseX::NonMoose' allows for easily subclassing non-Moose classes with "
"Moose, taking care of the annoying details connected with doing this, such "
"as setting up proper inheritance from the Moose::Object manpage and "
"installing (and inlining, at 'make_immutable' time) a constructor that makes "
"sure things like 'BUILD' methods are called. It tries to be as non-intrusive "
"as possible - when this module is used, inheriting from non-Moose classes "
"and inheriting from Moose classes should work identically, aside from the "
"few caveats mentioned below. One of the goals of this module is that "
"including it in a the Moose::Exporter manpage-based package used across an "
"entire application should be possible, without interfering with classes that "
"only inherit from Moose modules, or even classes that don't inherit from "
"anything at all.\n"
"\n"
"There are several ways to use this module. The most straightforward is to "
"just 'use MooseX::NonMoose;' in your class; this should set up everything "
"necessary for extending non-Moose modules. the MooseX::NonMoose::Meta::Role::"
"Class manpage and the MooseX::NonMoose::Meta::Role::Constructor manpage can "
"also be applied to your metaclasses manually, either by passing a '-traits' "
"option to your 'use Moose;' line, or by applying them using the Moose::Util::"
"MetaRole manpage in a the Moose::Exporter manpage-based package. the MooseX::"
"NonMoose::Meta::Role::Class manpage is the part that provides the main "
"functionality of this module; if you don't care about inlining, this is all "
"you need to worry about. Applying the MooseX::NonMoose::Meta::Role::"
"Constructor manpage as well will provide an inlined constructor when you "
"immutabilize your class.\n"
"\n"
"'MooseX::NonMoose' allows you to manipulate the argument list that gets "
"passed to the superclass constructor by defining a 'FOREIGNBUILDARGS' "
"method. This is called with the same argument list as the 'BUILDARGS' "
"method, but should return a list of arguments to pass to the superclass "
"constructor. This allows 'MooseX::NonMoose' to support superclasses whose "
"constructors would get confused by the extra arguments that Moose requires "
"(for attributes, etc.)\n"
"\n"
"Not all non-Moose classes use 'new' as the name of their constructor. This "
"module allows you to extend these classes by explicitly stating which method "
"is the constructor, during the call to 'extends'. The syntax looks like "
"this:\n"
"\n"
"  extends 'Foo' => { -constructor_name => 'create' };\n"
"\n"
"similar to how you can already pass '-version' in the 'extends' call in a "
"similar way."
msgstr ""

#. leap/perl-MooseX-Object-Pluggable/summary
msgid "Make your classes pluggable"
msgstr ""

#. leap/perl-MooseX-Object-Pluggable/description
msgid ""
"This module is meant to be loaded as a role from Moose-based classes. It "
"will add five methods and four attributes to assist you with the loading and "
"handling of plugins and extensions for plugins. I understand that this may "
"pollute your namespace, however I took great care in using the least "
"ambiguous names possible."
msgstr ""

#. leap/perl-MooseX-OneArgNew/summary
msgid "Teach ->New to Accept Single, Non-Hashref Arguments"
msgstr ""

#. leap/perl-MooseX-OneArgNew/description
msgid ""
"MooseX::OneArgNew lets your constructor take a single argument, which will "
"be translated into the value for a one-entry hashref. It is a the "
"parameterized role|MooseX::Role::Parameterized manpage with three "
"parameters: \n"
"* type\n"
"\n"
"  The Moose type that the single argument must be for the one-arg form to   "
"work. This should be an existing type, and may be either a string type or   "
"a MooseX::Type. \n"
"* init_arg\n"
"\n"
"  This is the string that will be used as the key for the hashref   "
"constructed from the one-arg call to new. \n"
"* coerce\n"
"\n"
"  If true, a single argument to new will be coerced into the expected type   "
"if possible. Keep in mind that if there are no coercions for the type,   "
"this will be an error, and that if a coercion from HashRef exists, you   "
"might be getting yourself into a weird situation."
msgstr ""

#. leap/perl-MooseX-POE/summary
msgid "The Illicit Love Child of Moose and POE"
msgstr ""

#. leap/perl-MooseX-POE/description
msgid ""
"MooseX::POE is a the Moose manpage wrapper around a the POE::Session manpage."
msgstr ""

#. leap/perl-MooseX-Param/summary
msgid "Simple role to provide a standard param method"
msgstr ""

#. leap/perl-MooseX-Param/description
msgid ""
"This is a very simple Moose role which provides a the CGI manpage like "
"'param' method.\n"
"\n"
"I found that I had written this code over and over and over and over again, "
"and each time it was the same. So I thought, why not put it in a role?"
msgstr ""

#. leap/perl-MooseX-Params-Validate/summary
msgid "an extension of Params::Validate using Moose's types"
msgstr ""

#. leap/perl-MooseX-Params-Validate/description
msgid ""
"This module fills a gap in Moose by adding method parameter validation to "
"Moose. This is just one of many developing options, it should not be "
"considered the \"official\" one by any means though.\n"
"\n"
"You might also want to explore 'MooseX::Method::Signatures' and 'MooseX::"
"Declare'."
msgstr ""

#. leap/perl-MooseX-Role-Cmd/summary
msgid "Wrap system command binaries the Moose way"
msgstr ""

#. leap/perl-MooseX-Role-Cmd/description
msgid ""
"MooseX::Role::Cmd is a Moose role intended to ease the task of building "
"command-line wrapper modules. It automatically maps Moose objects into "
"command strings which are passed to IPC::Cmd."
msgstr ""

#. leap/perl-MooseX-Role-Parameterized/summary
msgid "Moose roles with composition parameters"
msgstr ""

#. leap/perl-MooseX-Role-Parameterized/description
msgid ""
"Your parameterized role consists of two new things: parameter declarations "
"and a 'role' block.\n"
"\n"
"Parameters are declared using the parameter keyword which very much "
"resembles Moose/has. You can use any option that Moose/has accepts. The "
"default value for the 'is' option is 'ro' as that's a very common case. Use "
"'is => 'bare'' if you want no accessor. These parameters will get their "
"values when the consuming class (or role) uses Moose/with. A parameter "
"object will be constructed with these values, and passed to the 'role' "
"block.\n"
"\n"
"The 'role' block then uses the usual Moose::Role keywords to build up a "
"role. You can shift off the parameter object to inspect what the consuming "
"class provided as parameters. You use the parameters to customize your role "
"however you wish.\n"
"\n"
"There are many possible implementations for parameterized roles (hopefully "
"with a consistent enough API); I believe this to be the easiest and most "
"flexible design. Coincidentally, Pugs originally had an eerily similar "
"design.\n"
"\n"
"See MooseX::Role::Parameterized::Extending for some tips on how to extend "
"this module."
msgstr ""

#. leap/perl-MooseX-Role-TraitConstructor/summary
msgid "A wrapper for C<new> that can accept a"
msgstr ""

#. leap/perl-MooseX-Role-TraitConstructor/description
msgid ""
"This role allows you to easily accept a 'traits' argument (or another name) "
"into your constructor, which will easily mix roles into an anonymous class "
"before construction, much like the Moose::Meta::Attribute manpage does."
msgstr ""

#. leap/perl-MooseX-Role-WithOverloading/summary
msgid "(DEPRECATED) Roles which support overloading"
msgstr ""

#. leap/perl-MooseX-Role-WithOverloading/description
msgid ""
"MooseX::Role::WithOverloading allows you to write a the Moose::Role manpage "
"which defines overloaded operators and allows those overload methods to be "
"composed into the classes/roles/instances it's compiled to, where plain the "
"Moose::Role manpages would lose the overloading.\n"
"\n"
"Starting with the Moose manpage version 2.1300, this module is no longer "
"necessary, as the functionality is available already. In that case, 'use "
"MooseX::Role::WithOverloading' behaves identically to 'use Moose::Role'."
msgstr ""

#. leap/perl-MooseX-SemiAffordanceAccessor/summary
msgid "Name your accessors foo() and set_foo()"
msgstr ""

#. leap/perl-MooseX-SemiAffordanceAccessor/description
msgid ""
"This module does not provide any methods. Simply loading it changes the "
"default naming policy for the loading class so that accessors are separated "
"into get and set methods. The get methods have the same name as the "
"accessor, while set methods are prefixed with \"set_\".\n"
"\n"
"If you define an attribute with a leading underscore, then the set method "
"will start with \"_set_\".\n"
"\n"
"If you explicitly set a \"reader\" or \"writer\" name when creating an "
"attribute, then that attribute's naming scheme is left unchanged.\n"
"\n"
"The name \"semi-affordance\" comes from David Wheeler's Class::Meta module."
msgstr ""

#. leap/perl-MooseX-SetOnce/summary
msgid "Write-once, read-many attributes for Moose"
msgstr ""

#. leap/perl-MooseX-SetOnce/description
msgid ""
"The 'SetOnce' attribute lets your class have attributes that are not lazy "
"and not set, but that cannot be altered once set.\n"
"\n"
"The logic is very simple: if you try to alter the value of an attribute with "
"the SetOnce trait, either by accessor or writer, and the attribute has a "
"value, it will throw an exception.\n"
"\n"
"If the attribute has a clearer, you may clear the attribute and set it again."
msgstr ""

#. leap/perl-MooseX-SimpleConfig/summary
#, fuzzy
msgid "A Moose role for setting attributes from a simple configuration file"
msgstr "Un module pour lire les fichiers de configuration .ini"

#. leap/perl-MooseX-SimpleConfig/description
msgid ""
"This role loads simple files to set object attributes. It is based on the "
"abstract role the MooseX::ConfigFromFile manpage, and uses the Config::Any "
"manpage to load your configuration file. the Config::Any manpage will in "
"turn support any of a variety of different config formats, detected by the "
"file extension. See the Config::Any manpage for more details about supported "
"formats.\n"
"\n"
"To pass additional arguments to the Config::Any manpage you must provide a "
"'config_any_args()' method, for example:\n"
"\n"
"  sub config_any_args {     return {       driver_args => { General => { '-"
"InterPolateVars' => 1 } }     };   }\n"
"\n"
"Like all the MooseX::ConfigFromFile manpage -derived file loaders, this "
"module is automatically supported by the the MooseX::Getopt manpage role as "
"well, which allows specifying '-configfile' on the command line."
msgstr ""

#. leap/perl-MooseX-Singleton/summary
msgid "Turn your Moose class into a singleton"
msgstr ""

#. leap/perl-MooseX-Singleton/description
msgid ""
"A singleton is a class that has only one instance in an application. "
"'MooseX::Singleton' lets you easily upgrade (or downgrade, as it were) your "
"Moose class to a singleton.\n"
"\n"
"All you should need to do to transform your class is to change 'use Moose' "
"to 'use MooseX::Singleton'. This module uses metaclass roles to do its "
"magic, so it should cooperate with most other 'MooseX' modules."
msgstr ""

#. leap/perl-MooseX-Storage/summary
msgid "Serialization framework for Moose classes"
msgstr ""

#. leap/perl-MooseX-Storage/description
msgid ""
"MooseX::Storage is a serialization framework for Moose, it provides a very "
"flexible and highly pluggable way to serialize Moose classes to a number of "
"different formats and styles."
msgstr ""

#. leap/perl-MooseX-StrictConstructor/summary
msgid "Make your object constructors blow up on unknown attributes"
msgstr ""

#. leap/perl-MooseX-StrictConstructor/description
msgid ""
"Simply loading this module makes your constructors \"strict\". If your "
"constructor is called with an attribute init argument that your class does "
"not declare, then it calls 'Moose->throw_error()'. This is a great way to "
"catch small typos."
msgstr ""

#. leap/perl-MooseX-Traits/summary
msgid "Automatically apply roles at object creation time"
msgstr ""

#. leap/perl-MooseX-Traits/description
msgid ""
"Often you want to create components that can be added to a class "
"arbitrarily. This module makes it easy for the end user to use these "
"components. Instead of requiring the user to create a named class with the "
"desired roles applied, or apply roles to the instance one-by-one, he can "
"just create a new class from yours with 'with_traits', and then instantiate "
"that.\n"
"\n"
"There is also 'new_with_traits', which exists for compatibility reasons. It "
"accepts a 'traits' parameter, creates a new class with those traits, and "
"then instantiates it.\n"
"\n"
"   Class->new_with_traits( traits => [qw/Foo Bar/], foo => 42, bar => 1 )\n"
"\n"
"returns exactly the same object as\n"
"\n"
"   Class->with_traits(qw/Foo Bar/)->new( foo => 42, bar => 1 )\n"
"\n"
"would. But you can also store the result of 'with_traits', and call other "
"methods:\n"
"\n"
"   my $c = Class->with_traits(qw/Foo Bar/);    $c->new( foo => 42 );    $c-"
">whatever( foo => 1234 );\n"
"\n"
"And so on."
msgstr ""

#. leap/perl-MooseX-TransactionalMethods/summary
msgid "Syntax sugar for transactional methods"
msgstr ""

#. leap/perl-MooseX-TransactionalMethods/description
msgid ""
"This method exports the \"transactional\" declarator that will enclose the "
"method in a txn_do call."
msgstr ""

#. leap/perl-MooseX-Types/summary
msgid "Organise your Moose types in libraries"
msgstr ""

#. leap/perl-MooseX-Types/description
msgid ""
"The type system provided by Moose effectively makes all of its builtin type "
"global, as are any types you declare with Moose. This means that every "
"module that declares a type named 'PositiveInt' is sharing the same type "
"object. This can be a problem when different parts of the code base want to "
"use the same name for different things.\n"
"\n"
"This package lets you declare types using short names, but behind the scenes "
"it namespaces all your type declarations, effectively prevent name clashes "
"between packages.\n"
"\n"
"This is done by creating a type library module like 'MyApp::Types' and then "
"importing types from that module into other modules.\n"
"\n"
"As a side effect, the declaration mechanism allows you to write type names "
"as barewords (really function calls), which catches typos in names at "
"compile time rather than run time.\n"
"\n"
"This module also provides some helper functions for using Moose types "
"outside of attribute declarations.\n"
"\n"
"If you mix string-based names with types created by this module, it will "
"warn, with a few exceptions. If you are declaring a 'class_type()' or "
"'role_type()' within your type library, or if you use a fully qualified name "
"like '\"MyApp::Foo\"'."
msgstr ""

#. leap/perl-MooseX-Types-Common/summary
msgid "Library of Commonly Used Type Constraints"
msgstr ""

#. leap/perl-MooseX-Types-Common/description
msgid ""
"A set of commonly-used type constraints that do not ship with Moose by "
"default."
msgstr ""

#. leap/perl-MooseX-Types-DateTime/summary
msgid "L<DateTime> related constraints and coercions for Moose"
msgstr ""

#. leap/perl-MooseX-Types-DateTime/description
msgid ""
"This module packages several the Moose::Util::TypeConstraints manpage with "
"coercions, designed to work with the the DateTime manpage suite of objects.\n"
"\n"
"Namespaced Example:\n"
"\n"
"    use MooseX::Types::DateTime;\n"
"\n"
"    has time_zone => (         isa => 'DateTime::TimeZone',         is => "
"\"rw\",         coerce => 1,     );\n"
"\n"
"    Class->new( time_zone => \"Africa/Timbuktu\" );"
msgstr ""

#. leap/perl-MooseX-Types-LoadableClass/summary
msgid "ClassName type constraint with coercion to load the class"
msgstr ""

#. leap/perl-MooseX-Types-LoadableClass/description
msgid ""
"    use Moose::Util::TypeConstraints;\n"
"\n"
"    my $tc = subtype as ClassName;     coerce $tc, from Str, via { Class::"
"Load::load_class($_); $_ };\n"
"\n"
"I've written those three lines of code quite a lot of times, in quite a lot "
"of places.\n"
"\n"
"Now I don't have to."
msgstr ""

#. leap/perl-MooseX-Types-Path-Class/summary
msgid "Path::Class type library for Moose"
msgstr ""

#. leap/perl-MooseX-Types-Path-Class/description
msgid ""
"MooseX::Types::Path::Class creates common Moose types, coercions and option "
"specifications useful for dealing with Path::Class objects as Moose "
"attributes.\n"
"\n"
"Coercions (see Moose::Util::TypeConstraints) are made from both 'Str' and "
"'ArrayRef' to both Path::Class::Dir and Path::Class::File objects. If you "
"have MooseX::Getopt installed, the 'Getopt' option type (\"=s\") will be "
"added for both Path::Class::Dir and Path::Class::File."
msgstr ""

#. leap/perl-MooseX-Types-Path-Tiny/summary
msgid "Path::Tiny types and coercions for Moose"
msgstr ""

#. leap/perl-MooseX-Types-Path-Tiny/description
msgid ""
"This module provides Path::Tiny types for Moose. It handles two important "
"types of coercion:\n"
"\n"
"  * coercing objects with overloaded stringification\n"
"\n"
"  * coercing to absolute paths\n"
"\n"
"It also can check to ensure that files or directories exist."
msgstr ""

#. leap/perl-MooseX-Types-Perl/summary
msgid "Moose types that check against Perl syntax"
msgstr ""

#. leap/perl-MooseX-Types-Perl/description
msgid ""
"This library provides MooseX::Types for checking things (mostly strings) "
"against syntax that is, or is a reasonable subset of, Perl syntax."
msgstr ""

#. leap/perl-MooseX-Types-Set-Object/summary
msgid "Set::Object type with coercions and stuff"
msgstr ""

#. leap/perl-MooseX-Types-Set-Object/description
msgid ""
"This module provides a Moose type constraint (see the Moose::Util::"
"TypeConstraints manpage, the MooseX::Types manpage). Note that this "
"constraint and its coercions are *global*, not simply limited to the scope "
"that imported it -- in this way it acts like a regular the Moose manpage "
"type constraint, rather than one from the MooseX::Types manpage."
msgstr ""

#. leap/perl-MooseX-Types-Stringlike/summary
msgid "Moose type constraints for strings or string-like objects"
msgstr ""

#. leap/perl-MooseX-Types-Stringlike/description
msgid ""
"This module provides a more general version of the 'Str' type. If coercions "
"are enabled, it will accepts objects that overload stringification and "
"coerces them into strings."
msgstr ""

#. leap/perl-MooseX-Types-Structured/summary
msgid "Structured Type Constraints for Moose"
msgstr ""

#. leap/perl-MooseX-Types-Structured/description
msgid ""
"A structured type constraint is a standard container Moose type constraint, "
"such as an 'ArrayRef' or 'HashRef', which has been enhanced to allow you to "
"explicitly name all the allowed type constraints inside the structure. The "
"generalized form is:\n"
"\n"
"    TypeConstraint[@TypeParameters or %TypeParameters]\n"
"\n"
"Where 'TypeParameters' is an array reference or hash references of Moose::"
"Meta::TypeConstraint objects.\n"
"\n"
"This type library enables structured type constraints. It is built on top of "
"the MooseX::Types library system, so you should review the documentation for "
"that if you are not familiar with it."
msgstr ""

#. leap/perl-MooseX-Workers/summary
msgid "Simple sub-process management for asynchronous tasks"
msgstr ""

#. leap/perl-MooseX-Workers/description
msgid ""
"MooseX::Workers is a Role that provides easy delegation of long-running "
"tasks into a managed child process. Process management is taken care of via "
"POE and its POE::Wheel::Run module."
msgstr ""

#. leap/perl-Mouse/summary
msgid "Moose minus the antlers"
msgstr ""

#. leap/perl-Mouse/description
msgid ""
"Moose is a postmodern object system for Perl5. Moose is wonderful.\n"
"\n"
"Unfortunately, Moose has a compile-time penalty. Though significant progress "
"has been made over the years, the compile time penalty is a non-starter for "
"some very specific applications. If you are writing a command-line "
"application or CGI script where startup time is essential, you may not be "
"able to use Moose (we recommend that you instead use persistent Perl "
"executing environments like 'FastCGI' for the latter, if possible).\n"
"\n"
"Mouse is a Moose compatible object system, which aims to alleviate this "
"penalty by providing a subset of Moose's functionality.\n"
"\n"
"We're also going as light on dependencies as possible. Mouse currently has\n"
"*no dependencies* except for building/testing modules. Mouse also works "
"without XS, although it has an XS backend to make it much faster."
msgstr ""

#. leap/perl-MouseX-ConfigFromFile/summary
msgid "An abstract Mouse role for setting attributes from a configfile"
msgstr ""

#. leap/perl-MouseX-ConfigFromFile/description
msgid ""
"This is an abstract role which provides an alternate constructor for "
"creating objects using parameters passed in from a configuration file. The "
"actual implementation of reading the configuration file is left to concrete "
"subroles.\n"
"\n"
"It declares an attribute 'configfile' and a class method 'new_with_config', "
"and requires that concrete roles derived from it implement the class method "
"'get_config_from_file'.\n"
"\n"
"Attributes specified directly as arguments to 'new_with_config' supercede "
"those in the configfile."
msgstr ""

#. leap/perl-MouseX-Getopt/summary
msgid "Mouse role for processing command line options"
msgstr ""

#. leap/perl-MouseX-Getopt/description
msgid ""
"This is a role which provides an alternate constructor for creating objects "
"using parameters passed in from the command line.\n"
"\n"
"This module attempts to DWIM as much as possible with the command line "
"params by introspecting your class's attributes. It will use the name of "
"your attribute as the command line option, and if there is a type constraint "
"defined, it will configure Getopt::Long to handle the option accordingly.\n"
"\n"
"You can use the trait MouseX::Getopt::Meta::Attribute::Trait or the "
"attribute metaclass MouseX::Getopt::Meta::Attribute to get non-default "
"commandline option names and aliases.\n"
"\n"
"You can use the trait MouseX::Getopt::Meta::Attribute::Trait::NoGetopt or "
"the attribute metaclass MouseX::Getopt::Meta::Attribute::NoGetopt to have "
"'MouseX::Getopt' ignore your attribute in the commandline options.\n"
"\n"
"By default, attributes which start with an underscore are not given "
"commandline argument support, unless the attribute's metaclass is set to "
"MouseX::Getopt::Meta::Attribute. If you don't want your accessors to have "
"the leading underscore in their name, you can do this:\n"
"\n"
"     has '_foo' => (accessor => 'foo', ...);\n"
"\n"
"     has '_bar' => (reader => 'bar', ...);\n"
"\n"
"This will mean that Getopt will not handle a --foo param, but your code can "
"still call the 'foo' method.\n"
"\n"
"If your class also uses a configfile-loading role based on MouseX::"
"ConfigFromFile, such as MouseX::SimpleConfig, MouseX::Getopt's "
"'new_with_options' will load the configfile specified by the '--configfile' "
"option (or the default you've given for the configfile attribute) for you.\n"
"\n"
"Options specified in multiple places follow the following precedence order: "
"commandline overrides configfile, which overrides explicit new_with_options "
"parameters."
msgstr ""

#. leap/perl-MouseX-SimpleConfig/summary
msgid "A Mouse role for setting attributes from a simple configfile"
msgstr ""

#. leap/perl-MouseX-SimpleConfig/description
msgid ""
"This role loads simple configfiles to set object attributes. It is based on "
"the abstract role MouseX::ConfigFromFile, and uses Config::Any to load your "
"configfile. Config::Any will in turn support any of a variety of different "
"config formats, detected by the file extension. See Config::Any for more "
"details about supported formats.\n"
"\n"
"Like all MouseX::ConfigFromFile -derived configfile loaders, this module is "
"automatically supported by the MouseX::Getopt role as well, which allows "
"specifying '-configfile' on the commandline."
msgstr ""

#. leap/perl-MouseX-Types/summary
#. leap/perl-MouseX-Types/description
msgid "Organize your Mouse types in libraries"
msgstr ""

#. leap/perl-MouseX-Types-Path-Class/summary
msgid "Path::Class type library for Mouse"
msgstr ""

#. leap/perl-MouseX-Types-Path-Class/description
msgid ""
"MouseX::Types::Path::Class creates common Mouse types, coercions and option "
"specifications useful for dealing with Path::Class objects as Mouse "
"attributes.\n"
"\n"
"Coercions (see Mouse::Util::TypeConstraints) are made from both 'Str' and "
"'ArrayRef' to both Path::Class::Dir and Path::Class::File objects. If you "
"have MouseX::Getopt installed, the Getopt option type (\"=s\") will be added "
"for both Path::Class::Dir and Path::Class::File."
msgstr ""

#. leap/perl-Mozilla-LDAP/summary
msgid "LDAP module that wraps the OpenLDAP C SDK"
msgstr ""

#. leap/perl-Mozilla-LDAP/description
msgid "A perl LDAP module that wraps the OpenLDAP C SDK."
msgstr ""

#. leap/perl-MusicBrainz-DiscID/summary
#, fuzzy
msgid "Perl interface for the MusicBrainz libdiscid library"
msgstr "Interface Perl vers la bibliothèque UULib"

#. leap/perl-MusicBrainz-DiscID/description
msgid ""
"MusicBrainz::DiscID is a class to calculate a MusicBrainz DiscID from an "
"audio CD in the drive."
msgstr ""

#. leap/perl-Nagios-Plugin/summary
msgid "A family of perl modules to streamline writing Nagios plugins"
msgstr ""

#. leap/perl-Nagios-Plugin/description
msgid ""
"Nagios::Plugin and its associated Nagios::Plugin::* modules are a family of "
"perl modules to streamline writing Nagios plugins. The main end user modules "
"are Nagios::Plugin, providing an object-oriented interface to the entire "
"Nagios::Plugin::* collection, and Nagios::Plugin::Functions, providing a "
"simpler functional interface to a useful subset of the available "
"functionality.\n"
"\n"
"The purpose of the collection is to make it as simple as possible for "
"developers to create plugins that conform the Nagios Plugin guidelines "
"(http://nagiosplug.sourceforge.net/developer-guidelines.html)."
msgstr ""

#. leap/perl-Net-AMQP/summary
msgid "Advanced Message Queue Protocol (de)serialization and representation"
msgstr ""

#. leap/perl-Net-AMQP/description
msgid ""
"This module implements the frame (de)serialization and representation of the "
"Advanced Message Queue Protocol (http://www.amqp.org/). It is to be used in "
"conjunction with client or server software that does the actual TCP/IP "
"communication."
msgstr ""

#. leap/perl-Net-CIDR/summary
msgid "Manipulate IPv4/IPv6 netblocks in CIDR notation"
msgstr ""

#. leap/perl-Net-CIDR/description
msgid ""
"The Net::CIDR package contains functions that manipulate lists of IP "
"netblocks expressed in CIDR notation. The Net::CIDR functions handle both "
"IPv4 and IPv6 addresses.\n"
"\n"
"The cidrvalidate() function, described below, checks that its argument is a "
"single, valid IP address or a CIDR. The remaining functions expect that "
"their parameters consist of validated IPs or CIDRs. See cidrvalidate() and "
"BUGS, below, for more information."
msgstr ""

#. leap/perl-Net-CIDR-Lite/summary
#, fuzzy
msgid "Perl extension for merging IPv4 or IPv6 CIDR addresses"
msgstr "Interface Perl pour objets URI"

#. leap/perl-Net-CIDR-Lite/description
msgid ""
"Faster alternative to Net::CIDR when merging a large number of CIDR address "
"ranges. Works for IPv4 and IPv6 addresses.\n"
"\n"
" Authors:\n"
"--------     Douglas Wilson <dougw@cpan.org>"
msgstr ""

#. leap/perl-Net-CIDR-Set/summary
msgid "Manipulate sets of IP addresses"
msgstr ""

#. leap/perl-Net-CIDR-Set/description
msgid ""
"'Net::CIDR::Set' represents sets of IP addresses and allows standard set "
"operations (union, intersection, membership test etc) to be performed on "
"them.\n"
"\n"
"In spite of the name it can work with sets consisting of arbitrary ranges of "
"IP addresses - not just CIDR blocks.\n"
"\n"
"Both IPv4 and IPv6 addresses are handled - but they may not be mixed in the "
"same set. You may explicitly set the personality of a set:\n"
"\n"
"  my $ip4set = Net::CIDR::Set->new({ type => 'ipv4 }, '10.0.0.0/8');\n"
"\n"
"Normally this isn't necessary - the set will guess its personality from the "
"first data that is added to it."
msgstr ""

#. leap/perl-Net-DBus/summary
msgid "Perl extension for the DBus message system"
msgstr ""

#. leap/perl-Net-DBus/description
msgid ""
"Net::DBus provides a Perl API for the DBus message system. The DBus Perl "
"interface is currently operating against the 0.32 development version of "
"DBus, but should work with later versions too, providing the API changes "
"have not been too drastic.\n"
"\n"
"Users of this package are either typically, service providers in which case "
"the the Net::DBus::Service manpage and the Net::DBus::Object manpage modules "
"are of most relevance, or are client consumers, in which case the Net::DBus::"
"RemoteService manpage and the Net::DBus::RemoteObject manpage are of most "
"relevance."
msgstr ""

#. leap/perl-Net-DNS/summary
msgid "Perl Interface to the Domain Name System"
msgstr ""

#. leap/perl-Net-DNS/description
msgid ""
"Net::DNS is a collection of Perl modules that act as a Domain Name System "
"(DNS) resolver. It allows the programmer to perform DNS queries that are "
"beyond the capabilities of \"gethostbyname\" and \"gethostbyaddr\".\n"
"\n"
"The programmer should be somewhat familiar with the format of a DNS packet "
"and its various sections. See RFC 1035 or DNS and BIND (Albitz & Liu) for "
"details."
msgstr ""

#. leap/perl-Net-DNS-Resolver-Mock/summary
msgid "Mock a DNS Resolver object for testing"
msgstr ""

#. leap/perl-Net-DNS-Resolver-Mock/description
msgid ""
"A subclass of Net::DNS::Resolver which parses a zonefile for it's data "
"source. Primarily for use in testing."
msgstr ""

#. leap/perl-Net-DNS-Resolver-Programmable/summary
msgid "Programmable Dns Resolver Class for Offline"
msgstr ""

#. leap/perl-Net-DNS-Resolver-Programmable/description
msgid ""
"*Net::DNS::Resolver::Programmable* is a *Net::DNS::Resolver* descendant "
"class that allows a virtual DNS to be emulated instead of querying the real "
"DNS. A set of static DNS records may be supplied, or arbitrary code may be "
"specified as a means for retrieving DNS records, or even generating them on "
"the fly."
msgstr ""

#. leap/perl-Net-Daemon/summary
#, fuzzy
msgid "Perl extension for portable daemons"
msgstr "Interface Perl pour objets URI"

#. leap/perl-Net-Daemon/description
msgid ""
"Net::Daemon is an abstract base class for implementing portable server "
"applications in a very simple way. The module is designed for Perl 5.005 and "
"threads, but can work with fork() and Perl 5.004.\n"
"\n"
"The Net::Daemon class offers methods for the most common tasks a daemon "
"needs: Starting up, logging, accepting clients, authorization, restricting "
"its own environment for security and doing the true work. You only have to "
"override those methods that aren't appropriate for you, but typically "
"inheriting will safe you a lot of work anyways."
msgstr ""

#. leap/perl-Net-Domain-TLD/summary
msgid "Work with TLD names"
msgstr ""

#. leap/perl-Net-Domain-TLD/description
msgid ""
"  The purpose of this module is to provide user with current list of   "
"available top level domain names including new ICANN additions and ccTLDs   "
"Currently TLD definitions have been acquired from the following sources:\n"
"\n"
"  http://www.icann.org/tlds/   http://www.dnso.org/constituency/gtld/gtld."
"html   http://www.iana.org/cctld/cctld-whois.htm   https://www.iana.org/"
"domains/root/db"
msgstr ""

#. leap/perl-Net-Dropbox-API/summary
#. leap/perl-Net-Dropbox-API/description
msgid "A dropbox API interface"
msgstr ""

#. leap/perl-Net-HTTP/summary
msgid "Low-level HTTP connection (client)"
msgstr ""

#. leap/perl-Net-HTTP/description
msgid ""
"The 'Net::HTTP' class is a low-level HTTP client. An instance of the 'Net::"
"HTTP' class represents a connection to an HTTP server. The HTTP protocol is "
"described in RFC 2616. The 'Net::HTTP' class supports 'HTTP/1.0' and "
"'HTTP/1.1'.\n"
"\n"
"'Net::HTTP' is a sub-class of one of 'IO::Socket::IP' (IPv6+IPv4), 'IO::"
"Socket::INET6' (IPv6+IPv4), or 'IO::Socket::INET' (IPv4 only). You can mix "
"the methods described below with reading and writing from the socket "
"directly. This is not necessary a good idea, unless you know what you are "
"doing."
msgstr ""

#. leap/perl-Net-HTTPServer/summary
#, fuzzy
msgid "A simple perl Http Server"
msgstr "Serveur Web simple"

#. leap/perl-Net-HTTPServer/description
msgid ""
"Net::HTTPServer basically turns a CGI script into a stand alone server. "
"Useful for temporary services, mobile/local servers, or embedding an HTTP "
"server into another program."
msgstr ""

#. leap/perl-Net-IDN-Encode/summary
msgid "Internationalizing Domain Names in Applications (IDNA)"
msgstr ""

#. leap/perl-Net-IDN-Encode/description
msgid ""
"This module provides an easy-to-use interface for encoding and decoding "
"Internationalized Domain Names (IDNs).\n"
"\n"
"IDNs use characters drawn from a large repertoire (Unicode), but IDNA allows "
"the non-ASCII characters to be represented using only the ASCII characters "
"already allowed in so-called host names today (letter-digit-hyphen, '/[A-"
"Z0-9-]/i').\n"
"\n"
"Use this module if you just want to convert domain names (or email "
"addresses), using whatever IDNA standard is the best choice at the moment.\n"
"\n"
"You should be familiar with Unicode support in perl, as this module expects "
"correctly encoded input. See perlunitut, perluniintro and perlunicode for "
"details."
msgstr ""

#. leap/perl-Net-IDN-Nameprep/summary
msgid "Stringprep Profile for Internationalized Domain Names (RFC 3491)"
msgstr ""

#. leap/perl-Net-IDN-Nameprep/description
msgid ""
"This module implements the _nameprep_ specification, which describes how to "
"prepare internationalized domain name (IDN) labels in order to increase the "
"likelihood that name input and name comparison work in ways that make sense "
"for typical users throughout the world. Nameprep is a profile of the "
"stringprep protocol and is used as part of a suite of on-the-wire protocols "
"for internationalizing the Domain Name System (DNS)."
msgstr ""

#. leap/perl-Net-INET6Glue/summary
msgid "Make common modules IPv6 ready by hotpatching"
msgstr ""

#. leap/perl-Net-INET6Glue/description
msgid ""
"the Net::INET6Glue manpage is a collection of modules to make common modules "
"IPv6 ready by hotpatching them.\n"
"\n"
"Unfortunatly the current state of IPv6 support in perl is that no IPv6 "
"support is in the core and that a lot of important modules (like the Net::"
"FTP manpage, the Net::SMTP manpage, the LWP manpage,...) do not support IPv6 "
"even if the modules for IPv6 sockets like the Socket6 manpage, the IO::"
"Socket::IP manpage or the IO::Socket::INET6 manpage are available.\n"
"\n"
"This module tries to mitigate this by hotpatching. Currently the following "
"submodules are available: \n"
"* the Net::INET6Glue::INET_is_INET6 manpage\n"
"\n"
"  Makes the IO::Socket::INET manpage behave like the IO::Socket::IP "
"manpage   (with fallback to like the IO::Socket::INET6 manpage), especially "
"make it   capable to create IPv6 sockets. This makes the LWP manpage, the "
"Net::SMTP   manpage and others IPv6 capable. \n"
"* the Net::INET6Glue::FTP manpage\n"
"\n"
"  Hotpatches the Net::FTP manpage to support EPRT and EPSV commands which   "
"are needed to deal with FTP over IPv6. Also loads the   Net::INET6Glue::"
"INET_is_INET6 manpage."
msgstr ""

#. leap/perl-Net-IP/summary
msgid "Allows easy manipulation of IPv4 and IPv6 addresses"
msgstr ""

#. leap/perl-Net-IP/description
msgid ""
"This is the Net::IP module, designed to allow easy manipulation of IPv4 and "
"IPv6 addresses."
msgstr ""

#. leap/perl-Net-IPv4Addr/summary
#, fuzzy
msgid "Net::IPv4Addr Module for Perl"
msgstr "Perl Qt - Utiliser Qt sous Perl"

#. leap/perl-Net-IPv4Addr/description
msgid ""
"Net::IPv4Addr provides functions for parsing IPv4 addresses both in "
"traditional address/netmask format and in the new CIDR format. There are "
"also methods for calculating the network and broadcast address and also to "
"see check if a given address is in a specific network.\n"
"\n"
"Authors:\n"
"--------     Francis J. Lacoste <francis.lacoste@iNsu.COM>"
msgstr ""

#. leap/perl-Net-Ident/summary
msgid "lookup the username on the remote end of a TCP/IP connection"
msgstr ""

#. leap/perl-Net-Ident/description
msgid ""
"You can either use the simple interface, which does one ident lookup at a "
"time, or use the asynchronous interface to perform (possibly) many "
"simultaneous lookups, or simply continue serving other things while the "
"lookup is proceeding."
msgstr ""

#. leap/perl-Net-Jabber/summary
#, fuzzy
msgid "Jabber Perl Library"
msgstr "La libtermcap"

#. leap/perl-Net-Jabber/description
msgid ""
"Net::Jabber is a convenient tool to use for any perl script that would like "
"to utilize the Jabber Instant Messaging protocol. While not a client in and "
"of itself, it provides all of the necessary back-end functions to make a CGI "
"client or command-line perl client feasible and easy to use. Net::Jabber is "
"a wrapper around the rest of the official Net::Jabber::xxxxxx packages.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Ryan Eatmon <reatmon@ti.com>"
msgstr ""

#. leap/perl-Net-LibIDN/summary
#, fuzzy
msgid "Net::LibIDN Perl module"
msgstr "Net::SNMP Perl Module"

#. leap/perl-Net-LibIDN/description
msgid ""
"This module provides Perl bindings for GNU Libidn by Simon Josefsson (http://"
"www.gnu.org/software/libidn/) in way that was heavily inspired by PHP "
"bindings for the same library done by Turbo Fredriksson (http://php- idn."
"bayour.com/).\n"
"\n"
"Authors:\n"
"--------     Thomas Jacob, http://internet24.de"
msgstr ""

#. leap/perl-Net-Netmask/summary
#, fuzzy
msgid "Parse, Manipulate and Lookup Ip Network Blocks"
msgstr "Analyse, manipulation et vérification de blocs IP"

#. leap/perl-Net-Netmask/description
msgid ""
"Net::Netmask parses and understands IPv4 CIDR blocks. It's built with an "
"object-oriented interface. Nearly all functions are methods that operate on "
"a Net::Netmask object.\n"
"\n"
"There are methods that provide the nearly all bits of information about a "
"network block that you might want.\n"
"\n"
"There are also functions to put a network block into a table and then later "
"lookup network blocks by IP address in that table. There are functions to "
"turn a IP address range into a list of CIDR blocks. There are functions to "
"turn a list of CIDR blocks into a list of IP addresses.\n"
"\n"
"There is a function for sorting by text IP address."
msgstr ""

#. leap/perl-Net-OAuth/summary
#. leap/perl-Net-OAuth/description
msgid "OAuth 1.0 for Perl"
msgstr ""

#. leap/perl-Net-OpenID-Common/summary
msgid "Libraries shared between Net::OpenID::Consumer and Net::OpenID::Server"
msgstr ""

#. leap/perl-Net-OpenID-Common/description
msgid ""
"The Consumer and Server implementations share a few libraries which live "
"with this module. This module is here largely to hold the version number and "
"this documentation, though it also incorporates some utility functions "
"inherited from previous versions of Net::OpenID::Consumer."
msgstr ""

#. leap/perl-Net-OpenID-Consumer/summary
#, fuzzy
msgid "Library for consumers of OpenID identities"
msgstr "Outils OpenCT pour les lecteurs de Smart Card"

#. leap/perl-Net-OpenID-Consumer/description
msgid ""
"This is the Perl API for (the consumer half of) OpenID, a distributed "
"identity system based on proving you own a URL, which is then your identity. "
"More information is available at:\n"
"\n"
"  http://openid.net/"
msgstr ""

#. leap/perl-Net-OpenStack-Compute/summary
#, fuzzy
msgid "Bindings for the OpenStack Compute API"
msgstr "Interface Perl vers la bibliothèque UULib"

#. leap/perl-Net-OpenStack-Compute/description
msgid ""
"This class is an interface to the OpenStack Compute API. Also see the the "
"oscompute manpage command line tool."
msgstr ""

#. leap/perl-Net-Patricia/summary
msgid "Patricia Trie perl module for fast IP address lookups"
msgstr ""

#. leap/perl-Net-Patricia/description
msgid ""
"This module uses a Patricia Trie data structure to quickly perform IP "
"address prefix matching for applications such as IP subnet, network or "
"routing table lookups. The data structure is based on a radix tree using a "
"radix of two, so sometimes you see patricia implementations called \"radix\" "
"as well. The term \"Trie\" is derived from the word \"retrieval\" but is "
"pronounced like \"try\". Patricia stands for \"Practical Algorithm to "
"Retrieve Information Coded as Alphanumeric\", and was first suggested for "
"routing table lookups by Van Jacobsen. Patricia Trie performance "
"characteristics are well-known as it has been employed for routing table "
"lookups within the BSD kernel since the 4.3 Reno release.\n"
"\n"
"The BSD radix code is thoroughly described in \"TCP/IP Illustrated, Volume "
"2\" by Wright and Stevens and in the paper ``A Tree-Based Packet Routing "
"Table for Berkeley Unix'' by Keith Sklower."
msgstr ""

#. leap/perl-Net-Pcap/summary
msgid "Interface to pcap LBL packet capture library"
msgstr ""

#. leap/perl-Net-Pcap/description
msgid ""
"Net::Pcap is a Perl binding to the LBL pcap(3) library. The README for "
"libpcap describes itself as: \"a system-independent interface for user-level "
"packet capture.  libpcap provides a portable framework for low-level network "
"monitoring.  Applications include network statistics collection, security "
"monitoring, network debugging, etc.\""
msgstr ""

#. leap/perl-Net-SMTP-SSL/summary
#, fuzzy
msgid "SSL support for Net::SMTP"
msgstr "Support de ASM pour bsh2."

#. leap/perl-Net-SMTP-SSL/description
msgid ""
"Implements the same API as Net::SMTP, but uses IO::Socket::SSL for its "
"network operations. Due to the nature of 'Net::SMTP''s 'new' method, it is "
"not overridden to make use of a default port for the SMTPS service. Perhaps "
"future versions will be smart like that. Port '465' is usually what you "
"want, and it's not a pain to specify that.\n"
"\n"
"For interface documentation, please see Net::SMTP."
msgstr ""

#. leap/perl-Net-SNMP/summary
msgid "Object oriented interface to SNMP"
msgstr ""

#. leap/perl-Net-SNMP/description
msgid ""
"The Net::SNMP module abstracts the intricate details of the Simple Network "
"Management Protocol by providing a high level programming interface to the "
"protocol. Each Net::SNMP object provides a one-to-one mapping between a Perl "
"object and a remote SNMP agent or manager. Once an object is created, it can "
"be used to perform the basic protocol exchange actions defined by SNMP.\n"
"\n"
"Authors:\n"
"--------     David M. Town <dtown@fore.com>"
msgstr ""

#. leap/perl-Net-SSH2/summary
#, fuzzy
msgid "Support for the SSH 2 protocol via libssh2"
msgstr "Aucun support pour bigcrypt inclus"

#. leap/perl-Net-SSH2/description
msgid ""
"Net::SSH2 is a Perl interface to the libssh2 (http://www.libssh2.org) "
"library. It supports the SSH2 protocol (there is no support for SSH1) with "
"all of the key exchanges, ciphers, and compression of libssh2.\n"
"\n"
"Even if the module can be compiled and linked against very old versions of "
"the library, nothing below 1.5.0 should really be used (older versions were "
"quite buggy and unreliable) and version 1.7.0 or later is recommended."
msgstr ""

#. leap/perl-Net-SSLGlue/summary
msgid "Add/Extend Ssl Support for Common Perl Modules"
msgstr ""

#. leap/perl-Net-SSLGlue/description
msgid ""
"Some commonly used perl modules don't have SSL support at all, even if the "
"protocol supports it. Others have SSL support, but most of them don't do "
"proper checking of the server's certificate.\n"
"\n"
"The 'Net::SSLGlue::*' modules try to add SSL support or proper certificate "
"checking to these modules. Currently support for the following modules is "
"available: \n"
"* Net::SMTP - add SSL from beginning or using STARTTLS \n"
"* Net::POP3 - add SSL from beginning or using STLS \n"
"* Net::FTP  - add SSL and IPv6 support to Net::FTP \n"
"* Net::LDAP - add proper certificate checking \n"
"* LWP - add proper certificate checking for older LWP versions\n"
"\n"
"There is also a Net::SSLGlue::Socket package which combines ssl and non-ssl "
"and ipv6 capabilities to make it easier to enhance modules based on IO::"
"Socket::INET."
msgstr ""

#. leap/perl-Net-SSLeay/summary
msgid "Perl extension for using OpenSSL"
msgstr ""

#. leap/perl-Net-SSLeay/description
msgid ""
"Net::SSLeay module contains perl bindings to openssl (http://www.openssl."
"org) library. Net::SSLeay module basically comprise of:     High level "
"functions for accessing web servers (by using HTTP/HTTPS)     Low level API "
"(mostly mapped 1:1 to openssl's C functions)     Convenience functions "
"(related to low level API but with more perl friendly interface)"
msgstr ""

#. leap/perl-Net-Server/summary
msgid "Extensible, general Perl server engine"
msgstr ""

#. leap/perl-Net-Server/description
msgid ""
"'Net::Server' is an extensible, generic Perl server engine.\n"
"\n"
"'Net::Server' attempts to be a generic server as in 'Net::Daemon' and "
"'NetServer::Generic'. It includes with it the ability to run as an inetd "
"process ('Net::Server::INET'), a single connection server ('Net::Server' or "
"'Net::Server::Single'), a forking server ('Net::Server::Fork'), a preforking "
"server which maintains a constant number of preforked children ('Net::"
"Server::PreForkSimple'), or as a managed preforking server which maintains "
"the number of children based on server load ('Net::Server::PreFork'). In all "
"but the inetd type, the server provides the ability to connect to one or to "
"multiple server ports.\n"
"\n"
"The additional server types are made possible via \"personalities\" or sub "
"classes of the 'Net::Server'. By moving the multiple types of servers out of "
"the main 'Net::Server' class, the 'Net::Server' concept is easily extended "
"to other types (in the near future, we would like to add a \"Thread\" "
"personality).\n"
"\n"
"'Net::Server' borrows several concepts from the Apache Webserver. 'Net::"
"Server' uses \"hooks\" to allow custom servers such as SMTP, HTTP, POP3, "
"etc. to be layered over the base 'Net::Server' class. In addition the 'Net::"
"Server::PreFork' class borrows concepts of min_start_servers, max_servers, "
"and min_waiting servers. 'Net::Server::PreFork' also uses the concept of an "
"flock serialized accept when accepting on multiple ports (PreFork can choose "
"between flock, IPC::Semaphore, and pipe to control serialization)."
msgstr ""

#. leap/perl-Net-TFTP/summary
msgid "TFTP Client class"
msgstr ""

#. leap/perl-Net-TFTP/description
msgid ""
"'Net::TFTP' is a class implementing a simple _Trivial File Transfer "
"Protocol_ client in Perl as described in RFC1350. 'Net::TFTP' also supports "
"the TFTP Option Extension (as described in RFC2347), with the following "
"options\n"
"\n"
" RFC2348 Blocksize Option"
msgstr ""

#. leap/perl-Net-Telnet/summary
msgid "interact with TELNET port or other TCP ports"
msgstr ""

#. leap/perl-Net-Telnet/description
msgid ""
"Net::Telnet allows you to make client connections to a TCP port and do "
"network I/O, especially to a port using the TELNET protocol. Simple I/O "
"methods such as print, get, and getline are provided. More sophisticated "
"interactive features are provided because connecting to a TELNET port "
"ultimately means communicating with a program designed for human "
"interaction. These interactive features include the ability to specify a "
"time-out and to wait for patterns to appear in the input stream, such as the "
"prompt from a shell. IPv6 support is available when using perl 5.14 or later "
"(see 'family()'.\n"
"\n"
"Other reasons to use this module than strictly with a TELNET port are: \n"
"* *\n"
"\n"
"  You're not familiar with sockets and you want a simple way to make "
"client   connections to TCP services. \n"
"* *\n"
"\n"
"  You want to be able to specify your own time-out while connecting,   "
"reading, or writing. \n"
"* *\n"
"\n"
"  You're communicating with an interactive program at the other end of "
"some   socket or pipe and you want to wait for certain patterns to appear.\n"
"\n"
"Here's an example that prints who's logged-on to a remote host. In addition "
"to a username and password, you must also know the user's shell prompt, "
"which for this example is '\"bash$ \"'\n"
"\n"
"    use Net::Telnet ();     $t = new Net::Telnet (Timeout => "
"10,                           Prompt => '/bash\\$ $/');     $t-"
">open($host);     $t->login($username, $passwd);     @lines = $t->cmd(\"who"
"\");     print @lines;\n"
"\n"
"See the *EXAMPLES* section below for more examples.\n"
"\n"
"Usage questions should be directed to the perlmonks.org discussion group. "
"Bugs can be viewed or reported at cpan.org on the Net::Telnet page."
msgstr ""

#. leap/perl-Net-Twitter/summary
#, fuzzy
msgid "Perl Interface to the Twitter Api"
msgstr "Interface Perl vers DNS Resolver"

#. leap/perl-Net-Twitter/description
msgid ""
"This module has been superseded by Twitter::API. Please update as soon as "
"you possibly can to use new features and the new API versions. This module "
"will no longer be supported.\n"
"\n"
"This module provides a perl interface to the Twitter APIs. See http://dev."
"twitter.com/docs for a full description of the Twitter APIs."
msgstr ""

#. leap/perl-Net-Whois-RIPE/summary
#, fuzzy
msgid "Pure-Perl implementation of the RIPE Database client"
msgstr "Implémentation du démon d'identification RFC1413"

#. leap/perl-Net-Whois-RIPE/description
#, fuzzy
msgid "a pure-Perl implementation of the RIPE Database client."
msgstr "Implémentation du démon d'identification RFC1413"

#. leap/perl-Net-Whois-Raw/summary
msgid "Get Whois information of domains and IP addresses"
msgstr ""

#. leap/perl-Net-Whois-Raw/description
msgid ""
"Net::Whois::Raw queries WHOIS servers about domains. The module supports "
"recursive WHOIS queries. Also queries via HTTP is supported for some TLDs.\n"
"\n"
"Setting the variables $OMIT_MSG and $CHECK_FAIL will match the results "
"against a set of known patterns. The first flag will try to omit the "
"copyright message/disclaimer, the second will attempt to determine if the "
"search failed and return undef in such a case. \n"
"*IMPORTANT*: these checks merely use pattern matching; they will work on "
"several servers but certainly not on all of them."
msgstr ""

#. leap/perl-Net-XMPP/summary
#, fuzzy
msgid "XMPP Perl Library"
msgstr "La libtermcap"

#. leap/perl-Net-XMPP/description
msgid ""
"Net::XMPP is a convenient tool to use for any perl script that would like to "
"utilize the XMPP Instant Messaging protocol. While not a client in and of "
"itself, it provides all of the necessary back-end functions to make a CGI "
"client or command-line perl client feasible and easy to use. Net::XMPP is a "
"wrapper around the rest of the official Net::XMPP::xxxxxx packages.\n"
"\n"
"There is are example scripts in the example directory that provide you with "
"examples of very simple XMPP programs.\n"
"\n"
"NOTE: The parser that the XML::Stream::Parser manpage provides, as are most "
"Perl parsers, is synchronous. If you are in the middle of parsing a packet "
"and call a user defined callback, the Parser is blocked until your callback "
"finishes. This means you cannot be operating on a packet, send out another "
"packet and wait for a response to that packet. It will never get to you. "
"Threading might solve this, but as of this writing threading in Perl is not "
"quite up to par yet. This issue will be revisted in the future."
msgstr ""

#. leap/perl-NetAddr-IP/summary
msgid "Manages IPv4 and IPv6 addresses and subnets"
msgstr ""

#. leap/perl-NetAddr-IP/description
msgid ""
"This module provides an object-oriented abstraction on top of IP addresses "
"or IP subnets that allows for easy manipulations. Version 4.xx of NetAddr::"
"IP will work with older versions of Perl and is compatible with Math::"
"BigInt.\n"
"\n"
"The internal representation of all IP objects is in 128 bit IPv6 notation. "
"IPv4 and IPv6 objects may be freely mixed."
msgstr ""

#. leap/perl-NetPacket/summary
msgid "Assemble/disassemble network packets at the protocol level"
msgstr ""

#. leap/perl-NetPacket/description
msgid ""
"'NetPacket' provides a base class for a cluster of modules related to "
"decoding and encoding of network protocols. Each 'NetPacket' descendent "
"module knows how to encode and decode packets for the network protocol it "
"implements. Consult the documentation for the module in question for "
"protocol-specific implementation.\n"
"\n"
"Note that there is no inheritance in the 'NetPacket::' cluster of modules "
"other than each protocol module being a 'NetPacket'. This was seen to be too "
"restrictive as imposing inheritance relationships (for example between the "
"IP, UDP and TCP protocols) would make things like tunneling or other unusual "
"situations difficult."
msgstr ""

#. leap/perl-NetxAP/summary
#, fuzzy
msgid "Interface to the protocol family IMAP, IMSP, ACAP, and ICAP"
msgstr "Interface à la famille de protocoles IMAP, IMSP, ACAP, et ICAP"

#. leap/perl-NetxAP/description
msgid ""
"This module provides an interface to the protocol family represented by "
"IMAP, IMSP, ACAP, and ICAP.  A usable IMAP module is also provide."
msgstr ""

#. leap/perl-Number-Compare/summary
msgid "Numeric comparisons"
msgstr ""

#. leap/perl-Number-Compare/description
msgid ""
"Number::Compare compiles a simple comparison to an anonymous subroutine, "
"which you can call with a value to be tested again.\n"
"\n"
"Now this would be very pointless, if Number::Compare didn't understand "
"magnitudes.\n"
"\n"
"The target value may use magnitudes of kilobytes ('k', 'ki'), megabytes "
"('m', 'mi'), or gigabytes ('g', 'gi'). Those suffixed with an 'i' use the "
"appropriate 2**n version in accordance with the IEC standard: http://physics."
"nist.gov/cuu/Units/binary.html"
msgstr ""

#. leap/perl-Number-Format/summary
#, fuzzy
msgid "Perl extension for formatting numbers"
msgstr "Interface Perl pour objets URI"

#. leap/perl-Number-Format/description
msgid ""
"These functions provide an easy means of formatting numbers in a manner "
"suitable for displaying to the user.\n"
"\n"
"There are two ways to use this package. One is to declare an object of type "
"Number::Format, which you can think of as a formatting engine. The various "
"functions defined here are provided as object methods. The constructor "
"'new()' can be used to set the parameters of the formatting engine. Valid "
"parameters are:\n"
"\n"
"  THOUSANDS_SEP     - character inserted between groups of 3 digits   "
"DECIMAL_POINT     - character separating integer and fractional parts   "
"MON_THOUSANDS_SEP - like THOUSANDS_SEP, but used for format_price   "
"MON_DECIMAL_POINT - like DECIMAL_POINT, but used for format_price   "
"INT_CURR_SYMBOL   - character(s) denoting currency (see format_price())   "
"DECIMAL_DIGITS    - number of digits to the right of dec point (def 2)   "
"DECIMAL_FILL      - boolean; whether to add zeroes to fill out decimal   "
"NEG_FORMAT        - format to display negative numbers (def ``-x'')   "
"KILO_SUFFIX       - suffix to add when format_bytes formats kilobytes "
"(trad)   MEGA_SUFFIX       -    \"    \"  \"    \"        \"         \"    "
"megabytes (trad)   GIGA_SUFFIX       -    \"    \"  \"    \"        "
"\"         \"    gigabytes (trad)   KIBI_SUFFIX       - suffix to add when "
"format_bytes formats kibibytes (iec)   MEBI_SUFFIX       -    \"    \"  "
"\"    \"        \"         \"    mebibytes (iec)   GIBI_SUFFIX       -    "
"\"    \"  \"    \"        \"         \"    gibibytes (iec)\n"
"\n"
"They may be specified in upper or lower case, with or without a leading "
"hyphen ( - )."
msgstr ""

#. leap/perl-Number-WithError/summary
msgid "Numbers with error propagation and scientific rounding"
msgstr ""

#. leap/perl-Number-WithError/description
msgid ""
"This class is a container class for numbers with a number of associated "
"symmetric and asymmetric errors. It overloads practically all common "
"arithmetic operations and trigonometric functions to propagate the errors. "
"It can do proper scientific rounding (as explained in more detail below in "
"the documentation of the 'significant_digit()' method).\n"
"\n"
"You can use Math::BigFloat objects as the internal representation of numbers "
"in order to support arbitrary precision calculations.\n"
"\n"
"Errors are propagated using Gaussian error propagation.\n"
"\n"
"With a notable exception, the test suite covers way over ninety percent of "
"the code. The remaining holes are mostly difficult-to-test corner cases and "
"sanity tests. The comparison routines are the exception for which there will "
"be more extensive tests in a future release."
msgstr ""

#. leap/perl-OLE-Storage_Lite/summary
msgid "Simple Class for OLE document interface."
msgstr ""

#. leap/perl-OLE-Storage_Lite/description
msgid ""
"OLE::Storage_Lite allows you to read and write an OLE structured file.\n"
"\n"
"OLE::Storage_Lite::PPS is a class representing PPS. OLE::Storage_Lite::PPS::"
"Root, OLE::Storage_Lite::PPS::File and OLE::Storage_Lite::PPS::Dir are "
"subclasses of OLE::Storage_Lite::PPS."
msgstr ""

#. leap/perl-Object-Pluggable/summary
msgid "Base Class for Creating Plugin-Enabled Objects"
msgstr ""

#. leap/perl-Object-Pluggable/description
msgid ""
"Object::Pluggable is a base class for creating plugin enabled objects. It is "
"a generic port of POE::Component::IRC's plugin system.\n"
"\n"
"If your object dispatches events to listeners, then Object::Pluggable may be "
"a good fit for you.\n"
"\n"
"Basic use would involve subclassing Object::Pluggable, then overriding "
"'_pluggable_event()' and inserting '_pluggable_process()' wherever you "
"dispatch events from.\n"
"\n"
"Users of your object can then load plugins using the plugin methods provided "
"to handle events generated by the object.\n"
"\n"
"You may also use plugin style handlers within your object as "
"'_pluggable_process()' will attempt to process any events with local method "
"calls first. The return value of these handlers has the same significance as "
"the return value of 'normal' plugin handlers."
msgstr ""

#. leap/perl-Object-Signature/summary
msgid "Generate cryptographic signatures for objects"
msgstr ""

#. leap/perl-Object-Signature/description
msgid ""
"Object::Signature is an abstract base class that you can inherit from in "
"order to allow your objects to generate unique cryptographic signatures.\n"
"\n"
"The method used to generate the signature is based on Storable and Digest::"
"MD5. The object is fed to 'Storable::nfreeze' to get a string, which is then "
"passed to Digest::MD5::md5_hex to get a unique 32 character hexadecimal "
"signature."
msgstr ""

#. leap/perl-OpenGL/summary
#. leap/perl-OpenGL/description
#, fuzzy
msgid "Perl bindings to the OpenGL API, GLU, and GLUT/FreeGLUT"
msgstr "Interface Perl vers DNS Resolver"

#. leap/perl-PAR/summary
#, fuzzy
msgid "Perl Archive Toolkit"
msgstr "Outil d'archivage pour KDE"

#. leap/perl-PAR/description
msgid ""
"This module lets you use special zip files, called *P*erl *Ar*chives, as "
"libraries from which Perl modules can be loaded.\n"
"\n"
"It supports loading XS modules by overriding *DynaLoader* bootstrapping "
"methods; it writes shared object file to a temporary file at the time it is "
"needed.\n"
"\n"
"A _.par_ file is mostly a zip of the _blib/_ directory after the build "
"process of a CPAN distribution. To generate a _.par_ file yourself, all you "
"have to do is compress the modules under _arch/_ and _lib/_, e.g.:\n"
"\n"
"    % perl Makefile.PL     % make     % cd blib     % zip -r mymodule.par "
"arch/ lib/\n"
"\n"
"Afterward, you can just use _mymodule.par_ anywhere in your '@INC', use\n"
"*PAR*, and it will Just Work. Support for generating _.par_ files is going "
"to be in the next (beyond 0.2805) release of Module::Build.\n"
"\n"
"For convenience, you can set the 'PERL5OPT' environment variable to '-MPAR' "
"to enable 'PAR' processing globally (the overhead is small if not used); "
"setting it to '-MPAR=/path/to/mylib.par' will load a specific PAR file. "
"Alternatively, consider using the _par.pl_ utility bundled with the PAR::"
"Packer distribution, or using the self-contained _parl_ utility which is "
"also distributed with PAR::Packer on machines without PAR.pm installed.\n"
"\n"
"Note that self-containing scripts and executables created with _par.pl_ and "
"_pp_ may also be used as _.par_ archives:\n"
"\n"
"    % pp -o packed.exe source.pl        # generate packed.exe (see PAR::"
"Packer)     % perl -MPAR=packed.exe other.pl    # this also works     % perl "
"-MPAR -Ipacked.exe other.pl  # ditto\n"
"\n"
"Please see SYNOPSIS for most typical use cases."
msgstr ""

#. leap/perl-PAR-Dist/summary
#, fuzzy
msgid "Create and manipulate PAR distributions"
msgstr "Routines de manipulation de dates"

#. leap/perl-PAR-Dist/description
msgid ""
"This module creates and manipulates _PAR distributions_. They are "
"architecture-specific *PAR* files, containing everything under _blib/_ of "
"CPAN distributions after their 'make' or 'Build' stage, a _META.yml_ "
"describing metadata of the original CPAN distribution, and a _MANIFEST_ "
"detailing all files within it. Digitally signed PAR distributions will also "
"contain a _SIGNATURE_ file.\n"
"\n"
"The naming convention for such distributions is:\n"
"\n"
"    $NAME-$VERSION-$ARCH-$PERL_VERSION.par\n"
"\n"
"For example, 'PAR-Dist-0.01-i386-freebsd-5.8.0.par' corresponds to the 0.01 "
"release of 'PAR-Dist' on CPAN, built for perl 5.8.0 running on 'i386-"
"freebsd'."
msgstr ""

#. leap/perl-PAR-Packer/summary
#, fuzzy
msgid "PAR Packager"
msgstr "Paquet"

#. leap/perl-PAR-Packer/description
msgid ""
"This module implements the *App::Packer::Backend* interface, for generating "
"stand-alone executables, perl scripts and PAR files.\n"
"\n"
"Currently, this module is used by the command line tool *pp* internally, as "
"well as by the contributed _contrib/gui_pp/gpp_ program.\n"
"\n"
"Since version 0.97 of PAR, this module and its related tools such as 'pp' "
"have been stripped from the PAR distribution and are now distributed as the "
"'PAR-Packer' distribution so that PAR users need not necessarily have a C "
"compiler."
msgstr ""

#. leap/perl-PDF-API2/summary
#. leap/perl-PDF-API2/description
msgid "Create, modify, and examine PDF files"
msgstr ""

#. leap/perl-PHP-Serialization/summary
msgid "De-/serialize() PHP output into Perl"
msgstr ""

#. leap/perl-PHP-Serialization/description
msgid ""
"Provides a simple, quick means of serializing perl memory structures "
"(including object data!) into a format that PHP can deserialize() and "
"access, and vice versa.\n"
"\n"
"NOTE: Converts PHP arrays into Perl Arrays when the PHP array used "
"exclusively numeric indexes, and into Perl Hashes then the PHP array did not."
msgstr ""

#. leap/perl-POE/summary
msgid "Portable multitasking and networking framework for any event loop"
msgstr ""

#. leap/perl-POE/description
msgid ""
"POE is a framework for cooperative, event driven multitasking and networking "
"in Perl. Other languages have similar frameworks. Python has Twisted. TCL "
"has \"the event loop\".\n"
"\n"
"POE provides a unified interface for several other event loops, including "
"select(), IO::Poll, Glib, Gtk, Tk, Wx, and Gtk2. Many of these event loop "
"interfaces were written by others, with the help of POE::Test::Loops. They "
"may be found on the CPAN.\n"
"\n"
"POE achieves its high degree of portability to different operating systems "
"and Perl versions by being written entirely in Perl. CPAN hosts optional XS "
"modules for POE if speed is more desirable than portability.\n"
"\n"
"POE is designed in layers. Each layer builds atop the lower level ones. "
"Programs are free to use POE at any level of abstraction, and different "
"levels can be mixed and matched seamlessly within a single program. "
"Remember, though, that higher-level abstractions often require more "
"resources than lower-level ones. The conveniences they provide are not "
"free.\n"
"\n"
"POE's bundled abstraction layers are the tip of a growing iceberg. Sprocket, "
"POE::Stage, and other CPAN distributions build upon this work. You're "
"encouraged to look around.\n"
"\n"
"No matter how high you go, though, it all boils down to calls to POE::"
"Kernel. So your down-to-earth code can easily cooperate with stratospheric "
"systems."
msgstr ""

#. leap/perl-POE-Test-Loops/summary
msgid "Reusable tests for POE::Loop authors"
msgstr ""

#. leap/perl-POE-Test-Loops/description
msgid ""
"POE::Test::Loops contains one function, generate(), which will generate all "
"the loop tests for one or more POE::Loop subclasses.\n"
"\n"
"The the /SYNOPSIS manpage example is a version of the poe-gen-tests manpage, "
"which is a stand-alone utility to generate the actual tests. the poe-gen-"
"tests manpage also documents the POE::Test::Loops system in more detail."
msgstr ""

#. leap/perl-POSIX-strftime-Compiler/summary
msgid "GNU C library compatible strftime for loggers and servers"
msgstr ""

#. leap/perl-POSIX-strftime-Compiler/description
msgid ""
"POSIX::strftime::Compiler provides GNU C library compatible strftime(3). But "
"this module will not affected by the system locale. This feature is useful "
"when you want to write loggers, servers and portable applications.\n"
"\n"
"For generate same result strings on any locale, POSIX::strftime::Compiler "
"wraps POSIX::strftime and converts some format characters to perl code"
msgstr ""

#. leap/perl-PPI/summary
#. leap/perl-PPI/description
msgid "Parse, Analyze and Manipulate Perl (without perl)"
msgstr ""

#. leap/perl-PPIx-QuoteLike/summary
msgid "Parse Perl string literals and string-literal-like things"
msgstr ""

#. leap/perl-PPIx-QuoteLike/description
msgid ""
"This Perl class parses Perl string literals and things that are reasonably "
"like string literals. Its real reason for being is to find interpolated "
"variables for Perl::Critic policies and similar code.\n"
"\n"
"The parse is fairly straightforward, and a little poking around with _eg/"
"pqldump_ should show how it normally goes.\n"
"\n"
"But there is at least one quote-like thing that probably needs some "
"explanation."
msgstr ""

#. leap/perl-PPIx-Regexp/summary
msgid "Represent a regular expression of some sort"
msgstr ""

#. leap/perl-PPIx-Regexp/description
msgid ""
"The purpose of the _PPIx-Regexp_ package is to parse regular expressions in "
"a manner similar to the way the PPI package parses Perl. This class forms "
"the root of the parse tree, playing a role similar to PPI::Document.\n"
"\n"
"This package shares with PPI the property of being round-trip safe. That "
"is,\n"
"\n"
" my $expr = 's/ ( \\d+ ) ( \\D+ ) /$2$1/smxg';  my $re = PPIx::Regexp-"
">new( $expr );  print $re->content() eq $expr ? \"yes\\n\" : \"no\\n\"\n"
"\n"
"should print 'yes' for any valid regular expression.\n"
"\n"
"Navigation is similar to that provided by PPI. That is to say, things like "
"'children', 'find_first', 'snext_sibling' and so on all work pretty much the "
"same way as in PPI.\n"
"\n"
"The class hierarchy is also similar to PPI. Except for some utility classes "
"(the dumper, the lexer, and the tokenizer) all classes are descended from "
"PPIx::Regexp::Element, which provides basic navigation. Tokens are descended "
"from PPIx::Regexp::Token, which provides content. All containers are "
"descended from PPIx::Regexp::Node, which provides for children, and all "
"structure elements are descended from PPIx::Regexp::Structure, which "
"provides beginning and ending delimiters, and a type.\n"
"\n"
"There are two features of PPI that this package does not provide - "
"mutability and operator overloading. There are no plans for serious "
"mutability, though something like PPI's 'prune' functionality might be "
"considered. Similarly there are no plans for operator overloading, which "
"appears to the author to represent a performance hit for little tangible "
"gain."
msgstr ""

#. leap/perl-PPIx-Utilities/summary
msgid "Extensions to L<PPI|PPI>"
msgstr ""

#. leap/perl-PPIx-Utilities/description
msgid ""
"This is a collection of functions for dealing with PPI objects, many of "
"which originated in Perl::Critic. They are organized into modules by the "
"kind of PPI class they relate to, by replacing the \"PPI\" at the front of "
"the module name with \"PPIx::Utilities\", e.g. functionality related to PPI::"
"Nodes is in PPIx::Utilities::Node."
msgstr ""

#. leap/perl-Package-DeprecationManager/summary
msgid "Manage deprecation warnings for your distribution"
msgstr ""

#. leap/perl-Package-DeprecationManager/description
msgid ""
"This module allows you to manage a set of deprecations for one or more "
"modules.\n"
"\n"
"When you import 'Package::DeprecationManager', you must provide a set of '-"
"deprecations' as a hash ref. The keys are \"feature\" names, and the values "
"are the version when that feature was deprecated.\n"
"\n"
"In many cases, you can simply use the fully qualified name of a subroutine "
"or method as the feature name. This works for cases where the whole "
"subroutine is deprecated. However, the feature names can be any string. This "
"is useful if you don't want to deprecate an entire subroutine, just a "
"certain usage.\n"
"\n"
"You can also provide an optional array reference in the '-ignore' "
"parameter.\n"
"\n"
"The values to be ignored can be package names or regular expressions (made "
"with 'qr//'). Use this to ignore packages in your distribution that can "
"appear on the call stack when a deprecated feature is used.\n"
"\n"
"As part of the import process, 'Package::DeprecationManager' will export two "
"subroutines into its caller. It provides an 'import()' sub for the caller "
"and a 'deprecated()' sub.\n"
"\n"
"The 'import()' sub allows callers of _your_ class to specify an '-"
"api_version' parameter. If this is supplied, then deprecation warnings are "
"only issued for deprecations with API versions earlier than the one "
"specified.\n"
"\n"
"You must call the 'deprecated()' sub in each deprecated subroutine. When "
"called, it will issue a warning using 'Carp::cluck()'.\n"
"\n"
"The 'deprecated()' sub can be called in several ways. If you do not pass any "
"arguments, it will generate an appropriate warning message. If you pass a "
"single argument, this is used as the warning message.\n"
"\n"
"Finally, you can call it with named arguments. Currently, the only allowed "
"names are 'message' and 'feature'. The 'feature' argument should correspond "
"to the feature name passed in the '-deprecations' hash.\n"
"\n"
"If you don't explicitly specify a feature, the 'deprecated()' sub uses "
"'caller()' to identify its caller, using its fully qualified subroutine "
"name.\n"
"\n"
"A given deprecation warning is only issued once for a given package. This "
"module tracks this based on both the feature name _and_ the error message "
"itself. This means that if you provide several different error messages for "
"the same feature, all of those errors will appear."
msgstr ""

#. leap/perl-Package-Generator/summary
msgid "generate new packages quickly and easily"
msgstr ""

#. leap/perl-Package-Generator/description
msgid ""
"This module lets you quickly and easily construct new packages. It gives "
"them unused names and sets up their package data, if provided."
msgstr ""

#. leap/perl-Package-Stash/summary
#, fuzzy
msgid "routines for manipulating stashes"
msgstr "Outils pour le traitement de fichiers PostScript."

#. leap/perl-Package-Stash/description
msgid ""
"Manipulating stashes (Perl's symbol tables) is occasionally necessary, but "
"incredibly messy, and easy to get wrong. This module hides all of that "
"behind a simple API.\n"
"\n"
"NOTE: Most methods in this class require a variable specification that "
"includes a sigil. If this sigil is absent, it is assumed to represent the IO "
"slot.\n"
"\n"
"Due to limitations in the typeglob API available to perl code, and to "
"typeglob manipulation in perl being quite slow, this module provides two "
"implementations - one in pure perl, and one using XS. The XS implementation "
"is to be preferred for most usages; the pure perl one is provided for cases "
"where XS modules are not a possibility. The current implementation in use "
"can be set by setting '$ENV{PACKAGE_STASH_IMPLEMENTATION}' or '$Package::"
"Stash::IMPLEMENTATION' before loading Package::Stash (with the environment "
"variable taking precedence), otherwise, it will use the XS implementation if "
"possible, falling back to the pure perl one."
msgstr ""

#. leap/perl-Package-Stash-XS/summary
#, fuzzy
msgid "faster and more correct implementation of the Package::Stash API"
msgstr "Une implémentation portable de MPI"

#. leap/perl-Package-Stash-XS/description
msgid ""
"This is a backend for the Package::Stash manpage, which provides the "
"functionality in a way that's less buggy and much faster. It will be used by "
"default if it's installed, and should be preferred in all environments with "
"a compiler."
msgstr ""

#. leap/perl-Package-Variant/summary
msgid "Parameterizable packages"
msgstr ""

#. leap/perl-Package-Variant/description
msgid ""
"This module allows you to build a variable package that contains a package "
"template and can use it to build variant packages at runtime.\n"
"\n"
"Your variable package will export a subroutine which will build a variant "
"package, combining its arguments with the template, and return the name of "
"the new variant package.\n"
"\n"
"The implementation does not care about what kind of packages it builds, be "
"they simple function exporters, classes, singletons or something entirely "
"different."
msgstr ""

#. leap/perl-PadWalker/summary
msgid "Play with other peoples' lexical variables"
msgstr ""

#. leap/perl-PadWalker/description
msgid ""
"PadWalker is a module which allows you to inspect (and even change!) lexical "
"variables in any subroutine which called you. It will only show those "
"variables which are in scope at the point of the call.\n"
"\n"
"PadWalker is particularly useful for debugging. It's even used by Perl's "
"built-in debugger. (It can also be used for evil, of course.)\n"
"\n"
"I wouldn't recommend using PadWalker directly in production code, but it's "
"your call. Some of the modules that use PadWalker internally are certainly "
"safe for and useful in production."
msgstr ""

#. leap/perl-Pango/summary
msgid "Layout and render international text"
msgstr ""

#. leap/perl-Pango/description
msgid ""
"Pango is a library for laying out and rendering text, with an emphasis on "
"internationalization. Pango can be used anywhere that text layout is needed, "
"but using Pango in conjunction with L<Cairo> and/or L<Gtk2> provides a "
"complete solution with high quality text handling and graphics rendering.\n"
"\n"
"Dynamically loaded modules handle text layout for particular combinations of "
"script and font backend. Pango provides a wide selection of modules, "
"including modules for Hebrew, Arabic, Hangul, Thai, and a number of Indic "
"scripts. Virtually all of the world's major scripts are supported.\n"
"\n"
"In addition to the low level layout rendering routines, Pango includes "
"Pango::Layout, a high level driver for laying out entire blocks of text, and "
"routines to assist in editing internationalized text."
msgstr ""

#. leap/perl-Params-Classify/summary
msgid "Argument Type Classification"
msgstr ""

#. leap/perl-Params-Classify/description
msgid ""
"This module provides various type-testing functions. These are intended for "
"functions that, unlike most Perl code, care what type of data they are "
"operating on. For example, some functions wish to behave differently "
"depending on the type of their arguments (like overloaded functions in C+"
"+).\n"
"\n"
"There are two flavours of function in this module. Functions of the first "
"flavour only provide type classification, to allow code to discriminate "
"between argument types. Functions of the second flavour package up the most "
"common type of type discrimination: checking that an argument is of an "
"expected type. The functions come in matched pairs, of the two flavours, and "
"so the type enforcement functions handle only the simplest requirements for "
"arguments of the types handled by the classification functions. Enforcement "
"of more complex types may, of course, be built using the classification "
"functions, or it may be more convenient to use a module designed for the "
"more complex job, such as Params::Validate.\n"
"\n"
"This module is implemented in XS, with a pure Perl backup version for "
"systems that can't handle XS."
msgstr ""

#. leap/perl-Params-Coerce/summary
msgid "Allows your classes to do coercion of parameters"
msgstr ""

#. leap/perl-Params-Coerce/description
msgid ""
"A big part of good API design is that we should be able to be flexible in "
"the ways that we take parameters.\n"
"\n"
"Params::Coerce attempts to encourage this, by making it easier to take a "
"variety of different arguments, while adding negligible additional "
"complexity to your code."
msgstr ""

#. leap/perl-Params-Util/summary
msgid "Simple, compact and correct param-checking functions"
msgstr ""

#. leap/perl-Params-Util/description
msgid ""
"'Params::Util' provides a basic set of importable functions that makes "
"checking parameters a hell of a lot easier\n"
"\n"
"While they can be (and are) used in other contexts, the main point behind "
"this module is that the functions *both* Do What You Mean, and Do The Right "
"Thing, so they are most useful when you are getting params passed into your "
"code from someone and/or somewhere else and you can't really trust the "
"quality.\n"
"\n"
"Thus, 'Params::Util' is of most use at the edges of your API, where params "
"and data are coming in from outside your code.\n"
"\n"
"The functions provided by 'Params::Util' check in the most strictly correct "
"manner known, are documented as thoroughly as possible so their exact "
"behaviour is clear, and heavily tested so make sure they are not fooled by "
"weird data and Really Bad Things.\n"
"\n"
"To use, simply load the module providing the functions you want to use as "
"arguments (as shown in the SYNOPSIS).\n"
"\n"
"To aid in maintainability, 'Params::Util' will *never* export by default.\n"
"\n"
"You must explicitly name the functions you want to export, or use the ':ALL' "
"param to just have it export everything (although this is not recommended if "
"you have any _FOO functions yourself with which future additions to 'Params::"
"Util' may clash)"
msgstr ""

#. leap/perl-Params-Validate/summary
msgid "Validate method/function parameters"
msgstr ""

#. leap/perl-Params-Validate/description
msgid ""
"*I would recommend you consider using Params::ValidationCompiler instead. "
"That module, despite being pure Perl, is _significantly_ faster than this "
"one, at the cost of having to adopt a type system such as Specio, Type::"
"Tiny, or the one shipped with Moose*.\n"
"\n"
"This module allows you to validate method or function call parameters to an "
"arbitrary level of specificity. At the simplest level, it is capable of "
"validating the required parameters were given and that no unspecified "
"additional parameters were passed in.\n"
"\n"
"It is also capable of determining that a parameter is of a specific type, "
"that it is an object of a certain class hierarchy, that it possesses certain "
"methods, or applying validation callbacks to arguments."
msgstr ""

#. leap/perl-Params-ValidationCompiler/summary
msgid "Build an optimized subroutine parameter validator once, use it forever"
msgstr ""

#. leap/perl-Params-ValidationCompiler/description
msgid ""
"This module creates a customized, highly efficient parameter checking "
"subroutine. It can handle named or positional parameters, and can return the "
"parameters as key/value pairs or a list of values.\n"
"\n"
"In addition to type checks, it also supports parameter defaults, optional "
"parameters, and extra \"slurpy\" parameters."
msgstr ""

#. leap/perl-Parse-CPAN-Packages/summary
msgid "Parse 02packages.details.txt.gz"
msgstr ""

#. leap/perl-Parse-CPAN-Packages/description
msgid ""
"The Comprehensive Perl Archive Network (CPAN) is a very useful collection of "
"Perl code. It has several indices of the files that it hosts, including a "
"file named \"02packages.details.txt.gz\" in the \"modules\" directory. This "
"file contains lots of useful information and this module provides a simple "
"interface to the data contained within.\n"
"\n"
"In a future release the Parse::CPAN::Packages::Package manpage and the "
"Parse::CPAN::Packages::Distribution manpage might have more information."
msgstr ""

#. leap/perl-Parse-Method-Signatures/summary
msgid "Perl6 like method signature parser"
msgstr ""

#. leap/perl-Parse-Method-Signatures/description
msgid ""
"Inspired by Perl6::Signature but streamlined to just support the subset "
"deemed useful for TryCatch and MooseX::Method::Signatures."
msgstr ""

#. leap/perl-Parse-PMFile/summary
msgid "Parses .pm file as PAUSE does"
msgstr ""

#. leap/perl-Parse-PMFile/description
msgid ""
"The most of the code of this module is taken from the PAUSE code as of April "
"2013 almost verbatim. Thus, the heart of this module should be quite stable. "
"However, I made it not to use pipe (\"-|\") as well as I stripped database-"
"related code. If you encounter any issue, that's most probably because of my "
"modification.\n"
"\n"
"This module doesn't provide features to extract a distribution or parse meta "
"files intentionally."
msgstr ""

#. leap/perl-Parse-RecDescent/summary
#. leap/perl-Parse-RecDescent/description
msgid "Generate Recursive-Descent Parsers"
msgstr ""

#. leap/perl-Parse-Win32Registry/summary
msgid "Parse Windows Registry Files"
msgstr ""

#. leap/perl-Parse-Win32Registry/description
msgid ""
"Parse::Win32Registry is a module for parsing Windows Registry files, "
"allowing you to read the keys and values of a registry file without going "
"through the Windows API.\n"
"\n"
"It provides an object-oriented interface to the keys and values in a "
"registry file. Registry files are structured as trees of keys, with each key "
"containing further subkeys or values.\n"
"\n"
"The module is intended to be cross-platform, and run on those platforms "
"where Perl will run.\n"
"\n"
"It supports both Windows NT registry files (Windows NT, 2000, XP, 2003, "
"Vista, 7) and Windows 95 registry files (Windows 95, 98, Millennium "
"Edition).\n"
"\n"
"It is intended to be used to parse offline registry files. If a registry "
"file is currently in use, you will not be able to open it. However, you can "
"save part or all of a currently loaded registry file using the Windows reg "
"command if you have the appropriate administrative access."
msgstr ""

#. leap/perl-Parse-Yapp/summary
#, fuzzy
msgid "Perl extension for generating and using LALR parsers"
msgstr "Interface Perl pour objets URI"

#. leap/perl-Parse-Yapp/description
msgid ""
"Parse::Yapp (Yet Another Perl Parser compiler) is a collection of modules "
"that let you generate and use yacc like thread safe (reentrant) parsers with "
"perl object oriented interface.\n"
"\n"
"The script yapp is a front-end to the Parse::Yapp module and let you easily "
"create a Perl OO parser from an input grammar file."
msgstr ""

#. leap/perl-PatchReader/summary
msgid "Utilities to read and manipulate patches and CVS"
msgstr ""

#. leap/perl-PatchReader/description
msgid ""
"This perl library allows you to manipulate patches programmatically by "
"chaining together a variety of objects that read, manipulate, and output "
"patch information."
msgstr ""

#. leap/perl-Path-Class/summary
msgid "Cross-platform path specification manipulation"
msgstr ""

#. leap/perl-Path-Class/description
msgid ""
"'Path::Class' is a module for manipulation of file and directory "
"specifications (strings describing their locations, like ''/home/ken/foo."
"txt'' or ''C:\\Windows\\Foo.txt'') in a cross-platform manner. It supports "
"pretty much every platform Perl runs on, including Unix, Windows, Mac, VMS, "
"Epoc, Cygwin, OS/2, and NetWare.\n"
"\n"
"The well-known module File::Spec also provides this service, but it's sort "
"of awkward to use well, so people sometimes avoid it, or use it in a way "
"that won't actually work properly on platforms significantly different than "
"the ones they've tested their code on.\n"
"\n"
"In fact, 'Path::Class' uses 'File::Spec' internally, wrapping all the "
"unsightly details so you can concentrate on your application code. Whereas "
"'File::Spec' provides functions for some common path manipulations, 'Path::"
"Class' provides an object-oriented model of the world of path specifications "
"and their underlying semantics. 'File::Spec' doesn't create any objects, and "
"its classes represent the different ways in which paths must be manipulated "
"on various platforms (not a very intuitive concept). 'Path::Class' creates "
"objects representing files and directories, and provides methods that relate "
"them to each other. For instance, the following 'File::Spec' code:\n"
"\n"
" my $absolute = File::Spec->file_name_is_absolute(                   File::"
"Spec->catfile( @dirs, $file )                 );\n"
"\n"
"can be written using 'Path::Class' as\n"
"\n"
" my $absolute = Path::Class::File->new( @dirs, $file )->is_absolute;\n"
"\n"
"or even as\n"
"\n"
" my $absolute = file( @dirs, $file )->is_absolute;\n"
"\n"
"Similar readability improvements should happen all over the place when using "
"'Path::Class'.\n"
"\n"
"Using 'Path::Class' can help solve real problems in your code too - for "
"instance, how many people actually take the \"volume\" (like 'C:' on "
"Windows) into account when writing 'File::Spec'-using code? I thought not. "
"But if you use 'Path::Class', your file and directory objects will know what "
"volumes they refer to and do the right thing.\n"
"\n"
"The guts of the 'Path::Class' code live in the Path::Class::File and Path::"
"Class::Dir modules, so please see those modules' documentation for more "
"details about how to use them."
msgstr ""

#. leap/perl-Path-FindDev/summary
msgid "Find a development path somewhere in an upper hierarchy"
msgstr ""

#. leap/perl-Path-FindDev/description
msgid ""
"This package is mostly a glue layer around 'Path::IsDev' with a few "
"directory walking tricks.\n"
"\n"
"    use Path::FindDev qw( find_dev );\n"
"\n"
"    if ( my $root = find_dev('/some/path/to/something/somewhere')) "
"{         print \"development root = $root\";     } else {         print "
"\"No development root :(\";     }"
msgstr ""

#. leap/perl-Path-IsDev/summary
msgid "Determine if a given Path resembles a development source tree"
msgstr ""

#. leap/perl-Path-IsDev/description
msgid ""
"This module is more or less a bunch of heuristics for determining if a given "
"path is a development tree root of some kind.\n"
"\n"
"This has many useful applications, notably ones that require behaviours for "
"\"installed\" modules to be different to those that are still \"in "
"development\""
msgstr ""

#. leap/perl-Path-Router/summary
#, fuzzy
msgid "Tool for Routing Paths"
msgstr "Outil pour la gravure de CD"

#. leap/perl-Path-Router/description
msgid ""
"This module provides a way of deconstructing paths into parameters suitable "
"for dispatching on. It also provides the inverse in that it will take a list "
"of parameters, and construct an appropriate uri for it."
msgstr ""

#. leap/perl-Path-Tiny/summary
#, fuzzy
msgid "File path utility"
msgstr "Utilitaires PO libres"

#. leap/perl-Path-Tiny/description
msgid ""
"This module provides a small, fast utility for working with file paths. It "
"is friendlier to use than File::Spec and provides easy access to functions "
"from several other core file handling modules. It aims to be smaller and "
"faster than many alternatives on CPAN, while helping people do many common "
"things in consistent and less error-prone ways.\n"
"\n"
"Path::Tiny does not try to work for anything except Unix-like and Win32 "
"platforms. Even then, it might break if you try something particularly "
"obscure or tortuous. (Quick! What does this mean: '///../../..//./././a//"
"b/.././c/././'? And how does it differ on Win32?)\n"
"\n"
"All paths are forced to have Unix-style forward slashes. Stringifying the "
"object gives you back the path (after some clean up).\n"
"\n"
"File input/output methods 'flock' handles before reading or writing, as "
"appropriate (if supported by the platform).\n"
"\n"
"The '*_utf8' methods ('slurp_utf8', 'lines_utf8', etc.) operate in raw mode. "
"On Windows, that means they will not have CRLF translation from the ':crlf' "
"IO layer. Installing Unicode::UTF8 0.58 or later will speed up '*_utf8' "
"situations in many cases and is highly recommended. Alternatively, "
"installing PerlIO::utf8_strict 0.003 or later will be used in place of the "
"default ':encoding(UTF-8)'.\n"
"\n"
"This module depends heavily on PerlIO layers for correct operation and thus "
"requires Perl 5.008001 or later."
msgstr ""

#. leap/perl-PathTools/summary
#. leap/perl-PathTools/description
msgid "Tools for working with directory and file names"
msgstr ""

#. leap/perl-Perl-Critic/summary
msgid "Critique Perl source code for best-practices"
msgstr ""

#. leap/perl-Perl-Critic/description
msgid ""
"Perl::Critic is an extensible framework for creating and applying coding "
"standards to Perl source code. Essentially, it is a static source code "
"analysis engine. Perl::Critic is distributed with a number of Perl::Critic::"
"Policy modules that attempt to enforce various coding guidelines. Most "
"Policy modules are based on Damian Conway's book *Perl Best Practices*. "
"However, Perl::Critic is *not* limited to PBP and will even support Policies "
"that contradict Conway. You can enable, disable, and customize those Polices "
"through the Perl::Critic interface. You can also create new Policy modules "
"that suit your own tastes.\n"
"\n"
"For a command-line interface to Perl::Critic, see the documentation for "
"perlcritic. If you want to integrate Perl::Critic with your build process, "
"Test::Perl::Critic provides an interface that is suitable for test programs. "
"Also, Test::Perl::Critic::Progressive is useful for gradually applying "
"coding standards to legacy code. For the ultimate convenience (at the "
"expense of some flexibility) see the criticism pragma.\n"
"\n"
"If you'd like to try Perl::Critic without installing anything, there is a "
"web-service available at http://perlcritic.com. The web-service does not yet "
"support all the configuration features that are available in the native "
"Perl::Critic API, but it should give you a good idea of what it does.\n"
"\n"
"Also, ActivePerl includes a very slick graphical interface to Perl-Critic "
"called 'perlcritic-gui'. You can get a free community edition of ActivePerl "
"from http://www.activestate.com."
msgstr ""

#. leap/perl-Perl-Critic-Freenode/summary
msgid "Perl::Critic policies inspired by #perl on"
msgstr ""

#. leap/perl-Perl-Critic-Freenode/description
msgid ""
"A set of Perl::Critic policies to enforce the practices generally "
"recommended by the denizens of #perl on at https://freenode.net/. Because "
"this policy \"theme\" is designed to be used with zero configuration on the "
"command line, some duplication will occur if it is used in combination with "
"core Perl::Critic policies."
msgstr ""

#. leap/perl-Perl-Critic-Policy-Variables-ProhibitLoopOnHash/summary
msgid "Don't write loops on hashes, only on keys and values of hashes"
msgstr ""

#. leap/perl-Perl-Critic-Policy-Variables-ProhibitLoopOnHash/description
msgid ""
"When \"looping over hashes,\" we mean looping over hash keys or hash values. "
"If you forgot to call 'keys' or 'values' you will accidentally loop over "
"both.\n"
"\n"
"    foreach my $foo (%hash) {...}        # not ok     action() for "
"%hash;                  # not ok     foreach my $foo ( keys %hash ) {...} # "
"ok     action() for values %hash;           # ok\n"
"\n"
"An effort is made to detect expressions:\n"
"\n"
"    action() for %hash ? keys %hash : ();                             # "
"ok     action() for % ? keys % : (); # ok\n"
"\n"
"(Granted, the second example there doesn't make much sense, but I have found "
"a variation of it in real code.)"
msgstr ""

#. leap/perl-Perl-Critic-Pulp/summary
msgid "Some add-on perlcritic policies"
msgstr ""

#. leap/perl-Perl-Critic-Pulp/description
msgid ""
"This is a collection of add-on policies for 'Perl::Critic'. They're under a "
"\"pulp\" theme plus other themes according to their purpose (see Perl::"
"Critic/POLICY THEMES)."
msgstr ""

#. leap/perl-Perl-PrereqScanner/summary
msgid "Tool to scan your Perl code for its prerequisites"
msgstr ""

#. leap/perl-Perl-PrereqScanner/description
msgid ""
"The scanner will extract loosely your distribution prerequisites from your "
"files.\n"
"\n"
"The extraction may not be perfect but tries to do its best. It will "
"currently find the following prereqs:\n"
"\n"
"  * plain lines beginning with 'use' or 'require' in your perl modules and "
"scripts, including minimum perl version\n"
"\n"
"  * regular inheritance declared with the 'base' and 'parent' pragmata\n"
"\n"
"  * Moose inheritance declared with the 'extends' keyword\n"
"\n"
"  * Moose roles included with the 'with' keyword\n"
"\n"
"  * OO namespace aliasing using the 'aliased' module"
msgstr ""

#. leap/perl-Perl-Tidy/summary
msgid "Parses and beautifies perl source"
msgstr ""

#. leap/perl-Perl-Tidy/description
msgid ""
"This module makes the functionality of the perltidy utility available to "
"perl scripts. Any or all of the input parameters may be omitted, in which "
"case the @ARGV array will be used to provide input parameters as described "
"in the perltidy(1) man page.\n"
"\n"
"For example, the perltidy script is basically just this:\n"
"\n"
"    use Perl::Tidy;     Perl::Tidy::perltidy();\n"
"\n"
"The call to *perltidy* returns a scalar *$error_flag* which is TRUE if an "
"error caused premature termination, and FALSE if the process ran to normal "
"completion. Additional discuss of errors is contained below in the ERROR "
"HANDLING section."
msgstr ""

#. leap/perl-Perl-Version/summary
msgid "Parse and manipulate Perl version strings"
msgstr ""

#. leap/perl-Perl-Version/description
msgid ""
"Perl::Version provides a simple interface for parsing, manipulating and "
"formatting Perl version strings.\n"
"\n"
"Unlike version.pm (which concentrates on parsing and comparing version "
"strings) Perl::Version is designed for cases where you'd like to parse a "
"version, modify it and get back the modified version formatted like the "
"original.\n"
"\n"
"For example:\n"
"\n"
"    my $version = Perl::Version->new( '1.2.3' );     $version-"
">inc_version;     print \"$version\\n\";\n"
"\n"
"prints\n"
"\n"
"    1.3.0\n"
"\n"
"whereas\n"
"\n"
"    my $version = Perl::Version->new( 'v1.02.03' );     $version-"
">inc_version;     print \"$version\\n\";\n"
"\n"
"prints\n"
"\n"
"    v1.03.00\n"
"\n"
"Both are representations of the same version and they'd compare equal but "
"their formatting is different.\n"
"\n"
"Perl::Version tries hard to guess and recreate the format of the original "
"version and in most cases it succeeds. In rare cases the formatting is "
"ambiguous. Consider\n"
"\n"
"    1.10.03\n"
"\n"
"Do you suppose that second component '10' is zero padded like the third "
"component? Perl::Version will assume that it is:\n"
"\n"
"    my $version = Perl::Version->new( '1.10.03' );     $version-"
">inc_revision;     print \"$version\\n\";\n"
"\n"
"will print\n"
"\n"
"    2.00.00\n"
"\n"
"If all of the components after the first are the same length (two characters "
"in this case) and any of them begins with a zero Perl::Version will assume "
"that they're all zero padded to the same length.\n"
"\n"
"The first component and any alpha suffix are handled separately. In each "
"case if either of them starts with a zero they will be zero padded to the "
"same length when stringifying the version."
msgstr ""

#. leap/perl-Perl6-Junction/summary
msgid "Perl6 style Junction operators in Perl5."
msgstr ""

#. leap/perl-Perl6-Junction/description
#. leap/perl-Syntax-Keyword-Junction/description
msgid ""
"This is a lightweight module which provides 'Junction' operators, the most "
"commonly used being 'any' and 'all'.\n"
"\n"
"Inspired by the Perl6 design docs, the http://dev.perl.org/perl6/doc/design/"
"exe/E06.html manpage.\n"
"\n"
"Provides a limited subset of the functionality of the Quantum::"
"Superpositions manpage, see the /\"SEE ALSO\" manpage for comment.\n"
"\n"
"Notice in the the /SYNOPSIS manpage above, that if you want to match against "
"a regular expression, you must use '==' or '!='. *Not* '=~' or '!~'. You "
"must also use a regex object, such as 'qr/\\d/', not a plain regex such as '/"
"\\d/'."
msgstr ""

#. leap/perl-PerlIO-Layers/summary
msgid "Querying your filehandle's capabilities"
msgstr ""

#. leap/perl-PerlIO-Layers/description
msgid ""
"Perl's filehandles are implemented as a stack of layers, with the bottom-"
"most usually doing the actual IO and the higher ones doing buffering, "
"encoding/decoding or transformations. PerlIO::Layers allows you to query the "
"filehandle's properties concerning these layers."
msgstr ""

#. leap/perl-PerlIO-gzip/summary
msgid "Perl extension to provide a PerlIO layer to gzip/gunzip"
msgstr ""

#. leap/perl-PerlIO-gzip/description
msgid ""
"PerlIO::gzip provides a PerlIO layer that manipulates files in the format "
"used by the 'gzip' program. Compression and Decompression are implemented, "
"but not together. If you attempt to open a file for reading and writing the "
"open will fail."
msgstr ""

#. leap/perl-PerlIO-locale/summary
msgid "PerlIO layer to use the encoding of the current locale"
msgstr ""

#. leap/perl-PerlIO-locale/description
msgid ""
"This is mostly a per-filehandle version of the 'open' pragma, when used "
"under the form\n"
"\n"
"    use open ':locale';\n"
"\n"
"The encoding for the opened file will be set to the encoding corresponding "
"to the locale currently in effect, if perl can guess it."
msgstr ""

#. leap/perl-PerlIO-utf8_strict/summary
msgid "Fast and correct UTF-8 IO"
msgstr ""

#. leap/perl-PerlIO-utf8_strict/description
msgid ""
"This module provides a fast and correct UTF-8 PerlIO layer. Unlike perl's "
"default ':utf8' layer it checks the input for correctness."
msgstr ""

#. leap/perl-PerlIO-via-Timeout/summary
msgid "PerlIO layer that adds read & write timeout to a handle"
msgstr ""

#. leap/perl-PerlIO-via-Timeout/description
msgid ""
"This package implements a PerlIO layer, that adds read / write timeout. This "
"can be useful to avoid blocking while accessing a handle (file, "
"socket, ...), and fail after some time.\n"
"\n"
"The timeout is implemented by using '<select'> on the handle before reading/"
"writing. \n"
"*WARNING* the handle won't timeout if you use 'sysread' or 'syswrite' on it, "
"because these functions works at a lower level. However if you're trying to "
"implement a timeout for a socket, see the IO::Socket::Timeout manpage that "
"implements exactly that."
msgstr ""

#. leap/perl-PerlIO-via-dynamic/summary
msgid "Dynamic Perlio Layers"
msgstr ""

#. leap/perl-PerlIO-via-dynamic/description
msgid ""
"'PerlIO::via::dynamic' is used for creating dynamic PerlIO layers. It is "
"useful when the behavior or the layer depends on variables. You should not "
"use this module as via layer directly (ie :via(dynamic)).\n"
"\n"
"Use the constructor to create new layers, with two arguments: translate and "
"untranslate. Then use '$p-'via ($fh)> to wrap the handle. Once <$fh> is "
"destroyed, the temporary namespace for the IO layer will be removed.\n"
"\n"
"Note that PerlIO::via::dynamic uses the scalar fields to reference to the "
"object representing the dynamic namespace."
msgstr ""

#. leap/perl-Plack/summary
msgid "Perl Superglue for Web frameworks and Web Servers (PSGI toolkit)"
msgstr ""

#. leap/perl-Plack/description
msgid ""
"Plack is a set of tools for using the PSGI stack. It contains middleware "
"components, a reference server and utilities for Web application frameworks. "
"Plack is like Ruby's Rack or Python's Paste for WSGI.\n"
"\n"
"See PSGI for the PSGI specification and PSGI::FAQ to know what PSGI and "
"Plack are and why we need them."
msgstr ""

#. leap/perl-Plack-Middleware-LogErrors/summary
msgid "Map psgi.errors to psgix.logger or other logger"
msgstr ""

#. leap/perl-Plack-Middleware-LogErrors/description
msgid ""
"'psgi.errors' defaults to 'stderr' in most backends, which results in "
"content going somewhere unhelpful like the server console.\n"
"\n"
"This middleware simply remaps the 'psgi.errors' stream to the 'psgix.logger' "
"stream, or an explicit logger that you provide.\n"
"\n"
"This is especially handy when used in combination with other middlewares "
"such as the Plack::Middleware::LogWarn manpage (which diverts Perl warnings "
"to 'psgi.errors'); the Plack::Middleware::HTTPExceptions manpage (which "
"diverts uncaught exceptions to 'psgi.errors'); and the Plack::Middleware::"
"AccessLog manpage, which defaults to 'psgi.errors' when not passed a logger "
"-- which is also automatically applied via the plackup manpage (so if you "
"provided no '--access-log' option indicating a filename, 'psgi.errors' is "
"used)."
msgstr ""

#. leap/perl-Plack-Middleware-Session/summary
#, fuzzy
msgid "Middleware for session management"
msgstr "YaST2 - Composants pour la configuration des imprimantes"

#. leap/perl-Plack-Middleware-Session/description
msgid ""
"This is a Plack Middleware component for session management. By default it "
"will use cookies to keep session state and store data in memory. This "
"distribution also comes with other state and store solutions. See perldoc "
"for these backends how to use them.\n"
"\n"
"It should be noted that we store the current session as a hash reference in "
"the 'psgix.session' key inside the '$env' where you can access it as "
"needed. \n"
"*NOTE:* As of version 0.04 the session is stored in 'psgix.session' instead "
"of 'plack.session'."
msgstr ""

#. leap/perl-Pod-Coverage/summary
msgid "Checks if the documentation of a module is comprehensive"
msgstr ""

#. leap/perl-Pod-Coverage/description
msgid ""
"Developers hate writing documentation. They'd hate it even more if their "
"computer tattled on them, but maybe they'll be even more thankful in the "
"long run. Even if not, _perlmodstyle_ tells you to, so you must obey.\n"
"\n"
"This module provides a mechanism for determining if the pod for a given "
"module is comprehensive.\n"
"\n"
"It expects to find either a '=head(n>1)' or an '=item' block documenting a "
"subroutine.\n"
"\n"
"Consider: # an imaginary Foo.pm package Foo;\n"
"\n"
" =item foo\n"
"\n"
" The foo sub\n"
"\n"
" = cut\n"
"\n"
" sub foo {}  sub bar {}\n"
"\n"
" 1;  __END__\n"
"\n"
"In this example 'Foo::foo' is covered, but 'Foo::bar' is not, so the 'Foo' "
"package is only 50% (0.5) covered"
msgstr ""

#. leap/perl-Pod-Coverage-Moose/summary
#, fuzzy
msgid "Pod::Coverage extension for Moose"
msgstr "Interface Perl pour objets URI"

#. leap/perl-Pod-Coverage-Moose/description
msgid ""
"When using the Pod::Coverage manpage in combination with the Moose manpage, "
"it will report any method imported from a Role. This is especially bad when "
"used in combination with the Test::Pod::Coverage manpage, since it takes "
"away its ease of use.\n"
"\n"
"To use this module in combination with the Test::Pod::Coverage manpage, use "
"something like this:\n"
"\n"
"  use Test::Pod::Coverage;   all_pod_coverage_ok({ coverage_class => 'Pod::"
"Coverage::Moose'});"
msgstr ""

#. leap/perl-Pod-Coverage-TrustPod/summary
msgid "Allow a Module's Pod to Contain Pod::Coverage Hints"
msgstr ""

#. leap/perl-Pod-Coverage-TrustPod/description
msgid ""
"This is a Pod::Coverage subclass (actually, a subclass of Pod::Coverage::"
"CountParents) that allows the POD itself to declare certain symbol names "
"trusted.\n"
"\n"
"Here is a sample Perl module:\n"
"\n"
"  package Foo::Bar;\n"
"\n"
"  =head1 NAME\n"
"\n"
"  Foo::Bar - a bar at which fooes like to drink\n"
"\n"
"  =head1 METHODS\n"
"\n"
"  =head2 fee\n"
"\n"
"  returns the bar tab\n"
"\n"
"  =cut\n"
"\n"
"  sub fee { ... }\n"
"\n"
"  =head2 fie\n"
"\n"
"  scoffs at bar tab\n"
"\n"
"  =cut\n"
"\n"
"  sub fie { ... }\n"
"\n"
"  sub foo { ... }\n"
"\n"
"  =begin Pod::Coverage\n"
"\n"
"    foo\n"
"\n"
"  =end Pod::Coverage\n"
"\n"
"  =cut\n"
"\n"
"This file would report full coverage, because any non-empty lines inside a "
"block of POD targeted to Pod::Coverage are treated as 'trustme' patterns. "
"Leading and trailing whitespace is stripped and the remainder is treated as "
"a regular expression anchored at both ends.\n"
"\n"
"Remember, anywhere you could use '=begin' and '=end' as above, you could "
"instead write:\n"
"\n"
"  =for Pod::Coverage foo\n"
"\n"
"In some cases, you may wish to make the entire file trusted. The special "
"pattern '*EVERYTHING*' may be provided to do just this.\n"
"\n"
"Keep in mind that Pod::Coverage::TrustPod sets up exceptions using the "
"\"trust\" mechanism rather than the \"privacy\" mechanism in Pod::Coverage. "
"This is unlikely ever to matter to you, but it's true."
msgstr ""

#. leap/perl-Pod-Eventual/summary
msgid "Read a POD document as a series of trivial events"
msgstr ""

#. leap/perl-Pod-Eventual/description
msgid ""
"POD is a pretty simple format to write, but it can be a big pain to deal "
"with reading it and doing anything useful with it. Most existing POD parsers "
"care about semantics, like whether a '=item' occurred after an '=over' but "
"before a 'back', figuring out how to link a 'L<>', and other things like "
"that.\n"
"\n"
"Pod::Eventual is much less ambitious and much more stupid. Fortunately, "
"stupid is often better. (That's what I keep telling myself, anyway.)\n"
"\n"
"Pod::Eventual reads line-based input and produces events describing each POD "
"paragraph or directive it finds. Once complete events are immediately passed "
"to the 'handle_event' method. This method should be implemented by Pod::"
"Eventual subclasses. If it isn't, Pod::Eventual's own 'handle_event' will be "
"called, and will raise an exception."
msgstr ""

#. leap/perl-Pod-HtmlPsPdf/summary
#, fuzzy
msgid "Perl module Pod::HtmlPsPdf"
msgstr "Perl module Pod::HtmlPsPdf"

#. leap/perl-Pod-HtmlPsPdf/description
msgid ""
"Documentation projects builder in HTML, PS and PDF formats.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Stas Bekman <stas@stason.org>"
msgstr ""

#. leap/perl-Pod-Markdown/summary
msgid "Convert POD to Markdown"
msgstr ""

#. leap/perl-Pod-Markdown/description
msgid ""
"This module uses Pod::Simple to convert POD to Markdown.\n"
"\n"
"Literal characters in Pod that are special in Markdown (like *asterisks*) "
"are backslash-escaped when appropriate.\n"
"\n"
"By default 'markdown' and 'html' formatted regions are accepted. Regions of "
"'markdown' will be passed through unchanged. Regions of 'html' will be "
"placed inside a '<div>' tag so that markdown characters won't be processed. "
"Regions of ':markdown' or ':html' will be processed as POD and included. To "
"change which regions are accepted use the Pod::Simple API:\n"
"\n"
"  my $parser = Pod::Markdown->new;   $parser->unaccept_targets(qw( markdown "
"html ));"
msgstr ""

#. leap/perl-Pod-MinimumVersion/summary
#, fuzzy
msgid "Perl version for POD directives used"
msgstr "Interface Perl pour objets URI"

#. leap/perl-Pod-MinimumVersion/description
msgid ""
"'Pod::MinimumVersion' parses the POD in a Perl script, module, or document, "
"and reports what version of Perl is required to process the directives in it "
"with 'pod2man' etc."
msgstr ""

#. leap/perl-Pod-POM/summary
msgid "POD Object Model"
msgstr ""

#. leap/perl-Pod-POM/description
msgid ""
"This module implements a parser to convert Pod documents into a simple "
"object model form known hereafter as the Pod Object Model. The object model "
"is generated as a hierarchical tree of nodes, each of which represents a "
"different element of the original document. The tree can be walked manually "
"and the nodes examined, printed or otherwise manipulated. In addition, Pod::"
"POM supports and provides view objects which can automatically traverse the "
"tree, or section thereof, and generate an output representation in one form "
"or another."
msgstr ""

#. leap/perl-Pod-Readme/summary
msgid "Intelligently generate a README file from POD"
msgstr ""

#. leap/perl-Pod-Readme/description
msgid ""
"This module filters POD to generate a _README_ file, by using POD commands "
"to specify which parts are included or excluded from the _README_ file."
msgstr ""

#. leap/perl-Pod-Spell/summary
#, fuzzy
msgid "Formatter for spellchecking Pod"
msgstr "Support de la langue polonaise pour KDE"

#. leap/perl-Pod-Spell/description
msgid ""
"Pod::Spell is a Pod formatter whose output is good for spellchecking. Pod::"
"Spell rather like Pod::Text, except that it doesn't put much effort into "
"actual formatting, and it suppresses things that look like Perl symbols or "
"Perl jargon (so that your spellchecking program won't complain about mystery "
"words like \"'$thing'\" or \"'Foo::Bar'\" or \"hashref\").\n"
"\n"
"This class provides no new public methods. All methods of interest are "
"inherited from Pod::Parser (which see). The especially interesting ones are "
"'parse_from_filehandle' (which without arguments takes from STDIN and sends "
"to STDOUT) and 'parse_from_file'. But you can probably just make do with the "
"examples in the synopsis though.\n"
"\n"
"This class works by filtering out words that look like Perl or any form of "
"computerese (like \"'$thing'\" or \"'N>7'\" or \"'@{$foo}{'bar','baz'}'\", "
"anything in C<...> or F<...> codes, anything in verbatim paragraphs (code "
"blocks), and anything in the stopword list. The default stopword list for a "
"document starts out from the stopword list defined by Pod::Wordlist, and can "
"be supplemented (on a per-document basis) by having '\"=for stopwords\"' / "
"'\"=for :stopwords\"' region(s) in a document."
msgstr ""

#. leap/perl-Pod-Usage/summary
msgid "Print a Usage Message From Embedded Pod Documentation"
msgstr ""

#. leap/perl-Pod-Usage/description
msgid ""
"*pod2usage* will print a usage message for the invoking script (using its "
"embedded pod documentation) and then exit the script with the desired exit "
"status. The usage message printed may have any one of three levels of "
"\"verboseness\": If the verbose level is 0, then only a synopsis is printed. "
"If the verbose level is 1, then the synopsis is printed along with a "
"description (if present) of the command line options and arguments. If the "
"verbose level is 2, then the entire manual page is printed."
msgstr ""

#. leap/perl-PostScript-Simple/summary
#, fuzzy
msgid "Produce PostScript files from Perl"
msgstr "Conversion de polices True Type en polices PostScript Type 1"

#. leap/perl-PostScript-Simple/description
msgid ""
"PostScript::Simple allows you to have a simple method of writing PostScript "
"files from Perl. It has graphics primitives that allow lines, curves, "
"circles, polygons and boxes to be drawn. Text can be added to the page using "
"standard PostScript fonts.\n"
"\n"
"The images can be single page EPS files, or multipage PostScript files. The "
"image size can be set by using a recognised paper size (\"'A4'\", for "
"example) or by giving dimensions. The units used can be specified (\"'mm'\" "
"or \"'in'\", etc) and are the same as those used in TeX. The default unit is "
"a bp, or a PostScript point, unlike TeX."
msgstr ""

#. leap/perl-Prima/summary
#, fuzzy
msgid "Perl graphic toolkit"
msgstr "Outil d'archivage pour KDE"

#. leap/perl-Prima/description
msgid ""
"The toolkit is combined from two basic set of classes - core and external. "
"The core classes are coded in C and form a base line for every Prima object "
"written in perl. The usage of C is possible together with the toolkit; "
"however, its full power is revealed in the perl domain. The external classes "
"present easily expandable set of widgets, written completely in perl and "
"communicating with the system using Prima library calls."
msgstr ""

#. leap/perl-Probe-Perl/summary
#, fuzzy
msgid "Information about the currently running perl"
msgstr "Aucune information disponible."

#. leap/perl-Probe-Perl/description
msgid ""
"This module provides methods for obtaining information about the currently "
"running perl interpreter. It originally began life as code in the 'Module::"
"Build' project, but has been externalized here for general use."
msgstr ""

#. leap/perl-Proc-Fork/summary
msgid "Simple, Intuitive Interface to the Fork() System Call"
msgstr ""

#. leap/perl-Proc-Fork/description
msgid ""
"This module provides an intuitive, Perl-ish way to write forking programs by "
"letting you use blocks to illustrate which code section executes in which "
"fork. The code for the parent, child, retry handler and error handler are "
"grouped together in a \"fork block\". The clauses may appear in any order, "
"but they must be consecutive (without any other statements in between).\n"
"\n"
"All four clauses need not be specified. If the retry clause is omitted, only "
"one fork will be attempted. If the error clause is omitted the program will "
"die with a simple message if it can't retry. If the parent or child clause "
"is omitted, the respective (parent or child) process will start execution "
"after the final clause. So if one or the other only has to do some simple "
"action, you need only specify that one. For example:\n"
"\n"
"   run_fork { child {      exec '/bin/ls', '-l';      die \"Couldn't exec "
"ls: $!\\n\";  } };    \n"
"\n"
"If the code in any of the clauses does not die or exit, it will continue "
"execution after the fork block."
msgstr ""

#. leap/perl-Proc-ProcessTable/summary
#, fuzzy
msgid "Perl extension to access the unix process table"
msgstr "Extension perl"

#. leap/perl-Proc-ProcessTable/description
#, fuzzy
msgid "Perl interface to the unix process table."
msgstr "Interface python pourla bibliothèque gdbm"

#. leap/perl-Proc-Simple/summary
msgid "Launch and Control Background Processes"
msgstr ""

#. leap/perl-Proc-Simple/description
msgid ""
"The Proc::Simple package provides objects mimicing real-life processes from "
"a user's point of view. A new process object is created by\n"
"\n"
"   $myproc = Proc::Simple->new();\n"
"\n"
"Either external programs or perl subroutines can be launched and controlled "
"as processes in the background.\n"
"\n"
"A 10-second sleep process, for example, can be launched as an external "
"program as in\n"
"\n"
"   $myproc->start(\"/bin/sleep 10\");    # or    $myproc->start(\"/bin/sleep"
"\", \"10\");\n"
"\n"
"or as a perl subroutine, as in\n"
"\n"
"   sub mysleep { sleep(shift); }    # Define mysleep()    $myproc-"
">start(\\&mysleep, 10);   # Launch it.\n"
"\n"
"or even as\n"
"\n"
"   $myproc->start(sub { sleep(10); });\n"
"\n"
"The _start_ Method returns immediately after starting the specified process "
"in background, i.e. there's no blocking. It returns _1_ if the process has "
"been launched successfully and _0_ if not.\n"
"\n"
"The _poll_ method checks if the process is still running\n"
"\n"
"   $running = $myproc->poll();\n"
"\n"
"and returns _1_ if it is, _0_ if it's not. Finally,\n"
"\n"
"   $myproc->kill();\n"
"\n"
"terminates the process by sending it the SIGTERM signal. As an option, "
"another signal can be specified.\n"
"\n"
"   $myproc->kill(\"SIGUSR1\");\n"
"\n"
"sends the SIGUSR1 signal to the running process. _kill_ returns _1_ if it "
"succeeds in sending the signal, _0_ if it doesn't.\n"
"\n"
"The methods are discussed in more detail in the next section.\n"
"\n"
"A destructor is provided so that a signal can be sent to the forked "
"processes automatically should the process object be destroyed or if the "
"process exits. By default this behaviour is turned off (see the "
"kill_on_destroy and signal_on_destroy methods)."
msgstr ""

#. leap/perl-Protocol-Redis/summary
msgid "Redis protocol parser/encoder with asynchronous capabilities"
msgstr ""

#. leap/perl-Protocol-Redis/description
msgid ""
"Redis protocol parser/encoder with asynchronous capabilities and at http://"
"redis.io/topics/pipelining support."
msgstr ""

#. leap/perl-Protocol-Redis-Faster/summary
msgid "Optimized pure-perl Redis protocol parser/encoder"
msgstr ""

#. leap/perl-Protocol-Redis-Faster/description
msgid ""
"This module implements the Protocol::Redis API with more optimized pure-perl "
"internals. See Protocol::Redis for usage documentation.\n"
"\n"
"This is a low level parsing module, if you are looking to use Redis in Perl, "
"try Redis, Redis::hiredis, or Mojo::Redis."
msgstr ""

#. leap/perl-Protocol-WebSocket/summary
msgid "WebSocket protocol"
msgstr ""

#. leap/perl-Protocol-WebSocket/description
msgid ""
"Client/server WebSocket message and frame parser/constructor. This module "
"does not provide a WebSocket server or client, but is made for using in http "
"servers or clients to provide WebSocket support.\n"
"\n"
"Protocol::WebSocket supports the following WebSocket protocol versions:\n"
"\n"
"    draft-ietf-hybi-17 (latest)     draft-ietf-hybi-10     draft-ietf-"
"hybi-00 (with HAProxy support)     draft-hixie-75\n"
"\n"
"By default the latest version is used. The WebSocket version is detected "
"automatically on the server side. On the client side you have set a "
"'version' attribute to an appropriate value.\n"
"\n"
"Protocol::WebSocket itself does not contain any code and cannot be used "
"directly. Instead the following modules should be used:"
msgstr ""

#. leap/perl-Quantum-Superpositions/summary
msgid "QM-like superpositions in Perl"
msgstr ""

#. leap/perl-Quantum-Superpositions/description
msgid ""
"The Quantum::Superpositions module adds two new operators to Perl: 'any' and "
"'all'.\n"
"\n"
"Each of these operators takes a list of values (states) and superimposes "
"them into a single scalar value (a superposition), which can then be stored "
"in a standard scalar variable.\n"
"\n"
"The 'any' and 'all' operators produce two distinct kinds of superposition. "
"The 'any' operator produces a disjunctive superposition, which may "
"(notionally) be in any one of its states at any time, according to the needs "
"of the algorithm that uses it.\n"
"\n"
"In contrast, the 'all' operator creates a conjunctive superposition, which "
"is always in every one of its states simultaneously.\n"
"\n"
"Superpositions are scalar values and hence can participate in arithmetic and "
"logical operations just like any other type of scalar. However, when an "
"operation is applied to a superposition, it is applied (notionally) in "
"parallel to each of the states in that superposition.\n"
"\n"
"For example, if a superposition of states 1, 2, and 3 is multiplied by 2:\n"
"\n"
"\t$result = any(1,2,3) * 2;\n"
"\n"
"the result is a superposition of states 2, 4, and 6. If that result is then "
"compared with the value 4:\n"
"\n"
"\tif ($result == 4) { print \"fore!\" }\n"
"\n"
"then the comparison also returns a superposition: one that is both true and "
"false (since the equality is true for one of the states of '$result' and "
"false for the other two).\n"
"\n"
"Of course, a value that is both true and false is of no use in an 'if' "
"statement, so some mechanism is needed to decide which superimposed boolean "
"state should take precedence.\n"
"\n"
"This mechanism is provided by the two types of superposition available. A "
"disjunctive superposition is true if any of its states is true, whereas a "
"conjunctive superposition is true only if all of its states are true.\n"
"\n"
"Thus the previous example does print \"fore!\", since the 'if' condition is "
"equivalent to:\n"
"\n"
"\tif (any(2,4,6) == 4)...\n"
"\n"
"It suffices that any one of 2, 4, or 6 is equal to 4, so the condition is "
"true and the 'if' block executes.\n"
"\n"
"On the other hand, had the control statement been:\n"
"\n"
"        if (all(2,4,6) == 4)...\n"
"\n"
"the condition would fail, since it is not true that all of 2, 4, and 6 are "
"equal to 4.\n"
"\n"
"Operations are also possible between two superpositions:\n"
"\n"
"        if (all(1,2,3)*any(5,6) < 21)                 { print \"no alcohol"
"\"; }\n"
"\n"
"        if (all(1,2,3)*any(5,6) < 18)                 { print \"no entry"
"\"; }\n"
"\n"
"        if (any(1,2,3)*all(5,6) < 18)                 { print \"under-age"
"\" }\n"
"\n"
"In this example, the string \"no alcohol\" is printed because the "
"superposition produced by the multiplication is the Cartesian product of the "
"respective states of the two operands: 'all(5,6,10,12,15,18)'. Since all of "
"these resultant states are less that 21, the condition is true. In contrast, "
"the string \"no entry\" is not printed, because not all the product's states "
"are less than 18.\n"
"\n"
"Note that the type of the first operand determines the type of the result of "
"an operation. Hence the third string -- \"underage\" -- is printed, because "
"multiplying a disjunctive superposition by a conjunctive superposition "
"produces a result that is disjunctive: 'any(5,6,10,12,15,18)'. The condition "
"of the 'if' statement asks whether any of these values is less than 18, "
"which is true."
msgstr ""

#. leap/perl-RDF-Trine/summary
msgid "An RDF Framework for Perl"
msgstr ""

#. leap/perl-RDF-Trine/description
msgid ""
"RDF::Trine provides an Resource Descriptive Framework (RDF) with an emphasis "
"on extensibility, API stability, and the presence of a test suite. The "
"package consists of several components:"
msgstr ""

#. leap/perl-RPC-XML/summary
msgid "Set of Classes for Core Data, Message and Xml Handling"
msgstr ""

#. leap/perl-RPC-XML/description
msgid ""
"The *RPC::XML* package is an implementation of the *XML-RPC* standard. The "
"package as a whole provides classes for data, for clients, for servers and "
"for parsers (based on the XML::Parser and XML::LibXML packages from CPAN).\n"
"\n"
"This module provides a set of classes for creating values to pass to the "
"constructors for requests and responses. These are lightweight objects, most "
"of which are implemented as blessed scalar references so as to associate "
"specific type information with the value. Classes are also provided for "
"requests, responses and faults (errors).\n"
"\n"
"This module does not actually provide any transport implementation or server "
"basis. For these, see RPC::XML::Client and RPC::XML::Server, respectively."
msgstr ""

#. leap/perl-RPM-Header-PurePerl/summary
#, fuzzy
msgid "A Perl only implementation of a RPM header reader"
msgstr "Implémentation du démon d'identification RFC1413"

#. leap/perl-RPM-Header-PurePerl/description
msgid ""
"RPM::Header::PurePerl is a clone of RPM::Header written in only Perl, so it "
"provides a way to read an rpm package on systems where rpm is not installed. "
"RPM::Header::PurePerl can be used as a drop in replacement for RPM::Header, "
"if needed also the other way round."
msgstr ""

#. leap/perl-RPM2/summary
#, fuzzy
msgid "Perl bindings for the RPM Package Manager API"
msgstr "Interface Perl vers la bibliothèque UULib"

#. leap/perl-RPM2/description
msgid ""
"The RPM2 module provides an object-oriented interface to querying both the "
"installed RPM database as well as files on the filesystem."
msgstr ""

#. leap/perl-Readonly/summary
#. leap/perl-Readonly/description
msgid "Facility for creating read-only scalars, arrays, hashes"
msgstr ""

#. leap/perl-Readonly-XS/summary
msgid ""
"Companion module for Readonly.pm, to speed up read-only scalar variables"
msgstr ""

#. leap/perl-Readonly-XS/description
msgid ""
"This is a companion module to Readonly.pm.  You do not use Readonly::XS "
"directly.  Instead, once it is installed, Readonly.pm will detect this and "
"will use it for creating read-only scalars.  This results in a significant "
"speed improvement.  This does not speed up read-only arrays or hashes.\n"
"\n"
"Authors:\n"
"--------     Eric Roode, <roode@cpan.org>"
msgstr ""

#. leap/perl-Redis/summary
msgid "Perl binding for Redis database"
msgstr ""

#. leap/perl-Redis/description
msgid ""
"Pure perl bindings for http://redis.io/\n"
"\n"
"This version supports protocol 2.x (multi-bulk) or later of Redis available "
"at https://github.com/antirez/redis/.\n"
"\n"
"This documentation lists commands which are exercised in test suite, but "
"additional commands will work correctly since protocol specifies enough "
"information to support almost all commands with same piece of code with a "
"little help of 'AUTOLOAD'."
msgstr ""

#. leap/perl-Regexp-Assemble/summary
msgid "Assemble multiple Regular Expressions into a single RE"
msgstr ""

#. leap/perl-Regexp-Assemble/description
msgid ""
"Regexp::Assemble takes an arbitrary number of regular expressions and "
"assembles them into a single regular expression (or RE) that matches all "
"that the individual REs match.\n"
"\n"
"As a result, instead of having a large list of expressions to loop over, a "
"target string only needs to be tested against one expression. This is "
"interesting when you have several thousand patterns to deal with. Serious "
"effort is made to produce the smallest pattern possible.\n"
"\n"
"It is also possible to track the original patterns, so that you can "
"determine which, among the source patterns that form the assembled pattern, "
"was the one that caused the match to occur.\n"
"\n"
"You should realise that large numbers of alternations are processed in "
"perl's regular expression engine in O(n) time, not O(1). If you are still "
"having performance problems, you should look at using a trie. Note that "
"Perl's own regular expression engine will implement trie optimisations in "
"perl 5.10 (they are already available in perl 5.9.3 if you want to try them "
"out). 'Regexp::Assemble' will do the right thing when it knows it's running "
"on a trie'd perl. (At least in some version after this one).\n"
"\n"
"Some more examples of usage appear in the accompanying README. If that file "
"is not easy to access locally, you can find it on a web repository such as "
"http://search.cpan.org/dist/Regexp-Assemble/README or http://cpan.uwinnipeg."
"ca/htdocs/Regexp-Assemble/README.html.\n"
"\n"
"See also LIMITATIONS."
msgstr ""

#. leap/perl-Regexp-Common/summary
msgid "Provide commonly requested regular expressions"
msgstr ""

#. leap/perl-Regexp-Common/description
msgid ""
"By default, this module exports a single hash ('%RE') that stores or "
"generates commonly needed regular expressions (see \"List of available "
"patterns\").\n"
"\n"
"There is an alternative, subroutine-based syntax described in \"Subroutine-"
"based interface\"."
msgstr ""

#. leap/perl-Regexp-IPv6/summary
#, fuzzy
msgid "Regular expression for IPv6 addresses"
msgstr "Interface Perl pour objets URI"

#. leap/perl-Regexp-IPv6/description
msgid ""
"This module exports the $IPv6_re regular expression that matches any valid "
"IPv6 address as described in \"RFC 2373 - 2.2 Text Representation of "
"Addresses\" but '::'. Any string not compliant with such RFC will be "
"rejected.\n"
"\n"
"To match full strings use '/^$IPv6_re$/'."
msgstr ""

#. leap/perl-Regexp-Shellish/summary
msgid "Shell-like regular expressions"
msgstr ""

#. leap/perl-Regexp-Shellish/description
msgid ""
"Provides shell-like regular expressions.  The wildcards provided are ?,\n"
"* and **, where ** is like * but matches /.  See compile_shellish for "
"details.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Barrie Slaymaker <barries at slaysys dot com>"
msgstr ""

#. leap/perl-Return-Value/summary
msgid "(deprecated) polymorphic return values"
msgstr ""

#. leap/perl-Return-Value/description
msgid ""
"Polymorphic return values are a horrible idea, but this library was written "
"based on the notion that they were useful. Often, we just want to know if "
"something worked or not. Other times, we'd like to know what the error text "
"was. Still others, we may want to know what the error code was, and what the "
"error properties were. We don't want to handle objects or data structures "
"for every single return value, but we do want to check error conditions in "
"our code because that's what good programmers do.\n"
"\n"
"When functions are successful they may return true, or perhaps some useful "
"data. In the quest to provide consistent return values, this gets confusing "
"between complex, informational errors and successful return values.\n"
"\n"
"This module provides these features with a simplistic API that should get "
"you what you're looking for in each context a return value is used in."
msgstr ""

#. leap/perl-Role-HasMessage/summary
msgid "a thing with a message method"
msgstr ""

#. leap/perl-Role-HasMessage/description
msgid ""
"This is another extremely simple role. A class that includes Role::"
"HasMessage is promising to provide a 'message' method that returns a string "
"summarizing the message or event represented by the object. It does _not_ "
"provide any actual behavior."
msgstr ""

#. leap/perl-Role-Identifiable/summary
msgid "Thing with a List of Tags"
msgstr ""

#. leap/perl-Role-Identifiable/description
msgid "a thing with a list of tags"
msgstr ""

#. leap/perl-Role-Tiny/summary
msgid "Roles. Like a nouvelle cuisine portion size slice of Moose"
msgstr ""

#. leap/perl-Role-Tiny/description
msgid "'Role::Tiny' is a minimalist role composition tool."
msgstr ""

#. leap/perl-Rose-Object/summary
#, fuzzy
msgid "A simple object base class."
msgstr "Serveur Web simple"

#. leap/perl-Rose-Object/description
msgid ""
"the Rose::Object manpage is a generic object base class. It provides very "
"little functionality, but a healthy dose of convention."
msgstr ""

#. leap/perl-Router-Simple/summary
msgid "simple HTTP router"
msgstr ""

#. leap/perl-Router-Simple/description
msgid ""
"Router::Simple is a simple router class.\n"
"\n"
"Its main purpose is to serve as a dispatcher for web applications.\n"
"\n"
"Router::Simple can match against PSGI '$env' directly, which means it's easy "
"to use with PSGI supporting web frameworks."
msgstr ""

#. leap/perl-SDL/summary
msgid "SDL bindings to Perl"
msgstr ""

#. leap/perl-SDL/description
msgid ""
"SDL Perl are a set of bindings to the Simple DirectMedia Layer (SDL).\n"
"\n"
"Simple DirectMedia Layer is a cross-platform multimedia library designed to "
"provide low level access to audio, keyboard, mouse, joystick, 3D hardware "
"via OpenGL, and 2D video framebuffer. It is used by MPEG playback software, "
"emulators, and many popular games, including the award winning Linux port of "
"\"Civilization: Call To Power.\""
msgstr ""

#. leap/perl-SGML-Parser-OpenSP/summary
#, fuzzy
msgid "Perl interface to the OpenSP SGML and XML parser"
msgstr "Interface Perl vers DNS Resolver"

#. leap/perl-SGML-Parser-OpenSP/description
msgid ""
"SGML::Parser::OpenSP provides a native Perl interface, written in C++ and "
"XS, to the OpenSP SGML and XML parser.\n"
"\n"
" Authors:\tBjoern Hoehrmann, <bjoern@hoehrmann.de>"
msgstr ""

#. leap/perl-SGMLS/summary
#, fuzzy
msgid "SGML/XML Parsers"
msgstr "Analyseur syntaxique XML en C"

#. leap/perl-SGMLS/description
msgid ""
"SGMLSpm is a Perl script that reads ESIS output (from parsers like SP) and "
"offers an event-based interface to the parser. As long as the parser can "
"parse XML this also works for XML."
msgstr ""

#. leap/perl-SOAP-Lite/summary
msgid "Perl's Web Services Toolkit"
msgstr ""

#. leap/perl-SOAP-Lite/description
msgid ""
"SOAP::Lite is a collection of Perl modules which provides a simple and "
"lightweight interface to the Simple Object Access Protocol (SOAP) both on "
"client and server side."
msgstr ""

#. leap/perl-SQL-Abstract/summary
msgid "Generate SQL from Perl data structures"
msgstr ""

#. leap/perl-SQL-Abstract/description
msgid ""
"This module was inspired by the excellent DBIx::Abstract. However, in using "
"that module I found that what I really wanted to do was generate SQL, but "
"still retain complete control over my statement handles and use the DBI "
"interface. So, I set out to create an abstract SQL generation module.\n"
"\n"
"While based on the concepts used by DBIx::Abstract, there are several "
"important differences, especially when it comes to WHERE clauses. I have "
"modified the concepts used to make the SQL easier to generate from Perl data "
"structures and, IMO, more intuitive. The underlying idea is for this module "
"to do what you mean, based on the data structures you provide it. The big "
"advantage is that you don't have to modify your code every time your data "
"changes, as this module figures it out.\n"
"\n"
"To begin with, an SQL INSERT is as easy as just specifying a hash of "
"'key=value' pairs:\n"
"\n"
"    my %data = (         name => 'Jimbo Bobson',         phone => "
"'123-456-7890',         address => '42 Sister Lane',         city => 'St. "
"Louis',         state => 'Louisiana',     );\n"
"\n"
"The SQL can then be generated with this:\n"
"\n"
"    my($stmt, @bind) = $sql->insert('people', \\%data);\n"
"\n"
"Which would give you something like this:\n"
"\n"
"    $stmt = \"INSERT INTO people                     (address, city, name, "
"phone, state)                     VALUES (?, ?, ?, ?, ?)\";     @bind = ('42 "
"Sister Lane', 'St. Louis', 'Jimbo Bobson',              '123-456-7890', "
"'Louisiana');\n"
"\n"
"These are then used directly in your DBI code:\n"
"\n"
"    my $sth = $dbh->prepare($stmt);     $sth->execute(@bind);"
msgstr ""

#. leap/perl-SQL-Abstract-Pg/summary
msgid "PostgreSQL features for SQL::Abstract"
msgstr ""

#. leap/perl-SQL-Abstract-Pg/description
msgid ""
"SQL::Abstract::Pg extends SQL::Abstract with a few PostgreSQL features used "
"by Mojo::Pg."
msgstr ""

#. leap/perl-SQL-ReservedWords/summary
msgid "Reserved SQL words by ANSI/ISO"
msgstr ""

#. leap/perl-SQL-ReservedWords/description
msgid "Determine if words are reserved by ANSI/ISO SQL standard."
msgstr ""

#. leap/perl-SQL-SplitStatement/summary
msgid "Split any SQL code into atomic statements"
msgstr ""

#. leap/perl-SQL-SplitStatement/description
msgid ""
"This is a simple module which tries to split any SQL code, even including "
"non-standard extensions (for the details see the the /SUPPORTED DBMSs "
"manpage section below), into the atomic statements it is composed of.\n"
"\n"
"The logic used to split the SQL code is more sophisticated than a raw "
"'split' on the ';' (semicolon) character: first, various different statement "
"terminator _tokens_ are recognized (see below for the list), then this "
"module is able to correctly handle the presence of said tokens inside "
"identifiers, values, comments, 'BEGIN ... END' blocks (even nested), _dollar-"
"quoted_ strings, MySQL custom 'DELIMITER's, procedural code etc., as "
"(partially) exemplified in the the /SYNOPSIS manpage above.\n"
"\n"
"Consider however that this is by no means a validating parser (technically "
"speaking, it's just a _context-sensitive tokenizer_). It should rather be "
"seen as an in-progress _heuristic_ approach, which will gradually improve as "
"test cases will be reported. This also means that, except for the the /"
"LIMITATIONS manpage detailed below, there is no known (to the author) SQL "
"code the most current release of this module can't correctly split.\n"
"\n"
"The test suite bundled with the distribution (which now includes the popular "
"_Sakila_ and _Pagila_ sample db schemata, as detailed in the the /SHOWCASE "
"manpage section below) should give you an idea of the capabilities of this "
"module\n"
"\n"
"If your atomic statements are to be fed to a DBMS, you are encouraged to use "
"the DBIx::MultiStatementDo manpage instead, which uses this module and also "
"(optionally) offers automatic transactions support, so that you'll have the "
"_all-or-nothing_ behavior you would probably want."
msgstr ""

#. leap/perl-SQL-Statement/summary
msgid "SQL parsing and processing engine"
msgstr ""

#. leap/perl-SQL-Statement/description
msgid ""
"The SQL::Statement module implements a pure Perl SQL parsing and execution "
"engine. While it by no means implements full ANSI standard, it does support "
"many features including column and table aliases, built-in and user-defined "
"functions, implicit and explicit joins, complex nested search conditions, "
"and other features.\n"
"\n"
"SQL::Statement is a small embeddable Database Management System (DBMS). This "
"means that it provides all of the services of a simple DBMS except that "
"instead of a persistent storage mechanism, it has two things: 1) an in-"
"memory storage mechanism that allows you to prepare, execute, and fetch from "
"SQL statements using temporary tables and 2) a set of software sockets where "
"any author can plug in any storage mechanism.\n"
"\n"
"There are three main uses for SQL::Statement. One or another (hopefully not "
"all) may be irrelevant for your needs: 1) to access and manipulate data in "
"CSV, XML, and other formats 2) to build your own DBD for a new data source "
"3) to parse and examine the structure of SQL statements."
msgstr ""

#. leap/perl-SQL-Tokenizer/summary
msgid "A simple SQL tokenizer"
msgstr ""

#. leap/perl-SQL-Tokenizer/description
msgid ""
"SQL::Tokenizer is a simple tokenizer for SQL queries. It does not claim to "
"be a parser or query verifier. It just creates sane tokens from a valid SQL "
"query.\n"
"\n"
"It supports SQL with comments like:\n"
"\n"
" -- This query is used to insert a message into  -- logs table  INSERT INTO "
"log (application, message) VALUES (?, ?)\n"
"\n"
"Also supports '''', '\"\"' and '\\'' escaping methods, so tokenizing queries "
"like the one below should not be a problem:\n"
"\n"
" INSERT INTO log (application, message)  VALUES ('myapp', 'Hey, this is a "
"''single quoted string''!')"
msgstr ""

#. leap/perl-SQL-Translator/summary
msgid "Manipulate structured data definitions (SQL and more)"
msgstr ""

#. leap/perl-SQL-Translator/description
msgid ""
"This documentation covers the API for SQL::Translator. For a more general "
"discussion of how to use the modules and scripts, please see SQL::"
"Translator::Manual.\n"
"\n"
"SQL::Translator is a group of Perl modules that converts vendor-specific SQL "
"table definitions into other formats, such as other vendor-specific SQL, ER "
"diagrams, documentation (POD and HTML), XML, and Class::DBI classes. The "
"main focus of SQL::Translator is SQL, but parsers exist for other structured "
"data formats, including Excel spreadsheets and arbitrarily delimited text "
"files. Through the separation of the code into parsers and producers with an "
"object model in between, it's possible to combine any parser with any "
"producer, to plug in custom parsers or producers, or to manipulate the "
"parsed data via the built-in object model. Presently only the definition "
"parts of SQL are handled (CREATE, ALTER), not the manipulation of data "
"(INSERT, UPDATE, DELETE)."
msgstr ""

#. leap/perl-SUPER/summary
msgid "Control Superclass Method Dispatch"
msgstr ""

#. leap/perl-SUPER/description
msgid ""
"When subclassing a class, you occasionally want to dispatch control to the "
"superclass -- at least conditionally and temporarily. The Perl syntax for "
"calling your superclass is ugly and unwieldy:\n"
"\n"
"    $self->SUPER::method(@_);\n"
"\n"
"especially when compared to its Ruby equivalent:\n"
"\n"
"    super;\n"
"\n"
"It's even worse in that the normal Perl redispatch mechanism only dispatches "
"to the parent of the class containing the method _at compile time_. That "
"doesn't work very well for mixins and roles.\n"
"\n"
"This module provides nicer equivalents, along with the universal method "
"'super' to determine a class' own superclass. This allows you to do things "
"such as:\n"
"\n"
"    goto &{$_[0]->super('my_method')};\n"
"\n"
"if you don't like wasting precious stack frames.\n"
"\n"
"If you are using roles or mixins or otherwise pulling in methods from other "
"packages that need to dispatch to their super methods, or if you want to "
"pass different arguments to the super method, use the 'SUPER()' method:\n"
"\n"
"    $self->SUPER( qw( other arguments here ) );"
msgstr ""

#. leap/perl-SVG/summary
#, fuzzy
msgid "Perl extension for generating Scalable Vector Graphics (SVG) documents"
msgstr "Interface Perl pour objets URI"

#. leap/perl-SVG/description
msgid ""
"SVG is a 100% Perl module which generates a nested data structure containing "
"the DOM representation of an SVG (Scalable Vector Graphics) image. Using "
"SVG, you can generate SVG objects, embed other SVG instances into it, access "
"the DOM object, create and access javascript, and generate SMIL animation "
"content."
msgstr ""

#. leap/perl-SVN-Simple/summary
msgid "A simple interface to subversion's editor interface"
msgstr ""

#. leap/perl-SVN-Simple/description
msgid ""
"SVN::Simple::Edit wraps the subversion delta editor with a perl friendly "
"interface and then you could easily drive it for describing changes to a "
"tree. A common usage is to wrap the commit editor, so you could make commits "
"to a subversion repository easily.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Chia-liang Kao <clkao at clkao dot org>"
msgstr ""

#. leap/perl-Safe-Isa/summary
msgid "Call isa, can, does and DOES safely on things that may not be objects"
msgstr ""

#. leap/perl-Safe-Isa/description
msgid ""
"How many times have you found yourself writing:\n"
"\n"
"  if ($obj->isa('Something')) {\n"
"\n"
"and then shortly afterwards cursing and changing it to:\n"
"\n"
"  if (Scalar::Util::blessed($obj) and $obj->isa('Something')) {\n"
"\n"
"Right. That's why this module exists.\n"
"\n"
"Since perl allows us to provide a subroutine reference or a method name to "
"the -> operator when used as a method call, and a subroutine doesn't require "
"the invocant to actually be an object, we can create safe versions of isa, "
"can and friends by using a subroutine reference that only tries to call the "
"method if it's used on an object. So:\n"
"\n"
"  my $isa_Foo = $maybe_an_object->$_call_if_object(isa => 'Foo');\n"
"\n"
"is equivalent to\n"
"\n"
"  my $isa_Foo = do {     if (Scalar::Util::blessed($maybe_an_object)) "
"{       $maybe_an_object->isa('Foo');     } else {       undef;     }   };\n"
"\n"
"Note that we don't handle trying class names, because many things are valid "
"class names that you might not want to treat as one (like say \"Matt\") - "
"the 'is_module_name' function from Module::Runtime is a good way to check "
"for something you might be able to call methods on if you want to do that.\n"
"\n"
"We are careful to make sure that scalar/list context is preserved for the "
"method that is eventually called."
msgstr ""

#. leap/perl-Scalar-List-Utils/summary
#. leap/perl-Scalar-List-Utils/description
msgid "Common Scalar and List utility subroutines"
msgstr ""

#. leap/perl-Scalar-String/summary
msgid "String Aspects of Scalars"
msgstr ""

#. leap/perl-Scalar-String/description
msgid ""
"This module is about the string part of plain Perl scalars. A scalar has a "
"string value, which is notionally a sequence of Unicode codepoints, but may "
"be internally encoded in either ISO-8859-1 or UTF-8. In places, and more so "
"in older versions of Perl, the internal encoding shows through. To fully "
"understand Perl strings it is necessary to understand these implementation "
"details.\n"
"\n"
"This module provides functions to classify a string by encoding and to "
"encode a string in a desired way.\n"
"\n"
"This module is implemented in XS, with a pure Perl backup version for "
"systems that can't handle XS."
msgstr ""

#. leap/perl-Scope-Guard/summary
msgid "Lexically-Scoped Resource Management"
msgstr ""

#. leap/perl-Scope-Guard/description
msgid ""
"This module provides a convenient way to perform cleanup or other forms of "
"resource management at the end of a scope. It is particularly useful when "
"dealing with exceptions: the 'Scope::Guard' constructor takes a reference to "
"a subroutine that is guaranteed to be called even if the thread of execution "
"is aborted prematurely. This effectively allows lexically-scoped \"promises"
"\" to be made that are automatically honoured by perl's garbage collector.\n"
"\n"
"For more information, see: the http://www.drdobbs.com/cpp/184403758 manpage"
msgstr ""

#. leap/perl-Scope-Upper/summary
msgid "Act on upper scopes"
msgstr ""

#. leap/perl-Scope-Upper/description
msgid ""
"This module lets you defer actions _at run-time_ that will take place when "
"the control flow returns into an upper scope. Currently, you can:\n"
"\n"
"  * hook an upper scope end with reap ;\n"
"\n"
"  * localize variables, array/hash values or deletions of elements in higher "
"contexts with respectively localize, localize_elem and localize_delete ;\n"
"\n"
"  * return values immediately to an upper level with unwind, yield and "
"leave ;\n"
"\n"
"  * gather information about an upper context with want_at and "
"context_info ;\n"
"\n"
"  * execute a subroutine in the setting of an upper subroutine stack frame "
"with uplevel ;\n"
"\n"
"  * uniquely identify contexts with uid and validate_uid."
msgstr ""

#. leap/perl-Selenium-Remote-Driver/summary
msgid "Perl Client for Selenium Remote Driver"
msgstr ""

#. leap/perl-Selenium-Remote-Driver/description
msgid ""
"Selenium is a test tool that allows you to write automated web application "
"UI tests in any programming language against any HTTP website using any "
"mainstream JavaScript-enabled browser. This module is an implementation of "
"the client for the Remote driver that Selenium provides. You can find "
"bindings for other languages at this location:\n"
"\n"
"https://www.seleniumhq.org/download/\n"
"\n"
"This module sends commands directly to the Server using HTTP. Using this "
"module together with the Selenium Server, you can automatically control any "
"supported browser. To use this module, you need to have already downloaded "
"and started the Selenium Server (Selenium Server is a Java application)."
msgstr ""

#. leap/perl-Sereal-Decoder/summary
msgid "Binary serialization module for Perl (decoder part)"
msgstr ""

#. leap/perl-Sereal-Decoder/description
msgid ""
"This library implements a deserializer for an efficient, compact-output, and "
"feature-rich binary protocol called _Sereal_. Its sister module Sereal::"
"Encoder implements an encoder for this format. The two are released "
"separately to allow for independent and safer upgrading.\n"
"\n"
"The Sereal protocol versions that are compatible with this decoder "
"implementation are currently protocol versions 1, 2, 3 and 4. As it stands, "
"it will refuse to attempt to decode future versions of the protocol, but if "
"necessary there is likely going to be an option to decode the parts of the "
"input that are compatible with version 4 of the protocol. The protocol was "
"designed to allow for this.\n"
"\n"
"The protocol specification and many other bits of documentation can be found "
"in the github repository. Right now, the specification is at https://github."
"com/Sereal/Sereal/blob/master/sereal_spec.pod, there is a discussion of the "
"design objectives in https://github.com/Sereal/Sereal/blob/master/README."
"pod, and the output of our benchmarks can be seen at https://github.com/"
"Sereal/Sereal/wiki/Sereal-Comparison-Graphs."
msgstr ""

#. leap/perl-Sereal-Encoder/summary
msgid "Binary serialization module for Perl (encoder part)"
msgstr ""

#. leap/perl-Sereal-Encoder/description
msgid ""
"This library implements an efficient, compact-output, and feature-rich "
"serializer using a binary protocol called _Sereal_. Its sister module "
"Sereal::Decoder implements a decoder for this format. The two are released "
"separately to allow for independent and safer upgrading. If you care greatly "
"about performance, consider reading the Sereal::Performance documentation "
"after finishing this document.\n"
"\n"
"The Sereal protocol version emitted by this encoder implementation is "
"currently protocol version 4 by default.\n"
"\n"
"The protocol specification and many other bits of documentation can be found "
"in the github repository. Right now, the specification is at https://github."
"com/Sereal/Sereal/blob/master/sereal_spec.pod, there is a discussion of the "
"design objectives in https://github.com/Sereal/Sereal/blob/master/README."
"pod, and the output of our benchmarks can be seen at https://github.com/"
"Sereal/Sereal/wiki/Sereal-Comparison-Graphs. For more information on getting "
"the best performance out of Sereal, have a look at the \"PERFORMANCE\" "
"section below."
msgstr ""

#. leap/perl-Set-Crontab/summary
msgid "Expand crontab(5)-style integer lists"
msgstr ""

#. leap/perl-Set-Crontab/description
msgid ""
"Set::Crontab parses crontab-style lists of integers and defines some utility "
"functions to make it easier to deal with them.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Abhijit Menon-Sen <ams@wiw.org>"
msgstr ""

#. leap/perl-Set-Object/summary
msgid "Set of objects and strings"
msgstr ""

#. leap/perl-Set-Object/description
msgid ""
"This modules implements a set of objects, that is, an unordered collection "
"of objects without duplication.\n"
"\n"
"The term _objects_ is applied loosely - for the sake of Set::Object, "
"anything that is a reference is considered an object.\n"
"\n"
"Set::Object 1.09 and later includes support for inserting scalars (including "
"the empty string, but excluding 'undef') as well as objects. This can be "
"thought of as (and is currently implemented as) a degenerate hash that only "
"has keys and no values. Unlike objects placed into a Set::Object, scalars "
"that are inserted will be flattened into strings, so will lose any magic "
"(eg, tie) or other special bits that they went in with; only strings come "
"out."
msgstr ""

#. leap/perl-Set-Scalar/summary
msgid "Basic Set Operations"
msgstr ""

#. leap/perl-Set-Scalar/description
msgid "basic set operations"
msgstr ""

#. leap/perl-Smart-Comments/summary
msgid "Comments that do more than just sit there"
msgstr ""

#. leap/perl-Smart-Comments/description
msgid ""
"Smart comments provide an easy way to insert debugging and tracking code "
"into a program. They can report the value of a variable, track the progress "
"of a loop, and verify that particular assertions are true.\n"
"\n"
"Best of all, when you're finished debugging, you don't have to remove them. "
"Simply commenting out the 'use Smart::Comments' line turns them back into "
"regular comments. Leaving smart comments in your code is smart because if "
"you needed them once, you'll almost certainly need them again later."
msgstr ""

#. leap/perl-Snowball-Norwegian/summary
#. leap/perl-Snowball-Norwegian/description
msgid "Porters stemming algorithm for norwegian."
msgstr ""

#. leap/perl-Snowball-Swedish/summary
#. leap/perl-Snowball-Swedish/description
msgid "Porters stemming algorithm for swedish."
msgstr ""

#. leap/perl-Socket-MsgHdr/summary
msgid "Sendmsg, Recvmsg and Ancillary Data Operations"
msgstr ""

#. leap/perl-Socket-MsgHdr/description
msgid ""
"Socket::MsgHdr provides advanced socket messaging operations via sendmsg and "
"recvmsg. Like their C counterparts, these functions accept few parameters, "
"instead stuffing a lot of information into a complex structure.\n"
"\n"
"This structure describes the message sent or received (buf), the peer on the "
"other end of the socket (name), and ancillary or so-called control "
"information (cmsghdr). This ancillary data may be used for file descriptor "
"passing, IPv6 operations, and a host of implemenation-specific extensions."
msgstr ""

#. leap/perl-Socket6/summary
msgid "IPv6 Sockets (Perl Module)"
msgstr ""

#. leap/perl-Socket6/description
msgid ""
"The IPv6 related part of the C socket.h defines and structure manipulators."
msgstr ""

#. leap/perl-Software-License/summary
msgid "Packages That Provide Templated Software Licenses"
msgstr ""

#. leap/perl-Software-License/description
msgid "packages that provide templated software licenses"
msgstr ""

#. leap/perl-Sort-Key/summary
msgid "the fastest way to sort anything in Perl"
msgstr ""

#. leap/perl-Sort-Key/description
msgid ""
"Sort::Key provides a set of functions to sort lists of values by some "
"calculated key value.\n"
"\n"
"It is faster (usually *much faster*) and uses less memory than other "
"alternatives implemented around perl sort function (ST, GRT, etc.).\n"
"\n"
"Multi-key sorting functionality is also provided via the companion modules "
"the Sort::Key::Multi manpage, the Sort::Key::Maker manpage and the Sort::"
"Key::Register manpage."
msgstr ""

#. leap/perl-Sort-Naturally/summary
msgid "sort lexically, but sort numeral parts numerically"
msgstr ""

#. leap/perl-Sort-Naturally/description
msgid ""
"This module exports two functions, 'nsort' and 'ncmp'; they are used in "
"implementing my idea of a \"natural sorting\" algorithm. Under natural "
"sorting, numeric substrings are compared numerically, and other word-"
"characters are compared lexically.\n"
"\n"
"This is the way I define natural sorting: \n"
"* *\n"
"\n"
"  Non-numeric word-character substrings are sorted lexically,   case-"
"insensitively: \"Foo\" comes between \"fish\" and \"fowl\". \n"
"* *\n"
"\n"
"  Numeric substrings are sorted numerically: \"100\" comes after \"20\", "
"not   before. \n"
"* *\n"
"\n"
"  \\W substrings (neither words-characters nor digits) are _ignored_. \n"
"* *\n"
"\n"
"  Our use of \\w, \\d, \\D, and \\W is locale-sensitive: Sort::Naturally "
"uses a   'use locale' statement. \n"
"* *\n"
"\n"
"  When comparing two strings, where a numeric substring in one place is   "
"_not_ up against a numeric substring in another, the non-numeric always   "
"comes first. This is fudged by reading pretending that the lack of a   "
"number substring has the value -1, like so:\n"
"\n"
"    foo       =>  \"foo\",  -1     foobar    =>  \"foo\",  -1,  \"bar\"     "
"foo13     =>  \"foo\",  13,     foo13xyz  =>  \"foo\",  13,  \"xyz\"\n"
"\n"
"  That's so that \"foo\" will come before \"foo13\", which will come "
"before   \"foobar\". \n"
"* *\n"
"\n"
"  The start of a string is exceptional: leading non-\\W (non-word,   non-"
"digit) components are are ignored, and numbers come _before_ letters. \n"
"* *\n"
"\n"
"  I define \"numeric substring\" just as sequences matching m/\\d+/ --   "
"scientific notation, commas, decimals, etc., are not seen. If your data   "
"has thousands separators in numbers (\"20,000 Leagues Under The Sea\" or   "
"\"20.000 lieues sous les mers\"), consider stripping them before feeding   "
"them to 'nsort' or 'ncmp'."
msgstr ""

#. leap/perl-Sort-Versions/summary
#, fuzzy
msgid "Perl 5 Module for Sorting of Revision-Like Numbers"
msgstr "Un module perl pour changer les paramètres du terminal"

#. leap/perl-Sort-Versions/description
msgid ""
"Sort::Versions allows easy sorting of mixed non-numeric and numeric strings, "
"like the 'version numbers' that many shared library systems and revision "
"control packages use. This is quite useful if you are trying to deal with "
"shared libraries. It can also be applied to applications that intersperse "
"variable-width numeric fields within text. Other applications can "
"undoubtedly be found.\n"
"\n"
"For an explanation of the algorithm, it's simplest to look at these "
"examples:\n"
"\n"
"  1.1   <  1.2   1.1a  <  1.2   1.1   <  1.1.1   1.1   <  1.1a   1.1.a <  "
"1.1a   1     <  a   a     <  b   1     <  2   1.1-3 <  1.1-4   1.1-5 <  "
"1.1.6\n"
"\n"
"More precisely (but less comprehensibly), the two strings are treated as "
"subunits delimited by periods or hyphens. Each subunit can contain any "
"number of groups of digits or non-digits. If digit groups are being compared "
"on both sides, a numeric comparison is used, otherwise a ASCII ordering is "
"used. A group or subgroup with more units will win if all comparisons are "
"equal. A period binds digit groups together more tightly than a hyphen.\n"
"\n"
"Some packages use a different style of version numbering: a simple real "
"number written as a decimal. Sort::Versions has limited support for this "
"style: when comparing two subunits which are both digit groups, if either "
"subunit has a leading zero, then both are treated like digits after a "
"decimal point. So for example:\n"
"\n"
"  0002  <  1   1.06  <  1.5\n"
"\n"
"This won39t always work, because there won39t always be a leading zero in "
"real-number style version numbers. There is no way for Sort::Versions to "
"know which style was intended. But a lot of the time it will do the right "
"thing. If you are making up version numbers, the style with (possibly) more "
"than one dot is the style to use."
msgstr ""

#. leap/perl-Specio/summary
msgid "Type constraints and coercions for Perl"
msgstr ""

#. leap/perl-Specio/description
msgid ""
"The 'Specio' distribution provides classes for representing type constraints "
"and coercion, along with syntax sugar for declaring them.\n"
"\n"
"Note that this is not a proper type system for Perl. Nothing in this "
"distribution will magically make the Perl interpreter start checking a "
"value's type on assignment to a variable. In fact, there's no built-in way "
"to apply a type to a variable at all.\n"
"\n"
"Instead, you can explicitly check a value against a type, and optionally "
"coerce values to that type.\n"
"\n"
"My long-term goal is to replace Moose's built-in types and MooseX::Types "
"with this module."
msgstr ""

#. leap/perl-Specio-Library-Path-Tiny/summary
msgid "Path::Tiny types and coercions for Specio"
msgstr ""

#. leap/perl-Specio-Library-Path-Tiny/description
msgid ""
"This library provides a set of Path::Tiny types and coercions for Specio. "
"These types can be used with Moose, Moo, Params::ValidationCompiler, and "
"other modules."
msgstr ""

#. leap/perl-Spiffy/summary
msgid "Spiffy Perl Interface Framework For You"
msgstr ""

#. leap/perl-Spiffy/description
msgid ""
"\"Spiffy\" is a framework and methodology for doing object oriented (OO) "
"programming in Perl. Spiffy combines the best parts of Exporter.pm, base.pm, "
"mixin.pm and SUPER.pm into one magic foundation class. It attempts to fix "
"all the nits and warts of traditional Perl OO, in a clean, straightforward "
"and (perhaps someday) standard way.\n"
"\n"
"Spiffy borrows ideas from other OO languages like Python, Ruby, Java and "
"Perl 6. It also adds a few tricks of its own.\n"
"\n"
"If you take a look on CPAN, there are a ton of OO related modules. When "
"starting a new project, you need to pick the set of modules that makes most "
"sense, and then you need to use those modules in each of your classes. "
"Spiffy, on the other hand, has everything you'll probably need in one "
"module, and you only need to use it once in one of your classes. If you make "
"Spiffy.pm the base class of the basest class in your project, Spiffy will "
"automatically pass all of its magic to all of your subclasses. You may "
"eventually forget that you're even using it!\n"
"\n"
"The most striking difference between Spiffy and other Perl object oriented "
"base classes, is that it has the ability to export things. If you create a "
"subclass of Spiffy, all the things that Spiffy exports will automatically be "
"exported by your subclass, in addition to any more things that you want to "
"export. And if someone creates a subclass of your subclass, all of those "
"things will be exported automatically, and so on. Think of it as \"Inherited "
"Exportation\", and it uses the familiar Exporter.pm specification syntax.\n"
"\n"
"To use Spiffy or any subclass of Spiffy as a base class of your class, you "
"specify the '-base' argument to the 'use' command.\n"
"\n"
"    use MySpiffyBaseModule -base;\n"
"\n"
"You can also use the traditional 'use base 'MySpiffyBaseModule';' syntax and "
"everything will work exactly the same. The only caveat is that Spiffy.pm "
"must already be loaded. That's because Spiffy rewires base.pm on the fly to "
"do all the Spiffy magics.\n"
"\n"
"Spiffy has support for Ruby-like mixins with Perl6-like roles. Just like "
"'base' you can use either of the following invocations:\n"
"\n"
"    use mixin 'MySpiffyBaseModule';     use MySpiffyBaseModule -mixin;\n"
"\n"
"The second version will only work if the class being mixed in is a subclass "
"of Spiffy. The first version will work in all cases, as long as Spiffy has "
"already been loaded.\n"
"\n"
"To limit the methods that get mixed in, use roles. (Hint: they work just "
"like an Exporter list):\n"
"\n"
"    use MySpiffyBaseModule -mixin => qw(:basics x y !foo);\n"
"\n"
"In object oriented Perl almost every subroutine is a method. Each method "
"gets the object passed to it as its first argument. That means practically "
"every subroutine starts with the line:\n"
"\n"
"    my $self = shift;\n"
"\n"
"Spiffy provides a simple, optional filter mechanism to insert that line for "
"you, resulting in cleaner code. If you figure an average method has 10 lines "
"of code, that's 10% of your code! To turn this option on, you just use the "
"'- Base' option instead of the '-base' option, or add the '-selfless' "
"option. If source filtering makes you queazy, don't use the feature. I "
"personally find it addictive in my quest for writing squeaky clean, "
"maintainable code.\n"
"\n"
"A useful feature of Spiffy is that it exports two functions: 'field' and "
"'const' that can be used to declare the attributes of your class, and "
"automatically generate accessor methods for them. The only difference "
"between the two functions is that 'const' attributes can not be modified; "
"thus the accessor is much faster.\n"
"\n"
"One interesting aspect of OO programming is when a method calls the same "
"method from a parent class. This is generally known as calling a super "
"method. Perl's facility for doing this is butt ugly:\n"
"\n"
"    sub cleanup {         my $self = shift;         $self->scrub;         "
"$self->SUPER::cleanup(@_);     }\n"
"\n"
"Spiffy makes it, er, super easy to call super methods. You just use the "
"'super' function. You don't need to pass it any arguments because it "
"automatically passes them on for you. Here's the same function with Spiffy:\n"
"\n"
"    sub cleanup {         $self->scrub;         super;     }\n"
"\n"
"Spiffy has a special method for parsing arguments called 'parse_arguments', "
"that it also uses for parsing its own arguments. You declare which arguments "
"are boolean (singletons) and which ones are paired, with two special methods "
"called 'boolean_arguments' and 'paired_arguments'. Parse arguments pulls out "
"the booleans and pairs and returns them in an anonymous hash, followed by a "
"list of the unmatched arguments.\n"
"\n"
"Finally, Spiffy can export a few debugging functions 'WWW', 'XXX', 'YYY' and "
"'ZZZ'. Each of them produces a YAML dump of its arguments. WWW warns the "
"output, XXX dies with the output, YYY prints the output, and ZZZ confesses "
"the output. If YAML doesn't suit your needs, you can switch all the dumps to "
"Data::Dumper format with the '-dumper' option.\n"
"\n"
"That's Spiffy!"
msgstr ""

#. leap/perl-Spooky-Patterns-XS/summary
#. leap/perl-Spooky-Patterns-XS/description
#, fuzzy
msgid "Spooky::Patterns::XS Perl module"
msgstr "Modules Palm pilote perl"

#. leap/perl-Spreadsheet-ParseExcel/summary
msgid "Read information from an Excel file."
msgstr ""

#. leap/perl-Spreadsheet-ParseExcel/description
msgid ""
"The Spreadsheet::ParseExcel module can be used to read information from "
"Excel 95-2003 binary files.\n"
"\n"
"The module cannot read files in the Excel 2007 Open XML XLSX format. See the "
"the Spreadsheet::XLSX manpage module instead."
msgstr ""

#. leap/perl-Spreadsheet-Read/summary
msgid "Read the data from a spreadsheet"
msgstr ""

#. leap/perl-Spreadsheet-Read/description
msgid ""
"Spreadsheet::Read tries to transparently read *any* spreadsheet and return "
"its content in a universal manner independent of the parsing module that "
"does the actual spreadsheet scanning.\n"
"\n"
"For OpenOffice this module uses Spreadsheet::ReadSXC\n"
"\n"
"For Microsoft Excel this module uses Spreadsheet::ParseExcel or Spreadsheet::"
"XLSX\n"
"\n"
"For CSV this module uses Text::CSV_XS (0.29 or up required, 0.73 or up "
"preferred) or Text::CSV_PP (1.05 or up required).\n"
"\n"
"For SquirrelCalc there is a very simplistic built-in parser"
msgstr ""

#. leap/perl-Spreadsheet-ReadSXC/summary
msgid "Extract OpenOffice 1.x spreadsheet data"
msgstr ""

#. leap/perl-Spreadsheet-ReadSXC/description
msgid ""
"Spreadsheet::ReadSXC extracts data from OpenOffice 1.x spreadsheet files (."
"sxc). It exports the function read_sxc() which takes a filename and an "
"optional reference to a hash of options as arguments and returns a reference "
"to a hash of references to two-dimensional arrays. The hash keys correspond "
"to the names of worksheets in the OpenOffice workbook. The two-dimensional "
"arrays correspond to rows and cells in the respective spreadsheets. If you "
"don't like this because the order of sheets is not preserved in a hash, read "
"on. The 'OrderBySheet' option provides an array of hashes instead.\n"
"\n"
"If you prefer to unpack the .sxc file yourself, you can use the function "
"read_xml_file() instead and pass the path to content.xml as an argument. Or "
"you can extract the XML string from content.xml and pass the string to the "
"function read_xml_string(). Both functions also take a reference to a hash "
"of options as an optional second argument."
msgstr ""

#. leap/perl-Spreadsheet-XLSX/summary
#, fuzzy
msgid "Perl extension for reading MS Excel 2007 files;"
msgstr "Interface Perl pour objets URI"

#. leap/perl-Spreadsheet-XLSX/description
msgid ""
"This module is a (quick and dirty) emulation of Spreadsheet::ParseExcel for "
"Excel 2007 (.xlsx) file format. It supports styles and many of Excel's "
"quirks, but not all. It populates the classes from Spreadsheet::ParseExcel "
"for interoperability; including Workbook, Worksheet, and Cell."
msgstr ""

#. leap/perl-Starman/summary
msgid "High-performance preforking PSGI/Plack web server"
msgstr ""

#. leap/perl-Starman/description
msgid ""
"Starman is a PSGI perl web server that has unique features such as: \n"
"* High Performance\n"
"\n"
"  Uses the fast XS/C HTTP header parser \n"
"* Preforking\n"
"\n"
"  Spawns workers preforked like most high performance UNIX servers do.   "
"Starman also reaps dead children and automatically restarts the worker   "
"pool. \n"
"* Signals\n"
"\n"
"  Supports 'HUP' for graceful worker restarts, and 'TTIN'/'TTOU' to   "
"dynamically increase or decrease the number of worker processes, as well   "
"as 'QUIT' to gracefully shutdown the worker processes. \n"
"* Superdaemon aware\n"
"\n"
"  Supports the Server::Starter manpage for hot deploy and graceful   "
"restarts. \n"
"* Multiple interfaces and UNIX Domain Socket support\n"
"\n"
"  Able to listen on multiple interfaces including UNIX sockets. \n"
"* Small memory footprint\n"
"\n"
"  Preloading the applications with '--preload-app' command line option   "
"enables copy-on-write friendly memory management. Also, the minimum   memory "
"usage Starman requires for the master process is 7MB and children   "
"(workers) is less than 3.0MB. \n"
"* PSGI compatible\n"
"\n"
"  Can run any PSGI applications and frameworks \n"
"* HTTP/1.1 support\n"
"\n"
"  Supports chunked requests and responses, keep-alive and pipeline   "
"requests. \n"
"* UNIX only\n"
"\n"
"  This server does not support Win32."
msgstr ""

#. leap/perl-Statistics-CaseResampling/summary
msgid ""
"Efficient resampling and calculation of medians with confidence intervals"
msgstr ""

#. leap/perl-Statistics-CaseResampling/description
msgid ""
"The purpose of this (XS) module is to calculate the median (or in principle "
"also other statistics) with confidence intervals on a sample. To do that, it "
"uses a technique called bootstrapping. In a nutshell, it resamples the "
"sample a lot of times and for each resample, it calculates the median. From "
"the distribution of medians, it then calculates the confidence limits.\n"
"\n"
"In order to implement the confidence limit calculation, various other "
"functions had to be implemented efficiently (both algorithmically efficient "
"and done in C). These functions may be useful in their own right and are "
"thus exposed to Perl. Most notably, this exposes a median (and general "
"selection) algorithm that works in linear time as opposed to the trivial "
"implementation that requires 'O(n*log(n))'."
msgstr ""

#. leap/perl-Statistics-Descriptive/summary
msgid "Module of basic descriptive statistical functions"
msgstr ""

#. leap/perl-Statistics-Descriptive/description
msgid ""
"This module provides basic functions used in descriptive statistics. It has "
"an object oriented design and supports two different types of data storage "
"and calculation objects: sparse and full. With the sparse method, none of "
"the data is stored and only a few statistical measures are available. Using "
"the full method, the entire data set is retained and additional functions "
"are available.\n"
"\n"
"Whenever a division by zero may occur, the denominator is checked to be "
"greater than the value '$Statistics::Descriptive::Tolerance', which defaults "
"to 0.0. You may want to change this value to some small positive value such "
"as 1e-24 in order to obtain error messages in case of very small "
"denominators.\n"
"\n"
"Many of the methods (both Sparse and Full) cache values so that subsequent "
"calls with the same arguments are faster."
msgstr ""

#. leap/perl-Stream-Buffered/summary
msgid "temporary buffer to save bytes"
msgstr ""

#. leap/perl-Stream-Buffered/description
msgid ""
"Stream::Buffered is a buffer class to store arbitrary length of byte strings "
"and then get a seekable filehandle once everything is buffered. It uses "
"PerlIO and/or temporary file to save the buffer depending on the length of "
"the size."
msgstr ""

#. leap/perl-String-Approx/summary
#, fuzzy
msgid "Perl extension for approximate matching (fuzzy matching)"
msgstr "Extension perl"

#. leap/perl-String-Approx/description
msgid ""
"String::Approx lets you match and substitute strings approximately. With "
"this you can emulate errors: typing errorrs, speling errors, closely related "
"vocabularies (colour color), genetic mutations (GAG ACT), abbreviations "
"(McScot, MacScot).\n"
"\n"
"NOTE: String::Approx suits the task of *string matching*, not *string "
"comparison*, and it works for *strings*, not for *text*.\n"
"\n"
"If you want to compare strings for similarity, you probably just want the "
"Levenshtein edit distance (explained below), the Text::Levenshtein and Text::"
"LevenshteinXS modules in CPAN. See also Text::WagnerFischer and Text::"
"PhraseDistance. (There are functions for this in String::Approx, e.g. "
"adist(), but their results sometimes differ from the bare Levenshtein et "
"al.)\n"
"\n"
"If you want to compare things like text or source code, consisting of\n"
"*words* or *tokens* and *phrases* and *sentences*, or *expressions* and\n"
"*statements*, you should probably use some other tool than String::Approx, "
"like for example the standard UNIX diff(1) tool, or the Algorithm::Diff "
"module from CPAN.\n"
"\n"
"The measure of *approximateness* is the _Levenshtein edit distance_. It is "
"the total number of \"edits\": insertions,\n"
"\n"
"\tword world\n"
"\n"
"deletions,\n"
"\n"
"\tmonkey money\n"
"\n"
"and substitutions\n"
"\n"
"\tsun fun\n"
"\n"
"required to transform a string to another string. For example, to transform _"
"\"lead\"_ into _\"gold\"_, you need three edits:\n"
"\n"
"\tlead gead goad gold\n"
"\n"
"The edit distance of \"lead\" and \"gold\" is therefore three, or 75%. \n"
"*String::Approx* uses the Levenshtein edit distance as its measure, but "
"String::Approx is not well-suited for comparing strings of different length, "
"in other words, if you want a \"fuzzy eq\", see above. String::Approx is "
"more like regular expressions or index(), it finds substrings that are close "
"matches.>"
msgstr ""

#. leap/perl-String-CRC32/summary
#, fuzzy
msgid "Perl interface for cyclic redundancy check generation"
msgstr "Interface perl pour ImageMagick"

#. leap/perl-String-CRC32/description
msgid ""
"The *CRC32* module calculates CRC sums of 32 bit lengths. It generates the "
"same CRC values as ZMODEM, PKZIP, PICCHECK and many others.\n"
"\n"
"Despite its name, this module is able to compute the checksum of files as "
"well as strings."
msgstr ""

#. leap/perl-String-CamelCase/summary
msgid "Camelcase, de-Camelcase"
msgstr ""

#. leap/perl-String-CamelCase/description
msgid "camelcase, de-camelcase"
msgstr ""

#. leap/perl-String-Errf/summary
msgid "Simple Sprintf-Like Dialect"
msgstr ""

#. leap/perl-String-Errf/description
msgid ""
"String::Errf provides 'errf', a simple string formatter that works something "
"like 'sprintf'. It is implemented using String::Formatter and Sub::Exporter. "
"Their documentation may be useful in understanding or extending String::"
"Errf. The 'errf' subroutine is only available when imported. Calling String::"
"Errf::errf will not do what you want."
msgstr ""

#. leap/perl-String-Escape/summary
msgid "Backslash escapes, quoted phrase, word elision, etc."
msgstr ""

#. leap/perl-String-Escape/description
msgid "sorry, no description found"
msgstr ""

#. leap/perl-String-Flogger/summary
#. leap/perl-String-Flogger/description
msgid "string munging for loggers"
msgstr ""

#. leap/perl-String-Format/summary
msgid "Sprintf-Like String Formatting Capabilities With"
msgstr ""

#. leap/perl-String-Format/description
msgid ""
"String::Format lets you define arbitrary printf-like format sequences to be "
"expanded. This module would be most useful in configuration files and "
"reporting tools, where the results of a query need to be formatted in a "
"particular way. It was inspired by mutt's index_format and related "
"directives (see <URL:http://www.mutt.org/doc/manual/manual-6."
"html#index_format>)."
msgstr ""

#. leap/perl-String-Formatter/summary
msgid "Build sprintf-like functions of your own"
msgstr ""

#. leap/perl-String-Formatter/description
msgid ""
"String::Formatter is a tool for building sprintf-like formatting routines. "
"It supports named or positional formatting, custom conversions, fixed string "
"interpolation, and simple width-matching out of the box. It is easy to alter "
"its behavior to write new kinds of format string expanders. For most cases, "
"it should be easy to build all sorts of formatters out of the options built "
"into String::Formatter.\n"
"\n"
"Normally, String::Formatter will be used to import a sprintf-like routine "
"referred to as \"'stringf'\", but which can be given any name you like. This "
"routine acts like sprintf in that it takes a string and some inputs and "
"returns a new string:\n"
"\n"
"  my $output = stringf \"Some %a format %s for you to %u.\\n\", { ... };\n"
"\n"
"This routine is actually a wrapper around a String::Formatter object created "
"by importing stringf. In the following code, the entire hashref after "
"\"stringf\" is passed to String::Formatter's constructor (the 'new' method), "
"save for the '-as' key and any other keys that start with a dash.\n"
"\n"
"  use String::Formatter     stringf => {       -as => 'fmt_time',       "
"codes           => { ... },       format_hunker   => ...,       "
"input_processor => ...,     },     stringf => {       -as => "
"'fmt_date',       codes           => { ... },       string_replacer "
"=> ...,       hunk_formatter  => ...,     },   ;\n"
"\n"
"As you can see, this will generate two stringf routines, with different "
"behaviors, which are installed with different names. Since the behavior of "
"these routines is based on the 'format' method of a String::Formatter "
"object, the rest of the documentation will describe the way the object "
"behaves.\n"
"\n"
"There's also a 'named_stringf' export, which behaves just like the 'stringf' "
"export, but defaults to the 'named_replace' and 'require_named_input' "
"arguments. There's a 'method_stringf' export, which defaults "
"'method_replace' and 'require_single_input'. Finally, a 'indexed_stringf', "
"which defaults to 'indexed_replaced' and 'require_arrayref_input'. For more "
"on these, keep reading, and check out the cookbook.\n"
"\n"
"String::Formatter::Cookbook provides a number of recipes for ways to put "
"String::Formatter to use."
msgstr ""

#. leap/perl-String-RewritePrefix/summary
msgid "Rewrite strings based on a set of known prefixes"
msgstr ""

#. leap/perl-String-RewritePrefix/description
msgid "rewrite strings based on a set of known prefixes"
msgstr ""

#. leap/perl-String-ShellQuote/summary
msgid "Quote strings for passing through the shell"
msgstr ""

#. leap/perl-String-ShellQuote/description
msgid ""
"This module contains some functions which are useful for quoting strings "
"which are going to pass through the shell or a shell-like object."
msgstr ""

#. leap/perl-String-ToIdentifier-EN/summary
msgid "Convert Strings to English Program Identifiers"
msgstr ""

#. leap/perl-String-ToIdentifier-EN/description
msgid ""
"This module provides a utility method, to_identifier for converting an "
"arbitrary string into a readable representation using the ASCII subset of "
"'\\w' for use as an identifier in a computer program. The intent is to make "
"unique identifier names from which the content of the original string can be "
"easily inferred by a human just by reading the identifier.\n"
"\n"
"If you need the full set of '\\w' including Unicode, see the subclass "
"String::ToIdentifier::EN::Unicode.\n"
"\n"
"Currently, this process is one way only, and will likely remain this way.\n"
"\n"
"The default is to create camelCase identifiers, or you may pass in a "
"separator char of your choice such as '_'.\n"
"\n"
"Binary char groups will be separated by '_' even in camelCase identifiers to "
"make them easier to read, e.g.: 'foo_2_0xFF_Bar'."
msgstr ""

#. leap/perl-String-Truncate/summary
#. leap/perl-String-Truncate/description
msgid "a module for when strings are too long to be displayed in..."
msgstr ""

#. leap/perl-Struct-Dumb/summary
msgid "Make simple lightweight record-like structures"
msgstr ""

#. leap/perl-Struct-Dumb/description
msgid ""
"'Struct::Dumb' creates record-like structure types, similar to the 'struct' "
"keyword in C, C++ or C#, or 'Record' in Pascal. An invocation of this module "
"will create a construction function which returns new object references with "
"the given field values. These references all respond to lvalue methods that "
"access or modify the values stored.\n"
"\n"
"It's specifically and intentionally not meant to be an object class. You "
"cannot subclass it. You cannot provide additional methods. You cannot apply "
"roles or mixins or metaclasses or traits or antlers or whatever else is in "
"fashion this week.\n"
"\n"
"On the other hand, it is tiny, creates cheap lightweight array-backed "
"structures, uses nothing outside of core. It's intended simply to be a "
"slightly nicer way to store data structures, where otherwise you might be "
"tempted to abuse a hash, complete with the risk of typoing key names. The "
"constructor will 'croak' if passed the wrong number of arguments, as will "
"attempts to refer to fields that don't exist. Accessor-mutators will 'croak' "
"if invoked with arguments. (This helps detect likely bugs such as "
"accidentally passing in the new value as an argument, or attempting to "
"invoke a stored 'CODE' reference by passing argument values directly to the "
"accessor.)\n"
"\n"
" $ perl -E 'use Struct::Dumb; struct Point => [qw( x y )]; Point(30)'  "
"usage: main::Point($x, $y) at -e line 1\n"
"\n"
" $ perl -E 'use Struct::Dumb; struct Point => [qw( x y )]; Point(10,20)->z'  "
"main::Point does not have a 'z' field at -e line 1\n"
"\n"
" $ perl -E 'use Struct::Dumb; struct Point => [qw( x y )]; Point(1,2)-"
">x(3)'  main::Point->x invoked with arguments at -e line 1.\n"
"\n"
"Objects in this class are (currently) backed by an ARRAY reference store, "
"though this is an internal implementation detail and should not be relied on "
"by using code. Attempting to dereference the object as an ARRAY will throw "
"an exception."
msgstr ""

#. leap/perl-Sub-Delete/summary
#, fuzzy
msgid "Perl module enabling one to delete subroutines"
msgstr "Interface Perl pour objets URI"

#. leap/perl-Sub-Delete/description
msgid ""
"This module provides one function, 'delete_sub', that deletes the subroutine "
"whose name is passed to it. (To load the module without importing the "
"function, write 'use Sub::Delete();'.)\n"
"\n"
"This does more than simply undefine the subroutine in the manner of 'undef "
"&foo', which leaves a stub that can trigger AUTOLOAD (and, consequently, "
"won't work for deleting methods). The subroutine is completely obliterated "
"from the symbol table (though there may be references to it elsewhere, "
"including in compiled code)."
msgstr ""

#. leap/perl-Sub-Exporter/summary
msgid "a sophisticated exporter for custom-built routines"
msgstr ""

#. leap/perl-Sub-Exporter/description
msgid ""
"*ACHTUNG!* If you're not familiar with Exporter or exporting, read the Sub::"
"Exporter::Tutorial manpage first!"
msgstr ""

#. leap/perl-Sub-Exporter-ForMethods/summary
msgid "Helper routines for using Sub::Exporter to build methods"
msgstr ""

#. leap/perl-Sub-Exporter-ForMethods/description
msgid ""
"The synopsis section, above, looks almost indistinguishable from any other "
"use of Sub::Exporter, apart from the use of 'method_installer'. It is nearly "
"indistinguishable in behavior, too. The only change is that subroutines "
"exported from Method::Builder into named slots in Vehicle::Autobot will be "
"wrapped in a subroutine called 'Vehicle::Autobot::transform'. This will "
"insert a named frame into stack traces to aid in debugging.\n"
"\n"
"More importantly (for the author, anyway), they will not be removed by "
"namespace::autoclean. This makes the following code work:\n"
"\n"
"  package MyLibrary;\n"
"\n"
"  use Math::Trig qw(tan);         # uses Exporter.pm   use String::Truncate "
"qw(trunc); # uses Sub::Exporter's defaults\n"
"\n"
"  use Sub::Exporter::ForMethods qw(method_installer);   use Mixin::Linewise "
"{ installer => method_installer }, qw(read_file);\n"
"\n"
"  use namespace::autoclean;\n"
"\n"
"  ...\n"
"\n"
"  1;\n"
"\n"
"After MyLibrary is compiled, 'namespace::autoclean' will remove 'tan' and "
"'trunc' as foreign contaminants, but will leave 'read_file' in place. It "
"will also remove 'method_installer', an added win."
msgstr ""

#. leap/perl-Sub-Exporter-GlobExporter/summary
msgid "Export Shared Globs with Sub::Exporter Collectors"
msgstr ""

#. leap/perl-Sub-Exporter-GlobExporter/description
msgid ""
"Sub::Exporter::GlobExporter provides only one routine, 'glob_exporter', "
"which may be called either by its full name or may be imported on request.\n"
"\n"
"  my $exporter = glob_exporter( $default_name, $globref_locator );\n"
"\n"
"The routine returns a collection validator|Sub::Exporter/Collector "
"Configuration that will export a glob into the importing package. It will "
"export it under the name '$default_name', unless an alternate name is given "
"(as shown above). The glob that is installed is specified by the "
"'$globref_locator', which can be either the globref itself, or a reference "
"to a string which will be called on the exporter\n"
"\n"
"For an example, see the /SYNOPSIS, in which a method is defined to produce "
"the globref to share. This allows the glob-exporting package to be "
"subclassed, so the subclass may choose to either re-use the same glob when "
"exporting or to export a new one.\n"
"\n"
"If there are entries in the arguments to the globref-exporting collector "
"_other_ than those beginning with a dash, a hashref of them will be passed "
"to the globref locator. In other words, if we were to write this:\n"
"\n"
"  use Shared::Symbol '$Symbol' => { arg => 1, -as => 2 };\n"
"\n"
"It would result in a call like the following:\n"
"\n"
"  my $globref = Shared::Symbol->_shared_globref({ arg => 1 });"
msgstr ""

#. leap/perl-Sub-Exporter-Progressive/summary
msgid "Only use Sub::Exporter if you need it"
msgstr ""

#. leap/perl-Sub-Exporter-Progressive/description
msgid ""
"Sub::Exporter is an incredibly powerful module, but with that power comes "
"great responsibility, er- as well as some runtime penalties. This module is "
"a 'Sub::Exporter' wrapper that will let your users just use Exporter if all "
"they are doing is picking exports, but use 'Sub::Exporter' if your users try "
"to use 'Sub::Exporter''s more advanced features, like renaming exports, if "
"they try to use them.\n"
"\n"
"Note that this module will export '@EXPORT', '@EXPORT_OK' and '%EXPORT_TAGS' "
"package variables for 'Exporter' to work. Additionally, if your package uses "
"advanced 'Sub::Exporter' features like currying, this module will only ever "
"use 'Sub::Exporter', so you might as well use it directly."
msgstr ""

#. leap/perl-Sub-Identify/summary
msgid "Retrieve names of code references"
msgstr ""

#. leap/perl-Sub-Identify/description
msgid ""
"'Sub::Identify' allows you to retrieve the real name of code references.\n"
"\n"
"It provides six functions, all of them taking a code reference.\n"
"\n"
"'sub_name' returns the name of the code reference passed as an argument (or "
"'__ANON__' if it's an anonymous code reference), 'stash_name' returns its "
"package, and 'sub_fullname' returns the concatenation of the two.\n"
"\n"
"'get_code_info' returns a list of two elements, the package and the "
"subroutine name (in case of you want both and are worried by the speed.)\n"
"\n"
"In case of subroutine aliasing, those functions always return the original "
"name.\n"
"\n"
"'get_code_location' returns a two-element list containing the file name and "
"the line number where the subroutine has been defined.\n"
"\n"
"'is_sub_constant' returns a boolean value indicating whether the subroutine "
"is a constant or not."
msgstr ""

#. leap/perl-Sub-Info/summary
#, fuzzy
msgid "Tool for inspecting subroutines"
msgstr "Outil pour la gravure de CD"

#. leap/perl-Sub-Info/description
#, fuzzy
msgid "Tool to inspect subroutines."
msgstr "Outils pour configurer les cartes atheros"

#. leap/perl-Sub-Install/summary
msgid "Install subroutines into packages easily"
msgstr ""

#. leap/perl-Sub-Install/description
msgid ""
"This module makes it easy to install subroutines into packages without the "
"unsightly mess of 'no strict' or typeglobs lying about where just anyone can "
"see them."
msgstr ""

#. leap/perl-Sub-Name/summary
msgid "(Re)name a sub"
msgstr ""

#. leap/perl-Sub-Name/description
msgid "This module has only one function, which is also exported by default:"
msgstr ""

#. leap/perl-Sub-Override/summary
#. leap/perl-Sub-Override/description
#, fuzzy
msgid "Perl extension for easily overriding subroutines"
msgstr "Interface Perl pour objets URI"

#. leap/perl-Sub-Quote/summary
msgid "Efficient generation of subroutines via string eval"
msgstr ""

#. leap/perl-Sub-Quote/description
msgid ""
"This package provides performant ways to generate subroutines from strings."
msgstr ""

#. leap/perl-Sub-Retry/summary
msgid "Retry $N Times"
msgstr ""

#. leap/perl-Sub-Retry/description
msgid "Sub::Retry provides the function named 'retry'."
msgstr ""

#. leap/perl-Sub-Spec/summary
#. leap/perl-Sub-Spec/description
msgid "Subroutine metadata specification"
msgstr ""

#. leap/perl-Sub-Uplevel/summary
msgid "Apparently run a function in a higher stack frame"
msgstr ""

#. leap/perl-Sub-Uplevel/description
msgid ""
"Like Tcl's uplevel() function, but not quite so dangerous. The idea is just "
"to fool caller(). All the really naughty bits of Tcl's uplevel() are avoided."
msgstr ""

#. leap/perl-Switch/summary
msgid "A switch statement for Perl, do not use if you can use given/when"
msgstr ""

#. leap/perl-Switch/description
msgid ""
"The Switch.pm module implements a generalized case mechanism that covers "
"most (but not all) of the numerous possible combinations of switch and case "
"values described above.\n"
"\n"
"The module augments the standard Perl syntax with two new control "
"statements: 'switch' and 'case'. The 'switch' statement takes a single "
"scalar argument of any type, specified in parentheses. 'switch' stores this "
"value as the current switch value in a (localized) control variable. The "
"value is followed by a block which may contain one or more Perl statements "
"(including the 'case' statement described below). The block is "
"unconditionally executed once the switch value has been cached.\n"
"\n"
"A 'case' statement takes a single scalar argument (in mandatory parentheses "
"if it's a variable; otherwise the parens are optional) and selects the "
"appropriate type of matching between that argument and the current switch "
"value. The type of matching used is determined by the respective types of "
"the switch value and the 'case' argument, as specified in Table 1. If the "
"match is successful, the mandatory block associated with the 'case' "
"statement is executed.\n"
"\n"
"In most other respects, the 'case' statement is semantically identical to an "
"'if' statement. For example, it can be followed by an 'else' clause, and can "
"be used as a postfix statement qualifier.\n"
"\n"
"However, when a 'case' block has been executed control is automatically "
"transferred to the statement after the immediately enclosing 'switch' block, "
"rather than to the next statement within the block. In other words, the "
"success of any 'case' statement prevents other cases in the same scope from "
"executing. But see the \"Allowing fall-through\" manpage below.\n"
"\n"
"Together these two new statements provide a fully generalized case "
"mechanism:\n"
"\n"
"        use Switch;\n"
"\n"
"        \n"
"\n"
"        %special = ( woohoo => 1,  d'oh => 1 );\n"
"\n"
"        while (<>) { \t    chomp;             switch ($_) "
"{                 case (%special) { print \"homer\\n\"; }      # if "
"$special{$_}                 case /[a-z]/i   { print \"alpha\\n\"; }      # "
"if $_ =~ /a-z/i                 case [1..9]     { print \"small num\\n\"; }  "
"# if $_ in [1..9]                 case { $_[0] >= 10 } { print \"big num\\n"
"\"; } # if $_ >= 10                 print \"must be punctuation\\n\" case /"
"\\W/;  # if $_ ~= /\\W/ \t    }         }\n"
"\n"
"Note that 'switch'es can be nested within 'case' (or any other) blocks, and "
"a series of 'case' statements can try different types of matches -- hash "
"membership, pattern match, array intersection, simple equality, etc. -- "
"against the same switch value.\n"
"\n"
"The use of intersection tests against an array reference is particularly "
"useful for aggregating integral cases:\n"
"\n"
"        sub classify_digit         {                 switch ($_[0]) { case "
"0            { return 'zero' }                                  case "
"[2,4,6,8]    { return 'even' }                                  case "
"[1,3,5,7,9]  { return 'odd' }                                  case /[A-F]/"
"i     { return 'hex' }                                }         }"
msgstr ""

#. leap/perl-Symbol-Table/summary
#, fuzzy
msgid "An easy interface to symbol tables"
msgstr "Interface Perl vers Syslog"

#. leap/perl-Symbol-Table/description
msgid ""
"Symbol::Table allows the user to manipulate Perl's symbol table\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Greg London"
msgstr ""

#. leap/perl-Symbol-Util/summary
#, fuzzy
msgid "Additional utils for Perl symbols manipulation"
msgstr "Modules additionnels pour Atlantik"

#. leap/perl-Symbol-Util/description
msgid ""
"This module provides a set of additional functions useful for Perl symbols "
"manipulation.\n"
"\n"
"All Perl symbols from the same package are organized as a stash. Each symbol "
"(glob) contains one or more of following slots: 'SCALAR', 'ARRAY', 'HASH', "
"'CODE', 'IO', 'FORMAT'. These slots are also accessible as standard "
"variables or bare words.\n"
"\n"
"The Perl symbols table is directly accessible with typeglob prefix but it "
"can be difficult to read and problematic if strict mode is used. Also the "
"access to stash, glob and one of its slot have different syntax notation.\n"
"\n"
"'stash' and 'fetch_glob' functions gets stash or glob without need to use "
"'no strict 'refs''.\n"
"\n"
"'delete_glob' function allows to delete specific slot of symbol name without "
"deleting others.\n"
"\n"
"'delete_sub' removes the symbol from class API. This symbol won't be "
"available as an object method.\n"
"\n"
"'export_glob' function exports a glob to the target package.\n"
"\n"
"'export_package' works like the Exporter manpage module and allows to export "
"symbols from one package to other.\n"
"\n"
"'unexport_package' allows to delete previously exported symbols."
msgstr ""

#. leap/perl-Syntax-Keyword-Junction/summary
msgid "Perl6 style Junction operators in Perl5"
msgstr ""

#. leap/perl-Syntax-Keyword-Try/summary
msgid "C<try/catch/finally> syntax for perl"
msgstr ""

#. leap/perl-Syntax-Keyword-Try/description
msgid ""
"This module provides a syntax plugin that implements exception-handling "
"semantics in a form familiar to users of other languages, being built on a "
"block labeled with the 'try' keyword, followed by at least one of a 'catch' "
"or 'finally' block.\n"
"\n"
"As well as providing a handy syntax for this useful behaviour, this module "
"also serves to contain a number of code examples for how to implement parser "
"plugins and manipulate optrees to provide new syntax and behaviours for perl "
"code."
msgstr ""

#. leap/perl-Sys-CPU/summary
msgid ""
"Perl extension for getting CPU information. Currently only number of CPU[cut]"
msgstr ""

#. leap/perl-Sys-CPU/description
msgid ""
"In responce to a post on perlmonks.org, a module for counting the number of "
"CPU's on a system. Support has now also been added for type of CPU and clock "
"speed. While much of the code is from UNIX::Processors, win32 support has "
"been added (but not tested)."
msgstr ""

#. leap/perl-Sys-Hostname-Long/summary
msgid "Try every conceivable way to get full hostname"
msgstr ""

#. leap/perl-Sys-Hostname-Long/description
msgid ""
"How to get the host full name in perl on multiple operating systems (mac, "
"windows, unix* etc)"
msgstr ""

#. leap/perl-Sys-LoadAvg/summary
msgid "Perl extension for accessing system CPU load averages"
msgstr ""

#. leap/perl-Sys-LoadAvg/description
msgid "Module for accessing System load averages."
msgstr ""

#. leap/perl-Sys-SigAction/summary
#, fuzzy
msgid "Perl extension for Consistent Signal Handling"
msgstr "Interface Perl pour objets URI"

#. leap/perl-Sys-SigAction/description
msgid ""
"Prior to version 5.8.0 perl implemented 'unsafe' signal handling. The reason "
"it is consider unsafe, is that there is a risk that a signal will arrive, "
"and be handled while perl is changing internal data structures. This can "
"result in all kinds of subtle and not so subtle problems. For this reason it "
"has always been recommended that one do as little as possible in a signal "
"handler, and only variables that already exist be manipulated.\n"
"\n"
"Perl 5.8.0 and later versions implements 'safe' signal handling on platforms "
"which support the POSIX sigaction() function. This is accomplished by having "
"perl note that a signal has arrived, but deferring the execution of the "
"signal handler until such time as it is safe to do so. Unfortunately these "
"changes can break some existing scripts, if they depended on a system "
"routine being interrupted by the signal's arrival. The perl 5.8.0 "
"implementation was modified further in version 5.8.2.\n"
"\n"
"From the perl 5.8.2 *perlvar* man page:\n"
"\n"
"   The default delivery policy of signals changed in Perl 5.8.0    from "
"immediate (also known as \"unsafe\") to deferred, also    known as \"safe "
"signals\".\n"
"\n"
"The implementation of this changed the 'sa_flags' with which the signal "
"handler is installed by perl, and it causes some system routines (like "
"connect()) to return EINTR, instead of another error when the signal "
"arrives. The problem comes when the code that made the system call sees the "
"EINTR code and decides it's going to call it again before returning. Perl "
"doesn't do this but some libraries do, including for instance, the Oracle "
"OCI library.\n"
"\n"
"Thus the 'deferred signal' approach (as implemented by default in perl 5.8 "
"and later) results in some system calls being retried prior to the signal "
"handler being called by perl. This breaks timeout logic for DBD-Oracle which "
"works with earlier versions of perl. This can be particularly vexing, when, "
"for instance, the host on which a database resides is not available: 'DBI-"
">connect()' hangs for minutes before returning an error (and cannot even be "
"interrupted with control-C, even when the intended timeout is only seconds). "
"This is because SIGINT appears to be deferred as well. The result is that it "
"is impossible to implement open timeouts with code that looks like this in "
"perl 5.8.0 and later:\n"
"\n"
"   eval {       eval {          local $SIG{ALRM} = sub { die \"timeout"
"\" };          alarm 2;          $sth = DBI->connect(...);          alarm "
"0;       };       alarm 0;       die if $@;    };\n"
"\n"
"Or as the author of bug #50628 pointed out, might probably better be written "
"as:\n"
"\n"
"   eval {       local $SIG{ALRM} = sub { die \"timeout\" };       eval "
"{          alarm 2;          $sth = DBI->connect(...);          alarm "
"0;       };       alarm 0;       die if $@;    };\n"
"\n"
"The solution, if your system has the POSIX sigaction() function, is to use "
"perl's 'POSIX::sigaction()' to install the signal handler. With "
"'sigaction()', one gets control over both the signal mask, and the "
"'sa_flags' that are used to install the handler. Further, with perl 5.8.2 "
"and later, a 'safe' switch is provided which can be used to ask for safe(r) "
"signal handling.\n"
"\n"
"Using sigaction() ensures that the system call won't be resumed after it's "
"interrupted, so long as die is called within the signal handler. This is no "
"longer the case when one uses '$SIG{name}' to set signal handlers in perls "
">= 5.8.0.\n"
"\n"
"The usage of sigaction() is not well documented however, and in perl "
"versions less than 5.8.0, it does not work at all. (But that's OK, because "
"just setting '$SIG' does work in that case.) Using sigaction() requires "
"approximately 4 or 5 lines of code where previously one only had to set a "
"code reference into the %SIG hash.\n"
"\n"
"Unfortunately, at least with perl 5.8.0, the result is that doing this "
"effectively reverts to the 'unsafe' signals behavior. It is not clear "
"whether this would be the case in perl 5.8.2, since the safe flag can be "
"used to ask for safe signal handling. I suspect this separates the logic "
"which uses the 'sa_flags' to install the handler, and whether deferred "
"signal handling is used.\n"
"\n"
"The reader should also note, that the behavior of the 'safe' attribute is "
"not consistent with what this author expected. Specifically, it appears to "
"disable signal masking. This can be examined further in the t/safe.t and the "
"t/mask.t regression tests. Never-the-less, Sys::SigAction provides an easy "
"mechanism for the user to recover the pre-5.8.0 behavior for signal "
"handling, and the mask attribute clearly works. (see t/mask.t) If one is "
"looking for specific safe signal handling behavior that is considered "
"broken, and the breakage can be demonstrated, then a patch to t/safe.t would "
"be most welcome.\n"
"\n"
"This module wraps up the POSIX:: routines and objects necessary to call "
"sigaction() in a way that is as efficient from a coding perspective as just "
"setting a localized '$SIG{SIGNAL}' with a code reference. Further, the user "
"has control over the 'sa_flags' passed to sigaction(). By default, if no "
"additional args are passed to sigaction(), then the signal handler will be "
"called when a signal (such as SIGALRM) is delivered.\n"
"\n"
"Since sigaction() is not fully functional in perl versions less than 5.8, "
"this module implements equivalent behavior using the standard '%SIG' array. "
"The version checking and implementation of the 'right' code is handled by "
"this module, so the user does not have to write perl version dependent code. "
"The attrs hashref argument to set_sig_handler() is silently ignored, in perl "
"versions less than 5.8. When this module was developed it was tested on perl "
"5.005 on solaris. That was in 2004. Now only perl versions >= 5.6 are "
"supported. If you want this to work on perl 5.5 you will have comment out "
"\"use warnings\" everywhere.\n"
"\n"
"It is hoped that with the use of this module, your signal handling behavior "
"can be coded in a way that does not change from one perl version to the "
"next, and that sigaction() will be easier for you to use."
msgstr ""

#. leap/perl-Sys-Virt/summary
msgid "Represent and manage a libvirt hypervisor connection"
msgstr ""

#. leap/perl-Sys-Virt/description
msgid ""
"The Sys::Virt module provides a Perl XS binding to the libvirt virtual "
"machine management APIs. This allows machines running within arbitrary "
"virtualization containers to be managed with a consistent API."
msgstr ""

#. leap/perl-Sysadm-Install/summary
msgid "Typical installation tasks for system administrators"
msgstr ""

#. leap/perl-Sysadm-Install/description
msgid ""
"Have you ever wished for your installation shell scripts to run "
"reproducibly, without much programming fuzz, and even with optional logging "
"enabled? Then give up shell programming, use Perl.\n"
"\n"
"'Sysadm::Install' executes shell-like commands performing typical "
"installation tasks: Copying files, extracting tarballs, calling 'make'. It "
"has a 'fail once and die' policy, meticulously checking the result of every "
"operation and calling 'die()' immediately if anything fails.\n"
"\n"
"'Sysadm::Install' also supports a _dry_run_ mode, in which it logs "
"everything, but suppresses any write actions. Dry run mode is enabled by "
"calling 'Sysadm::Install::dry_run(1)'. To switch back to normal, call "
"'Sysadm::Install::dry_run(0)'.\n"
"\n"
"As of version 0.17, 'Sysadm::Install' supports a _confirm_ mode, in which it "
"interactively asks the user before running any of its functions (just like "
"'rm -i'). _confirm_ mode is enabled by calling 'Sysadm::Install::"
"confirm(1)'. To switch back to normal, call 'Sysadm::Install::confirm(0)'.\n"
"\n"
"'Sysadm::Install' is fully Log4perl-enabled. To start logging, just "
"initialize 'Log::Log4perl'. 'Sysadm::Install' acts as a wrapper class, "
"meaning that file names and line numbers are reported from the calling "
"program's point of view."
msgstr ""

#. leap/perl-SystemPerl/summary
msgid "SystemPerl Language Extension to SystemC"
msgstr ""

#. leap/perl-SystemPerl/description
msgid ""
"SystemPerl is a version of the SystemC language. It is designed to expand "
"text so that needless repetition in the language is minimized. By using the "
"sp_preproc manpage, SystemPerl files can be expanded into C++ files at "
"compile time, or expanded in place to make them valid stand-alone SystemC "
"files.\n"
"\n"
"The concept of SystemPerl is based upon the AUTOS in the the verilog-mode "
"manpage package for Emacs, by the same author."
msgstr ""

#. leap/perl-SystemPerl/perl-SystemPerl-devel/summary
#, fuzzy
msgid "Development files for perl-SystemPerl"
msgstr "Fichiers de développement pour lzo"

#. leap/perl-SystemPerl/perl-SystemPerl-devel/description
#, fuzzy
msgid ""
"The perl-SystemPerl-devel package contains libraries and header files for "
"developing applications that use perl-SystemPerl."
msgstr ""
"Ce paquet contient le démon PPP (Point-to-Point Protocol) appelé pppd ainsi "
"de d'autres utilitaires, de la documentation et des fichiers exemples pour "
"PPP.\n"
"\n"
"PPP constitue un mode de transport de paquets de données IP et IPX par "
"lignes série ou autres connexions Point-à-Point (par exemple par modem).\n"
"\n"
"Le démon PPP gère les détails, à commencer par l'établissement de la "
"connexion série jusqu'à la mise en place de l'interface réseau et "
"l'exécution des négociations PPP.\n"
"\n"
"PPP requiert la présence d'un pilote PPP soit sous forme de module séparé, "
"soit compilé en permanence dans le noyau\n"
"\n"
"Ce paquet vous est nécessaire pour pouvoir vous connecter à Internet par "
"exemple par lignes analogiques (modem).\n"
"\n"
"Le paquet wvdial vous aide lors de la configuration de PPP. Vous pourrez "
"trouver wvdial dans la sélection des paquet de YaST, série n. Il devrait "
"déjà être installé par défaut. Le plus simple est de lancer wvdial dans YaST "
"à l'aide des options \"Administration du système ->\", \"Configurer le "
"réseau ->\" et \"Configurer le réseau PPP\".\n"
"\n"
"Vous pouvez aussi le lancer en ligne de commande avec wvdial.lxdialog\n"
"\n"
"Si vous avez déjà configuré wvdial et si vous voulez seulement démarrer, un "
"appel à wvdial sera suffisant."

#. leap/perl-TAP-Harness-JUnit/summary
msgid "Generate JUnit compatible output from TAP results"
msgstr ""

#. leap/perl-TAP-Harness-JUnit/description
msgid ""
"The only difference between this module and _TAP::Harness_ is that this "
"module adds the optional arguments 'xmlfile', 'package', and 'namemangle' "
"that cause the output to be formatted into XML in a format similar to the "
"one that is produced by the JUnit testing framework."
msgstr ""

#. leap/perl-Task-Kensho-Async/summary
msgid "Glimpse at an Enlightened Perl: Async Programming"
msgstr ""

#. leap/perl-Task-Kensho-Async/description
#. leap/perl-Task-Kensho-CLI/description
#. leap/perl-Task-Kensho-Config/description
#. leap/perl-Task-Kensho-Dates/description
#. leap/perl-Task-Kensho-Exceptions/description
#. leap/perl-Task-Kensho-ModuleDev/description
#. leap/perl-Task-Kensho-OOP/description
#. leap/perl-Task-Kensho-Scalability/description
#. leap/perl-Task-Kensho-Testing/description
#. leap/perl-Task-Kensho-XML/description
msgid ""
"From http://en.wikipedia.org/wiki/Kensho:\n"
"\n"
"    Kenshō (見性) (C. Wu) is a Japanese term for enlightenment experiences "
"-     most commonly used within the confines of Zen Buddhism - literally     "
"meaning \"seeing one's nature\"[1] or \"true self.\"[2] It generally     "
"\"refers to the realization of nonduality of subject and object.\"[3]\n"
"\n"
"Task::Kensho is a list of recommended modules for Enlightened Perl "
"development. CPAN is wonderful, but there are too many wheels and you have "
"to pick and choose amongst the various competing technologies.\n"
"\n"
"The plan is for Task::Kensho to be a rough testing ground for ideas that go "
"into among other things the Enlightened Perl Organisation Extended Core (EPO-"
"EC).\n"
"\n"
"The modules that are bundled by Task::Kensho are broken down into several "
"categories and are still being considered. They are all taken from various "
"top 100 most used perl modules lists and from discussions with various "
"subject matter experts in the Perl Community. That said, this bundle does "
"_not_ follow the guidelines established for the EPO-EC for peer review via "
"industry advisers.\n"
"\n"
"Starting in 2011, Task::Kensho split its sub-groups of modules into "
"individually-installable tasks. Each Task::Kensho sub-task is listed at the "
"beginning of its section in this documentation.\n"
"\n"
"When installing Task::Kensho itself, you will be asked to install each sub-"
"task in turn, or you can install individual tasks separately. These "
"individual tasks will always install all their modules by default. This "
"facilitates the ease and simplicity the distribution aims to achieve."
msgstr ""

#. leap/perl-Task-Kensho-CLI/summary
msgid "Glimpse at an Enlightened Perl: Useful Command-line Tools"
msgstr ""

#. leap/perl-Task-Kensho-Config/summary
msgid "Glimpse at an Enlightened Perl: Config Modules"
msgstr ""

#. leap/perl-Task-Kensho-Dates/summary
msgid "Glimpse at an Enlightened Perl: Date Modules"
msgstr ""

#. leap/perl-Task-Kensho-Exceptions/summary
msgid "Glimpse at an Enlightened Perl: Exception Handling"
msgstr ""

#. leap/perl-Task-Kensho-ModuleDev/summary
msgid "Glimpse at an Enlightened Perl: Module Development"
msgstr ""

#. leap/perl-Task-Kensho-OOP/summary
msgid "Glimpse at an Enlightened Perl: Object Oriented Programming"
msgstr ""

#. leap/perl-Task-Kensho-Scalability/summary
msgid "Glimpse at an Enlightened Perl: Scalability"
msgstr ""

#. leap/perl-Task-Kensho-Testing/summary
msgid "Glimpse at an Enlightened Perl: Testing"
msgstr ""

#. leap/perl-Task-Kensho-XML/summary
msgid "Glimpse at an Enlightened Perl: XML Development"
msgstr ""

#. leap/perl-Task-Moose/summary
msgid "Moose in a box"
msgstr ""

#. leap/perl-Task-Moose/description
msgid ""
"This Task installs Moose and then optionally installs a number of Moose "
"extensions listed below. This list is meant to be comprehensive, so if I "
"missed something please let me know."
msgstr ""

#. leap/perl-Task-Weaken/summary
msgid "Ensure that a platform has weaken support"
msgstr ""

#. leap/perl-Task-Weaken/description
msgid ""
"One recurring problem in modules that use Scalar::Util's 'weaken' function "
"is that it is not present in the pure-perl variant.\n"
"\n"
"While this isn't necessarily always a problem in a straight CPAN-based Perl "
"environment, some operating system distributions only include the pure-Perl "
"versions, don't include the XS version, and so weaken is then \"missing\" "
"from the platform, *despite* passing a dependency on Scalar::Util "
"successfully.\n"
"\n"
"Most notably this is RedHat Linux at time of writing, but other come and go "
"and do the same thing, hence \"recurring problem\".\n"
"\n"
"The normal solution is to manually write tests in each distribution to "
"ensure that 'weaken' is available.\n"
"\n"
"This restores the functionality testing to a dependency you do once in your "
"_Makefile.PL_, rather than something you have to write extra tests for each "
"time you write a module.\n"
"\n"
"It should also help make the package auto-generators for the various "
"operating systems play more nicely, because it introduces a dependency that "
"they *have* to have a proper weaken in order to work."
msgstr ""

#. leap/perl-Template-GD/summary
#. leap/perl-Template-GD/description
#, fuzzy
msgid "Template::GD Perl module"
msgstr "Net::SSLeay Perl Module"

#. leap/perl-Template-Toolkit/summary
#. leap/perl-Template-Toolkit/description
msgid "Template Processing System"
msgstr ""

#. leap/perl-Term-Encoding/summary
msgid "Detect encoding of the current terminal"
msgstr ""

#. leap/perl-Term-Encoding/description
msgid ""
"Term::Encoding is a simple module to detect an encoding the current terminal "
"expects, in various ways."
msgstr ""

#. leap/perl-Term-ProgressBar/summary
msgid "Provide a Progress Meter On a Standard Terminal"
msgstr ""

#. leap/perl-Term-ProgressBar/description
msgid ""
"Term::ProgressBar provides a simple progress bar on the terminal, to let the "
"user know that something is happening, roughly how much stuff has been done, "
"and maybe an estimate at how long remains.\n"
"\n"
"A typical use sets up the progress bar with a number of items to do, and "
"then calls update to update the bar whenever an item is processed.\n"
"\n"
"Often, this would involve updating the progress bar many times with no user-"
"visible change. To avoid unnecessary work, the update method returns a "
"value, being the update value at which the user will next see a change. By "
"only calling update when the current value exceeds the next update value, "
"the call overhead is reduced.\n"
"\n"
"Remember to call the '$progress->update($max_value)' when the job is done to "
"get a nice 100% done bar.\n"
"\n"
"A progress bar by default is simple; it just goes from left-to-right, "
"filling the bar with '=' characters. These are called *major* characters. "
"For long-running jobs, this may be too slow, so two additional features are "
"available: a linear completion time estimator, and/or a *minor* character: "
"this is a character that _moves_ from left-to-right on the progress bar (it "
"does not fill it as the major character does), traversing once for each "
"major-character added. This exponentially increases the granularity of the "
"bar for the same width."
msgstr ""

#. leap/perl-Term-ReadKey/summary
msgid "Module for Simple Terminal Control"
msgstr ""

#. leap/perl-Term-ReadKey/description
msgid ""
"This module, ReadKey, provides ioctl control for terminals and Win32 "
"consoles so the input modes can be changed (thus allowing reads of a single "
"character at a time), and also provides non-blocking reads of stdin, as well "
"as several other terminal related features, including retrieval/modification "
"of the screen size, and retrieval/modification of the control characters."
msgstr ""

#. leap/perl-Term-ReadPassword/summary
msgid "Term::ReadPassword - Asking the user for a password"
msgstr ""

#. leap/perl-Term-ReadPassword/description
msgid ""
"This module lets you ask the user for a password in the traditional way, "
"from the keyboard, without echoing.\n"
"\n"
"This is not intended for use over the web; user authentication over the web "
"is another matter entirely. Also, this module should generally be used in "
"conjunction with Perl's crypt() function, sold separately.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Tom Phoenix <rootbeer@redcat.com>"
msgstr ""

#. leap/perl-Term-Table/summary
msgid "Format a header and rows into a table"
msgstr ""

#. leap/perl-Term-Table/description
msgid ""
"This is used by some failing tests to provide diagnostics about what has "
"gone wrong. This module is able to generic format rows of data into tables."
msgstr ""

#. leap/perl-Term-UI/summary
msgid "Term::ReadLine UI made easy"
msgstr ""

#. leap/perl-Term-UI/description
msgid ""
"'Term::UI' is a transparent way of eliminating the overhead of having to "
"format a question and then validate the reply, informing the user if the "
"answer was not proper and re-issuing the question.\n"
"\n"
"Simply give it the question you want to ask, optionally with choices the "
"user can pick from and a default and 'Term::UI' will DWYM.\n"
"\n"
"For asking a yes or no question, there's even a shortcut."
msgstr ""

#. leap/perl-TermReadLine-Gnu/summary
msgid "Perl extension for the GNU Readline/History Library"
msgstr ""

#. leap/perl-TermReadLine-Gnu/description
msgid ""
"This is an implementation of Term::ReadLine using the GNU Readline/History "
"Library. This package also has the interface with the almost all functions "
"and variables which are documented in the GNU Readline/History Library "
"Manual.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Hiroo Hayashi <hiroo.hayashi@computer.org>"
msgstr ""

#. leap/perl-Test-Assert/summary
msgid "Assertion methods for those who like JUnit."
msgstr ""

#. leap/perl-Test-Assert/description
msgid ""
"This class provides a set of assertion methods useful for writing tests. The "
"API is based on JUnit4 and the Test::Unit::Lite manpage and the methods die "
"on failure.\n"
"\n"
"These assertion methods might be not useful for common the Test::Builder "
"manpage-based (the Test::Simple manpage, the Test::More manpage, etc.) test "
"units.\n"
"\n"
"The assertion methods can be used in class which is derived from 'Test::"
"Assert' or used as standard Perl functions after importing them into user's "
"namespace.\n"
"\n"
"'Test::Assert' can also wrap standard the Test::Simple manpage, the Test::"
"More manpage or other the Test::Builder manpage-based tests.\n"
"\n"
"The assertions can be also used for run-time checking."
msgstr ""

#. leap/perl-Test-Base/summary
#, fuzzy
msgid "A Data Driven Testing Framework"
msgstr "Bean Scripting Framework"

#. leap/perl-Test-Base/description
msgid ""
"Testing is usually the ugly part of Perl module authoring. Perl gives you a "
"standard way to run tests with Test::Harness, and basic testing primitives "
"with Test::More. After that you are pretty much on your own to develop a "
"testing framework and philosophy. Test::More encourages you to make your own "
"framework by subclassing Test::Builder, but that is not trivial.\n"
"\n"
"Test::Base gives you a way to write your own test framework base class that "
"_is_ trivial. In fact it is as simple as two lines:\n"
"\n"
"    package MyTestFramework;     use Test::Base -Base;\n"
"\n"
"A module called 'MyTestFramework.pm' containing those two lines, will give "
"all the power of Test::More and all the power of Test::Base to every test "
"file that uses it. As you build up the capabilities of 'MyTestFramework', "
"your tests will have all of that power as well.\n"
"\n"
"'MyTestFramework' becomes a place for you to put all of your reusable "
"testing bits. As you write tests, you will see patterns and duplication, and "
"you can \"upstream\" them into 'MyTestFramework'. Of course, you don't have "
"to subclass Test::Base at all. You can use it directly in many applications, "
"including everywhere you would use Test::More.\n"
"\n"
"Test::Base concentrates on offering reusable data driven patterns, so that "
"you can write tests with a minimum of code. At the heart of all testing you "
"have inputs, processes and expected outputs. Test::Base provides some clean "
"ways for you to express your input and expected output data, so you can "
"spend your\n"
"\n"
"      time focusing on that rather than your code scaffolding."
msgstr ""

#. leap/perl-Test-CChecker/summary
msgid ""
"Test-time utilities for checking C headers, libraries, or OS features (D[cut]"
msgstr ""

#. leap/perl-Test-CChecker/description
msgid ""
"*DEPRECATED*: The intention of this module was always to test Alien modules "
"(both Alien::Base based and non-Alien::Base based modules). It has a number "
"of shortcomings that I believe to be better addressed by Test::Alien, so "
"please consider using that for new projects, or even migrating existing "
"code.\n"
"\n"
"This module is a very thin convenience wrapper around ExtUtils::CChecker to "
"make it useful for use in a test context. It is intended for use with Alien "
"modules which need to verify that libraries work as intended with the "
"Compiler and flags used by Perl to build XS modules.\n"
"\n"
"By default this module is very quiet, hiding all output using Capture::Tiny "
"unless there is a failure, in which case you will see the commands, flags "
"and output used."
msgstr ""

#. leap/perl-Test-CPAN-Meta/summary
msgid "Validate your CPAN META.yml files"
msgstr ""

#. leap/perl-Test-CPAN-Meta/description
msgid ""
"This distribution was written to ensure that a META.yml file, provided with "
"a standard distribution uploaded to CPAN, meets the specifications that are "
"slowly being introduced to module uploads, via the use of package makers and "
"installers such as the ExtUtils::MakeMaker manpage, the Module::Build "
"manpage and the Module::Install manpage.\n"
"\n"
"See the CPAN::Meta manpage for further details of the CPAN Meta "
"Specification."
msgstr ""

#. leap/perl-Test-CheckChanges/summary
msgid "Check that the Changes file matches the distribution."
msgstr ""

#. leap/perl-Test-CheckChanges/description
msgid ""
"This module checks that you _Changes_ file has an entry for the current "
"version of the *Module* being tested.\n"
"\n"
"The version information for the distribution being tested is taken out of "
"the Build data, or if that is not found, out of the Makefile.\n"
"\n"
"It then attempts to open, in order, a file with the name _Changes_ or "
"_CHANGES_.\n"
"\n"
"The _Changes_ file is then parsed for version numbers. If one and only one "
"of the version numbers matches the test passes. Otherwise the test fails.\n"
"\n"
"A message with the current version is printed if the test passes, otherwise "
"dialog messages are printed to help explain the failure.\n"
"\n"
"The _examples_ directory contains examples of the different formats of "
"_Changes_ files that are recognized."
msgstr ""

#. leap/perl-Test-CheckDeps/summary
msgid "Check for presence of dependencies"
msgstr ""

#. leap/perl-Test-CheckDeps/description
msgid ""
"This module adds a test that assures all dependencies have been installed "
"properly. If requested, it can bail out all testing on error."
msgstr ""

#. leap/perl-Test-CheckManifest/summary
#. leap/perl-Test-CheckManifest/description
msgid "Check if your Manifest matches your distro"
msgstr ""

#. leap/perl-Test-Class/summary
msgid "Easily create test classes in an xUnit/JUnit style"
msgstr ""

#. leap/perl-Test-Class/description
msgid ""
"Test::Class provides a simple way of creating classes and objects to test "
"your code in an xUnit style.\n"
"\n"
"Built using the Test::Builder manpage, it was designed to work with other "
"Test::Builder based modules (the Test::More manpage, the Test::Differences "
"manpage, the Test::Exception manpage, etc.).\n"
"\n"
"_Note:_ This module will make more sense, if you are already familiar with "
"the \"standard\" mechanisms for testing perl code. Those unfamiliar with the "
"Test::Harness manpage, the Test::Simple manpage, the Test::More manpage and "
"friends should go take a look at them now. the Test::Tutorial manpage is a "
"good starting point."
msgstr ""

#. leap/perl-Test-Class-Most/summary
msgid "Test Classes the easy way"
msgstr ""

#. leap/perl-Test-Class-Most/description
msgid ""
"When people write test classes with the excellent 'Test::Class', you often "
"see the following at the top of the code:\n"
"\n"
"  package Some::Test::Class;\n"
"\n"
"  use strict;   use warnings;   use base 'My::Test::Class';   use Test::"
"More;   use Test::Exception;\n"
"\n"
"  \n"
"\n"
"That's a lot of boilerplate and I don't like boilerplate. So now you can do "
"this:\n"
"\n"
"  use Test::Class::Most parent => 'My::Test::Class';\n"
"\n"
"That automatically imports the strict manpage and the warnings manpage for "
"you. It also gives you all of the testing goodness from the Test::Most "
"manpage."
msgstr ""

#. leap/perl-Test-ClassAPI/summary
msgid "Provides basic first-pass API testing for large class trees"
msgstr ""

#. leap/perl-Test-ClassAPI/description
msgid ""
"For many APIs with large numbers of classes, it can be very useful to be "
"able to do a quick once-over to make sure that classes, methods, and "
"inheritance is correct, before doing more comprehensive testing. This module "
"aims to provide such a capability."
msgstr ""

#. leap/perl-Test-CleanNamespaces/summary
msgid "Check for uncleaned imports"
msgstr ""

#. leap/perl-Test-CleanNamespaces/description
msgid ""
"This module lets you check your module's namespaces for imported functions "
"you might have forgotten to remove with namespace::autoclean or namespace::"
"clean and are therefore available to be called as methods, which usually "
"isn't want you want."
msgstr ""

#. leap/perl-Test-Command/summary
msgid "Test routines for external commands"
msgstr ""

#. leap/perl-Test-Command/description
msgid ""
"'Test::Command' intends to bridge the gap between the well tested functions "
"and objects you choose and their usage in your programs. By examining the "
"exit status, terminating signal, STDOUT and STDERR of your program you can "
"determine if it is behaving as expected.\n"
"\n"
"This includes testing the various combinations and permutations of options "
"and arguments as well as the interactions between the various functions and "
"objects that make up your program.\n"
"\n"
"The various test functions below can accept either a command string or an "
"array reference for the first argument. If the command is expressed as a "
"string it is passed to 'system' as is. If the command is expressed as an "
"array reference it is dereferenced and passed to 'system' as a list. See "
"''perldoc -f system'' for how these may differ.\n"
"\n"
"The final argument for the test functions, '$name', is optional. By default "
"the '$name' is a concatenation of the test function name, the command string "
"and the expected value. This construction is generally sufficient for "
"identifying a failing test, but you may always specify your own '$name' if "
"desired.\n"
"\n"
"Any of the test functions can be used as instance methods on a 'Test::"
"Command' object. This is done by dropping the initial '$cmd' argument and "
"instead using arrow notation.\n"
"\n"
"All of the following 'exit_is_num' calls are equivalent.\n"
"\n"
"   exit_is_num('true', 0);    exit_is_num('true', 0, 'exit_is_num: true, "
"0');    exit_is_num(['true'], 0);    exit_is_num(['true'], 0, 'exit_is_num: "
"true, 0');\n"
"\n"
"   my $cmd = Test::Command->new( cmd => 'true' );\n"
"\n"
"   exit_is_num($cmd, 0);    exit_is_num($cmd, 0, 'exit_is_num: true, 0');    "
"$cmd->exit_is_num(0);    $cmd->exit_is_num(0, 'exit_is_num: true, 0');\n"
"\n"
"   $cmd = Test::Command->new( cmd => ['true'] );\n"
"\n"
"   exit_is_num($cmd, 0);    exit_is_num($cmd, 0, 'exit_is_num: true, 0');    "
"$cmd->exit_is_num(0);    $cmd->exit_is_num(0, 'exit_is_num: true, 0');"
msgstr ""

#. leap/perl-Test-Compile/summary
msgid "Assert that your Perl files compile OK"
msgstr ""

#. leap/perl-Test-Compile/description
msgid ""
"'Test::Compile' lets you check the whether your perl modules and scripts "
"compile properly, results are reported in standard 'Test::Simple' fashion.\n"
"\n"
"The basic usage - as shown above, will locate your perl files and test that "
"they all compile.\n"
"\n"
"Module authors can (and probably should) include the following in a _t/00-"
"compile.t_ file and have 'Test::Compile' automatically find and check all "
"Perl files in a module distribution:\n"
"\n"
"         use strict;     use warnings;     use Test::Compile;     my $test = "
"Test::Compile->new();     $test->all_files_ok();     $test->done_testing();"
msgstr ""

#. leap/perl-Test-Deep/summary
msgid "Extremely flexible deep comparison"
msgstr ""

#. leap/perl-Test-Deep/description
msgid ""
"If you don't know anything about automated testing in Perl then you should "
"probably read about Test::Simple and Test::More before preceding. Test::Deep "
"uses the Test::Builder framework.\n"
"\n"
"Test::Deep gives you very flexible ways to check that the result you got is "
"the result you were expecting. At it's simplest it compares two structures "
"by going through each level, ensuring that the values match, that arrays and "
"hashes have the same elements and that references are blessed into the "
"correct class. It also handles circular data structures without getting "
"caught in an infinite loop.\n"
"\n"
"Where it becomes more interesting is in allowing you to do something besides "
"simple exact comparisons. With strings, the 'eq' operator checks that 2 "
"strings are exactly equal but sometimes that's not what you want. When you "
"don't know exactly what the string should be but you do know some things "
"about how it should look, 'eq' is no good and you must use pattern matching "
"instead. Test::Deep provides pattern matching for complex data structures\n"
"\n"
"Test::Deep has *_a lot_* of exports. See EXPORTS below."
msgstr ""

#. leap/perl-Test-Deep-Type/summary
msgid "Test::Deep plugin for validating type constraints"
msgstr ""

#. leap/perl-Test-Deep-Type/description
msgid ""
"This is a Test::Deep plugin that provides the sub 'is_type' to indicate that "
"the data being tested must validate against the passed type. This is an "
"actual type _object_, not a string name -- for example something provided "
"via MooseX::Types, or a plain old coderef that returns a bool (such as what "
"might be used in a Moo type constraint)."
msgstr ""

#. leap/perl-Test-Differences/summary
msgid "Test strings and data structures and show differences if not ok"
msgstr ""

#. leap/perl-Test-Differences/description
msgid ""
"When the code you're testing returns multiple lines, records or data "
"structures and they're just plain wrong, an equivalent to the Unix 'diff' "
"utility may be just what's needed. Here's output from an example test script "
"that checks two text documents and then two (trivial) data structures:\n"
"\n"
" t/99example....1..3  not ok 1 - differences in text                  not ok "
"2 - differences in whitespace                  not ok 3                  \n"
"\n"
"eq_or_diff_...() compares two strings or (limited) data structures and "
"either emits an ok indication or a side-by-side diff. Test::Differences is "
"designed to be used with Test.pm and with Test::Simple, Test::More, and "
"other Test::Builder based testing modules. As the SYNOPSIS shows, another "
"testing module must be used as the basis for your test suite."
msgstr ""

#. leap/perl-Test-Directory/summary
#, fuzzy
msgid "Perl extension for maintaining test directories"
msgstr "Interface Perl pour objets URI"

#. leap/perl-Test-Directory/description
msgid ""
"Testing code can involve making sure that files are created and deleted as "
"expected. Doing this manually can be error prone, as it's easy to forget a "
"file, or miss that some unexpected file was added. This module simplifies "
"maintaining test directories by tracking their status as they are modified "
"or tested with this API, making it simple to test both individual files, as "
"well as to verify that there are no missing or unknown files.\n"
"\n"
"The idea is to use this API to create a temporary directory and populate an "
"initial set of files. Then, whenever something in the directory is changes, "
"use the test methods to verify that the change happened as expected. At any "
"time, it is simple to verify that the contents of the directory are exactly "
"as expected.\n"
"\n"
"Test::Directory implements an object-oriented interface for managing test "
"directories. It tracks which files it knows about (by creating or testing "
"them via its API), and can report if any files were missing or unexpectedly "
"added.\n"
"\n"
"There are two flavors of methods for interacting with the directory. "
"_Utility_ methods simply return a value (i.e. the number of files/errors) "
"with no output, while the _Test_ functions use Test::Builder to produce the "
"approriate test results and diagnostics for the test harness.\n"
"\n"
"The directory will be automatically cleaned up when the object goes out of "
"scope; see the _clean_ method below for details."
msgstr ""

#. leap/perl-Test-EOL/summary
msgid "Check the correct line endings in your project"
msgstr ""

#. leap/perl-Test-EOL/description
msgid ""
"This module scans your project/distribution for any perl files (scripts, "
"modules, etc) for the presence of windows line endings."
msgstr ""

#. leap/perl-Test-Exception/summary
msgid "Test exception-based code"
msgstr ""

#. leap/perl-Test-Exception/description
msgid ""
"This module provides a few convenience methods for testing exception based "
"code. It is built with Test::Builder and plays happily with Test::More and "
"friends.\n"
"\n"
"If you are not already familiar with Test::More now would be the time to go "
"take a look.\n"
"\n"
"You can specify the test plan when you 'use Test::Exception' in the same way "
"as 'use Test::More'. See Test::More for details.\n"
"\n"
"NOTE: Test::Exception only checks for exceptions. It will ignore other "
"methods of stopping program execution - including exit(). If you have an "
"exit() in evalled code Test::Exception will not catch this with any of its "
"testing functions.\n"
"\n"
"NOTE: This module uses Sub::Uplevel and relies on overriding 'CORE::GLOBAL::"
"caller' to hide your test blocks from the call stack. If this use of global "
"overrides concerns you, the Test::Fatal module offers a more minimalist "
"alternative. \n"
"* *throws_ok*\n"
"\n"
"Tests to see that a specific exception is thrown. throws_ok() has two "
"forms:\n"
"\n"
"  throws_ok BLOCK REGEX, TEST_DESCRIPTION   throws_ok BLOCK CLASS, "
"TEST_DESCRIPTION\n"
"\n"
"In the first form the test passes if the stringified exception matches the "
"give regular expression. For example:\n"
"\n"
"    throws_ok { read_file( 'unreadable' ) } qr/No file/, 'no file';\n"
"\n"
"If your perl does not support 'qr//' you can also pass a regex-like string, "
"for example:\n"
"\n"
"    throws_ok { read_file( 'unreadable' ) } '/No file/', 'no file';\n"
"\n"
"The second form of throws_ok() test passes if the exception is of the same "
"class as the one supplied, or a subclass of that class. For example:\n"
"\n"
"    throws_ok { $foo->bar } \"Error::Simple\", 'simple error';\n"
"\n"
"Will only pass if the 'bar' method throws an Error::Simple exception, or a "
"subclass of an Error::Simple exception.\n"
"\n"
"You can get the same effect by passing an instance of the exception you want "
"to look for. The following is equivalent to the previous example:\n"
"\n"
"    my $SIMPLE = Error::Simple->new;     throws_ok { $foo->bar } $SIMPLE, "
"'simple error';\n"
"\n"
"Should a throws_ok() test fail it produces appropriate diagnostic messages. "
"For example:\n"
"\n"
"    not ok 3 - simple error               \n"
"\n"
"Like all other Test::Exception functions you can avoid prototypes by passing "
"a subroutine explicitly:\n"
"\n"
"    throws_ok( sub {$foo->bar}, \"Error::Simple\", 'simple error' );\n"
"\n"
"A true value is returned if the test succeeds, false otherwise. On exit $@ "
"is guaranteed to be the cause of death (if any).\n"
"\n"
"A description of the exception being checked is used if no optional test "
"description is passed.\n"
"\n"
"NOTE: Remember when you 'die $string_without_a_trailing_newline' perl will "
"automatically add the current script line number, input line number and a "
"newline. This will form part of the string that throws_ok regular "
"expressions match against. \n"
"* *dies_ok*\n"
"\n"
"Checks that a piece of code dies, rather than returning normally. For "
"example:\n"
"\n"
"    sub div {         my ( $a, $b ) = @_;         return $a / $b;     };\n"
"\n"
"    dies_ok { div( 1, 0 ) } 'divide by zero detected';\n"
"\n"
"         dies_ok( sub { div( 1, 0 ) }, 'divide by zero detected' );\n"
"\n"
"A true value is returned if the test succeeds, false otherwise. On exit $@ "
"is guaranteed to be the cause of death (if any).\n"
"\n"
"Remember: This test will pass if the code dies for any reason. If you care "
"about the reason it might be more sensible to write a more specific test "
"using throws_ok().\n"
"\n"
"The test description is optional, but recommended. \n"
"* *lives_ok*\n"
"\n"
"Checks that a piece of code doesn't die. This allows your test script to "
"continue, rather than aborting if you get an unexpected exception. For "
"example:\n"
"\n"
"    sub read_file {         my $file = shift;         local $/;         open "
"my $fh, '<', $file or die \"open failed ($!)\\n\";         $file = "
"<FILE>;         return $file;     };\n"
"\n"
"    my $file;     lives_ok { $file = read_file('test.txt') } 'file read';\n"
"\n"
"         lives_ok( sub { $file = read_file('test.txt') }, 'file read' );\n"
"\n"
"Should a lives_ok() test fail it produces appropriate diagnostic messages. "
"For example:\n"
"\n"
"    not ok 1 - file read          \n"
"\n"
"A true value is returned if the test succeeds, false otherwise. On exit $@ "
"is guaranteed to be the cause of death (if any).\n"
"\n"
"The test description is optional, but recommended. \n"
"* *lives_and*\n"
"\n"
"Run a test that may throw an exception. For example, instead of doing:\n"
"\n"
"  my $file;   lives_ok { $file = read_file('answer.txt') } 'read_file "
"worked';   is $file, \"42\", 'answer was 42';\n"
"\n"
"You can use lives_and() like this:\n"
"\n"
"  lives_and { is read_file('answer.txt'), \"42\" } 'answer is 42';      "
"lives_and(sub {is read_file('answer.txt'), \"42\"}, 'answer is 42');\n"
"\n"
"Which is the same as doing\n"
"\n"
"  is read_file('answer.txt'), \"42\\n\", 'answer is 42';\n"
"\n"
"unless 'read_file('answer.txt')' dies, in which case you get the same kind "
"of error as lives_ok()\n"
"\n"
"  not ok 1 - answer is 42      \n"
"\n"
"A true value is returned if the test succeeds, false otherwise. On exit $@ "
"is guaranteed to be the cause of death (if any).\n"
"\n"
"The test description is optional, but recommended."
msgstr ""

#. leap/perl-Test-Exception-LessClever/summary
#. leap/perl-Test-Exception-LessClever/description
msgid "(DEPRECATED) Test::Exception simplified"
msgstr ""

#. leap/perl-Test-FailWarnings/summary
msgid "Add test failures if warnings are caught"
msgstr ""

#. leap/perl-Test-FailWarnings/description
msgid ""
"This module hooks '$SIG{__WARN__}' and converts warnings to the Test::More "
"manpage 'fail()' calls. It is designed to be used with 'done_testing', when "
"you don't need to know the test count in advance.\n"
"\n"
"Just as with the Test::NoWarnings manpage, this does not catch warnings if "
"other things localize '$SIG{__WARN__}', as this is designed to catch "
"_unhandled_ warnings."
msgstr ""

#. leap/perl-Test-Fatal/summary
msgid "incredibly simple helpers for testing code with exceptions"
msgstr ""

#. leap/perl-Test-Fatal/description
msgid ""
"Test::Fatal is an alternative to the popular the Test::Exception manpage. It "
"does much less, but should allow greater flexibility in testing exception-"
"throwing code with about the same amount of typing.\n"
"\n"
"It exports one routine by default: 'exception'."
msgstr ""

#. leap/perl-Test-File/summary
msgid "Test file attributes"
msgstr ""

#. leap/perl-Test-File/description
msgid ""
"This modules provides a collection of test utilities for file attributes.\n"
"\n"
"Some file attributes depend on the owner of the process testing the file in "
"the same way the file test operators do. For instance, root (or super-user "
"or Administrator) may always be able to read files no matter the "
"permissions.\n"
"\n"
"Some attributes don't make sense outside of Unix, either, so some tests "
"automatically skip if they think they won't work on the platform. If you "
"have a way to make these functions work on Windows, for instance, please "
"send me a patch. :) IF you want to pretend to be Windows on a non-Windows "
"machine (for instance, to test 'skip()'), you can set the "
"'PRETEND_TO_BE_WINDOWS' environment variable.\n"
"\n"
"The optional NAME parameter for every function allows you to specify a name "
"for the test. If not supplied, a reasonable default will be generated."
msgstr ""

#. leap/perl-Test-File-Contents/summary
#. leap/perl-Test-File-Contents/description
msgid "Test routines for examining the contents of files"
msgstr ""

#. leap/perl-Test-File-ShareDir/summary
msgid "Create a Fake ShareDir for your modules for testing"
msgstr ""

#. leap/perl-Test-File-ShareDir/description
msgid ""
"'Test::File::ShareDir' is some low level plumbing to enable a distribution "
"to perform tests while consuming its own 'share' directories in a manner "
"similar to how they will be once installed.\n"
"\n"
"This allows 'File::ShareDir' to see the _latest_ version of content instead "
"of simply whatever is installed on whichever target system you happen to be "
"testing on. \n"
"*Note:* This module only has support for creating 'new' style share dirs and "
"are NOT compatible with old File::ShareDirs.\n"
"\n"
"For this reason, unless you have File::ShareDir 1.00 or later installed, "
"this module will not be usable by you."
msgstr ""

#. leap/perl-Test-Harness/summary
msgid "Run Perl standard test scripts with statistics"
msgstr ""

#. leap/perl-Test-Harness/description
msgid ""
"Although, for historical reasons, the Test::Harness distribution takes its "
"name from this module it now exists only to provide TAP::Harness with an "
"interface that is somewhat backwards compatible with Test::Harness 2.xx. If "
"you're writing new code consider using TAP::Harness directly instead.\n"
"\n"
"Emulation is provided for 'runtests' and 'execute_tests' but the pluggable "
"'Straps' interface that previous versions of Test::Harness supported is not "
"reproduced here. Straps is now available as a stand alone module: Test::"
"Harness::Straps.\n"
"\n"
"See TAP::Parser, TAP::Harness for the main documentation for this "
"distribution."
msgstr ""

#. leap/perl-Test-HasVersion/summary
msgid "Check Perl modules have version numbers"
msgstr ""

#. leap/perl-Test-HasVersion/description
msgid ""
"Do you wanna check that every one of your Perl modules in a distribution has "
"a version number? You wanna make sure you don't forget the brand new modules "
"you just added? Well, that's the module you have been looking for. Use it!\n"
"\n"
"Do you wanna check someone else's distribution to make sure the author have "
"not committed the sin of leaving Perl modules without a version that can be "
"used to tell if you have this or that feature? 'Test::HasVersion' is also "
"for you, nasty little fellow.\n"
"\n"
"There's a script _test_version_ which is installed with this distribution. "
"You may invoke it from within the root directory of a distribution you just "
"unpacked, and it will check every _.pm_ file in the directory and under _lib/"
"_ (if any).\n"
"\n"
"  $ test_version\n"
"\n"
"You may also provide directories and files as arguments.\n"
"\n"
"  $ test_version *.pm lib/ inc/   $ test_version .\n"
"\n"
"(Be warned that many Perl modules in a _t/_ directory do not receive "
"versions because they are not used outside the distribution.)\n"
"\n"
"Ok. That's not a very useful module by now. But it will be. Wait for the "
"upcoming releases."
msgstr ""

#. leap/perl-Test-Identity/summary
msgid "Assert the Referential Identity of a Reference"
msgstr ""

#. leap/perl-Test-Identity/description
msgid ""
"This module provides a single testing function, 'identical'. It asserts that "
"a given reference is as expected; that is, it either refers to the same "
"object or is 'undef'. It is similar to 'Test::More::is' except that it uses "
"'refaddr', ensuring that it behaves correctly even if the references under "
"test are objects that overload stringification or numification.\n"
"\n"
"It also provides better diagnostics if the test fails:\n"
"\n"
" $ perl -MTest::More=tests,1 -MTest::Identity -e'identical [], {}'  1..1  "
"not ok 1      \n"
"\n"
" $ perl -MTest::More=tests,1 -MTest::Identity -e'identical [], []'  1..1  "
"not ok 1"
msgstr ""

#. leap/perl-Test-InDistDir/summary
#, fuzzy
msgid "test environment setup for development with IDE"
msgstr "Portable Batch System (PBS)"

#. leap/perl-Test-InDistDir/description
msgid ""
"This module helps run test scripts in IDEs like Komodo.\n"
"\n"
"When running test scripts in an IDE i have to set up a project file defining "
"the dist dir to run tests in and a lib dir to load additional modules from. "
"Often I didn't feel like doing that, especially when i only wanted to do a "
"small patch to a dist. In those cases i added a BEGIN block to mangle the "
"environment for me.\n"
"\n"
"This module basically is that BEGIN block. It automatically moves up one "
"directory when it cannot see the test script in \"t/$scriptname\" and "
"includes 'lib' in @INC when there's no blib present. That way the test ends "
"up with almost the same environment it'd get from EUMM/prove/etc., even when "
"it's actually run inside the t/ directory.\n"
"\n"
"At the same time it will still function correctly when called by EUMM/prove/"
"etc., since it does not change the environment in those cases."
msgstr ""

#. leap/perl-Test-Inter/summary
msgid "Framework for More Readable Interactive Test Scripts"
msgstr ""

#. leap/perl-Test-Inter/description
msgid ""
"This is another framework for writing test scripts. Much of the syntax is "
"loosely inspired by Test::More, and Test::Inter has most of it's "
"functionality, but it is not a drop-in replacement.\n"
"\n"
"Test::More (and other existing test frameworks) suffer from two weaknesses, "
"both of which have prevented me from ever using them:\n"
"\n"
"   None offer the ability to access specific tests in    a reasonably "
"interactive fashion, primarily for    debugging purposes\n"
"\n"
"   None offer the ability to write the tests in    whatever format would "
"make the tests the most    readable\n"
"\n"
"The way I write and use test scripts, existing Test::* modules are not "
"nearly as useful as they could be."
msgstr ""

#. leap/perl-Test-JSON/summary
msgid "Test JSON data"
msgstr ""

#. leap/perl-Test-JSON/description
msgid ""
"JavaScript Object Notation (JSON) is a lightweight data interchange format. "
"the Test::JSON manpage makes it easy to verify that you have built valid "
"JSON and that it matches your expected output.\n"
"\n"
"See the http://www.json.org/ manpage for more information."
msgstr ""

#. leap/perl-Test-LWP-UserAgent/summary
msgid "LWP::UserAgent suitable for simulating and testing network calls"
msgstr ""

#. leap/perl-Test-LWP-UserAgent/description
msgid ""
"This module is a subclass of LWP::UserAgent which overrides a few key low-"
"level methods that are concerned with actually sending your request over the "
"network, allowing an interception of that request and simulating a "
"particular response. This greatly facilitates testing of networking client "
"code where the server follows a known protocol.\n"
"\n"
"The synopsis describes a typical case where you want to test how your "
"application reacts to various responses from the server. This module will "
"let you send back various responses depending on the request, without having "
"to set up a real server to test against. This can be invaluable when you "
"need to test edge cases or error conditions that are not normally returned "
"from the server.\n"
"\n"
"There are a lot of different ways you can set up the response mappings, and "
"hook into this module; see the documentation for the individual interface "
"methods.\n"
"\n"
"You can use a PSGI app to handle the requests - see _examples/call_psgi.t_ "
"in this distribution, and also register_psgi below.\n"
"\n"
"OR, you can route some or all requests through the network as normal, but "
"still gain the hooks provided by this class to test what was sent and "
"received:\n"
"\n"
"    my $useragent = Test::LWP::UserAgent->new(network_fallback => 1);\n"
"\n"
"or:\n"
"\n"
"    $useragent->map_network_response(qr/real.network.host/);\n"
"\n"
"    \n"
"\n"
"         is(         $useragent->last_useragent->timeout,         "
"180,         'timeout was overridden properly',     );     "
"is(         $useragent->last_http_request_sent->uri,         'uri my code "
"should have constructed',     );     is(         $useragent-"
">last_http_response_received->code,         '200',         'I should have "
"gotten an OK response',     );"
msgstr ""

#. leap/perl-Test-LeakTrace/summary
msgid "Traces memory leaks"
msgstr ""

#. leap/perl-Test-LeakTrace/description
msgid ""
"'Test::LeakTrace' provides several functions that trace memory leaks. This "
"module scans arenas, the memory allocation system, so it can detect any "
"leaked SVs in given blocks. \n"
"*Leaked SVs* are SVs which are not released after the end of the scope they "
"have been created. These SVs include global variables and internal caches. "
"For example, if you call a method in a tracing block, perl might prepare a "
"cache for the method. Thus, to trace true leaks, 'no_leaks_ok()' and "
"'leaks_cmp_ok()' executes a block more than once."
msgstr ""

#. leap/perl-Test-LectroTest/summary
msgid "Easy, automatic, specification-based tests"
msgstr ""

#. leap/perl-Test-LectroTest/description
msgid ""
"This module provides a simple (yet full featured) interface to LectroTest, "
"an automated, specification-based testing system for Perl. To use it, "
"declare properties that specify the expected behavior of your software. "
"LectroTest then checks your software to see whether those properties hold.\n"
"\n"
"Declare properties using the 'Property' function, which takes a block of "
"code and promotes it to a Test::LectroTest::Property:\n"
"\n"
"    Property {                  MyModule::my_function( $x, $y ) >= 0;     }, "
"name => \"my_function output is non-negative\" ;\n"
"\n"
"The first part of the block must contain a generator-binding declaration. "
"For example:\n"
"\n"
"        \n"
"\n"
"(Note the special bracketing, which is required.) This particular binding "
"says, \"For all integers _x_ and _y_.\" (By the way, you aren't limited to "
"integers. LectroTest also gives you booleans, strings, lists, hashes, and "
"more, and it lets you define your own generator types. See Test::LectroTest::"
"Generator for more.)\n"
"\n"
"The second part of the block is simply a snippet of code that makes use of "
"the variables we bound earlier to test whether a property holds for the "
"piece of software we are testing:\n"
"\n"
"        MyModule::my_function( $x, $y ) >= 0;\n"
"\n"
"In this case, it asserts that 'MyModule::my_function($x,$y)' returns a non-"
"negative result. (Yes, '$x' and '$y' refer to the same _x_ and _y_ that we "
"bound to the generators earlier. LectroTest automagically loads these "
"lexically bound Perl variables with values behind the scenes.) \n"
"*Note:* If you want to use testing assertions like 'ok' from Test::Simple or "
"'is', 'like', or 'cmp_ok' from Test::More (and the related family of Test::"
"Builder-based testing modules), see Test::LectroTest::Compat, which lets you "
"mix and match LectroTest with these modules.\n"
"\n"
"Finally, we give the whole Property a name, in this case \"my_function "
"output is non-negative.\" It's a good idea to use a meaningful name because "
"LectroTest refers to properties by name in its output.\n"
"\n"
"Let's take a look at the finished property specification:\n"
"\n"
"    Property {                  MyModule::my_function( $x, $y ) >= 0;     }, "
"name => \"my_function output is non-negative\" ;\n"
"\n"
"It says, \"For all integers _x_ and _y_, we assert that my_function's output "
"is non-negative.\"\n"
"\n"
"To check whether this property holds, simply put it in a Perl program that "
"uses the Test::LectroTest module. (See the SYNOPSIS for an example.) When "
"you run the program, LectroTest will load the property (and any others in "
"the file) and check it by running random trials against the software you're "
"testing. \n"
"*Note:* If you want to place LectroTest property checks into a test plan "
"managed by Test::Builder-based modules such as Test::Simple or Test::More, "
"see Test::LectroTest::Compat.\n"
"\n"
"If LectroTest is able to \"break\" your software during the property check, "
"it will emit a counterexample to your property's assertions and stop. You "
"can plug the counterexample back into your software to debug the problem. "
"(You might also want to add the counterexample to a list of regression "
"tests.)\n"
"\n"
"A successful LectroTest looks like this:\n"
"\n"
"  1..1   ok 1 - 'my_function output is non-negative' (1000 attempts)\n"
"\n"
"On the other hand, if you're not so lucky:\n"
"\n"
"  1..1   not ok 1 - 'my_function output is non-negative' falsified \\       "
"in 324 attempts"
msgstr ""

#. leap/perl-Test-LongString/summary
msgid "tests strings for equality, with more helpful failures"
msgstr ""

#. leap/perl-Test-LongString/description
msgid ""
"This module provides some drop-in replacements for the string comparison "
"functions of the Test::More manpage, but which are more suitable when you "
"test against long strings. If you've ever had to search for text in a multi-"
"line string like an HTML document, or find specific items in binary data, "
"this is the module for you."
msgstr ""

#. leap/perl-Test-Manifest/summary
msgid "Interact with a t/test_manifest file"
msgstr ""

#. leap/perl-Test-Manifest/description
msgid ""
"'Test::Harness' assumes that you want to run all of the _.t_ files in the _t/"
"_ directory in ASCII-betical order during 'make test' or './Build test' "
"unless you say otherwise. This leads to some interesting naming schemes for "
"test files to get them in the desired order. These interesting names ossify "
"when they get into source control, and get even more interesting as more "
"tests show up.\n"
"\n"
"'Test::Manifest' overrides the default test file order. Instead of running "
"all of the _t/*.t_ files in ASCII-betical order, it looks in the _t/"
"test_manifest_ file to find out which tests you want to run and the order in "
"which you want to run them. It constructs the right value for the build "
"system to do the right thing.\n"
"\n"
"In _t/test_manifest_, simply list the tests that you want to run. Their "
"order in the file is the order in which they run. You can comment lines with "
"a '#', just like in Perl, and 'Test::Manifest' will strip leading and "
"trailing whitespace from each line. It also checks that the specified file "
"is actually in the _t/_ directory. If the file does not exist, it does not "
"put its name in the list of test files to run and it will issue a warning.\n"
"\n"
"Optionally, you can add a number after the test name in test_manifest to "
"define sets of tests. See 'get_t_files' for more information."
msgstr ""

#. leap/perl-Test-Memory-Cycle/summary
#. leap/perl-Test-Memory-Cycle/description
msgid "Check for memory leaks and circular memory references"
msgstr ""

#. leap/perl-Test-Mock-Guard/summary
msgid "Simple mock test library using RAII."
msgstr ""

#. leap/perl-Test-Mock-Guard/description
msgid ""
"Test::Mock::Guard is mock test library using RAII. This module is able to "
"change method behavior by each scope. See SYNOPSIS's sample code."
msgstr ""

#. leap/perl-Test-Mock-LWP/summary
#, fuzzy
msgid "Easy mocking of LWP packages"
msgstr "Une bibliothèque pour le développement de jeux 3D"

#. leap/perl-Test-Mock-LWP/description
msgid ""
"This package arises from duplicating the same code to mock LWP et al in "
"several different modules I've written. This version is very minimalist, but "
"works for my needs so far. I'm very open to new suggestions and improvements."
msgstr ""

#. leap/perl-Test-Mock-Time/summary
msgid "Deterministic time & timers for event loop tests"
msgstr ""

#. leap/perl-Test-Mock-Time/description
msgid ""
"This module replaces actual time with simulated time everywhere (core "
"time(), Time::HiRes, EV, AnyEvent with EV, Mojolicious, …) and provide a way "
"to write deterministic tests for event loop based applications with "
"timers. \n"
"*IMPORTANT!* This module *must* be loaded by your script/app/test before "
"other related modules (Time::HiRes, Mojolicious, EV, etc.)."
msgstr ""

#. leap/perl-Test-MockModule/summary
msgid "Override subroutines in a module for unit testing"
msgstr ""

#. leap/perl-Test-MockModule/description
msgid ""
"'Test::MockModule' lets you temporarily redefine subroutines in other "
"packages for the purposes of unit testing.\n"
"\n"
"A 'Test::MockModule' object is set up to mock subroutines for a given "
"module. The object remembers the original subroutine so it can be easily "
"restored. This happens automatically when all MockModule objects for the "
"given module go out of scope, or when you 'unmock()' the subroutine."
msgstr ""

#. leap/perl-Test-MockObject/summary
#, fuzzy
msgid "Perl extension for emulating troublesome interfaces"
msgstr "Interface Perl pour objets URI"

#. leap/perl-Test-MockObject/description
msgid ""
"It's a simple program that doesn't use any other modules, and those are easy "
"to test. More often, testing a program completely means faking up input to "
"another module, trying to coax the right output from something you're not "
"supposed to be testing anyway.\n"
"\n"
"Testing is a lot easier when you can control the entire environment. With "
"Test::MockObject, you can get a lot closer.\n"
"\n"
"Test::MockObject allows you to create objects that conform to particular "
"interfaces with very little code. You don't have to reimplement the "
"behavior, just the input and the output."
msgstr ""

#. leap/perl-Test-MockRandom/summary
msgid "Replaces random number generation with non-random number generation"
msgstr ""

#. leap/perl-Test-MockRandom/description
msgid ""
"This perhaps ridiculous-seeming module was created to test routines that "
"manipulate random numbers by providing a known output from 'rand'. Given a "
"list of seeds with 'srand', it will return each in turn. After seeded random "
"numbers are exhausted, it will always return 0. Seed numbers must be of a "
"form that meets the expected output from 'rand' as called with no arguments "
"-- i.e. they must be between 0 (inclusive) and 1 (exclusive). In order to "
"facilitate generating and testing a nearly-one number, this module exports "
"the function 'oneish', which returns a number just fractionally less than "
"one.\n"
"\n"
"Depending on how this module is called with 'use', it will export 'rand' to "
"a specified package (e.g. a class being tested) effectively overriding and "
"intercepting calls in that package to the built-in 'rand'. It can also "
"override 'rand' in the current package or even globally. In all of these "
"cases, it also exports 'srand' and 'oneish' to the current package in order "
"to control the output of 'rand'. See USAGE for details.\n"
"\n"
"Alternatively, this module can be used to generate objects, with each object "
"maintaining its own distinct seed array."
msgstr ""

#. leap/perl-Test-MockTime/summary
msgid "Replaces actual time with simulated time"
msgstr ""

#. leap/perl-Test-MockTime/description
msgid ""
"This module was created to enable test suites to test code at specific "
"points in time. Specifically it overrides localtime, gmtime and time at "
"compile time and then relies on the user supplying a mock time via "
"set_relative_time, set_absolute_time or set_fixed_time to alter future calls "
"to gmtime,time or localtime."
msgstr ""

#. leap/perl-Test-Mojo-Pg/summary
msgid "Helper for Dealing with Pg During Tests"
msgstr ""

#. leap/perl-Test-Mojo-Pg/description
msgid ""
"Test::Mojo::Pg makes the creation and removal of a transitory database "
"during testing when using Mojo::Pg. This is useful when every test should "
"work from a 'clean' database."
msgstr ""

#. leap/perl-Test-More-UTF8/summary
#. leap/perl-Test-More-UTF8/description
msgid "Enhancing Test::More for UTF8-based projects"
msgstr ""

#. leap/perl-Test-Most/summary
msgid "Most commonly needed test functions and features"
msgstr ""

#. leap/perl-Test-Most/description
msgid ""
"Test::Most exists to reduce boilerplate and to make your testing life "
"easier. We provide \"one stop shopping\" for most commonly used testing "
"modules. In fact, we often require the latest versions so that you get bug "
"fixes through Test::Most and don't have to keep upgrading these modules "
"separately.\n"
"\n"
"This module provides you with the most commonly used testing functions, "
"along with automatically turning on strict and warning and gives you a bit "
"more fine-grained control over your test suite.\n"
"\n"
"    use Test::Most tests => 4, 'die';\n"
"\n"
"    ok 1, 'Normal calls to ok() should succeed';     is 2, 2, '... as should "
"all passing tests';     eq_or_diff [3], [4], '... but failing tests should "
"die';     ok 4, '... will never get to here';\n"
"\n"
"As you can see, the 'eq_or_diff' test will fail. Because 'die' is in the "
"import list, the test program will halt at that point.\n"
"\n"
"If you do not want strict and warnings enabled, you must explicitly disable "
"them. Thus, you must be explicit about what you want and no longer need to "
"worry about accidentally forgetting them.\n"
"\n"
"    use Test::Most tests => 4;     no strict;     no warnings;"
msgstr ""

#. leap/perl-Test-Needs/summary
#, fuzzy
msgid "Skip tests when modules not available"
msgstr "Modules du noyau (pilotes matériel)"

#. leap/perl-Test-Needs/description
msgid ""
"Skip test scripts if modules are not available. The requested modules will "
"be loaded, and optionally have their versions checked. If the module is "
"missing, the test script will be skipped. Modules that are found but fail to "
"compile will exit with an error rather than skip.\n"
"\n"
"If used in a subtest, the remainder of the subtest will be skipped.\n"
"\n"
"Skipping will work even if some tests have already been run, or if a plan "
"has been declared.\n"
"\n"
"Versions are checked via a '$module->VERSION($wanted_version)' call. "
"Versions must be provided in a format that will be accepted. No extra "
"processing is done on them.\n"
"\n"
"If 'perl' is used as a module, the version is checked against the running "
"perl version ($]). The version can be specified as a number, dotted-decimal "
"string, v-string, or version object.\n"
"\n"
"If the 'RELEASE_TESTING' environment variable is set, the tests will fail "
"rather than skip. Subtests will be aborted, but the test script will "
"continue running after that point."
msgstr ""

#. leap/perl-Test-NoTabs/summary
msgid "Check the presence of tabs in your project"
msgstr ""

#. leap/perl-Test-NoTabs/description
msgid ""
"This module scans your project/distribution for any perl files (scripts, "
"modules, etc) for the presence of tabs."
msgstr ""

#. leap/perl-Test-NoWarnings/summary
msgid "Make sure you didn't emit any warnings while testing"
msgstr ""

#. leap/perl-Test-NoWarnings/description
msgid ""
"In general, your tests shouldn't produce warnings. This modules causes any "
"warnings to be captured and stored. It automatically adds an extra test that "
"will run when your script ends to check that there were no warnings. If "
"there were any warings, the test will give a \"not ok\" and diagnostics of "
"where, when and what the warning was, including a stack trace of what was "
"going on when the it occurred.\n"
"\n"
"If some of your tests *are supposed to* produce warnings then you should be "
"capturing and checking them with the Test::Warn manpage, that way the Test::"
"NoWarnings manpage will not see them and so not complain.\n"
"\n"
"The test is run by an 'END' block in Test::NoWarnings. It will not be run "
"when any forked children exit."
msgstr ""

#. leap/perl-Test-Number-Delta/summary
msgid "Compare the difference between numbers against a given tolerance"
msgstr ""

#. leap/perl-Test-Number-Delta/description
msgid ""
"At some point or another, most programmers find they need to compare "
"floating-point numbers for equality. The typical idiom is to test if the "
"absolute value of the difference of the numbers is within a desired "
"tolerance, usually called epsilon. This module provides such a function for "
"use with the Test::More manpage. Usage is similar to other test functions "
"described in the Test::More manpage. Semantically, the 'delta_within' "
"function replaces this kind of construct:\n"
"\n"
" ok ( abs($p - $q) < $epsilon, '$p is equal to $q' ) or      diag \"$p is "
"not equal to $q to within $epsilon\";\n"
"\n"
"While there's nothing wrong with that construct, it's painful to type it "
"repeatedly in a test script. This module does the same thing with a single "
"function call. The 'delta_ok' function is similar, but either uses a global "
"default value for epsilon or else calculates a 'relative' epsilon on the fly "
"so that epsilon is scaled automatically to the size of the arguments to "
"'delta_ok'. Both functions are exported automatically.\n"
"\n"
"Because checking floating-point equality is not always reliable, it is not "
"possible to check the 'equal to' boundary of 'less than or equal to "
"epsilon'. Therefore, Test::Number::Delta only compares if the absolute value "
"of the difference is *less than* epsilon (for equality tests) or\n"
"*greater than* epsilon (for inequality tests)."
msgstr ""

#. leap/perl-Test-Object/summary
msgid "Thoroughly testing objects via registered handlers"
msgstr ""

#. leap/perl-Test-Object/description
msgid ""
"In situations where you have deep trees of classes, there is a common "
"situation in which you test a module 4 or 5 subclasses down, which should "
"follow the correct behaviour of not just the subclass, but of all the parent "
"classes.\n"
"\n"
"This should be done to ensure that the implementation of a subclass has not "
"somehow \"broken\" the object's behaviour in a more general sense.\n"
"\n"
"'Test::Object' is a testing package designed to allow you to easily test "
"what you believe is a valid object against the expected behaviour of *all* "
"of the classes in its inheritance tree in one single call.\n"
"\n"
"To do this, you \"register\" tests (in the form of CODE or function "
"references) with 'Test::Object', with each test associated with a particular "
"class.\n"
"\n"
"When you call 'object_ok' in your test script, 'Test::Object' will check the "
"object against all registered tests. For each class that your object "
"responds to '$object->isa($class)' for, the appropriate testing function "
"will be called.\n"
"\n"
"Doing it this way allows adapter objects and other things that respond to "
"'isa' differently that the default to still be tested against the classes "
"that it is advertising itself as correctly.\n"
"\n"
"This also means that more than one test might be \"counted\" for each call "
"to 'object_ok'. You should account for this correctly in your expected test "
"count."
msgstr ""

#. leap/perl-Test-Output/summary
msgid "Utilities to test STDOUT and STDERR messages"
msgstr ""

#. leap/perl-Test-Output/description
msgid ""
"Test::Output provides a simple interface for testing output sent to 'STDOUT' "
"or 'STDERR'. A number of different utilities are included to try and be as "
"flexible as possible to the tester.\n"
"\n"
"Likewise, Capture::Tiny provides a much more robust capture mechanism "
"without than the original Test::Output::Tie."
msgstr ""

#. leap/perl-Test-Perl-Critic/summary
msgid "Use Perl::Critic in test programs"
msgstr ""

#. leap/perl-Test-Perl-Critic/description
msgid ""
"Test::Perl::Critic wraps the Perl::Critic engine in a convenient subroutine "
"suitable for test programs written using the Test::More framework. This "
"makes it easy to integrate coding-standards enforcement into the build "
"process. For ultimate convenience (at the expense of some flexibility), see "
"the criticism pragma.\n"
"\n"
"If you have an large existing code base, you might prefer to use Test::Perl::"
"Critic::Progressive, which allows you to clean your code incrementally "
"instead of all at once..\n"
"\n"
"If you'd like to try Perl::Critic without installing anything, there is a "
"web-service available at http://perlcritic.com. The web-service does not "
"support all the configuration features that are available in the native "
"Perl::Critic API, but it should give you a good idea of what Perl::Critic "
"can do."
msgstr ""

#. leap/perl-Test-PerlTidy/summary
msgid "Check that all your files are tidy"
msgstr ""

#. leap/perl-Test-PerlTidy/description
msgid ""
"This test submodule runs perltidy on files and reports errors if any of the "
"files differ after having been tidied. It does not permanently modify the "
"files being tested.\n"
"\n"
"By default, perltidy will be run on files under the current directory and "
"its subdirectories with extensions matching: .pm .pl .PL .t."
msgstr ""

#. leap/perl-Test-Pod/summary
msgid "Check for Pod Errors in Files"
msgstr ""

#. leap/perl-Test-Pod/description
msgid ""
"Check POD files for errors or warnings in a test file, using 'Pod::Simple' "
"to do the heavy lifting."
msgstr ""

#. leap/perl-Test-Pod-Coverage/summary
msgid "Check for pod coverage in your distribution."
msgstr ""

#. leap/perl-Test-Pod-Coverage/description
msgid ""
"Test::Pod::Coverage is used to create a test for your distribution, to "
"ensure that all relevant files in your distribution are appropriately "
"documented in pod.\n"
"\n"
"Can also be called with the Pod::Coverage manpage parms.\n"
"\n"
"    use Test::Pod::Coverage tests=>1;     pod_coverage_ok(         \"Foo::Bar"
"\",         { also_private => [ qr/^[A-Z_]+$/ ], },         \"Foo::Bar, with "
"all-caps functions as privates\",     );\n"
"\n"
"The the Pod::Coverage manpage parms are also useful for subclasses that "
"don't re-document the parent class's methods. Here's an example from the "
"Mail::SRS manpage.\n"
"\n"
"    pod_coverage_ok( \"Mail::SRS\" ); # No exceptions\n"
"\n"
"         my $trustme = { trustme => [qr/^(new|parse|compile)$/] };     "
"pod_coverage_ok( \"Mail::SRS::DB\", $trustme );     pod_coverage_ok( \"Mail::"
"SRS::Guarded\", $trustme );     pod_coverage_ok( \"Mail::SRS::Reversable\", "
"$trustme );     pod_coverage_ok( \"Mail::SRS::Shortcut\", $trustme );\n"
"\n"
"Alternately, you could use the Pod::Coverage::CountParents manpage, which "
"always allows a subclass to reimplement its parents' methods without "
"redocumenting them. For example:\n"
"\n"
"    my $trustparents = { coverage_class => 'Pod::Coverage::"
"CountParents' };     pod_coverage_ok( \"IO::Handle::Frayed\", "
"$trustparents );\n"
"\n"
"(The 'coverage_class' parameter is not passed to the coverage class with "
"other parameters.)\n"
"\n"
"If you want POD coverage for your module, but don't want to make Test::Pod::"
"Coverage a prerequisite for installing, create the following as your _t/pod-"
"coverage.t_ file:\n"
"\n"
"    use Test::More;     eval \"use Test::Pod::Coverage\";     plan skip_all "
"=> \"Test::Pod::Coverage required for testing pod coverage\" if $@;\n"
"\n"
"    plan tests => 1;     pod_coverage_ok( \"Pod::Master::Html\");\n"
"\n"
"Finally, Module authors can include the following in a _t/pod-coverage.t_ "
"file and have 'Test::Pod::Coverage' automatically find and check all modules "
"in the module distribution:\n"
"\n"
"    use Test::More;     eval \"use Test::Pod::Coverage 1.00\";     plan "
"skip_all => \"Test::Pod::Coverage 1.00 required for testing POD coverage\" "
"if $@;     all_pod_coverage_ok();"
msgstr ""

#. leap/perl-Test-Refcount/summary
msgid "Assert reference counts on objects"
msgstr ""

#. leap/perl-Test-Refcount/description
msgid ""
"The Perl garbage collector uses simple reference counting during the normal "
"execution of a program. This means that cycles or unweakened references in "
"other parts of code can keep an object around for longer than intended. To "
"help avoid this problem, the reference count of a new object from its class "
"constructor ought to be 1. This way, the caller can know the object will be "
"properly DESTROYed when it drops all of its references to it.\n"
"\n"
"This module provides two test functions to help ensure this property holds "
"for an object class, so as to be polite to its callers.\n"
"\n"
"If the assertion fails; that is, if the actual reference count is different "
"to what was expected, either of the following two modules may be used to "
"assist the developer in finding where the references are."
msgstr ""

#. leap/perl-Test-Requires/summary
msgid "Checks to see if the module can be loaded"
msgstr ""

#. leap/perl-Test-Requires/description
msgid ""
"Test::Requires checks to see if the module can be loaded.\n"
"\n"
"If this fails rather than failing tests this *skips all tests*.\n"
"\n"
"Test::Requires can also be used to require a minimum version of Perl:\n"
"\n"
"    use Test::Requires \"5.010\";  # quoting is necessary!!\n"
"\n"
"         use Test::Requires \"v5.10\";"
msgstr ""

#. leap/perl-Test-Requires-Git/summary
msgid "Check your test requirements against the available version of Git"
msgstr ""

#. leap/perl-Test-Requires-Git/description
msgid ""
"Test::Requires::Git checks if the version of Git available for testing meets "
"the given requirements. If the checks fail, then all tests will be "
"_skipped_.\n"
"\n"
"'use Test::Requires::Git' always calls 'test_requires_git' with the given "
"arguments. If you don't want 'test_requires_git' to be called at import "
"time, write this instead:\n"
"\n"
"    use Test::Requires::Git -nocheck;\n"
"\n"
"Passing the 'git' parameter (see test_requires_git below) to 'use Test::"
"Requires::Git' will override it for the rest of the program run."
msgstr ""

#. leap/perl-Test-RequiresInternet/summary
msgid "Easily test network connectivity"
msgstr ""

#. leap/perl-Test-RequiresInternet/description
msgid ""
"This module is intended to easily test network connectivity before "
"functional tests begin to non-local Internet resources. It does not require "
"any modules beyond those supplied in core Perl.\n"
"\n"
"If you do not specify a host/port pair, then the module defaults to using "
"'www.google.com' on port '80'.\n"
"\n"
"You may optionally specify the port by its name, as in 'http' or 'ldap'. If "
"you do this, the test module will attempt to look up the port number using "
"'getservbyname'.\n"
"\n"
"If you do specify a host and port, they must be specified in *pairs*. It is "
"a fatal error to omit one or the other.\n"
"\n"
"If the environment variable 'NO_NETWORK_TESTING' is set, then the tests will "
"be skipped without attempting any socket connections.\n"
"\n"
"If the sockets cannot connect to the specified hosts and ports, the "
"exception is caught, reported and the tests skipped."
msgstr ""

#. leap/perl-Test-Script/summary
msgid "Basic cross-platform tests for scripts"
msgstr ""

#. leap/perl-Test-Script/description
msgid ""
"The intent of this module is to provide a series of basic tests for 80% of "
"the testing you will need to do for scripts in the _script_ (or _bin_ as is "
"also commonly used) paths of your Perl distribution.\n"
"\n"
"It also provides similar functions for testing programs that are not Perl "
"scripts.\n"
"\n"
"Further, it aims to provide this functionality with perfect platform-"
"compatibility, and in a way that is as unobtrusive as possible.\n"
"\n"
"That is, if the program works on a platform, then *Test::Script* should "
"always work on that platform as well. Anything less than 100% is considered "
"unacceptable.\n"
"\n"
"In doing so, it is hoped that *Test::Script* can become a module that you "
"can safely make a dependency of all your modules, without risking that your "
"module won't on some platform because of the dependency.\n"
"\n"
"Where a clash exists between wanting more functionality and maintaining "
"platform safety, this module will err on the side of platform safety."
msgstr ""

#. leap/perl-Test-SharedFork/summary
msgid "Fork Test"
msgstr ""

#. leap/perl-Test-SharedFork/description
msgid ""
"Test::SharedFork is utility module for Test::Builder.\n"
"\n"
"This module makes fork(2) safety in your test case.\n"
"\n"
"This module merges test count with parent process & child process."
msgstr ""

#. leap/perl-Test-Simple/summary
#, fuzzy
msgid "Basic utilities for writing tests"
msgstr "Utilitaires de base pour le bureau GNOME 2.x"

#. leap/perl-Test-Simple/description
msgid ""
"** If you are unfamiliar with testing *read Test::Tutorial first!* **\n"
"\n"
"This is an extremely simple, extremely basic module for writing tests "
"suitable for CPAN modules and other pursuits. If you wish to do more "
"complicated testing, use the Test::More module (a drop-in replacement for "
"this one)."
msgstr ""

#. leap/perl-Test-Spec/summary
msgid "Write tests in a declarative specification style"
msgstr ""

#. leap/perl-Test-Spec/description
msgid ""
"This is a declarative specification-style testing system for behavior-driven "
"development (BDD) in Perl. The tests (a.k.a. examples) are named with "
"strings instead of subroutine names, so your fingers will suffer less "
"fatigue from underscore-itis, with the side benefit that the test reports "
"are more legible.\n"
"\n"
"This module is inspired by and borrows heavily from at http://rspec.info/"
"documentation, a BDD tool for the Ruby programming language."
msgstr ""

#. leap/perl-Test-Spelling/summary
msgid "Check for spelling errors in POD files"
msgstr ""

#. leap/perl-Test-Spelling/description
msgid ""
"Test::Spelling lets you check the spelling of a 'POD' file, and report its "
"results in standard Test::More fashion. This module requires a spellcheck "
"program such as at http://hunspell.github.io/, _aspell_, _spell_, or, "
"_ispell_. We suggest using Hunspell.\n"
"\n"
"    use Test::Spelling;     pod_file_spelling_ok('lib/Foo/Bar.pm', 'POD file "
"spelling OK');\n"
"\n"
"Note that it is a bad idea to run spelling tests during an ordinary CPAN "
"distribution install, or in a package that will run in an uncontrolled "
"environment. There is no way of predicting whether the word list or "
"spellcheck program used will give the same results. You *can* include the "
"test in your distribution, but be sure to run it only for authors of the "
"module by guarding it in a 'skip_all unless $ENV{AUTHOR_TESTING}' clause, or "
"by putting the test in your distribution's _xt/author_ directory. Anyway, "
"people installing your module really do not need to run such tests, as it is "
"unlikely that the documentation will acquire typos while in transit.\n"
"\n"
"You can add your own stop words, which are words that should be ignored by "
"the spell check, like so:\n"
"\n"
"    add_stopwords(qw(asdf thiswordiscorrect));\n"
"\n"
"Adding stop words in this fashion affects all files checked for the "
"remainder of the test script. See Pod::Spell (which this module is built "
"upon) for a variety of ways to add per-file stop words to each .pm file.\n"
"\n"
"If you have a lot of stop words, it's useful to put them in your test file's "
"'DATA' section like so:\n"
"\n"
"    use strict;     use warnings;     use Test::More;\n"
"\n"
"    use Test::Spelling;     use Pod::Wordlist;\n"
"\n"
"    add_stopwords(<DATA>);     all_pod_files_spelling_ok();\n"
"\n"
"    __DATA__     folksonomy     Jifty     Zakirov\n"
"\n"
"To maintain backwards compatibility, comment markers and some whitespace are "
"ignored. In the near future, the preprocessing we do on the arguments to "
"Test::Spelling/\"add_stopwords\" will be changed and documented properly."
msgstr ""

#. leap/perl-Test-Strict/summary
msgid "Check syntax, presence of use strict; and test coverage"
msgstr ""

#. leap/perl-Test-Strict/description
msgid ""
"The most basic test one can write is \"does it compile ?\". This module "
"tests if the code compiles and play nice with Test::Simple modules.\n"
"\n"
"Another good practice this module can test is to \"use strict;\" in all perl "
"files.\n"
"\n"
"By setting a minimum test coverage through 'all_cover_ok()', a code author "
"can ensure his code is tested above a preset level of _kwality_ throughout "
"the development cycle.\n"
"\n"
"Along with Test::Pod, this module can provide the first tests to setup for a "
"module author.\n"
"\n"
"This module should be able to run under the -T flag for perl >= 5.6. All "
"paths are untainted with the following pattern: 'qr|^([-+@\\w./:\\\\]+)$|' "
"controlled by '$Test::Strict::UNTAINT_PATTERN'."
msgstr ""

#. leap/perl-Test-SubCalls/summary
msgid "Track the number of times subs are called"
msgstr ""

#. leap/perl-Test-SubCalls/description
msgid ""
"There are a number of different situations (like testing caching code) where "
"you want to want to do a number of tests, and then verify that some "
"underlying subroutine deep within the code was called a specific number of "
"times.\n"
"\n"
"This module provides a number of functions for doing testing in this way in "
"association with your normal Test::More (or similar) test scripts."
msgstr ""

#. leap/perl-Test-Synopsis/summary
msgid "Test your SYNOPSIS code"
msgstr ""

#. leap/perl-Test-Synopsis/description
msgid ""
"Test::Synopsis is an (author) test module to find .pm or .pod files under "
"your _lib_ directory and then make sure the example snippet code in your "
"_SYNOPSIS_ section passes the perl compile check.\n"
"\n"
"Note that this module only checks the perl syntax (by wrapping the code with "
"'sub') and doesn't actually run the code, *UNLESS* that code is a 'BEGIN {}' "
"block or a 'use' statement.\n"
"\n"
"Suppose you have the following POD in your module.\n"
"\n"
"  =head1 NAME\n"
"\n"
"  Awesome::Template - My awesome template\n"
"\n"
"  =head1 SYNOPSIS\n"
"\n"
"    use Awesome::Template;\n"
"\n"
"    my $template = Awesome::Template->new;     $tempalte->render(\"template."
"at\");\n"
"\n"
"  =head1 DESCRIPTION\n"
"\n"
"An user of your module would try copy-paste this synopsis code and find that "
"this code doesn't compile because there's a typo in your variable name _"
"$tempalte_. Test::Synopsis will catch that error before you ship it."
msgstr ""

#. leap/perl-Test-TCP/summary
#, fuzzy
msgid "Testing Tcp Program"
msgstr "Programme terminal"

#. leap/perl-Test-TCP/description
#, fuzzy
msgid "Test::TCP is a test utility to test TCP/IP-based server programs."
msgstr "Les fonctions utiles pour Gtk"

#. leap/perl-Test-Taint/summary
#, fuzzy
msgid "Tools to test taintedness"
msgstr "Outils pour configurer les cartes atheros"

#. leap/perl-Test-Taint/description
msgid ""
"Tainted data is data that comes from an unsafe source, such as the command "
"line, or, in the case of web apps, any GET or POST transactions. Read the "
"perlsec man page for details on why tainted data is bad, and how to untaint "
"the data.\n"
"\n"
"When you're writing unit tests for code that deals with tainted data, you'll "
"want to have a way to provide tainted data for your routines to handle, and "
"easy ways to check and report on the taintedness of your data, in standard "
"Test::More style."
msgstr ""

#. leap/perl-Test-TempDir-Tiny/summary
msgid "Temporary directories that stick around when tests fail"
msgstr ""

#. leap/perl-Test-TempDir-Tiny/description
msgid ""
"This module works with Test::More to create temporary directories that stick "
"around if tests fail.\n"
"\n"
"It is loosely based on Test::TempDir, but with less complexity, greater "
"portability and zero non-core dependencies. (Capture::Tiny is recommended "
"for testing.)\n"
"\n"
"The tempdir and in_tempdir functions are exported by default.\n"
"\n"
"If the current directory is writable, the root for directories will be _./"
"tmp_. Otherwise, a File::Temp directory will be created wherever temporary "
"directories are stored for your system.\n"
"\n"
"Every _*.t_ file gets its own subdirectory under the root based on the test "
"filename, but with slashes and periods replaced with underscores. For "
"example, _t/foo.t_ would get a test-file-specific subdirectory _./tmp/"
"t_foo_t/_. Directories created by tempdir get put in that directory. This "
"makes it very easy to find files later if tests fail.\n"
"\n"
"The test-file-specific name is consistent from run-to-run. If an old "
"directory already exists, it will be removed.\n"
"\n"
"When the test file exits, if all tests passed, then the test-file-specific "
"directory is recursively removed.\n"
"\n"
"If a test failed and the root directory is _./tmp_, the test-file-specific "
"directory sticks around for inspection. (But if the root is a File::Temp "
"directory, it is always discarded).\n"
"\n"
"If nothing is left in _./tmp_ (i.e. no other test file failed), then _./tmp_ "
"is cleaned up as well (unless it's a symlink).\n"
"\n"
"This module attempts to avoid race conditions due to parallel testing. In "
"extreme cases, the test-file-specific subdirectory might be created as a "
"regular File::Temp directory rather than in _./tmp_. In such a case, a "
"warning will be issued."
msgstr ""

#. leap/perl-Test-Time/summary
msgid "Overrides the time() and sleep() core functions for testing"
msgstr ""

#. leap/perl-Test-Time/description
msgid ""
"Test::Time can be used to test modules that deal with time. Once you 'use' "
"this module, all references to 'time' and 'sleep' will be internalized. You "
"can set custom time by passing time => number after the 'use' statement:\n"
"\n"
"    use Test::Time time => 1;\n"
"\n"
"    my $now = time;    # $now is equal to 1     sleep 300;         # returns "
"immediately, displaying a note     my $then = time;   # $then equals to 301"
msgstr ""

#. leap/perl-Test-Trap/summary
msgid "Trap exit codes, exceptions, output, etc"
msgstr ""

#. leap/perl-Test-Trap/description
msgid ""
"Primarily (but not exclusively) for use in test scripts: A block eval on "
"steroids, configurable and extensible, but by default trapping (Perl) "
"STDOUT, STDERR, warnings, exceptions, would-be exit codes, and return values "
"from boxed blocks of test code.\n"
"\n"
"The values collected by the latest trap can then be queried or tested "
"through a special trap object."
msgstr ""

#. leap/perl-Test-Unit/summary
#, fuzzy
msgid "The PerlUnit testing framework"
msgstr "Bean Scripting Framework"

#. leap/perl-Test-Unit/description
msgid ""
"This framework is intended to support unit testing in an object-oriented "
"development paradigm (with support for inheritance of tests etc.) and is "
"derived from the JUnit testing framework for Java by Kent Beck and Erich "
"Gamma. To start learning how to use this framework, see the Test::Unit::"
"TestCase manpage and the Test::Unit::TestSuite manpage. (There will also "
"eventually be a tutorial in the Test::Unit::Tutorial manpage.\n"
"\n"
"However 'Test::Unit::Procedural' is the procedural style interface to a "
"sophisticated unit testing framework for Perl that . Test::Unit is intended "
"to provide a simpler interface to the framework that is more suitable for "
"use in a scripting style environment. Therefore, Test::Unit does not provide "
"much support for an object-oriented approach to unit testing."
msgstr ""

#. leap/perl-Test-Unit-Lite/summary
msgid "Unit testing without external dependencies"
msgstr ""

#. leap/perl-Test-Unit-Lite/description
msgid ""
"This framework provides lighter version of the Test::Unit manpage framework. "
"It implements some of the the Test::Unit manpage classes and methods needed "
"to run test units. The the Test::Unit::Lite manpage tries to be compatible "
"with public API of the Test::Unit manpage. It doesn't implement all classes "
"and methods at 100% and only those necessary to run tests are available.\n"
"\n"
"The the Test::Unit::Lite manpage can be distributed as a part of package "
"distribution, so the package can be distributed without dependency on "
"modules outside standard Perl distribution. The the Test::Unit::Lite manpage "
"is provided as a single file."
msgstr ""

#. leap/perl-Test-UseAllModules/summary
msgid "do use_ok() for all the MANIFESTed modules"
msgstr ""

#. leap/perl-Test-UseAllModules/description
msgid ""
"I'm sick of writing 00_load.t (or something like that) that'll do use_ok() "
"for every module I write. I'm sicker of updating 00_load.t when I add "
"another file to the distro. This module reads MANIFEST to find modules to be "
"tested and does use_ok() for each of them. Now all you have to do is update "
"MANIFEST. You don't have to modify the test any more (hopefully)."
msgstr ""

#. leap/perl-Test-WWW-Mechanize/summary
#. leap/perl-Test-WWW-Mechanize/description
msgid "Testing-specific WWW::Mechanize subclass"
msgstr ""

#. leap/perl-Test-WWW-Selenium/summary
msgid "Test applications using Selenium Remote Control"
msgstr ""

#. leap/perl-Test-WWW-Selenium/description
msgid ""
"This module is a the WWW::Selenium manpage subclass providing some methods "
"useful for writing tests. For each Selenium command (open, click, type, ...) "
"there is a corresponding '<command>_ok' method that checks the return value "
"(open_ok, click_ok, type_ok).\n"
"\n"
"For each Selenium getter (get_title, ...) there are four autogenerated "
"methods ('<getter>_is', '<getter>_isnt', '<getter>_like', '<getter>_unlike') "
"to check the value of the attribute.\n"
"\n"
"By calling the constructor with 'default_names' set to a true value your "
"tests will be given a reasonable name should you choose not to provide one "
"of your own. The test name should always be the third argument."
msgstr ""

#. leap/perl-Test-Warn/summary
#, fuzzy
msgid "Perl extension to test methods for warnings"
msgstr "Extension perl"

#. leap/perl-Test-Warn/description
msgid ""
"A good style of Perl programming calls for a lot of diverse regression "
"tests.\n"
"\n"
"This module provides a few convenience methods for testing warning based "
"code.\n"
"\n"
"If you are not already familiar with the Test::More manpage now would be the "
"time to go take a look."
msgstr ""

#. leap/perl-Test-Warnings/summary
msgid "Test for warnings and the lack of them"
msgstr ""

#. leap/perl-Test-Warnings/description
msgid ""
"If you've ever tried to use Test::NoWarnings to confirm there are no "
"warnings generated by your tests, combined with the convenience of "
"'done_testing' to not have to declare a test count, you'll have discovered "
"that these two features do not play well together, as the test count will be "
"calculated _before_ the warnings test is run, resulting in a TAP error. (See "
"'examples/test_nowarnings.pl' in this distribution for a demonstration.)\n"
"\n"
"This module is intended to be used as a drop-in replacement for Test::"
"NoWarnings: it also adds an extra test, but runs this test _before_ "
"'done_testing' calculates the test count, rather than after. It does this by "
"hooking into 'done_testing' as well as via an 'END' block. You can declare a "
"plan, or not, and things will still Just Work.\n"
"\n"
"It is actually equivalent to:\n"
"\n"
"    use Test::NoWarnings 1.04 ':early';\n"
"\n"
"as warnings are still printed normally as they occur. You are safe, and "
"enthusiastically encouraged, to perform a global search-replace of the above "
"with 'use Test::Warnings;' whether or not your tests have a plan.\n"
"\n"
"It can also be used as a replacement for Test::Warn, if you wish to test the "
"content of expected warnings; read on to find out how."
msgstr ""

#. leap/perl-Test-Without-Module/summary
msgid "Test fallback behaviour in absence of modules"
msgstr ""

#. leap/perl-Test-Without-Module/description
msgid ""
"This module allows you to deliberately hide modules from a program even "
"though they are installed. This is mostly useful for testing modules that "
"have a fallback when a certain dependency module is not installed."
msgstr ""

#. leap/perl-Test-WriteVariants/summary
msgid "Dynamic generation of tests in nested combinations of contexts"
msgstr ""

#. leap/perl-Test-WriteVariants/description
msgid ""
"Test::WriteVariants is a utility to create variants of a common test.\n"
"\n"
"Given the situation - like in DBI where some tests are the same for DBI::"
"SQL::Nano and it's drop-in replacement SQL::Statement. Or a distribution duo "
"having a Pure-Perl and an XS variant - and the same test shall be used to "
"ensure XS and PP version are really drop-in replacements for each other."
msgstr ""

#. leap/perl-Test-YAML/summary
#, fuzzy
msgid "Testing Module for YAML Implementations"
msgstr "Gestion des préférences"

#. leap/perl-Test-YAML/description
msgid ""
"the Test::YAML manpage is a subclass of the Test::Base manpage with YAML "
"specific support."
msgstr ""

#. leap/perl-Test-YAML-Valid/summary
#. leap/perl-Test-YAML-Valid/description
msgid "Test for valid YAML"
msgstr ""

#. leap/perl-Test-utf8/summary
msgid "Handy utf8 tests"
msgstr ""

#. leap/perl-Test-utf8/description
msgid ""
"This module is a collection of tests useful for dealing with utf8 strings in "
"Perl.\n"
"\n"
"This module has two types of tests: The validity tests check if a string is "
"valid and not corrupt, whereas the characteristics tests will check that "
"string has a given set of characteristics."
msgstr ""

#. leap/perl-Test2-Plugin-NoWarnings/summary
msgid "Fail if tests warn"
msgstr ""

#. leap/perl-Test2-Plugin-NoWarnings/description
msgid ""
"Loading this plugin causes your tests to fail if there any warnings while "
"they run. Each warning generates a new failing test and the warning content "
"is outputted via 'diag'.\n"
"\n"
"This module uses '$SIG{__WARN__}', so if the code you're testing sets this, "
"then this module will stop working."
msgstr ""

#. leap/perl-Test2-Suite/summary
msgid "Distribution with a rich set of tools built upon the Test2"
msgstr ""

#. leap/perl-Test2-Suite/description
msgid ""
"Rich set of tools, plugins, bundles, etc built upon the Test2 testing "
"library. If you are interested in writing tests, this is the distribution "
"for you."
msgstr ""

#. leap/perl-Text-Aligner/summary
msgid "Module to Align Text"
msgstr ""

#. leap/perl-Text-Aligner/description
msgid ""
"Text::Aligner exports a single function, align(), which is used to justify "
"strings to various alignment styles. The alignment specification is the "
"first argument, followed by any number of scalars which are subject to "
"alignment.\n"
"\n"
"The operation depends on context. In list context, a list of the justified "
"scalars is returned. In scalar context, the justified arguments are joined "
"into a single string with newlines appended. The original arguments remain "
"unchanged. In void context, in-place justification is attempted. In this "
"case, all arguments must be lvalues.\n"
"\n"
"Align() also does one level of scalar dereferencing. That is, whenever one "
"of the arguments is a scalar reference, the scalar pointed to is aligned "
"instead. Other references are simply stringified. An undefined argument is "
"interpreted as an empty string without complaint.\n"
"\n"
"Alignment respects colorizing escape sequences a la Term::ANSIColor which "
"means it knows that these sequences don't take up space on the screen."
msgstr ""

#. leap/perl-Text-Autoformat/summary
#. leap/perl-Text-Autoformat/description
msgid "Automatic text wrapping and reformatting"
msgstr ""

#. leap/perl-Text-BibTeX/summary
#, fuzzy
msgid "Interface to Read and Parse BibTeX Files"
msgstr "Dscription de caratères accentués pour les polices Adobe AFM."

#. leap/perl-Text-BibTeX/description
msgid ""
"The 'Text::BibTeX' module serves mainly as a high-level introduction to the "
"'Text::BibTeX' library, for both code and documentation purposes. The code "
"loads the two fundamental modules for processing BibTeX files ('Text::"
"BibTeX::File' and 'Text::BibTeX::Entry'), and this documentation gives a "
"broad overview of the whole library that isn't available in the "
"documentation for the individual modules that comprise it.\n"
"\n"
"In addition, the 'Text::BibTeX' module provides a number of miscellaneous "
"functions that are useful in processing BibTeX data (especially the kind "
"that comes from bibliographies as defined by BibTeX 0.99, rather than "
"generic database files). These functions don't generally fit in the object-"
"oriented class hierarchy centred around the 'Text::BibTeX::Entry' class, "
"mainly because they are specific to bibliographic data and operate on "
"generic strings (rather than being tied to a particular BibTeX entry). These "
"are also documented here, in \"MISCELLANEOUS FUNCTIONS\".\n"
"\n"
"Note that every module described here begins with the 'Text::BibTeX' prefix. "
"For brevity, I have dropped this prefix from most class and module names in "
"the rest of this manual page (and in most of the other manual pages in the "
"library)."
msgstr ""

#. leap/perl-Text-BibTeX/perl-Text-BibTeX-devel/summary
msgid "C library for parsing and processing BibTeX files"
msgstr ""

#. leap/perl-Text-BibTeX/perl-Text-BibTeX-devel/description
msgid ""
"The libbtparse is a C library for parsing and processing BibTeX files. Note "
"that the interface provided by libbtparse, while complete, is fairly low-"
"level.  If you have more sophisticated needs, you might be interested the "
"\"Text::BibTeX\" module for Perl."
msgstr ""

#. leap/perl-Text-Brew/summary
msgid "An implementation of the Brew edit distance"
msgstr ""

#. leap/perl-Text-Brew/description
msgid ""
"This module implements the Brew edit distance that is very close to the "
"dynamic programming technique used for the Wagner-Fischer (and so for the "
"Levenshtein) edit distance. Please look at the module references below. For "
"more information about the Brew edit distance see: <http://ling.ohio-state."
"edu/~cbrew/795M/string-distance.html>\n"
"\n"
"The difference here is that you have separated costs for the DELetion and "
"INSertion operations (but with the default to 1 for both, you obtain the "
"Levenshtein edit distance). But the most interesting feature is that you can "
"obtain the description of the edits needed to transform the first string "
"into the second one (not vice versa: here DELetions are separated from "
"INSertions). The difference from the original algorithm by Chris Brew is "
"that I have added the SUBST operation, making it different from MATCH "
"operation.\n"
"\n"
"The symbols used here are:\n"
"\n"
" INITIAL that is the INITIAL operation (i.e. NO operation)  MATCH\t that is "
"the MATCH operation (0 is the default cost)  SUBST\t that is the "
"SUBSTitution operation (1 is the default cost)  DEL\t that is the DELetion "
"operation (1 is the default cost)  INS\t that is the INSertion operation (1 "
"is the default cost)\n"
"\n"
"and you can change the default costs (see below).\n"
"\n"
"You can make INS and DEL the same operation in a simple way:\n"
"\n"
" 1) give both the same cost  2) change the output string DEL to INS/DEL (o "
"whatever)  3) change the output string INS to INS/DEL (o whatever)"
msgstr ""

#. leap/perl-Text-CSV/summary
#, fuzzy
msgid "Comma-Separated Values Manipulator (Using Xs or Pureperl)"
msgstr "Routines de manipulation de dates"

#. leap/perl-Text-CSV/description
msgid ""
"Text::CSV is a thin wrapper for Text::CSV_XS-compatible modules now. All the "
"backend modules provide facilities for the composition and decomposition of "
"comma-separated values. Text::CSV uses Text::CSV_XS by default, and when "
"Text::CSV_XS is not available, falls back on Text::CSV_PP, which is bundled "
"in the same distribution as this module."
msgstr ""

#. leap/perl-Text-CSV_XS/summary
#, fuzzy
msgid "Comma-Separated Values Manipulation Routines"
msgstr "Routines de manipulation de dates"

#. leap/perl-Text-CSV_XS/description
msgid ""
"Text::CSV_XS provides facilities for the composition and decomposition of "
"comma-separated values. An instance of the Text::CSV_XS class will combine "
"fields into a 'CSV' string and parse a 'CSV' string into fields.\n"
"\n"
"The module accepts either strings or files as input and support the use of "
"user-specified characters for delimiters, separators, and escapes."
msgstr ""

#. leap/perl-Text-Capitalize/summary
msgid ""
"Capitalize strings (\"to WORK AS titles\" becomes \"To Work as Titles\")"
msgstr ""

#. leap/perl-Text-Capitalize/description
msgid ""
"Text::Capitalize provides some routines for *title-like* formatting of "
"strings.\n"
"\n"
"The simple *capitalize* function just makes the inital character of each "
"word uppercase, and forces the rest to lowercase.\n"
"\n"
"The *capitalize_title* function applies English title case rules (discussed "
"below) where only the \"important\" words are supposed to be capitalized. "
"There are also some customization features provided to allow the user to "
"choose variant rules.\n"
"\n"
"Comparing *capitalize* and *captialize_title*:\n"
"\n"
"  Input:             \"lost watches of splitsville\"   capitalize:        "
"\"Lost Watches Of Splitsville\"   capitalize_title:  \"Lost Watches of "
"Splitsville\"\n"
"\n"
"Some examples of formatting with *capitalize_title*:\n"
"\n"
"  Input:             \"KiLLiNG TiMe\"   capitalize_title:  \"Killing Time\"\n"
"\n"
"  Input:             \"we have come to wound the autumnal city\"   "
"capitalize_title:  \"We Have Come to Wound the Autumnal City\"\n"
"\n"
"  Input:             \"ask for whom they ask for\"   captialize_title:  "
"\"Ask for Whom They Ask For\"\n"
"\n"
"Text::Capitalize also provides some functions for special effects such as\n"
"*scramble_case*, which typically would be used for this sort of "
"transformation:\n"
"\n"
"  Input:            \"get whacky\"   scramble_case:    \"gET wHaCkY\"  (or "
"something similar)"
msgstr ""

#. leap/perl-Text-CharWidth/summary
msgid "Get number of occupied columns of a string on terminal"
msgstr ""

#. leap/perl-Text-CharWidth/description
msgid ""
"Get number of occupied columns of a string on terminal\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     &#20037;&#20445;&#30000; &#26234;&#24195; (Tomohiro KUBOTA) "
"<kubota@debian.org>"
msgstr ""

#. leap/perl-Text-DelimMatch/summary
msgid "DelimMatch for Locating Delimited Substrings with Proper Nesting"
msgstr ""

#. leap/perl-Text-DelimMatch/description
msgid ""
"DelimMatch is a Perl 5 module that provides functions for locating delimited "
"substrings with proper nesting."
msgstr ""

#. leap/perl-Text-Diff/summary
msgid "Perform diffs on files and record sets"
msgstr ""

#. leap/perl-Text-Diff/description
msgid ""
"'diff()' provides a basic set of services akin to the GNU 'diff' utility. It "
"is not anywhere near as feature complete as GNU 'diff', but it is better "
"integrated with Perl and available on all platforms. It is often faster than "
"shelling out to a system's 'diff' executable for small files, and generally "
"slower on larger files.\n"
"\n"
"Relies on Algorithm::Diff for, well, the algorithm. This may not produce the "
"same exact diff as a system's local 'diff' executable, but it will be a "
"valid diff and comprehensible by 'patch'. We haven't seen any differences "
"between Algorithm::Diff's logic and GNU 'diff''s, but we have not examined "
"them to make sure they are indeed identical. \n"
"*Note*: If you don't want to import the 'diff' function, do one of the "
"following:\n"
"\n"
"   use Text::Diff ();\n"
"\n"
"   require Text::Diff;\n"
"\n"
"That's a pretty rare occurrence, so 'diff()' is exported by default.\n"
"\n"
"If you pass a filename, but the file can't be read, then 'diff()' will "
"'croak'."
msgstr ""

#. leap/perl-Text-German/summary
#. leap/perl-Text-German/description
#, fuzzy
msgid "Text::German Perl module"
msgstr "Net::SSLeay Perl Module"

#. leap/perl-Text-Glob/summary
msgid "Match Globbing Patterns Against Text"
msgstr ""

#. leap/perl-Text-Glob/description
msgid ""
"Text::Glob implements glob(3) style matching that can be used to match "
"against text, rather than fetching names from a filesystem. If you want to "
"do full file globbing use the File::Glob module instead."
msgstr ""

#. leap/perl-Text-Hunspell/summary
#, fuzzy
msgid "Perl interface to the Hunspell library"
msgstr "Interface python pourla bibliothèque gdbm"

#. leap/perl-Text-Hunspell/description
msgid ""
"This module provides a Perl interface to the *Hunspell* library. This module "
"is to meet the need of looking up many words, one at a time, in a single "
"session, such as spell-checking a document in memory.\n"
"\n"
"The example code describes the interface on http://hunspell.sf.net"
msgstr ""

#. leap/perl-Text-Iconv/summary
#, fuzzy
msgid "Perl interface to iconv() codeset conversion function"
msgstr "Interface perl pour ImageMagick"

#. leap/perl-Text-Iconv/description
msgid ""
"The Text::Iconv module provides a Perl interface to the iconv() function as "
"defined by the Single UNIX Specification.\n"
"\n"
"The convert() method converts the encoding of characters in the input string "
"from the fromcode codeset to the tocode codeset, and returns the result.\n"
"\n"
"Settings of fromcode and tocode and their permitted combinations are "
"implementation-dependent. Valid values are specified in the system "
"documentation; the iconv(1) utility should also provide a -l option that "
"lists all supported codesets."
msgstr ""

#. leap/perl-Text-Kakasi/summary
msgid "Perl binding for KAKASI, the kanji kana simple inverter"
msgstr ""

#. leap/perl-Text-Kakasi/description
msgid ""
"This module provides libkakasi interface for perl. libkakasi is a part of "
"KAKASI.  KAKASI is the language processing filter to convert Kanji "
"characters to Hiragana, Katakana or Romaji and may be helpful to read "
"Japanese documents.  More information about KAKASI is available at <http://"
"kakasi.namazu.org/>."
msgstr ""

#. leap/perl-Text-Markdown/summary
msgid "Convert Markdown syntax to (X)HTML"
msgstr ""

#. leap/perl-Text-Markdown/description
msgid ""
"Markdown is a text-to-HTML filter; it translates an easy-to-read / easy-to-"
"write structured text format into HTML. Markdown's text format is most "
"similar to that of plain text email, and supports features such as headers, "
"*emphasis*, code blocks, blockquotes, and links.\n"
"\n"
"Markdown's syntax is designed not as a generic markup language, but "
"specifically to serve as a front-end to (X)HTML. You can use span-level HTML "
"tags anywhere in a Markdown document, and you can use block level HTML tags "
"(like <div> and <table> as well)."
msgstr ""

#. leap/perl-Text-Patch/summary
msgid "Patches text with given patch"
msgstr ""

#. leap/perl-Text-Patch/description
msgid ""
"Text::Patch combines source text with given diff (difference) data. Diff "
"data is produced by Text::Diff module or by the standard diff utility (man "
"diff, see -u option). \n"
"* patch( $source, $diff, options... )\n"
"\n"
"  First argument is source (original) text. Second is the diff data. Third   "
"argument can be either hash reference with options or all the rest   "
"arguments will be considered patch options:\n"
"\n"
"      $output = patch( $source, $diff, STYLE => \"Unified\", ... );\n"
"\n"
"      $output = patch( $source, $diff, { STYLE => \"Unified\", ... } );\n"
"\n"
"  Options are:\n"
"\n"
"    STYLE => 'Unified'\n"
"\n"
"  STYLE can be \"Unified\", \"Context\" or \"OldStyle\".\n"
"\n"
"  The 'Unified' diff format looks like this:\n"
"\n"
"    @@ -1,7 +1,6 @@     -The Way that can be told of is not the eternal "
"Way;     -The name that can be named is not the eternal name.      The "
"Nameless is the origin of Heaven and Earth;     -The Named is the mother of "
"all things.     +The named is the mother of all things.     +      Therefore "
"let there always be non-being,        so we may see their subtlety,      And "
"let there always be being,     @@ -9,3 +8,6 @@      The two are the "
"same,      But after they are produced,        they have different "
"names.     +They both may be called deep and profound.     +Deeper and more "
"profound,     +The door of all subtleties!"
msgstr ""

#. leap/perl-Text-RecordParser/summary
msgid "Read Record-Oriented Files"
msgstr ""

#. leap/perl-Text-RecordParser/description
msgid ""
"This module is for reading record-oriented data in a delimited text file. "
"The most common example have records separated by newlines and fields "
"separated by commas or tabs, but this module aims to provide a consistent "
"interface for handling sequential records in a file however they may be "
"delimited. Typically this data lists the fields in the first line of the "
"file, in which case you should call 'bind_header' to bind the field name (or "
"not, and it will be called implicitly). If the first line contains data, you "
"can still bind your own field names via 'bind_fields'. Either way, you can "
"then use many methods to get at the data as arrays or hashes."
msgstr ""

#. leap/perl-Text-Reform/summary
msgid "Manual text wrapping and reformatting"
msgstr ""

#. leap/perl-Text-Reform/description
msgid ""
"The module supplies a re-entrant, highly configurable replacement for the "
"built-in Perl format() mechanism.\n"
"\n"
"Author:\n"
"-------         Damian Conway <damian@conway.org>"
msgstr ""

#. leap/perl-Text-Roman/summary
msgid "Allows conversion between Roman and Arabic algarisms."
msgstr ""

#. leap/perl-Text-Roman/description
msgid ""
"This package supports both conventional Roman algarisms (which range from "
"_1_ to _3999_) and Milhar Romans, a variation which uses a bar across the "
"algarism to indicate multiplication by _1_000_. For the purposes of this "
"module, acceptable syntax consists of an underscore suffixed to the algarism "
"e.g. IV_V = _4_005_. The term Milhar apparently derives from the Portuguese "
"word for \"thousands\" and the range of this notation extends the range of "
"Roman numbers to _3999 * 1000 + 3999 = 4_002_999_.\n"
"\n"
"Note: the functions in this package treat Roman algarisms in a case-"
"insensitive manner such that \"VI\" == \"vI\" == \"Vi\" == \"vi\".\n"
"\n"
"The following functions may be imported into the caller package by name:"
msgstr ""

#. leap/perl-Text-Soundex/summary
#, fuzzy
msgid "Implementation of the soundex algorithm"
msgstr "Implémentation du démon d'identification RFC1413"

#. leap/perl-Text-Soundex/description
msgid ""
"Soundex is a phonetic algorithm for indexing names by sound, as pronounced "
"in English. The goal is for names with the same pronunciation to be encoded "
"to the same representation so that they can be matched despite minor "
"differences in spelling. Soundex is the most widely known of all phonetic "
"algorithms and is often used (incorrectly) as a synonym for \"phonetic "
"algorithm\". Improvements to Soundex are the basis for many modern phonetic "
"algorithms. (Wikipedia, 2007)\n"
"\n"
"This module implements the original soundex algorithm developed by Robert "
"Russell and Margaret Odell, patented in 1918 and 1922, as well as a "
"variation called \"American Soundex\" used for US census data, and current "
"maintained by the National Archives and Records Administration (NARA).\n"
"\n"
"The soundex algorithm may be recognized from Donald Knuth's *The Art of "
"Computer Programming*. The algorithm described by Knuth is the NARA "
"algorithm.\n"
"\n"
"The value returned for strings which have no soundex encoding is defined "
"using '$Text::Soundex::nocode'. The default value is 'undef', however values "
"such as ''Z000'' are commonly used alternatives.\n"
"\n"
"For backward compatibility with older versions of this module the '$Text::"
"Soundex::nocode' is exported into the caller's namespace as "
"'$soundex_nocode'.\n"
"\n"
"In scalar context, 'soundex()' returns the soundex code of its first "
"argument. In list context, a list is returned in which each element is the "
"soundex code for the corresponding argument passed to 'soundex()'. For "
"example, the following code assigns @codes the value '('M200', 'S320')':\n"
"\n"
"   @codes = soundex qw(Mike Stok);\n"
"\n"
"To use 'Text::Soundex' to generate codes that can be used to search one of "
"the publically available US Censuses, a variant of the soundex algorithm "
"must be used:\n"
"\n"
"    use Text::Soundex;     $code = soundex_nara($name);\n"
"\n"
"An example of where these algorithm differ follows:\n"
"\n"
"    use Text::Soundex;     print soundex(\"Ashcraft\"), \"\\n\";       # "
"prints: A226     print soundex_nara(\"Ashcraft\"), \"\\n\";  # prints: A261"
msgstr ""

#. leap/perl-Text-SpellChecker/summary
msgid "OO interface for spell-checking a block of text"
msgstr ""

#. leap/perl-Text-SpellChecker/description
msgid ""
"This module is a thin layer above either Text::Aspell or Text::Hunspell "
"(preferring the latter if available), and allows one to spellcheck a body of "
"text.\n"
"\n"
"Whereas Text::(Hu|A)spell deals with words, Text::Spellchecker deals with "
"blocks of text. For instance, we provide methods for iterating through the "
"text, serializing the object (thus remembering where we left off), and "
"highlighting the current misspelled word within the text."
msgstr ""

#. leap/perl-Text-Sprintf-Named/summary
msgid "Sprintf-like function with named conversions"
msgstr ""

#. leap/perl-Text-Sprintf-Named/description
msgid ""
"Text::Sprintf::Named provides a sprintf equivalent with named conversions. "
"Named conversions are sprintf field specifiers (like '\"%s\"' or '\"%4d'\") "
"only they are associated with the key of an associative array of parameters. "
"So for example '\"s\"' will emit the ''name'' parameter as a string, and "
"'\"4d\"' will emit the ''num'' parameter as a variable with a width of 4."
msgstr ""

#. leap/perl-Text-Table/summary
msgid "Organize Data in Tables"
msgstr ""

#. leap/perl-Text-Table/description
msgid ""
"Organization of data in table form is a time-honored and useful method of "
"data representation. While columns of data are trivially generated by "
"computer through formatted output, even simple tasks like keeping titles "
"aligned with the data columns are not trivial, and the one-shot solutions "
"one comes up with tend to be particularly hard to maintain. Text::Table "
"allows you to create and maintain tables that adapt to alignment "
"requirements as you use them."
msgstr ""

#. leap/perl-Text-TabularDisplay/summary
msgid "Display text in formatted table output"
msgstr ""

#. leap/perl-Text-TabularDisplay/description
msgid ""
"Text::TabularDisplay simplifies displaying textual data in a table. The "
"output is identical to the columnar display of query results in the mysql "
"text monitor. For example, this data:\n"
"\n"
"    1, \"Tom Jones\", \"(666) 555-1212\"     2, \"Barnaby Jones\", \"(666) "
"555-1213\"     3, \"Bridget Jones\", \"(666) 555-1214\"\n"
"\n"
"Used like so:\n"
"\n"
"    my $t = Text::TabularDisplay->new(qw(id name phone));     $t->add(1, "
"\"Tom Jones\", \"(666) 555-1212\");     $t->add(2, \"Barnaby Jones\", "
"\"(666) 555-1213\");     $t->add(3, \"Bridget Jones\", \"(666) "
"555-1214\");     print $t->render;\n"
"\n"
"Produces:\n"
"\n"
"    +----+---------------+----------------+     | id | name          | "
"phone          |     +----+---------------+----------------+     | 1  | Tom "
"Jones     | (666) 555-1212 |     | 2  | Barnaby Jones | (666) 555-1213 |     "
"| 3  | Bridget Jones | (666) 555-1214 |     +----+---------------"
"+----------------+"
msgstr ""

#. leap/perl-Text-Template/summary
msgid "Expand template text with embedded Perl"
msgstr ""

#. leap/perl-Text-Template/description
msgid ""
"This is a library for generating form letters, building HTML pages, or "
"filling in templates generally. A `template' is a piece of text that has "
"little Perl programs embedded in it here and there. When you `fill in' a "
"template, you evaluate the little programs and replace them with their "
"values.\n"
"\n"
"You can store a template in a file outside your program. People can modify "
"the template without modifying the program. You can separate the formatting "
"details from the main code, and put the formatting parts of the program into "
"the template. That prevents code bloat and encourages functional separation."
msgstr ""

#. leap/perl-Text-Unidecode/summary
msgid "Plain Ascii Transliterations of Unicode Text"
msgstr ""

#. leap/perl-Text-Unidecode/description
msgid ""
"It often happens that you have non-Roman text data in Unicode, but you can't "
"display it-- usually because you're trying to show it to a user via an "
"application that doesn't support Unicode, or because the fonts you need "
"aren't accessible. You could represent the Unicode characters as \"???????\" "
"or \"\\15BA\\15A0\\1610...\", but that's nearly useless to the user who "
"actually wants to read what the text says.\n"
"\n"
"What Text::Unidecode provides is a function, 'unidecode(...)' that takes "
"Unicode data and tries to represent it in US-ASCII characters (i.e., the "
"universally displayable characters between 0x00 and 0x7F). The "
"representation is almost always an attempt at _transliteration_-- i.e., "
"conveying, in Roman letters, the pronunciation expressed by the text in some "
"other writing system. (See the example in the synopsis.)\n"
"\n"
"NOTE:\n"
"\n"
"To make sure your perldoc/Pod viewing setup for viewing this page is "
"working: The six-letter word \"résumé\" should look like \"resume\" with an "
"\"/\" accent on each \"e\".\n"
"\n"
"For further tests, and help if that doesn't work, see below, A POD ENCODING "
"TEST."
msgstr ""

#. leap/perl-Text-WrapI18N/summary
#, fuzzy
msgid "Line Wrapping Module"
msgstr "Module de configuration générique"

#. leap/perl-Text-WrapI18N/description
msgid ""
"Line wrapping module with support for multibyte, fullwidth, and combining "
"characters and languages without whitespaces between words."
msgstr ""

#. leap/perl-Text-Wrapper/summary
msgid "Word wrap text by breaking long lines"
msgstr ""

#. leap/perl-Text-Wrapper/description
msgid ""
"Text::Wrapper provides simple word wrapping. It breaks long lines, but does "
"not alter spacing or remove existing line breaks. If you're looking for more "
"sophisticated text formatting, try the the Text::Format manpage module.\n"
"\n"
"Reasons to use Text::Wrapper instead of Text::Format: \n"
"* *\n"
"\n"
"  Text::Wrapper is significantly smaller. \n"
"* *\n"
"\n"
"  It does not alter existing whitespace or combine short lines. It only   "
"breaks long lines.\n"
"\n"
"Again, if Text::Wrapper doesn't meet your needs, try Text::Format."
msgstr ""

#. leap/perl-TheSchwartz/summary
msgid "Reliable job queue"
msgstr ""

#. leap/perl-TheSchwartz/description
msgid ""
"TheSchwartz is a reliable job queue system. Your application can put jobs "
"into the system, and your worker processes can pull jobs from the queue "
"atomically to perform. Failed jobs can be left in the queue to retry later.\n"
"\n"
"_Abilities_ specify what jobs a worker process can perform. Abilities are "
"the names of 'TheSchwartz::Worker' sub-classes, as in the synopsis: the "
"'MyWorker' class name is used to specify that the worker script can perform "
"the job. When using the 'TheSchwartz' client's 'work' functions, the class-"
"ability duality is used to automatically dispatch to the proper class to do "
"the actual work.\n"
"\n"
"TheSchwartz clients will also prefer to do jobs for unused abilities before "
"reusing a particular ability, to avoid exhausting the supply of one kind of "
"job while jobs of other types stack up.\n"
"\n"
"Some jobs with high setup times can be performed more efficiently if a group "
"of related jobs are performed together. TheSchwartz offers a facility to "
"_coalesce_ jobs into groups, which a properly constructed worker can find "
"and perform at once. For example, if your worker were delivering email, you "
"might store the domain name from the recipient's address as the coalescing "
"value. The worker that grabs that job could then batch deliver all the mail "
"for that domain once it connects to that domain's mail server."
msgstr ""

#. leap/perl-Throwable/summary
msgid "Role for classes that can be thrown"
msgstr ""

#. leap/perl-Throwable/description
msgid ""
"Throwable is a role for classes that are meant to be thrown as exceptions to "
"standard program flow. It is very simple and does only two things: saves any "
"previous value for '$@' and calls 'die $self'.\n"
"\n"
"Throwable is implemented with Moo, so you can stick to Moo or use Moose, as "
"you prefer."
msgstr ""

#. leap/perl-Tie-Cache/summary
msgid "LRU Cache in Memory"
msgstr ""

#. leap/perl-Tie-Cache/description
msgid ""
"This module implements a least recently used (LRU) cache in memory through a "
"tie interface. Any time data is stored in the tied hash, that key/value pair "
"has an entry time associated with it, and as the cache fills up, those "
"members of the cache that are the oldest are removed to make room for new "
"entries.\n"
"\n"
"So, the cache only \"remembers\" the last written entries, up to the size of "
"the cache. This can be especially useful if you access great amounts of "
"data, but only access a minority of the data a majority of the time.\n"
"\n"
"The implementation is a hash, for quick lookups, overlaying a doubly linked "
"list for quick insertion and deletion. On a WinNT PII 300, writes to the "
"hash were done at a rate 3100 per second, and reads from the hash at 6300 "
"per second. Work has been done to optimize refreshing cache entries that are "
"frequently read from, code like $cache{entry}, which moves the entry to the "
"end of the linked list internally."
msgstr ""

#. leap/perl-Tie-Cycle/summary
msgid "Cycle through a list of values via a scalar"
msgstr ""

#. leap/perl-Tie-Cycle/description
msgid ""
"You use 'Tie::Cycle' to go through a list over and over again. Once you get "
"to the end of the list, you go back to the beginning. You don't have to "
"worry about any of this since the magic of tie does that for you.\n"
"\n"
"The tie takes an array reference as its third argument. The tie should "
"succeed unless the argument is not an array reference. Previous versions "
"required you to use an array that had more than one element (what's the "
"pointing of looping otherwise?), but I've removed that restriction since the "
"number of elements you want to use may change depending on the situation.\n"
"\n"
"During the tie, this module makes a shallow copy of the array reference. If "
"the array reference contains references, and those references are changed "
"after the tie, the elements of the cycle will change as well. See the "
"included _test.pl_ script for an example of this effect."
msgstr ""

#. leap/perl-Tie-Hash-DBD/summary
msgid "Tie a plain hash to a database table"
msgstr ""

#. leap/perl-Tie-Hash-DBD/description
msgid ""
"This module has been created to act as a drop-in replacement for modules "
"that tie straight perl hashes to disk, like 'DB_File'. When the running "
"system does not have enough memory to hold large hashes, and disk-tieing "
"won't work because there is not enough space, it works quite well to tie the "
"hash to a database, which preferable runs on a different server.\n"
"\n"
"This module ties a hash to a database table using *only* a 'key' and a "
"'value' field. If no tables specification is passed, this will create a "
"temporary table with 'h_key' for the key field and a 'h_value' for the value "
"field.\n"
"\n"
"I think it would make sense to merge the functionality that this module "
"provides into 'Tie::DBI'."
msgstr ""

#. leap/perl-Tie-Hash-Method/summary
msgid "Tied hash with specific methods overriden by callbacks"
msgstr ""

#. leap/perl-Tie-Hash-Method/description
msgid ""
"Tie::Hash::Method provides a way to create a tied hash with specific "
"overriden behaviour without having to create a new class to do it. A tied "
"hash with no methods overriden is functionally equivalent to a normal hash.\n"
"\n"
"Each method in a standard tie can be overriden by providing a callback to "
"the tie call. So for instance if you wanted a tied hash that changed 'foo' "
"into 'bar' on store you could say:\n"
"\n"
"    tie my %hash, 'Tie::Hash::Method',         STORE => sub "
"{             (my $v=pop)=~s/foo/bar/g if defined $_[2];             return "
"$_[0]->base_hash->{$_[1]}=$v;         };\n"
"\n"
"The callback is called with exactly the same arguments as the tie itself, in "
"particular the tied object is always passed as the first argument.\n"
"\n"
"The tied object is itself an array, which contains a second hash in the HASH "
"slot (index 0) which is used to perform the default operations.\n"
"\n"
"The callbacks available are in a hash keyed by name in the METHOD slot of "
"the array (index 1).\n"
"\n"
"If your code needs to store extra data in the object it should be stored in "
"the PRIVATE slot of the object (index 2). No future release of this module "
"will ever use or alter anything in that slot.\n"
"\n"
"The arguments passed to the tie constructor will be seperated by the case of "
"their keys. The ones with all capitals will be stored in the METHOD hash, "
"and the rest will be stored in the PRIVATE hash."
msgstr ""

#. leap/perl-Tie-IxHash/summary
msgid "ordered associative arrays for Perl"
msgstr ""

#. leap/perl-Tie-IxHash/description
msgid ""
"This Perl module implements Perl hashes that preserve the order in which the "
"hash elements were added. The order is not affected when values "
"corresponding to existing keys in the IxHash are changed. The elements can "
"also be set to any arbitrary supplied order. The familiar perl array "
"operations can also be performed on the IxHash."
msgstr ""

#. leap/perl-Tie-RefHash-Weak/summary
msgid "A Tie::RefHash subclass with weakened references in the keys."
msgstr ""

#. leap/perl-Tie-RefHash-Weak/description
msgid ""
"The the Tie::RefHash manpage module can be used to access hashes by "
"reference. This is useful when you index by object, for example.\n"
"\n"
"The problem with the Tie::RefHash manpage, and cross indexing, is that "
"sometimes the index should not contain strong references to the objecs. the "
"Tie::RefHash manpage's internal structures contain strong references to the "
"key, and provide no convenient means to make those references weak.\n"
"\n"
"This subclass of the Tie::RefHash manpage has weak keys, instead of strong "
"ones. The values are left unaltered, and you'll have to make sure there are "
"no strong references there yourself."
msgstr ""

#. leap/perl-Tie-Simple/summary
msgid "Variable ties made easier: much, much, much easier.."
msgstr ""

#. leap/perl-Tie-Simple/description
msgid ""
"This module adds the ability to quickly create new types of tie objects "
"without creating a complete class. It does so in such a way as to try and "
"make the programmers life easier when it comes to single-use ties that I "
"find myself wanting to use from time-to-time.\n"
"\n"
"The 'Tie::Simple' package is actually a front-end to other classes which "
"really do all the work once tied, but this package does the dwimming to "
"automatically figure out what you're trying to do.\n"
"\n"
"I've tried to make this as intuitive as possible and dependent on other bits "
"of Perl where I can to minimize the need for documentation and to make this "
"extra, extra spiffy."
msgstr ""

#. leap/perl-Tie-ToObject/summary
msgid "Tie to an existing object."
msgstr ""

#. leap/perl-Tie-ToObject/description
msgid ""
"While the perldoc/tie manpage allows tying to an arbitrary object, the class "
"in question must support this in it's implementation of 'TIEHASH', "
"'TIEARRAY' or whatever.\n"
"\n"
"This class provides a very tie constructor that simply returns the object it "
"was given as it's first argument.\n"
"\n"
"This way side effects of calling '$object->TIEHASH' are avoided.\n"
"\n"
"This is used in the Data::Visitor manpage in order to tie a variable to an "
"already existing object. This is also useful for cloning, when you want to "
"clone the internal state object instead of going through the tie interface "
"for that variable."
msgstr ""

#. leap/perl-Time-Clock/summary
msgid "Twenty-four hour clock object with nanosecond precision."
msgstr ""

#. leap/perl-Time-Clock/description
msgid ""
"A the Time::Clock manpage object is a twenty-four hour clock with nanosecond "
"precision and wrap-around. It is a clock only; it has absolutely no concept "
"of dates. Vagaries of date/time such as leap seconds and daylight savings "
"time are unsupported.\n"
"\n"
"When a the Time::Clock manpage object hits 23:59:59.999999999 and at least "
"one more nanosecond is added, it will wrap around to 00:00:00.000000000. "
"This works in reverse when time is subtracted.\n"
"\n"
"the Time::Clock manpage objects automatically stringify to a user-definable "
"format."
msgstr ""

#. leap/perl-Time-Duration/summary
msgid "Rounded or exact English expression of durations"
msgstr ""

#. leap/perl-Time-Duration/description
msgid ""
"This module provides functions for expressing durations in rounded or exact "
"terms.\n"
"\n"
"In the first example in the Synopsis, using duration($interval_seconds):\n"
"\n"
"If the 'time() - $start_time' is 3 seconds, this prints \"Runtime: *3 "
"seconds*.\". If it's 0 seconds, it's \"Runtime: *0 seconds*.\". If it's 1 "
"second, it's \"Runtime: *1 second*.\". If it's 125 seconds, you get "
"\"Runtime:\n"
"*2 minutes and 5 seconds*.\". If it's 3820 seconds (which is exactly 1h, 3m, "
"40s), you get it rounded to fit within two expressed units: \"Runtime: *1 "
"hour and 4 minutes*.\". Using duration_exact instead would return "
"\"Runtime:\n"
"*1 hour, 3 minutes, and 40 seconds*\".\n"
"\n"
"In the second example in the Synopsis, using ago($interval_seconds):\n"
"\n"
"If the $age is 3 seconds, this prints \"_file_ was modified *3 seconds ago*"
"\". If it's 0 seconds, it's \"_file_ was modified *just now*\", as a special "
"case. If it's 1 second, it's \"from *1 second ago*\". If it's 125 seconds, "
"you get \"_file_ was modified *2 minutes and 5 seconds ago*\". If it's 3820 "
"seconds (which is exactly 1h, 3m, 40s), you get it rounded to fit within two "
"expressed units: \"_file_ was modified *1 hour and 4 minutes ago*\". Using "
"ago_exact instead would return \"_file_ was modified *1 hour, 3 minutes, and "
"40 seconds ago*\". And if the file's modtime is, surprisingly, three seconds "
"into the future, $age is -3, and you'll get the equally and appropriately "
"surprising \"_file_ was modified *3 seconds from now*.\""
msgstr ""

#. leap/perl-Time-Duration-Parse/summary
msgid "Parse string that represents time duration"
msgstr ""

#. leap/perl-Time-Duration-Parse/description
msgid ""
"Time::Duration::Parse is a module to parse human readable duration strings "
"like _2 minutes and 3 seconds_ to seconds.\n"
"\n"
"It does the opposite of Time::Duration/duration_exact function in Time::"
"Duration and is roundtrip safe. So, the following is always true.\n"
"\n"
"  use Time::Duration::Parse;   use Time::Duration;\n"
"\n"
"  my $seconds = int rand 100000;   "
"is( parse_duration(duration_exact($seconds)), $seconds );"
msgstr ""

#. leap/perl-Time-Local/summary
msgid "Efficiently compute time from local and GMT time"
msgstr ""

#. leap/perl-Time-Local/description
msgid ""
"This module provides functions that are the inverse of built-in perl "
"functions 'localtime()' and 'gmtime()'. They accept a date as a six-element "
"array, and return the corresponding 'time(2)' value in seconds since the "
"system epoch (Midnight, January 1, 1970 GMT on Unix, for example). This "
"value can be positive or negative, though POSIX only requires support for "
"positive values, so dates before the system's epoch may not work on all "
"operating systems.\n"
"\n"
"It is worth drawing particular attention to the expected ranges for the "
"values provided. The value for the day of the month is the actual day (i.e. "
"1..31), while the month is the number of months since January (0..11). This "
"is consistent with the values returned from 'localtime()' and 'gmtime()'."
msgstr ""

#. leap/perl-Time-Mock/summary
#. leap/perl-Time-Mock/description
msgid "shift and scale time"
msgstr ""

#. leap/perl-Time-Moment/summary
msgid "Represents a date and time of day with an offset from UTC"
msgstr ""

#. leap/perl-Time-Moment/description
msgid ""
"'Time::Moment' is an immutable object representing a date and time of day "
"with an offset from UTC in the ISO 8601 calendar system.\n"
"\n"
"Time is measured in nanoseconds since '0001-01-01T00Z'. In 'Time:Moment' "
"leap seconds are ignored. It is assumed that there are exactly "
"'86,400,000,000,000' nanoseconds per day. 'Time::Moment' can represent all "
"epoch integers from '-62,135,596,800' to '253,402,300,799'; this range "
"suffices to measure times to nanosecond precision for any instant that is "
"within '0001-01-01T00:00:00Z' to '9999-12-31T23:59:59Z'."
msgstr ""

#. leap/perl-Time-Out/summary
msgid "Easily timeout long running operations"
msgstr ""

#. leap/perl-Time-Out/description
msgid ""
"'Time::Out' provides an easy interface to _alarm(2)_ based timeouts. Nested "
"timeouts are supported."
msgstr ""

#. leap/perl-Time-Period/summary
#, fuzzy
msgid "A Perl module to deal with time periods."
msgstr "Un module perl qui permet de deviner le type de fichiers"

#. leap/perl-Time-Period/description
msgid ""
"The *inPeriod* function determines if a given time falls within a given "
"period. *inPeriod* returns *1* if the time does fall within the given "
"period, *0* if not, and *-1* if *inPeriod* detects a malformed time or "
"period."
msgstr ""

#. leap/perl-Time-Tiny/summary
msgid "Time Object, with As Little Code As Possible"
msgstr ""

#. leap/perl-Time-Tiny/description
msgid ""
"*Time::Tiny* is a member of the DateTime::Tiny suite of time modules.\n"
"\n"
"It implements an extremely lightweight object that represents a time, "
"without any time data."
msgstr ""

#. leap/perl-Time-modules/summary
#, fuzzy
msgid "Various Perl time modules"
msgstr "Modules Palm pilote perl"

#. leap/perl-Time-modules/description
msgid "Perl modules providing various time functions."
msgstr ""

#. leap/perl-TimeDate/summary
#, fuzzy
msgid "TimeDate Perl module"
msgstr "Net::SSLeay Perl Module"

#. leap/perl-TimeDate/description
msgid ""
"Date::Parse provides two routines for parsing date strings into time "
"values.\n"
"\n"
"str2time(DATE [, ZONE])\n"
"\n"
"   str2time parses DATE and returns a unix time value, or undef upon "
"failure.     ZONE, if given, specifies the timezone to assume when parsing "
"if the date     string does not specify a timezome.\n"
"\n"
"strptime(DATE [, ZONE])\n"
"\n"
"   strptime takes the same arguments as str2time but returns an array of "
"values     ($ss,$mm,$hh,$day,$month,$year,$zone). Elements are only defined "
"if they     could be extracted from the date string. The $zone element is "
"the timezone     offset in seconds from GMT. An empty array is returned upon "
"failure."
msgstr ""

#. leap/perl-Tk/summary
#. leap/perl-Tk/perl-Tk-devel/summary
#, fuzzy
msgid "Perl Tk"
msgstr "Perl Tk"

#. leap/perl-Tk/description
#. leap/perl-Tk/perl-Tk-devel/description
#, fuzzy
msgid ""
"Perl Tk is an enhancement for Perl. It combines the well structured "
"graphical library Tk with the powerful scripting language Perl."
msgstr ""
"Perl Tk est une extension pour Perl. Perl Tk combine agréablement les "
"avantages de Tk à la puissance du langage de scripts Perl."

#. leap/perl-Tk-Clock/summary
msgid "Clock widget with analog and digital display"
msgstr ""

#. leap/perl-Tk-Clock/description
msgid ""
"This module implements a Canvas-based clock widget for perl-Tk with lots of "
"options to change the appearance.\n"
"\n"
"Both analog and digital clocks are implemented."
msgstr ""

#. leap/perl-Tree-DAG_Node/summary
msgid "An N-ary tree"
msgstr ""

#. leap/perl-Tree-DAG_Node/description
msgid ""
"This class encapsulates/makes/manipulates objects that represent nodes in a "
"tree structure. The tree structure is not an object itself, but is emergent "
"from the linkages you create between nodes. This class provides the methods "
"for making linkages that can be used to build up a tree, while preventing "
"you from ever making any kinds of linkages which are not allowed in a tree "
"(such as having a node be its own mother or ancestor, or having a node have "
"two mothers)."
msgstr ""

#. leap/perl-Try-Tiny/summary
msgid "Minimal try/catch with proper preservation of $@"
msgstr ""

#. leap/perl-Try-Tiny/description
msgid ""
"This module provides bare bones 'try'/'catch'/'finally' statements that are "
"designed to minimize common mistakes with eval blocks, and NOTHING else.\n"
"\n"
"This is unlike TryCatch which provides a nice syntax and avoids adding "
"another call stack layer, and supports calling 'return' from the 'try' block "
"to return from the parent subroutine. These extra features come at a cost of "
"a few dependencies, namely Devel::Declare and Scope::Upper which are "
"occasionally problematic, and the additional catch filtering uses Moose type "
"constraints which may not be desirable either.\n"
"\n"
"The main focus of this module is to provide simple and reliable error "
"handling for those having a hard time installing TryCatch, but who still "
"want to write correct 'eval' blocks without 5 lines of boilerplate each "
"time.\n"
"\n"
"It's designed to work as correctly as possible in light of the various "
"pathological edge cases (see BACKGROUND) and to be compatible with any style "
"of error values (simple strings, references, objects, overloaded objects, "
"etc).\n"
"\n"
"If the 'try' block dies, it returns the value of the last statement executed "
"in the 'catch' block, if there is one. Otherwise, it returns 'undef' in "
"scalar context or the empty list in list context. The following examples all "
"assign '\"bar\"' to '$x':\n"
"\n"
"  my $x = try { die \"foo\" } catch { \"bar\" };   my $x = try { die \"foo"
"\" } || \"bar\";   my $x = (try { die \"foo\" }) // \"bar\";\n"
"\n"
"  my $x = eval { die \"foo\" } || \"bar\";\n"
"\n"
"You can add 'finally' blocks, yielding the following:\n"
"\n"
"  my $x;   try { die 'foo' } finally { $x = 'bar' };   try { die 'foo' } "
"catch { warn \"Got a die: $_\" } finally { $x = 'bar' };\n"
"\n"
"'finally' blocks are always executed making them suitable for cleanup code "
"which cannot be handled using local. You can add as many 'finally' blocks to "
"a given 'try' block as you like.\n"
"\n"
"Note that adding a 'finally' block without a preceding 'catch' block "
"suppresses any errors. This behaviour is consistent with using a standalone "
"'eval', but it is not consistent with 'try'/'finally' patterns found in "
"other programming languages, such as Java, Python, Javascript or C#. If you "
"learnt the 'try'/'finally' pattern from one of these languages, watch out "
"for this."
msgstr ""

#. leap/perl-TryCatch/summary
msgid "first class try catch semantics for Perl, without source filters."
msgstr ""

#. leap/perl-TryCatch/description
msgid ""
"This module aims to provide a nicer syntax and method to catch errors in "
"Perl, similar to what is found in other languages (such as Java, Python or C+"
"+). The standard method of using 'eval {}; if ($@) {}' is often prone to "
"subtle bugs, primarily that its far too easy to stomp on the error in error "
"handlers. And also eval/if isn't the nicest idiom."
msgstr ""

#. leap/perl-Type-Tiny/summary
msgid "Tiny, yet Moo(Se)-Compatible Type Constraint"
msgstr ""

#. leap/perl-Type-Tiny/description
msgid ""
"Type::Tiny is a tiny class for creating Moose-like type constraint objects "
"which are compatible with Moo, Moose and Mouse.\n"
"\n"
"Maybe now we won't need to have separate MooseX, MouseX and MooX versions of "
"everything? We can but hope...\n"
"\n"
"This documents the internals of Type::Tiny. Type::Tiny::Manual is a better "
"starting place if you're new."
msgstr ""

#. leap/perl-Types-Serialiser/summary
msgid "Simple data types for common serialisation formats"
msgstr ""

#. leap/perl-Types-Serialiser/description
msgid ""
"This module provides some extra datatypes that are used by common "
"serialisation formats such as JSON or CBOR. The idea is to have a repository "
"of simple/small constants and containers that can be shared by different "
"implementations so they become interoperable between each other."
msgstr ""

#. leap/perl-UNIVERSAL-can/summary
msgid "work around buggy code calling UNIVERSAL::can() as a function"
msgstr ""

#. leap/perl-UNIVERSAL-can/description
msgid ""
"The UNIVERSAL class provides a few default methods so that all objects can "
"use them. Object orientation allows programmers to override these methods in "
"subclasses to provide more specific and appropriate behavior.\n"
"\n"
"Some authors call methods in the UNIVERSAL class on potential invocants as "
"functions, bypassing any possible overriding. This is wrong and you should "
"not do it. Unfortunately, not everyone heeds this warning and their bad code "
"can break your good code.\n"
"\n"
"This module replaces 'UNIVERSAL::can()' with a method that checks to see if "
"the first argument is a valid invocant has its own 'can()' method. If so, it "
"gives a warning and calls the overridden method, working around buggy code. "
"Otherwise, everything works as you might expect.\n"
"\n"
"Some people argue that you must call 'UNIVERSAL::can()' as a function "
"because you don't know if your proposed invocant is a valid invocant. That's "
"silly. Use 'blessed()' from the Scalar::Util manpage if you want to check "
"that the potential invocant is an object or call the method anyway in an "
"'eval' block and check for failure (though check the exception _returned_, "
"as a poorly-written 'can()' method could break Liskov and throw an exception "
"other than \"You can't call a method on this type of invocant\").\n"
"\n"
"Just don't break working code."
msgstr ""

#. leap/perl-UNIVERSAL-isa/summary
msgid "Attempt to recover from people calling UNIVERSAL::isa as a function"
msgstr ""

#. leap/perl-UNIVERSAL-isa/description
msgid ""
"Whenever you use UNIVERSAL/isa as a function, a kitten using Test::"
"MockObject dies. Normally, the kittens would be helpless, but if they use "
"UNIVERSAL::isa (the module whose docs you are reading), the kittens can live "
"long and prosper.\n"
"\n"
"This module replaces 'UNIVERSAL::isa' with a version that makes sure that, "
"when called as a function on objects which override 'isa', 'isa' will call "
"the appropriate method on those objects\n"
"\n"
"In all other cases, the real 'UNIVERSAL::isa' gets called directly. \n"
"*NOTE:* You should use this module only for debugging purposes. It does not "
"belong as a dependency in running code."
msgstr ""

#. leap/perl-UNIVERSAL-moniker/summary
msgid "UNIVERAL::moniker"
msgstr ""

#. leap/perl-UNIVERSAL-moniker/description
msgid ""
"Class names in Perl often don't sound great when spoken, or look good when "
"written in prose. For this reason, we tend to say things like \"customer\" "
"or \"basket\" when we are referring to 'My::Site::User::Customer' or 'My::"
"Site::Shop::Basket'. We thought it would be nice if our classes knew what we "
"would prefer to call them.\n"
"\n"
"This module will add a 'moniker' (and 'plural_moniker') method to "
"'UNIVERSAL', and so to every class or module."
msgstr ""

#. leap/perl-UNIVERSAL-require/summary
#, fuzzy
msgid "Require() modules from a variable [deprecated]"
msgstr "Modules du noyau (pilotes matériel)"

#. leap/perl-UNIVERSAL-require/description
msgid ""
"Before using this module, you should look at the alternatives, some of which "
"are listed in SEE ALSO below.\n"
"\n"
"This module provides a safe mechanism for loading a module at runtime, when "
"you have the name of the module in a variable.\n"
"\n"
"If you've ever had to do this...\n"
"\n"
"    eval \"require $module\";\n"
"\n"
"to get around the bareword caveats on require(), this module is for you. It "
"creates a universal require() class method that will work with every Perl "
"module and its secure. So instead of doing some arcane eval() work, you can "
"do this:\n"
"\n"
"    $module->require;\n"
"\n"
"It doesn't save you much typing, but it'll make a lot more sense to someone "
"who's not a ninth level Perl acolyte."
msgstr ""

#. leap/perl-URI/summary
msgid "Uniform Resource Identifiers (absolute and relative)"
msgstr ""

#. leap/perl-URI/description
msgid ""
"This module implements the 'URI' class. Objects of this class represent "
"\"Uniform Resource Identifier references\" as specified in RFC 2396 (and "
"updated by RFC 2732).\n"
"\n"
"A Uniform Resource Identifier is a compact string of characters that "
"identifies an abstract or physical resource. A Uniform Resource Identifier "
"can be further classified as either a Uniform Resource Locator (URL) or a "
"Uniform Resource Name (URN). The distinction between URL and URN does not "
"matter to the 'URI' class interface. A \"URI-reference\" is a URI that may "
"have additional information attached in the form of a fragment identifier.\n"
"\n"
"An absolute URI reference consists of three parts: a _scheme_, a _scheme-"
"specific part_ and a _fragment_ identifier. A subset of URI references share "
"a common syntax for hierarchical namespaces. For these, the scheme-specific "
"part is further broken down into _authority_, _path_ and _query_ components. "
"These URIs can also take the form of relative URI references, where the "
"scheme (and usually also the authority) component is missing, but implied by "
"the context of the URI reference. The three forms of URI reference syntax "
"are summarized as follows:\n"
"\n"
"  <scheme>:<scheme-specific-part>#<fragment>   <scheme>://<authority><path>?"
"<query>#<fragment>   <path>?<query>#<fragment>\n"
"\n"
"The components into which a URI reference can be divided depend on the "
"_scheme_. The 'URI' class provides methods to get and set the individual "
"components. The methods available for a specific 'URI' object depend on the "
"scheme."
msgstr ""

#. leap/perl-URI-Fetch/summary
msgid "Smart URI fetching/caching"
msgstr ""

#. leap/perl-URI-Fetch/description
msgid ""
"_URI::Fetch_ is a smart client for fetching HTTP pages, notably syndication "
"feeds (RSS, Atom, and others), in an intelligent, bandwidth- and time-saving "
"way. That means: \n"
"* * GZIP support\n"
"\n"
"If you have _Compress::Zlib_ installed, _URI::Fetch_ will automatically try "
"to download a compressed version of the content, saving bandwidth (and "
"time). \n"
"* * _Last-Modified_ and _ETag_ support\n"
"\n"
"If you use a local cache (see the _Cache_ parameter to _fetch_), _URI::"
"Fetch_ will keep track of the _Last-Modified_ and _ETag_ headers from the "
"server, allowing you to only download pages that have been modified since "
"the last time you checked. \n"
"* * Proper understanding of HTTP error codes\n"
"\n"
"Certain HTTP error codes are special, particularly when fetching syndication "
"feeds, and well-written clients should pay special attention to them. _URI::"
"Fetch_ can only do so much for you in this regard, but it gives you the "
"tools to be a well-written client.\n"
"\n"
"The response from _fetch_ gives you the raw HTTP response code, along with "
"special handling of 4 codes:\n"
"\n"
"  * * 200 (OK)\n"
"\n"
"Signals that the content of a page/feed was retrieved successfully.\n"
"\n"
"  * * 301 (Moved Permanently)\n"
"\n"
"Signals that a page/feed has moved permanently, and that your database of "
"feeds should be updated to reflect the new URI.\n"
"\n"
"  * * 304 (Not Modified)\n"
"\n"
"Signals that a page/feed has not changed since it was last fetched.\n"
"\n"
"  * * 410 (Gone)\n"
"\n"
"Signals that a page/feed is gone and will never be coming back, so you "
"should stop trying to fetch it."
msgstr ""

#. leap/perl-URI-Find/summary
msgid "Find URIs in arbitrary text"
msgstr ""

#. leap/perl-URI-Find/description
msgid ""
"This module does one thing: Finds URIs and URLs in plain text. It finds them "
"quickly and it finds them *all* (or what URI.pm considers a URI to be.) It "
"only finds URIs which include a scheme (http:// or the like), for something "
"a bit less strict have a look at URI::Find::Schemeless.\n"
"\n"
"For a command-line interface, urifind is provided."
msgstr ""

#. leap/perl-URI-Nested/summary
#. leap/perl-URI-Nested/description
msgid "Nested URIs"
msgstr ""

#. leap/perl-URI-Template/summary
msgid "Object for handling URI templates (RFC 6570)"
msgstr ""

#. leap/perl-URI-Template/description
msgid ""
"This module provides a wrapper around URI templates as described in RFC "
"6570: http://tools.ietf.org/html/rfc6570."
msgstr ""

#. leap/perl-URI-db/summary
#. leap/perl-URI-db/description
msgid "Database URIs"
msgstr ""

#. leap/perl-Unicode-Collate/summary
#, fuzzy
msgid "Unicode Collation Algorithm"
msgstr "Implémentation du démon d'identification RFC1413"

#. leap/perl-Unicode-Collate/description
msgid ""
"This module is an implementation of Unicode Technical Standard #10 (a.k.a. "
"UTS #10) - Unicode Collation Algorithm (a.k.a. UCA)."
msgstr ""

#. leap/perl-Unicode-LineBreak/summary
msgid "UAX #14 Unicode Line Breaking Algorithm"
msgstr ""

#. leap/perl-Unicode-LineBreak/description
msgid ""
"Unicode::LineBreak performs Line Breaking Algorithm described in Unicode "
"Standard Annex #14 [UAX #14]. East_Asian_Width informative property defined "
"by Annex #11 [UAX #11] will be concerned to determine breaking positions."
msgstr ""

#. leap/perl-Unicode-Map/summary
msgid "maps charsets from and to utf16 unicode"
msgstr ""

#. leap/perl-Unicode-Map/description
msgid ""
"This module converts strings from and to 2-byte Unicode UCS2 format. All "
"mappings happen via 2 byte UTF16 encodings, not via 1 byte UTF8 encoding. To "
"transform these use Unicode::String.\n"
"\n"
"For historical reasons this module coexists with Unicode::Map8. Please use "
"Unicode::Map8 unless you need to care for two byte character sets, e.g. "
"chinese GB2312. Anyway, if you stick to the basic functionality (see "
"documentation) you can use both modules equivalently.\n"
"\n"
"Practically this module will disappear from earth sooner or later as Unicode "
"mapping support needs somehow to get into perl's core. If you like to work "
"on this field please don't hesitate contacting Gisle Aas!\n"
"\n"
"This module can't deal directly with utf8. Use Unicode::String to convert "
"utf8 to utf16 and vice versa.\n"
"\n"
"Character mapping is according to the data of binary mapfiles in Unicode::"
"Map hierarchy. Binary mapfiles can also be created with this module, "
"enabling you to install own specific character sets. Refer to mkmapfile or "
"file REGISTRY in the Unicode::Map hierarchy."
msgstr ""

#. leap/perl-Unicode-Map8/summary
msgid "Mapping table between 8-bit chars and Unicode"
msgstr ""

#. leap/perl-Unicode-Map8/description
msgid ""
"The Unicode::Map8 class implements efficient mapping tables between 8-bit "
"character sets and 16-bit character sets like Unicode. The tables are "
"efficient both in terms of space allocated and translation speed. The 16-bit "
"strings are assumed to use network byte order."
msgstr ""

#. leap/perl-Unicode-Normalize/summary
msgid "Unicode Normalization Forms"
msgstr ""

#. leap/perl-Unicode-Normalize/description
msgid ""
"Parameters:\n"
"\n"
"'$string' is used as a string under character semantics (see "
"_perlunicode_).\n"
"\n"
"'$code_point' should be an unsigned integer representing a Unicode code "
"point.\n"
"\n"
"Note: Between XSUB and pure Perl, there is an incompatibility about the "
"interpretation of '$code_point' as a decimal number. XSUB converts "
"'$code_point' to an unsigned integer, but pure Perl does not. Do not use a "
"floating point nor a negative sign in '$code_point'."
msgstr ""

#. leap/perl-Unicode-String/summary
msgid "String of Unicode characters (UTF-16BE)"
msgstr ""

#. leap/perl-Unicode-String/description
msgid ""
"A 'Unicode::String' object represents a sequence of Unicode characters. "
"Methods are provided to convert between various external formats (encodings) "
"and 'Unicode::String' objects, and methods are provided for common string "
"manipulations.\n"
"\n"
"The functions utf32be(), utf32le(), utf16be(), utf16le(), utf8(), utf7(), "
"latin1(), uhex(), uchr() can be imported from the 'Unicode::String' module "
"and will work as constructors initializing strings of the corresponding "
"encoding.\n"
"\n"
"The 'Unicode::String' objects overload various operators, which means that "
"they in most cases can be treated like plain strings.\n"
"\n"
"Internally a 'Unicode::String' object is represented by a string of 2 byte "
"numbers in network byte order (big-endian). This representation is not "
"visible by the API provided, but it might be useful to know in order to "
"predict the efficiency of the provided methods."
msgstr ""

#. leap/perl-Unicode-Stringprep/summary
msgid "Preparation of Internationalized Strings (S<RFC 3454>)"
msgstr ""

#. leap/perl-Unicode-Stringprep/description
msgid ""
"This module implements the _stringprep_ framework for preparing Unicode text "
"strings in order to increase the likelihood that string input and string "
"comparison work in ways that make sense for typical users throughout the "
"world. The _stringprep_ protocol is useful for protocol identifier values, "
"company and personal names, internationalized domain names, and other text "
"strings.\n"
"\n"
"The _stringprep_ framework does not specify how protocols should prepare "
"text strings. Protocols must create profiles of stringprep in order to fully "
"specify the processing options."
msgstr ""

#. leap/perl-Unix-Syslog/summary
#, fuzzy
msgid "Perl interface to the UNIX syslog(3) calls"
msgstr "Interface Perl vers Syslog"

#. leap/perl-Unix-Syslog/description
msgid ""
"This module provides an interface to the system logger syslogd(8) via Perl's "
"XSUBs. The implementation attempts to resemble the native libc- functions of "
"your system, so that anyone being familiar with syslog.h should be able to "
"use this module right away.\n"
"\n"
"Authors:\n"
"--------     Marcus Harnisch <marcus.harnisch@gmx.net>"
msgstr ""

#. leap/perl-Variable-Magic/summary
msgid "Associate user-defined magic to variables from Perl"
msgstr ""

#. leap/perl-Variable-Magic/description
msgid ""
"Magic is Perl's way of enhancing variables. This mechanism lets the user add "
"extra data to any variable and hook syntactical operations (such as access, "
"assignment or destruction) that can be applied to it. With this module, you "
"can add your own magic to any variable without having to write a single line "
"of XS.\n"
"\n"
"You'll realize that these magic variables look a lot like tied variables. It "
"is not surprising, as tied variables are implemented as a special kind of "
"magic, just like any 'irregular' Perl variable : scalars like '$!', '$(' or "
"'$^W', the '%ENV' and '%SIG' hashes, the '@ISA' array, 'vec()' and "
"'substr()' lvalues, threads::shared variables... They all share the same "
"underlying C API, and this module gives you direct access to it."
msgstr ""

#. leap/perl-Verilog-Perl/summary
#. leap/perl-Verilog-Perl/description
msgid "Verilog language utilities and parsing"
msgstr ""

#. leap/perl-WWW-Form-UrlEncoded/summary
msgid "Parser and builder for application/x-www-form-urlencoded"
msgstr ""

#. leap/perl-WWW-Form-UrlEncoded/description
msgid ""
"WWW::Form::UrlEncoded provides application/x-www-form-urlencoded parser and "
"builder. This module aims to have compatibility with other CPAN modules like "
"HTTP::Body's urlencoded parser.\n"
"\n"
"This module try to use WWW::Form::UrlEncoded::XS by default and fail to it, "
"use WWW::Form::UrlEncoded::PP instead"
msgstr ""

#. leap/perl-WWW-Mechanize/summary
msgid "Handy web browsing in a Perl object"
msgstr ""

#. leap/perl-WWW-Mechanize/description
msgid ""
"Perl module for stateful programmatic web browsing, used for automating "
"interaction with websites."
msgstr ""

#. leap/perl-WWW-PAUSE-CleanUpHomeDir/summary
msgid "the module to clean up old dists from your PAUSE home directory"
msgstr ""

#. leap/perl-WWW-PAUSE-CleanUpHomeDir/description
msgid ""
"The module provides means to clean up your PAUSE home directory from old "
"distributions with ability to undelete files if you so prefer."
msgstr ""

#. leap/perl-WWW-Pastebin-PastebinCom-Create/summary
msgid "Paste On Www.Pastebin.Com Without Api Keys"
msgstr ""

#. leap/perl-WWW-Pastebin-PastebinCom-Create/description
msgid ""
"This module provides the means to paste on the www.pastebin.com manpage "
"pastebin, without the need for http://pastebin.com/api. See the WARNING!!! "
"section above."
msgstr ""

#. leap/perl-WWW-RobotRules/summary
msgid "database of robots.txt-derived permissions"
msgstr ""

#. leap/perl-WWW-RobotRules/description
msgid ""
"This module parses _/robots.txt_ files as specified in \"A Standard for "
"Robot Exclusion\", at <http://www.robotstxt.org/wc/norobots.html> Webmasters "
"can use the _/robots.txt_ file to forbid conforming robots from accessing "
"parts of their web site.\n"
"\n"
"The parsed files are kept in a WWW::RobotRules object, and this object "
"provides methods to check if access to a given URL is prohibited. The same "
"WWW::RobotRules object can be used for one or more parsed _/robots.txt_ "
"files on any number of hosts.\n"
"\n"
"The following methods are provided: \n"
"* $rules = WWW::RobotRules->new($robot_name)\n"
"\n"
"  This is the constructor for WWW::RobotRules objects. The first argument   "
"given to new() is the name of the robot. \n"
"* $rules->parse($robot_txt_url, $content, $fresh_until)\n"
"\n"
"  The parse() method takes as arguments the URL that was used to retrieve   "
"the _/robots.txt_ file, and the contents of the file. \n"
"* $rules->allowed($uri)\n"
"\n"
"  Returns TRUE if this robot is allowed to retrieve this URL. \n"
"* $rules->agent([$name])\n"
"\n"
"  Get/set the agent name. NOTE: Changing the agent name will clear the   "
"robots.txt rules and expire times out of the cache."
msgstr ""

#. leap/perl-WWW-Shorten/summary
msgid "Interface to URL shortening sites"
msgstr ""

#. leap/perl-WWW-Shorten/description
msgid ""
"A Perl interface to various services that shorten URLs. These sites maintain "
"databases of long URLs, each of which has a unique identifier."
msgstr ""

#. leap/perl-Want/summary
msgid "Generalisation of C<Wantarray>"
msgstr ""

#. leap/perl-Want/description
msgid ""
"This module generalises the mechanism of the *wantarray* function, allowing "
"a function to determine in some detail how its return value is going to be "
"immediately used."
msgstr ""

#. leap/perl-WeakRef/summary
msgid "API for weak references to be created in Perl"
msgstr ""

#. leap/perl-WeakRef/description
msgid ""
"A patch to Perl 5.005_55 by the author implements a core API for weak "
"references. This module is a Perl-level interface to that API, allowing weak "
"references to be created in Perl.\n"
"\n"
"A weak reference is just like an ordinary Perl reference except that it "
"isn't included in the reference count of the thing referred to. This means "
"that once all references to a particular piece of data are weak, the piece "
"of data is freed and all the weak references are set to undef. This is "
"particularly useful for implementing circular data structures without memory "
"leaks or caches of objects.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Tuomas J. Lukka      <lukka@iki.fi>"
msgstr ""

#. leap/perl-Web-MREST/summary
#, fuzzy
msgid "Minimalistic REST server"
msgstr "Lecteur multimedia"

#. leap/perl-Web-MREST/description
msgid ""
"MREST stands for \"minimalistic\" or \"mechanical\" REST server. (Mechanical "
"because it relies on Web::Machine.)\n"
"\n"
"Web::MREST provides a fully functional REST server that can be started with "
"a simple command. Without modification, the server provides a set of "
"generalized resources that can be used to demonstrate how the REST server "
"works, or for testing.\n"
"\n"
"Developers can use Web::MREST as a platform for implementing their own REST "
"servers, as described below. App::Dochazka::REST is a \"real-world\" example "
"of such a server.\n"
"\n"
"For an introduction to REST and Web Services, see Web::MREST::"
"WebServicesIntro."
msgstr ""

#. leap/perl-Web-MREST-CLI/summary
msgid "CLI components for Web::MEST-based applications"
msgstr ""

#. leap/perl-Web-MREST-CLI/description
msgid ""
"Top-level module of the the Web::MREST::CLI manpage distribution. Exports "
"some \"generalized\" functions that are used internally and might also be "
"useful for writing CLI clients in general."
msgstr ""

#. leap/perl-Web-Machine/summary
#, fuzzy
msgid "Perl port of Webmachine"
msgstr "Support XML pour castor"

#. leap/perl-Web-Machine/description
msgid ""
"'Web::Machine' provides a RESTful web framework modeled as a state machine. "
"You define one or more resource classes. Each resource represents a single "
"RESTful URI end point, such as a user, an email, etc. The resource class can "
"also be the target for 'POST' requests to create a new user, email, etc.\n"
"\n"
"Each resource is a state machine, and each request for a resource is handled "
"by running the request through that state machine.\n"
"\n"
"'Web::Machine' is built on top of Plack, but it handles the full request and "
"response cycle.\n"
"\n"
"See Web::Machine::Manual for more details on using 'Web::Machine' in "
"general, and how 'Web::Machine' and Plack interact.\n"
"\n"
"This is a port of at https://github.com/basho/webmachine, actually it is "
"much closer to the Ruby version|https://github.com/seancribbs/webmachine-"
"ruby, with a little bit of at https://github.com/tautologistics/nodemachine "
"and even some of at https://github.com/benoitc/pywebmachine thrown in for "
"good measure.\n"
"\n"
"You can learn a bit about Web::Machine's history from the slides for my 2012 "
"YAPC::NA talk|https://speakerdeck.com/stevan_little/rest-from-the-trenches.\n"
"\n"
"To learn more about Webmachine, take a look at the links in the SEE ALSO "
"section."
msgstr ""

#. leap/perl-WebService-MusicBrainz/summary
msgid "Web service API to MusicBrainz database"
msgstr ""

#. leap/perl-WebService-MusicBrainz/description
msgid "API to search the musicbrainz.org database"
msgstr ""

#. leap/perl-Wx/summary
msgid "Interface to the Wxwidgets Cross-Platform Gui Toolkit"
msgstr ""

#. leap/perl-Wx/description
msgid ""
"The Wx module is a wrapper for the wxWidgets (formerly known as wxWindows) "
"GUI toolkit.\n"
"\n"
"This module comes with extensive documentation in HTML format; you can "
"download it from http://wxperl.sourceforge.net/"
msgstr ""

#. leap/perl-X11-Protocol/summary
msgid "Perl module for the X Window System Protocol, version 11"
msgstr ""

#. leap/perl-X11-Protocol/description
msgid ""
"X11::Protocol is a client-side interface to the X11 Protocol (see X(1) for "
"information about X11), allowing perl programs to display windows and "
"graphics on X11 servers.\n"
"\n"
"A full description of the protocol is beyond the scope of this "
"documentation; for complete information, see the _X Window System Protocol, "
"X Version 11_, available as Postscript or *roff source from 'ftp://ftp.x."
"org', or _Volume 0: X Protocol Reference Manual_ of O'Reilly & Associates's "
"series of books about X (ISBN 1-56592-083-X, 'http://www.oreilly.com'), "
"which contains most of the same information."
msgstr ""

#. leap/perl-X11-Protocol-Other/summary
msgid "Miscellaneous X11::Protocol helpers"
msgstr ""

#. leap/perl-X11-Protocol-Other/description
msgid "This is some helper functions for 'X11::Protocol'."
msgstr ""

#. leap/perl-X500-DN/summary
#, fuzzy
msgid "Provides an interface for RFC 2253 style DN strings"
msgstr "Procure une pseudo interface tty"

#. leap/perl-X500-DN/description
msgid ""
"X500::DN Provides a pure perl parser and formatter for RFC 2253 style DN "
"strings.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Robert Joop <yaph-020416@timesink.de>"
msgstr ""

#. leap/perl-XML-Atom/summary
#, fuzzy
msgid "Atom feed and API implementation"
msgstr "Implantation Java de getopt"

#. leap/perl-XML-Atom/description
msgid ""
"Atom is a syndication, API, and archiving format for weblogs and other data. "
"_XML::Atom_ implements the feed format as well as a client for the API."
msgstr ""

#. leap/perl-XML-Atom-SimpleFeed/summary
msgid "No-fuss generation of Atom syndication feeds"
msgstr ""

#. leap/perl-XML-Atom-SimpleFeed/description
msgid ""
"This is a minimal API for generating Atom syndication feeds quickly and "
"easily. It supports all aspects of the Atom format itself but has no "
"mechanism for the inclusion of extension elements.\n"
"\n"
"You can supply strings for most things, and the module will provide useful "
"defaults. When you want more control, you can provide data structures, as "
"documented, to specify more particulars."
msgstr ""

#. leap/perl-XML-Bare/summary
msgid "Minimal XML parser implemented via a C state engine"
msgstr ""

#. leap/perl-XML-Bare/description
msgid ""
"This module is a 'Bare' XML parser. It is implemented in C. The parser "
"itself is a simple state engine that is less than 500 lines of C. The parser "
"builds a C struct tree from input text. That C struct tree is converted to a "
"Perl hash by a Perl function that makes basic calls back to the C to go "
"through the nodes sequentially.\n"
"\n"
"The parser itself will only cease parsing if it encounters tags that are not "
"closed properly. All other inputs will parse, even invalid inputs. To "
"allowing checking for validity, a schema checker is included in the module "
"as well.\n"
"\n"
"The schema format is custom and is meant to be as simple as possible. It is "
"based loosely around the way multiplicity is handled in Perl regular "
"expressions."
msgstr ""

#. leap/perl-XML-CommonNS/summary
#. leap/perl-XML-CommonNS/description
msgid "A list of commonly used namespaces"
msgstr ""

#. leap/perl-XML-DOM/summary
msgid "Perl Module for Building Dom Level 1 Compliant Document Structures"
msgstr ""

#. leap/perl-XML-DOM/description
msgid ""
"This module extends the XML::Parser module by Clark Cooper. The XML::Parser "
"module is built on top of XML::Parser::Expat, which is a lower level "
"interface to James Clark's expat library.\n"
"\n"
"XML::DOM::Parser is derived from XML::Parser. It parses XML strings or files "
"and builds a data structure that conforms to the API of the Document Object "
"Model as described at http://www.w3.org/TR/REC-DOM-Level-1. See the XML::"
"Parser manpage for other available features of the XML::DOM::Parser class. "
"Note that the 'Style' property should not be used (it is set internally.)\n"
"\n"
"The XML::Parser _NoExpand_ option is more or less supported, in that it will "
"generate EntityReference objects whenever an entity reference is encountered "
"in character data. I'm not sure how useful this is. Any comments are "
"welcome.\n"
"\n"
"As described in the synopsis, when you create an XML::DOM::Parser object, "
"the parse and parsefile methods create an _XML::DOM::Document_ object from "
"the specified input. This Document object can then be examined, modified and "
"written back out to a file or converted to a string.\n"
"\n"
"When using XML::DOM with XML::Parser version 2.19 and up, setting the XML::"
"DOM::Parser option _KeepCDATA_ to 1 will store CDATASections in CDATASection "
"nodes, instead of converting them to Text nodes. Subsequent CDATASection "
"nodes will be merged into one. Let me know if this is a problem.\n"
"\n"
"When using XML::Parser 2.27 and above, you can suppress expansion of "
"parameter entity references (e.g. %pent;) in the DTD, by setting "
"_ParseParamEnt_ to 1 and _ExpandParamEnt_ to 0. See /_Hidden_Nodes_ for "
"details.\n"
"\n"
"A Document has a tree structure consisting of _Node_ objects. A Node may "
"contain other nodes, depending on its type. A Document may have Element, "
"Text, Comment, and CDATASection nodes. Element nodes may have Attr, Element, "
"Text, Comment, and CDATASection nodes. The other nodes may not have any "
"child nodes.\n"
"\n"
"This module adds several node types that are not part of the DOM spec (yet.) "
"These are: ElementDecl (for <!ELEMENT ...> declarations), AttlistDecl (for <!"
"ATTLIST ...> declarations), XMLDecl (for <?xml ...?> declarations) and "
"AttDef (for attribute definitions in an AttlistDecl.)"
msgstr ""

#. leap/perl-XML-DOM-XPath/summary
msgid ""
"Perl extension to add XPath support to XML::DOM, using XML::XPath engine"
msgstr ""

#. leap/perl-XML-DOM-XPath/description
msgid ""
"XML::DOM::XPath allows you to use XML::XPath methods to query a DOM. This is "
"often much easier than relying only on getElementsByTagName."
msgstr ""

#. leap/perl-XML-Dumper/summary
msgid "Perl module for dumping Perl objects from/to XML"
msgstr ""

#. leap/perl-XML-Dumper/description
msgid ""
"XML::Dumper dumps Perl data to XML format. XML::Dumper can also read XML "
"data that was previously dumped by the module and convert it back to Perl. "
"You can use the module read the XML from a file and write the XML to a file. "
"Perl objects are blessed back to their original packaging; if the modules "
"are installed on the system where the perl objects are reconstituted from "
"xml, they will behave as expected. Intuitively, if the perl objects are "
"converted and reconstituted in the same environment, all should be well. And "
"it is.\n"
"\n"
"  Authors: \t\tMike Wong <mike_w3@pacbell.net> \t\tJonathan Eisenzopf "
"<eisen@pobox.com>"
msgstr ""

#. leap/perl-XML-Entities/summary
msgid "Perl Module to decode Strings with XML Entities"
msgstr ""

#. leap/perl-XML-Entities/description
msgid "This module deals with decoding of strings with XML character entities."
msgstr ""

#. leap/perl-XML-Filter-BufferText/summary
msgid "Filter to put all characters() in one event"
msgstr ""

#. leap/perl-XML-Filter-BufferText/description
msgid ""
"This is a very simple filter. One common cause of grief (and programmer "
"error) is that XML parsers aren't required to provide character events in "
"one chunk. They can, but are not forced to, and most don't. This filter does "
"the trivial but oft-repeated task of putting all characters into a single "
"event.\n"
"\n"
"Note that this won't help you cases such as:\n"
"\n"
"  <foo> blah <!-- comment --> phubar </foo>\n"
"\n"
"In the above case, given the interleaving comment, there will be two "
"'character()' events. This may be worked around in the future if there is "
"demand for it.\n"
"\n"
"An interesting way to use this filter, instead of telling users to use it, "
"is to return it from your handler's constructor, already configured and all. "
"That'll make the buffering totally transparent to them ('XML::SAX::Writer' "
"does that)."
msgstr ""

#. leap/perl-XML-Generator-PerlData/summary
#, fuzzy
msgid ""
"Perl extension for generating SAX2 events from nested Perl data structures"
msgstr "Interface Perl pour objets URI"

#. leap/perl-XML-Generator-PerlData/description
msgid ""
"XML::Generator::PerlData provides a simple way to generate SAX2 events from "
"nested Perl data structures, while providing finer-grained control over the "
"resulting document streams.\n"
"\n"
"Processing comes in two flavors: *Simple Style* and *Stream Style*:\n"
"\n"
"In a nutshell, 'simple style' is best used for those cases where you have a "
"a single Perl data structure that you want to convert to XML as quickly and "
"painlessly as possible. 'Stream style' is more useful for cases where you "
"are receiving chunks of data (like from a DBI handle) and you want to "
"process those chunks as they appear. See *PROCESSING METHODS* for more info "
"about how each style works."
msgstr ""

#. leap/perl-XML-Handler-YAWriter/summary
#, fuzzy
msgid "Yet another Perl SAX XML Writer"
msgstr "Yet Another Pager Software"

#. leap/perl-XML-Handler-YAWriter/description
msgid ""
"YAWriter implements Yet Another XML::Handler::Writer. The reasons for this "
"one are that I needed a flexible escaping technique, and want some kind of "
"pretty printing. If an instance of YAWriter is created without any options, "
"the default behavior is to produce an array of strings containing the XML "
"in :\n"
"\n"
"  @{$ya->{Strings}}"
msgstr ""

#. leap/perl-XML-LibXML/summary
msgid "Perl Binding for libxml2"
msgstr ""

#. leap/perl-XML-LibXML/description
msgid ""
"This module is an interface to libxml2, providing XML and HTML parsers with "
"DOM, SAX and XMLReader interfaces, a large subset of DOM Layer 3 interface "
"and a XML::XPath-like interface to XPath API of libxml2. The module is split "
"into several packages which are not described in this section; unless stated "
"otherwise, you only need to 'use XML::LibXML;' in your programs."
msgstr ""

#. leap/perl-XML-LibXML-PrettyPrint/summary
msgid "Add pleasant whitespace to a DOM tree"
msgstr ""

#. leap/perl-XML-LibXML-PrettyPrint/description
msgid ""
"Long XML files can be daunting for humans to read. Of course, XML is really "
"designed for computers to read - not people - but there are times when mere "
"mortals do need to read and edit XML by hand. For example, if your "
"application stores its configuration in XML, or you need to dump some XML to "
"STDOUT for debugging purposes.\n"
"\n"
"Syntax highlighting helps, but to really make sense of some XML, proper "
"indentation can be vital. Hence 'XML::LibXML::PrettyPrint' - it can be "
"applied to an the XML::LibXML manpage DOM tree to reformat it into a more "
"readable result.\n"
"\n"
"Pretty-printing XML is not as CPU-efficient as dumping it out sloppily, so "
"unless you're pretty sure that a human is going to need to make sense of "
"your XML, you should probably not use this module."
msgstr ""

#. leap/perl-XML-LibXML-Simple/summary
msgid "XML::LibXML clone of XML::Simple::XMLin()"
msgstr ""

#. leap/perl-XML-LibXML-Simple/description
msgid ""
"This module is a blunt rewrite of XML::Simple (by Grant McLean) to use the "
"XML::LibXML parser for XML structures, where the original uses plain Perl or "
"SAX parsers. \n"
"*Be warned:* this module thinks to be smart. You may very well shoot "
"yourself in the foot with this DWIMmery. Read the whole manual page at least "
"once before you start using it. If your XML is described in a schema or "
"WSDL, then use XML::Compile for maintainable code."
msgstr ""

#. leap/perl-XML-LibXSLT/summary
#, fuzzy
msgid "Interface to the GNOME libxslt library"
msgstr "Interface Perl vers la bibliothèque UULib"

#. leap/perl-XML-LibXSLT/description
msgid ""
"This module is an interface to the GNOME project's libxslt. This is an "
"extremely good XSLT engine, highly compliant and also very fast. I have "
"tests showing this to be more than twice as fast as Sablotron."
msgstr ""

#. leap/perl-XML-Namespace/summary
#, fuzzy
msgid "Simple support for XML Namespaces"
msgstr "Support des gadgets google pour Plasma"

#. leap/perl-XML-Namespace/description
msgid ""
"This module implements a simple object for representing XML Namespaces in "
"Perl. It provides little more than some syntactic sugar for your Perl "
"programs, saving you the bother of typing lots of long-winded URIs. It was "
"inspired by the Class::RDF::NS module distributed as part of Class::RDF."
msgstr ""

#. leap/perl-XML-NamespaceFactory/summary
msgid "Simple factory objects for SAX namespaced names."
msgstr ""

#. leap/perl-XML-NamespaceFactory/description
msgid ""
"Simply create a new XML::NamespaceFactory object with the namespace you wish "
"to use as its single parameter. If you wish to use the empty namespace, "
"simply pass in an empty string (but undef will not do).\n"
"\n"
"Then, when you want to get a JClark name, call a method on that object the "
"name of which is the local name you wish to have. It'll return the JClark "
"notation for that local name in your namespace.\n"
"\n"
"Unfortunately, some local names legal in XML are not legal in Perl. To "
"circumvent this, you can use the hash notation in which you access a key on "
"the object the name of which is the local name you wish to have. This will "
"work just as the method call name but will accept more characters. Note that "
"it does not check that the name you ask for is a valid XML name. This form "
"is more general but slower.\n"
"\n"
"If this is not clear, hopefully the SYNOPSIS should help :)"
msgstr ""

#. leap/perl-XML-NamespaceSupport/summary
msgid "Simple Generic Namespace Processor"
msgstr ""

#. leap/perl-XML-NamespaceSupport/description
msgid ""
"This module offers a simple to process namespaced XML names (unames) from "
"within any application that may need them. It also helps maintain a prefix "
"to namespace URI map, and provides a number of basic checks.\n"
"\n"
"The model for this module is SAX2's NamespaceSupport class, readable at "
"http://www.saxproject.org/namespaces.html It adds a few perlisations where "
"we thought it appropriate."
msgstr ""

#. leap/perl-XML-NodeFilter/summary
msgid "XML::NodeFilter"
msgstr ""

#. leap/perl-XML-NodeFilter/description
msgid ""
"XML::NodeFilter is a generic node filter class for DOM traversal as "
"specified in the DOM Level 2 Traversal and Range specification. It extends "
"that specification, so this class is easier to use for Perl programmers."
msgstr ""

#. leap/perl-XML-Parser/summary
msgid "A perl module for parsing XML documents"
msgstr ""

#. leap/perl-XML-Parser/description
msgid ""
"This module provides ways to parse XML documents. It is built on top of the "
"XML::Parser::Expat manpage, which is a lower level interface to James "
"Clark's expat library. Each call to one of the parsing methods creates a new "
"instance of XML::Parser::Expat which is then used to parse the document. "
"Expat options may be provided when the XML::Parser object is created. These "
"options are then passed on to the Expat object on each parse call. They can "
"also be given as extra arguments to the parse methods, in which case they "
"override options given at XML::Parser creation time.\n"
"\n"
"The behavior of the parser is controlled either by 'the /STYLES manpage' and/"
"or 'the /HANDLERS manpage' options, or by the /setHandlers manpage method. "
"These all provide mechanisms for XML::Parser to set the handlers needed by "
"XML::Parser::Expat. If neither 'Style' nor 'Handlers' are specified, then "
"parsing just checks the document for being well-formed.\n"
"\n"
"When underlying handlers get called, they receive as their first parameter "
"the _Expat_ object, not the Parser object."
msgstr ""

#. leap/perl-XML-Parser-Lite/summary
msgid "Lightweight pure-perl XML Parser (based on regexps)"
msgstr ""

#. leap/perl-XML-Parser-Lite/description
msgid ""
"This module implements an XML parser with a interface similar to XML::"
"Parser. Though not all callbacks are supported, you should be able to use it "
"in the same way you use XML::Parser. Due to using experimental regexp "
"features it'll work only on Perl 5.6 and above and may behave differently on "
"different platforms.\n"
"\n"
"Note that you cannot use regular expressions or split in callbacks. This is "
"due to a limitation of perl's regular expression implementation (which is "
"not re-entrant)."
msgstr ""

#. leap/perl-XML-RegExp/summary
#, fuzzy
msgid "Regular expressions for XML tokens"
msgstr "Interface Perl pour objets URI"

#. leap/perl-XML-RegExp/description
msgid ""
"This package contains regular expressions for the following XML tokens: "
"BaseChar, Ideographic, Letter, Digit, Extender, CombiningChar, NameChar, "
"EntityRef, CharRef, Reference, Name, NmToken, and AttValue.\n"
"\n"
"The definitions of these tokens were taken from the XML spec (Extensible "
"Markup Language 1.0) at the http://www.w3.org/TR/REC-xml manpage.\n"
"\n"
"Also contains the regular expressions for the following tokens from the XML "
"Namespaces spec at the http://www.w3.org/TR/REC-xml-names manpage: "
"NCNameChar, NCName, QName, Prefix and LocalPart."
msgstr ""

#. leap/perl-XML-SAX/summary
msgid "XML::SAX Perl Module"
msgstr ""

#. leap/perl-XML-SAX/description
msgid ""
"XML::SAX consists of several framework classes for using and building Perl "
"SAX2 XML parsers, filters, and drivers. It is designed around the need to be "
"able to \"plug in\" different SAX parsers to an application without "
"requiring programmer intervention. Those of you familiar with the DBI will "
"be right at home. Some of the designs come from the Java JAXP specification "
"(SAX part), only without the javaness."
msgstr ""

#. leap/perl-XML-SAX-Base/summary
msgid "Base class SAX Drivers and Filters"
msgstr ""

#. leap/perl-XML-SAX-Base/description
msgid ""
"This module has a very simple task - to be a base class for PerlSAX drivers "
"and filters. It's default behaviour is to pass the input directly to the "
"output unchanged. It can be useful to use this module as a base class so you "
"don't have to, for example, implement the characters() callback.\n"
"\n"
"The main advantages that it provides are easy dispatching of events the "
"right way (ie it takes care for you of checking that the handler has "
"implemented that method, or has defined an AUTOLOAD), and the guarantee that "
"filters will pass along events that they aren't implementing to handlers "
"downstream that might nevertheless be interested in them."
msgstr ""

#. leap/perl-XML-SAX-Expat/summary
msgid "SAX2 Driver for Expat (XML::Parser)"
msgstr ""

#. leap/perl-XML-SAX-Expat/description
msgid ""
"This is an implementation of a SAX2 driver sitting on top of Expat (XML::"
"Parser) which Ken MacLeod posted to perl-xml and which I have updated.\n"
"\n"
"It is still incomplete, though most of the basic SAX2 events should be "
"available. The SAX2 spec is currently available from the http://perl-xml."
"sourceforge.net/perl-sax/ manpage.\n"
"\n"
"A more friendly URL as well as a PODification of the spec are in the works."
msgstr ""

#. leap/perl-XML-SAX-ExpatXS/summary
msgid "Perl SAX 2 XS extension to Expat parser"
msgstr ""

#. leap/perl-XML-SAX-ExpatXS/description
msgid ""
"XML::SAX::ExpatXS is a direct XS extension to Expat XML parser. It "
"implements  Perl SAX 2.1 interface. See http://perl-xml.sourceforge.net/perl-"
"sax/ for  Perl SAX API description. Any deviations from the Perl SAX 2.1 "
"specification  are considered as bugs."
msgstr ""

#. leap/perl-XML-SAX-Writer/summary
#. leap/perl-XML-SAX-Writer/description
#, fuzzy
msgid "SAX2 XML Writer"
msgstr "Yet Another Pager Software"

#. leap/perl-XML-SemanticDiff/summary
#, fuzzy
msgid "Perl extension for comparing XML documents"
msgstr "Interface Perl pour objets URI"

#. leap/perl-XML-SemanticDiff/description
msgid ""
"XML::SematicDiff provides a way to compare the contents and structure of two "
"XML documents. By default, it returns a list of hashrefs where each hashref "
"describes a single difference between the two docs."
msgstr ""

#. leap/perl-XML-Simple/summary
msgid "An API for simple XML files"
msgstr ""

#. leap/perl-XML-Simple/description
msgid ""
"The XML::Simple module provides a simple API layer on top of an underlying "
"XML parsing module (either XML::Parser or one of the SAX2 parser modules). "
"Two functions are exported: 'XMLin()' and 'XMLout()'. Note: you can "
"explicitly request the lower case versions of the function names: 'xml_in()' "
"and 'xml_out()'.\n"
"\n"
"The simplest approach is to call these two functions directly, but an "
"optional object oriented interface (see \"OPTIONAL OO INTERFACE\" below) "
"allows them to be called as methods of an *XML::Simple* object. The object "
"interface can also be used at either end of a SAX pipeline."
msgstr ""

#. leap/perl-XML-SimpleObject-LibXML/summary
msgid ""
"Perl extension allowing a simple(r) object representation of an XML::Lib[cut]"
msgstr ""

#. leap/perl-XML-SimpleObject-LibXML/description
msgid ""
"This is a short and simple class allowing simple object access to a parsed "
"XML::LibXML tree, with methods for fetching children and attributes in as "
"clean a manner as possible. My apologies for further polluting the XML:: "
"space; this is a small and quick module, with easy and compact usage. Some "
"will rightfully question placing another interface over the DOM methods "
"provided by XML::LibXML, but my experience is that people appreciate the "
"total simplicity provided by this module, despite its limitations. These "
"limitations include a minor loss of speed compared to the DOM, loss of "
"control over node types, and protection (aka lack of knowledge) about the "
"DOM. I encourage those who want more control and understanding over the DOM "
"to study XML::LibXML; this module's source can be instructive, too."
msgstr ""

#. leap/perl-XML-Stream/summary
msgid "Creates an XML Stream connection and parses return data"
msgstr ""

#. leap/perl-XML-Stream/description
msgid ""
"This module provides the user with methods to connect to a remote server, "
"send a stream of XML to the server, and receive/parse an XML stream from the "
"server. It is primarily based work for the Etherx XML router developed by "
"the Jabber Development Team. For more information about this project visit "
"http://xmpp.org/protocols/streams/.\n"
"\n"
"XML::Stream gives the user the ability to define a central callback that "
"will be used to handle the tags received from the server. These tags are "
"passed in the format defined at instantiation time. the closing tag of an "
"object is seen, the tree is finished and passed to the call back function. "
"What the user does with it from there is up to them.\n"
"\n"
"For a detailed description of how this module works, and about the data "
"structure that it returns, please view the source of Stream.pm and look at "
"the detailed description at the end of the file.\n"
"\n"
"NOTE: The parser that XML::Stream::Parser provides, as are most Perl "
"parsers, is synchronous. If you are in the middle of parsing a packet and "
"call a user defined callback, the Parser is blocked until your callback "
"finishes. This means you cannot be operating on a packet, send out another "
"packet and wait for a response to that packet. It will never get to you. "
"Threading might solve this, but as we all know threading in Perl is not "
"quite up to par yet. This issue will be revisted in the future."
msgstr ""

#. leap/perl-XML-Structured/summary
msgid "Simple conversion API from XML to perl structures and back"
msgstr ""

#. leap/perl-XML-Structured/description
msgid ""
"Provides a way to convert XML data into a predefined perl data structure and "
"back to XML. Unlike with modules like XML::Simple, it is an error if the XML "
"data does not match the provided skeleton (the \"DTD\"). Another advantage "
"is that the order of the attributes and elements is taken from the DTD when "
"converting back to xml."
msgstr ""

#. leap/perl-XML-Twig/summary
msgid "Perl Module for Processing Huge Xml Documents in Tree Mode"
msgstr ""

#. leap/perl-XML-Twig/description
msgid ""
"This module provides a way to process XML documents. It is build on top of "
"'XML::Parser'.\n"
"\n"
"The module offers a tree interface to the document, while allowing you to "
"output the parts of it that have been completely processed.\n"
"\n"
"It allows minimal resource (CPU and memory) usage by building the tree only "
"for the parts of the documents that need actual processing, through the use "
"of the 'twig_roots ' and 'twig_print_outside_roots ' options. The 'finish ' "
"and 'finish_print ' methods also help to increase performances.\n"
"\n"
"XML::Twig tries to make simple things easy so it tries its best to takes "
"care of a lot of the (usually) annoying (but sometimes necessary) features "
"that come with XML and XML::Parser."
msgstr ""

#. leap/perl-XML-Writer/summary
msgid "Perl extension for writing XML documents"
msgstr ""

#. leap/perl-XML-Writer/description
msgid ""
"XML::Writer is a helper module for Perl programs that write an XML document. "
"The module handles all escaping for attribute values and character data and "
"constructs different types of markup, such as tags, comments, and processing "
"instructions.\n"
"\n"
"By default, the module performs several well-formedness checks to catch "
"errors during output. This behaviour can be extremely useful during "
"development and debugging, but it can be turned off for production-grade "
"code.\n"
"\n"
"The module can operate either in regular mode in or Namespace processing "
"mode. In Namespace mode, the module will generate Namespace Declarations "
"itself, and will perform additional checks on the output.\n"
"\n"
"Additional support is available for a simplified data mode with no mixed "
"content: newlines are automatically inserted around elements and elements "
"can optionally be indented based as their nesting level."
msgstr ""

#. leap/perl-XML-Writer-String/summary
msgid "Capture output from XML::Writer"
msgstr ""

#. leap/perl-XML-Writer-String/description
msgid ""
"This module implements a bare-bones class specifically for the purpose of "
"capturing data from the XML::Writer module. XML::Writer expects an IO::"
"Handle object and writes XML data to the specified object (or STDOUT) via "
"it's print() method. This module simulates such an object for the specific "
"purpose of providing the required print() method.\n"
"\n"
"It is recommended that $writer->end() is called prior to calling $s->value() "
"to check for well-formedness.\n"
"\n"
"Author:\n"
"-------     Simon Oliver <simon.oliver@umist.ac.uk>"
msgstr ""

#. leap/perl-XML-XPath/summary
msgid "Parse and evaluate XPath statements"
msgstr ""

#. leap/perl-XML-XPath/description
msgid ""
"This module aims to comply exactly to the XPath specification at http://www."
"w3.org/TR/xpath and yet allow extensions to be added in the form of "
"functions.Modules such as XSLT and XPointer may need to do this as they "
"support functionality beyond XPath."
msgstr ""

#. leap/perl-XML-XPathEngine/summary
msgid "Re-usable XPath engine for DOM-like trees"
msgstr ""

#. leap/perl-XML-XPathEngine/description
msgid ""
"This module provides an XPath engine, that can be re-used by other module/"
"classes that implement trees.\n"
"\n"
"In order to use the XPath engine, nodes in the user module need to mimick "
"DOM nodes. The degree of similitude between the user tree and a DOM dictates "
"how much of the XPath features can be used. A module implementing all of the "
"DOM should be able to use this module very easily (you might need to add the "
"cmp method on nodes in order to get ordered result sets).\n"
"\n"
"This code is a more or less direct copy of the the XML::XPath manpage module "
"by Matt Sergeant. I only removed the XML processing part to remove the "
"dependency on XML::Parser, applied a couple of patches, renamed a whole lot "
"of methods to make Pod::Coverage happy, and changed the docs.\n"
"\n"
"The article eXtending XML XPath, http://www.xmltwig.com/article/"
"extending_xml_xpath/ should give authors who want to use this module enough "
"background to do so.\n"
"\n"
"Otherwise, my email is below ;--) \n"
"*WARNING*: while the underlying code is rather solid, this module mostly "
"lacks docs. As they say, \"patches welcome\"..."
msgstr ""

#. leap/perl-XML-XSLT/summary
#, fuzzy
msgid "Perl module for processing XSLT"
msgstr "Interface Perl pour objets URI"

#. leap/perl-XML-XSLT/description
msgid ""
"This module implements the W3C's XSLT specification. The goal is full "
"implementation of this spec, but we have not yet achieved that. However, it "
"already works well. See XML::XSLT Commands for the current status of each "
"command.\n"
"\n"
"XML::XSLT makes use of XML::DOM and LWP::Simple, while XML::DOM uses XML::"
"Parser. Therefore XML::Parser, XML::DOM and LWP::Simple have to be installed "
"properly for XML::XSLT to run."
msgstr ""

#. leap/perl-XMLRPC-Lite/summary
msgid "client and server implementation of XML-RPC protocol"
msgstr ""

#. leap/perl-XMLRPC-Lite/description
msgid ""
"XMLRPC::Lite is a Perl modules which provides a simple nterface to the XML-"
"RPC protocol both on client and server side. Based on SOAP::Lite module, it "
"gives you access to all features and transports available in that module.\n"
"\n"
"See _t/26-xmlrpc.t_ for client examples and _examples/XMLRPC/*_ for server "
"implementations."
msgstr ""

#. leap/perl-XSLoader/summary
msgid "Dynamically load C libraries into Perl code"
msgstr ""

#. leap/perl-XSLoader/description
msgid ""
"This module defines a standard _simplified_ interface to the dynamic linking "
"mechanisms available on many platforms. Its primary purpose is to implement "
"cheap automatic dynamic loading of Perl modules.\n"
"\n"
"For a more complicated interface, see DynaLoader. Many (most) features of "
"'DynaLoader' are not implemented in 'XSLoader', like for example the "
"'dl_load_flags', not honored by 'XSLoader'."
msgstr ""

#. leap/perl-YAML/summary
msgid "YAML Ain't Markup Language™"
msgstr ""

#. leap/perl-YAML/description
msgid ""
"The YAML.pm module implements a YAML Loader and Dumper based on the YAML 1.0 "
"specification. http://www.yaml.org/spec/\n"
"\n"
"YAML is a generic data serialization language that is optimized for human "
"readability. It can be used to express the data structures of most modern "
"programming languages. (Including Perl!!!)\n"
"\n"
"For information on the YAML syntax, please refer to the YAML specification."
msgstr ""

#. leap/perl-YAML-LibYAML/summary
#. leap/perl-YAML-LibYAML/description
msgid "Perl YAML Serialization using XS and libyaml"
msgstr ""

#. leap/perl-YAML-PP/summary
msgid "YAML 1.2 processor"
msgstr ""

#. leap/perl-YAML-PP/description
msgid ""
"YAML::PP is a modular YAML processor.\n"
"\n"
"It aims to support 'YAML 1.2' and 'YAML 1.1'. See https://yaml.org/. Some "
"(rare) syntax elements are not yet supported and documented below.\n"
"\n"
"YAML is a serialization language. The YAML input is called \"YAML Stream\". "
"A stream consists of one or more \"Documents\", separated by a line with a "
"document start marker '---'. A document optionally ends with the document "
"end marker '...'.\n"
"\n"
"This allows one to process continuous streams additionally to a fixed input "
"file or string.\n"
"\n"
"The YAML::PP frontend will currently load all documents, and return only the "
"first if called with scalar context.\n"
"\n"
"The YAML backend is implemented in a modular way that allows one to add "
"custom handling of YAML tags, perl objects and data types. The inner API is "
"not yet stable. Suggestions welcome.\n"
"\n"
"You can check out all current parse and load results from the yaml-test-"
"suite here: https://perlpunk.github.io/YAML-PP-p5/test-suite.html"
msgstr ""

#. leap/perl-YAML-Syck/summary
msgid "Fast, lightweight YAML loader and dumper"
msgstr ""

#. leap/perl-YAML-Syck/description
msgid ""
"This module provides a Perl interface to the *libsyck* data serialization "
"library. It exports the 'Dump' and 'Load' functions for converting Perl data "
"structures to YAML strings, and the other way around. \n"
"*NOTE*: If you are working with other language's YAML/Syck bindings (such as "
"Ruby), please set '$YAML::Syck::ImplicitTyping' to '1' before calling the "
"'Load'/'Dump' functions. The default setting is for preserving backward-"
"compatibility with 'YAML.pm'."
msgstr ""

#. leap/perl-YAML-Tiny/summary
msgid "Read/Write YAML files with as little code as possible"
msgstr ""

#. leap/perl-YAML-Tiny/description
msgid ""
"*YAML::Tiny* is a perl class for reading and writing YAML-style files, "
"written with as little code as possible, reducing load time and memory "
"overhead.\n"
"\n"
"Most of the time it is accepted that Perl applications use a lot of memory "
"and modules. The *::Tiny* family of modules is specifically intended to "
"provide an ultralight and zero-dependency alternative to many more-thorough "
"standard modules.\n"
"\n"
"This module is primarily for reading human-written files (like simple config "
"files) and generating very simple human-readable files. Note that I said "
"*human-readable* and not *geek-readable*. The sort of files that your "
"average manager or secretary should be able to look at and make sense of.\n"
"\n"
"YAML::Tiny does not generate comments, it won't necessarily preserve the "
"order of your hashes, and it will normalise if reading in and writing out "
"again.\n"
"\n"
"It only supports a very basic subset of the full YAML specification.\n"
"\n"
"Usage is targeted at files like Perl's META.yml, for which a small and "
"easily-embeddable module is extremely attractive.\n"
"\n"
"Features will only be added if they are human readable, and can be written "
"in a few lines of code. Please don't be offended if your request is refused. "
"Someone has to draw the line, and for YAML::Tiny that someone is me.\n"
"\n"
"If you need something with more power move up to YAML (7 megabytes of memory "
"overhead) or YAML::XS (6 megabytes memory overhead and requires a C "
"compiler).\n"
"\n"
"To restate, YAML::Tiny does *not* preserve your comments, whitespace, or the "
"order of your YAML data. But it should round-trip from Perl structure to "
"file and back again just fine."
msgstr ""

#. leap/perl-aliased/summary
#, fuzzy
msgid "Use shorter versions of class names"
msgstr "Version KDE d'un jeu d'arcade classique"

#. leap/perl-aliased/description
msgid ""
"'aliased' is simple in concept but is a rather handy module. It loads the "
"class you specify and exports into your namespace a subroutine that returns "
"the class name. You can explicitly alias the class to another name or, if "
"you prefer, you can do so implicitly. In the latter case, the name of the "
"subroutine is the last part of the class name. Thus, it does something "
"similar to the following:\n"
"\n"
"  \n"
"\n"
"  use Some::Annoyingly::Long::Module::Name::Customer;   sub Customer "
"{     return 'Some::Annoyingly::Long::Module::Name::Customer';   }   my "
"$cust = Customer->new;\n"
"\n"
"This module is useful if you prefer a shorter name for a class. It's also "
"handy if a class has been renamed.\n"
"\n"
"(Some may object to the term \"aliasing\" because we're not aliasing one "
"namespace to another, but it's a handy term. Just keep in mind that this is "
"done with a subroutine and not with typeglobs and weird namespace munging.)\n"
"\n"
"Note that this is *only* for 'use'ing OO modules. You cannot use this to "
"load procedural modules. See the the Why OO Only? manpage section. Also, "
"don't let the version number fool you. This code is ridiculously simple and "
"is just fine for most use."
msgstr ""

#. leap/perl-asa/summary
msgid "Lets your class/object say it works like something else"
msgstr ""

#. leap/perl-asa/description
msgid ""
"Perl 5 doesn't natively support Java-style interfaces, and it doesn't "
"support Perl 6 style roles either.\n"
"\n"
"You can get both of these things in half a dozen different ways via various "
"CPAN modules, but they usually require that you buy into \"their way\" of "
"implementing your code.\n"
"\n"
"Other have turned to \"duck typing\".\n"
"\n"
"This is, for the most part, a fairly naive check that says \"can you do this "
"method\", under the \"if it looks like a duck, and quacks like a duck, then "
"it must be a duck\".\n"
"\n"
"It assumes that if you have a '->quack' method, then they will treat you as "
"a duck, because doing things like adding 'Duck' to your '@ISA' array means "
"you are also forced to take their implementation.\n"
"\n"
"There is, of course, a better way.\n"
"\n"
"For better or worse, Perl's '->isa' functionality to determine if something "
"is or is not a particular class/object is defined as a *method*, not a "
"function, and so that means that as well as adding something to you '@ISA' "
"array, so that Perl's 'UNIVERSAL::isa' method can work with it, you are also "
"allowed to simply overload your own 'isa' method and answer directly whether "
"or not you are something.\n"
"\n"
"The simplest form of the idiom looks like this.\n"
"\n"
"  sub isa {       return 1 if $_[1] eq 'Duck';       shift->SUPER::"
"isa(@_);   }\n"
"\n"
"This reads \"Check my type as normal, but if anyone wants to know if I'm a "
"duck, then tell them yes\".\n"
"\n"
"Now, there are a few people that have argued that this is \"lying\" about "
"your class, but this argument is based on the idea that '@ISA' is somehow "
"more \"real\" than using the method directly.\n"
"\n"
"It also assumes that what you advertise you implement needs to be in sync "
"with the method resolution for any given function. But in the best and "
"cleanest implementation of code, the API is orthogonal (although most often "
"related) to the implementation.\n"
"\n"
"And although '@ISA' is about implementation *and* API, overloading 'isa' to "
"let you change your API is not at all bad when seen in this light."
msgstr ""

#. leap/perl-autobox/summary
msgid "Call Methods On Native Types"
msgstr ""

#. leap/perl-autobox/description
msgid ""
"The autobox pragma allows methods to be called on integers, floats, strings, "
"arrays, hashes, and code references in exactly the same manner as blessed "
"references.\n"
"\n"
"Autoboxing is transparent: values are not blessed into their (user-defined) "
"implementation class (unless the method elects to bestow such a blessing) - "
"they simply use its methods as though they are.\n"
"\n"
"The classes (packages) into which the native types are boxed are fully "
"configurable. By default, a method invoked on a non-object value is assumed "
"to be defined in a class whose name corresponds to the 'ref()' type of that "
"value - or SCALAR if the value is a non-reference."
msgstr ""

#. leap/perl-autovivification/summary
msgid "Lexically disable autovivification"
msgstr ""

#. leap/perl-autovivification/description
msgid ""
"When an undefined variable is dereferenced, it gets silently upgraded to an "
"array or hash reference (depending of the type of the dereferencing). This "
"behaviour is called _autovivification_ and usually does what you mean (e.g. "
"when you store a value) but it may be unnatural or surprising because your "
"variables gets populated behind your back. This is especially true when "
"several levels of dereferencing are involved, in which case all levels are "
"vivified up to the last, or when it happens in intuitively read-only "
"constructs like 'exists'.\n"
"\n"
"This pragma lets you disable autovivification for some constructs and "
"optionally throws a warning or an error when it would have happened."
msgstr ""

#. leap/perl-bareword-filehandles/summary
msgid "Disables bareword filehandles"
msgstr ""

#. leap/perl-bareword-filehandles/description
msgid ""
"This module lexically disables the use of bareword filehandles with builtin "
"functions, except for the special builtin filehandles 'STDIN', 'STDOUT', "
"'STDERR', 'ARGV', 'ARGVOUT' and 'DATA'."
msgstr ""

#. leap/perl/perl-base-32bit/description
#. leap/perl/perl-base/description
#, fuzzy
msgid ""
"perl - Practical Extraction and Report Language\n"
"\n"
"Perl is optimized for scanning arbitrary text files, extracting information "
"from those text files, and printing reports based on that information.  It "
"is also good for many system management tasks.\n"
"\n"
"Perl is intended to be practical (easy to use, efficient, and complete) "
"rather than beautiful (tiny, elegant, and minimal).\n"
"\n"
"This package contains only some basic modules and the perl binary itself."
msgstr ""
"Attention: pour des raisons de sécurité, nous n'avons pas positionné le bit "
"suid pour /usr/bin/suidperl. Si cette fonctionnalité vous est nécessaire, "
"inscrivez la ligne suivante dans /etc/permissions.local et démarrez "
"SuSEconfig.\n"
"\n"
" /usr/bin/suidperl       root.root        4755"

#. leap/perl-boolean/summary
#, fuzzy
msgid "Boolean support for Perl"
msgstr "Support des gadgets google pour Plasma"

#. leap/perl-boolean/description
msgid ""
"Most programming languages have a native 'Boolean' data type. Perl does "
"not.\n"
"\n"
"Perl has a simple and well known Truth System. The following scalar values "
"are false:\n"
"\n"
"    $false1 = undef;     $false2 = 0;     $false3 = 0.0;     $false4 = "
"'';     $false5 = '0';\n"
"\n"
"Every other scalar value is true.\n"
"\n"
"This module provides basic Boolean support, by defining two special objects: "
"'true' and 'false'."
msgstr ""

#. leap/perl-checkbot/summary
msgid "WWW Link Verifier"
msgstr ""

#. leap/perl-checkbot/description
msgid ""
"Checkbot is a perl5 script which can verify links within a region of the "
"World Wide Web. It checks all pages within an identified region, and all "
"links within that region. After checking all links within the region, it "
"will also check all links which point outside of the region, and then stop.\n"
"\n"
"Checkbot regularly writes reports on its findings, including all servers "
"found in the region, and all links with problems on those servers.\n"
"\n"
"Checkbot was written originally to check a number of servers at once. This "
"has implied some design decisions, so you might want to keep that in mind "
"when making suggestions. Speaking of which, be sure to check the to do file "
"on the website for things which have been suggested for Checkbot.\n"
"\n"
"Authors:\n"
"--------     Hans de Graaff <hans@degraaff.org>, 1994-2005.     Based on "
"Dimitri Tischenko, Delft University of Technology, 1994"
msgstr ""

#. leap/perl-common-sense/summary
msgid "Save a Tree and a Kitten, Use Common::Sense!"
msgstr ""

#. leap/perl-common-sense/description
msgid ""
"   “Nothing is more fairly distributed than common sense: no one thinks    "
"he needs more of it than he already has.”\n"
"\n"
"   – René Descartes\n"
"\n"
"This module implements some sane defaults for Perl programs, as defined by "
"two typical (or not so typical - use your common sense) specimens of Perl "
"coders. In fact, after working out details on which warnings and strict "
"modes to enable and make fatal, we found that we (and our code written so "
"far, and others) fully agree on every option, even though we never used "
"warnings before, so it seems this module indeed reflects a \"common\" sense "
"among some long-time Perl coders.\n"
"\n"
"The basic philosophy behind the choices made in common::sense can be "
"summarised as: \"enforcing strict policies to catch as many bugs as "
"possible, while at the same time, not limiting the expressive power "
"available to the programmer\".\n"
"\n"
"Two typical examples of how this philosophy is applied in practise is the "
"handling of uninitialised and malloc warnings: \n"
"* _uninitialised_\n"
"\n"
"  'undef' is a well-defined feature of perl, and enabling warnings for   "
"using it rarely catches any bugs, but considerably limits you in what you   "
"can do, so uninitialised warnings are disabled. \n"
"* _malloc_\n"
"\n"
"  Freeing something twice on the C level is a serious bug, usually causing   "
"memory corruption. It often leads to side effects much later in the   "
"program and there are no advantages to not reporting this, so malloc   "
"warnings are fatal by default.\n"
"\n"
"Unfortunately, there is no fine-grained warning control in perl, so often "
"whole groups of useful warnings had to be excluded because of a single "
"useless warning (for example, perl puts an arbitrary limit on the length of "
"text you can match with some regexes before emitting a warning, making the "
"whole 'regexp' category useless).\n"
"\n"
"What follows is a more thorough discussion of what this module does, and why "
"it does it, and what the advantages (and disadvantages) of this approach are."
msgstr ""

#. leap/perl-constant-boolean/summary
msgid "Define TRUE and FALSE constants."
msgstr ""

#. leap/perl-constant-boolean/description
msgid ""
"Defines 'TRUE' and 'FALSE' constants in caller's namespace. You could use "
"simple values like empty string or zero for false, or any non-empty and non-"
"zero string value as true, but the 'TRUE' and 'FALSE' constants are more "
"descriptive.\n"
"\n"
"It is virtually the same as:\n"
"\n"
"     use constant TRUE => !! 1;   use constant FALSE => !! '';\n"
"\n"
"The constants exported by 'constant::boolean' are not reported by the Test::"
"Pod::Coverage manpage, so it is more convenient to use this module than to "
"define 'TRUE' and 'FALSE' constants by yourself.\n"
"\n"
"The constants can be removed from class API with 'no constant::boolean' "
"pragma or some universal tool like the namespace::clean manpage."
msgstr ""

#. leap/perl-constant-defer/summary
msgid "Constant Subs with Deferred Value Calculation"
msgstr ""

#. leap/perl-constant-defer/description
msgid ""
"'constant::defer' creates a subroutine which on the first call runs given "
"code to calculate its value, and on any subsequent calls just returns that "
"value, like a constant. The value code is discarded once run, allowing it to "
"be garbage collected.\n"
"\n"
"Deferring a calculation is good if it might take a lot of work or produce a "
"big result but is only needed sometimes or only well into a program run. If "
"it's never needed then the value code never runs.\n"
"\n"
"A deferred constant is generally not inlined or folded (see the perlop/"
"Constant Folding manpage) since it's not a single scalar value. In the "
"current implementation a deferred constant becomes a plain constant after "
"the first use, so may inline etc in code compiled after that (see the /"
"IMPLEMENTATION manpage below).\n"
"\n"
"See _examples/simple.pl_ in the constant-defer source code for a complete "
"sample program."
msgstr ""

#. leap/perl/perl-core-DB_File-32bit/summary
#. leap/perl/perl-core-DB_File/summary
#, fuzzy
msgid "Perl 5 interface to Berkeley DB"
msgstr "Interface Perl vers DNS Resolver"

#. leap/perl/perl-core-DB_File-32bit/description
#. leap/perl/perl-core-DB_File/description
#, fuzzy
msgid ""
"perl-core-DB_File - Perl 5 interface to Berkeley DB\n"
"\n"
"Perl is optimized for scanning arbitrary text files, extracting information "
"from those text files, and printing reports based on that information.  It "
"is also good for many system management tasks.\n"
"\n"
"Perl is intended to be practical (easy to use, efficient, and complete) "
"rather than beautiful (tiny, elegant, and minimal).\n"
"\n"
"This package contains perl's DB_File module."
msgstr ""
"Attention: pour des raisons de sécurité, nous n'avons pas positionné le bit "
"suid pour /usr/bin/suidperl. Si cette fonctionnalité vous est nécessaire, "
"inscrivez la ligne suivante dans /etc/permissions.local et démarrez "
"SuSEconfig.\n"
"\n"
" /usr/bin/suidperl       root.root        4755"

#. leap/perl-curry/summary
#. leap/perl-curry/description
msgid "Create automatic curried method call closures for any class or object"
msgstr ""

#. leap/perl/perl-doc/summary
#, fuzzy
msgid "Perl Documentation"
msgstr "7.0 Documentation"

#. leap/perl/perl-doc/description
msgid "Perl man pages and pod files."
msgstr ""

#. leap/perl-experimental/summary
msgid "Experimental features made easy"
msgstr ""

#. leap/perl-experimental/description
msgid ""
"This pragma provides an easy and convenient way to enable or disable "
"experimental features.\n"
"\n"
"Every version of perl has some number of features present but considered "
"\"experimental.\" For much of the life of Perl 5, this was only a "
"designation found in the documentation. Starting in Perl v5.10.0, and more "
"aggressively in v5.18.0, experimental features were placed behind pragmata "
"used to enable the feature and disable associated warnings.\n"
"\n"
"The 'experimental' pragma exists to combine the required incantations into a "
"single interface stable across releases of perl. For every experimental "
"feature, this should enable the feature and silence warnings for the "
"enclosing lexical scope:\n"
"\n"
"  use experimental 'feature-name';\n"
"\n"
"To disable the feature and, if applicable, re-enable any warnings, use:\n"
"\n"
"  no experimental 'feature-name';\n"
"\n"
"The supported features, documented further below, are: \n"
"* * 'array_base' - allow the use of '$[' to change the starting index of   "
"'@array'.\n"
"\n"
"This is supported on all versions of perl. \n"
"* * 'autoderef' - allow push, each, keys, and other built-ins on   "
"references.\n"
"\n"
"This was added in perl 5.14.0 and removed in perl 5.23.1. \n"
"* * 'bitwise' - allow the new stringwise bit operators\n"
"\n"
"This was added in perl 5.22.0. \n"
"* * 'const_attr' - allow the :const attribute on subs\n"
"\n"
"This was added in perl 5.22.0. \n"
"* * 'declared_refs' - enables aliasing via assignment to references\n"
"\n"
"This was added in perl 5.26.0. \n"
"* * 'isa' - allow the use of the 'isa' infix operator\n"
"\n"
"This was added in perl 5.32.0. \n"
"* * 'lexical_topic' - allow the use of lexical '$_' via 'my $_'.\n"
"\n"
"This was added in perl 5.10.0 and removed in perl 5.23.4. \n"
"* * 'lexical_subs' - allow the use of lexical subroutines.\n"
"\n"
"This was added in 5.18.0. \n"
"* * 'postderef' - allow the use of postfix dereferencing expressions\n"
"\n"
"This was added in perl 5.20.0, and became non-experimental (and always "
"enabled) in 5.24.0. \n"
"* * 'postderef_qq' - allow the use of postfix dereferencing expressions   "
"inside interpolating strings\n"
"\n"
"This was added in perl 5.20.0, and became non-experimental (and always "
"enabled) in 5.24.0. \n"
"* * 're_strict' - enables strict mode in regular expressions\n"
"\n"
"This was added in perl 5.22.0. \n"
"* * 'refaliasing' - allow aliasing via '\\$x = \\$y'\n"
"\n"
"This was added in perl 5.22.0. \n"
"* * 'regex_sets' - allow extended bracketed character classes in regexps\n"
"\n"
"This was added in perl 5.18.0. \n"
"* * 'signatures' - allow subroutine signatures (for named arguments)\n"
"\n"
"This was added in perl 5.20.0. \n"
"* * 'smartmatch' - allow the use of '~~'\n"
"\n"
"This was added in perl 5.10.0, but it should be noted there are significant "
"incompatibilities between 5.10.0 and 5.10.1. \n"
"* * 'switch' - allow the use of '~~', given, and when\n"
"\n"
"This was added in perl 5.10.0. \n"
"* * 'try' - allow the use of 'try' and 'catch'\n"
"\n"
"This was added in perl 5.34.0 \n"
"* * 'win32_perlio' - allows the use of the :win32 IO layer.\n"
"\n"
"This was added on perl 5.22.0."
msgstr ""

#. leap/perl-forks/summary
msgid "Drop-in replacement for Perl threads using fork()"
msgstr ""

#. leap/perl-forks/description
msgid ""
"The \"forks\" pragma allows a developer to use threads without having to "
"have a threaded perl, or to even run 5.8.0 or higher.\n"
"\n"
"Refer to the the threads manpage module for ithreads API documentation. "
"Also, use\n"
"\n"
"    perl -Mforks -e 'print $threads::VERSION'\n"
"\n"
"to see what version of the threads manpage you should refer to regarding "
"supported API features.\n"
"\n"
"There were a number of goals that I am trying to reach with this "
"implementation.\n"
"\n"
"    Using this module *only* makes sense if you run on a system that has "
"an     implementation of the 'fork' function by the Operating System. "
"Windows     is currently the only known system on which Perl runs which does "
"*not*     have an implementation of 'fork'. Therefore, it *doesn't* make "
"any     sense to use this module on a Windows system. And therefore, a check "
"is     made during installation barring you from installing on a Windows     "
"system."
msgstr ""

#. leap/perl-gettext/summary
msgid "Message Handling Functions"
msgstr ""

#. leap/perl-gettext/description
msgid ""
"The gettext module permits access from perl to the gettext() family of "
"functions for retrieving message strings from databases constructed to "
"internationalize software. \n"
"* $d = Locale::gettext->domain(DOMAIN) \n"
"* $d = Locale::gettext->domain_raw(DOMAIN)\n"
"\n"
"  Creates a new object for retrieving strings in the domain *DOMAIN* and   "
"returns it. 'domain' requests that strings be returned as Perl strings   "
"(possibly with wide characters) if possible while 'domain_raw' requests   "
"that octet strings directly from functions like 'dgettext()'. \n"
"* $d->get(MSGID)\n"
"\n"
"  Calls 'dgettext()' to return the translated string for the given "
"*MSGID*. \n"
"* $d->cget(MSGID, CATEGORY)\n"
"\n"
"  Calls 'dcgettext()' to return the translated string for the given "
"*MSGID*   in the given *CATEGORY*. \n"
"* $d->nget(MSGID, MSGID_PLURAL, N)\n"
"\n"
"  Calls 'dngettext()' to return the translated string for the given "
"*MSGID*   or *MSGID_PLURAL* depending on *N*. \n"
"* $d->ncget(MSGID, MSGID_PLURAL, N, CATEGORY)\n"
"\n"
"  Calls 'dngettext()' to return the translated string for the given "
"*MSGID*   or *MSGID_PLURAL* depending on *N* in the given *CATEGORY*. \n"
"* $d->dir([NEWDIR])\n"
"\n"
"  If *NEWDIR* is given, calls 'bindtextdomain' to set the name of the   "
"directory where messages for the domain represented by '$d' are found.   "
"Returns the (possibly changed) current directory name. \n"
"* $d->codeset([NEWCODE])\n"
"\n"
"  For instances created with 'Locale::gettext->domain_raw', manuiplates "
"the   character set of the returned strings. If *NEWCODE* is given, calls   "
"'bind_textdomain_codeset' to set the character encoding in which messages   "
"for the domain represented by '$d' are returned. Returns the (possibly   "
"changed) current encoding name.\n"
"\n"
"gettext(), dgettext(), and dcgettext() attempt to retrieve a string matching "
"their 'msgid' parameter within the context of the current locale. "
"dcgettext() takes the message's category and the text domain as parameters "
"while dgettext() defaults to the LC_MESSAGES category and gettext() defaults "
"to LC_MESSAGES and uses the current text domain. If the string is not found "
"in the database, then 'msgid' is returned.\n"
"\n"
"ngettext(), dngettext(), and dcngettext() function similarily but implement "
"differentiation of messages between singular and plural. See the "
"documentation for the corresponding C functions for details.\n"
"\n"
"textdomain() sets the current text domain and returns the previously active "
"domain.\n"
"\n"
"_bindtextdomain(domain, dirname)_ instructs the retrieval functions to look "
"for the databases belonging to domain 'domain' in the directory 'dirname'\n"
"\n"
"_bind_textdomain_codeset(domain, codeset)_ instructs the retrieval functions "
"to translate the returned messages to the character encoding given by "
"*codeset* if the encoding of the message catalog is known."
msgstr ""

#. leap/perl-local-lib/perl-homedir/summary
msgid "Per-user Perl local::lib setup"
msgstr ""

#. leap/perl-local-lib/perl-homedir/description
msgid ""
"perl-homedir configures the system to automatically create a ~/perl5 "
"directory in each user's $HOME on user login.  This allows each user to "
"install and CPAN packages via the CPAN to their $HOME, with no additional "
"configuration or privliges, and without installing them system-wide.\n"
"\n"
"If you want your users to be able to install and use their own Perl modules, "
"install this package."
msgstr ""

#. leap/perl-indirect/summary
msgid "Lexically warn about using the indirect method call syntax"
msgstr ""

#. leap/perl-indirect/description
msgid ""
"When enabled, this pragma warns about indirect method calls that are present "
"in your code.\n"
"\n"
"The indirect syntax is now considered harmful, since its parsing has many "
"quirks and its use is error prone : when the subroutine 'foo' has not been "
"declared in the current package, 'foo $x' actually compiles to '$x->foo', "
"and 'foo { key => 1 }' to ''key'->foo(1)'. Please refer to the REFERENCES "
"section for a more complete list of reasons for avoiding this construct.\n"
"\n"
"This pragma currently does not warn for core functions ('print', 'say', "
"'exec' or 'system'). This may change in the future, or may be added as "
"optional features that would be enabled by passing options to 'unimport'.\n"
"\n"
"This module is *not* a source filter."
msgstr ""

#. leap/perl-ldap/summary
#, fuzzy
msgid "Client Interface for LDAP Servers"
msgstr "Perl5 - Client LDAP"

#. leap/perl-ldap/description
#, fuzzy
msgid "A Client interface for LDAP servers."
msgstr "Un interface client pour le serveur LDAP"

#. leap/perl-lib-relative/summary
msgid "Add paths relative to the current file to @INC"
msgstr ""

#. leap/perl-lib-relative/description
msgid ""
"Adding a path to @INC to load modules from a local directory may seem "
"simple, but has a few common pitfalls to be aware of. Directly adding a "
"relative path to '@INC' means that any later code that changes the current "
"working directory will change where modules are loaded from. This applies to "
"the '.' path that used to be in '@INC' by default until perl 5.26.0, or a "
"relative path added in code like 'use lib 'path/to/lib'', and may be a "
"vulnerability if such a location is not supposed to be writable. "
"Additionally, the commonly used FindBin module relies on interpreter state "
"and the path to the original script invoked by the perl interpreter, "
"sometimes requiring workarounds in uncommon cases like generated or embedded "
"code. This module proposes a more straightforward method: take a path "
"relative to the current file, absolutize it, and add it to '@INC'.\n"
"\n"
"If this module is already available to be loaded, it can be used as with lib."
"pm, passing relative paths, which will be absolutized relative to the "
"current file then passed on to lib. Multiple arguments will be separately "
"absolutized, and absolute paths will be passed on unchanged.\n"
"\n"
"For cases where this module cannot be loaded beforehand, the last section of "
"the \"SYNOPSIS\" can be copy-pasted into a file to perform the same task."
msgstr ""

#. leap/perl-libconfigfile/summary
#, fuzzy
msgid "Parses simple configuration files"
msgstr "Un module pour lire les fichiers de configuration .ini"

#. leap/perl-libconfigfile/description
msgid ""
"ConfigFile parses simple configuration files and stores its values in an "
"anonymous hash reference. The syntax of the configuration file is quite "
"simple:\n"
"\n"
"1.  This is a comment VALUE_ONE = foo VALUE_TWO = $VALUE_ONE/bar VALUE_THREE "
"= The value contains a \\# (hash). # This is a comment. COMPOSED_VALUE[one] "
"= The first component of a clustered value COMPOSED_VALUE[two] = The second "
"component of a clustered value\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Sebastien J. Gross <seb@sjgross.org>"
msgstr ""

#. leap/perl-libintl-perl/summary
msgid "High-Level Interface to Uniforum Message Translation"
msgstr ""

#. leap/perl-libintl-perl/description
msgid ""
"This is an internationalization library for Perl that aims to be compatible "
"with the Uniforum message translations system as implemented for example in "
"GNU gettext."
msgstr ""

#. leap/perl-libwww-perl/summary
#. leap/perl-libwww-perl/description
msgid "The World-Wide Web library for Perl"
msgstr ""

#. leap/perl-libxml-perl/summary
msgid "Collection of Perl modules for working with XML"
msgstr ""

#. leap/perl-libxml-perl/description
msgid ""
"perl-libxml-perl is a collection of Perl modules for working with XML.\n"
"\n"
"\n"
"\n"
"Authors:\n"
"--------     Ken MacLeod <ken@bitsko.slc.ut.us>"
msgstr ""

#. leap/perl-local-lib/summary
msgid "Create and Use a Local Lib/ for Perl Modules with Perl5lib"
msgstr ""

#. leap/perl-local-lib/description
msgid ""
"This module provides a quick, convenient way of bootstrapping a user-local "
"Perl module library located within the user's home directory. It also "
"constructs and prints out for the user the list of environment variables "
"using the syntax appropriate for the user's current shell (as specified by "
"the 'SHELL' environment variable), suitable for directly adding to one's "
"shell configuration file.\n"
"\n"
"More generally, local::lib allows for the bootstrapping and usage of a "
"directory containing Perl modules outside of Perl's '@INC'. This makes it "
"easier to ship an application with an app-specific copy of a Perl module, or "
"collection of modules. Useful in cases like when an upstream maintainer "
"hasn't applied a patch to a module of theirs that you need for your "
"application.\n"
"\n"
"On import, local::lib sets the following environment variables to "
"appropriate values: \n"
"* PERL_MB_OPT \n"
"* PERL_MM_OPT \n"
"* PERL5LIB \n"
"* PATH \n"
"* PERL_LOCAL_LIB_ROOT\n"
"\n"
"When possible, these will be appended to instead of overwritten entirely.\n"
"\n"
"These values are then available for reference by any code after import."
msgstr ""

#. leap/perl-multidimensional/summary
msgid "Disables Multidimensional Array Emulation"
msgstr ""

#. leap/perl-multidimensional/description
msgid ""
"Perl's multidimensional array emulation stems from the days before the "
"language had references, but these days it mostly serves to bite you when "
"you typo a hash slice by using the '$' sigil instead of '@'.\n"
"\n"
"This module lexically makes using multidimensional array emulation a fatal "
"error at compile time."
msgstr ""

#. leap/perl-namespace-autoclean/summary
msgid "Keep imports out of your namespace"
msgstr ""

#. leap/perl-namespace-autoclean/description
msgid ""
"When you import a function into a Perl package, it will naturally also be "
"available as a method.\n"
"\n"
"The 'namespace::autoclean' pragma will remove all imported symbols at the "
"end of the current package's compile cycle. Functions called in the package "
"itself will still be bound by their name, but they won't show up as methods "
"on your class or instances.\n"
"\n"
"This module is very similar to namespace::clean, except it will clean all "
"imported functions, no matter if you imported them before or after you "
"'use'd the pragma. It will also not touch anything that looks like a "
"method.\n"
"\n"
"If you're writing an exporter and you want to clean up after yourself (and "
"your peers), you can use the '-cleanee' switch to specify what package to "
"clean:\n"
"\n"
"  package My::MooseX::namespace::autoclean;   use strict;\n"
"\n"
"  use namespace::autoclean (); # no cleanup, just load\n"
"\n"
"  sub import {       namespace::autoclean->import(         -cleanee => "
"scalar(caller),       );   }"
msgstr ""

#. leap/perl-namespace-clean/summary
#. leap/perl-namespace-clean/description
msgid "Keep imports and functions out of your namespace"
msgstr ""

#. leap/perl-pcsc/summary
msgid "Perl interface to Smart Card Reader"
msgstr ""

#. leap/perl-pcsc/description
msgid ""
"PC/SC represents an abstraction layer to smart card readers. It provides a "
"communication layer with a wide variety of smart card readers through a "
"standardized API."
msgstr ""

#. leap/perl-prefork/summary
msgid "Optimized module loading for forking or non-forking processes"
msgstr ""

#. leap/perl-prefork/description
msgid ""
"The 'prefork' pragma is intended to allow module writers to optimise module "
"loading for *both* scenarios with as little additional code as possible.\n"
"\n"
"prefork.pm is intended to serve as a central and optional marshalling point "
"for state detection (are we running in compile-time or run-time mode) and to "
"act as a relatively light-weight module loader."
msgstr ""

#. leap/perl-strictures/summary
msgid "Turn on strict and make most warnings fatal"
msgstr ""

#. leap/perl-strictures/description
msgid ""
"I've been writing the equivalent of this module at the top of my code for "
"about a year now. I figured it was time to make it shorter.\n"
"\n"
"Things like the importer in 'use Moose' don't help me because they turn "
"warnings on but don't make them fatal -- which from my point of view is "
"useless because I want an exception to tell me my code isn't warnings-"
"clean.\n"
"\n"
"Any time I see a warning from my code, that indicates a mistake.\n"
"\n"
"Any time my code encounters a mistake, I want a crash -- not spew to STDERR "
"and then unknown (and probably undesired) subsequent behaviour.\n"
"\n"
"I also want to ensure that obvious coding mistakes, like indirect object "
"syntax (and not so obvious mistakes that cause things to accidentally "
"compile as such) get caught, but not at the cost of an XS dependency and not "
"at the cost of blowing things up on another machine.\n"
"\n"
"Therefore, strictures turns on additional checking, but only when it thinks "
"it's running in a test file in a VCS checkout -- although if this causes "
"undesired behaviour this can be overridden by setting the "
"'PERL_STRICTURES_EXTRA' environment variable.\n"
"\n"
"If additional useful author side checks come to mind, I'll add them to the "
"'PERL_STRICTURES_EXTRA' code path only -- this will result in a minor "
"version increase (e.g. 1.000000 to 1.001000 (1.1.0) or similar). Any fixes "
"only to the mechanism of this code will result in a sub-version increase (e."
"g. 1.000000 to 1.000001 (1.0.1))."
msgstr ""

#. leap/perl-syntax/summary
msgid "Activate syntax extensions"
msgstr ""

#. leap/perl-syntax/description
msgid ""
"This module activates community provided syntax extensions to Perl. You pass "
"it a feature name, and optionally a scalar with arguments, and the "
"dispatching system will load and install the extension in your package.\n"
"\n"
"The import arguments are parsed with the Data::OptList manpage. There are no "
"standardised options. Please consult the documentation for the specific "
"syntax feature to find out about possible configuration options.\n"
"\n"
"The passed in feature names are simply transformed: 'function' becomes the "
"Syntax::Feature::Function manpage and 'foo_bar' would become 'Syntax::"
"Feature::FooBar'."
msgstr ""

#. leap/perl-version/summary
msgid "Perl extension for Version Objects"
msgstr ""

#. leap/perl-version/description
msgid ""
"Version objects were added to Perl in 5.10. This module implements version "
"objects for older version of Perl and provides the version object API for "
"all versions of Perl. All previous releases before 0.74 are deprecated and "
"should not be used due to incompatible API changes. Version 0.77 introduces "
"the new 'parse' and 'declare' methods to standardize usage. You are strongly "
"urged to set 0.77 as a minimum in your code, e.g.\n"
"\n"
"  use version 0.77; # even for Perl v.5.10.0"
msgstr ""

#. tumbleweed/perl-Alien-Libxml2/summary
msgid "Install the C libxml2 library on your system"
msgstr ""

#. tumbleweed/perl-Alien-Libxml2/description
msgid "This module provides 'libxml2' for other modules to use."
msgstr ""

#. tumbleweed/perl-Any-URI-Escape/summary
msgid "Load URI::Escape::XS preferentially over URI::Escape"
msgstr ""

#. tumbleweed/perl-Any-URI-Escape/description
msgid ""
"URI::Escape is great, but URI::Escape::XS is faster. This module loads URI::"
"Escape::XS and imports the two most common methods if XS is installed.\n"
"\n"
"The insides of this module aren't completely shaken out yet, so patches "
"welcome."
msgstr ""

#. tumbleweed/perl-AnyEvent-Connector/summary
msgid "Tcp_connect with Transparent Proxy Handling"
msgstr ""

#. tumbleweed/perl-AnyEvent-Connector/description
msgid ""
"AnyEvent::Connector object has 'tcp_connect' method compatible with that "
"from AnyEvent::Socket, and it handles proxy settings transparently."
msgstr ""

#. tumbleweed/perl-AnyEvent-WebSocket-Client/summary
msgid "WebSocket client for AnyEvent"
msgstr ""

#. tumbleweed/perl-AnyEvent-WebSocket-Client/description
msgid ""
"This class provides an interface to interact with a web server that provides "
"services via the WebSocket protocol in an AnyEvent context. It uses "
"Protocol::WebSocket rather than reinventing the wheel. You could use "
"AnyEvent and Protocol::WebSocket directly if you wanted finer grain control, "
"but if that is not necessary then this class may save you some time.\n"
"\n"
"The recommended API was added to the AnyEvent::WebSocket::Connection class "
"with version 0.12, so it is recommended that you include that version when "
"using this module. The older version of the API has since been deprecated "
"and removed."
msgstr ""

#. tumbleweed/perl-AnyEvent-WebSocket-Server/summary
msgid "WebSocket server for AnyEvent"
msgstr ""

#. tumbleweed/perl-AnyEvent-WebSocket-Server/description
msgid ""
"This class is an implementation of the WebSocket server in an AnyEvent "
"context.\n"
"\n"
"  * Currently this module supports WebSocket protocol version 13 only. See "
"at https://tools.ietf.org/html/rfc6455 for detail."
msgstr ""

#. tumbleweed/perl-App-perlbrew/description
msgid ""
"perlbrew is a program to automate the building and installation of perl in "
"an easy way. It provides multiple isolated perl environments, and a "
"mechanism for you to switch between them.\n"
"\n"
"Everything are installed unter '~/perl5/perlbrew'. You then need to include "
"a bashrc/cshrc provided by perlbrew to tweak the PATH for you. You then can "
"benefit from not having to run 'sudo' commands to install cpan modules "
"because those are installed inside your 'HOME' too.\n"
"\n"
"For the documentation of perlbrew usage see perlbrew command on at https://"
"metacpan.org/, or by running 'perlbrew help', or by visiting at https://"
"perlbrew.pl/. The following documentation features the API of 'App::"
"perlbrew' module, and may not be remotely close to what your want to read."
msgstr ""

#. tumbleweed/perl-App-rsync-retry/summary
#. tumbleweed/perl-App-rsync-retry/description
msgid "Rsync wrapper to retry on transfer errrors"
msgstr ""

#. tumbleweed/perl-Archive-Any-Lite/summary
#, fuzzy
msgid "Simple CPAN package extractor"
msgstr "Un interface client pour le serveur LDAP"

#. tumbleweed/perl-Archive-Any-Lite/description
msgid ""
"This is a fork of Archive::Any by Michael Schwern and Clint Moore. The main "
"difference is this works properly even when you fork(), and may require less "
"memory to extract a tarball. On the other hand, this isn't pluggable (this "
"only supports file formats used in the CPAN toolchains), and this doesn't "
"check mime types (at least as of this writing)."
msgstr ""

#. tumbleweed/perl-Archive-Extract/summary
msgid "Generic archive extracting mechanism"
msgstr ""

#. tumbleweed/perl-Array-Diff/summary
msgid "Find the differences between two arrays"
msgstr ""

#. tumbleweed/perl-Array-Diff/description
msgid ""
"This module compares two *pre-sorted* arrays and returns the added or "
"deleted elements in two separate arrays. It's a simple wrapper around "
"Algorithm::Diff. \n"
"*Note*: the arrays must be sorted before you call 'diff'.\n"
"\n"
"And if you need more complex array tools, check Array::Compare."
msgstr ""

#. tumbleweed/perl-BerkeleyDB/summary
#, fuzzy
msgid "Perl extension for Berkeley DB version 2, 3, 4, 5 or 6"
msgstr "Interface Perl pour objets URI"

#. tumbleweed/perl-Business-ISBN/description
msgid ""
"This modules handles International Standard Book Numbers, including ISBN-10 "
"and ISBN-13.\n"
"\n"
"The data come from Business::ISBN::Data, which means you can update the data "
"separately from the code. Also, you can use Business::ISBN::Data with "
"whatever _RangeMessage.xml_ you like if you have updated data. See that "
"module for details."
msgstr ""

#. tumbleweed/perl-Business-ISBN-Data/summary
msgid "Data pack for Business::ISBN"
msgstr ""

#. tumbleweed/perl-Business-ISBN-Data/description
msgid ""
"You don't need to load this module yourself in most cases. Business::ISBN "
"will load it when it loads. You must use Business::ISBN 3.005 or later "
"because the data structure changed slightly to fix a bug with ISBN13 "
"prefixes.\n"
"\n"
"These data are generated from the _RangeMessage.xml_ file provided by the "
"ISBN Agency. The distributed version matches the date in the version for "
"this module. You can retrieve this yourself at https://www.isbn-"
"international.org/range_file_generation. This file is included as part of "
"the distribution and should be installed at _~lib/Business/ISBN/Data/"
"RangeMessage.xml_.\n"
"\n"
"If you want to use a different _RangeMessage.xml_ file, you can set the "
"'ISBN_RANGE_MESSAGE' environment variable to the alternate location before "
"you load 'Business::ISBN'. This way, you can use the latest (or even "
"earlier) data without having to install something new or wait for an update "
"to this module.\n"
"\n"
"If the default _RangeMessage.xml_ or your alternate one is not available, "
"the module falls back to data included in _Data.pm_. However, that data are "
"likely to be older. If it does not find that file, it looks for "
"_RangeMessage.xml_ in the current directory.\n"
"\n"
"The data are in '%Business::ISBN::country_data' (although the \"country\" "
"part is historical). If you want to see where the data are from, check "
"'$Business::ISBN::country_data{_source}'."
msgstr ""

#. tumbleweed/perl-Business-ISSN/description
msgid ""
"* new($issn)\n"
"\n"
"The constructor accepts a scalar representing the ISSN.\n"
"\n"
"The string representing the ISSN may contain characters other than [0-9xX], "
"although these will be removed in the internal representation. The resulting "
"string must look like an ISSN - the first seven characters must be digits "
"and the eighth character must be a digit, 'x', or 'X'.\n"
"\n"
"The string passed as the ISSN need not be a valid ISSN as long as it "
"superficially looks like one. This allows one to use the 'fix_checksum' "
"method.\n"
"\n"
"One should check the validity of the ISSN with 'is_valid()' rather than "
"relying on the return value of the constructor.\n"
"\n"
"If all one wants to do is check the validity of an ISSN, one can skip the "
"object-oriented interface and use the c<is_valid_checksum()> function which "
"is exportable on demand.\n"
"\n"
"If the constructor decides it can't create an object, it returns undef. It "
"may do this if the string passed as the ISSN can't be munged to the internal "
"format. \n"
"* $obj->checksum\n"
"\n"
"Return the ISSN checksum. \n"
"* $obj->as_string\n"
"\n"
"Return the ISSN as a string.\n"
"\n"
"A terminating 'x' is changed to 'X'. \n"
"* $obj->is_valid\n"
"\n"
"Returns 1 if the checksum is valid.\n"
"\n"
"Returns 0 if the ISSN does not pass the checksum test. The constructor "
"accepts invalid ISSN's so that they might be fixed with 'fix_checksum'. \n"
"* $obj->fix_checksum\n"
"\n"
"Replace the eighth character with the checksum the corresponds to the "
"previous seven digits. This does not guarantee that the ISSN corresponds to "
"the product one thinks it does, or that the ISSN corresponds to any product "
"at all. It only produces a string that passes the checksum routine. If the "
"ISSN passed to the constructor was invalid, the error might have been in any "
"of the other nine positions."
msgstr ""

#. tumbleweed/perl-CLI-Osprey/summary
msgid "MooX::Options + MooX::Cmd + Sanity"
msgstr ""

#. tumbleweed/perl-CLI-Osprey/description
msgid ""
"CLI::Osprey is a module to assist in writing commandline applications with "
"M* OO modules (Moose, Moo, Mo). With it, you structure your app as one or "
"more modules, which get instantiated with the commandline arguments as "
"attributes. Arguments are parsed using Getopt::Long::Descriptive, and both "
"long and short help messages as well as complete manual pages are "
"automatically generated. An app can be a single command with options, or "
"have sub-commands (like 'git'). Sub-commands can be defined as modules (with "
"options of their own) or as simple coderefs."
msgstr ""

#. tumbleweed/perl-CPAN-Common-Index/summary
msgid "Common library for searching CPAN modules, authors and distributions"
msgstr ""

#. tumbleweed/perl-CPAN-Common-Index/description
msgid ""
"This module provides a common library for working with a variety of CPAN "
"index services. It is intentionally minimalist, trying to use as few non-"
"core modules as possible.\n"
"\n"
"The 'CPAN::Common::Index' module is an abstract base class that defines a "
"common API. Individual backends deliver the API for a particular index.\n"
"\n"
"As shown in the SYNOPSIS, one interesting application is multiplexing -- "
"using different index backends, querying each in turn, and returning the "
"first result."
msgstr ""

#. tumbleweed/perl-CSS-Minifier-XS/description
msgid ""
"'CSS::Minifier::XS' is a CSS \"minifier\"; its designed to remove "
"unnecessary whitespace and comments from CSS files, while also *not* "
"breaking the CSS.\n"
"\n"
"'CSS::Minifier::XS' is similar in function to 'CSS::Minifier', but is "
"substantially faster as its written in XS and not just pure Perl."
msgstr ""

#. tumbleweed/perl-Canary-Stability/summary
msgid "Canary to check perl compatibility for schmorp's modules"
msgstr ""

#. tumbleweed/perl-Carp-Clan/description
msgid ""
"This module is based on \"'Carp.pm'\" from Perl 5.005_03. It has been "
"modified to skip all package names matching the pattern given in the \"use\" "
"statement inside the \"'qw()'\" term (or argument list).\n"
"\n"
"Suppose you have a family of modules or classes named \"Pack::A\", \"Pack::B"
"\" and so on, and each of them uses \"'Carp::Clan qw(^Pack::);'\" (or at "
"least the one in which the error or warning gets raised).\n"
"\n"
"Thus when for example your script \"tool.pl\" calls module \"Pack::A\", and "
"module \"Pack::A\" calls module \"Pack::B\", an exception raised in module "
"\"Pack::B\" will appear to have originated in \"tool.pl\" where \"Pack::A\" "
"was called, and not in \"Pack::A\" where \"Pack::B\" was called, as the "
"unmodified \"'Carp.pm'\" would try to make you believe ':-)'.\n"
"\n"
"This works similarly if \"Pack::B\" calls \"Pack::C\" where the exception is "
"raised, et cetera.\n"
"\n"
"In other words, this blames all errors in the \"'Pack::*'\" modules on the "
"user of these modules, i.e., on you. ';-)'\n"
"\n"
"The skipping of a clan (or family) of packages according to a pattern "
"describing its members is necessary in cases where these modules are not "
"classes derived from each other (and thus when examining '@ISA' - as in the "
"original \"'Carp.pm'\" module - doesn't help).\n"
"\n"
"The purpose and advantage of this is that a \"clan\" of modules can work "
"together (and call each other) and throw exceptions at various depths down "
"the calling hierarchy and still appear as a monolithic block (as though they "
"were a single module) from the perspective of the caller.\n"
"\n"
"In case you just want to ward off all error messages from the module in "
"which you \"'use Carp::Clan'\", i.e., if you want to make all error messages "
"or warnings to appear to originate from where your module was called (this "
"is what you usually used to \"'use Carp;'\" for ';-)'), instead of in your "
"module itself (which is what you can do with a \"die\" or \"warn\" anyway), "
"you do not need to provide a pattern, the module will automatically provide "
"the correct one for you.\n"
"\n"
"I.e., just \"'use Carp::Clan;'\" without any arguments and call \"carp\" or "
"\"croak\" as appropriate, and they will automatically defend your module "
"against all blames!\n"
"\n"
"In other words, a pattern is only necessary if you want to make several "
"modules (more than one) work together and appear as though they were only "
"one."
msgstr ""

#. tumbleweed/perl-Class-Data-Inheritable/description
msgid ""
"Class::Data::Inheritable is for creating accessor/mutators to class data. "
"That is, if you want to store something about your class as a whole (instead "
"of about a single object). This data is then inherited by your subclasses "
"and can be overridden.\n"
"\n"
"For example:\n"
"\n"
"  Pere::Ubu->mk_classdata('Suitcase');\n"
"\n"
"will generate the method Suitcase() in the class Pere::Ubu.\n"
"\n"
"This new method can be used to get and set a piece of class data.\n"
"\n"
"  Pere::Ubu->Suitcase('Red');   $suitcase = Pere::Ubu->Suitcase;\n"
"\n"
"The interesting part happens when a class inherits from Pere::Ubu:\n"
"\n"
"  package Raygun;   use base qw(Pere::Ubu);\n"
"\n"
"     $suitcase = Raygun->Suitcase;\n"
"\n"
"Raygun inherits its Suitcase class data from Pere::Ubu.\n"
"\n"
"Inheritance of class data works analogous to method inheritance. As long as "
"Raygun does not \"override\" its inherited class data (by using Suitcase() "
"to set a new value) it will continue to use whatever is set in Pere::Ubu and "
"inherit further changes:\n"
"\n"
"     Pere::Ubu->Suitcase('Blue');\n"
"\n"
"However, should Raygun decide to set its own Suitcase() it has now "
"\"overridden\" Pere::Ubu and is on its own, just like if it had overridden a "
"method:\n"
"\n"
"     Raygun->Suitcase('Orange');\n"
"\n"
"Now that Raygun has overridden Pere::Ubu further changes by Pere::Ubu no "
"longer effect Raygun.\n"
"\n"
"     Pere::Ubu->Suitcase('Samsonite');"
msgstr ""

#. tumbleweed/perl-Class-Method-Modifiers/description
msgid ""
"Method modifiers are a convenient feature from the CLOS (Common Lisp Object "
"System) world.\n"
"\n"
"In its most basic form, a method modifier is just a method that calls '$self-"
">SUPER::foo(@_)'. I for one have trouble remembering that exact invocation, "
"so my classes seldom re-dispatch to their base classes. Very bad!\n"
"\n"
"'Class::Method::Modifiers' provides three modifiers: 'before', 'around', and "
"'after'. 'before' and 'after' are run just before and after the method they "
"modify, but can not really affect that original method. 'around' is run in "
"place of the original method, with a hook to easily call that original "
"method. See the MODIFIERS section for more details on how the particular "
"modifiers work.\n"
"\n"
"One clear benefit of using 'Class::Method::Modifiers' is that you can define "
"multiple modifiers in a single namespace. These separate modifiers don't "
"need to know about each other. This makes top-down design easy. Have a base "
"class that provides the skeleton methods of each operation, and have plugins "
"modify those methods to flesh out the specifics.\n"
"\n"
"Parent classes need not know about 'Class::Method::Modifiers'. This means "
"you should be able to modify methods in _any_ subclass. See Term::VT102::"
"ZeroBased for an example of subclassing with 'Class::Method::Modifiers'.\n"
"\n"
"In short, 'Class::Method::Modifiers' solves the problem of making sure you "
"call '$self->SUPER::foo(@_)', and provides a cleaner interface for it.\n"
"\n"
"As of version 1.00, 'Class::Method::Modifiers' is faster in some cases than "
"Moose. See _benchmark/method_modifiers.pl_ in the Moose distribution.\n"
"\n"
"'Class::Method::Modifiers' also provides an additional \"modifier\" type, "
"'fresh'; see below."
msgstr ""

#. tumbleweed/perl-Clone/description
msgid ""
"This module provides a 'clone()' method which makes recursive copies of "
"nested hash, array, scalar and reference types, including tied variables and "
"objects.\n"
"\n"
"'clone()' takes a scalar argument and duplicates it. To duplicate lists, "
"arrays or hashes, pass them in by reference, e.g.\n"
"\n"
"    my $copy = clone (\\@array);\n"
"\n"
"    \n"
"\n"
"    my %copy = %{ clone (\\%hash) };"
msgstr ""

#. tumbleweed/perl-Clone-PP/description
msgid ""
"This module provides a general-purpose clone function to make deep copies of "
"Perl data structures. It calls itself recursively to copy nested hash, "
"array, scalar and reference types, including tied variables and objects.\n"
"\n"
"The clone() function takes a scalar argument to copy. To duplicate arrays or "
"hashes, pass them in by reference:\n"
"\n"
"  my $copy = clone(\\@array);    my @copy = @{ clone(\\@array) };   my $copy "
"= clone(\\%hash);     my %copy = %{ clone(\\%hash) };\n"
"\n"
"The clone() function also accepts an optional second parameter that can be "
"used to limit the depth of the copy. If you pass a limit of 0, clone will "
"return the same value you supplied; for a limit of 1, a shallow copy is "
"constructed; for a limit of 2, two layers of copying are done, and so on.\n"
"\n"
"  my $shallow_copy = clone( $item, 1 );\n"
"\n"
"To allow objects to intervene in the way they are copied, the clone() "
"function checks for a couple of optional methods. If an object provides a "
"method named 'clone_self', it is called and the result returned without "
"further processing. Alternately, if an object provides a method named "
"'clone_init', it is called on the copied object before it is returned."
msgstr ""

#. tumbleweed/perl-Config-AutoConf/summary
msgid "Module to implement some of AutoConf macros in pure perl"
msgstr ""

#. tumbleweed/perl-Config-Grammar/summary
msgid "Grammar-based, user-friendly config parser"
msgstr ""

#. tumbleweed/perl-Config-INI-Reader-Ordered/summary
msgid ".ini-file parser that returns sections in order"
msgstr ""

#. tumbleweed/perl-Config-INI-Reader-Ordered/description
msgid ""
"Config::INI::Reader::Ordered is a subclass of Config::INI::Reader which "
"preserves section order. See Config::INI::Reader for all documentation; the "
"only difference is as presented in the SYNOPSIS."
msgstr ""

#. tumbleweed/perl-Config-Identity/summary
msgid "Load (and optionally decrypt via GnuPG) user/pass identity information"
msgstr ""

#. tumbleweed/perl-Config-Identity/description
msgid ""
"Config::Identity is a tool for loading (and optionally decrypting via GnuPG) "
"user/pass identity information\n"
"\n"
"For GitHub API access, an identity is a 'login'/'token' pair\n"
"\n"
"For PAUSE access, an identity is a 'user'/'password' pair"
msgstr ""

#. tumbleweed/perl-Config-IniFiles/summary
#, fuzzy
msgid "Module for reading .ini-style configuration files"
msgstr "Un module pour lire les fichiers de configuration .ini"

#. tumbleweed/perl-Convert-ASN1/summary
#, fuzzy
msgid "ASN.1 Encode/Decode library"
msgstr "Utilitaires pour le système de fichiers ext2"

#. tumbleweed/perl-Convert-UUlib/summary
msgid ""
"Decode uu/xx/b64/mime/yenc/etc-encoded data from a massive number of files"
msgstr ""

#. tumbleweed/perl-Convert-UUlib/description
msgid ""
"This module started as an interface to the uulib/uudeview library by Frank "
"Pilhofer that can be used to decode all kinds of usenet (and other) binary "
"messages.\n"
"\n"
"After upstream abondoned the project, th library was continuously bugfixed "
"and improved in this module, with major focuses on security fixes, "
"correctness and speed (that does not mean that this library is considered "
"safe with untrusted data, but it surely is safer than the poriginal "
"uudeview).\n"
"\n"
"Read the file doc/library.pdf from the distribution for in-depth information "
"about the C-library used in this interface, and the rest of this document "
"and especially the non-trivial decoder program at the end."
msgstr ""

#. tumbleweed/perl-Crypt-CBC/description
msgid ""
"This module is a Perl-only implementation of the cryptographic cipher block "
"chaining mode (CBC). In combination with a block cipher such as AES or "
"Blowfish, you can encrypt and decrypt messages of arbitrarily long length. "
"The encrypted messages are compatible with the encryption format used by the "
"*OpenSSL* package.\n"
"\n"
"To use this module, you will first create a Crypt::CBC cipher object with "
"new(). At the time of cipher creation, you specify an encryption key to use "
"and, optionally, a block encryption algorithm. You will then call the "
"start() method to initialize the encryption or decryption process, crypt() "
"to encrypt or decrypt one or more blocks of data, and lastly finish(), to "
"pad and encrypt the final block. For your convenience, you can call the "
"encrypt() and decrypt() methods to operate on a whole data value at once."
msgstr ""

#. tumbleweed/perl-Crypt-JWT/summary
msgid "JSON Web Token (JWT, JWS, JWE) as defined by RFC7519, RFC7515, RFC7516"
msgstr ""

#. tumbleweed/perl-Crypt-JWT/description
msgid ""
"Implements *JSON Web Token (JWT)* - https://tools.ietf.org/html/rfc7519. The "
"implementation covers not only *JSON Web Signature (JWS)* - https://tools."
"ietf.org/html/rfc7515, but also *JSON Web Encryption (JWE)* - https://tools."
"ietf.org/html/rfc7516.\n"
"\n"
"The module implements *all (100%) algorithms* defined in https://tools.ietf."
"org/html/rfc7518 - *JSON Web Algorithms (JWA)*.\n"
"\n"
"This module supports *Compact JWS/JWE* and *Flattened JWS/JWE JSON* "
"serialization, general JSON serialization is not supported yet."
msgstr ""

#. tumbleweed/perl-Crypt-OpenSSL-RSA/description
msgid ""
"'Crypt::OpenSSL::RSA' provides the ability to RSA encrypt strings which are "
"somewhat shorter than the block size of a key. It also allows for "
"decryption, signatures and signature verification.\n"
"\n"
"_NOTE_: Many of the methods in this package can croak, so use 'eval', or "
"Error.pm's try/catch mechanism to capture errors. Also, while some methods "
"from earlier versions of this package return true on success, this (never "
"documented) behavior is no longer the case."
msgstr ""

#. tumbleweed/perl-Crypt-OpenSSL-Random/summary
msgid "OpenSSL/LibreSSL pseudo-random number generator access"
msgstr ""

#. tumbleweed/perl-Crypt-OpenSSL-Random/description
msgid ""
"'Crypt::OpenSSL::Random' provides the ability to seed and query the\n"
"*OpenSSL* and *LibreSSL* library's pseudo-random number generators.\n"
"\n"
"Note: On *LibreSSL* 'random_egd()' is not defined."
msgstr ""

#. tumbleweed/perl-Crypt-PBKDF2/summary
msgid "The PBKDF2 password hashing algorithm"
msgstr ""

#. tumbleweed/perl-Crypt-PBKDF2/description
msgid ""
"PBKDF2 is a secure password hashing algorithm that uses the techniques of "
"\"key strengthening\" to make the complexity of a brute-force attack "
"arbitrarily high. PBKDF2 uses any other cryptographic hash or cipher (by "
"convention, usually HMAC-SHA1, but 'Crypt::PBKDF2' is fully pluggable), and "
"allows for an arbitrary number of iterations of the hashing function, and a "
"nearly unlimited output hash size (up to 2**32 - 1 times the size of the "
"output of the backend hash). The hash is salted, as any password hash should "
"be, and the salt may also be of arbitrary size."
msgstr ""

#. tumbleweed/perl-Crypt-Rijndael/description
msgid ""
"This module implements the Rijndael cipher, which has just been selected as "
"the Advanced Encryption Standard. \n"
"* keysize\n"
"\n"
"Returns the keysize, which is 32 (bytes). The Rijndael cipher actually "
"supports keylengths of 16, 24 or 32 bytes, but there is no way to "
"communicate this to 'Crypt::CBC'. \n"
"* blocksize\n"
"\n"
"The blocksize for Rijndael is 16 bytes (128 bits), although the algorithm "
"actually supports any blocksize that is any multiple of our bytes. 128 bits, "
"is however, the AES-specified block size, so this is all we support. \n"
"* $cipher = Crypt::Rijndael->new( $key [, $mode] )\n"
"\n"
"Create a new 'Crypt::Rijndael' cipher object with the given key (which must "
"be 128, 192 or 256 bits long). The additional '$mode' argument is the "
"encryption mode, either 'MODE_ECB' (electronic codebook mode, the default), "
"'MODE_CBC' (cipher block chaining, the same that 'Crypt::CBC' does), "
"'MODE_CFB' (128-bit cipher feedback), 'MODE_OFB' (128-bit output feedback), "
"or 'MODE_CTR' (counter mode).\n"
"\n"
"ECB mode is very insecure (read a book on cryptography if you don't know "
"why!), so you should probably use CBC mode. \n"
"* $cipher->set_iv($iv)\n"
"\n"
"This allows you to change the initial value vector used by the chaining "
"modes. It is not relevant for ECB mode. \n"
"* $cipher->encrypt($data)\n"
"\n"
"Encrypt data. The size of '$data' must be a multiple of 'blocksize' (16 "
"bytes), otherwise this function will croak. Apart from that, it can be of "
"(almost) any length. \n"
"* $cipher->decrypt($data)\n"
"\n"
"Decrypts '$data'."
msgstr ""

#. tumbleweed/perl-DBD-MariaDB/summary
#, fuzzy
msgid "MariaDB and MySQL driver for the Perl5 Database Interface (DBI)"
msgstr "Interface de bases de données Perl de Tim Bunce"

#. tumbleweed/perl-DBD-MariaDB/description
msgid ""
"*DBD::MariaDB* is the Perl5 Database Interface driver for MariaDB and MySQL "
"databases. In other words: DBD::MariaDB is an interface between the Perl "
"programming language and the MariaDB/MySQL programming API that comes with "
"the MariaDB/MySQL relational database management system. Most functions "
"provided by this programming API are supported. Some rarely used functions "
"are missing, mainly because no-one ever requested them."
msgstr ""

#. tumbleweed/perl-DBICx-Sugar/summary
msgid "Just some syntax sugar for DBIx::Class"
msgstr ""

#. tumbleweed/perl-DBICx-Sugar/description
msgid ""
"Just some syntax sugar for your DBIx::Class applications. This was "
"originally created to remove code duplication between Dancer::Plugin::DBIC "
"and Dancer2::Plugin::DBIC."
msgstr ""

#. tumbleweed/perl-DBIx-Class-Migration/summary
msgid "Use the best tools together for sane database migrations"
msgstr ""

#. tumbleweed/perl-DBIx-Class-Migration/description
msgid ""
"DBIx::Class::DeploymentHandler is a state of the art solution to the problem "
"of creating sane workflows for versioning DBIx::Class managed database "
"projects. However, since it is more of a toolkit for building custom "
"versioning and migration workflows than an expression of a particular "
"migration practice, it might not always be the most approachable tool. If "
"you are starting a new DBIx::Class project and you don't have a particular "
"custom workflow need, you might prefer to simply be given a reasonable clear "
"and standard practice, rather than a toolkit with a set of example scripts.\n"
"\n"
"DBIx::Class::Migration defines some logic which combines both DBIx::Class::"
"DeploymentHandler and DBIx::Class::Fixtures, along with a standard tutorial, "
"to give you a simple and straightforward approach to solving the problem of "
"how to best create database versions, migrations and testing data. "
"Additionally it builds on tools like Test::mysqld and Test::Postgresql58 "
"along with DBD::Sqlite in order to assist you in quickly creating a local "
"development database sandbox. It offers some integration points to testing "
"your database, via tools like Test::DBIx::Class in order to make testing "
"your database driven logic less painful. Lastly, we offer some thoughts on "
"good development patterns in using databases with application frameworks "
"like Catalyst.\n"
"\n"
"DBIx::Class::Migration offers code and advice based on my experience of "
"using DBIx::Class for several years, which hopefully can help you bootstrap "
"a new project. The solutions given should work for you if you want to use "
"DBIx::Class and have database migrations, but don't really know what to do "
"next. These solutions should scale upward from a small project to a medium "
"project involving many developers and more than one target environment (DEV\n"
"-> QA -> Production.) If you have very complex database versioning "
"requirements, huge teams and difficult architectual issues, you might be "
"better off building something on top of DBIx::Class::DeploymentHandler "
"directly.\n"
"\n"
"DBIx::Class::Migration is a base class upon which interfaces like DBIx::"
"Class::Migration::Script are built.\n"
"\n"
"Please see DBIx::Class::Migration::Tutorial for more approachable "
"documentation. If you want to read a high level feature overview, see DBIx::"
"Class::Migration::Features. The remainder of this POD is API level "
"documentation on the various internals."
msgstr ""

#. tumbleweed/perl-Dancer2/summary
msgid "Lightweight yet powerful web application framework"
msgstr ""

#. tumbleweed/perl-Dancer2/description
msgid ""
"Dancer2 is the new generation of Dancer, the lightweight web-framework for "
"Perl. Dancer2 is a complete rewrite based on Moo.\n"
"\n"
"Dancer2 can optionally use XS modules for speed, but at its core remains "
"fatpackable (packable by App::FatPacker) so you could easily deploy Dancer2 "
"applications on hosts that do not support custom CPAN modules.\n"
"\n"
"Dancer2 is easy and fun:\n"
"\n"
"    use Dancer2;     get '/' => sub { \"Hello World\" };     dance;\n"
"\n"
"This is the main module for the Dancer2 distribution. It contains logic for "
"creating a new Dancer2 application."
msgstr ""

#. tumbleweed/perl-Dancer2-Plugin-Auth-Extensible/summary
msgid "Extensible authentication framework for Dancer2 apps"
msgstr ""

#. tumbleweed/perl-Dancer2-Plugin-Auth-Extensible/description
msgid ""
"A user authentication and authorisation framework plugin for Dancer2 apps.\n"
"\n"
"Makes it easy to require a user to be logged in to access certain routes, "
"provides role-based access control, and supports various authentication "
"methods/sources (config file, database, Unix system users, etc).\n"
"\n"
"Designed to support multiple authentication realms and to be as extensible "
"as possible, and to make secure password handling easy. The base class for "
"auth providers makes handling 'RFC2307'-style hashed passwords really "
"simple, so you have no excuse for storing plain-text passwords. A simple "
"script called *dancer2-generate-crypted-password* to generate RFC2307-style "
"hashed passwords is included, or you can use Crypt::SaltedHash yourself to "
"do so, or use the 'slappasswd' utility if you have it installed."
msgstr ""

#. tumbleweed/perl-Dancer2-Plugin-Auth-Extensible-Provider-DBIC/summary
msgid "Authenticate via the Dancer2::Plugin::DBIC plugin"
msgstr ""

#. tumbleweed/perl-Dancer2-Plugin-Auth-Extensible-Provider-DBIC/description
msgid ""
"This class is an authentication provider designed to authenticate users "
"against a database, using Dancer2::Plugin::DBIC to access a database.\n"
"\n"
"See Dancer2::Plugin::DBIC for how to configure a database connection "
"appropriately; see the CONFIGURATION section below for how to configure this "
"authentication provider with database details.\n"
"\n"
"See Dancer2::Plugin::Auth::Extensible for details on how to use the "
"authentication framework."
msgstr ""

#. tumbleweed/perl-Dancer2-Plugin-DBIC/summary
msgid "DBIx::Class interface for Dancer2 applications"
msgstr ""

#. tumbleweed/perl-Dancer2-Plugin-DBIC/description
msgid ""
"This plugin makes it very easy to create Dancer2 applications that interface "
"with databases. It automatically exports the keyword 'schema' which returns "
"a DBIx::Class::Schema object. It also exports the keywords 'resultset' and "
"'rset'. You just need to configure your database connection information. For "
"performance, schema objects are cached in memory and are lazy loaded the "
"first time they are accessed.\n"
"\n"
"This plugin is a thin wrapper around DBICx::Sugar."
msgstr ""

#. tumbleweed/perl-Dancer2-Plugin-REST/summary
msgid "Plugin for writing RESTful apps with Dancer2"
msgstr ""

#. tumbleweed/perl-Dancer2-Plugin-REST/description
msgid "This plugin helps you write a RESTful webservice with Dancer2."
msgstr ""

#. tumbleweed/perl-Dancer2-Plugin-WebSocket/summary
#, fuzzy
msgid "Add a websocket interface to your Dancers app"
msgstr "Interface Perl vers Syslog"

#. tumbleweed/perl-Dancer2-Plugin-WebSocket/description
msgid ""
"'Dancer2::Plugin::WebSocket' provides an interface to Plack::App::WebSocket "
"and allows to interact with the webSocket connections within the Dancer "
"app.\n"
"\n"
"Plack::App::WebSocket, and thus this plugin, requires a plack server that "
"supports the psgi _streaming_, _nonblocking_ and _io_. Twiggy is the most "
"popular server fitting the bill."
msgstr ""

#. tumbleweed/perl-Data-Binary/summary
msgid "Simple detection of binary versus text in strings"
msgstr ""

#. tumbleweed/perl-Data-Binary/description
msgid ""
"This simple module provides string equivalents to the -T / -B operators. "
"Since these only work on file names and file handles, this module provides "
"the same functions but on strings.\n"
"\n"
"Note that the actual implementation is currently different, basically "
"because the -T / -B functions are in C/XS, and this module is written in "
"pure Perl. For now, anyway."
msgstr ""

#. tumbleweed/perl-Data-Compare/summary
msgid "Compare perl data structures"
msgstr ""

#. tumbleweed/perl-Data-Compare/description
msgid ""
"Compare two perl data structures recursively. Returns 0 if the structures "
"differ, else returns 1.\n"
"\n"
"A few data types are treated as special cases: \n"
"* Scalar::Properties objects\n"
"\n"
"This has been moved into a plugin, although functionality remains the same "
"as with the previous version. Full documentation is in Data::Compare::"
"Plugins::Scalar::Properties. \n"
"* Compiled regular expressions, eg qr/foo/\n"
"\n"
"These are stringified before comparison, so the following will match:\n"
"\n"
"    $r = qr/abc/i;     $s = qr/abc/i;     Compare($r, $s);\n"
"\n"
"and the following won't, despite them matching *exactly* the same text:\n"
"\n"
"    $r = qr/abc/i;     $s = qr/[aA][bB][cC]/;     Compare($r, $s);\n"
"\n"
"Sorry, that's the best we can do. \n"
"* CODE and GLOB references\n"
"\n"
"These are assumed not to match unless the references are identical - ie, "
"both are references to the same thing.\n"
"\n"
"You may also customise how we compare structures by supplying options in a "
"hashref as a third parameter to the 'Compare()' function. This is not yet "
"available through the OO-ish interface. These options will be in force for "
"the *whole* of your comparison, so will apply to structures that are lurking "
"deep down in your data as well as at the top level, so beware! \n"
"* ignore_hash_keys\n"
"\n"
"an arrayref of strings. When comparing two hashes, any keys mentioned in "
"this list will be ignored."
msgstr ""

#. tumbleweed/perl-Data-Dump/description
msgid ""
"This module provides a few functions that traverse their argument list and "
"return a string containing Perl code that, when 'eval'ed, produces a deep "
"copy of the original arguments.\n"
"\n"
"The main feature of the module is that it strives to produce output that is "
"easy to read. Example:\n"
"\n"
"    @a = (1, [2, 3], {4 => 5});     dump(@a);\n"
"\n"
"Produces:\n"
"\n"
"    \"(1, [2, 3], { 4 => 5 })\"\n"
"\n"
"If you dump just a little data, it is output on a single line. If you dump "
"data that is more complex or there is a lot of it, line breaks are "
"automatically added to keep it easy to read."
msgstr ""

#. tumbleweed/perl-Date-Manip/description
msgid ""
"Date::Manip is a series of modules designed to make any common date/time "
"operation easy to do. Operations such as comparing two times, determining a "
"date a given amount of time from another, or parsing international times are "
"all easily done. It deals with time as it is used in the Gregorian calendar "
"(the one currently in use) with full support for time changes due to "
"daylight saving time.\n"
"\n"
"From the very beginning, the main focus of Date::Manip has been to be able "
"to do ANY desired date/time operation easily. Many other modules exist which "
"may do a subset of these operations quicker or more efficiently, but no "
"other module can do all of the operations available in Date::Manip.\n"
"\n"
"Date::Manip has functionality to work with several fundamental types of "
"data. \n"
"* *dates*\n"
"\n"
"The word date is used extensively here and is somewhat misleading. In Date::"
"Manip, a date consists of three pieces of information: a calendar date "
"(year, month, day), a time of day (hour, minute, second), and time zone "
"information. Calendar dates and times are fully handled. Time zones are "
"handled as well, but depending on how you use Date::Manip, there may be some "
"limitations as discussed below. \n"
"* *delta*\n"
"\n"
"A delta is an amount of time (i.e. the amount of time between two different "
"dates). Think of it as the duration of an event or the amount of time "
"between two dates.\n"
"\n"
"A delta refers only to an amount of time. It includes no information about a "
"starting or ending date/time. Most people will think of a delta as an amount "
"of time, but the term 'time' is already used so much in this module that I "
"didn't want to use it here in order to avoid confusion. \n"
"* *recurrence*\n"
"\n"
"A recurring event is something which occurs on a regular recurring basis. \n"
"* *holidays* and *events*\n"
"\n"
"Holidays and events are basically named dates or recurrences.\n"
"\n"
"Among other things, Date::Manip allow you to: \n"
"* ***\n"
"\n"
"Enter a date in practically any format you choose. \n"
"* ***\n"
"\n"
"Compare two dates, entered in widely different formats to determine which is "
"earlier. \n"
"* ***\n"
"\n"
"Extract any information you want from a date using a format string similar "
"to the Unix date command. \n"
"* ***\n"
"\n"
"Determine the amount of time between two dates, or add an amount of time (a "
"delta) to a date to get a second date. \n"
"* ***\n"
"\n"
"Work with dates using international formats (foreign month names, 12/10/95 "
"referring to October rather than December, etc.). \n"
"* ***\n"
"\n"
"Convert dates from one timezone to another. \n"
"* ***\n"
"\n"
"To find a list of dates where a recurring event happens.\n"
"\n"
"Each of these tasks is trivial (one or two lines at most) with this package."
msgstr ""

#. tumbleweed/perl-Date-Range/summary
msgid "Work with a range of dates"
msgstr ""

#. tumbleweed/perl-Date-Range/description
msgid ""
"Quite often, when dealing with dates, we don't just want to know information "
"about one particular date, but about a range of dates. For example, we may "
"wish to know whether a given date is in a particular range, or what the "
"overlap is between one range and another. This module lets you ask such "
"questions."
msgstr ""

#. tumbleweed/perl-DateTime/summary
msgid "Date and time object for Perl"
msgstr ""

#. tumbleweed/perl-DateTime/description
msgid ""
"DateTime is a class for the representation of date/time combinations, and is "
"part of the Perl DateTime project.\n"
"\n"
"It represents the Gregorian calendar, extended backwards in time before its "
"creation (in 1582). This is sometimes known as the \"proleptic Gregorian "
"calendar\". In this calendar, the first day of the calendar (the epoch), is "
"the first day of year 1, which corresponds to the date which was "
"(incorrectly) believed to be the birth of Jesus Christ.\n"
"\n"
"The calendar represented does have a year 0, and in that way differs from "
"how dates are often written using \"BCE/CE\" or \"BC/AD\".\n"
"\n"
"For infinite datetimes, please see the DateTime::Infinite module."
msgstr ""

#. tumbleweed/perl-DateTime-Format-Builder/summary
msgid "Create DateTime parser classes and objects"
msgstr ""

#. tumbleweed/perl-DateTime-Format-Builder/description
msgid ""
"DateTime::Format::Builder creates DateTime parsers. Many string formats of "
"dates and times are simple and just require a basic regular expression to "
"extract the relevant information. Builder provides a simple way to do this "
"without writing reams of structural code.\n"
"\n"
"Builder provides a number of methods, most of which you'll never need, or at "
"least rarely need. They're provided more for exposing of the module's "
"innards to any subclasses, or for when you need to do something slightly "
"beyond what I expected."
msgstr ""

#. tumbleweed/perl-DateTime-Format-Natural/summary
msgid "Parse informal natural language date/time strings"
msgstr ""

#. tumbleweed/perl-DateTime-Format-Natural/description
msgid ""
"'DateTime::Format::Natural' parses informal natural language date/time "
"strings. In addition, parsable date/time substrings may be extracted from "
"ordinary strings."
msgstr ""

#. tumbleweed/perl-DateTime-Locale/description
msgid ""
"DateTime::Locale is primarily a factory for the various locale subclasses. "
"It also provides some functions for getting information on all the available "
"locales.\n"
"\n"
"If you want to know what methods are available for locale objects, then "
"please read the DateTime::Locale::FromData documentation."
msgstr ""

#. tumbleweed/perl-Devel-CheckLib/summary
msgid "Check that a library is available"
msgstr ""

#. tumbleweed/perl-Devel-Declare/summary
msgid "(DEPRECATED) Adding keywords to perl, in perl"
msgstr ""

#. tumbleweed/perl-Devel-OverloadInfo/summary
msgid "Introspect overloaded operators"
msgstr ""

#. tumbleweed/perl-Digest-HMAC/description
msgid ""
"HMAC is used for message integrity checks between two parties that share a "
"secret key, and works in combination with some other Digest algorithm, "
"usually MD5 or SHA-1. The HMAC mechanism is described in RFC 2104.\n"
"\n"
"HMAC follow the common 'Digest::' interface, but the constructor takes the "
"secret key and the name of some other simple 'Digest::' as argument.\n"
"\n"
"The hmac() and hmac_hex() functions and the Digest::HMAC->new() constructor "
"takes an optional $blocksize argument as well. The HMAC algorithm assumes "
"the digester to hash by iterating a basic compression function on blocks of "
"data and the $blocksize should match the byte-length of such blocks.\n"
"\n"
"The default $blocksize is 64 which is suitable for the MD5 and SHA-1 digest "
"functions. For stronger algorithms the blocksize probably needs to be "
"increased."
msgstr ""

#. tumbleweed/perl-Digest-SHA3/summary
#, fuzzy
msgid "Perl extension for SHA-3"
msgstr "Interface Perl pour objets URI"

#. tumbleweed/perl-Digest-SHA3/description
msgid ""
"Digest::SHA3 is written in C for speed. If your platform lacks a C compiler, "
"perhaps you can find the module in a binary form compatible with your "
"particular processor and operating system.\n"
"\n"
"The programming interface is easy to use: it's the same one found in CPAN's "
"Digest module. So, if your applications currently use Digest::SHA and you'd "
"prefer the newer flavor of the NIST standard, it's a simple matter to "
"convert them.\n"
"\n"
"The interface provides two ways to calculate digests: all-at-once, or in "
"stages. To illustrate, the following short program computes the SHA3-256 "
"digest of \"hello world\" using each approach:\n"
"\n"
"\tuse Digest::SHA3 qw(sha3_256_hex);\n"
"\n"
"\t$data = \"hello world\"; \t@frags = split(//, $data);\n"
"\n"
"\t \t$digest1 = sha3_256_hex($data);\n"
"\n"
"\t \t$state = Digest::SHA3->new(256); \tfor (@frags) { $state->add($_) } \t"
"$digest2 = $state->hexdigest;\n"
"\n"
"\tprint $digest1 eq $digest2 ? \t\t\"that's the ticket!\\n\" : \"oops!\\n"
"\";\n"
"\n"
"To calculate the digest of an n-bit message where _n_ is not a multiple of "
"8, use the _add_bits()_ method. For example, consider the 446-bit message "
"consisting of the bit-string \"110\" repeated 148 times, followed by \"11\". "
"Here's how to display its SHA3-512 digest:\n"
"\n"
"\tuse Digest::SHA3; \t$bits = \"110\" x 148 . \"11\"; \t$sha3 = Digest::SHA3-"
">new(512)->add_bits($bits); \tprint $sha3->hexdigest, \"\\n\";\n"
"\n"
"Note that for larger bit-strings, it's more efficient to use the two-"
"argument version _add_bits($data, $nbits)_, where _$data_ is in the "
"customary packed binary format used for Perl strings."
msgstr ""

#. tumbleweed/perl-Dist-Zilla/summary
msgid "Distribution builder; installer not included!"
msgstr ""

#. tumbleweed/perl-Encode-JIS2K/description
msgid ""
"This module implements encodings that covers JIS X 0213 charset (AKA JIS "
"2000, hence the module name)."
msgstr ""

#. tumbleweed/perl-Exception-Class/summary
msgid "Module that allows you to declare real exception classes in Perl"
msgstr ""

#. tumbleweed/perl-Exporter-Tiny/summary
msgid ""
"An exporter with the features of Sub::Exporter but only core dependencies"
msgstr ""

#. tumbleweed/perl-ExtUtils-CppGuess/summary
msgid "Guess C++ compiler and flags"
msgstr ""

#. tumbleweed/perl-ExtUtils-InstallPaths/description
msgid ""
"This module tries to make install path resolution as easy as possible.\n"
"\n"
"When you want to install a module, it needs to figure out where to install "
"things. The nutshell version of how this works is that default installation "
"locations are determined from ExtUtils::Config, and they may be individually "
"overridden by using the 'install_path' attribute. An 'install_base' "
"attribute lets you specify an alternative installation root like _/home/foo_ "
"and 'prefix' does something similar in a rather different (and more "
"complicated) way. 'destdir' lets you specify a temporary installation "
"directory like _/tmp/install_ in case you want to create bundled-up "
"installable packages.\n"
"\n"
"The following types are supported by default. \n"
"* * lib\n"
"\n"
"Usually pure-Perl module files ending in _.pm_ or _.pod_. \n"
"* * arch\n"
"\n"
"\"Architecture-dependent\" module files, usually produced by compiling XS, "
"Inline, or similar code. \n"
"* * script\n"
"\n"
"Programs written in pure Perl. In order to improve reuse, you may want to "
"make these as small as possible - put the code into modules whenever "
"possible. \n"
"* * bin\n"
"\n"
"\"Architecture-dependent\" executable programs, i.e. compiled C code or "
"something. Pretty rare to see this in a perl distribution, but it happens. \n"
"* * bindoc\n"
"\n"
"Documentation for the stuff in 'script' and 'bin'. Usually generated from "
"the POD in those files. Under Unix, these are manual pages belonging to the "
"'man1' category. Unless explicitly set, this is only available on platforms "
"supporting manpages. \n"
"* * libdoc\n"
"\n"
"Documentation for the stuff in 'lib' and 'arch'. This is usually generated "
"from the POD in _.pm_ and _.pod_ files. Under Unix, these are manual pages "
"belonging to the 'man3' category. Unless explicitly set, this is only "
"available on platforms supporting manpages. \n"
"* * binhtml\n"
"\n"
"This is the same as 'bindoc' above, but applies to HTML documents. Unless "
"explicitly set, this is only available when perl was configured to do so. \n"
"* * libhtml\n"
"\n"
"This is the same as 'libdoc' above, but applies to HTML documents. Unless "
"explicitly set, this is only available when perl was configured to do so."
msgstr ""

#. tumbleweed/perl-File-Find-Object/summary
msgid "An object oriented File::Find replacement"
msgstr ""

#. tumbleweed/perl-File-Find-Object/description
msgid ""
"File::Find::Object does the same job as File::Find but works like an object "
"and with an iterator. As File::Find is not object oriented, one cannot "
"perform multiple searches in the same application. The second problem of "
"File::Find is its file processing: after starting its main loop, one cannot "
"easily wait for another event and so get the next result.\n"
"\n"
"With File::Find::Object you can get the next file by calling the next() "
"function, but setting a callback is still possible."
msgstr ""

#. tumbleweed/perl-File-HomeDir/description
msgid ""
"*File::HomeDir* is a module for locating the directories that are \"owned\" "
"by a user (typically your user) and to solve the various issues that arise "
"trying to find them consistently across a wide variety of platforms.\n"
"\n"
"The end result is a single API that can find your resources on any platform, "
"making it relatively trivial to create Perl software that works elegantly "
"and correctly no matter where you run it."
msgstr ""

#. tumbleweed/perl-File-Listing/summary
msgid "Parse directory listing"
msgstr ""

#. tumbleweed/perl-File-Listing/description
msgid ""
"This module exports a single function called 'parse_dir', which can be used "
"to parse directory listings."
msgstr ""

#. tumbleweed/perl-File-Rename/summary
#, fuzzy
msgid "Perl extension for renaming multiple files"
msgstr "Interface Perl pour objets URI"

#. tumbleweed/perl-File-Rename/description
msgid ""
"* 'rename( FILES, CODE [, VERBOSE])'\n"
"\n"
"rename FILES using CODE, if FILES is empty read list of files from stdin \n"
"* 'rename_files( CODE, VERBOSE, FILES)'\n"
"\n"
"rename FILES using CODE \n"
"* 'rename_list( CODE, VERBOSE, HANDLE [, FILENAME])'\n"
"\n"
"rename a list of file read from HANDLE, using CODE"
msgstr ""

#. tumbleweed/perl-File-Share/summary
msgid "Extend File::ShareDir to Local Libraries"
msgstr ""

#. tumbleweed/perl-File-Share/description
msgid ""
"This module is a dropin replacement for the File::ShareDir manpage. It "
"supports the 'dist_dir' and 'dist_file' functions, except these functions "
"have been enhanced to understand when the developer's local './share/' "
"directory should be used.\n"
"\n"
"NOTE: module_dist and module_file are not yet supported, because (afaik) "
"there is no well known way to populate per-module share files. This may "
"change in the future. Please contact me if you know how to do this."
msgstr ""

#. tumbleweed/perl-File-Slurp/summary
#, fuzzy
msgid "Perl module for reading/writing/modifying complete files"
msgstr "Interface Perl pour objets URI"

#. tumbleweed/perl-File-Slurp/description
msgid ""
"This module provides subs that allow you to read or write entire files with "
"one simple call. They are designed to be simple to use, have flexible ways "
"to pass in or get the file contents and to be very efficient. There is also "
"a sub to read in all the files in a directory."
msgstr ""

#. tumbleweed/perl-File-Slurper/summary
msgid "Simple, sane and efficient module to slurp a file"
msgstr ""

#. tumbleweed/perl-File-Temp/description
msgid ""
"'File::Temp' can be used to create and open temporary files in a safe way. "
"There is both a function interface and an object-oriented interface. The "
"File::Temp constructor or the tempfile() function can be used to return the "
"name and the open filehandle of a temporary file. The tempdir() function can "
"be used to create a temporary directory.\n"
"\n"
"The security aspect of temporary file creation is emphasized such that a "
"filehandle and filename are returned together. This helps guarantee that a "
"race condition can not occur where the temporary file is created by another "
"process between checking for the existence of the file and its opening. "
"Additional security levels are provided to check, for example, that the "
"sticky bit is set on world writable directories. See \"safe_level\" for more "
"information.\n"
"\n"
"For compatibility with popular C library functions, Perl implementations of "
"the mkstemp() family of functions are provided. These are, mkstemp(), "
"mkstemps(), mkdtemp() and mktemp().\n"
"\n"
"Additionally, implementations of the standard POSIX tmpnam() and tmpfile() "
"functions are provided if required.\n"
"\n"
"Implementations of mktemp(), tmpnam(), and tempnam() are provided, but "
"should be used with caution since they return only a filename that was valid "
"when function was called, so cannot guarantee that the file will not exist "
"by the time the caller opens the filename.\n"
"\n"
"Filehandles returned by these functions support the seekable methods."
msgstr ""

#. tumbleweed/perl-File-Touch/summary
msgid ""
"Update file access and modification times, optionally creating files if "
"needed"
msgstr ""

#. tumbleweed/perl-File-Touch/description
msgid ""
"This module provides both a functional and OO interface for changing the "
"file access and modification times on files. It can optionally create the "
"file for you, if it doesn't exist. \n"
"*Note*: you should specify a minimum version of 0.12, as per the SYNOPSIS, "
"as that fixed an issue that affected systems that have sub-second "
"granularity on those file times.\n"
"\n"
"Here's a list of arguments that can be used with the object-oriented "
"contruction: \n"
"* atime_only => [0|1]\n"
"\n"
"If nonzero, change only the access time of files. Default is zero. \n"
"* mtime_only => [0|1]\n"
"\n"
"If nonzero, change only the modification time of files. Default is zero. \n"
"* no_create => [0|1]\n"
"\n"
"If nonzero, do not create new files. Default is zero. \n"
"* reference => $reference_file\n"
"\n"
"If defined, use timestamps from this file instead of current time. The "
"timestamps are read from the reference file when the object is created, not "
"when '<-'touch>> is invoked. Default is undefined. \n"
"* time => $time\n"
"\n"
"If defined, then this value will be used for both access time and "
"modification time, whichever of those are set. This time is overridden by "
"the 'atime' and 'mtime' arguments, if you use them. \n"
"* atime => $time\n"
"\n"
"If defined, use this time (in epoch seconds) instead of current time for "
"access time. \n"
"* mtime => $time\n"
"\n"
"If defined, use this time (in epoch seconds) instead of current time for "
"modification time."
msgstr ""

#. tumbleweed/perl-File-TreeCreate/summary
#, fuzzy
msgid "Recursively create a directory tree"
msgstr "Examine et optimise les interfaces réseau Ethernet"

#. tumbleweed/perl-File-TreeCreate/description
msgid ""
"This module was extracted from several near-identical copies used in the "
"tests of some of my CPAN distributions."
msgstr ""

#. tumbleweed/perl-Finance-Quote/description
msgid ""
"This module gets stock quotes from various internet sources all over the "
"world. Quotes are obtained by constructing a quoter object and using the "
"fetch method to gather data, which is returned as a two-dimensional hash (or "
"a reference to such a hash, if called in a scalar context). For example:\n"
"\n"
"    $q = Finance::Quote->new;     %info = $q->fetch(\"australia\", \"CML"
"\");     print \"The price of CML is \".$info{\"CML\", \"price\"};\n"
"\n"
"The first part of the hash (eg, \"CML\") is referred to as the stock. The "
"second part (in this case, \"price\") is referred to as the label."
msgstr ""

#. tumbleweed/perl-Font-AFM/description
msgid ""
"This module implements the Font::AFM class. Objects of this class are "
"initialized from an AFM file and allow you to obtain information about the "
"font and the metrics of the various glyphs in the font."
msgstr ""

#. tumbleweed/perl-Geo-IP2Location/summary
msgid ""
"Lookup of country, region, city, latitude, longitude, ZIP code, time zon[cut]"
msgstr ""

#. tumbleweed/perl-Geo-IP2Location/description
msgid ""
"This Perl module provides fast lookup of country, region, city, latitude, "
"longitude, ZIP code, time zone, ISP, domain name, connection type, IDD code, "
"area code, weather station code and station, MCC, MNC, mobile carrier brand, "
"elevation, usage type, IP address type and IAB advertising category from IP "
"address using IP2Location database. This module uses a file based BIN "
"database available at at https://www.ip2location.com/database/ip2location "
"upon subscription. You can visit at https://www.ip2location.com/development-"
"libraries to download BIN sample files. This database consists of IP address "
"as keys and other information as values. It supports all IP addresses in "
"IPv4 and IPv6.\n"
"\n"
"This module can be used in many types of project such as:\n"
"\n"
" 1) auto-select the geographically closest mirror server  2) analyze web "
"server logs to determine the countries of visitors  3) credit card fraud "
"detection  4) software export controls  5) display native language and "
"currency  6) prevent password sharing and abuse of service  7) geotargeting "
"in advertisement"
msgstr ""

#. tumbleweed/perl-Git-Repository/summary
#, fuzzy
msgid "Perl interface to Git repositories"
msgstr "Interface Perl vers DNS Resolver"

#. tumbleweed/perl-Git-Repository/description
msgid ""
"Git::Repository is a Perl interface to Git, for scripted interactions with "
"repositories. It's a low-level interface that allows calling any Git "
"command, whether _porcelain_ or _plumbing_, including bidirectional commands "
"such as 'git commit-tree'.\n"
"\n"
"A Git::Repository object simply provides context to the git commands being "
"run. It is possible to call the 'command()' and 'run()' methods against the "
"class itself, and the context (typically _current working directory_) will "
"be obtained from the options and environment.\n"
"\n"
"As a low-level interface, it provides no sugar for particular Git commands. "
"Specifically, it will not prepare environment variables that individual Git "
"commands may need or use.\n"
"\n"
"However, the 'GIT_DIR' and 'GIT_WORK_TREE' environment variables are "
"special: if the command is run in the context of a Git::Repository object, "
"they will be overridden by the object's 'git_dir' and 'work_tree' "
"attributes, respectively. It is still possible to override them if "
"necessary, using the 'env' option.\n"
"\n"
"Git::Repository requires at least Git 1.5.0, and is expected to support any "
"later version.\n"
"\n"
"See Git::Repository::Tutorial for more code examples."
msgstr ""

#. tumbleweed/perl-Git-Repository-Plugin-Log/summary
msgid "Add a log() method to Git::Repository"
msgstr ""

#. tumbleweed/perl-Git-Repository-Plugin-Log/description
msgid "This module adds a new method to Git::Repository."
msgstr ""

#. tumbleweed/perl-GooCanvas2/summary
msgid "Perl binding for GooCanvas2 widget using Glib::Object::Introspection"
msgstr ""

#. tumbleweed/perl-GooCanvas2/description
msgid ""
"GooCanvas2 is a new canvas widget for use with Gtk3 that uses the Cairo 2d "
"library for drawing. This is a simple and basic implementation of this "
"wonderful Canvas widget.\n"
"\n"
"For more informations see https://wiki.gnome.org/action/show/Projects/"
"GooCanvas\n"
"\n"
"For instructions, how to use GooCanvas2, please study the API reference at "
"https://developer.gnome.org/goocanvas/unstable/ for now. A perl-specific "
"documentation will perhaps come in later versions. But applying the C "
"documentation should be no problem."
msgstr ""

#. tumbleweed/perl-Graph/summary
msgid "Graph data structures and algorithms"
msgstr ""

#. tumbleweed/perl-Gtk3-ImageView/summary
msgid "Image viewer widget for Gtk3"
msgstr ""

#. tumbleweed/perl-Gtk3-ImageView/description
msgid ""
"The Gtk3::ImageView widget allows the user to zoom, pan and select the "
"specified image and provides hooks to allow additional tools, e.g. painter, "
"to be created and used.\n"
"\n"
"Gtk3::ImageView is a Gtk3 port of Gtk2::ImageView.\n"
"\n"
"To discuss Gtk3::ImageView or gtk3-perl, ask questions and flame/praise the "
"authors, join gtk-perl-list@gnome.org at lists.gnome.org."
msgstr ""

#. tumbleweed/perl-Gtk3-SimpleList/summary
#, fuzzy
msgid "Simple interface to Gtk3's complex MVC list widget"
msgstr "Interface à sélectionner lors du démarrage :"

#. tumbleweed/perl-Gtk3-SimpleList/description
msgid ""
"Gtk3 has a powerful, but complex MVC (Model, View, Controller) system used "
"to implement list and tree widgets. Gtk3::SimpleList automates the complex "
"setup work and allows you to treat the list model as a more natural list of "
"lists structure.\n"
"\n"
"After creating a new Gtk3::SimpleList object with the desired columns you "
"may set the list data with a simple Perl array assignment. Rows may be added "
"or deleted with all of the normal array operations. You can treat the 'data' "
"member of the list simplelist object as an array reference, and manipulate "
"the list data with perl's normal array operators.\n"
"\n"
"A mechanism has also been put into place allowing columns to be Perl "
"scalars. The scalar is converted to text through Perl's normal mechanisms "
"and then displayed in the list. This same mechanism can be expanded by "
"defining arbitrary new column types before calling the new function."
msgstr ""

#. tumbleweed/perl-HTML-Form/description
msgid ""
"Objects of the 'HTML::Form' class represents a single HTML '<form> ... </"
"form>' instance. A form consists of a sequence of inputs that usually have "
"names, and which can take on various values. The state of a form can be "
"tweaked and it can then be asked to provide HTTP::Request objects that can "
"be passed to the request() method of LWP::UserAgent."
msgstr ""

#. tumbleweed/perl-HTML-FromANSI-Tiny/summary
msgid "Easily convert colored command line output to HTML"
msgstr ""

#. tumbleweed/perl-HTML-FromANSI-Tiny/description
msgid ""
"Convert the output from a terminal command that is decorated with ANSI "
"escape sequences into customizable HTML (with a small amount of code).\n"
"\n"
"This module complements Parse::ANSIColor::Tiny by providing a simple HTML "
"markup around its output.\n"
"\n"
"Parse::ANSIColor::Tiny returns a data structure that's easy to reformat into "
"any desired output. Reformatting to HTML seemed simple and common enough to "
"warrant this module as well."
msgstr ""

#. tumbleweed/perl-HTML-Restrict/summary
msgid "Strip unwanted HTML tags and attributes"
msgstr ""

#. tumbleweed/perl-HTML-Restrict/description
msgid ""
"This module uses HTML::Parser to strip HTML from text in a restrictive "
"manner. By default all HTML is restricted. You may alter the default "
"behaviour by supplying your own tag rules."
msgstr ""

#. tumbleweed/perl-HTML-Selector-XPath/summary
msgid "CSS Selector to XPath compiler"
msgstr ""

#. tumbleweed/perl-HTML-Selector-XPath/description
msgid ""
"HTML::Selector::XPath is a utility function to compile full set of CSS2 and "
"partial CSS3 selectors to the equivalent XPath expression."
msgstr ""

#. tumbleweed/perl-HTML-TreeBuilder-XPath/summary
msgid "Add XPath support to HTML::TreeBuilder"
msgstr ""

#. tumbleweed/perl-HTML-TreeBuilder-XPath/description
msgid ""
"This module adds typical XPath methods to HTML::TreeBuilder, to make it easy "
"to query a document."
msgstr ""

#. tumbleweed/perl-HTTP-BrowserDetect/summary
msgid ""
"Determine Web browser, version, and platform from an HTTP user agent string"
msgstr ""

#. tumbleweed/perl-HTTP-BrowserDetect/description
msgid ""
"The HTTP::BrowserDetect object does a number of tests on an HTTP user agent "
"string. The results of these tests are available via methods of the object.\n"
"\n"
"For an online demonstration of this module's parsing, you can check out "
"http://www.browserdetect.org/\n"
"\n"
"This module was originally based upon the JavaScript browser detection code "
"available at http://www.mozilla.org/docs/web-developer/sniffer/browser_type."
"html."
msgstr ""

#. tumbleweed/perl-HTTP-CookieJar/summary
msgid "Minimalist HTTP user agent cookie jar"
msgstr ""

#. tumbleweed/perl-HTTP-CookieJar/description
msgid ""
"This module implements a minimalist HTTP user agent cookie jar in "
"conformance with at http://tools.ietf.org/html/rfc6265.\n"
"\n"
"Unlike the commonly used HTTP::Cookies module, this module does not require "
"use of HTTP::Request and HTTP::Response objects. An LWP-compatible adapter "
"is available as HTTP::CookieJar::LWP."
msgstr ""

#. tumbleweed/perl-HTTP-CookieMonster/summary
msgid "Easy read/write access to your jar of HTTP::Cookies"
msgstr ""

#. tumbleweed/perl-HTTP-CookieMonster/description
msgid ""
"This module was created because messing around with HTTP::Cookies is non-"
"trivial. HTTP::Cookies a very useful module, but using it is not always as "
"easy and clean as it could be. For instance, if you want to find a "
"particular cookie, you can't just ask for it by name."
msgstr ""

#. tumbleweed/perl-HTTP-Cookies/description
msgid ""
"This class is for objects that represent a \"cookie jar\" -- that is, a "
"database of all the HTTP cookies that a given LWP::UserAgent object knows "
"about.\n"
"\n"
"Cookies are a general mechanism which server side connections can use to "
"both store and retrieve information on the client side of the connection. "
"For more information about cookies refer to at http://curl.haxx.se/rfc/"
"cookie_spec.html and at http://www.cookiecentral.com. This module also "
"implements the new style cookies described in at https://tools.ietf.org/html/"
"rfc2965. The two variants of cookies are supposed to be able to coexist "
"happily.\n"
"\n"
"Instances of the class _HTTP::Cookies_ are able to store a collection of Set-"
"Cookie2: and Set-Cookie: headers and are able to use this information to "
"initialize Cookie-headers in _HTTP::Request_ objects. The state of a _HTTP::"
"Cookies_ object can be saved in and restored from files."
msgstr ""

#. tumbleweed/perl-HTTP-Daemon/summary
#, fuzzy
msgid "Simple http server class"
msgstr "Serveur Web simple"

#. tumbleweed/perl-HTTP-Daemon/description
msgid ""
"Instances of the 'HTTP::Daemon' class are HTTP/1.1 servers that listen on a "
"socket for incoming requests. The 'HTTP::Daemon' is a subclass of 'IO::"
"Socket::IP', so you can perform socket operations directly on it too.\n"
"\n"
"Please note that 'HTTP::Daemon' used to be a subclass of 'IO::Socket::INET'. "
"To support IPv6, it switched the parent class to 'IO::Socket::IP' at version "
"6.05. See IPv6 SUPPORT for details.\n"
"\n"
"The accept() method will return when a connection from a client is "
"available. The returned value will be an 'HTTP::Daemon::ClientConn' object "
"which is another 'IO::Socket::IP' subclass. Calling the get_request() method "
"on this object will read data from the client and return an 'HTTP::Request' "
"object. The ClientConn object also provide methods to send back various "
"responses."
msgstr ""

#. tumbleweed/perl-HTTP-Date/summary
#, fuzzy
msgid "HTTP::Date - date conversion routines"
msgstr "Routines de manipulation de dates"

#. tumbleweed/perl-HTTP-Date/description
msgid ""
"This module provides functions that deal the date formats used by the HTTP "
"protocol (and then some more). Only the first two functions, time2str() and "
"str2time(), are exported by default. \n"
"* time2str( [$time] )\n"
"\n"
"The time2str() function converts a machine time (seconds since epoch) to a "
"string. If the function is called without an argument or with an undefined "
"argument, it will use the current time.\n"
"\n"
"The string returned is in the format preferred for the HTTP protocol. This "
"is a fixed length subset of the format defined by RFC 1123, represented in "
"Universal Time (GMT). An example of a time stamp in this format is:\n"
"\n"
"   Sun, 06 Nov 1994 08:49:37 GMT \n"
"* str2time( $str [, $zone] )\n"
"\n"
"The str2time() function converts a string to machine time. It returns "
"'undef' if the format of $str is unrecognized, otherwise whatever the 'Time::"
"Local' functions can make out of the parsed time. Dates before the system's "
"epoch may not work on all operating systems. The time formats recognized are "
"the same as for parse_date().\n"
"\n"
"The function also takes an optional second argument that specifies the "
"default time zone to use when converting the date. This parameter is ignored "
"if the zone is found in the date string itself. If this parameter is "
"missing, and the date string format does not contain any zone specification, "
"then the local time zone is assumed.\n"
"\n"
"If the zone is not \"'GMT'\" or numerical (like \"'-0800'\" or \"'+0100'\"), "
"then the 'Time::Zone' module must be installed in order to get the date "
"recognized. \n"
"* parse_date( $str )\n"
"\n"
"This function will try to parse a date string, and then return it as a list "
"of numerical values followed by a (possible undefined) time zone specifier; "
"($year, $month, $day, $hour, $min, $sec, $tz). The $year will be the full 4-"
"digit year, and $month numbers start with 1 (for January).\n"
"\n"
"In scalar context the numbers are interpolated in a string of the \"YYYY-MM-"
"DD hh:mm:ss TZ\"-format and returned.\n"
"\n"
"If the date is unrecognized, then the empty list is returned ('undef' in "
"scalar context).\n"
"\n"
"The function is able to parse the following formats:\n"
"\n"
" \"Wed, 09 Feb 1994 22:23:32 GMT\"       -- HTTP format  \"Thu Feb  3 "
"17:03:55 GMT 1994\"        -- ctime(3) format  \"Thu Feb  3 00:00:00 "
"1994\",           -- ANSI C asctime() format  \"Tuesday, 08-Feb-94 14:15:29 "
"GMT\"     -- old rfc850 HTTP format  \"Tuesday, 08-Feb-1994 14:15:29 GMT\"   "
"-- broken rfc850 HTTP format\n"
"\n"
" \"03/Feb/1994:17:03:55 -0700\"   -- common logfile format  \"09 Feb 1994 "
"22:23:32 GMT\"     -- HTTP format (no weekday)  \"08-Feb-94 14:15:29 GMT"
"\"       -- rfc850 format (no weekday)  \"08-Feb-1994 14:15:29 GMT\"     -- "
"broken rfc850 format (no weekday)\n"
"\n"
" \"1994-02-03 14:15:29 -0100\"    -- ISO 8601 format  \"1994-02-03 "
"14:15:29\"          -- zone is optional  \"1994-02-03\"                   -- "
"only date  \"1994-02-03T14:15:29\"          -- Use T as separator  "
"\"19940203T141529Z\"             -- ISO 8601 compact format  "
"\"19940203\"                     -- only date\n"
"\n"
" \"08-Feb-94\"         -- old rfc850 HTTP format    (no weekday, no time)  "
"\"08-Feb-1994\"       -- broken rfc850 HTTP format (no weekday, no time)  "
"\"09 Feb 1994\"       -- proposed new HTTP format  (no weekday, no time)  "
"\"03/Feb/1994\"       -- common logfile format     (no time, no offset)\n"
"\n"
" \"Feb  3  1994\"      -- Unix 'ls -l' format  \"Feb  3 17:03\"      -- Unix "
"'ls -l' format\n"
"\n"
" \"11-15-96  03:52PM\" -- Windows 'dir' format\n"
"\n"
"The parser ignores leading and trailing whitespace. It also allow the "
"seconds to be missing and the month to be numerical in most formats.\n"
"\n"
"If the year is missing, then we assume that the date is the first matching "
"date _before_ current month. If the year is given with only 2 digits, then "
"parse_date() will select the century that makes the year closest to the "
"current date. \n"
"* time2iso( [$time] )\n"
"\n"
"Same as time2str(), but returns a \"YYYY-MM-DD hh:mm:ss\"-formatted string "
"representing time in the local time zone. \n"
"* time2isoz( [$time] )\n"
"\n"
"Same as time2str(), but returns a \"YYYY-MM-DD hh:mm:ssZ\"-formatted string "
"representing Universal Time."
msgstr ""

#. tumbleweed/perl-HTTP-Headers-Fast/summary
#, fuzzy
msgid "Faster implementation of HTTP::Headers"
msgstr "Une implémentation portable de MPI"

#. tumbleweed/perl-HTTP-Message/description
msgid ""
"An 'HTTP::Message' object contains some headers and a content body. The "
"following methods are available: \n"
"* $mess = HTTP::Message->new \n"
"* $mess = HTTP::Message->new( $headers ) \n"
"* $mess = HTTP::Message->new( $headers, $content )\n"
"\n"
"This constructs a new message object. Normally you would want construct "
"'HTTP::Request' or 'HTTP::Response' objects instead.\n"
"\n"
"The optional $header argument should be a reference to an 'HTTP::Headers' "
"object or a plain array reference of key/value pairs. If an 'HTTP::Headers' "
"object is provided then a copy of it will be embedded into the constructed "
"message, i.e. it will not be owned and can be modified afterwards without "
"affecting the message.\n"
"\n"
"The optional $content argument should be a string of bytes. \n"
"* $mess = HTTP::Message->parse( $str )\n"
"\n"
"This constructs a new message object by parsing the given string. \n"
"* $mess->headers\n"
"\n"
"Returns the embedded 'HTTP::Headers' object. \n"
"* $mess->headers_as_string \n"
"* $mess->headers_as_string( $eol )\n"
"\n"
"Call the as_string() method for the headers in the message. This will be the "
"same as\n"
"\n"
"    $mess->headers->as_string\n"
"\n"
"but it will make your program a whole character shorter :-) \n"
"* $mess->content \n"
"* $mess->content( $bytes )\n"
"\n"
"The content() method sets the raw content if an argument is given. If no "
"argument is given the content is not touched. In either case the original "
"raw content is returned.\n"
"\n"
"If the 'undef' argument is given, the content is reset to its default value, "
"which is an empty string.\n"
"\n"
"Note that the content should be a string of bytes. Strings in perl can "
"contain characters outside the range of a byte. The 'Encode' module can be "
"used to turn such strings into a string of bytes. \n"
"* $mess->add_content( $bytes )\n"
"\n"
"The add_content() methods appends more data bytes to the end of the current "
"content buffer. \n"
"* $mess->add_content_utf8( $string )\n"
"\n"
"The add_content_utf8() method appends the UTF-8 bytes representing the "
"string to the end of the current content buffer. \n"
"* $mess->content_ref \n"
"* $mess->content_ref( \\$bytes )\n"
"\n"
"The content_ref() method will return a reference to content buffer string. "
"It can be more efficient to access the content this way if the content is "
"huge, and it can even be used for direct manipulation of the content, for "
"instance:\n"
"\n"
"  ${$res->content_ref} =~ s/\\bfoo\\b/bar/g;\n"
"\n"
"This example would modify the content buffer in-place.\n"
"\n"
"If an argument is passed it will setup the content to reference some "
"external source. The content() and add_content() methods will automatically "
"dereference scalar references passed this way. For other references "
"content() will return the reference itself and add_content() will refuse to "
"do anything. \n"
"* $mess->content_charset\n"
"\n"
"This returns the charset used by the content in the message. The charset is "
"either found as the charset attribute of the 'Content-Type' header or by "
"guessing.\n"
"\n"
"See http://www.w3.org/TR/REC-html40/charset.html#spec-char-encoding for "
"details about how charset is determined. \n"
"* $mess->decoded_content( %options )\n"
"\n"
"Returns the content with any 'Content-Encoding' undone and, for textual "
"content ('Content-Type' values starting with 'text/', exactly matching "
"'application/xml', or ending with '+xml'), the raw content's character set "
"decoded into Perl's Unicode string format. Note that this at https://github."
"com/libwww-perl/HTTP-Message/pull/99 attempt to decode declared character "
"sets for any other content types like 'application/json' or 'application/"
"javascript'. If the 'Content-Encoding' or 'charset' of the message is "
"unknown, this method will fail by returning 'undef'.\n"
"\n"
"The following options can be specified.\n"
"\n"
"  * 'charset'\n"
"\n"
"This override the charset parameter for text content. The value 'none' can "
"used to suppress decoding of the charset.\n"
"\n"
"  * 'default_charset'\n"
"\n"
"This override the default charset guessed by content_charset() or if that "
"fails \"ISO-8859-1\".\n"
"\n"
"  * 'alt_charset'\n"
"\n"
"If decoding fails because the charset specified in the Content-Type header "
"isn't recognized by Perl's Encode module, then try decoding using this "
"charset instead of failing. The 'alt_charset' might be specified as 'none' "
"to simply return the string without any decoding of charset as alternative.\n"
"\n"
"  * 'charset_strict'\n"
"\n"
"Abort decoding if malformed characters is found in the content. By default "
"you get the substitution character (\"\\x{FFFD}\") in place of malformed "
"characters.\n"
"\n"
"  * 'raise_error'\n"
"\n"
"If TRUE then raise an exception if not able to decode content. Reason might "
"be that the specified 'Content-Encoding' or 'charset' is not supported. If "
"this option is FALSE, then decoded_content() will return 'undef' on errors, "
"but will still set $@.\n"
"\n"
"  * 'ref'\n"
"\n"
"If TRUE then a reference to decoded content is returned. This might be more "
"efficient in cases where the decoded content is identical to the raw content "
"as no data copying is required in this case. \n"
"* $mess->decodable \n"
"* HTTP::Message::decodable()\n"
"\n"
"This returns the encoding identifiers that decoded_content() can process. In "
"scalar context returns a comma separated string of identifiers.\n"
"\n"
"This value is suitable for initializing the 'Accept-Encoding' request header "
"field. \n"
"* $mess->decode\n"
"\n"
"This method tries to replace the content of the message with the decoded "
"version and removes the 'Content-Encoding' header. Returns TRUE if "
"successful and FALSE if not.\n"
"\n"
"If the message does not have a 'Content-Encoding' header this method does "
"nothing and returns TRUE.\n"
"\n"
"Note that the content of the message is still bytes after this method has "
"been called and you still need to call decoded_content() if you want to "
"process its content as a string. \n"
"* $mess->encode( $encoding, ... )\n"
"\n"
"Apply the given encodings to the content of the message. Returns TRUE if "
"successful. The \"identity\" (non-)encoding is always supported; other "
"currently supported encodings, subject to availability of required "
"additional modules, are \"gzip\", \"deflate\", \"x-bzip2\" and \"base64\".\n"
"\n"
"A successful call to this function will set the 'Content-Encoding' header.\n"
"\n"
"Note that 'multipart/*' or 'message/*' messages can't be encoded and this "
"method will croak if you try. \n"
"* $mess->parts \n"
"* $mess->parts( @parts ) \n"
"* $mess->parts( \\@parts )\n"
"\n"
"Messages can be composite, i.e. contain other messages. The composite "
"messages have a content type of 'multipart/*' or 'message/*'. This method "
"give access to the contained messages.\n"
"\n"
"The argumentless form will return a list of 'HTTP::Message' objects. If the "
"content type of $msg is not 'multipart/*' or 'message/*' then this will "
"return the empty list. In scalar context only the first object is returned. "
"The returned message parts should be regarded as read-only (future versions "
"of this library might make it possible to modify the parent by modifying the "
"parts).\n"
"\n"
"If the content type of $msg is 'message/*' then there will only be one part "
"returned.\n"
"\n"
"If the content type is 'message/http', then the return value will be either "
"an 'HTTP::Request' or an 'HTTP::Response' object.\n"
"\n"
"If a @parts argument is given, then the content of the message will be "
"modified. The array reference form is provided so that an empty list can be "
"provided. The @parts array should contain 'HTTP::Message' objects. The "
"@parts objects are owned by $mess after this call and should not be modified "
"or made part of other messages.\n"
"\n"
"When updating the message with this method and the old content type of $mess "
"is not 'multipart/*' or 'message/*', then the content type is set to "
"'multipart/mixed' and all other content headers are cleared.\n"
"\n"
"This method will croak if the content type is 'message/*' and more than one "
"part is provided. \n"
"* $mess->add_part( $part )\n"
"\n"
"This will add a part to a message. The $part argument should be another "
"'HTTP::Message' object. If the previous content type of $mess is not "
"'multipart/*' then the old content (together with all content headers) will "
"be made part #1 and the content type made 'multipart/mixed' before the new "
"part is added. The $part object is owned by $mess after this call and should "
"not be modified or made part of other messages.\n"
"\n"
"There is no return value. \n"
"* $mess->clear\n"
"\n"
"Will clear the headers and set the content to the empty string. There is no "
"return value \n"
"* $mess->protocol \n"
"* $mess->protocol( $proto )\n"
"\n"
"Sets the HTTP protocol used for the message. The protocol() is a string like "
"'HTTP/1.0' or 'HTTP/1.1'. \n"
"* $mess->clone\n"
"\n"
"Returns a copy of the message object. \n"
"* $mess->as_string \n"
"* $mess->as_string( $eol )\n"
"\n"
"Returns the message formatted as a single string.\n"
"\n"
"The optional $eol parameter specifies the line ending sequence to use. The "
"default is \"\\n\". If no $eol is given then as_string will ensure that the "
"returned string is newline terminated (even when the message content is "
"not). No extra newline is appended if an explicit $eol is passed. \n"
"* $mess->dump( %opt )\n"
"\n"
"Returns the message formatted as a string. In void context print the "
"string.\n"
"\n"
"This differs from '$mess->as_string' in that it escapes the bytes of the "
"content so that it's safe to print them and it limits how much content to "
"print. The escapes syntax used is the same as for Perl's double quoted "
"strings. If there is no content the string \"(no content)\" is shown in its "
"place.\n"
"\n"
"Options to influence the output can be passed as key/value pairs. The "
"following options are recognized:\n"
"\n"
"  * maxlength => $num\n"
"\n"
"How much of the content to show. The default is 512. Set this to 0 for "
"unlimited.\n"
"\n"
"If the content is longer then the string is chopped at the limit and the "
"string \"...\\n(### more bytes not shown)\" appended.\n"
"\n"
"  * no_content => $str\n"
"\n"
"Replaces the \"(no content)\" marker.\n"
"\n"
"  * prefix => $str\n"
"\n"
"A string that will be prefixed to each line of the dump.\n"
"\n"
"All methods unknown to 'HTTP::Message' itself are delegated to the 'HTTP::"
"Headers' object that is part of every message. This allows convenient access "
"to these methods. Refer to HTTP::Headers for details of these methods:\n"
"\n"
"    $mess->header( $field => $val )     $mess->push_header( $field => "
"$val )     $mess->init_header( $field => $val )     $mess-"
">remove_header( $field )     $mess->remove_content_headers     $mess-"
">header_field_names     $mess->scan( \\&doit )\n"
"\n"
"    $mess->date     $mess->expires     $mess->if_modified_since     $mess-"
">if_unmodified_since     $mess->last_modified     $mess->content_type     "
"$mess->content_encoding     $mess->content_length     $mess-"
">content_language     $mess->title     $mess->user_agent     $mess-"
">server     $mess->from     $mess->referer     $mess->www_authenticate     "
"$mess->authorization     $mess->proxy_authorization     $mess-"
">authorization_basic     $mess->proxy_authorization_basic"
msgstr ""

#. tumbleweed/perl-HTTP-Parser/summary
msgid "Parse HTTP/1.1 request into HTTP::Request/Response object"
msgstr ""

#. tumbleweed/perl-HTTP-Parser/description
msgid ""
"This is an HTTP request parser. It takes chunks of text as received and "
"returns a 'hint' as to what is required, or returns the HTTP::Request when a "
"complete request has been read. HTTP/1.1 chunking is supported. It dies if "
"it finds an error."
msgstr ""

#. tumbleweed/perl-HTTP-Server-Simple-PSGI/summary
msgid "PSGI handler for HTTP::Server::Simple"
msgstr ""

#. tumbleweed/perl-HTTP-Server-Simple-PSGI/description
msgid ""
"HTTP::Server::Simple::PSGI is a HTTP::Server::Simple based HTTP server that "
"can run PSGI applications. This module only depends on HTTP::Server::Simple, "
"which itself doesn't depend on any non-core modules so it's best to be used "
"as an embedded web server."
msgstr ""

#. tumbleweed/perl-HTTP-Tiny/summary
msgid "Small, simple, correct HTTP/1.1 client"
msgstr ""

#. tumbleweed/perl-HTTP-Tinyish/summary
msgid "HTTP::Tiny compatible HTTP client wrappers"
msgstr ""

#. tumbleweed/perl-HTTP-Tinyish/description
msgid ""
"HTTP::Tinyish is a wrapper module for HTTP client modules LWP, HTTP::Tiny "
"and HTTP client software 'curl' and 'wget'.\n"
"\n"
"It provides an API compatible to HTTP::Tiny, and the implementation has been "
"extracted out of App::cpanminus. This module can be useful in a restrictive "
"environment where you need to be able to download CPAN modules without an "
"HTTPS support in built-in HTTP library."
msgstr ""

#. tumbleweed/perl-Heap/summary
#, fuzzy
msgid "Perl extensions for keeping data partially sorted"
msgstr "Interface Perl pour objets URI"

#. tumbleweed/perl-Heap/description
msgid ""
"The Heap collection of modules provide routines that manage a heap of "
"elements. A heap is a partially sorted structure that is always able to "
"easily extract the smallest of the elements in the structure (or the largest "
"if a reversed compare routine is provided).\n"
"\n"
"If the collection of elements is changing dynamically, the heap has less "
"overhead than keeping the collection fully sorted.\n"
"\n"
"The elements must be objects as described in \"Heap::Elem\" and all elements "
"inserted into one heap must be mutually compatible - either the same class "
"exactly or else classes that differ only in ways unrelated to the\n"
"*Heap::Elem* interface."
msgstr ""

#. tumbleweed/perl-IO-Async/description
msgid ""
"This collection of modules allows programs to be written that perform "
"asynchronous filehandle IO operations. A typical program using them would "
"consist of a single subclass of IO::Async::Loop to act as a container of "
"other objects, which perform the actual IO work required by the program. As "
"well as IO handles, the loop also supports timers and signal handlers, and "
"includes more higher-level functionality built on top of these basic parts."
msgstr ""

#. tumbleweed/perl-IO-CaptureOutput/summary
msgid ""
"(DEPRECATED) capture STDOUT and STDERR from Perl code, subprocesses or XS"
msgstr ""

#. tumbleweed/perl-IO-CaptureOutput/description
msgid ""
"*This module is no longer recommended by the maintainer* - see Capture::Tiny "
"instead.\n"
"\n"
"This module provides routines for capturing STDOUT and STDERR from perl "
"subroutines, forked system calls (e.g. 'system()', 'fork()') and from XS or "
"C modules."
msgstr ""

#. tumbleweed/perl-IO-Compress-Lzma/summary
msgid "Write lzma files/buffers"
msgstr ""

#. tumbleweed/perl-IO-Compress-Lzma/description
msgid ""
"This module provides a Perl interface that allows writing lzma compressed "
"data to files or buffer.\n"
"\n"
"For reading lzma files/buffers, see the companion module IO::Uncompress::"
"UnLzma."
msgstr ""

#. tumbleweed/perl-IO-HTML/description
msgid ""
"IO::HTML provides an easy way to open a file containing HTML while "
"automatically determining its encoding. It uses the HTML5 encoding sniffing "
"algorithm specified in section 8.2.2.2 of the draft standard.\n"
"\n"
"The algorithm as implemented here is: \n"
"* 1.\n"
"\n"
"If the file begins with a byte order mark indicating UTF-16LE, UTF-16BE, or "
"UTF-8, then that is the encoding. \n"
"* 2.\n"
"\n"
"If the first '$bytes_to_check' bytes of the file contain a '<meta>' tag that "
"indicates the charset, and Encode recognizes the specified charset name, "
"then that is the encoding. (This portion of the algorithm is implemented by "
"'find_charset_in'.)\n"
"\n"
"The '<meta>' tag can be in one of two formats:\n"
"\n"
"  <meta charset=\"...\">   <meta http-equiv=\"Content-Type\" content=\"..."
"charset=...\">\n"
"\n"
"The search is case-insensitive, and the order of attributes within the tag "
"is irrelevant. Any additional attributes of the tag are ignored. The first "
"matching tag with a recognized encoding ends the search. \n"
"* 3.\n"
"\n"
"If the first '$bytes_to_check' bytes of the file are valid UTF-8 (with at "
"least 1 non-ASCII character), then the encoding is UTF-8. \n"
"* 4.\n"
"\n"
"If all else fails, use the default character encoding. The HTML5 standard "
"suggests the default encoding should be locale dependent, but currently it "
"is always 'cp1252' unless you set '$IO::HTML::default_encoding' to a "
"different value. Note: 'sniff_encoding' does not apply this step; only "
"'html_file' does that."
msgstr ""

#. tumbleweed/perl-IO-Handle-Util/description
msgid ""
"This module provides a number of helpful routines to manipulate or create "
"IO::Handle like objects."
msgstr ""

#. tumbleweed/perl-IO-Pipely/summary
msgid "Portably create pipe() or pipe-like handles, one way or another"
msgstr ""

#. tumbleweed/perl-IO-Tty/summary
msgid "Low-level allocate a pseudo-Tty, import constants"
msgstr ""

#. tumbleweed/perl-IO-Tty/description
msgid ""
"'IO::Tty' is used internally by 'IO::Pty' to create a pseudo-tty. You "
"wouldn't want to use it directly except to import constants, use 'IO::Pty'. "
"For a list of importable constants, see IO::Tty::Constant.\n"
"\n"
"Windows is now supported, but ONLY under the Cygwin environment, see http://"
"sources.redhat.com/cygwin/.\n"
"\n"
"Please note that pty creation is very system-dependend. From my experience, "
"any modern POSIX system should be fine. Find below a list of systems that "
"'IO::Tty' should work on. A more detailed table (which is slowly getting out-"
"of-date) is available from the project pages document manager at SourceForge "
"http://sourceforge.net/projects/expectperl/.\n"
"\n"
"If you have problems on your system and your system is listed in the "
"\"verified\" list, you probably have some non-standard setup, e.g. you "
"compiled your Linux-kernel yourself and disabled ptys (bummer!). Please ask "
"your friendly sysadmin for help.\n"
"\n"
"If your system is not listed, unpack the latest version of 'IO::Tty', do a "
"''perl Makefile.PL; make; make test; uname -a'' and send me (_RGiersig@cpan."
"org_) the results and I'll see what I can deduce from that. There are "
"chances that it will work right out-of-the-box...\n"
"\n"
"If it's working on your system, please send me a short note with details "
"(version number, distribution, etc. 'uname -a' and 'perl -V' is a good "
"start; also, the output from \"perl Makefile.PL\" contains a lot of "
"interesting info, so please include that as well) so I can get an overview. "
"Thanks!"
msgstr ""

#. tumbleweed/perl-IO-stringy/summary
msgid "I/O on in-core objects like strings and arrays"
msgstr ""

#. tumbleweed/perl-IO-stringy/description
msgid ""
"This toolkit primarily provides modules for performing both traditional and "
"object-oriented i/o) on things _other_ than normal filehandles; in "
"particular, IO::Scalar, IO::ScalarArray, and IO::Lines.\n"
"\n"
"In the more-traditional IO::Handle front, we have IO::AtomicFile which may "
"be used to painlessly create files which are updated atomically.\n"
"\n"
"And in the \"this-may-prove-useful\" corner, we have IO::Wrap, whose "
"exported wraphandle() function will clothe anything that's not a blessed "
"object in an IO::Handle-like wrapper... so you can just use OO syntax and "
"stop worrying about whether your function's caller handed you a string, a "
"globref, or a FileHandle."
msgstr ""

#. tumbleweed/perl-IPC-System-Simple/description
msgid ""
"Calling Perl's in-built 'system()' function is easy, determining if it was "
"successful is _hard_. Let's face it, '$?' isn't the nicest variable in the "
"world to play with, and even if you _do_ check it, producing a well-"
"formatted error string takes a lot of work.\n"
"\n"
"'IPC::System::Simple' takes the hard work out of calling external commands. "
"In fact, if you want to be really lazy, you can just write:\n"
"\n"
"    use IPC::System::Simple qw(system);\n"
"\n"
"and all of your 'system' commands will either succeed (run to completion and "
"return a zero exit value), or die with rich diagnostic messages.\n"
"\n"
"The 'IPC::System::Simple' module also provides a simple replacement to "
"Perl's backticks operator. Simply write:\n"
"\n"
"    use IPC::System::Simple qw(capture);\n"
"\n"
"and then use the capture() command just like you'd use backticks. If there's "
"an error, it will die with a detailed description of what went wrong. Better "
"still, you can even use 'capturex()' to run the equivalent of backticks, but "
"without the shell:\n"
"\n"
"    use IPC::System::Simple qw(capturex);\n"
"\n"
"    my $result = capturex($command, @args);\n"
"\n"
"If you want more power than the basic interface, including the ability to "
"specify which exit values are acceptable, trap errors, or process "
"diagnostics, then read on!"
msgstr ""

#. tumbleweed/perl-JSON/description
msgid ""
"This module is a thin wrapper for JSON::XS-compatible modules with a few "
"additional features. All the backend modules convert a Perl data structure "
"to a JSON text and vice versa. This module uses JSON::XS by default, and "
"when JSON::XS is not available, falls back on JSON::PP, which is in the Perl "
"core since 5.14. If JSON::PP is not available either, this module then falls "
"back on JSON::backportPP (which is actually JSON::PP in a different .pm "
"file) bundled in the same distribution as this module. You can also "
"explicitly specify to use Cpanel::JSON::XS, a fork of JSON::XS by Reini "
"Urban.\n"
"\n"
"All these backend modules have slight incompatibilities between them, "
"including extra features that other modules don't support, but as long as "
"you use only common features (most important ones are described below), "
"migration from backend to backend should be reasonably easy. For details, "
"see each backend module you use."
msgstr ""

#. tumbleweed/perl-JSON-MaybeXS/description
msgid ""
"This module first checks to see if either Cpanel::JSON::XS or JSON::XS (at "
"at least version 3.0) is already loaded, in which case it uses that module. "
"Otherwise it tries to load Cpanel::JSON::XS, then JSON::XS, then JSON::PP in "
"order, and either uses the first module it finds or throws an error.\n"
"\n"
"It then exports the 'encode_json' and 'decode_json' functions from the "
"loaded module, along with a 'JSON' constant that returns the class name for "
"calling 'new' on.\n"
"\n"
"If you're writing fresh code rather than replacing JSON.pm usage, you might "
"want to pass options as constructor args rather than calling mutators, so we "
"provide our own 'new' method that supports that."
msgstr ""

#. tumbleweed/perl-JSON-Parse/summary
msgid "Parse JSON"
msgstr ""

#. tumbleweed/perl-JSON-Parse/description
msgid ""
"A module for parsing JSON. (JSON means \"JavaScript Object Notation\" and it "
"is specified in RFC 8259.)\n"
"\n"
"JSON::Parse offers the function parse_json, which takes a string containing "
"JSON, and returns an equivalent Perl structure. It also offers validation of "
"JSON via valid_json, which returns true or false depending on whether the "
"JSON is correct or not, and assert_valid_json, which produces a descriptive "
"fatal error if the JSON is invalid. A function read_json reads JSON from a "
"file, and there is a safer version of parse_json called parse_json_safe "
"which doesn't throw exceptions.\n"
"\n"
"For special cases of parsing, there are also methods new and parse, which "
"create a JSON parsing object and run it on text. See METHODS.\n"
"\n"
"JSON::Parse accepts only UTF-8 as input. See UTF-8 only and Handling of "
"Unicode."
msgstr ""

#. tumbleweed/perl-JSON-XS/description
msgid ""
"This module converts Perl data structures to JSON and vice versa. Its "
"primary goal is to be _correct_ and its secondary goal is to be _fast_. To "
"reach the latter goal it was written in C.\n"
"\n"
"See MAPPING, below, on how JSON::XS maps perl values to JSON values and vice "
"versa."
msgstr ""

#. tumbleweed/perl-JavaScript-Minifier-XS/description
msgid ""
"'JavaScript::Minifier::XS' is a JavaScript \"minifier\"; its designed to "
"remove unnecessary whitespace and comments from JavaScript files, which also "
"*not* breaking the JavaScript.\n"
"\n"
"'JavaScript::Minifier::XS' is similar in function to 'JavaScript::Minifier', "
"but is substantially faster as its written in XS and not just pure Perl."
msgstr ""

#. tumbleweed/perl-LWP-ConsoleLogger/summary
msgid "LWP tracing and debugging"
msgstr ""

#. tumbleweed/perl-LWP-ConsoleLogger/description
msgid ""
"BETA BETA BETA. This is currently an experiment. Things could change. Please "
"adjust accordingly.\n"
"\n"
"It can be hard (or at least tedious) to debug mechanize scripts. LWP::Debug "
"is deprecated. It suggests you write your own debugging handlers, set up a "
"proxy or install Wireshark. Those are all workable solutions, but this "
"module exists to save you some of that work. The guts of this module are "
"stolen from Plack::Middleware::DebugLogging, which in turn stole most of its "
"internals from Catalyst. If you're new to LWP::ConsoleLogger, I suggest "
"getting started with the LWP::ConsoleLogger::Easy wrapper. This will get you "
"up and running in minutes. If you need to tweak the settings that LWP::"
"ConsoleLogger::Easy chooses for you (or if you just want to be fancy), "
"please read on.\n"
"\n"
"Since this is a debugging library, I've left as much mutable state as "
"possible, so that you can easily toggle output on and off and otherwise "
"adjust how you deal with the output."
msgstr ""

#. tumbleweed/perl-LWP-MediaTypes/summary
msgid "Guess media type for a file or a URL"
msgstr ""

#. tumbleweed/perl-LWP-MediaTypes/description
msgid ""
"This module provides functions for handling media (also known as MIME) types "
"and encodings. The mapping from file extensions to media types is defined by "
"the _media.types_ file. If the _~/.media.types_ file exists it is used "
"instead. For backwards compatibility we will also look for _~/.mime.types_.\n"
"\n"
"The following functions are exported by default: \n"
"* guess_media_type( $filename ) \n"
"* guess_media_type( $uri ) \n"
"* guess_media_type( $filename_or_object, $header_to_modify )\n"
"\n"
"This function tries to guess media type and encoding for a file or objects "
"that support the a 'path' or 'filename' method, eg, URI or File::Temp "
"objects. When an object does not support either method, it will be "
"stringified to determine the filename. It returns the content type, which is "
"a string like '\"text/html\"'. In array context it also returns any content "
"encodings applied (in the order used to encode the file). You can pass a URI "
"object reference, instead of the file name.\n"
"\n"
"If the type can not be deduced from looking at the file name, then "
"guess_media_type() will let the '-T' Perl operator take a look. If this "
"works (and '-T' returns a TRUE value) then we return _text/plain_ as the "
"type, otherwise we return _application/octet-stream_ as the type.\n"
"\n"
"The optional second argument should be a reference to a HTTP::Headers object "
"or any object that implements the $obj->header method in a similar way. When "
"it is present the values of the 'Content-Type' and 'Content-Encoding' will "
"be set for this header. \n"
"* media_suffix( $type, ... )\n"
"\n"
"This function will return all suffixes that can be used to denote the "
"specified media type(s). Wildcard types can be used. In a scalar context it "
"will return the first suffix found. Examples:\n"
"\n"
"  @suffixes = media_suffix('image/*', 'audio/basic');   $suffix = "
"media_suffix('text/html');\n"
"\n"
"The following functions are only exported by explicit request: \n"
"* add_type( $type, @exts )\n"
"\n"
"Associate a list of file extensions with the given media type. Example:\n"
"\n"
"    add_type(\"x-world/x-vrml\" => qw(wrl vrml)); \n"
"* add_encoding( $type, @ext )\n"
"\n"
"Associate a list of file extensions with an encoding type. Example:\n"
"\n"
" add_encoding(\"x-gzip\" => \"gz\"); \n"
"* read_media_types( @files )\n"
"\n"
"Parse media types files and add the type mappings found there. Example:\n"
"\n"
"    read_media_types(\"conf/mime.types\");"
msgstr ""

#. tumbleweed/perl-List-BinarySearch/summary
msgid "Binary Search within a sorted array."
msgstr ""

#. tumbleweed/perl-List-BinarySearch/description
msgid ""
"A binary search searches *sorted* lists using a divide and conquer "
"technique. On each iteration the search domain is cut in half, until the "
"result is found. The computational complexity of a binary search is O(log "
"n).\n"
"\n"
"The binary search algorithm implemented in this module is known as a "
"_Deferred Detection_ variant on the traditional Binary Search. Deferred "
"Detection provides *stable searches*. Stable binary search algorithms have "
"the following characteristics, contrasted with their unstable binary search "
"cousins: \n"
"* In the case of non-unique keys, a stable binary search will always   "
"return the lowest-indexed matching element.  An unstable binary search   "
"would return the first one found, which may not be the chronological "
"first. \n"
"* Best and worst case time complexity is always O(log n).  Unstable   "
"searches may stop once the target is found, but in the worst case are   "
"still O(log n).  In practical terms, this difference is usually not   "
"meaningful. \n"
"* Stable binary searches only require one relational comparison of a   given "
"pair of data elements per iteration, where unstable binary searches   "
"require two comparisons per iteration. \n"
"* The net result is that although an unstable binary search might have   "
"better \"best case\" performance, the fact that a stable binary search "
"gets   away with fewer comparisons per iteration gives it better performance "
"in the   worst case, and approximately equal performance in the average "
"case. By   trading away slightly better \"best case\" performance, the "
"stable search gains   the guarantee that the element found will always be "
"the lowest-indexed   element in a range of non-unique keys.\n"
"\n"
"This module has a companion \"XS\" module: the List::BinarySearch::XS "
"manpage which users are strongly encouraged to install as well. If List::"
"BinarySearch::XS is also installed, 'binsearch' and 'binsearch_pos' will use "
"XS code. This behavior may be overridden by setting "
"'$ENV{List_BinarySearch_PP}' to a true value. Most CPAN installers will "
"either automatically install the XS module, or prompt to automatically "
"install it. See CONFIGURATION for details."
msgstr ""

#. tumbleweed/perl-List-UtilsBy/description
msgid ""
"This module provides a number of list utility functions, all of which take "
"an initial code block to control their behaviour. They are variations on "
"similar core perl or 'List::Util' functions of similar names, but which use "
"the block to control their behaviour. For example, the core Perl function "
"'sort' takes a list of values and returns them, sorted into order by their "
"string value. The sort_by function sorts them according to the string value "
"returned by the extra function, when given each value.\n"
"\n"
"   my @names_sorted = sort @names;\n"
"\n"
"   my @people_sorted = sort_by { $_->name } @people;"
msgstr ""

#. tumbleweed/perl-Locale-Codes/summary
msgid "Distribution of modules to handle locale codes"
msgstr ""

#. tumbleweed/perl-Locale-Codes/description
msgid ""
"*Locale-Codes* is a distribution containing a set of modules designed to "
"work with sets of codes which uniquely identify something. For example, "
"there are codes associated with different countries, different currencies, "
"different languages, etc. These sets of codes are typically maintained in "
"some standard.\n"
"\n"
"This distribution provides a way to work with these lists of codes. Because "
"the data from the various standards is not available in any sort of "
"consistent API, access to the lists is not available in any direct fashion. "
"To compensate for this, the list of codes is stored internally within this "
"distribution, and the distribution is updated on a regular basis to include "
"all known codes at that point in time. This does mean that it is necessary "
"to keep this distribution up-to-date to keep up with the various changes "
"that are made in the various standards.\n"
"\n"
"Traditionally, a module has been created to work with each type of code "
"sets. So, there is a module for working with country lists, one for currency "
"lists, etc. Since version 3.00, all of these individual modules were written "
"as wrappers around a central module (which was not intended to be used "
"directly) which did all of the real work.\n"
"\n"
"Starting with version 3.50, the central module was reworked slightly to "
"provide an object-oriented interface. All of the modules for working with "
"individual types of code sets were reworked to use the improved OO module, "
"so the traditional interfaces still work as they always have. As a result, "
"you are free to use the traditional functional (non-OO) interfaces, or to "
"use the OO interface and bypass the wrapper modules entirely.\n"
"\n"
"Both methods will be supported in the future, so use the one that is best "
"suited to your needs.\n"
"\n"
"Within each type, any number of code sets are allowed. For example, sets of "
"country codes are maintained in several different locations including the "
"ISO-3166 standard, the IANA, and by the United Nations. The lists of "
"countries are similar, but not identical. Multiple code sets are supported, "
"though trying to convert from one code set to another will not always work "
"since the list of countries is not one-to-one.\n"
"\n"
"All data in all of these modules comes directly from the original standards "
"(or as close to direct as possible), so it should be up-to-date at the time "
"of release.\n"
"\n"
"I plan on releasing a new version several times a year to incorporate any "
"changes made in the standards. However, I don't always know about changes "
"that occur, so if any of the standards change, and you want a new release "
"sooner, just email me and I'll get one out."
msgstr ""

#. tumbleweed/perl-Log-Any-Adapter-Callback/summary
msgid "(DEPRECATED) Send Log::Any logs to a subroutine"
msgstr ""

#. tumbleweed/perl-Log-Any-Adapter-Callback/description
msgid ""
"DEPRECATION NOTICE: Log::Any distribution since 1.708 comes with Log::Any::"
"Adapter::Capture which does the same thing. I'm deprecating this adapter "
"now.\n"
"\n"
"This adapter lets you specify callback subroutine to be called by Log::Any's "
"logging methods (like $log->debug(), $log->error(), etc) and detection "
"methods (like $log->is_warning(), $log->is_fatal(), etc.).\n"
"\n"
"This adapter is used for customized logging, and is mostly a convenient "
"construct to save a few lines of code. You could achieve the same effect by "
"creating a full Log::Any adapter class.\n"
"\n"
"Your logging callback subroutine will be called with these arguments:\n"
"\n"
" ($method, $self, $format, @params)\n"
"\n"
"where $method is the name of method (like \"debug\") and ($self, $format, "
"@params) are given by Log::Any."
msgstr ""

#. tumbleweed/perl-MRO-Compat/summary
msgid "Mro::* interface compatibility for Perls < 5.9.5"
msgstr ""

#. tumbleweed/perl-Mail-AuthenticationResults/summary
msgid "Object Oriented Authentication-Results Headers"
msgstr ""

#. tumbleweed/perl-Mail-AuthenticationResults/description
msgid ""
"Object Oriented Authentication-Results email headers.\n"
"\n"
"This parser copes with most styles of Authentication-Results header seen in "
"the wild, but is not yet fully RFC7601 compliant\n"
"\n"
"Differences from RFC7601\n"
"\n"
"key/value pairs are parsed when present in the authserv-id section, this is "
"against RFC but has been seen in headers added by Yahoo!.\n"
"\n"
"Comments added between key/value pairs will be added after them in the data "
"structures and when stringified."
msgstr ""

#. tumbleweed/perl-Mail-DKIM/description
msgid ""
"This module implements the various components of the DKIM and DomainKeys "
"message-signing and verifying standards for Internet mail. It currently "
"tries to implement these specifications: \n"
"* RFC4871, for DKIM \n"
"* RFC4870, for DomainKeys \n"
"* draft-ietf-dmarc-arc-protocol-06, for ARC\n"
"\n"
"The module uses an object-oriented interface. You use one of two different "
"classes, depending on whether you are signing or verifying a message. To "
"sign, use the Mail::DKIM::Signer class. To verify, use the Mail::DKIM::"
"Verifier class. Simple, eh?\n"
"\n"
"Likewise for ARC, use the ARC modules Mail::DKIM::ARC::Signer and Mail::"
"DKIM::ARC::Verifier\n"
"\n"
"If you're sending to test libraries which expect the tags in headers to be "
"sorted, you can set $Mail::DKIM::SORTTAGS to a true value, and all created "
"headers will get sorted keys"
msgstr ""

#. tumbleweed/perl-Mail-Message/summary
msgid "General message object"
msgstr ""

#. tumbleweed/perl-Mail-Message/description
msgid ""
"A 'Mail::Message' object is a container for MIME-encoded message "
"information, as defined by RFC2822. Everything what is not specificaly "
"related to storing the messages in mailboxes (folders) is implemented in "
"this class. Methods which are related to folders is implemented in the Mail::"
"Box::Message extension."
msgstr ""

#. tumbleweed/perl-Mail-SpamAssassin-Plugin-dqs/summary
msgid "SpamAssassin plugin for Spamhaus Data Query Service (DQS)"
msgstr ""

#. tumbleweed/perl-Mail-SpamAssassin-Plugin-dqs/description
msgid ""
"The Spamhaus Data Query Service (DQS) plugin for SpamAssassin enhances "
"existing functions by checking HELO/EHLO, From, Reply-To, Envelope-From and "
"Return-Path against Spamhaus DBL/ZRD blacklists. It also scans the e-mail "
"body for e-mail addresses and performs blacklist lookups against the domains "
"or its authoritative nameservers. Further checks cover the reverse DNS "
"matches in DBL/ZRD blacklists or the SBL/CSS lookups for IP addresses or IP "
"addresses of authoritative nameservers of domains being part of the e-mail "
"body.\n"
"\n"
"While the DQS usage is free under the same terms like when using public "
"mirrors (which are shipped in SpamAssassin as default configuration), a "
"registration procedure for a free DQS key is mandatory nevertheless."
msgstr ""

#. tumbleweed/perl-Mail-Transport/summary
msgid "Use Mail Transfer Agents (MTAs)"
msgstr ""

#. tumbleweed/perl-Mail-Transport/description
msgid ""
"Objects which extend 'Mail::Transport' implement sending and/or receiving of "
"messages, using various protocols.\n"
"\n"
"Mail::Transport::Send extends this class, and offers general functionality "
"for send protocols, like SMTP. Mail::Transport::Receive also extends this "
"class, and offers receive method. Some transport protocols will implement "
"both sending and receiving.\n"
"\n"
"Extends \"DESCRIPTION\" in Mail::Reporter."
msgstr ""

#. tumbleweed/perl-MailTools/summary
#, fuzzy
msgid "Bundle of ancient email modules"
msgstr "Modules Palm pilote perl"

#. tumbleweed/perl-Math-Int64/summary
msgid "Manipulate 64 bits integers in Perl"
msgstr ""

#. tumbleweed/perl-Math-Int64/description
msgid ""
"This module adds support for 64 bit integers, signed and unsigned, to Perl."
msgstr ""

#. tumbleweed/perl-Menlo/summary
msgid "CPAN client"
msgstr ""

#. tumbleweed/perl-Menlo/description
msgid ""
"Menlo is a backend for _cpanm 2.0_, developed with the goal to replace cpanm "
"internals with a set of modules that are more flexible, extensible and "
"easier to use."
msgstr ""

#. tumbleweed/perl-Menlo-Legacy/summary
msgid "Legacy internal and client support for Menlo"
msgstr ""

#. tumbleweed/perl-Menlo-Legacy/description
msgid ""
"Menlo::Legacy is a package to install Menlo::CLI::Compat which is a "
"compatibility library that implements the classic version of cpanminus "
"internals and behavios. This is so that existing users of cpanm and API "
"clients such as Carton, Carmel and App::cpm) can rely on the stable features "
"and specific behaviors of cpanm.\n"
"\n"
"This way Menlo can evolve and be refactored without the fear of breaking any "
"downstream clients, including 'cpanm' itself."
msgstr ""

#. tumbleweed/perl-Metrics-Any/summary
msgid "Abstract collection of monitoring metrics"
msgstr ""

#. tumbleweed/perl-Metrics-Any/description
msgid ""
"Provides a central location for modules to report monitoring metrics, such "
"as counters of the number of times interesting events have happened, and "
"programs to collect up and send those metrics to monitoring services.\n"
"\n"
"Inspired by Log::Any, this module splits the overall problem into two sides. "
"Modules wishing to provide metrics for monitoring purposes can use the 'use "
"Metrics::Any' statement to obtain a _collector_ into which they can report "
"metric events. By default this collector doesn't actually do anything, so "
"modules can easily use it without adding extra specific dependencies for "
"specific reporting.\n"
"\n"
"A program using one or more such modules can apply a different policy and "
"request a particular _adapter_ implementation in order to actually report "
"these metrics to some external system, by using the 'use Metrics::Any::"
"Adapter' statement.\n"
"\n"
"This separation of concerns allows module authors to write code which will "
"report metrics without needing to care about the exact mechanism of that "
"reporting (as well as to write code which does not itself depend on the code "
"required to perform that reporting)."
msgstr ""

#. tumbleweed/perl-Module-Build/description
msgid ""
"'Module::Build' is a system for building, testing, and installing Perl "
"modules. It is meant to be an alternative to 'ExtUtils::MakeMaker'. "
"Developers may alter the behavior of the module through subclassing. It also "
"does not require a 'make' on your system - most of the 'Module::Build' code "
"is pure-perl and written in a very cross-platform way.\n"
"\n"
"See \"COMPARISON\" for more comparisons between 'Module::Build' and other "
"installer tools.\n"
"\n"
"To install 'Module::Build', and any other module that uses 'Module::Build' "
"for its installation process, do the following:\n"
"\n"
"  perl Build.PL       # 'Build.PL' script creates the 'Build' script   ./"
"Build             # Need ./ to ensure we're using this \"Build\" script   ./"
"Build test        # and not another one that happens to be in the PATH   ./"
"Build install\n"
"\n"
"This illustrates initial configuration and the running of three 'actions'. "
"In this case the actions run are 'build' (the default action), 'test', and "
"'install'. Other actions defined so far include:\n"
"\n"
"  build                          manifest   clean                          "
"manifest_skip   code                           manpages   "
"config_data                    pardist   diff                           "
"ppd   dist                           ppmdist   "
"distcheck                      prereq_data   distclean                      "
"prereq_report   distdir                        pure_install   "
"distinstall                    realclean   distmeta                       "
"retest   distsign                       skipcheck   "
"disttest                       test   docs                           "
"testall   fakeinstall                    testcover   "
"help                           testdb   html                           "
"testpod   install                        testpodcoverage   "
"installdeps                    versioninstall\n"
"\n"
"You can run the 'help' action for a complete list of actions."
msgstr ""

#. tumbleweed/perl-Module-Build-Prereqs-FromCPANfile/summary
msgid "Construct prereq parameters of Module::Build from cpanfile"
msgstr ""

#. tumbleweed/perl-Module-Build-Prereqs-FromCPANfile/description
msgid ""
"This simple module reads cpanfile and converts its content into valid prereq "
"parameters for 'new()' method of Module::Build.\n"
"\n"
"Currently it does not support \"optional features\" specification (See "
"cpanfile/feature)."
msgstr ""

#. tumbleweed/perl-Module-Build-Using-PkgConfig/summary
msgid ""
"Extend Module::Build to more easily use platform libraries provided by pkg-"
"config"
msgstr ""

#. tumbleweed/perl-Module-Build-Using-PkgConfig/description
msgid ""
"This subclass of Module::Build provides some handy methods to assist the "
"_Build.PL_ script of XS-based module distributions that make use of platform "
"libraries managed by _pkg-config_.\n"
"\n"
"As well as supporting libraries installed on a platform-wide basis and thus "
"visible to _pkg-config_ itself, this subclass also assists with 'Alien::'-"
"based wrappers of these system libraries, allowing them to be dynamically "
"installed at build time if the platform does not provide them."
msgstr ""

#. tumbleweed/perl-Module-CPANTS-Analyse/summary
#. tumbleweed/perl-Module-CPANTS-Analyse/description
msgid "Generate Kwalitee ratings for a distribution"
msgstr ""

#. tumbleweed/perl-Module-Mask/summary
msgid "Pretend certain modules are not installed"
msgstr ""

#. tumbleweed/perl-Module-Mask/description
msgid ""
"Sometimes you need to test what happens when a given module is not "
"installed. This module provides a way of temporarily hiding installed "
"modules from perl's require mechanism. The Module::Mask object adds itself "
"to @INC and blocks require calls to restricted modules.\n"
"\n"
"Module::Mask will not affect modules already loaded at time of instantiation."
msgstr ""

#. tumbleweed/perl-Mojo-Log-Colored/summary
msgid "Colored Mojo logging"
msgstr ""

#. tumbleweed/perl-Mojo-Log-Colored/description
msgid ""
"Mojo::Log::Colored is a logger for Mojolicious with colored output for the "
"terminal. It lets you define colors for each log level based on Term::"
"ANSIColor and comes with sensible default colors. The full lines in the log "
"will be colored.\n"
"\n"
"Since this inherits from Mojo::Log you can still give it a 'file', but the "
"output would also be colored. That does not make a lot of sense, so you "
"don't want to do that. Use this for development, not production."
msgstr ""

#. tumbleweed/perl-Mojo-Redis/summary
msgid "Redis driver based on Mojo::IOLoop"
msgstr ""

#. tumbleweed/perl-Mojo-Redis/description
msgid ""
"Mojo::Redis is a Redis driver that use the Mojo::IOLoop, which makes it "
"integrate easily with the Mojolicious framework.\n"
"\n"
"It tries to mimic the same interface as Mojo::Pg, Mojo::mysql and Mojo::"
"SQLite, but the methods for talking to the database vary.\n"
"\n"
"This module is in no way compatible with the 1.xx version of 'Mojo::Redis' "
"and this version also tries to fix a lot of the confusing methods in 'Mojo::"
"Redis2' related to pubsub.\n"
"\n"
"This module is currently EXPERIMENTAL, and bad design decisions will be "
"fixed without warning. Please report at https://github.com/jhthorsen/mojo-"
"redis/issues if you find this module useful, annoying or if you simply find "
"bugs. Feedback can also be sent to 'jhthorsen@cpan.org'."
msgstr ""

#. tumbleweed/perl-Mojolicious-Plugin-Status/summary
msgid "Mojolicious server status"
msgstr ""

#. tumbleweed/perl-Mojolicious-Plugin-Status/description
msgid ""
"Mojolicious::Plugin::Status is a Mojolicious plugin providing a server "
"status ui for Mojo::Server::Daemon and Mojo::Server::Prefork. Note that this "
"module is *EXPERIMENTAL* and should therefore only be used for debugging "
"purposes."
msgstr ""

#. tumbleweed/perl-Mojolicious-Plugin-Webpack/summary
msgid "Mojolicious ♥ Webpack"
msgstr ""

#. tumbleweed/perl-Mojolicious-Plugin-Webpack/description
msgid ""
"Mojolicious::Plugin::Webpack is a Mojolicious plugin to make it easier to "
"work with https://webpack.js.org/ or https://rollupjs.org/. This plugin "
"will... \n"
"* 1.\n"
"\n"
"Generate a minimal 'package.json' and a Webpack or Rollup config file. Doing "
"this manually is possible, but it can be quite time consuming to figure out "
"all the bits and pieces if you are not already familiar with Webpack. \n"
"* 2."
msgstr ""

#. tumbleweed/perl-Moo/description
msgid ""
"'Moo' is an extremely light-weight Object Orientation system. It allows one "
"to concisely define objects and roles with a convenient syntax that avoids "
"the details of Perl's object system. 'Moo' contains a subset of Moose and is "
"optimised for rapid startup.\n"
"\n"
"'Moo' avoids depending on any XS modules to allow for simple deployments. "
"The name 'Moo' is based on the idea that it provides almost -- but not quite "
"-- two thirds of Moose. As such, the Moose::Manual can serve as an effective "
"guide to 'Moo' aside from the MOP and Types sections.\n"
"\n"
"Unlike Mouse this module does not aim at full compatibility with Moose's "
"surface syntax, preferring instead to provide full interoperability via the "
"metaclass inflation capabilities described in MOO AND MOOSE.\n"
"\n"
"For a full list of the minor differences between Moose and Moo's surface "
"syntax, see INCOMPATIBILITIES WITH MOOSE."
msgstr ""

#. tumbleweed/perl-MooX-Attribute-ENV/summary
msgid "Allow Moo attributes to get their values from %ENV"
msgstr ""

#. tumbleweed/perl-MooX-Attribute-ENV/description
msgid ""
"This is a Moo extension. It allows other attributes for Moo/has. If any of "
"these are given, then Moo/BUILDARGS is wrapped so that values for object "
"attributes can, if not supplied in the normal construction process, come "
"from the environment.\n"
"\n"
"The environment will be searched for either the given case, or upper case, "
"version of the names discussed below.\n"
"\n"
"When a prefix is mentioned, it will be prepended to the mentioned name, with "
"a '_' in between."
msgstr ""

#. tumbleweed/perl-MooX-Locale-Passthrough/summary
msgid "Provide API used in translator modules without translating"
msgstr ""

#. tumbleweed/perl-MooX-Locale-Passthrough/description
msgid ""
"'MooX::Locale::Passthrough' is made to allow CPAN modules use translator API "
"without adding heavy dependencies (external software) or requirements "
"(operating resulting solution).\n"
"\n"
"This software is released together with MooX::Locale::TextDomain::OO, which "
"allowes then to plugin any desired translation."
msgstr ""

#. tumbleweed/perl-MooX-Options/summary
msgid "Explicit Options eXtension for Object Class"
msgstr ""

#. tumbleweed/perl-MooX-Options/description
msgid ""
"Create a command line tool with your Moo, Moose objects.\n"
"\n"
"Everything is explicit. You have an 'option' keyword to replace the usual "
"'has' to explicitly use your attribute into the command line.\n"
"\n"
"The 'option' keyword takes additional parameters and uses Getopt::Long::"
"Descriptive to generate a command line tool."
msgstr ""

#. tumbleweed/perl-MooX-StrictConstructor/summary
msgid "Make your Moo-based object constructors blow up on unknown attributes"
msgstr ""

#. tumbleweed/perl-MooX-StrictConstructor/description
msgid ""
"Simply loading this module makes your constructors \"strict\". If your "
"constructor is called with an attribute init argument that your class does "
"not declare, then it dies. This is a great way to catch small typos.\n"
"\n"
"Your application can use Carp::Always to generate stack traces on 'die'. "
"Previously all exceptions contained traces, but this could potentially leak "
"sensitive information, e.g.\n"
"\n"
"    My::Sensitive::Class->new( password => $sensitive, extra_value => "
"'foo' );"
msgstr ""

#. tumbleweed/perl-MooX-Traits/description
msgid ""
"Was any of the SYNOPSIS unexpected? Basically, this module is the same thing "
"as MooseX::Traits and MouseX::Traits, only for Moo. _Quelle surprise_, right?"
msgstr ""

#. tumbleweed/perl-MooX-late/summary
msgid "Easily translate Moose code to Moo"
msgstr ""

#. tumbleweed/perl-MooX-late/description
msgid ""
"Moo is a light-weight object oriented programming framework which aims to be "
"compatible with Moose. It does this by detecting when Moose has been loaded, "
"and automatically \"inflating\" its classes and roles to full Moose classes "
"and roles. This way, Moo classes can consume Moose roles, Moose classes can "
"extend Moo classes, and so forth.\n"
"\n"
"However, the surface syntax of Moo differs somewhat from Moose. For example "
"the 'isa' option when defining attributes in Moose must be either a string "
"or a blessed Moose::Meta::TypeConstraint object; but in Moo must be a "
"coderef. These differences in surface syntax make porting code from Moose to "
"Moo potentially tricky. MooX::late provides some assistance by enabling a "
"slightly more Moosey surface syntax.\n"
"\n"
"MooX::late does the following: \n"
"* 1.\n"
"\n"
"Supports 'isa => $stringytype'. \n"
"* 2.\n"
"\n"
"Supports 'does => $rolename' . \n"
"* 3.\n"
"\n"
"Supports 'lazy_build => 1'. \n"
"* 4.\n"
"\n"
"Exports 'blessed' and 'confess' functions to your namespace. \n"
"* 5.\n"
"\n"
"Handles native attribute traits.\n"
"\n"
"Five features. It is not the aim of 'MooX::late' to make every aspect of Moo "
"behave exactly identically to Moose. It's just going after the low-hanging "
"fruit. So it does five things right now, and I promise that future versions "
"will never do more than seven.\n"
"\n"
"Previous releases of MooX::late added support for 'coerce => 1' and 'default "
"=> $nonref'. These features have now been added to Moo itself, so MooX::late "
"no longer has to deal with them."
msgstr ""

#. tumbleweed/perl-Moose/summary
msgid "Postmodern object system for Perl 5"
msgstr ""

#. tumbleweed/perl-MooseX-App/summary
msgid "Write user-friendly command line apps with even less suffering"
msgstr ""

#. tumbleweed/perl-MooseX-App/description
msgid ""
"MooseX-App is a highly customisable helper to write user-friendly command "
"line applications without having to worry about most of the annoying things "
"usually involved. Just take any existing Moose class, add a single line "
"('use MooseX-App qw(PluginA PluginB ...);') and create one class for each "
"command in an underlying namespace. Options and positional parameters can be "
"defined as simple Moose accessors using the 'option' and 'parameter' "
"keywords respectively."
msgstr ""

#. tumbleweed/perl-Net-AMQP-RabbitMQ/summary
msgid "Interact with RabbitMQ over AMQP using librabbitmq"
msgstr ""

#. tumbleweed/perl-Net-AMQP-RabbitMQ/description
msgid ""
"'Net::AMQP::RabbitMQ' provides a simple wrapper around the librabbitmq "
"library that allows connecting, declaring exchanges and queues, binding and "
"unbinding queues, publishing, consuming and receiving events.\n"
"\n"
"Error handling in this module is primarily achieve by 'Perl_croak' (die). "
"You should be making good use of 'eval' around these methods to ensure that "
"you appropriately catch the errors."
msgstr ""

#. tumbleweed/perl-Net-CIDR-Lite/description
msgid ""
"Faster alternative to Net::CIDR when merging a large number of CIDR address "
"ranges. Works for IPv4 and IPv6 addresses."
msgstr ""

#. tumbleweed/perl-Net-DBus/description
msgid ""
"Net::DBus provides a Perl API for the DBus message system. The DBus Perl "
"interface is currently operating against the 0.32 development version of "
"DBus, but should work with later versions too, providing the API changes "
"have not been too drastic.\n"
"\n"
"Users of this package are either typically, service providers in which case "
"the Net::DBus::Service and Net::DBus::Object modules are of most relevance, "
"or are client consumers, in which case Net::DBus::RemoteService and Net::"
"DBus::RemoteObject are of most relevance."
msgstr ""

#. tumbleweed/perl-Net-DNS/description
msgid ""
"Net::DNS is a collection of Perl modules that act as a Domain Name System "
"(DNS) resolver. It allows the programmer to perform DNS queries that are "
"beyond the capabilities of \"gethostbyname\" and \"gethostbyaddr\".\n"
"\n"
"The programmer should be familiar with the structure of a DNS packet. See "
"RFC 1035 or DNS and BIND (Albitz & Liu) for details."
msgstr ""

#. tumbleweed/perl-Net-INET6Glue/description
msgid ""
"Net::INET6Glue is a collection of modules to make common modules IPv6 ready "
"by hotpatching them.\n"
"\n"
"Unfortunatly the current state of IPv6 support in perl is that no IPv6 "
"support is in the core and that a lot of important modules (like Net::FTP, "
"Net::SMTP, LWP,...) do not support IPv6 even if the modules for IPv6 sockets "
"like Socket6, IO::Socket::IP or IO::Socket::INET6 are available.\n"
"\n"
"This module tries to mitigate this by hotpatching. Currently the following "
"submodules are available: \n"
"* Net::INET6Glue::INET_is_INET6\n"
"\n"
"Makes IO::Socket::INET behave like IO::Socket::IP (with fallback to like IO::"
"Socket::INET6), especially make it capable to create IPv6 sockets. This "
"makes LWP, Net::SMTP and others IPv6 capable. \n"
"* Net::INET6Glue::FTP\n"
"\n"
"Hotpatches Net::FTP to support EPRT and EPSV commands which are needed to "
"deal with FTP over IPv6. Also loads Net::INET6Glue::INET_is_INET6."
msgstr ""

#. tumbleweed/perl-Net-IP/summary
#, fuzzy
msgid "Perl extension for manipulating IPv4/IPv6 addresses"
msgstr "Interface Perl pour objets URI"

#. tumbleweed/perl-Net-IP/description
msgid ""
"This module provides functions to deal with *IPv4/IPv6* addresses. The "
"module can be used as a class, allowing the user to instantiate IP objects, "
"which can be single IP addresses, prefixes, or ranges of addresses. There is "
"also a procedural way of accessing most of the functions. Most subroutines "
"can take either *IPv4* or *IPv6* addresses transparently."
msgstr ""

#. tumbleweed/perl-Net-Ident/summary
msgid "Lookup the username on the remote end of a TCP/IP connection"
msgstr ""

#. tumbleweed/perl-Net-Netmask/summary
#, fuzzy
msgid "Parse, manipulate and lookup IP network blocks"
msgstr "Analyse, manipulation et vérification de blocs IP"

#. tumbleweed/perl-Net-Netmask/description
msgid ""
"Net::Netmask parses and understands IPv4 and IPv6 CIDR blocks (see https://"
"en.wikipedia.org/wiki/Classless_Inter-Domain_Routing for more information on "
"CIDR blocks). It's built with an object-oriented interface, with functions "
"being methods that operate on a Net::Netmask object.\n"
"\n"
"These methods provide nearly all types of information about a network block "
"that you might want.\n"
"\n"
"There are also functions to insert a network block into a table and then "
"later lookup network blocks by IP address using that table. There are "
"functions to turn a IP address range into a list of CIDR blocks. There are "
"functions to turn a list of CIDR blocks into a list of IP addresses.\n"
"\n"
"There is a function for sorting by text IP address.\n"
"\n"
"All functions understand both IPv4 and IPv6. Matches, finds, etc, will "
"always return false when an IPv4 address is matched against an IPv6 "
"address.\n"
"\n"
"IPv6 support was added in 1.9104."
msgstr ""

#. tumbleweed/perl-Net-OBS-Client/summary
msgid "Simple OBS API calls"
msgstr ""

#. tumbleweed/perl-Net-OBS-Client/description
msgid ""
"Net::OBS::Client aims to simplify usage of OBS (https://openbuildservice."
"org) API calls in perl."
msgstr ""

#. tumbleweed/perl-Net-SSLeay/summary
#, fuzzy
msgid "Perl bindings for OpenSSL and LibreSSL"
msgstr "Interface Perl vers DNS Resolver"

#. tumbleweed/perl-Net-SSLeay/description
msgid ""
"This module provides Perl bindings for libssl (an SSL/TLS API) and libcrypto "
"(a cryptography API)."
msgstr ""

#. tumbleweed/perl-Net-Telnet/summary
msgid "Interact with TELNET port or other TCP ports"
msgstr ""

#. tumbleweed/perl-Net-Telnet/description
msgid ""
"Net::Telnet allows you to make client connections to a TCP port and do "
"network I/O, especially to a port using the TELNET protocol. Simple I/O "
"methods such as print, get, and getline are provided. More sophisticated "
"interactive features are provided because connecting to a TELNET port "
"ultimately means communicating with a program designed for human "
"interaction. These interactive features include the ability to specify a "
"time-out and to wait for patterns to appear in the input stream, such as the "
"prompt from a shell. IPv6 support is available when using perl 5.14 or "
"later, see 'family()'.\n"
"\n"
"Other reasons to use this module than strictly with a TELNET port are:\n"
"\n"
"  * You're not familiar with sockets and you want a simple way to make "
"client connections to TCP services.\n"
"\n"
"  * You want to be able to specify your own time-out while connecting, "
"reading, or writing.\n"
"\n"
"  * You're communicating with an interactive program at the other end of "
"some socket or pipe and you want to wait for certain patterns to appear.\n"
"\n"
"Here's an example that prints who's logged-on to a remote host. In addition "
"to a username and password, you must also know the user's shell prompt, "
"which for this example is '\"bash$ \"'\n"
"\n"
"    use Net::Telnet ();     $t = new Net::Telnet (Timeout => "
"10,                           Prompt => '/bash\\$ $/');     $t-"
">open($host);     $t->login($username, $passwd);     @lines = $t->cmd(\"who"
"\");     print @lines;\n"
"\n"
"See the *EXAMPLES* section below for more examples.\n"
"\n"
"Usage questions should be directed to the perlmonks.org discussion group. "
"Bugs can be viewed or reported at cpan.org on the Net::Telnet page."
msgstr ""

#. tumbleweed/perl-Number-Bytes-Human/summary
msgid "Convert byte count to human readable format"
msgstr ""

#. tumbleweed/perl-Number-Bytes-Human/description
msgid ""
"THIS IS ALPHA SOFTWARE: THE DOCUMENTATION AND THE CODE WILL SUFFER CHANGES "
"SOME DAY (THANKS, GOD!).\n"
"\n"
"This module provides a formatter which turns byte counts to usual readable "
"format, like '2.0K', '3.1G', '100B'. It was inspired in the '-h' option of "
"Unix utilities like 'du', 'df' and 'ls' for \"human-readable\" output."
msgstr ""

#. tumbleweed/perl-OLE-Storage_Lite/summary
msgid "Simple Class for OLE document interface"
msgstr ""

#. tumbleweed/perl-PDF-Builder/summary
#. tumbleweed/perl-PDF-Builder/description
msgid "Facilitates the creation and modification of PDF files"
msgstr ""

#. tumbleweed/perl-Package-Stash/summary
#, fuzzy
msgid "Routines for manipulating stashes"
msgstr "Outils pour le traitement de fichiers PostScript."

#. tumbleweed/perl-Package-Stash-XS/summary
#, fuzzy
msgid "Faster and More Correct Implementation of the Package::Stash Api"
msgstr "Une implémentation portable de MPI"

#. tumbleweed/perl-Package-Stash-XS/description
msgid ""
"This is a backend for Package::Stash, which provides the functionality in a "
"way that's less buggy and much faster. It will be used by default if it's "
"installed, and should be preferred in all environments with a compiler."
msgstr ""

#. tumbleweed/perl-Parallel-ForkManager/summary
msgid "Simple Parallel Processing Fork Manager"
msgstr ""

#. tumbleweed/perl-Parallel-ForkManager/description
msgid ""
"This module is intended for use in operations that can be done in parallel "
"where the number of processes to be forked off should be limited. Typical "
"use is a downloader which will be retrieving hundreds/thousands of files.\n"
"\n"
"The code for a downloader would look something like this:\n"
"\n"
"  use LWP::Simple;   use Parallel::ForkManager;\n"
"\n"
"  ...\n"
"\n"
"  my @links=(     [\"http://www.foo.bar/rulez.data\",\"rulez_data.txt"
"\"],     [\"http://new.host/more_data.doc\",\"more_data.doc"
"\"],     ...   );\n"
"\n"
"  ...\n"
"\n"
"     my $pm = Parallel::ForkManager->new(30);\n"
"\n"
"  LINKS:   foreach my $linkarray (@links) {     $pm->start and next LINKS; # "
"do the fork\n"
"\n"
"    my ($link, $fn) = @$linkarray;     warn \"Cannot get $fn from $link"
"\"       if getstore($link, $fn) != RC_OK;\n"
"\n"
"    $pm->finish; # do the exit in the child process   }   $pm-"
">wait_all_children;\n"
"\n"
"First you need to instantiate the ForkManager with the \"new\" constructor. "
"You must specify the maximum number of processes to be created. If you "
"specify 0, then NO fork will be done; this is good for debugging purposes.\n"
"\n"
"Next, use $pm->start to do the fork. $pm returns 0 for the child process, "
"and child pid for the parent process (see also perlfunc(1p)/fork()). The "
"\"and next\" skips the internal loop in the parent process. NOTE: $pm->start "
"dies if the fork fails.\n"
"\n"
"$pm->finish terminates the child process (assuming a fork was done in the "
"\"start\").\n"
"\n"
"NOTE: You cannot use $pm->start if you are already in the child process. If "
"you want to manage another set of subprocesses in the child process, you "
"must instantiate another Parallel::ForkManager object!"
msgstr ""

#. tumbleweed/perl-Parse-ANSIColor-Tiny/summary
msgid "Determine attributes of ANSI-Colored string"
msgstr ""

#. tumbleweed/perl-Parse-ANSIColor-Tiny/description
msgid ""
"Parse a string colored with ANSI escape sequences into a structure suitable "
"for reformatting (into HTML, for example).\n"
"\n"
"The output of terminal commands can be marked up with colors and formatting "
"that in some instances you'd like to preserve.\n"
"\n"
"This module is essentially the inverse of Term::ANSIColor. The array refs "
"returned from parse can be passed back in to 'Term::ANSIColor::colored'. The "
"strings may not match exactly due to different ways the attributes can be "
"specified, but the end result should be colored the same.\n"
"\n"
"This is a '::Tiny' module... it attempts to be correct for most cases with a "
"small amount of code. It may not be 100% correct, especially in complex "
"cases. It only handles the 'm' escape sequence ('\\033[0m') which produces "
"colors and simple attributes (bold, underline) (like what can be produced "
"with Term::ANSIColor). Other escape sequences are removed by default but you "
"can disable this by passing 'remove_escapes => 0' to the constructor.\n"
"\n"
"If you do find bugs please submit tickets (with patches, if possible)."
msgstr ""

#. tumbleweed/perl-Parse-MIME/summary
msgid "Parse mime-types, match against media ranges"
msgstr ""

#. tumbleweed/perl-Parse-MIME/description
msgid ""
"This module provides basic functions for handling mime-types. It can handle "
"matching mime-types against a list of media-ranges. See section 14.1 of the "
"HTTP specification [RFC 2616] for a complete explanation: http://www.w3.org/"
"Protocols/rfc2616/rfc2616-sec14.html#sec14.1"
msgstr ""

#. tumbleweed/perl-Passwd-Keyring-Gnome/summary
msgid "Password storage implementation based on GNOME Keyring"
msgstr ""

#. tumbleweed/perl-Passwd-Keyring-Gnome/description
msgid "Password storage implementation based on GNOME Keyring."
msgstr ""

#. tumbleweed/perl-Passwd-Keyring-KDEWallet/summary
msgid "Password storage implementation based on KDE Wallet"
msgstr ""

#. tumbleweed/perl-Passwd-Keyring-KDEWallet/description
msgid "Password storage implementation based on KDE Wallet."
msgstr ""

#. tumbleweed/perl-Path-Tiny/description
msgid ""
"This module provides a small, fast utility for working with file paths. It "
"is friendlier to use than File::Spec and provides easy access to functions "
"from several other core file handling modules. It aims to be smaller and "
"faster than many alternatives on CPAN, while helping people do many common "
"things in consistent and less error-prone ways.\n"
"\n"
"Path::Tiny does not try to work for anything except Unix-like and Win32 "
"platforms. Even then, it might break if you try something particularly "
"obscure or tortuous. (Quick! What does this mean: '///../../..//./././a//"
"b/.././c/././'? And how does it differ on Win32?)\n"
"\n"
"All paths are forced to have Unix-style forward slashes. Stringifying the "
"object gives you back the path (after some clean up).\n"
"\n"
"File input/output methods 'flock' handles before reading or writing, as "
"appropriate (if supported by the platform and/or filesystem).\n"
"\n"
"The '*_utf8' methods ('slurp_utf8', 'lines_utf8', etc.) operate in raw mode. "
"On Windows, that means they will not have CRLF translation from the ':crlf' "
"IO layer. Installing Unicode::UTF8 0.58 or later will speed up '*_utf8' "
"situations in many cases and is highly recommended. Alternatively, "
"installing PerlIO::utf8_strict 0.003 or later will be used in place of the "
"default ':encoding(UTF-8)'.\n"
"\n"
"This module depends heavily on PerlIO layers for correct operation and thus "
"requires Perl 5.008001 or later."
msgstr ""

#. tumbleweed/perl-Perl-Critic-Community/summary
msgid "Community-inspired Perl::Critic policies"
msgstr ""

#. tumbleweed/perl-Perl-Critic-Community/description
msgid ""
"A set of Perl::Critic policies to enforce the practices generally "
"recommended by subsets of the Perl community, particularly on IRC. Formerly "
"known as Perl::Critic::Freenode. Because this policy \"theme\" is designed "
"to be used with zero configuration on the command line, some duplication "
"will occur if it is used in combination with core Perl::Critic policies."
msgstr ""

#. tumbleweed/perl-Perl-Critic-Policy-Variables-ProhibitLoopOnHash/description
msgid ""
"When \"looping over hashes,\" we mean looping over hash keys or hash values. "
"If you forgot to call 'keys' or 'values' you will accidentally loop over "
"both.\n"
"\n"
"    foreach my $foo (%hash) {...}        # not ok     action() for "
"%hash;                  # not ok     foreach my $foo ( keys %hash ) {...} # "
"ok     action() for values %hash;           # ok\n"
"\n"
"An effort is made to detect expressions:\n"
"\n"
"    action() for %hash ? keys %hash : ();                             # "
"ok     action() for %{ $hash{'stuff'} } ? keys %{ $hash{'stuff'} } : (); # "
"ok\n"
"\n"
"(Granted, the second example there doesn't make much sense, but I have found "
"a variation of it in real code.)"
msgstr ""

#. tumbleweed/perl-Perl-PrereqScanner-NotQuiteLite/description
msgid ""
"Perl::PrereqScanner::NotQuiteLite is yet another prerequisites scanner. It "
"passes almost all the scanning tests for Perl::PrereqScanner and Module::"
"ExtractUse (ie. except for a few dubious ones), and runs slightly faster "
"than PPI-based Perl::PrereqScanner. However, it doesn't run as fast as Perl::"
"PrereqScanner::Lite (which uses an XS lexer).\n"
"\n"
"Perl::PrereqScanner::NotQuiteLite also recognizes 'eval'. Prerequisites in "
"'eval' are not considered as requirements, but you can collect them as "
"suggestions.\n"
"\n"
"Conditional requirements or requirements loaded in a block are treated as "
"recommends. Noed modules are stored separately (since 0.94). You may or may "
"not need to merge them into requires.\n"
"\n"
"Perl::PrereqScanner::NotQuiteLite can also recognize some of the new "
"language features such as 'say', subroutine signatures, and postfix "
"dereferences, to improve the minimum perl requirement (since 0.9905)."
msgstr ""

#. tumbleweed/perl-PerlX-Maybe/summary
msgid "Return a Pair Only If They Are Both Defined"
msgstr ""

#. tumbleweed/perl-PerlX-Maybe/description
msgid ""
"Moose classes (and some other classes) distinguish between an attribute "
"being unset and the attribute being set to undef. Supplying a constructor "
"arguments like this:\n"
"\n"
" my $bob = Person->new(     name => $name,     age => $age,  );\n"
"\n"
"Will result in the 'name' and 'age' attributes possibly being set to undef "
"(if the corresponding '$name' and '$age' variables are not defined), which "
"may violate the Person class' type constraints.\n"
"\n"
"(Note: if you are the _author_ of the class in question, you can solve this "
"using MooseX::UndefTolerant. However, some of us are stuck using non-"
"UndefTolerant classes written by third parties.)\n"
"\n"
"To ensure that the Person constructor does not try to set a name or age at "
"all when they are undefined, ugly looking code like this is often used:\n"
"\n"
" my $bob = Person->new(     defined $name ? (name => $name) : (),     "
"defined $age ? (age => $age) : (),  );\n"
"\n"
"or:\n"
"\n"
" use PerlX::Maybe;\n"
"\n"
" my $bob = Person->new(     (name => $name) x!!(defined $name),     (age  => "
"$age)  x!!(defined $age),  );\n"
"\n"
"A slightly more elegant solution is the 'maybe' function."
msgstr ""

#. tumbleweed/perl-Plack-App-WebSocket/summary
msgid "WebSocket server as a PSGI application"
msgstr ""

#. tumbleweed/perl-Plack-App-WebSocket/description
msgid ""
"This module is a PSGI application that creates an endpoint for WebSocket "
"connections."
msgstr ""

#. tumbleweed/perl-Plack-Middleware-FixMissingBodyInRedirect/summary
msgid ""
"Plack::Middleware which sets body for redirect response, if it's not alr[cut]"
msgstr ""

#. tumbleweed/perl-Plack-Middleware-FixMissingBodyInRedirect/description
msgid "This module sets body in redirect response, if it's not already set."
msgstr ""

#. tumbleweed/perl-Plack-Middleware-LogErrors/description
msgid ""
"'psgi.errors' defaults to 'STDERR' in most backends, which results in "
"content going somewhere unhelpful like the server console.\n"
"\n"
"This middleware simply remaps the 'psgi.errors' stream to the 'psgix.logger' "
"stream, or an explicit logger that you provide.\n"
"\n"
"This is especially handy when used in combination with other middlewares "
"such as Plack::Middleware::LogWarn (which diverts Perl warnings to 'psgi."
"errors'); Plack::Middleware::HTTPExceptions (which diverts uncaught "
"exceptions to 'psgi.errors'); and Plack::Middleware::AccessLog, which "
"defaults to 'psgi.errors' when not passed a logger -- which is also "
"automatically applied via plackup (so if you provided no '--access-log' "
"option indicating a filename, 'psgi.errors' is used)."
msgstr ""

#. tumbleweed/perl-Plack-Middleware-RemoveRedundantBody/summary
msgid ""
"Plack::Middleware which removes body for HTTP response if it's not required"
msgstr ""

#. tumbleweed/perl-Plack-Middleware-RemoveRedundantBody/description
msgid "This module removes body in HTTP response, if it's not required."
msgstr ""

#. tumbleweed/perl-Plack-Middleware-ReverseProxy/summary
msgid "Supports app to run as a reverse proxy backend"
msgstr ""

#. tumbleweed/perl-Plack-Middleware-ReverseProxy/description
msgid ""
"Plack::Middleware::ReverseProxy resets some HTTP headers, which changed by "
"reverse-proxy. You can specify the reverse proxy address and stop fake "
"requests using 'enable_if' directive in your app.psgi."
msgstr ""

#. tumbleweed/perl-Plack-Test-Agent/summary
#. tumbleweed/perl-Plack-Test-Agent/description
msgid "OO interface for testing low-level Plack/PSGI apps"
msgstr ""

#. tumbleweed/perl-Pod-AsciiDoctor/summary
#. tumbleweed/perl-Pod-AsciiDoctor/description
msgid "Convert from POD to AsciiDoc"
msgstr ""

#. tumbleweed/perl-Pod-Elemental/summary
msgid "Work with nestable Pod elements"
msgstr ""

#. tumbleweed/perl-Pod-Elemental/description
msgid ""
"Pod::Elemental is a system for treating a Pod (plain old documentation|"
"perlpod) documents as trees of elements. This model may be familiar from "
"many other document systems, especially the HTML DOM. Pod::Elemental's "
"document object model is much less sophisticated than the HTML DOM, but "
"still makes a lot of document transformations easy.\n"
"\n"
"In general, you'll want to read in a Pod document and then perform a number "
"of prepackaged transformations on it. The most common of these will be the "
"Pod5 transformation|Pod::Elemental::Transformer::Pod5, which assumes that "
"the basic meaning of Pod commands described in the Perl 5 documentation "
"hold: '=begin', '=end', and '=for' commands mark regions of the document, "
"leading whitespace marks a verbatim paragraph, and so on. The Pod5 "
"transformer also eliminates the need to track elements representing vertical "
"whitespace."
msgstr ""

#. tumbleweed/perl-Pod-Parser/summary
msgid "Base Class for Creating Pod Filters and Translators"
msgstr ""

#. tumbleweed/perl-Pod-Parser/description
msgid ""
"*NOTE: This module is considered legacy; modern Perl releases (5.18 and "
"higher) are going to remove Pod-Parser from core and use Pod-Simple for all "
"things POD.* \n"
"*Pod::Parser* is a base class for creating POD filters and translators. It "
"handles most of the effort involved with parsing the POD sections from an "
"input stream, leaving subclasses free to be concerned only with performing "
"the actual translation of text. \n"
"*Pod::Parser* parses PODs, and makes method calls to handle the various "
"components of the POD. Subclasses of *Pod::Parser* override these methods to "
"translate the POD into whatever output format they desire."
msgstr ""

#. tumbleweed/perl-Pod-Usage/summary
msgid "Extracts POD documentation and shows usage information"
msgstr ""

#. tumbleweed/perl-Proc-SyncExec/summary
msgid "Spawn processes but report exec() errors"
msgstr ""

#. tumbleweed/perl-Proc-SyncExec/description
msgid ""
"This module contains functions for synchronized process spawning with full "
"error return. If the child's exec() call fails the reason for the failure is "
"reported back to the parent."
msgstr ""

#. tumbleweed/perl-Protocol-HTTP2/summary
msgid "HTTP/2 protocol implementation (RFC 7540)"
msgstr ""

#. tumbleweed/perl-Protocol-HTTP2/description
msgid ""
"Protocol::HTTP2 is HTTP/2 protocol implementation (at https://tools.ietf.org/"
"html/rfc7540) with stateful decoders/encoders of HTTP/2 frames. You may use "
"this module to implement your own HTTP/2 client/server/intermediate on top "
"of your favorite event loop over plain or tls socket (see examples)."
msgstr ""

#. tumbleweed/perl-RPC-XML/summary
msgid "Set of classes for core data, message and XML handling"
msgstr ""

#. tumbleweed/perl-Redis/description
msgid ""
"Pure perl bindings for https://redis.io/\n"
"\n"
"This version supports protocol 2.x (multi-bulk) or later of Redis available "
"at https://github.com/antirez/redis/.\n"
"\n"
"This documentation lists commands which are exercised in test suite, but "
"additional commands will work correctly since protocol specifies enough "
"information to support almost all commands with same piece of code with a "
"little help of 'AUTOLOAD'."
msgstr ""

#. tumbleweed/perl-Ref-Util/summary
msgid "Utility functions for checking references"
msgstr ""

#. tumbleweed/perl-Ref-Util/description
msgid ""
"Ref::Util introduces several functions to help identify references in a\n"
"*smarter* (and usually faster) way. In short:\n"
"\n"
"    \n"
"\n"
"    ref( $foo ) eq 'ARRAY'              is_plain_arrayref( $foo )\n"
"\n"
"    use Scalar::Util qw( reftype );     reftype( $foo ) eq 'ARRAY'          "
"is_arrayref( $foo )\n"
"\n"
"The difference: \n"
"* * No comparison against a string constant\n"
"\n"
"When you call 'ref', you stringify the reference and then compare it to some "
"string constant (like 'ARRAY' or 'HASH'). Not just awkward, it's brittle "
"since you can mispell the string.\n"
"\n"
"If you use Scalar::Util's 'reftype', you still compare it as a string:\n"
"\n"
"    if ( reftype($foo) eq 'ARRAY' ) { ... } \n"
"* * Supports blessed variables \n"
"*Note:* In future versions, the idea is to make the default functions use "
"the *plain* variation, which means explicitly non-blessed references.\n"
"\n"
"If you want to explicitly check for *blessed* references, you should use the "
"'is_blessed_*' functions. There will be an 'is_any_*' variation which will "
"act like the current main functions - not caring whether it's blessed or "
"not.\n"
"\n"
"When calling 'ref', you receive either the reference type (*SCALAR*,\n"
"*ARRAY*, *HASH*, etc.) or the package it's blessed into.\n"
"\n"
"When calling 'is_arrayref' (et. al.), you check the variable flags, so even "
"if it's blessed, you know what type of variable is blessed.\n"
"\n"
"    my $foo = bless {}, 'PKG';     ref($foo) eq 'HASH'; # fails\n"
"\n"
"    use Ref::Util 'is_hashref';     my $foo = bless {}, 'PKG';     "
"is_hashref($foo); # works\n"
"\n"
"On the other hand, in some situations it might be better to specifically "
"exclude blessed references. The rationale for that might be that merely "
"because some object happens to be implemented using a hash doesn't mean it's "
"necessarily correct to treat it as a hash. For these situations, you can use "
"'is_plain_hashref' and friends, which have the same performance benefits as "
"'is_hashref'.\n"
"\n"
"There is also a family of functions with names like 'is_blessed_hashref'; "
"these return true for blessed object instances that are implemented using "
"the relevant underlying type. \n"
"* * Supports tied variables and magic\n"
"\n"
"Tied variables (used in Readonly, for example) are supported.\n"
"\n"
"    use Ref::Util qw<is_plain_hashref>;     use Readonly;\n"
"\n"
"    Readonly::Scalar my $rh2 => { a => { b => 2 } };     "
"is_plain_hashref($rh2); # success\n"
"\n"
"Ref::Util added support for this in 0.100. Prior to this version the test "
"would fail. \n"
"* * Ignores overloading\n"
"\n"
"These functions ignore overloaded operators and simply check the variable "
"type. Overloading will likely not ever be supported, since I deem it "
"problematic and confusing.\n"
"\n"
"Overloading makes your variables opaque containers and hides away *what* "
"they are and instead require you to figure out *how* to use them. This leads "
"to code that has to test different abilities (in 'eval', so it doesn't "
"crash) and to interfaces that get around what a person thought you would do "
"with a variable. This would have been alright, except there is no clear way "
"of introspecting it. \n"
"* * Ignores subtle types:\n"
"\n"
"The following types, provided by Scalar::Util's 'reftype', are not "
"supported:\n"
"\n"
"  * * 'VSTRING'\n"
"\n"
"This is a 'PVMG' (\"normal\" variable) with a flag set for VSTRINGs. Since "
"this is not a reference, it is not supported.\n"
"\n"
"  * * 'LVALUE'\n"
"\n"
"A variable that delegates to another scalar. Since this is not a reference, "
"it is not supported.\n"
"\n"
"  * * 'INVLIST'\n"
"\n"
"I couldn't find documentation for this type.\n"
"\n"
"Support might be added, if a good reason arises. \n"
"* * Usually fast\n"
"\n"
"When possible, Ref::Util uses Ref::Util::XS as its implementation. (If you "
"don't have a C compiler available, it uses a pure Perl fallback that has all "
"the other advantages of Ref::Util, but isn't as fast.)\n"
"\n"
"In fact, Ref::Util::XS has two alternative implementations available "
"internally, depending on the features supported by the version of Perl "
"you're using. For Perls that supports custom OPs, we actually add an OP "
"(which is faster); for other Perls, the implementation that simply calls an "
"XS function (which is still faster than the pure-Perl equivalent).\n"
"\n"
"See below for benchmark results."
msgstr ""

#. tumbleweed/perl-Ref-Util-XS/summary
#, fuzzy
msgid "XS implementation for Ref::Util"
msgstr "7.0 Documentation"

#. tumbleweed/perl-Ref-Util-XS/description
msgid ""
"Ref::Util::XS is the XS implementation of Ref::Util, which provides several "
"functions to help identify references in a more convenient way than the "
"usual approach of examining the return value of 'ref'.\n"
"\n"
"You should use Ref::Util::XS by installing Ref::Util itself: if the system "
"you install it on has a C compiler available, 'Ref::Util::XS' will be "
"installed and used automatically, providing a significant speed boost to "
"everything that uses 'Ref::Util'.\n"
"\n"
"See Ref::Util for full documentation of the available functions."
msgstr ""

#. tumbleweed/perl-Regexp-Trie/summary
msgid "Builds trie-ized regexp"
msgstr ""

#. tumbleweed/perl-Regexp-Trie/description
msgid ""
"This module is a faster but simpler version of Regexp::Assemble or Regexp::"
"Optimizer. It builds a trie-ized regexp as above.\n"
"\n"
"This module is faster than Regexp::Assemble but you can only add literals. 'a"
"+b' is treated as 'a\\+b', not \"more than one a's followed by b\".\n"
"\n"
"I wrote this module because I needed something faster than Regexp::Assemble "
"and Regexp::Optimizer. If you need more minute control, use those instead."
msgstr ""

#. tumbleweed/perl-Reply/summary
msgid "Read, eval, print, loop, yay!"
msgstr ""

#. tumbleweed/perl-Reply/description
msgid ""
"NOTE: This is an early release, and implementation details of this module "
"are still very much in flux. Feedback is welcome!\n"
"\n"
"Reply is a lightweight, extensible REPL for Perl. It is plugin-based (see "
"Reply::Plugin), and through plugins supports many advanced features such as "
"coloring and pretty printing, readline support, and pluggable commands."
msgstr ""

#. tumbleweed/perl-Role-Tiny/summary
msgid "Roles: a nouvelle cuisine portion size slice of Moose"
msgstr ""

#. tumbleweed/perl-SQL-Abstract-Classic/description
msgid ""
"This module was inspired by the excellent DBIx::Abstract. However, in using "
"that module I found that what I really wanted to do was generate SQL, but "
"still retain complete control over my statement handles and use the DBI "
"interface. So, I set out to create an abstract SQL generation module.\n"
"\n"
"While based on the concepts used by DBIx::Abstract, there are several "
"important differences, especially when it comes to WHERE clauses. I have "
"modified the concepts used to make the SQL easier to generate from Perl data "
"structures and, IMO, more intuitive. The underlying idea is for this module "
"to do what you mean, based on the data structures you provide it. The big "
"advantage is that you don't have to modify your code every time your data "
"changes, as this module figures it out."
msgstr ""

#. tumbleweed/perl-SQL-SplitStatement/description
msgid ""
"This is a simple module which tries to split any SQL code, even including "
"non-standard extensions (for the details see the SUPPORTED DBMSs section "
"below), into the atomic statements it is composed of.\n"
"\n"
"The logic used to split the SQL code is more sophisticated than a raw "
"'split' on the ';' (semicolon) character: first, various different statement "
"terminator _tokens_ are recognized (see below for the list), then this "
"module is able to correctly handle the presence of said tokens inside "
"identifiers, values, comments, 'BEGIN ... END' blocks (even nested), _dollar-"
"quoted_ strings, MySQL custom 'DELIMITER's, procedural code etc., as "
"(partially) exemplified in the SYNOPSIS above.\n"
"\n"
"Consider however that this is by no means a validating parser (technically "
"speaking, it's just a _context-sensitive tokenizer_). It should rather be "
"seen as an in-progress _heuristic_ approach, which will gradually improve as "
"test cases will be reported. This also means that, except for the "
"LIMITATIONS detailed below, there is no known (to the author) SQL code the "
"most current release of this module can't correctly split.\n"
"\n"
"The test suite bundled with the distribution (which now includes the popular "
"_Sakila_ and _Pagila_ sample db schemata, as detailed in the SHOWCASE "
"section below) should give you an idea of the capabilities of this module\n"
"\n"
"If your atomic statements are to be fed to a DBMS, you are encouraged to use "
"DBIx::MultiStatementDo instead, which uses this module and also (optionally) "
"offers automatic transactions support, so that you'll have the _all-or-"
"nothing_ behavior you would probably want."
msgstr ""

#. tumbleweed/perl-SUPER/summary
msgid "Control superclass method dispatch"
msgstr ""

#. tumbleweed/perl-Search-Elasticsearch/summary
msgid "The official client for Elasticsearch"
msgstr ""

#. tumbleweed/perl-Search-Elasticsearch/description
msgid ""
"Search::Elasticsearch is the official Perl client for Elasticsearch, "
"supported by at http://elastic.co. Elasticsearch itself is a flexible and "
"powerful open source, distributed real-time search and analytics engine for "
"the cloud. You can read more about it on at http://www.elastic.co."
msgstr ""

#. tumbleweed/perl-Search-Xapian/summary
#, fuzzy
msgid "Perl XS frontend to the Xapian C++ search library"
msgstr "Interface python pourla bibliothèque gdbm"

#. tumbleweed/perl-Search-Xapian/description
msgid ""
"This module wraps most methods of most Xapian classes. The missing classes "
"and methods should be added in the future. It also provides a simplified, "
"more 'perlish' interface to some common operations, as demonstrated above.\n"
"\n"
"There are some gaps in the POD documentation for wrapped classes, but you "
"can read the Xapian C++ API documentation at https://xapian.org/docs/apidoc/"
"html/annotated.html for details of these. Alternatively, take a look at the "
"code in the examples and tests.\n"
"\n"
"If you want to use Search::Xapian and the threads module together, make sure "
"you're using Search::Xapian >= 1.0.4.0 and Perl >= 5.8.7. As of 1.0.4.0, "
"Search::Xapian uses CLONE_SKIP to make sure that the perl wrapper objects "
"aren't copied to new threads - without this the underlying C++ objects can "
"get destroyed more than once.\n"
"\n"
"If you encounter problems, or have any comments, suggestions, patches, etc "
"please email the Xapian-discuss mailing list (details of which can be found "
"at https://xapian.org/lists)."
msgstr ""

#. tumbleweed/perl-Sereal/summary
#, fuzzy
msgid "Binary serialization module for Perl"
msgstr "Outils de traçage"

#. tumbleweed/perl-Sereal/description
msgid ""
"_Sereal_ is an efficient, compact-output, binary and feature-rich "
"serialization protocol. The Perl encoder is implemented as the Sereal::"
"Encoder module, the Perl decoder correspondingly as Sereal::Decoder. They "
"are distributed separately to allow for safe upgrading without downtime. "
"(Hint: Upgrade the decoder everywhere first, then the encoder.)\n"
"\n"
"This 'Sereal' module is a very thin wrapper around both 'Sereal::Encoder' "
"and 'Sereal::Decoder'. It depends on both and loads both. So if you have a "
"user of both encoder and decoder, it is enough to depend on a particular "
"version of 'Sereal' and you'll get the most recent released versions of "
"'Sereal::Encoder' and 'Sereal::Decoder' whose version is smaller than or "
"equal to the version of 'Sereal' you depend on.\n"
"\n"
"The protocol specification and many other bits of documentation can be found "
"in the github repository. Right now, the specification is at https://github."
"com/Sereal/Sereal/blob/master/sereal_spec.pod, there is a discussion of the "
"design objectives in https://github.com/Sereal/Sereal/blob/master/README."
"pod, and the output of our benchmarks can be seen at https://github.com/"
"Sereal/Sereal/wiki/Sereal-Comparison-Graphs."
msgstr ""

#. tumbleweed/perl-Session-Token/summary
msgid "Secure, efficient, simple random session token generation"
msgstr ""

#. tumbleweed/perl-Session-Token/description
msgid ""
"This module provides a secure, efficient, and simple interface for creating "
"session tokens, password reset codes, temporary passwords, random "
"identifiers, and anything else you can think of.\n"
"\n"
"When a Session::Token object is created, 1024 bytes are read from '/dev/"
"urandom' (Linux, Solaris, most BSDs), '/dev/arandom' (some older BSDs), or "
"Crypt::Random::Source::Strong::Win32 (Windows). These bytes are used to seed "
"the at http://www.burtleburtle.net/bob/rand/isaacafa.html pseudo random "
"number generator.\n"
"\n"
"Once a generator is created, you can repeatedly call the 'get' method on the "
"generator object and it will return a new token each time. \n"
"*IMPORTANT*: If your application calls 'fork', make sure that any generators "
"are re-created in one of the processes after the fork since forking will "
"duplicate the generator state and both parent and child processes will go on "
"to produce identical tokens (just like perl's rand after it is seeded).\n"
"\n"
"After the generator context is created, no system calls are used to generate "
"tokens. This is one way that Session::Token helps with efficiency. However, "
"this is only important for certain use cases (generally not web sessions).\n"
"\n"
"ISAAC is a cryptographically secure PRNG that improves on the well-known RC4 "
"algorithm in some important areas. For instance, it doesn't have short "
"cycles or initial bias like RC4 does. A theoretical shortest possible cycle "
"in ISAAC is '2**40', although no cycles this short have ever been found (and "
"probably don't exist at all). On average, ISAAC cycles are '2**8295'."
msgstr ""

#. tumbleweed/perl-Set-IntSpan/summary
msgid "Manages sets of integers"
msgstr ""

#. tumbleweed/perl-Set-IntSpan/description
msgid ""
"'Set::IntSpan' manages sets of integers. It is optimized for sets that have "
"long runs of consecutive integers. These arise, for example, in .newsrc "
"files, which maintain lists of articles:\n"
"\n"
"  alt.foo: 1-21,28,31   alt.bar: 1-14192,14194,14196-14221\n"
"\n"
"A run of consecutive integers is sometimes called a _span_.\n"
"\n"
"Sets are stored internally in a run-length coded form. This provides for "
"both compact storage and efficient computation. In particular, set "
"operations can be performed directly on the encoded representation.\n"
"\n"
"'Set::IntSpan' is designed to manage finite sets. However, it can also "
"represent some simple infinite sets, such as { x | x>n }. This allows "
"operations involving complements to be carried out consistently, without "
"having to worry about the actual value of INT_MAX on your machine."
msgstr ""

#. tumbleweed/perl-Set-Tiny/summary
#, fuzzy
msgid "Simple sets of strings"
msgstr "Un interface client pour le serveur LDAP"

#. tumbleweed/perl-Set-Tiny/description
msgid ""
"Set::Tiny is a thin wrapper around regular Perl hashes to perform often "
"needed set operations, such as testing two sets of strings for equality, or "
"checking whether one is contained within the other.\n"
"\n"
"For a more complete implementation of mathematical set theory, see Set::"
"Scalar. For sets of arbitrary objects, see Set::Object."
msgstr ""

#. tumbleweed/perl-Socket6/summary
msgid "IPv6 related part of the C socket.h defines and structure manipulators"
msgstr ""

#. tumbleweed/perl-Socket6/description
msgid ""
"This module provides glue routines to the various IPv6 functions.\n"
"\n"
"If you use the Socket6 module, be sure to specify \"use Socket\" as well as "
"\"use Socket6\"."
msgstr ""

#. tumbleweed/perl-Software-License/summary
msgid "Packages that provide templated software licenses"
msgstr ""

#. tumbleweed/perl-Spreadsheet-ParseXLSX/summary
msgid "Parse Xlsx Files"
msgstr ""

#. tumbleweed/perl-Spreadsheet-ParseXLSX/description
msgid ""
"This module is an adaptor for Spreadsheet::ParseExcel that reads XLSX files. "
"For documentation about the various data that you can retrieve from these "
"classes, please see Spreadsheet::ParseExcel, Spreadsheet::ParseExcel::"
"Workbook, Spreadsheet::ParseExcel::Worksheet, and Spreadsheet::ParseExcel::"
"Cell."
msgstr ""

#. tumbleweed/perl-Spreadsheet-Read/perl-Spreadsheet-Read-scripts/summary
msgid "Scripts to Work with Spreadsheets"
msgstr ""

#. tumbleweed/perl-Spreadsheet-Read/perl-Spreadsheet-Read-scripts/description
msgid "This package includes some scripts to work with spreadsheets."
msgstr ""

#. tumbleweed/perl-Spreadsheet-ReadSXC/description
msgid ""
"Spreadsheet::ReadSXC extracts data from OpenOffice 1.x spreadsheet files (."
"sxc). It exports the function read_sxc() which takes a filename and an "
"optional reference to a hash of options as arguments and returns a reference "
"to a hash of references to two-dimensional arrays. The hash keys correspond "
"to the names of worksheets in the OpenOffice workbook. The two-dimensional "
"arrays correspond to rows and cells in the respective spreadsheets. If you "
"don't like this because the order of sheets is not preserved in a hash, read "
"on. The 'OrderBySheet' option provides an array of hashes instead.\n"
"\n"
"If you prefer to unpack the .sxc file yourself, you can use the function "
"read_xml_file() instead and pass the path to content.xml as an argument. Or "
"you can extract the XML string from content.xml and pass the string to the "
"function read_xml_string(). Both functions also take a reference to a hash "
"of options as an optional second argument.\n"
"\n"
"Spreadsheet::ReadSXC uses XML::Twig to parse the XML contained in .sxc "
"files. Only the contents of text:p elements are returned, not the actual "
"values of table:value attributes. For example, a cell might have a table:"
"value-type attribute of \"currency\", a table:value attribute of "
"\"-1500.99\" and a table:currency attribute of \"USD\". The text:p element "
"would contain \"-$1,500.99\". This is the string which is returned by the "
"read_sxc() function, not the value of -1500.99.\n"
"\n"
"Spreadsheet::ReadSXC was written with data import into an SQL database in "
"mind. Therefore empty spreadsheet cells correspond to undef values in array "
"rows. The example code above shows how to replace undef values with empty "
"strings.\n"
"\n"
"If the .sxc file contains an empty spreadsheet its hash element will point "
"to an empty array (unless you use the 'NoTruncate' option in which case it "
"will point to an array of an array containing one undefined element).\n"
"\n"
"OpenOffice uses UTF-8 encoding. It depends on your environment how the data "
"returned by the XML Parser is best handled:\n"
"\n"
"  use Unicode::String qw(latin1 utf8);   $unicode_string = utf8($"
"$workbook_ref{\"Sheet1\"}[0][0])->as_string;\n"
"\n"
"  \n"
"\n"
"  $latin1_string = utf8($$workbook_ref{\"Sheet1\"}[0][0])->latin1;\n"
"\n"
"Of course there are other modules than Unicode::String on CPAN that handle "
"conversion between encodings. It's your choice.\n"
"\n"
"Table rows in .sxc files may have a \"table:number-rows-repeated\" "
"attribute, which is often used for consecutive empty rows. When you format "
"whole rows and/or columns in OpenOffice, it sets the numbers of rows in a "
"worksheet to 32,000 and the number of columns to 256, even if only a few "
"lower-numbered rows and cells actually contain data. Spreadsheet::ReadSXC "
"truncates such sheets so that there are no empty rows after the last row "
"containing data and no empty columns after the last column containing data "
"(unless you use the 'NoTruncate' option).\n"
"\n"
"Still it is perfectly legal for an .sxc file to apply the \"table:number-"
"rows-repeated\" attribute to rows that actually contain data (although I "
"have only been able to produce such files manually, not through OpenOffice "
"itself). To save on memory usage in these cases, Spreadsheet::ReadSXC does "
"not copy rows by value, but by reference (remember that multi-dimensional "
"arrays in Perl are really arrays of references to arrays). Therefore, if you "
"change a value in one row, it is possible that you find the corresponding "
"value in the next row changed, too:\n"
"\n"
"  $$workbook_ref{\"Sheet1\"}[0][0] = 'new string';   print $"
"$workbook_ref{\"Sheet1\"}[1][0];\n"
"\n"
"As of version 0.20 the references returned by read_sxc() et al. remain valid "
"after subsequent calls to the same function. In earlier versions, calling "
"read_sxc() with a different file as the argument would change the data "
"referenced by the original return value, so you had to derefence it before "
"making another call. Thanks to H. Merijn Brand for fixing this."
msgstr ""

#. tumbleweed/perl-Starman/description
msgid ""
"Starman is a PSGI perl web server that has unique features such as: \n"
"* High Performance\n"
"\n"
"Uses the fast XS/C HTTP header parser \n"
"* Preforking\n"
"\n"
"Spawns workers preforked like most high performance UNIX servers do. Starman "
"also reaps dead children and automatically restarts the worker pool. \n"
"* Signals\n"
"\n"
"Supports 'HUP' for graceful worker restarts, and 'TTIN'/'TTOU' to "
"dynamically increase or decrease the number of worker processes, as well as "
"'QUIT' to gracefully shutdown the worker processes. \n"
"* Superdaemon aware\n"
"\n"
"Supports Server::Starter for hot deploy and graceful restarts. \n"
"* Multiple interfaces and UNIX Domain Socket support\n"
"\n"
"Able to listen on multiple interfaces including UNIX sockets. \n"
"* Small memory footprint\n"
"\n"
"Preloading the applications with '--preload-app' command line option enables "
"copy-on-write friendly memory management. Also, the minimum memory usage "
"Starman requires for the master process is 7MB and children (workers) is "
"less than 3.0MB. \n"
"* PSGI compatible\n"
"\n"
"Can run any PSGI applications and frameworks \n"
"* HTTP/1.1 support\n"
"\n"
"Supports chunked requests and responses, keep-alive and pipeline requests. \n"
"* UNIX only\n"
"\n"
"This server does not support Win32."
msgstr ""

#. tumbleweed/perl-String-CRC32/description
msgid ""
"The *CRC32* module calculates CRC sums of 32 bit lengths as integers. It "
"generates the same CRC values as ZMODEM, PKZIP, PICCHECK and many others.\n"
"\n"
"Despite its name, this module is able to compute the checksum of files as "
"well as strings."
msgstr ""

#. tumbleweed/perl-String-Trim/summary
msgid "Trim whitespace from your strings"
msgstr ""

#. tumbleweed/perl-String-Trim/description
msgid ""
"'String::Trim' trims whitespace off your strings. chomp trims only "
"'$/' (typically, that's newline), but 'trim' will trim all leading and "
"trailing whitespace."
msgstr ""

#. tumbleweed/perl-String-Util/summary
#, fuzzy
msgid "String processing utility functions"
msgstr "Les fonctions utiles pour Gtk"

#. tumbleweed/perl-String-Util/description
msgid ""
"String::Util provides a collection of small, handy functions for processing "
"strings in various ways."
msgstr ""

#. tumbleweed/perl-Sub-Exporter/summary
msgid "Sophisticated exporter for custom-built routines"
msgstr ""

#. tumbleweed/perl-Sub-Exporter/description
msgid ""
"*ACHTUNG!* If you're not familiar with Exporter or exporting, read Sub::"
"Exporter::Tutorial first!"
msgstr ""

#. tumbleweed/perl-Sub-HandlesVia/summary
#, fuzzy
msgid "Alternative handles_via implementation"
msgstr "Implantation Java de getopt"

#. tumbleweed/perl-Sub-HandlesVia/description
msgid ""
"If you've used Moose's native attribute traits, or MooX::HandlesVia before, "
"you should have a fairly good idea what this does.\n"
"\n"
"Why re-invent the wheel? Well, this is an implementation that should work "
"okay with Moo, Moose, Mouse, and any other OO toolkit you throw at it. One "
"ring to rule them all, so to speak.\n"
"\n"
"Also, unlike MooX::HandlesVia, it honours type constraints, plus it doesn't "
"have the limitation that it can't mutate non-reference values."
msgstr ""

#. tumbleweed/perl-Syntax-Keyword-Try/description
msgid ""
"This module provides a syntax plugin that implements exception-handling "
"semantics in a form familiar to users of other languages, being built on a "
"block labeled with the 'try' keyword, followed by at least one of a 'catch' "
"or 'finally' block.\n"
"\n"
"As well as providing a handy syntax for this useful behaviour, this module "
"also serves to contain a number of code examples for how to implement parser "
"plugins and manipulate optrees to provide new syntax and behaviours for perl "
"code.\n"
"\n"
"Syntax similar to this module has now been added to core perl, starting at "
"version 5.34.0. If you are writing new code, it is suggested that you "
"instead use the Feature::Compat::Try module instead, as that will enable the "
"core feature on those supported perl versions, falling back to 'Syntax::"
"Keyword::Try' on older perls."
msgstr ""

#. tumbleweed/perl-Sys-MemInfo/summary
msgid "Query the total free and used physical memory"
msgstr ""

#. tumbleweed/perl-Sys-MemInfo/description
msgid ""
"Sys::MemInfo return the total amount of free and used physical memory in "
"bytes in totalmem and freemem variables.\n"
"\n"
"Total amount of free and user swap memory are alse returned in totalswap and "
"freeswap variables.\n"
"\n"
"This module has been tested on Linux 3.13.0, UnixWare 7.1.2, AIX5, OpenBSD "
"3.8, NetBSD 2.0.2, FreBSD 5.4, HPUX11, Solaris 9, Tru64 5.1, Irix 6.5, Mac "
"OS X 10.2 darwin and Windows XP.\n"
"\n"
"It should work on FreeBSD 4 and Windows 9X/ME/NT/200X/Vista."
msgstr ""

#. tumbleweed/perl-System-Command/summary
msgid "Object for running system commands"
msgstr ""

#. tumbleweed/perl-System-Command/description
msgid ""
"System::Command is a class that launches external system commands and return "
"an object representing them, allowing to interact with them through their "
"'STDIN', 'STDOUT' and 'STDERR' handles."
msgstr ""

#. tumbleweed/perl-Template-Plugin-Filter-ANSIColor/summary
msgid "Colorizes text using ANSI colors"
msgstr ""

#. tumbleweed/perl-Template-Plugin-Filter-ANSIColor/description
msgid "colorizes text using ANSI colors"
msgstr ""

#. tumbleweed/perl-Template-Plugin-JSON-Escape/summary
msgid "Adds a .json vmethod and a json filter"
msgstr ""

#. tumbleweed/perl-Template-Plugin-JSON-Escape/description
msgid ""
"This plugin allows you to embed JSON strings in HTML. In the output, special "
"characters such as '<' and '&' are escaped as '\\uxxxx' to prevent XSS "
"attacks.\n"
"\n"
"It also provides decoding function to keep compatibility with Template::"
"Plugin::JSON."
msgstr ""

#. tumbleweed/perl-Template-Tiny/summary
msgid "Template Toolkit reimplemented in as little code as possible"
msgstr ""

#. tumbleweed/perl-Template-Tiny/description
msgid ""
"*Template::Tiny* is a reimplementation of a subset of the functionality from "
"Template Toolkit in as few lines of code as possible.\n"
"\n"
"It is intended for use in light-usage, low-memory, or low-cpu templating "
"situations, where you may need to upgrade to the full feature set in the "
"future, or if you want the retain the familiarity of TT-style templates.\n"
"\n"
"For the subset of functionality it implements, it has fully-compatible "
"template and stash API. All templates used with *Template::Tiny* should be "
"able to be transparently upgraded to full Template Toolkit.\n"
"\n"
"Unlike Template Toolkit, *Template::Tiny* will process templates without a "
"compile phase (but despite this is still quicker, owing to heavy use of the "
"Perl regular expression engine."
msgstr ""

#. tumbleweed/perl-Term-ReadLine-Gnu/description
msgid ""
"This is an implementation of Term::ReadLine using the GNU Readline/History "
"Library.\n"
"\n"
"For basic functions object oriented interface is provided. These are "
"described in the section \"Standard Methods\" and \"Term::ReadLine::Gnu "
"Functions\".\n"
"\n"
"This package also has the interface with the almost all functions and "
"variables which are documented in the GNU Readline/History Library Manual."
msgstr ""

#. tumbleweed/perl-Term-Size-Any/summary
msgid "Retrieve terminal size"
msgstr ""

#. tumbleweed/perl-Term-Size-Any/description
msgid ""
"This is a unified interface to retrieve terminal size. It loads one module "
"of a list of known alternatives, each implementing some way to get the "
"desired terminal information. This loaded module will actually do the job on "
"behalf of 'Term::Size::Any'.\n"
"\n"
"Thus, 'Term::Size::Any' depends on the availability of one of these "
"modules:\n"
"\n"
"    Term::Size           (soon to be supported)     Term::Size::Perl     "
"Term::Size::ReadKey  (soon to be supported)     Term::Size::Win32\n"
"\n"
"This release fallbacks to Term::Size::Win32 if running in Windows 32 "
"systems. For other platforms, it uses the first of Term::Size::Perl, Term::"
"Size or Term::Size::ReadKey which loads successfully. (To be honest, I "
"disabled the fallback to Term::Size and Term::Size::ReadKey which are buggy "
"by now.)"
msgstr ""

#. tumbleweed/perl-Term-Size-Perl/summary
#, fuzzy
msgid "Perl extension for retrieving terminal size (Perl version)"
msgstr "Interface Perl pour objets URI"

#. tumbleweed/perl-Term-Size-Perl/description
msgid ""
"Yet another implementation of 'Term::Size'. Now in pure Perl, with the "
"exception of a C probe run on build time."
msgstr ""

#. tumbleweed/perl-Term-Terminfo/summary
msgid "Access the terminfo database"
msgstr ""

#. tumbleweed/perl-Term-Terminfo/description
msgid ""
"Objects in this class provide access to _terminfo_ database entires.\n"
"\n"
"This database provides information about a terminal, in three separate sets "
"of capabilities. Flag capabilities indicate the presence of a particular "
"ability, feature, or bug simply by their presence. Number capabilities give "
"the size, count or other numeric detail of some feature of the terminal. "
"String capabilities are usually control strings that the terminal will "
"recognise, or send.\n"
"\n"
"Capabilities each have two names; a short name called the capname, and a "
"longer name called the varname. This class provides two sets of methods, one "
"that works on capnames, one that work on varnames.\n"
"\n"
"This module optionally uses _unibilium_ to access the terminfo(5) database, "
"if it is available at compile-time. If not, it will use _<term.h>_ and _-"
"lcurses_. For more detail, see the SEE ALSO section below."
msgstr ""

#. tumbleweed/perl-Test-API/summary
msgid "Test a list of subroutines provided by a module"
msgstr ""

#. tumbleweed/perl-Test-API/description
msgid ""
"This simple test module checks the subroutines provided by a module. This is "
"useful for confirming a planned API in testing and ensuring that other "
"functions aren't unintentionally included via import."
msgstr ""

#. tumbleweed/perl-Test-Base/summary
#, fuzzy
msgid "Data Driven Testing Framework"
msgstr "Bean Scripting Framework"

#. tumbleweed/perl-Test-Class/description
msgid ""
"Test::Class provides a simple way of creating classes and objects to test "
"your code in an xUnit style.\n"
"\n"
"Built using Test::Builder, it was designed to work with other Test::Builder "
"based modules (Test::More, Test::Differences, Test::Exception, etc.).\n"
"\n"
"_Note:_ This module will make more sense, if you are already familiar with "
"the \"standard\" mechanisms for testing perl code. Those unfamiliar with "
"Test::Harness, Test::Simple, Test::More and friends should go take a look at "
"them now. Test::Tutorial is a good starting point."
msgstr ""

#. tumbleweed/perl-Test-Deep/description
msgid ""
"If you don't know anything about automated testing in Perl then you should "
"probably read about Test::Simple and Test::More before preceding. Test::Deep "
"uses the Test::Builder framework.\n"
"\n"
"Test::Deep gives you very flexible ways to check that the result you got is "
"the result you were expecting. At its simplest it compares two structures by "
"going through each level, ensuring that the values match, that arrays and "
"hashes have the same elements and that references are blessed into the "
"correct class. It also handles circular data structures without getting "
"caught in an infinite loop.\n"
"\n"
"Where it becomes more interesting is in allowing you to do something besides "
"simple exact comparisons. With strings, the 'eq' operator checks that 2 "
"strings are exactly equal but sometimes that's not what you want. When you "
"don't know exactly what the string should be but you do know some things "
"about how it should look, 'eq' is no good and you must use pattern matching "
"instead. Test::Deep provides pattern matching for complex data structures\n"
"\n"
"Test::Deep has *_a lot_* of exports. See EXPORTS below."
msgstr ""

#. tumbleweed/perl-Test-DiagINC/summary
msgid "List modules and versions loaded if tests fail"
msgstr ""

#. tumbleweed/perl-Test-DiagINC/description
msgid ""
"Assuming you shipped your module to CPAN with working tests, test failures "
"from at http://www.cpantesters.org/ might be due to platform issues, Perl "
"version issues or problems with dependencies. This module helps you diagnose "
"deep dependency problems by showing you exactly what modules and versions "
"were loaded during a test run."
msgstr ""

#. tumbleweed/perl-Test-Fatal/summary
msgid "Incredibly simple helpers for testing code with exceptions"
msgstr ""

#. tumbleweed/perl-Test-Fatal/description
msgid ""
"Test::Fatal is an alternative to the popular Test::Exception. It does much "
"less, but should allow greater flexibility in testing exception-throwing "
"code with about the same amount of typing.\n"
"\n"
"It exports one routine by default: 'exception'. \n"
"*Achtung!* 'exception' intentionally does not manipulate the call stack. "
"User-written test functions that use 'exception' must be careful to avoid "
"false positives if exceptions use stack traces that show arguments. For a "
"more magical approach involving globally overriding 'caller', see Test::"
"Exception."
msgstr ""

#. tumbleweed/perl-Test-File/description
msgid ""
"This modules provides a collection of test utilities for file attributes.\n"
"\n"
"Some file attributes depend on the owner of the process testing the file in "
"the same way the file test operators do. For instance, root (or super-user "
"or Administrator) may always be able to read files no matter the "
"permissions.\n"
"\n"
"Some attributes don't make sense outside of Unix, either, so some tests "
"automatically skip if they think they won't work on the platform. If you "
"have a way to make these functions work on Windows, for instance, please "
"send me a patch. :) If you want to pretend to be Windows on a non-Windows "
"machine (for instance, to test 'skip()'), you can set the "
"'PRETEND_TO_BE_WINDOWS' environment variable.\n"
"\n"
"The optional NAME parameter for every function allows you to specify a name "
"for the test. If not supplied, a reasonable default will be generated."
msgstr ""

#. tumbleweed/perl-Test-Fork/summary
msgid "Test code which forks"
msgstr ""

#. tumbleweed/perl-Test-Fork/description
msgid ""
"*THIS IS ALPHA CODE!* The implementation is unreliable and the interface is "
"subject to change.\n"
"\n"
"Because each test has a number associated with it, testing code which forks "
"is problematic. Coordinating the test number amongst the parent and child "
"processes is complicated. Test::Fork provides a function to smooth over the "
"complications."
msgstr ""

#. tumbleweed/perl-Test-HTTP-MockServer/summary
msgid "Implement a mock HTTP server for use in tests"
msgstr ""

#. tumbleweed/perl-Test-HTTP-MockServer/description
msgid ""
"Sometimes, when writing a test, you don't have to oportunity to do "
"dependency injection of the type of transport used in a specific API. "
"Sometimes that code willl unequivocally always use actual HTTP and the only "
"control you have is over the host and port to which it will connect.\n"
"\n"
"This class offer a simple way to mock the service being called. It does that "
"by binding to a random port on localhost and allowing you to inspect which "
"port that was. Using a random port means that this can be used by tests "
"running in parallel on the same host.\n"
"\n"
"The socket will be bound and listened on the main test process, such that "
"the lifetime of the connection is defined by the lifetime of the test "
"itself.\n"
"\n"
"Since the socket will be already bound and listened to, the two conntrol "
"methods (start_mock_server and stop_mock_server) fork only for the accept "
"call, which means that it is safe to call start and stop several times "
"during the test in order to change the expectations of the mocked code.\n"
"\n"
"That allows you to easily configure the expectations of the mock server "
"across each step of your test case. On the other hand, it also means that no "
"state is shared between the code running in the mock server and the test "
"code."
msgstr ""

#. tumbleweed/perl-Test-Inter/summary
msgid "Framework for more readable interactive test scripts"
msgstr ""

#. tumbleweed/perl-Test-Kit/summary
msgid "Build custom test packages with only the features you want"
msgstr ""

#. tumbleweed/perl-Test-Kit/description
msgid ""
"Test::Kit allows you to create a single module in your project which gives "
"you access to all of the testing functions you want.\n"
"\n"
"Its primary goal is to reduce boilerplate code that is currently littering "
"the top of all your test files.\n"
"\n"
"It also allows your testing to be more consistent; for example it becomes a "
"trivial change to include Test::FailWarnings in all of your tests, and there "
"is no danger that you forget to include it in a new test."
msgstr ""

#. tumbleweed/perl-Test-Kwalitee/summary
msgid "Test the Kwalitee of a distribution before you release it"
msgstr ""

#. tumbleweed/perl-Test-Kwalitee/description
msgid ""
"Kwalitee is an automatically-measurable gauge of how good your software is. "
"That's very different from quality, which a computer really can't measure in "
"a general sense. (If you can, you've solved a hard problem in computer "
"science.)\n"
"\n"
"In the world of the CPAN, the CPANTS project (CPAN Testing Service; also a "
"funny acronym on its own) measures Kwalitee with several metrics. If you "
"plan to release a distribution to the CPAN -- or even within your own "
"organization -- testing its Kwalitee before creating a release can help you "
"improve your quality as well.\n"
"\n"
"'Test::Kwalitee' and a short test file will do this for you automatically."
msgstr ""

#. tumbleweed/perl-Test-Lib/summary
msgid "Use libraries from a t/lib directory"
msgstr ""

#. tumbleweed/perl-Test-Lib/description
msgid ""
"Searches upward from the calling module for a directory _t_ with a _lib_ "
"directory inside it, and adds it to the module search path. Looks upward up "
"to 5 directories. This is intended to be used in test modules either "
"directly in _t_ or in a subdirectory to find their included testing "
"libraries located in _t/lib_."
msgstr ""

#. tumbleweed/perl-Test-Magpie/summary
msgid "Mocking framework with method stubs and behaviour verification"
msgstr ""

#. tumbleweed/perl-Test-Magpie/description
msgid ""
"Test::Magpie is a test double framework heavily inspired by the Mockito "
"framework for Java, and also the Python-Mockito project. In Mockito, you "
"\"spy\" on objects for their behaviour, rather than being upfront about what "
"should happen. I find this approach to be significantly more flexible and "
"easier to work with than mocking systems like EasyMock, so I created a Perl "
"implementation. \n"
"* Mock objects\n"
"\n"
"Mock objects, represented by Test::Magpie::Mock objects, are objects that "
"pretend to be everything you could ever want them to be. A mock object can "
"have any method called on it, does every roles, and isa subclass of any "
"superclass. This allows you to easily throw a mock object around it will be "
"treated as though it was a real object. \n"
"* Method stubbing\n"
"\n"
"Any method can be called on a mock object, and it will be logged as an "
"invocation. By default, method calls return 'undef' in scalar context or an "
"empty list in list context. Often, though, clients will be interested in the "
"result of calling a method with some arguments. So you may specify how a "
"method stub should respond when it is called. \n"
"* Verify interactions\n"
"\n"
"After calling your concrete code (the code under test) you may want to check "
"that the code did operate correctly on the mock. To do this, you can use "
"verifications to make sure code was called, with correct parameters and the "
"correct amount of times. \n"
"* Argument matching\n"
"\n"
"Magpie gives you some helpful methods to validate arguments passed in to "
"calls. You can check equality between arguments, or consume a general type "
"of argument, or consume multiple arguments. See Test::Magpie::"
"ArgumentMatcher for the juicy details."
msgstr ""

#. tumbleweed/perl-Test-Metrics-Any/summary
msgid "Assert that code produces metrics via L<Metrics::Any>"
msgstr ""

#. tumbleweed/perl-Test-Metrics-Any/description
msgid ""
"This test module helps write unit tests which assert that the code under "
"test reports metrics via Metrics::Any.\n"
"\n"
"Loading this module automatically sets the Metrics::Any::Adapter type to "
"'Test'."
msgstr ""

#. tumbleweed/perl-Test-MockDateTime/summary
msgid "Mock Datetime->Now Calls During Tests"
msgstr ""

#. tumbleweed/perl-Test-MockDateTime/description
msgid ""
"Getting the current time sometimes is not very helpful for testing "
"scenarios. Instead, if you could obtain a known value during the runtime of "
"a testcase will make your results predictable.\n"
"\n"
"Why another Date Mocker? I wanted something simple with a very concise usage "
"pattern and a mocked date should only exist and stay constant inside a "
"scope. After leaving the scope the current time should be back. This lead to "
"this tiny module.\n"
"\n"
"This simple module allows faking a given date and time for the runtime of a "
"subsequent code block. By default the 'on' keyword is exported into the "
"namespace of the test file. The date to get mocked must be in a format that "
"is recognized by DateTime::Format::DateParse.\n"
"\n"
"    on '2013-01-02 03:04:05', sub { ... };\n"
"\n"
"is basically the same as\n"
"\n"
"    {         my $now = DateTime::Format::DateParse-"
">parse_datetime(             '2013-01-02 03:04:05'         );\n"
"\n"
"        local *DateTime::now = sub { $now->clone };\n"
"\n"
"        ... everything from code block above     }\n"
"\n"
"A drawback when relying on this module is that you must know that the module "
"you are testing uses 'DateTime->now' to obtain the current time. =cut"
msgstr ""

#. tumbleweed/perl-Test-Modern/summary
msgid "precision testing for modern perl"
msgstr ""

#. tumbleweed/perl-Test-Modern/description
msgid ""
"Test::Modern provides the best features of the Test::More manpage, the Test::"
"Fatal manpage, the Test::Warnings manpage, the Test::API manpage, the Test::"
"LongString manpage, and the Test::Deep manpage, as well as ideas from the "
"Test::Requires manpage, the Test::DescribeMe manpage, the Test::Moose "
"manpage, and the Test::CleanNamespaces manpage.\n"
"\n"
"Test::Modern also automatically imposes the strict manpage and the warnings "
"manpage on your script, and loads the IO::File manpage. (Much of the same "
"stuff the Modern::Perl manpage does.)\n"
"\n"
"Although Test::Modern is a modern testing framework, it should run fine on "
"pre-modern versions of Perl. It should be easy to install on Perl 5.8.9 and "
"above; and if you can persuade its dependencies to install (not necessarily "
"easy!), should be OK on anything back to Perl 5.6.1."
msgstr ""

#. tumbleweed/perl-Test-NoWarnings/description
msgid ""
"In general, your tests shouldn't produce warnings. This modules causes any "
"warnings to be captured and stored. It automatically adds an extra test that "
"will run when your script ends to check that there were no warnings. If "
"there were any warnings, the test will give a \"not ok\" and diagnostics of "
"where, when and what the warning was, including a stack trace of what was "
"going on when the it occurred.\n"
"\n"
"If some of your tests *are supposed to* produce warnings then you should be "
"capturing and checking them with Test::Warn, that way Test::NoWarnings will "
"not see them and so not complain.\n"
"\n"
"The test is run by an 'END' block in Test::NoWarnings. It will not be run "
"when any forked children exit."
msgstr ""

#. tumbleweed/perl-Test-TCP/summary
#, fuzzy
msgid "Testing TCP program"
msgstr "Programme terminal"

#. tumbleweed/perl-Test-Time/description
msgid ""
"Test::Time can be used to test modules that deal with time. Once you 'use' "
"this module, all references to 'time', 'localtime' and 'sleep' will be "
"internalized. You can set custom time by passing time => number after the "
"'use' statement:\n"
"\n"
"    use Test::Time time => 1;\n"
"\n"
"    my $now = time;    # $now is equal to 1     sleep 300;         # returns "
"immediately, displaying a note     my $then = time;   # $then equals to 301"
msgstr ""

#. tumbleweed/perl-Test-Warn/description
msgid ""
"A good style of Perl programming calls for a lot of diverse regression "
"tests.\n"
"\n"
"This module provides a few convenience methods for testing warning based-"
"code.\n"
"\n"
"If you are not already familiar with the Test::More manpage now would be the "
"time to go take a look."
msgstr ""

#. tumbleweed/perl-Test-YAML/description
msgid "Test::YAML is a subclass of Test::Base with YAML specific support."
msgstr ""

#. tumbleweed/perl-Text-Aligner/summary
msgid "Module to align text"
msgstr ""

#. tumbleweed/perl-Text-CSV/summary
#, fuzzy
msgid "Comma-separated values manipulator (using XS or PurePerl)"
msgstr "Routines de manipulation de dates"

#. tumbleweed/perl-Text-CSV_XS/summary
#, fuzzy
msgid "Comma-separated values manipulation routines"
msgstr "Routines de manipulation de dates"

#. tumbleweed/perl-Text-SimpleTable/summary
msgid "Simple Eyecandy ASCII Tables"
msgstr ""

#. tumbleweed/perl-Text-SimpleTable/description
msgid "Simple eyecandy ASCII tables."
msgstr ""

#. tumbleweed/perl-Text-SimpleTable-AutoWidth/summary
msgid ""
"Text::SimpleTable::AutoWidth - Simple eyecandy ASCII tables with auto-wi[cut]"
msgstr ""

#. tumbleweed/perl-Text-SimpleTable-AutoWidth/description
msgid ""
"Simple eyecandy ASCII tables with auto-selection columns width, as seen in "
"Catalyst."
msgstr ""

#. tumbleweed/perl-Tie-Handle-Offset/summary
msgid "Tied handle that hides the beginning of a file"
msgstr ""

#. tumbleweed/perl-Tie-Handle-Offset/description
msgid ""
"This modules provides a file handle that hides the beginning of a file. "
"After opening, the file is positioned at the offset location. 'seek()' and "
"'tell()' calls are modified to preserve the offset.\n"
"\n"
"For example, 'tell($fh)' will return 0, though the actual file position is "
"at the offset. Likewise, 'seek($fh,80,0)' will seek to 80 bytes from the "
"offset instead of 80 bytes from the actual start of the file."
msgstr ""

#. tumbleweed/perl-Tk/summary
msgid "Graphical user interface toolkit for Perl"
msgstr ""

#. tumbleweed/perl-Tk/description
msgid ""
"This a re-port of a perl interface to Tk8.4. C code is derived from Tcl/"
"Tk8.4.5. It also includes all the C code parts of Tix8.1.4 from SourceForge. "
"The perl code corresponding to Tix's Tcl code is not fully implemented.\n"
"\n"
"Perl API is essentially the same as Tk800 series Tk800.025 but has not been "
"verified as compliant. There ARE differences see pod/804delta.pod."
msgstr ""

#. tumbleweed/perl-Tk-TableMatrix/summary
msgid "Table/Matrix Widget Extension to perl/tk"
msgstr ""

#. tumbleweed/perl-Tk-TableMatrix/description
msgid ""
"Tk::TableMatrix is a table/matrix widget extension to perl/tk for displaying "
"data in a table (or spreadsheet) format."
msgstr ""

#. tumbleweed/perl-Tk/perl-Tk-devel/summary
#, fuzzy
msgid "Development files for perl-Tk"
msgstr "Fichiers de développement pour lzo"

#. tumbleweed/perl-Tk/perl-Tk-devel/description
msgid "Development files for Tk - a graphical user interface toolkit for Perl"
msgstr ""

#. tumbleweed/perl-Try-Tiny/description
msgid ""
"This module provides bare bones 'try'/'catch'/'finally' statements that are "
"designed to minimize common mistakes with eval blocks, and NOTHING else.\n"
"\n"
"This is unlike TryCatch which provides a nice syntax and avoids adding "
"another call stack layer, and supports calling 'return' from the 'try' block "
"to return from the parent subroutine. These extra features come at a cost of "
"a few dependencies, namely Devel::Declare and Scope::Upper which are "
"occasionally problematic, and the additional catch filtering uses Moose type "
"constraints which may not be desirable either.\n"
"\n"
"The main focus of this module is to provide simple and reliable error "
"handling for those having a hard time installing TryCatch, but who still "
"want to write correct 'eval' blocks without 5 lines of boilerplate each "
"time.\n"
"\n"
"It's designed to work as correctly as possible in light of the various "
"pathological edge cases (see BACKGROUND) and to be compatible with any style "
"of error values (simple strings, references, objects, overloaded objects, "
"etc).\n"
"\n"
"If the 'try' block dies, it returns the value of the last statement executed "
"in the 'catch' block, if there is one. Otherwise, it returns 'undef' in "
"scalar context or the empty list in list context. The following examples all "
"assign '\"bar\"' to '$x':\n"
"\n"
"  my $x = try { die \"foo\" } catch { \"bar\" };   my $x = try { die \"foo"
"\" } || \"bar\";   my $x = (try { die \"foo\" }) // \"bar\";\n"
"\n"
"  my $x = eval { die \"foo\" } || \"bar\";\n"
"\n"
"You can add 'finally' blocks, yielding the following:\n"
"\n"
"  my $x;   try { die 'foo' } finally { $x = 'bar' };   try { die 'foo' } "
"catch { warn \"Got a die: $_\" } finally { $x = 'bar' };\n"
"\n"
"'finally' blocks are always executed making them suitable for cleanup code "
"which cannot be handled using local. You can add as many 'finally' blocks to "
"a given 'try' block as you like.\n"
"\n"
"Note that adding a 'finally' block without a preceding 'catch' block "
"suppresses any errors. This behaviour is consistent with using a standalone "
"'eval', but it is not consistent with 'try'/'finally' patterns found in "
"other programming languages, such as Java, Python, Javascript or C#. If you "
"learned the 'try'/'finally' pattern from one of these languages, watch out "
"for this."
msgstr ""

#. tumbleweed/perl-Twiggy/summary
msgid "AnyEvent HTTP server for PSGI"
msgstr ""

#. tumbleweed/perl-Twiggy/description
msgid ""
"Twiggy is a lightweight and fast HTTP server with unique features such as: \n"
"* PSGI\n"
"\n"
"Can run any PSGI applications. Fully supports _psgi.nonblocking_ and _psgi."
"streaming_ interfaces. \n"
"* AnyEvent\n"
"\n"
"This server uses AnyEvent and runs in a non-blocking event loop, so it's "
"best to run event-driven web applications that runs I/O bound jobs or "
"delayed responses such as long-poll, WebSocket or streaming content (server "
"push).\n"
"\n"
"This software used to be called Plack::Server::AnyEvent but was renamed to "
"Twiggy. \n"
"* Fast header parser\n"
"\n"
"Uses XS/C based HTTP header parser for the best performance. (optional, "
"install the HTTP::Parser::XS module to enable it; see also Plack::HTTPParser "
"for more information). \n"
"* Lightweight and Fast\n"
"\n"
"The memory required to run twiggy is 6MB and it can serve more than 4500 req/"
"s with a single process on Perl 5.10 with MacBook Pro 13\" late 2009. \n"
"* Superdaemon aware\n"
"\n"
"Supports Server::Starter for hot deploy and graceful restarts.\n"
"\n"
"To use it, instead of the usual:\n"
"\n"
"    plackup --server Twiggy --port 8111 app.psgi\n"
"\n"
"install Server::Starter and use:\n"
"\n"
"    start_server --port 8111 -- plackup --server Twiggy app.psgi"
msgstr ""

#. tumbleweed/perl-Type-Tiny/summary
msgid "Tiny, yet Moo(se)-compatible type constraint"
msgstr ""

#. tumbleweed/perl-Type-Tiny/description
msgid ""
"This documents the internals of the Type::Tiny class. Type::Tiny::Manual is "
"a better starting place if you're new.\n"
"\n"
"Type::Tiny is a small class for creating Moose-like type constraint objects "
"which are compatible with Moo, Moose and Mouse."
msgstr ""

#. tumbleweed/perl-Types-Path-Tiny/summary
msgid "Path::Tiny types and coercions for Moose and Moo"
msgstr ""

#. tumbleweed/perl-Types-Path-Tiny/description
msgid ""
"This module provides Path::Tiny types for Moose, Moo, etc.\n"
"\n"
"It handles two important types of coercion:\n"
"\n"
"  * coercing objects with overloaded stringification\n"
"\n"
"  * coercing to absolute paths\n"
"\n"
"It also can check to ensure that files or directories exist."
msgstr ""

#. tumbleweed/perl-UNIVERSAL-ref/summary
msgid "Turns ref() into a multimethod"
msgstr ""

#. tumbleweed/perl-UNIVERSAL-ref/description
msgid ""
"This module changes the behavior of the builtin function ref(). If ref() is "
"called on an object that has requested an overloaded ref, the object's '-"
">ref' method will be called and its return value used instead."
msgstr ""

#. tumbleweed/perl-URI-Query/summary
msgid "Class providing URI query string manipulation"
msgstr ""

#. tumbleweed/perl-URI-Query/description
msgid ""
"URI::Query provides simple URI query string manipulation, allowing you to "
"create and manipulate URI query strings from GET and POST requests in web "
"applications. This is primarily useful for creating links where you wish to "
"preserve some subset of the parameters to the current request, and "
"potentially add or replace others. Given a query string this is doable with "
"regexes, of course, but making sure you get the anchoring and escaping right "
"is tedious and error-prone - this module is simpler."
msgstr ""

#. tumbleweed/perl-URI-cpan/summary
#. tumbleweed/perl-URI-cpan/description
msgid "URLs that refer to things on the CPAN"
msgstr ""

#. tumbleweed/perl-URI-ws/summary
#, fuzzy
msgid "WebSocket support for URI package"
msgstr "Support des gadgets google pour Plasma"

#. tumbleweed/perl-URI-ws/description
msgid ""
"After this module is installed, the URI package provides the same set of "
"methods for WebSocket URIs as it does for HTTP ones. For secure WebSockets, "
"see URI::wss."
msgstr ""

#. tumbleweed/perl-UUID/summary
msgid "DCE compatible Universally Unique Identifier library for Perl"
msgstr ""

#. tumbleweed/perl-UUID/description
msgid ""
"The UUID library is used to generate unique identifiers for objects that may "
"be accessible beyond the local system. For instance, they could be used to "
"generate unique HTTP cookies across multiple web servers without "
"communication between the servers, and without fear of a name clash.\n"
"\n"
"The generated UUIDs can be reasonably expected to be unique within a system, "
"and unique across all systems, and are compatible with those created by the "
"Open Software Foundation (OSF) Distributed Computing Environment (DCE) "
"utility uuidgen."
msgstr ""

#. tumbleweed/perl-Unicode-EastAsianWidth/summary
msgid "East Asian Width properties"
msgstr ""

#. tumbleweed/perl-Unicode-EastAsianWidth/description
msgid ""
"This module provide user-defined Unicode properties that deal with width "
"status of East Asian characters, as specified in http://www.unicode.org/"
"unicode/reports/tr11/.\n"
"\n"
"It exports the following functions to the caller's scope, to be used by "
"Perl's Unicode matching system: 'InEastAsianFullwidth', "
"'InEastAsianHalfwidth', 'InEastAsianAmbiguous', 'InEastAsianNarrow' "
"'InEastAsianWide', 'InEastAsianNeutral'.\n"
"\n"
"In accord to TR11 cited above, two additional context-sensitive properties "
"are exported: 'InFullwidth' (union of 'Fullwidth' and 'Wide') and "
"'InHalfwidth' (union of 'Halfwidth', 'Narrow' and 'Neutral').\n"
"\n"
"_Ambiguous_ characters are treated by default as part of 'InHalfwidth', but "
"you can modify this behaviour by assigning a true value to '$Unicode::"
"EastAsianWidth::EastAsian' at compile time within a 'BEGIN' block before "
"loading this module:\n"
"\n"
"    BEGIN { $Unicode::EastAsianWidth::EastAsian = 1; }     use Unicode::"
"EastAsianWidth;\n"
"\n"
"Setting '$Unicode::EastAsianWidth::EastAsian' at run-time used to work on "
"Perl versions between 5.8 and 5.14 due to an implementation detail, but it "
"will no longer work on Perl 5.16 and later versions, and hence is not "
"recommended."
msgstr ""

#. tumbleweed/perl-Unicode-Normalize/description
msgid ""
"Parameters:\n"
"\n"
"'$string' is used as a string under character semantics (see perlunicode).\n"
"\n"
"'$code_point' should be an unsigned integer representing a Unicode code "
"point.\n"
"\n"
"Note: Between XSUB and pure Perl, there is an incompatibility about the "
"interpretation of '$code_point' as a decimal number. XSUB converts "
"'$code_point' to an unsigned integer, but pure Perl does not. Do not use a "
"floating point nor a negative sign in '$code_point'."
msgstr ""

#. tumbleweed/perl-User-Identity/summary
msgid "Maintain info about a physical person"
msgstr ""

#. tumbleweed/perl-User-Identity/description
msgid ""
"The 'User-Identity' distribution is created to maintain a set of "
"informational objects which are related to one user. The 'User::Identity' "
"module tries to be smart providing defaults, conversions and often required "
"combinations.\n"
"\n"
"The identities are not implementing any kind of storage, and can therefore "
"be created by any simple or complex Perl program. This way, it is more "
"flexible than an XML file to store the data. For instance, you can decide to "
"store the data with Data::Dumper, Storable, DBI, AddressBook or whatever. "
"Extension to simplify this task are still to be developed.\n"
"\n"
"If you need more kinds of user information, then please contact the module "
"author.\n"
"\n"
"Extends \"DESCRIPTION\" in User::Identity::Item."
msgstr ""

#. tumbleweed/perl-WWW-Mechanize/description
msgid ""
"'WWW::Mechanize', or Mech for short, is a Perl module for stateful "
"programmatic web browsing, used for automating interaction with websites.\n"
"\n"
"Features include: \n"
"* All HTTP methods\n"
"* High-level hyperlink and HTML form support, without having to parse   HTML "
"yourself\n"
"* SSL support\n"
"* Automatic cookies\n"
"* Custom HTTP headers\n"
"* Automatic handling of redirections\n"
"* Proxies\n"
"* HTTP authentication\n"
"\n"
"Mech is well suited for use in testing web applications. If you use one of "
"the Test::*, like Test::HTML::Lint modules, you can check the fetched "
"content and use that as input to a test call."
msgstr ""

#. tumbleweed/perl-Web-Scraper/summary
msgid "Web Scraping Toolkit using HTML and CSS Selectors or XPath expressions"
msgstr ""

#. tumbleweed/perl-Web-Scraper/description
msgid ""
"Web::Scraper is a web scraper toolkit, inspired by Ruby's equivalent Scrapi. "
"It provides a DSL-ish interface for traversing HTML documents and returning "
"a neatly arranged Perl data structure.\n"
"\n"
"The _scraper_ and _process_ blocks provide a method to define what segments "
"of a document to extract. It understands HTML and CSS Selectors as well as "
"XPath expressions."
msgstr ""

#. tumbleweed/perl-XML-Feed/summary
msgid "Syndication feed parser and auto-discovery"
msgstr ""

#. tumbleweed/perl-XML-Feed/description
msgid ""
"_XML::Feed_ is a syndication feed parser for both RSS and Atom feeds. It "
"also implements feed auto-discovery for finding feeds, given a URI.\n"
"\n"
"_XML::Feed_ supports the following syndication feed formats: \n"
"* * RSS 0.91 \n"
"* * RSS 1.0 \n"
"* * RSS 2.0 \n"
"* * Atom\n"
"\n"
"The goal of _XML::Feed_ is to provide a unified API for parsing and using "
"the various syndication formats. The different flavors of RSS and Atom "
"handle data in different ways: date handling; summaries and content; "
"escaping and quoting; etc. This module attempts to remove those differences "
"by providing a wrapper around the formats and the classes implementing those "
"formats (XML::RSS and XML::Atom::Feed). For example, dates are handled "
"differently in each of the above formats. To provide a unified API for date "
"handling, _XML::Feed_ converts all date formats transparently into DateTime "
"objects, which it then returns to the caller."
msgstr ""

#. tumbleweed/perl-XML-Parser/summary
#, fuzzy
msgid "Perl module for parsing XML documents"
msgstr "Interface Perl pour objets URI"

#. tumbleweed/perl-XML-Parser/description
msgid ""
"This module provides ways to parse XML documents. It is built on top of XML::"
"Parser::Expat, which is a lower level interface to James Clark's expat "
"library. Each call to one of the parsing methods creates a new instance of "
"XML::Parser::Expat which is then used to parse the document. Expat options "
"may be provided when the XML::Parser object is created. These options are "
"then passed on to the Expat object on each parse call. They can also be "
"given as extra arguments to the parse methods, in which case they override "
"options given at XML::Parser creation time.\n"
"\n"
"The behavior of the parser is controlled either by 'STYLES' and/or "
"'HANDLERS' options, or by setHandlers method. These all provide mechanisms "
"for XML::Parser to set the handlers needed by XML::Parser::Expat. If neither "
"'Style' nor 'Handlers' are specified, then parsing just checks the document "
"for being well-formed.\n"
"\n"
"When underlying handlers get called, they receive as their first parameter "
"the _Expat_ object, not the Parser object."
msgstr ""

#. tumbleweed/perl-XML-RSS/summary
msgid "Creates and updates RSS files"
msgstr ""

#. tumbleweed/perl-XML-RSS/description
msgid ""
"This module provides a basic framework for creating and maintaining RDF Site "
"Summary (RSS) files. This distribution also contains many examples that "
"allow you to generate HTML from an RSS, convert between 0.9, 0.91, 1.0, and "
"2.0 version, and other nifty things. This might be helpful if you want to "
"include news feeds on your Web site from sources like Slashdot and Freshmeat "
"or if you want to syndicate your own content.\n"
"\n"
"XML::RSS currently supports versions at http://www.rssboard.org/rss-0-9-0, "
"at http://www.rssboard.org/rss-0-9-1, at http://web.resource.org/rss/1.0/, "
"and at http://www.rssboard.org/rss-2-0 of RSS.\n"
"\n"
"RSS was originally developed by Netscape as the format for Netscape "
"Netcenter channels, however, many Web sites have since adopted it as a "
"simple syndication format. With the advent of RSS 1.0, users are now able to "
"syndication many different kinds of content including news headlines, "
"threaded messages, products catalogs, etc. \n"
"*Note:* In order to parse and generate dates (such as 'pubDate' and 'dc:"
"date') it is recommended to use DateTime::Format::Mail and DateTime::Format::"
"W3CDTF , which is what XML::RSS uses internally and requires. It should also "
"be possible to pass DateTime objects which will be formatted accordingly. E."
"g:\n"
"\n"
"    use DateTime ();\n"
"\n"
"    my $dt = DateTime->from_epoch(epoch => 1_500_000_000);\n"
"\n"
"    $rss->channel(         pubDate => "
"$dt,         .         .         .     );"
msgstr ""

#. tumbleweed/perl-XML-SAX/summary
msgid "Simple API for XML"
msgstr ""

#. tumbleweed/perl-XML-SAX/description
msgid ""
"XML::SAX is a SAX parser access API for Perl. It includes classes and APIs "
"required for implementing SAX drivers, along with a factory class for "
"returning any SAX parser installed on the user's system."
msgstr ""

#. tumbleweed/perl-XML-SAX-Expat/description
msgid ""
"This is an implementation of a SAX2 driver sitting on top of Expat (XML::"
"Parser) which Ken MacLeod posted to perl-xml and which I have updated.\n"
"\n"
"It is still incomplete, though most of the basic SAX2 events should be "
"available. The SAX2 spec is currently available from http://perl-xml."
"sourceforge.net/perl-sax/.\n"
"\n"
"A more friendly URL as well as a PODification of the spec are in the works."
msgstr ""

#. tumbleweed/perl-XS-Parse-Keyword/summary
msgid "XS functions to assist in parsing keyword syntax"
msgstr ""

#. tumbleweed/perl-XS-Parse-Keyword/description
msgid ""
"This module provides some XS functions to assist in writing syntax modules "
"that provide new perl-visible syntax, primarily for authors of keyword "
"plugins using the 'PL_keyword_plugin' hook mechanism. It is unlikely to be "
"of much use to anyone else; and highly unlikely to be any use when writing "
"perl code using these. Unless you are writing a keyword plugin using XS, "
"this module is not for you.\n"
"\n"
"This module is also currently experimental, and the design is still evolving "
"and subject to change. Later versions may break ABI compatibility, requiring "
"changes or at least a rebuild of any module that depends on it."
msgstr ""

#. tumbleweed/perl-XString/summary
msgid "Isolated String helpers from B"
msgstr ""

#. tumbleweed/perl-XString/description
msgid ""
"XString provides the B string helpers in one isolated package. Right now "
"only cstring and perlstring are available."
msgstr ""

#. tumbleweed/perl-YAML-LibYAML-API/summary
#, fuzzy
msgid "Wrapper around the C libyaml library"
msgstr "Interface Perl vers la bibliothèque UULib"

#. tumbleweed/perl-YAML-LibYAML-API/description
msgid ""
"This module provides a thin wrapper around the C libyaml API.\n"
"\n"
"Currently it provides functions for parsing and emitting events.\n"
"\n"
"libyaml also provides a loader/dumper API to load/dump YAML into a list of "
"nodes. There's no wrapper for these functions yet.\n"
"\n"
"This is just one of the first releases. The function names will eventually "
"be changed.\n"
"\n"
"The sources of 'libyaml-dev' are included in this distribution. You can "
"build this module with the system libyaml instead, if you remove the libyaml "
"sources and call 'Makefile.PL' with 'WITH_SYSTEM_LIBYAML=1'."
msgstr ""

#. tumbleweed/perl-YAML-PP-LibYAML/summary
msgid "Faster parsing for YAML::PP"
msgstr ""

#. tumbleweed/perl-YAML-PP-LibYAML/description
msgid ""
"YAML::PP::LibYAML is a subclass of YAML::PP. Instead of using YAML::PP::"
"Parser as a the backend parser, it uses YAML::PP::LibYAML::Parser which "
"calls YAML::LibYAML::API, an XS wrapper around the 'C libyaml'."
msgstr ""

#. tumbleweed/perl-YAML-Syck/summary
msgid "Perl YAML loader and dumper"
msgstr ""

#. tumbleweed/perl-common-sense/summary
msgid "Save a tree AND a kitten, use common::sense!"
msgstr ""

#. tumbleweed/perl-common-sense/description
msgid ""
"   “Nothing is more fairly distributed than common sense: no one thinks    "
"he needs more of it than he already has.”\n"
"\n"
"   – René Descartes\n"
"\n"
"This module implements some sane defaults for Perl programs, as defined by "
"two typical (or not so typical - use your common sense) specimens of Perl "
"coders. In fact, after working out details on which warnings and strict "
"modes to enable and make fatal, we found that we (and our code written so "
"far, and others) fully agree on every option, even though we never used "
"warnings before, so it seems this module indeed reflects a \"common\" sense "
"among some long-time Perl coders.\n"
"\n"
"The basic philosophy behind the choices made in common::sense can be "
"summarised as: \"enforcing strict policies to catch as many bugs as "
"possible, while at the same time, not limiting the expressive power "
"available to the programmer\".\n"
"\n"
"Two typical examples of how this philosophy is applied in practise is the "
"handling of uninitialised and malloc warnings: \n"
"* _uninitialised_\n"
"\n"
"'undef' is a well-defined feature of perl, and enabling warnings for using "
"it rarely catches any bugs, but considerably limits you in what you can do, "
"so uninitialised warnings are disabled. \n"
"* _malloc_\n"
"\n"
"Freeing something twice on the C level is a serious bug, usually causing "
"memory corruption. It often leads to side effects much later in the program "
"and there are no advantages to not reporting this, so malloc warnings are "
"fatal by default.\n"
"\n"
"Unfortunately, there is no fine-grained warning control in perl, so often "
"whole groups of useful warnings had to be excluded because of a single "
"useless warning (for example, perl puts an arbitrary limit on the length of "
"text you can match with some regexes before emitting a warning, making the "
"whole 'regexp' category useless).\n"
"\n"
"What follows is a more thorough discussion of what this module does, and why "
"it does it, and what the advantages (and disadvantages) of this approach are."
msgstr ""

#. tumbleweed/perl-experimental/description
msgid ""
"This pragma provides an easy and convenient way to enable or disable "
"experimental features.\n"
"\n"
"Every version of perl has some number of features present but considered "
"\"experimental.\" For much of the life of Perl 5, this was only a "
"designation found in the documentation. Starting in Perl v5.10.0, and more "
"aggressively in v5.18.0, experimental features were placed behind pragmata "
"used to enable the feature and disable associated warnings.\n"
"\n"
"The 'experimental' pragma exists to combine the required incantations into a "
"single interface stable across releases of perl. For every experimental "
"feature, this should enable the feature and silence warnings for the "
"enclosing lexical scope:\n"
"\n"
"  use experimental 'feature-name';"
msgstr ""

#. tumbleweed/perl-ldap/summary
#, fuzzy
msgid "Perl::ldap Perl module"
msgstr "Module Perl ChaSen"

#. tumbleweed/perl-ldap/description
#, fuzzy
msgid "perl::ldap Perl module"
msgstr "Module Perl ChaSen"

#. tumbleweed/perl-local-lib/summary
msgid "Create and use a local lib/ for perl modules with PERL5LIB"
msgstr ""

#, fuzzy
#~ msgid "A persistence framework for session data"
#~ msgstr "Mémoire persistante pour arbitrage des données"

#, fuzzy
#~ msgid "Get, Unpack, Build and Install Modules From Cpan"
#~ msgstr "Modules Palm pilote perl"

#, fuzzy
#~ msgid "Git-Compatible Config File Parsing"
#~ msgstr "La configuration de %s a échoué."

#, fuzzy
#~ msgid "Collection of Low-Level Debug Facilities"
#~ msgstr "Les HOWTO du Projet de Documentation Linux (en anglais, ASCII)"

#, fuzzy
#~ msgid "More Sensible Way to Change Directories"
#~ msgstr "Un module pour lire les fichiers de configuration .ini"

#, fuzzy
#~ msgid "Perl interface to the 2.x series of the GTK+ library"
#~ msgstr ""
#~ "Interface Perl donnant accès à une partie de la bibliothèque de "
#~ "compression info-zip zlib"

#, fuzzy
#~ msgid "Perl extension for scrubbing/sanitizing html"
#~ msgstr "Interface Perl pour objets URI"

#, fuzzy
#~ msgid "IO::Stty Perl module"
#~ msgstr "IO::Socket::SSL Perl Module"

#, fuzzy
#~ msgid ""
#~ "ExifTool is a customisable set of Perl modules plus a full-featured "
#~ "application for reading and writing meta information in a wide variety of "
#~ "files, including the maker note information of many digital cameras by "
#~ "various manufacturers such as Canon, Casio, FujiFilm, GE, HP, JVC/Victor, "
#~ "Kodak, Leaf, Minolta/Konica-Minolta, Nikon, Olympus/Epson, Panasonic/"
#~ "Leica, Pentax/Asahi, Reconyx, Ricoh, Samsung, Sanyo, Sigma/Foveon and "
#~ "Sony."
#~ msgstr ""
#~ "ExifTool est un module Perl fournissant applicatione en ligne de commande "
#~ "pour lire et modifier les meta-informations de fichiers graphiques. Il "
#~ "reconnait EXIF, GPS, IPTC, XMP, JFIF, GeoTIFF, ICC Profile, Photoshop "
#~ "IRB, et ID3 ainsi que les balises propriétaires de la plupart des "
#~ "manufacturiers d'appareils photo comme Canon, Casio, FujiFilm, Kodak, "
#~ "Leaf, Minolta/Konica-Minolta, Nikon, Olympus/Epson, Panasonic/Leica, "
#~ "Pentax/Asahi, Ricoh, Sanyo, et Sigma/Foveon."

#, fuzzy
#~ msgid "Pure-Perl Implementation of the Ripe Database Client"
#~ msgstr "Implémentation du démon d'identification RFC1413"

#, fuzzy
#~ msgid "Pango Perl module"
#~ msgstr "Modules Palm pilote perl"

#, fuzzy
#~ msgid "Formatter for Spellchecking Pod"
#~ msgstr "Support de la langue polonaise pour KDE"

#, fuzzy
#~ msgid "Perl interface for the sendmsg/recvmsg functions"
#~ msgstr "Interface perl pour ImageMagick"

#, fuzzy
#~ msgid "require() modules from a variable"
#~ msgstr "Modules du noyau (pilotes matériel)"

#, fuzzy
#~ msgid "Perl module XML::XSLT"
#~ msgstr "Perl module XML::XSLT"

#, fuzzy
#~ msgid "Perl bindings for the Qpid messaging framework"
#~ msgstr "Environnement de bureau KDE pour serveur"

#, fuzzy
#~ msgid "Perl bindings for the Qpid messaging framework."
#~ msgstr "Environnement de bureau KDE pour serveur"

#, fuzzy
#~ msgid "Perl interface to the uulib library (a.k.a. uudeview/uuenview)"
#~ msgstr "Interface Perl vers la bibliothèque UULib"

#, fuzzy
#~ msgid "Routines for Manipulating Stashes"
#~ msgstr "Outils pour le traitement de fichiers PostScript."

#, fuzzy
#~ msgid "Perl bindings needed for the Qpid messaging framework."
#~ msgstr "Environnement de bureau KDE pour serveur"

#, fuzzy
#~ msgid "An Autoload-Capable Interface Module for libmcrypt"
#~ msgstr "Un module d'interface pour le libmcrypt"

#, fuzzy
#~ msgid "Perl interface to the GNU Aspell library"
#~ msgstr "Interface python pourla bibliothèque gdbm"

#, fuzzy
#~ msgid "This is a Perl module to parse XSL Transformational sheets."
#~ msgstr ""
#~ "Plusieurs modules qui traitent les informations à partir de documents "
#~ "HTML."

#, fuzzy
#~ msgid "PerlQt kdebindings library"
#~ msgstr "Interface Perl vers la bibliothèque UULib"

#, fuzzy
#~ msgid "Development libraries for Perl-Qt4"
#~ msgstr "fichiers de développement pour fftw"

#, fuzzy
#~ msgid ""
#~ "This package contains development files for the Perl bindings for the Qt4 "
#~ "libraries."
#~ msgstr "Ce paquet contient des logiciels clients pour MySQL."

#, fuzzy
#~ msgid "Class::C3::Componentised Perl module"
#~ msgstr "Module Perl ChaSen"

#, fuzzy
#~ msgid "Various e-mail related modules"
#~ msgstr "Modules Palm pilote perl"

#, fuzzy
#~ msgid "Pure Perl YAML Implementation"
#~ msgstr "Gestion des préférences"

#, fuzzy
#~ msgid "Basic utilities for writing tests."
#~ msgstr "Utilitaires de base pour le bureau GNOME 2.x"

#, fuzzy
#~ msgid "Perl extension for comparing XML documents."
#~ msgstr "Interface Perl pour objets URI"

#, fuzzy
#~ msgid "The World-Wide-Web library for Perl"
#~ msgstr "Outil pour la création de bibliothèques partagées"

#, fuzzy
#~ msgid "A selection of utilities for data and data types"
#~ msgstr "Environnement de bureau KDE"

#, fuzzy
#~ msgid "Perl Date-Calc Module"
#~ msgstr "Modules Perl Date-Calc"

#, fuzzy
#~ msgid ""
#~ "This package consists of a C library and a Perl module (which uses the C "
#~ "library, internally) for all kinds of date calculations based on the "
#~ "Gregorian calendar (the one used in all western countries today), thereby "
#~ "complying with all relevant norms and standards: ISO/R 2015-1971, DIN "
#~ "1355 and, to some extent, ISO 8601 (where applicable).\n"
#~ "\n"
#~ "(See also http://www.engelschall.com/u/sb/download/Date-Calc/DIN1355/ for "
#~ "a scan of part of the \"DIN 1355\" document (in German)).\n"
#~ "\n"
#~ "The module of course handles year numbers of 2000 and above correctly "
#~ "(\"Year 2000\" or \"Y2K\" compliance) -- actually all year numbers from 1 "
#~ "to the largest positive integer representable on your system (which is at "
#~ "least 32767) can be dealt with.\n"
#~ "\n"
#~ "Note that this package EXTRAPOLATES the Gregorian calendar BACK until the "
#~ "year 1 A.D. -- even though the Gregorian calendar was only adopted in "
#~ "1582 by most (not all) European countries, in obedience to the "
#~ "corresponding decree of catholic pope Gregor I in that year.\n"
#~ "\n"
#~ "Some (mainly protestant) countries continued to use the Julian calendar "
#~ "(used until then) until as late as the beginning of the 20th century.\n"
#~ "\n"
#~ "Finally, note that this package is not intended to do everything you "
#~ "could ever imagine automagically for you; it is rather intended to serve "
#~ "as a toolbox (in the best of UNIX spirit and traditions) which should, "
#~ "however, always get you where you want to go."
#~ msgstr ""
#~ "Ce paquet contient une bibliothèque C et un module Perl pour divers "
#~ "calculs de dates se basant sur le calendrier grégorien. Il est conforme à "
#~ "toutes les normes et tous les standards importants tels que ISO/R "
#~ "2015-1971, DIN 1355 et partiellement à ISO 8601.\n"
#~ "\n"
#~ "Ce paquet n'a pas le bogue de l'an 2000."

#, fuzzy
#~ msgid "Perl extension interface for libcurl"
#~ msgstr "Pybliographer pour bases de données bibliographiques"

#, fuzzy
#~ msgid "A set of modules for parsing and evaluating XPath statements"
#~ msgstr "Module pour créer des entites MIME"

#, fuzzy
#~ msgid ""
#~ "ExifTool is a customizable set of Perl modules plus a full-featured "
#~ "application for reading and writing meta information in a wide variety of "
#~ "files, including the maker note information of many digital cameras by "
#~ "various manufacturers such as Canon, Casio, FujiFilm, GE, HP, JVC/Victor, "
#~ "Kodak, Leaf, Minolta/Konica-Minolta, Nikon, Olympus/Epson, Panasonic/"
#~ "Leica, Pentax/Asahi, Reconyx, Ricoh, Samsung, Sanyo, Sigma/Foveon and "
#~ "Sony."
#~ msgstr ""
#~ "ExifTool est un module Perl fournissant applicatione en ligne de commande "
#~ "pour lire et modifier les meta-informations de fichiers graphiques. Il "
#~ "reconnait EXIF, GPS, IPTC, XMP, JFIF, GeoTIFF, ICC Profile, Photoshop "
#~ "IRB, et ID3 ainsi que les balises propriétaires de la plupart des "
#~ "manufacturiers d'appareils photo comme Canon, Casio, FujiFilm, Kodak, "
#~ "Leaf, Minolta/Konica-Minolta, Nikon, Olympus/Epson, Panasonic/Leica, "
#~ "Pentax/Asahi, Ricoh, Sanyo, et Sigma/Foveon."

#, fuzzy
#~ msgid ""
#~ "Highly Customizable Perl App for Reading and Writing Meta Information in "
#~ "Files"
#~ msgstr ""
#~ "Un script Perl hautement configurable pour lire et modifier des méta-"
#~ "informations dans des fichiers"

#, fuzzy
#~ msgid ""
#~ "Module XBase provides access to XBase (dBase, Fox*) database files, "
#~ "namely dbf, dbt, fpt, ndx, ntx, mdx, idx and cdx."
#~ msgstr "Accès au fichiers xBase"

#, fuzzy
#~ msgid "Persistent session data in CGI applications"
#~ msgstr "La recherche de l'application su a échoué"

#, fuzzy
#~ msgid "Portable implementation of the `which' utility"
#~ msgstr "Quelques programmes GNU importants"

#, fuzzy
#~ msgid "Provides Access to XBase Files"
#~ msgstr "Permet l'accès aux fichiers Xbase"

#, fuzzy
#~ msgid "Provides access to time-delayed stockquotes"
#~ msgstr "Permet l'accès aux fichiers Xbase"

#, fuzzy
#~ msgid "a module to read Mozilla URL history files"
#~ msgstr "Module perl pour lire les fichier TNEF"

#, fuzzy
#~ msgid "cpanfile support for EUMM"
#~ msgstr "Support XML pour castor"

#, fuzzy
#~ msgid "lightweight exporting of functions and variables"
#~ msgstr "Langage de scripts basé sur Java"
